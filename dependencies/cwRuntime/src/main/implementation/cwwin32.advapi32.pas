{$ifdef license}
(*
  Copyright 2020 ChapmanWorld LLC ( https://chapmanworld.com )

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice,
     this list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation and/or
     other materials provided with the distribution.

  3. Neither the name of the copyright holder nor the names of its contributors may be
     used to endorse or promote products derived from this software without specific prior
     written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*)
{$endif}
/// <remarks>
///   cwWin32.xxx represents an incomplete Win32 API binding.
/// </remarks>
unit cwWin32.Advapi32;
{$ifdef fpc}{$mode delphiunicode}{$endif}

interface
{$ifdef MSWINDOWS}
uses
  cwWin32.Types;

const
  cLibName = 'advapi32.dll';

// Report generated by PE Explorer 1.99 (http://www.heaventools.com)
// File name: C:\Windows\System32\advapi32.dll
// Created  : 23.02.2017 00:39
// Type     : Exports


// ADVAPI32.1; Index 1000;		Information not available
// I_ScGetCurrentGroupStateW; Index 1001;	Information not available
// A_SHAFinal; Index 1002;		Information not available
// A_SHAInit; Index 1003;		Information not available
// A_SHAUpdate; Index 1004;		Information not available
// AccessCheckByTypeResultListAndAuditAlarmByHandleA; Index 1015;	Information not available
// AccessCheckByTypeResultListAndAuditAlarmByHandleW; Index 1016;	Information not available
// AddConditionalAce; Index 1028;	Information not available
// AddMandatoryAce; Index 1029;		Information not available
// AddUsersToEncryptedFile; Index 1030;	Information not available
// AddUsersToEncryptedFileEx; Index 1031;	Information not available
// AuditComputeEffectivePolicyBySid; Index 1038;	Information not available
// AuditComputeEffectivePolicyByToken; Index 1039;	Information not available
// AuditEnumerateCategories; Index 1040;	Information not available
// AuditEnumeratePerUserPolicy; Index 1041;	Information not available
// AuditEnumerateSubCategories; Index 1042;	Information not available
// AuditFree; Index 1043;		Information not available
// AuditLookupCategoryGuidFromCategoryId; Index 1044;	Information not available
// AuditLookupCategoryIdFromCategoryGuid; Index 1045;	Information not available
// AuditLookupCategoryNameA; Index 1046;	Information not available
// AuditLookupCategoryNameW; Index 1047;	Information not available
// AuditLookupSubCategoryNameA; Index 1048;	Information not available
// AuditLookupSubCategoryNameW; Index 1049;	Information not available
// AuditQueryGlobalSaclA; Index 1050;	Information not available
// AuditQueryGlobalSaclW; Index 1051;	Information not available
// AuditQueryPerUserPolicy; Index 1052;	Information not available
// AuditQuerySecurity; Index 1053;	Information not available
// AuditQuerySystemPolicy; Index 1054;	Information not available
// AuditSetGlobalSaclA; Index 1055;	Information not available
// AuditSetGlobalSaclW; Index 1056;	Information not available
// AuditSetPerUserPolicy; Index 1057;	Information not available
// AuditSetSecurity; Index 1058;	Information not available
// AuditSetSystemPolicy; Index 1059;	Information not available
// BaseRegCloseKey; Index 1062;		Information not available
// BaseRegCreateKey; Index 1063;	Information not available
// BaseRegDeleteKeyEx; Index 1064;	Information not available
// BaseRegDeleteValue; Index 1065;	Information not available
// BaseRegFlushKey; Index 1066;		Information not available
// BaseRegGetVersion; Index 1067;	Information not available
// BaseRegLoadKey; Index 1068;		Information not available
// BaseRegOpenKey; Index 1069;		Information not available
// BaseRegRestoreKey; Index 1070;	Information not available
// BaseRegSaveKeyEx; Index 1071;	Information not available
// BaseRegSetKeySecurity; Index 1072;	Information not available
// BaseRegSetValue; Index 1073;		Information not available
// BaseRegUnLoadKey; Index 1074;	Information not available
// BuildExplicitAccessWithNameA; Index 1075;	Information not available
// BuildExplicitAccessWithNameW; Index 1076;	Information not available
// BuildImpersonateExplicitAccessWithNameA; Index 1077;	Information not available
// BuildImpersonateExplicitAccessWithNameW; Index 1078;	Information not available
// BuildImpersonateTrusteeA; Index 1079;	Information not available
// BuildImpersonateTrusteeW; Index 1080;	Information not available
// BuildSecurityDescriptorA; Index 1081;	Information not available
// BuildSecurityDescriptorW; Index 1082;	Information not available
// BuildTrusteeWithNameA; Index 1083;	Information not available
// BuildTrusteeWithNameW; Index 1084;	Information not available
// BuildTrusteeWithObjectsAndNameA; Index 1085;	Information not available
// BuildTrusteeWithObjectsAndNameW; Index 1086;	Information not available
// BuildTrusteeWithObjectsAndSidA; Index 1087;	Information not available
// BuildTrusteeWithObjectsAndSidW; Index 1088;	Information not available
// BuildTrusteeWithSidA; Index 1089;	Information not available
// BuildTrusteeWithSidW; Index 1090;	Information not available
// CancelOverlappedAccess; Index 1091;	Information not available
// ChangeServiceConfig2A; Index 1092;	Information not available
// ChangeServiceConfig2W; Index 1093;	Information not available
// CheckForHiberboot; Index 1096;	Information not available
// CheckTokenMembership; Index 1097;	Information not available
// CloseCodeAuthzLevel; Index 1100;	Information not available
// CloseEncryptedFileRaw; Index 1101;	Information not available
// CloseThreadWaitChainSession; Index 1104;	Information not available
// CloseTrace; Index 1105;		Information not available
// CommandLineFromMsiDescriptor; Index 1106;	Information not available
// ComputeAccessTokenFromCodeAuthzLevel; Index 1107;	Information not available
// ControlServiceExA; Index 1109;	Information not available
// ControlServiceExW; Index 1110;	Information not available
// ControlTraceA; Index 1111;		Information not available
// ControlTraceW; Index 1112;		Information not available
// ConvertAccessToSecurityDescriptorA; Index 1113;	Information not available
// ConvertAccessToSecurityDescriptorW; Index 1114;	Information not available
// ConvertSDToStringSDDomainW; Index 1115;	Information not available
// ConvertSDToStringSDRootDomainA; Index 1116;	Information not available
// ConvertSDToStringSDRootDomainW; Index 1117;	Information not available
// ConvertSecurityDescriptorToAccessA; Index 1118;	Information not available
// ConvertSecurityDescriptorToAccessNamedA; Index 1119;	Information not available
// ConvertSecurityDescriptorToAccessNamedW; Index 1120;	Information not available
// ConvertSecurityDescriptorToAccessW; Index 1121;	Information not available
// ConvertSecurityDescriptorToStringSecurityDescriptorA; Index 1122;	Information not available
// ConvertSecurityDescriptorToStringSecurityDescriptorW; Index 1123;	Information not available
// ConvertSidToStringSidA; Index 1124;	Information not available
// ConvertSidToStringSidW; Index 1125;	Information not available
// ConvertStringSDToSDDomainA; Index 1126;	Information not available
// ConvertStringSDToSDDomainW; Index 1127;	Information not available
// ConvertStringSDToSDRootDomainA; Index 1128;	Information not available
// ConvertStringSDToSDRootDomainW; Index 1129;	Information not available
// ConvertStringSecurityDescriptorToSecurityDescriptorA; Index 1130;	Information not available
// ConvertStringSecurityDescriptorToSecurityDescriptorW; Index 1131;	Information not available
// ConvertStringSidToSidA; Index 1132;	Information not available
// ConvertStringSidToSidW; Index 1133;	Information not available
// CreateCodeAuthzLevel; Index 1136;	Information not available
// CreatePrivateObjectSecurityWithMultipleInheritance; Index 1139;	Information not available
// CreateProcessWithLogonW; Index 1142;	Information not available
// CreateProcessWithTokenW; Index 1143;	Information not available
// CreateRestrictedToken; Index 1144;	Information not available
// CreateTraceInstanceId; Index 1147;	Information not available
// CreateWellKnownSid; Index 1148;	Information not available
// CredBackupCredentials; Index 1149;	Information not available
// CredDeleteA; Index 1150;		Information not available
// CredDeleteW; Index 1151;		Information not available
// CredEncryptAndMarshalBinaryBlob; Index 1152;	Information not available
// CredEnumerateA; Index 1153;		Information not available
// CredEnumerateW; Index 1154;		Information not available
// CredFindBestCredentialA; Index 1155;	Information not available
// CredFindBestCredentialW; Index 1156;	Information not available
// CredFree; Index 1157;		Information not available
// CredGetSessionTypes; Index 1158;	Information not available
// CredGetTargetInfoA; Index 1159;	Information not available
// CredGetTargetInfoW; Index 1160;	Information not available
// CredIsMarshaledCredentialA; Index 1161;	Information not available
// CredIsMarshaledCredentialW; Index 1162;	Information not available
// CredIsProtectedA; Index 1163;	Information not available
// CredIsProtectedW; Index 1164;	Information not available
// CredMarshalCredentialA; Index 1165;	Information not available
// CredMarshalCredentialW; Index 1166;	Information not available
// CredProfileLoaded; Index 1167;	Information not available
// CredProfileLoadedEx; Index 1168;	Information not available
// CredProfileUnloaded; Index 1169;	Information not available
// CredProtectA; Index 1170;		Information not available
// CredProtectW; Index 1171;		Information not available
// CredReadA; Index 1172;		Information not available
// CredReadByTokenHandle; Index 1173;	Information not available
// CredReadDomainCredentialsA; Index 1174;	Information not available
// CredReadDomainCredentialsW; Index 1175;	Information not available
// CredReadW; Index 1176;		Information not available
// CredRenameA; Index 1177;		Information not available
// CredRenameW; Index 1178;		Information not available
// CredRestoreCredentials; Index 1179;	Information not available
// CredUnmarshalCredentialA; Index 1180;	Information not available
// CredUnmarshalCredentialW; Index 1181;	Information not available
// CredUnprotectA; Index 1182;		Information not available
// CredUnprotectW; Index 1183;		Information not available
// CredWriteA; Index 1184;		Information not available
// CredWriteDomainCredentialsA; Index 1185;	Information not available
// CredWriteDomainCredentialsW; Index 1186;	Information not available
// CredWriteW; Index 1187;		Information not available
// CredpConvertCredential; Index 1188;	Information not available
// CredpConvertOneCredentialSize; Index 1189;	Information not available
// CredpConvertTargetInfo; Index 1190;	Information not available
// CredpDecodeCredential; Index 1191;	Information not available
// CredpEncodeCredential; Index 1192;	Information not available
// CredpEncodeSecret; Index 1193;	Information not available
// CryptAcquireContextA; Index 1194;	Information not available
// CryptAcquireContextW; Index 1195;	Information not available
// CryptContextAddRef; Index 1196;	Information not available
// CryptCreateHash; Index 1197;		Information not available
// CryptDecrypt; Index 1198;		Information not available
// CryptDeriveKey; Index 1199;		Information not available
// CryptDestroyHash; Index 1200;	Information not available
// CryptDestroyKey; Index 1201;		Information not available
// CryptDuplicateHash; Index 1202;	Information not available
// CryptDuplicateKey; Index 1203;	Information not available
// CryptEncrypt; Index 1204;		Information not available
// CryptEnumProviderTypesA; Index 1205;	Information not available
// CryptEnumProviderTypesW; Index 1206;	Information not available
// CryptEnumProvidersA; Index 1207;	Information not available
// CryptEnumProvidersW; Index 1208;	Information not available
// CryptExportKey; Index 1209;		Information not available
// CryptGenKey; Index 1210;		Information not available
// CryptGenRandom; Index 1211;		Information not available
// CryptGetDefaultProviderA; Index 1212;	Information not available
// CryptGetDefaultProviderW; Index 1213;	Information not available
// CryptGetHashParam; Index 1214;	Information not available
// CryptGetKeyParam; Index 1215;	Information not available
// CryptGetProvParam; Index 1216;	Information not available
// CryptGetUserKey; Index 1217;		Information not available
// CryptHashData; Index 1218;		Information not available
// CryptHashSessionKey; Index 1219;	Information not available
// CryptImportKey; Index 1220;		Information not available
// CryptReleaseContext; Index 1221;	Information not available
// CryptSetHashParam; Index 1222;	Information not available
// CryptSetKeyParam; Index 1223;	Information not available
// CryptSetProvParam; Index 1224;	Information not available
// CryptSetProviderA; Index 1225;	Information not available
// CryptSetProviderExA; Index 1226;	Information not available
// CryptSetProviderExW; Index 1227;	Information not available
// CryptSetProviderW; Index 1228;	Information not available
// CryptSignHashA; Index 1229;		Information not available
// CryptSignHashW; Index 1230;		Information not available
// CryptVerifySignatureA; Index 1231;	Information not available
// CryptVerifySignatureW; Index 1232;	Information not available
// CveEventWrite; Index 1233;		Information not available
// DecryptFileA; Index 1234;		Information not available
// DecryptFileW; Index 1235;		Information not available
// DuplicateEncryptionInfoFile; Index 1240;	Information not available
// ElfBackupEventLogFileA; Index 1243;	Information not available
// ElfBackupEventLogFileW; Index 1244;	Information not available
// ElfChangeNotify; Index 1245;		Information not available
// ElfClearEventLogFileA; Index 1246;	Information not available
// ElfClearEventLogFileW; Index 1247;	Information not available
// ElfCloseEventLog; Index 1248;	Information not available
// ElfDeregisterEventSource; Index 1249;	Information not available
// ElfFlushEventLog; Index 1250;	Information not available
// ElfNumberOfRecords; Index 1251;	Information not available
// ElfOldestRecord; Index 1252;		Information not available
// ElfOpenBackupEventLogA; Index 1253;	Information not available
// ElfOpenBackupEventLogW; Index 1254;	Information not available
// ElfOpenEventLogA; Index 1255;	Information not available
// ElfOpenEventLogW; Index 1256;	Information not available
// ElfReadEventLogA; Index 1257;	Information not available
// ElfReadEventLogW; Index 1258;	Information not available
// ElfRegisterEventSourceA; Index 1259;	Information not available
// ElfRegisterEventSourceW; Index 1260;	Information not available
// ElfReportEventA; Index 1261;		Information not available
// ElfReportEventAndSourceW; Index 1262;	Information not available
// ElfReportEventW; Index 1263;		Information not available
// EnableTrace; Index 1264;		Information not available
// EnableTraceEx2; Index 1265;		Information not available
// EnableTraceEx; Index 1266;		Information not available
// EncryptFileA; Index 1267;		Information not available
// EncryptFileW; Index 1268;		Information not available
// EncryptedFileKeyInfo; Index 1269;	Information not available
// EncryptionDisable; Index 1270;	Information not available
// EnumDynamicTimeZoneInformation; Index 1273;	Information not available
// EnumServiceGroupW; Index 1274;	Information not available
// EnumServicesStatusExA; Index 1276;	Information not available
// EnumServicesStatusExW; Index 1277;	Information not available
// EnumerateTraceGuids; Index 1279;	Information not available
// EnumerateTraceGuidsEx; Index 1280;	Information not available
// EqualDomainSid; Index 1281;		Information not available
// EventAccessControl; Index 1284;	Information not available
// EventAccessQuery; Index 1285;	Information not available
// EventAccessRemove; Index 1286;	Information not available
// EventActivityIdControl; Index 1287;	Information not available
// EventEnabled; Index 1288;		Information not available
// EventProviderEnabled; Index 1289;	Information not available
// EventRegister; Index 1290;		Information not available
// EventSetInformation; Index 1291;	Information not available
// EventUnregister; Index 1292;		Information not available
// EventWrite; Index 1293;		Information not available
// EventWriteEndScenario; Index 1294;	Information not available
// EventWriteEx; Index 1295;		Information not available
// EventWriteStartScenario; Index 1296;	Information not available
// EventWriteString; Index 1297;	Information not available
// EventWriteTransfer; Index 1298;	Information not available
// FileEncryptionStatusA; Index 1299;	Information not available
// FileEncryptionStatusW; Index 1300;	Information not available
// FlushEfsCache; Index 1302;		Information not available
// FlushTraceA; Index 1303;		Information not available
// FlushTraceW; Index 1304;		Information not available
// FreeEncryptedFileKeyInfo; Index 1305;	Information not available
// FreeEncryptedFileMetadata; Index 1306;	Information not available
// FreeEncryptionCertificateHashList; Index 1307;	Information not available
// FreeInheritedFromArray; Index 1308;	Information not available
// GetAccessPermissionsForObjectA; Index 1310;	Information not available
// GetAccessPermissionsForObjectW; Index 1311;	Information not available
// GetAuditedPermissionsFromAclA; Index 1314;	Information not available
// GetAuditedPermissionsFromAclW; Index 1315;	Information not available
// GetDynamicTimeZoneInformationEffectiveYears; Index 1318;	Information not available
// GetEffectiveRightsFromAclA; Index 1319;	Information not available
// GetEffectiveRightsFromAclW; Index 1320;	Information not available
// GetEncryptedFileMetadata; Index 1321;	Information not available
// GetEventLogInformation; Index 1322;	Information not available
// GetExplicitEntriesFromAclA; Index 1323;	Information not available
// GetExplicitEntriesFromAclW; Index 1324;	Information not available
// GetInformationCodeAuthzLevelW; Index 1327;	Information not available
// GetInformationCodeAuthzPolicyW; Index 1328;	Information not available
// GetInheritanceSourceA; Index 1329;	Information not available
// GetInheritanceSourceW; Index 1330;	Information not available
// GetLocalManagedApplicationData; Index 1333;	Information not available
// GetLocalManagedApplications; Index 1334;	Information not available
// GetManagedApplicationCategories; Index 1335;	Information not available
// GetManagedApplications; Index 1336;	Information not available
// GetMultipleTrusteeA; Index 1337;	Information not available
// GetMultipleTrusteeOperationA; Index 1338;	Information not available
// GetMultipleTrusteeOperationW; Index 1339;	Information not available
// GetMultipleTrusteeW; Index 1340;	Information not available
// GetNamedSecurityInfoA; Index 1341;	Information not available
// GetNamedSecurityInfoExA; Index 1342;	Information not available
// GetNamedSecurityInfoExW; Index 1343;	Information not available
// GetNamedSecurityInfoW; Index 1344;	Information not available
// GetOverlappedAccessResults; Index 1347;	Information not available
// GetSecurityDescriptorRMControl; Index 1354;	Information not available
// GetSecurityInfo; Index 1356;		Information not available
// GetSecurityInfoExA; Index 1357;	Information not available
// GetSecurityInfoExW; Index 1358;	Information not available
// GetStringConditionFromBinary; Index 1367;	Information not available
// GetThreadWaitChain; Index 1368;	Information not available
// GetTraceEnableFlags; Index 1370;	Information not available
// GetTraceEnableLevel; Index 1371;	Information not available
// GetTraceLoggerHandle; Index 1372;	Information not available
// GetTrusteeFormA; Index 1373;		Information not available
// GetTrusteeFormW; Index 1374;		Information not available
// GetTrusteeNameA; Index 1375;		Information not available
// GetTrusteeNameW; Index 1376;		Information not available
// GetTrusteeTypeA; Index 1377;		Information not available
// GetTrusteeTypeW; Index 1378;		Information not available
// GetWindowsAccountDomainSid; Index 1381;	Information not available
// I_QueryTagInformation; Index 1382;	Information not available
// I_ScIsSecurityProcess; Index 1383;	Information not available
// I_ScPnPGetServiceName; Index 1384;	Information not available
// I_ScQueryServiceConfig; Index 1385;	Information not available
// I_ScRegisterPreshutdownRestart; Index 1386;	Information not available
// I_ScReparseServiceDatabase; Index 1387;	Information not available
// I_ScSendPnPMessage; Index 1388;	Information not available
// I_ScSendTSMessage; Index 1389;	Information not available
// I_ScSetServiceBitsA; Index 1390;	Information not available
// I_ScSetServiceBitsW; Index 1391;	Information not available
// I_ScValidatePnPService; Index 1392;	Information not available
// IdentifyCodeAuthzLevelW; Index 1393;	Information not available
// ImpersonateAnonymousToken; Index 1394;	Information not available
// InitiateShutdownA; Index 1401;	Information not available
// InitiateShutdownW; Index 1402;	Information not available
// InitiateSystemShutdownExA; Index 1404;	Information not available
// InitiateSystemShutdownExW; Index 1405;	Information not available
// InstallApplication; Index 1407;	Information not available
// IsTokenRestricted; Index 1409;	Information not available
// IsTokenUntrusted; Index 1410;	Information not available
// IsValidRelativeSecurityDescriptor; Index 1412;	Information not available
// IsWellKnownSid; Index 1415;		Information not available
// LogonUserExA; Index 1418;		Information not available
// LogonUserExExW; Index 1419;		Information not available
// LogonUserExW; Index 1420;		Information not available
// LookupSecurityDescriptorPartsA; Index 1432;	Information not available
// LookupSecurityDescriptorPartsW; Index 1433;	Information not available
// LsaAddAccountRights; Index 1434;	Information not available
// LsaAddPrivilegesToAccount; Index 1435;	Information not available
// LsaClearAuditLog; Index 1436;	Information not available
// LsaClose; Index 1437;		Information not available
// LsaCreateAccount; Index 1438;	Information not available
// LsaCreateSecret; Index 1439;		Information not available
// LsaCreateTrustedDomain; Index 1440;	Information not available
// LsaCreateTrustedDomainEx; Index 1441;	Information not available
// LsaDelete; Index 1442;		Information not available
// LsaDeleteTrustedDomain; Index 1443;	Information not available
// LsaEnumerateAccountRights; Index 1444;	Information not available
// LsaEnumerateAccounts; Index 1445;	Information not available
// LsaEnumerateAccountsWithUserRight; Index 1446;	Information not available
// LsaEnumeratePrivileges; Index 1447;	Information not available
// LsaEnumeratePrivilegesOfAccount; Index 1448;	Information not available
// LsaEnumerateTrustedDomains; Index 1449;	Information not available
// LsaEnumerateTrustedDomainsEx; Index 1450;	Information not available
// LsaFreeMemory; Index 1451;		Information not available
// LsaGetAppliedCAPIDs; Index 1452;	Information not available
// LsaGetQuotasForAccount; Index 1453;	Information not available
// LsaGetRemoteUserName; Index 1454;	Information not available
// LsaGetSystemAccessAccount; Index 1455;	Information not available
// LsaGetUserName; Index 1456;		Information not available
// LsaICLookupNames; Index 1457;	Information not available
// LsaICLookupNamesWithCreds; Index 1458;	Information not available
// LsaICLookupSids; Index 1459;		Information not available
// LsaICLookupSidsWithCreds; Index 1460;	Information not available
// LsaLookupNames2; Index 1461;		Information not available
// LsaLookupNames; Index 1462;		Information not available
// LsaLookupPrivilegeDisplayName; Index 1463;	Information not available
// LsaLookupPrivilegeName; Index 1464;	Information not available
// LsaLookupPrivilegeValue; Index 1465;	Information not available
// LsaLookupSids2; Index 1466;		Information not available
// LsaLookupSids; Index 1467;		Information not available
// LsaManageSidNameMapping; Index 1468;	Information not available
// LsaNtStatusToWinError; Index 1469;	Information not available
// LsaOpenAccount; Index 1470;		Information not available
// LsaOpenPolicy; Index 1471;		Information not available
// LsaOpenPolicySce; Index 1472;	Information not available
// LsaOpenSecret; Index 1473;		Information not available
// LsaOpenTrustedDomain; Index 1474;	Information not available
// LsaOpenTrustedDomainByName; Index 1475;	Information not available
// LsaQueryCAPs; Index 1476;		Information not available
// LsaQueryDomainInformationPolicy; Index 1477;	Information not available
// LsaQueryForestTrustInformation; Index 1478;	Information not available
// LsaQueryInfoTrustedDomain; Index 1479;	Information not available
// LsaQueryInformationPolicy; Index 1480;	Information not available
// LsaQuerySecret; Index 1481;		Information not available
// LsaQuerySecurityObject; Index 1482;	Information not available
// LsaQueryTrustedDomainInfo; Index 1483;	Information not available
// LsaQueryTrustedDomainInfoByName; Index 1484;	Information not available
// LsaRemoveAccountRights; Index 1485;	Information not available
// LsaRemovePrivilegesFromAccount; Index 1486;	Information not available
// LsaRetrievePrivateData; Index 1487;	Information not available
// LsaSetCAPs; Index 1488;		Information not available
// LsaSetDomainInformationPolicy; Index 1489;	Information not available
// LsaSetForestTrustInformation; Index 1490;	Information not available
// LsaSetInformationPolicy; Index 1491;	Information not available
// LsaSetInformationTrustedDomain; Index 1492;	Information not available
// LsaSetQuotasForAccount; Index 1493;	Information not available
// LsaSetSecret; Index 1494;		Information not available
// LsaSetSecurityObject; Index 1495;	Information not available
// LsaSetSystemAccessAccount; Index 1496;	Information not available
// LsaSetTrustedDomainInfoByName; Index 1497;	Information not available
// LsaSetTrustedDomainInformation; Index 1498;	Information not available
// LsaStorePrivateData; Index 1499;	Information not available
// MD4Final; Index 1500;		Information not available
// MD4Init; Index 1501;			Information not available
// MD4Update; Index 1502;		Information not available
// MD5Final; Index 1503;		Information not available
// MD5Init; Index 1504;			Information not available
// MD5Update; Index 1505;		Information not available
// MIDL_user_free_Ext; Index 1506;	Information not available
// MSChapSrvChangePassword2; Index 1507;	Information not available
// MSChapSrvChangePassword; Index 1508;	Information not available
// MakeAbsoluteSD2; Index 1509;		Information not available
// NotifyServiceStatusChange; Index 1515;	Information not available
// NotifyServiceStatusChangeA; Index 1516;	Information not available
// NotifyServiceStatusChangeW; Index 1517;	Information not available
// NpGetUserName; Index 1518;		Information not available
// OpenEncryptedFileRawA; Index 1529;	Information not available
// OpenEncryptedFileRawW; Index 1530;	Information not available
// OpenThreadWaitChainSession; Index 1539;	Information not available
// OpenTraceA; Index 1540;		Information not available
// OpenTraceW; Index 1541;		Information not available
// OperationEnd; Index 1542;		Information not available
// OperationStart; Index 1543;		Information not available
// PerfAddCounters; Index 1544;		Information not available
// PerfCloseQueryHandle; Index 1545;	Information not available
// PerfCreateInstance; Index 1546;	Information not available
// PerfDecrementULongCounterValue; Index 1547;	Information not available
// PerfDecrementuint32LongCounterValue; Index 1548;	Information not available
// PerfDeleteCounters; Index 1549;	Information not available
// PerfDeleteInstance; Index 1550;	Information not available
// PerfEnumerateCounterSet; Index 1551;	Information not available
// PerfEnumerateCounterSetInstances; Index 1552;	Information not available
// PerfIncrementuint32CounterValue; Index 1553;	Information not available
// PerfIncrementuint32LongCounterValue; Index 1554;	Information not available
// PerfOpenQueryHandle; Index 1555;	Information not available
// PerfQueryCounterData; Index 1556;	Information not available
// PerfQueryCounterInfo; Index 1557;	Information not available
// PerfQueryCounterSetRegistrationInfo; Index 1558;	Information not available
// PerfQueryInstance; Index 1559;	Information not available
// PerfRegCloseKey; Index 1560;		Information not available
// PerfRegEnumKey; Index 1561;		Information not available
// PerfRegEnumValue; Index 1562;	Information not available
// PerfRegQueryInfoKey; Index 1563;	Information not available
// PerfRegQueryValue; Index 1564;	Information not available
// PerfRegSetValue; Index 1565;		Information not available
// PerfSetCounterRefValue; Index 1566;	Information not available
// PerfSetCounterSetInfo; Index 1567;	Information not available
// PerfSetuint32CounterValue; Index 1568;	Information not available
// PerfSetuint32LongCounterValue; Index 1569;	Information not available
// PerfStartProvider; Index 1570;	Information not available
// PerfStartProviderEx; Index 1571;	Information not available
// PerfStopProvider; Index 1572;	Information not available
// ProcessIdleTasks; Index 1576;	Information not available
// ProcessIdleTasksW; Index 1577;	Information not available
// ProcessTrace; Index 1578;		Information not available
// QueryAllTracesA; Index 1579;		Information not available
// QueryAllTracesW; Index 1580;		Information not available
// QueryLocalUserServiceName; Index 1581;	Information not available
// QueryRecoveryAgentsOnEncryptedFile; Index 1582;	Information not available
// QuerySecurityAccessMask; Index 1583;	Information not available
// QueryServiceConfig2A; Index 1584;	Information not available
// QueryServiceConfig2W; Index 1585;	Information not available
// QueryServiceDynamicInformation; Index 1588;	Information not available
// QueryServiceStatusEx; Index 1593;	Information not available
// QueryTraceA; Index 1594;		Information not available
// QueryTraceW; Index 1595;		Information not available
// QueryUserServiceName; Index 1596;	Information not available
// QueryUsersOnEncryptedFile; Index 1597;	Information not available
// ReadEncryptedFileRaw; Index 1598;	Information not available
// RegConnectRegistryExA; Index 1603;	Information not available
// RegConnectRegistryExW; Index 1604;	Information not available
// RegCopyTreeA; Index 1606;		Information not available
// RegCopyTreeW; Index 1607;		Information not available
// RegCreateKeyTransactedA; Index 1611;	Information not available
// RegCreateKeyTransactedW; Index 1612;	Information not available
// RegDeleteKeyExA; Index 1615;		Information not available
// RegDeleteKeyExW; Index 1616;		Information not available
// RegDeleteKeyTransactedA; Index 1617;	Information not available
// RegDeleteKeyTransactedW; Index 1618;	Information not available
// RegDeleteKeyValueA; Index 1619;	Information not available
// RegDeleteKeyValueW; Index 1620;	Information not available
// RegDeleteTreeA; Index 1622;		Information not available
// RegDeleteTreeW; Index 1623;		Information not available
// RegDisablePredefinedCache; Index 1626;	Information not available
// RegDisablePredefinedCacheEx; Index 1627;	Information not available
// RegDisableReflectionKey; Index 1628;	Information not available
// RegEnableReflectionKey; Index 1629;	Information not available
// RegGetValueA; Index 1638;		Information not available
// RegGetValueW; Index 1639;		Information not available
// RegLoadAppKeyA; Index 1640;		Information not available
// RegLoadAppKeyW; Index 1641;		Information not available
// RegLoadMUIStringA; Index 1644;	Information not available
// RegLoadMUIStringW; Index 1645;	Information not available
// RegOpenCurrentUser; Index 1647;	Information not available
// RegOpenKeyTransactedA; Index 1651;	Information not available
// RegOpenKeyTransactedW; Index 1652;	Information not available
// RegOpenUserClassesRoot; Index 1654;	Information not available
// RegOverridePredefKey; Index 1655;	Information not available
// RegQueryReflectionKey; Index 1660;	Information not available
// RegRenameKey; Index 1665;		Information not available
// RegSaveKeyExA; Index 1671;		Information not available
// RegSaveKeyExW; Index 1672;		Information not available
// RegSetKeyValueA; Index 1675;		Information not available
// RegSetKeyValueW; Index 1676;		Information not available
// RegisterIdleTask; Index 1685;	Information not available
// RegisterTraceGuidsA; Index 1690;	Information not available
// RegisterTraceGuidsW; Index 1691;	Information not available
// RegisterWaitChainCOMCallback; Index 1692;	Information not available
// RemoteRegEnumKeyWrapper; Index 1693;	Information not available
// RemoteRegEnumValueWrapper; Index 1694;	Information not available
// RemoteRegQueryInfoKeyWrapper; Index 1695;	Information not available
// RemoteRegQueryValueWrapper; Index 1696;	Information not available
// RemoveTraceCallback; Index 1697;	Information not available
// RemoveUsersFromEncryptedFile; Index 1698;	Information not available
// SafeBaseRegGetKeySecurity; Index 1702;	Information not available
// SaferCloseLevel; Index 1703;		Information not available
// SaferComputeTokenFromLevel; Index 1704;	Information not available
// SaferCreateLevel; Index 1705;	Information not available
// SaferGetLevelInformation; Index 1706;	Information not available
// SaferGetPolicyInformation; Index 1707;	Information not available
// SaferIdentifyLevel; Index 1708;	Information not available
// SaferRecordEventLogEntry; Index 1709;	Information not available
// SaferSetLevelInformation; Index 1710;	Information not available
// SaferSetPolicyInformation; Index 1711;	Information not available
// SaferiChangeRegistryScope; Index 1712;	Information not available
// SaferiCompareTokenLevels; Index 1713;	Information not available
// SaferiIsDllAllowed; Index 1714;	Information not available
// SaferiIsExecutableFileType; Index 1715;	Information not available
// SaferiPopulateDefaultsInRegistry; Index 1716;	Information not available
// SaferiRecordEventLogEntry; Index 1717;	Information not available
// SaferiSearchMatchingHashRules; Index 1718;	Information not available
// SetEncryptedFileMetadata; Index 1720;	Information not available
// SetEntriesInAccessListA; Index 1721;	Information not available
// SetEntriesInAccessListW; Index 1722;	Information not available
// SetEntriesInAclA; Index 1723;	Information not available
// SetEntriesInAclW; Index 1724;	Information not available
// SetEntriesInAuditListA; Index 1725;	Information not available
// SetEntriesInAuditListW; Index 1726;	Information not available
// SetInformationCodeAuthzLevelW; Index 1729;	Information not available
// SetInformationCodeAuthzPolicyW; Index 1730;	Information not available
// SetNamedSecurityInfoA; Index 1732;	Information not available
// SetNamedSecurityInfoExA; Index 1733;	Information not available
// SetNamedSecurityInfoExW; Index 1734;	Information not available
// SetNamedSecurityInfoW; Index 1735;	Information not available
// SetSecurityAccessMask; Index 1738;	Information not available
// SetSecurityDescriptorRMControl; Index 1743;	Information not available
// SetSecurityInfo; Index 1745;		Information not available
// SetSecurityInfoExA; Index 1746;	Information not available
// SetSecurityInfoExW; Index 1747;	Information not available
// SetServiceBits; Index 1748;		Information not available
// SetTraceCallback; Index 1753;	Information not available
// SetUserFileEncryptionKey; Index 1754;	Information not available
// SetUserFileEncryptionKeyEx; Index 1755;	Information not available
// StartTraceA; Index 1760;		Information not available
// StartTraceW; Index 1761;		Information not available
// StopTraceA; Index 1762;		Information not available
// StopTraceW; Index 1763;		Information not available
// SystemFunction001; Index 1764;	Information not available
// SystemFunction002; Index 1765;	Information not available
// SystemFunction003; Index 1766;	Information not available
// SystemFunction004; Index 1767;	Information not available
// SystemFunction005; Index 1768;	Information not available
// SystemFunction006; Index 1769;	Information not available
// SystemFunction007; Index 1770;	Information not available
// SystemFunction008; Index 1771;	Information not available
// SystemFunction009; Index 1772;	Information not available
// SystemFunction010; Index 1773;	Information not available
// SystemFunction011; Index 1774;	Information not available
// SystemFunction012; Index 1775;	Information not available
// SystemFunction013; Index 1776;	Information not available
// SystemFunction014; Index 1777;	Information not available
// SystemFunction015; Index 1778;	Information not available
// SystemFunction016; Index 1779;	Information not available
// SystemFunction017; Index 1780;	Information not available
// SystemFunction018; Index 1781;	Information not available
// SystemFunction019; Index 1782;	Information not available
// SystemFunction020; Index 1783;	Information not available
// SystemFunction021; Index 1784;	Information not available
// SystemFunction022; Index 1785;	Information not available
// SystemFunction023; Index 1786;	Information not available
// SystemFunction024; Index 1787;	Information not available
// SystemFunction025; Index 1788;	Information not available
// SystemFunction026; Index 1789;	Information not available
// SystemFunction027; Index 1790;	Information not available
// SystemFunction028; Index 1791;	Information not available
// SystemFunction029; Index 1792;	Information not available
// SystemFunction030; Index 1793;	Information not available
// SystemFunction031; Index 1794;	Information not available
// SystemFunction032; Index 1795;	Information not available
// SystemFunction033; Index 1796;	Information not available
// SystemFunction034; Index 1797;	Information not available
// SystemFunction035; Index 1798;	Information not available
// SystemFunction036; Index 1799;	Information not available
// SystemFunction040; Index 1800;	Information not available
// SystemFunction041; Index 1801;	Information not available
// TraceEvent; Index 1802;		Information not available
// TraceEventInstance; Index 1803;	Information not available
// TraceMessage; Index 1804;		Information not available
// TraceMessageVa; Index 1805;		Information not available
// TraceQueryInformation; Index 1806;	Information not available
// TraceSetInformation; Index 1807;	Information not available
// TreeResetNamedSecurityInfoA; Index 1808;	Information not available
// TreeResetNamedSecurityInfoW; Index 1809;	Information not available
// TreeSetNamedSecurityInfoA; Index 1810;	Information not available
// TreeSetNamedSecurityInfoW; Index 1811;	Information not available
// TrusteeAccessToObjectA; Index 1812;	Information not available
// TrusteeAccessToObjectW; Index 1813;	Information not available
// UninstallApplication; Index 1814;	Information not available
// UnregisterIdleTask; Index 1816;	Information not available
// UnregisterTraceGuids; Index 1817;	Information not available
// UpdateTraceA; Index 1818;		Information not available
// UpdateTraceW; Index 1819;		Information not available
// UsePinForEncryptedFilesA; Index 1820;	Information not available
// UsePinForEncryptedFilesW; Index 1821;	Information not available
// WaitServiceState; Index 1822;	Information not available
// WmiCloseBlock; Index 1823;		Information not available
// WmiDevInstToInstanceNameA; Index 1824;	Information not available
// WmiDevInstToInstanceNameW; Index 1825;	Information not available
// WmiEnumerateGuids; Index 1826;	Information not available
// WmiExecuteMethodA; Index 1827;	Information not available
// WmiExecuteMethodW; Index 1828;	Information not available
// WmiFileHandleToInstanceNameA; Index 1829;	Information not available
// WmiFileHandleToInstanceNameW; Index 1830;	Information not available
// WmiFreeBuffer; Index 1831;		Information not available
// WmiMofEnumerateResourcesA; Index 1832;	Information not available
// WmiMofEnumerateResourcesW; Index 1833;	Information not available
// WmiNotificationRegistrationA; Index 1834;	Information not available
// WmiNotificationRegistrationW; Index 1835;	Information not available
// WmiOpenBlock; Index 1836;		Information not available
// WmiQueryAllDataA; Index 1837;	Information not available
// WmiQueryAllDataMultipleA; Index 1838;	Information not available
// WmiQueryAllDataMultipleW; Index 1839;	Information not available
// WmiQueryAllDataW; Index 1840;	Information not available
// WmiQueryGuidInformation; Index 1841;	Information not available
// WmiQuerySingleInstanceA; Index 1842;	Information not available
// WmiQuerySingleInstanceMultipleA; Index 1843;	Information not available
// WmiQuerySingleInstanceMultipleW; Index 1844;	Information not available
// WmiQuerySingleInstanceW; Index 1845;	Information not available
// WmiReceiveNotificationsA; Index 1846;	Information not available
// WmiReceiveNotificationsW; Index 1847;	Information not available
// WmiSetSingleInstanceA; Index 1848;	Information not available
// WmiSetSingleInstanceW; Index 1849;	Information not available
// WmiSetSingleItemA; Index 1850;	Information not available
// WmiSetSingleItemW; Index 1851;	Information not available
// WriteEncryptedFileRaw; Index 1852;	Information not available

function AbortSystemShutdown(lpMachineName: LPSTR): Boolean; stdcall; external cLibName name 'AbortSystemShutdownA';
function AbortSystemShutdownW(lpMachineName: LPWSTR): Boolean; stdcall; external cLibName name 'AbortSystemShutdownW';
function AccessCheck(pSecurityDescriptor: PSecurityDescriptor; ClientToken: THandle; DesiredAccess: uint32; const GenericMapping: TGenericMapping; var PrivilegeSet: TPrivilegeSet; var PrivilegeSetLength: uint32; var GrantedAccess: uint32; var AccessStatus: Boolean): Boolean; stdcall; external cLibName name 'AccessCheck';
function AccessCheckAndAuditAlarm(SubsystemName: LPSTR; HandleId: Pointer; ObjectTypeName, ObjectName: PAnsiChar; SecurityDescriptor: PSecurityDescriptor; DesiredAccess: uint32; const GenericMapping: TGenericMapping;  ObjectCreation: Boolean; var GrantedAccess: uint32; var AccessStatus, pfGenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'AccessCheckAndAuditAlarmA';
function AccessCheckAndAuditAlarmW(SubsystemName: LPWSTR; HandleId: Pointer; ObjectTypeName, ObjectName: PWideChar; SecurityDescriptor: PSecurityDescriptor; DesiredAccess: uint32; const GenericMapping: TGenericMapping;  ObjectCreation: Boolean; var GrantedAccess: uint32; var AccessStatus, pfGenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'AccessCheckAndAuditAlarmW';
function AccessCheckByType(pSecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID; ClientToken: THandle; DesiredAccess: uint32; ObjectTypeList: PObjectTypeList; const GenericMapping: TGenericMapping; ObjectTypeListLength: uint32; var PrivilegeSet: TPrivilegeSet; var PrivilegeSetLength: uint32; var GrantedAccess: uint32; var AccessStatus: Boolean): Boolean; stdcall; external cLibName name 'AccessCheckByType';
function AccessCheckByTypeAndAuditAlarm(SubsystemName: LPSTR; HandleId: Pointer; ObjectTypeName, ObjectName: PAnsiChar; SecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID; DesiredAccess: uint32; AuditType: TAUDIT_EVENT_TYPE; Flags: uint32; ObjectTypeList: PObjectTypeList; ObjectTypeListLength: uint32; const GenericMapping: TGenericMapping;  ObjectCreation: Boolean; var GrantedAccess: uint32; var AccessStatus, pfGenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'AccessCheckByTypeAndAuditAlarmA';
function AccessCheckByTypeAndAuditAlarmW(SubsystemName: LPWSTR; HandleId: Pointer; ObjectTypeName, ObjectName: PWideChar; SecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID; DesiredAccess: uint32; AuditType: TAUDIT_EVENT_TYPE; Flags: uint32; ObjectTypeList: PObjectTypeList; ObjectTypeListLength: uint32; const GenericMapping: TGenericMapping;  ObjectCreation: Boolean; var GrantedAccess: uint32; var AccessStatus, pfGenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'AccessCheckByTypeAndAuditAlarmW';
function AccessCheckByTypeResultList(pSecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID; ClientToken: THandle; DesiredAccess: uint32; ObjectTypeList: PObjectTypeList; const GenericMapping: TGenericMapping; ObjectTypeListLength: uint32; var PrivilegeSet: TPrivilegeSet; var PrivilegeSetLength: uint32; var GrantedAccess: uint32; var AccessStatusList: uint32): Boolean; stdcall; external cLibName name 'AccessCheckByTypeResultList';
function AccessCheckByTypeResultListAndAuditAlarm(SubsystemName: PAnsiChar; HandleId: Pointer; ObjectTypeName, ObjectName: PAnsiChar; SecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID; DesiredAccess: uint32; AuditType: TAUDIT_EVENT_TYPE; Flags: uint32; ObjectTypeList: PObjectTypeList; ObjectTypeListLength: uint32; const GenericMapping: TGenericMapping;  ObjectCreation: Boolean; var GrantedAccess: uint32; var AccessStatusList: uint32; var pfGenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'AccessCheckByTypeResultListAndAuditAlarmA';
function AccessCheckByTypeResultListAndAuditAlarmW(SubsystemName: PWideChar; HandleId: Pointer; ObjectTypeName, ObjectName: PWideChar; SecurityDescriptor: PSecurityDescriptor; PrincipalSelfSid: PSID; DesiredAccess: uint32; AuditType: TAUDIT_EVENT_TYPE; Flags: uint32; ObjectTypeList: PObjectTypeList; ObjectTypeListLength: uint32; const GenericMapping: TGenericMapping;  ObjectCreation: Boolean; var GrantedAccess: uint32; var AccessStatusList: uint32; var pfGenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'AccessCheckByTypeResultListAndAuditAlarmW';
function AddAccessAllowedAce(var pAcl: TACL; dwAceRevision: uint32; AccessMask: uint32; pSid: PSID): Boolean; stdcall; external cLibName name 'AddAccessAllowedAce';
function AddAccessAllowedAceEx(var pAcl: TACL; dwAceRevision: uint32; AceFlags: uint32; AccessMask: uint32; pSid: PSID): Boolean; stdcall; external cLibName name 'AddAccessAllowedAceEx';
function AddAccessAllowedObjectAce(var pAcl: TACL; dwAceRevision: uint32; AceFlags: uint32; AccessMask: uint32; ObjectTypeGuid, InheritedObjectTypeGuid: PGuid; pSid: Pointer): Boolean; stdcall; external cLibName name 'AddAccessAllowedObjectAce';
function AddAccessDeniedAce(var pAcl: TACL; dwAceRevision: uint32; AccessMask: uint32; pSid: PSID): Boolean; stdcall; external cLibName name 'AddAccessDeniedAce';
function AddAccessDeniedAceEx(var pAcl: TACL; dwAceRevision: uint32; ACEFlags: uint32; AccessMask: uint32; pSid: PSID): Boolean; stdcall; external cLibName name 'AddAccessDeniedAceEx';
function AddAccessDeniedObjectAce(var pAcl: TACL; dwAceRevision: uint32; AceFlags: uint32; AccessMask: uint32; ObjectTypeGuid, InheritedObjectTypeGuid: PGuid; pSid: Pointer): Boolean; stdcall; external cLibName name 'AddAccessDeniedObjectAce';
function AddAce(var pAcl: TACL; dwAceRevision, dwStartingAceIndex: uint32; pAceList: Pointer; nAceListLength: uint32): Boolean; stdcall; external cLibName name 'AddAce';
function AddAuditAccessAce(var pAcl: TACL; dwAceRevision: uint32; dwAccessMask: uint32; pSid: Pointer; bAuditSuccess, bAuditFailure: Boolean): Boolean; stdcall; external cLibName name 'AddAuditAccessAce';
function AddAuditAccessAceEx(var pAcl: TACL; dwAceRevision: uint32; AceFlags: uint32; dwAccessMask: uint32; pSid: Pointer; bAuditSuccess, bAuditFailure: Boolean): Boolean; stdcall; external cLibName name 'AddAuditAccessAceEx';
function AddAuditAccessObjectAce(var pAcl: TACL; dwAceRevision: uint32; AceFlags: uint32; AccessMask: uint32; ObjectTypeGuid, InheritedObjectTypeGuid: PGuid; pSid: Pointer; bAuditSuccess, bAuditFailure: Boolean): Boolean; stdcall; external cLibName name 'AddAuditAccessObjectAce';
function AdjustTokenGroups(TokenHandle: THandle; ResetToDefault: Boolean; const NewState: TTokenGroups; BufferLength: uint32; var PreviousState: TTokenGroups; var ReturnLength: uint32): Boolean; stdcall; external cLibName name 'AdjustTokenGroups';
function AdjustTokenPrivileges(TokenHandle: THandle; DisableAllPrivileges: Boolean; const NewState: TTokenPrivileges; BufferLength: uint32; var PreviousState: TTokenPrivileges; var ReturnLength: uint32): Boolean; stdcall; external cLibName name 'AdjustTokenPrivileges';
function AllocateAndInitializeSid(const pIdentifierAuthority: TSIDIdentifierAuthority; nSubAuthorityCount: Byte; nSubAuthority0, nSubAuthority1: uint32; nSubAuthority2, nSubAuthority3, nSubAuthority4: uint32; nSubAuthority5, nSubAuthority6, nSubAuthority7: uint32; var pSid: Pointer): Boolean; stdcall; external cLibName name 'AllocateAndInitializeSid';
function AllocateLocallyUniqueId(var Luid: TLargeInteger): Boolean; stdcall; external cLibName name 'AllocateLocallyUniqueId';
function AreAllAccessesGranted(GrantedAccess, DesiredAccess: uint32): Boolean; stdcall; external cLibName name 'AreAllAccessesGranted';
function AreAnyAccessesGranted(GrantedAccess, DesiredAccess: uint32): Boolean; stdcall; external cLibName name 'AreAnyAccessesGranted';
function BackupEventLog(hEventLog: THandle; lpBackupFileName: PAnsiChar): Boolean; stdcall; external cLibName name 'BackupEventLogA';
function BackupEventLogW(hEventLog: THandle; lpBackupFileName: PWideChar): Boolean; stdcall; external cLibName name 'BackupEventLogW';
function ChangeServiceConfig(hService: TSC_HANDLE; dwServiceType, dwStartType, dwErrorControl: uint32; lpBinaryPathName, lpLoadOrderGroup: PAnsiChar; lpdwTagId: LPuint32; lpDependencies, lpServiceStartName, lpPassword, lpDisplayName: PAnsiChar): Boolean; stdcall; external cLibName name 'ChangeServiceConfigA';
function ChangeServiceConfigW(hService: TSC_HANDLE; dwServiceType, dwStartType, dwErrorControl: uint32; lpBinaryPathName, lpLoadOrderGroup: PWideChar; lpdwTagId: LPuint32; lpDependencies, lpServiceStartName, lpPassword, lpDisplayName: PWideChar): Boolean; stdcall; external cLibName name 'ChangeServiceConfigW';
function ClearEventLog(hEventLog: THandle; lpBackupFileName: PAnsiChar): Boolean; stdcall; external cLibName name 'ClearEventLogA';
function ClearEventLogW(hEventLog: THandle; lpBackupFileName: PWideChar): Boolean; stdcall; external cLibName name 'ClearEventLogW';
function CloseEventLog(hEventLog: THandle): Boolean; stdcall; external cLibName name 'CloseEventLog';
function CloseServiceHandle(hSCObject: TSC_HANDLE): Boolean; stdcall; external cLibName name 'CloseServiceHandle';
function ControlService(hService: TSC_HANDLE; dwControl: uint32; var lpServiceStatus: TServiceStatus): Boolean; stdcall; external cLibName name 'ControlService';
function ConvertToAutoInheritPrivateObjectSecurity(ParentDescriptor, CurrentSecurityDescriptor: PSecurityDescriptor; var NewDescriptor: PSecurityDescriptor; ObjectType: PGUID; IsDirectoryObject: Boolean; const GenericMapping: TGenericMapping): Boolean; stdcall; external cLibName name 'ConvertToAutoInheritPrivateObjectSecurity';
function CopySid(nDestinationSidLength: uint32; pDestinationSid, pSourceSid: Pointer): Boolean; stdcall; external cLibName name 'CopySid';
function CreatePrivateObjectSecurity(ParentDescriptor, CreatorDescriptor: PSecurityDescriptor; var NewDescriptor: PSecurityDescriptor; IsDirectoryObject: Boolean; Token: THandle; const GenericMapping: TGenericMapping): Boolean; stdcall; external cLibName name 'CreatePrivateObjectSecurity';
function CreatePrivateObjectSecurityEx(ParentDescriptor, CreatorDescriptor: PSecurityDescriptor; var NewDescriptor: PSecurityDescriptor; ObjectType: PGUID; IsContainerObject: Boolean; AutoInheritFlags: uint32; Token: THandle; const GenericMapping: TGenericMapping): Boolean; stdcall; external cLibName name 'CreatePrivateObjectSecurityEx';
function CreateProcessAsUser(hToken: THandle; lpApplicationName: PAnsiChar; lpCommandLine: PAnsiChar; lpProcessAttributes: PSecurityAttributes; lpThreadAttributes: PSecurityAttributes; bInheritHandles: Boolean; dwCreationFlags: uint32; lpEnvironment: Pointer; lpCurrentDirectory: PAnsiChar; const lpStartupInfo: TStartupInfoA; var lpProcessInformation: TProcessInformation): Boolean; stdcall; external cLibName name 'CreateProcessAsUserA';
function CreateProcessAsUserW(hToken: THandle; lpApplicationName: PWideChar; lpCommandLine: PWideChar; lpProcessAttributes: PSecurityAttributes; lpThreadAttributes: PSecurityAttributes; bInheritHandles: Boolean; dwCreationFlags: uint32; lpEnvironment: Pointer; lpCurrentDirectory: PWideChar; const lpStartupInfo: TStartupInfoW; var lpProcessInformation: TProcessInformation): Boolean; stdcall; external cLibName name 'CreateProcessAsUserW';
function CreateService(hSCManager: TSC_HANDLE; lpServiceName, lpDisplayName: PAnsiChar; dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl: uint32; lpBinaryPathName, lpLoadOrderGroup: PAnsiChar; lpdwTagId: LPuint32; lpDependencies, lpServiceStartName, lpPassword: PAnsiChar): TSC_HANDLE; stdcall; external cLibName name 'CreateServiceA';
function CreateServiceW(hSCManager: TSC_HANDLE; lpServiceName, lpDisplayName: PWideChar; dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl: uint32; lpBinaryPathName, lpLoadOrderGroup: PWideChar; lpdwTagId: LPuint32; lpDependencies, lpServiceStartName, lpPassword: PWideChar): TSC_HANDLE; stdcall; external cLibName name 'CreateServiceW';
function DeleteAce(var pAcl: TACL; dwAceIndex: uint32): Boolean; stdcall; external cLibName name 'DeleteAce';
function DeleteService(hService: TSC_HANDLE): Boolean; stdcall; external cLibName name 'DeleteService';
function DeregisterEventSource(hEventLog: THandle): Boolean; stdcall; external cLibName name 'DeregisterEventSource';
function DestroyPrivateObjectSecurity(var ObjectDescriptor: PSecurityDescriptor): Boolean; stdcall; external cLibName name 'DestroyPrivateObjectSecurity';
function DuplicateToken(ExistingTokenHandle: THandle; ImpersonationLevel: TSECURITY_IMPERSONATION_LEVEL; DuplicateTokenHandle: PHandle): Boolean; stdcall; external cLibName name 'DuplicateToken';
function DuplicateTokenEx(hExistingToken: THandle; dwDesiredAccess: uint32; lpTokenAttributes: PSecurityAttributes; ImpersonationLevel: TSECURITY_IMPERSONATION_LEVEL; TokenType: TTokenType; var phNewToken: THandle): Boolean; stdcall; external cLibName name 'DuplicateTokenEx';
function EnumDependentServices(hService: TSC_HANDLE; dwServiceState: uint32; var lpServices: TEnumServiceStatusA; cbBufSize: uint32; var pcbBytesNeeded, lpServicesReturned : uint32): Boolean; stdcall; external cLibName name 'EnumDependentServicesA';
function EnumDependentServicesW(hService: TSC_HANDLE; dwServiceState: uint32; var lpServices: TEnumServiceStatusW; cbBufSize: uint32; var pcbBytesNeeded, lpServicesReturned : uint32): Boolean; stdcall; external cLibName name 'EnumDependentServicesW';
function EnumServicesStatus(hSCManager: TSC_HANDLE; dwServiceType, dwServiceState: uint32; var lpServices: TEnumServiceStatusA; cbBufSize: uint32; var pcbBytesNeeded, lpServicesReturned, lpResumeHandle: uint32): Boolean; stdcall; external cLibName name 'EnumServicesStatusA';
function EnumServicesStatusW(hSCManager: TSC_HANDLE; dwServiceType, dwServiceState: uint32; var lpServices: TEnumServiceStatusW; cbBufSize: uint32; var pcbBytesNeeded, lpServicesReturned, lpResumeHandle: uint32): Boolean; stdcall; external cLibName name 'EnumServicesStatusW';
function EqualPrefixSid(pSid1, pSid2: Pointer): Boolean; stdcall; external cLibName name 'EqualPrefixSid';
function EqualSid(pSid1, pSid2: Pointer): Boolean; stdcall; external cLibName name 'EqualSid';
function FindFirstFreeAce(var pAcl: TACL; var pAce: Pointer): Boolean; stdcall; external cLibName name 'FindFirstFreeAce';
function FreeSid(pSid: Pointer): Pointer; stdcall; external cLibName name 'FreeSid';
function GetAce(const pAcl: TACL; dwAceIndex: uint32; var pAce: Pointer): Boolean; stdcall; external cLibName name 'GetAce';
function GetAclInformation(const pAcl: TACL; pAclInformation: Pointer; nAclInformationLength: uint32; dwAclInformationClass: TAclInformationClass): Boolean; stdcall; external cLibName name 'GetAclInformation';
function GetCurrentHwProfile(var lpHwProfileInfo: THWProfileInfoA): Boolean; stdcall; external cLibName name 'GetCurrentHwProfileA';
function GetCurrentHwProfileW(var lpHwProfileInfo: THWProfileInfoW): Boolean; stdcall; external cLibName name 'GetCurrentHwProfileW';
function GetFileSecurity(lpFileName: PAnsiChar; RequestedInformation: TSECURITY_INFORMATION; pSecurityDescriptor: PSecurityDescriptor; nLength: uint32; var lpnLengthNeeded: uint32): Boolean; stdcall; external cLibName name 'GetFileSecurityA';
function GetFileSecurityW(lpFileName: PWideChar; RequestedInformation: TSECURITY_INFORMATION; pSecurityDescriptor: PSecurityDescriptor; nLength: uint32; var lpnLengthNeeded: uint32): Boolean; stdcall; external cLibName name 'GetFileSecurityW';
function GetKernelObjectSecurity(Handle: THandle; RequestedInformation: TSECURITY_INFORMATION; pSecurityDescriptor: PSecurityDescriptor; nLength: uint32; var lpnLengthNeeded: uint32): Boolean; stdcall; external cLibName name 'GetKernelObjectSecurity';
function GetLengthSid(pSid: Pointer): uint32; stdcall; external cLibName name 'GetLengthSid';
function GetNumberOfEventLogRecords(hEventLog: THandle; var NumberOfRecords: uint32): Boolean; stdcall; external cLibName name 'GetNumberOfEventLogRecords';
function GetOldestEventLogRecord(hEventLog: THandle; var OldestRecord: uint32): Boolean; stdcall; external cLibName name 'GetOldestEventLogRecord';
function GetPrivateObjectSecurity(ObjectDescriptor: PSecurityDescriptor; SecurityInformation: TSECURITY_INFORMATION; ResultantDescriptor: PSecurityDescriptor; DescriptorLength: uint32; var ReturnLength: uint32): Boolean; stdcall; external cLibName name 'GetPrivateObjectSecurity';
function GetSecurityDescriptorControl(pSecurityDescriptor: PSecurityDescriptor; var pControl: SECURITY_DESCRIPTOR_CONTROL; var lpdwRevision: uint32): Boolean; stdcall; external cLibName name 'GetSecurityDescriptorControl';
function GetSecurityDescriptorDacl(pSecurityDescriptor: PSecurityDescriptor; var lpbDaclPresent: Boolean; var pDacl: PACL; var lpbDaclDefaulted: Boolean): Boolean; stdcall; external cLibName name 'GetSecurityDescriptorDacl';
function GetSecurityDescriptorGroup(pSecurityDescriptor: PSecurityDescriptor; var pGroup: PSID; var lpbGroupDefaulted: Boolean): Boolean; stdcall; external cLibName name 'GetSecurityDescriptorGroup';
function GetSecurityDescriptorLength(pSecurityDescriptor: PSecurityDescriptor): uint32; stdcall; external cLibName name 'GetSecurityDescriptorLength';
function GetSecurityDescriptorOwner(pSecurityDescriptor: PSecurityDescriptor; var pOwner: PSID; var lpbOwnerDefaulted: Boolean): Boolean; stdcall; external cLibName name 'GetSecurityDescriptorOwner';
function GetSecurityDescriptorSacl(pSecurityDescriptor: PSecurityDescriptor; var lpbSaclPresent: Boolean; var pSacl: PACL; var lpbSaclDefaulted: Boolean): Boolean; stdcall; external cLibName name 'GetSecurityDescriptorSacl';
function GetServiceDisplayName(hSCManager: TSC_HANDLE; lpServiceName, lpDisplayName: PAnsiChar; var lpcchBuffer: uint32): Boolean; stdcall; external cLibName name 'GetServiceDisplayNameA';
function GetServiceDisplayNameW(hSCManager: TSC_HANDLE; lpServiceName, lpDisplayName: PWideChar; var lpcchBuffer: uint32): Boolean; stdcall; external cLibName name 'GetServiceDisplayNameW';
function GetServiceKeyName(hSCManager: TSC_HANDLE; lpDisplayName, lpServiceName: PAnsiChar; var lpcchBuffer: uint32): Boolean; stdcall; external cLibName name 'GetServiceKeyNameA';
function GetServiceKeyNameW(hSCManager: TSC_HANDLE; lpDisplayName, lpServiceName: PWideChar; var lpcchBuffer: uint32): Boolean; stdcall; external cLibName name 'GetServiceKeyNameW';
function GetSidIdentifierAuthority(pSid: Pointer): PSIDIdentifierAuthority; stdcall; external cLibName name 'GetSidIdentifierAuthority';
function GetSidLengthRequired(nSubAuthorityCount: uint8): uint32; stdcall; external cLibName name 'GetSidLengthRequired';
function GetSidSubAuthority(pSid: Pointer; nSubAuthority: uint32): puint32; stdcall; external cLibName name 'GetSidSubAuthority';
function GetSidSubAuthorityCount(pSid: Pointer): puint8; stdcall; external cLibName name 'GetSidSubAuthorityCount';
function GetTokenInformation(TokenHandle: THandle; TokenInformationClass: TTokenInformationClass; TokenInformation: Pointer; TokenInformationLength: uint32; var ReturnLength: uint32): Boolean; stdcall; external cLibName name 'GetTokenInformation';
function GetUserName(lpBuffer: PAnsiChar; var nSize: uint32): Boolean; stdcall; external cLibName name 'GetUserNameA';
function GetUserNameW(lpBuffer: PWideChar; var nSize: uint32): Boolean; stdcall; external cLibName name 'GetUserNameW';
function ImpersonateLoggedOnUser(hToken: THandle): Boolean; stdcall; external cLibName name 'ImpersonateLoggedOnUser';
function ImpersonateNamedPipeClient(hNamedPipe: THandle): Boolean; stdcall; external cLibName name 'ImpersonateNamedPipeClient';
function ImpersonateSelf(ImpersonationLevel: TSECURITY_IMPERSONATION_LEVEL): Boolean; stdcall; external cLibName name 'ImpersonateSelf';
function InitializeAcl(var pAcl: TACL; nAclLength, dwAclRevision: uint32): Boolean; stdcall; external cLibName name 'InitializeAcl';
function InitializeSecurityDescriptor(pSecurityDescriptor: PSecurityDescriptor; dwRevision: uint32): Boolean; stdcall; external cLibName name 'InitializeSecurityDescriptor';
function InitializeSid(Sid: Pointer; const pIdentifierAuthority: TSIDIdentifierAuthority; nSubAuthorityCount: Byte): Boolean; stdcall; external cLibName name 'InitializeSid';
function InitiateSystemShutdown(lpMachineName, lpMessage: PAnsiChar; dwTimeout: uint32; bForceAppsClosed, bRebootAfterShutdown: Boolean): Boolean; stdcall; external cLibName name 'InitiateSystemShutdownA';
function InitiateSystemShutdownW(lpMachineName, lpMessage: PWideChar; dwTimeout: uint32; bForceAppsClosed, bRebootAfterShutdown: Boolean): Boolean; stdcall; external cLibName name 'InitiateSystemShutdownW';
function IsTextUnicode(lpBuffer: Pointer; cb: Integer; lpi: PINT): Boolean; stdcall; external cLibName name 'IsTextUnicode';
function IsValidAcl(const pAcl: TACL): Boolean; stdcall; external cLibName name 'IsValidAcl';
function IsValidSecurityDescriptor(pSecurityDescriptor: PSecurityDescriptor): Boolean; stdcall; external cLibName name 'IsValidSecurityDescriptor';
function IsValidSid(pSid: Pointer): Boolean; stdcall; external cLibName name 'IsValidSid';
function LockServiceDatabase(hSCManager: TSC_HANDLE): SC_LOCK; stdcall; external cLibName name 'LockServiceDatabase';
function LogonUser(lpszUsername, lpszDomain, lpszPassword: PAnsiChar; dwLogonType, dwLogonProvider: uint32; var phToken: THandle): Boolean; stdcall; external cLibName name 'LogonUserA';
function LogonUserW(lpszUsername, lpszDomain, lpszPassword: PWideChar; dwLogonType, dwLogonProvider: uint32; var phToken: THandle): Boolean; stdcall; external cLibName name 'LogonUserW';
function LookupAccountName(lpSystemName, lpAccountName: PAnsiChar; Sid: PSID; var cbSid: uint32; ReferencedDomainName: PAnsiChar; var cbReferencedDomainName: uint32; var peUse: SID_NAME_USE): Boolean; stdcall; external cLibName name 'LookupAccountNameA';
function LookupAccountNameW(lpSystemName, lpAccountName: PWideChar; Sid: PSID; var cbSid: uint32; ReferencedDomainName: PWideChar; var cbReferencedDomainName: uint32; var peUse: SID_NAME_USE): Boolean; stdcall; external cLibName name 'LookupAccountNameW';
function LookupAccountSid(lpSystemName: PAnsiChar; Sid: PSID; Name: PAnsiChar; var cbName: uint32; ReferencedDomainName: PAnsiChar; var cbReferencedDomainName: uint32; var peUse: SID_NAME_USE): Boolean; stdcall; external cLibName name 'LookupAccountSidA';
function LookupAccountSidW(lpSystemName: PWideChar; Sid: PSID; Name: PWideChar; var cbName: uint32; ReferencedDomainName: PWideChar; var cbReferencedDomainName: uint32; var peUse: SID_NAME_USE): Boolean; stdcall; external cLibName name 'LookupAccountSidW';
function LookupPrivilegeDisplayName(lpSystemName, lpName: PAnsiChar; lpDisplayName: PAnsiChar; var cbDisplayName, lpLanguageId: uint32): Boolean; stdcall; external cLibName name 'LookupPrivilegeDisplayNameA';
function LookupPrivilegeDisplayNameW(lpSystemName, lpName: PAnsiChar; lpDisplayName: PWideChar; var cbDisplayName, lpLanguageId: uint32): Boolean; stdcall; external cLibName name 'LookupPrivilegeDisplayNameW';
function LookupPrivilegeName(lpSystemName: PAnsiChar; var lpLuid: TLargeInteger; lpName: PAnsiChar; var cbName: uint32): Boolean; stdcall; external cLibName name 'LookupPrivilegeNameA';
function LookupPrivilegeNameW(lpSystemName: PWideChar; var lpLuid: TLargeInteger; lpName: PWideChar; var cbName: uint32): Boolean; stdcall; external cLibName name 'LookupPrivilegeNameW';
function LookupPrivilegeValue(lpSystemName, lpName: PAnsiChar; var lpLuid: TLargeInteger): Boolean; stdcall; external cLibName name 'LookupPrivilegeValueA';
function LookupPrivilegeValueW(lpSystemName, lpName: PWideChar; var lpLuid: TLargeInteger): Boolean; stdcall; external cLibName name 'LookupPrivilegeValueW';
function MakeAbsoluteSD(pSelfRelativeSecurityDescriptor: PSecurityDescriptor; pAbsoluteSecurityDescriptor: PSecurityDescriptor; var lpdwAbsoluteSecurityDescriptorSi: uint32; var pDacl: TACL; var lpdwDaclSize: uint32; var pSacl: TACL; var lpdwSaclSize: uint32; pOwner: PSID; var lpdwOwnerSize: uint32; pPrimaryGroup: Pointer; var lpdwPrimaryGroupSize: uint32): Boolean; stdcall; external cLibName name 'MakeAbsoluteSD';
function MakeSelfRelativeSD(pAbsoluteSecurityDescriptor: PSecurityDescriptor; pSelfRelativeSecurityDescriptor: PSecurityDescriptor; var lpdwBufferLength: uint32): Boolean; stdcall; external cLibName name 'MakeSelfRelativeSD';
procedure MapGenericMask(var AccessMask: uint32; const GenericMapping: TGenericMapping); stdcall; external cLibName name 'MapGenericMask';
function NotifyBootConfigStatus(BootAcceptable: Boolean): Boolean; stdcall; external cLibName name 'NotifyBootConfigStatus';
function NotifyChangeEventLog(hEventLog, hEvent: THandle): Boolean; stdcall; external cLibName name 'NotifyChangeEventLog';
function ObjectCloseAuditAlarm(SubsystemName: PAnsiChar; HandleId: Pointer; GenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'ObjectCloseAuditAlarmA';
function ObjectCloseAuditAlarmW(SubsystemName: PWideChar; HandleId: Pointer; GenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'ObjectCloseAuditAlarmW';
function ObjectDeleteAuditAlarm(SubsystemName: PAnsiChar; HandleId: Pointer; GenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'ObjectDeleteAuditAlarmA';
function ObjectDeleteAuditAlarmW(SubsystemName: PWideChar; HandleId: Pointer; GenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'ObjectDeleteAuditAlarmW';
function ObjectOpenAuditAlarm(SubsystemName: PAnsiChar; HandleId: Pointer; ObjectTypeName: PAnsiChar; ObjectName: PAnsiChar; pSecurityDescriptor: PSecurityDescriptor; ClientToken: THandle; DesiredAccess, GrantedAccess: uint32; var Privileges: TPrivilegeSet; ObjectCreation, AccessGranted: Boolean; var GenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'ObjectOpenAuditAlarmA';
function ObjectOpenAuditAlarmW(SubsystemName: PWideChar; HandleId: Pointer; ObjectTypeName: PWideChar; ObjectName: PWideChar; pSecurityDescriptor: PSecurityDescriptor; ClientToken: THandle; DesiredAccess, GrantedAccess: uint32; var Privileges: TPrivilegeSet; ObjectCreation, AccessGranted: Boolean; var GenerateOnClose: Boolean): Boolean; stdcall; external cLibName name 'ObjectOpenAuditAlarmW';
function ObjectPrivilegeAuditAlarm(SubsystemName: PAnsiChar; HandleId: Pointer; ClientToken: THandle; DesiredAccess: uint32; var Privileges: TPrivilegeSet; AccessGranted: Boolean): Boolean; stdcall; external cLibName name 'ObjectPrivilegeAuditAlarmA';
function ObjectPrivilegeAuditAlarmW(SubsystemName: PWideChar; HandleId: Pointer; ClientToken: THandle; DesiredAccess: uint32; var Privileges: TPrivilegeSet; AccessGranted: Boolean): Boolean; stdcall; external cLibName name 'ObjectPrivilegeAuditAlarmW';
function OpenBackupEventLog(lpUNCServerName, lpFileName: PAnsiChar): THandle; stdcall; external cLibName name 'OpenBackupEventLogA';
function OpenBackupEventLogW(lpUNCServerName, lpFileName: PWideChar): THandle; stdcall; external cLibName name 'OpenBackupEventLogW';
function OpenEventLog(lpUNCServerName, lpSourceName: PAnsiChar): THandle; stdcall; external cLibName name 'OpenEventLogA';
function OpenEventLogW(lpUNCServerName, lpSourceName: PWideChar): THandle; stdcall; external cLibName name 'OpenEventLogW';
function OpenProcessToken(ProcessHandle: THandle; DesiredAccess: uint32; var TokenHandle: THandle): Boolean; stdcall; external cLibName name 'OpenProcessToken';
function OpenSCManager(lpMachineName, lpDatabaseName: PAnsiChar; dwDesiredAccess: uint32): TSC_HANDLE; stdcall; external cLibName name 'OpenSCManagerA';
function OpenSCManagerW(lpMachineName, lpDatabaseName: PWideChar; dwDesiredAccess: uint32): TSC_HANDLE; stdcall; external cLibName name 'OpenSCManagerW';
function OpenService(hSCManager: TSC_HANDLE; lpServiceName: PAnsiChar; dwDesiredAccess: uint32): TSC_HANDLE; stdcall; external cLibName name 'OpenServiceA';
function OpenServiceW(hSCManager: TSC_HANDLE; lpServiceName: PWideChar; dwDesiredAccess: uint32): TSC_HANDLE; stdcall; external cLibName name 'OpenServiceW';
function OpenThreadToken(ThreadHandle: THandle; DesiredAccess: uint32; OpenAsSelf: Boolean; var TokenHandle: THandle): Boolean; stdcall; external cLibName name 'OpenThreadToken';
function PrivilegeCheck(ClientToken: THandle; const RequiredPrivileges: TPrivilegeSet; var pfResult: Boolean): Boolean; stdcall; external cLibName name 'PrivilegeCheck';
function PrivilegedServiceAuditAlarm(SubsystemName, ServiceName: PAnsiChar; ClientToken: THandle; var Privileges: TPrivilegeSet; AccessGranted: Boolean): Boolean; stdcall; external cLibName name 'PrivilegedServiceAuditAlarmA';
function PrivilegedServiceAuditAlarmW(SubsystemName, ServiceName: PWideChar; ClientToken: THandle; var Privileges: TPrivilegeSet; AccessGranted: Boolean): Boolean; stdcall; external cLibName name 'PrivilegedServiceAuditAlarmW';
function QueryServiceConfig(hService: TSC_HANDLE; lpServiceConfig: PQueryServiceConfigA; cbBufSize: uint32; var pcbBytesNeeded: uint32): Boolean; stdcall; external cLibName name 'QueryServiceConfigA';
function QueryServiceConfigW(hService: TSC_HANDLE; lpServiceConfig: PQueryServiceConfigW; cbBufSize: uint32; var pcbBytesNeeded: uint32): Boolean; stdcall; external cLibName name 'QueryServiceConfigW';
function QueryServiceLockStatus(hSCManager: TSC_HANDLE; var lpLockStatus: TQueryServiceLockStatusA; cbBufSize: uint32; var pcbBytesNeeded: uint32): Boolean; stdcall; external cLibName name 'QueryServiceLockStatusA';
function QueryServiceLockStatusW(hSCManager: TSC_HANDLE; var lpLockStatus: TQueryServiceLockStatusW; cbBufSize: uint32; var pcbBytesNeeded: uint32): Boolean; stdcall; external cLibName name 'QueryServiceLockStatusW';
function QueryServiceObjectSecurity(hService: TSC_HANDLE; dwSecurityInformation: TSECURITY_INFORMATION; lpSecurityDescriptor: PSECURITY_DESCRIPTOR; cbBufSize: uint32; var pcbBytesNeeded: uint32): Boolean; stdcall; external cLibName name 'QueryServiceObjectSecurity';
function QueryServiceStatus(hService: TSC_HANDLE; var lpServiceStatus: TServiceStatus): Boolean; stdcall; external cLibName name 'QueryServiceStatus';
function ReadEventLog(hEventLog: THandle; dwReadFlags, dwRecordOffset: uint32; lpBuffer: Pointer; nNumberOfBytesToRead: uint32; var pnBytesRead, pnMinNumberOfBytesNeeded: uint32): Boolean; stdcall; external cLibName name 'ReadEventLogA';
function ReadEventLogW(hEventLog: THandle; dwReadFlags, dwRecordOffset: uint32; lpBuffer: Pointer; nNumberOfBytesToRead: uint32; var pnBytesRead, pnMinNumberOfBytesNeeded: uint32): Boolean; stdcall; external cLibName name 'ReadEventLogW';
function RegCloseKey(hKey: HKEY): Longint; stdcall; external cLibName name 'RegCloseKey';
function RegConnectRegistry(lpMachineName: PAnsiChar; hKey: HKEY; var phkResult: HKEY): Longint; stdcall; external cLibName name 'RegConnectRegistryA';
function RegConnectRegistryW(lpMachineName: PWideChar; hKey: HKEY; var phkResult: HKEY): Longint; stdcall; external cLibName name 'RegConnectRegistryW';
function RegCreateKey(hKey: HKEY; lpSubKey: PAnsiChar; var phkResult: HKEY): Longint; stdcall; external cLibName name 'RegCreateKeyA';
function RegCreateKeyEx(hKey: HKEY; lpSubKey: PAnsiChar; Reserved: uint32; lpClass: PAnsiChar; dwOptions: uint32; samDesired: REGSAM; lpSecurityAttributes: PSecurityAttributes; var phkResult: HKEY; lpdwDisposition: Puint32): Longint; stdcall; external cLibName name 'RegCreateKeyExA';
function RegCreateKeyExW(hKey: HKEY; lpSubKey: PWideChar; Reserved: uint32; lpClass: PWideChar; dwOptions: uint32; samDesired: REGSAM; lpSecurityAttributes: PSecurityAttributes; var phkResult: HKEY; lpdwDisposition: Puint32): Longint; stdcall; external cLibName name 'RegCreateKeyExW';
function RegCreateKeyW(hKey: HKEY; lpSubKey: PWideChar; var phkResult: HKEY): Longint; stdcall; external cLibName name 'RegCreateKeyW';
function RegDeleteKey(hKey: HKEY; lpSubKey: PAnsiChar): Longint; stdcall; external cLibName name 'RegDeleteKeyA';
function RegDeleteKeyW(hKey: HKEY; lpSubKey: PWideChar): Longint; stdcall; external cLibName name 'RegDeleteKeyW';
function RegDeleteValue(hKey: HKEY; lpValueName: PAnsiChar): Longint; stdcall; external cLibName name 'RegDeleteValueA';
function RegDeleteValueW(hKey: HKEY; lpValueName: PWideChar): Longint; stdcall; external cLibName name 'RegDeleteValueW';
function RegEnumKey(hKey: HKEY; dwIndex: uint32; lpName: PAnsiChar; cbName: uint32): Longint; stdcall; external cLibName name 'RegEnumKeyA';
function RegEnumKeyEx(hKey: HKEY; dwIndex: uint32; lpName: PAnsiChar; var lpcbName: uint32; lpReserved: Pointer; lpClass: PAnsiChar; lpcbClass: Puint32; lpftLastWriteTime: PFileTime): Longint; stdcall; external cLibName name 'RegEnumKeyExA';
function RegEnumKeyExW(hKey: HKEY; dwIndex: uint32; lpName: PWideChar; var lpcbName: uint32; lpReserved: Pointer; lpClass: PWideChar; lpcbClass: Puint32; lpftLastWriteTime: PFileTime): Longint; stdcall; external cLibName name 'RegEnumKeyExW';
function RegEnumKeyW(hKey: HKEY; dwIndex: uint32; lpName: PWideChar; cbName: uint32): Longint; stdcall; external cLibName name 'RegEnumKeyW';
function RegEnumValue(hKey: HKEY; dwIndex: uint32; lpValueName: LPWStr; var lpcbValueName: uint32; lpReserved: Pointer; lpType: Puint32; lpData: PByte; lpcbData: Puint32): Longint; stdcall; external cLibName name 'RegEnumValueA';
function RegEnumValueW(hKey: HKEY; dwIndex: uint32; lpValueName: LPWStr; var lpcbValueName: uint32; lpReserved: Pointer; lpType: Puint32; lpData: PByte; lpcbData: Puint32): Longint; stdcall; external cLibName name 'RegEnumValueW';
function RegFlushKey(hKey: HKEY): Longint; stdcall; external cLibName name 'RegFlushKey';
function RegGetKeySecurity(hKey: HKEY; SecurityInformation: TSECURITY_INFORMATION; pSecurityDescriptor: PSecurityDescriptor; var lpcbSecurityDescriptor: uint32): Longint; stdcall; external cLibName name 'RegGetKeySecurity';
function RegLoadKey(hKey: HKEY; lpSubKey, lpFile: PAnsiChar): Longint; stdcall; external cLibName name 'RegLoadKeyA';
function RegLoadKeyW(hKey: HKEY; lpSubKey, lpFile: PWideChar): Longint; stdcall; external cLibName name 'RegLoadKeyW';
function RegNotifyChangeKeyValue(hKey: HKEY; bWatchSubtree: Boolean; dwNotifyFilter: uint32; hEvent: THandle; fAsynchronus: Boolean): Longint; stdcall; external cLibName name 'RegNotifyChangeKeyValue';
function RegOpenKey(hKey: HKEY; lpSubKey: PAnsiChar; var phkResult: HKEY): Longint; stdcall; external cLibName name 'RegOpenKeyA';
function RegOpenKeyEx(hKey: HKEY; lpSubKey: PAnsiChar; ulOptions: uint32; samDesired: REGSAM; var phkResult: HKEY): Longint; stdcall; external cLibName name 'RegOpenKeyExA';
function RegOpenKeyExW(hKey: HKEY; lpSubKey: PWideChar; ulOptions: uint32; samDesired: REGSAM; var phkResult: HKEY): Longint; stdcall; external cLibName name 'RegOpenKeyExW';
function RegOpenKeyW(hKey: HKEY; lpSubKey: PWideChar; var phkResult: HKEY): Longint; stdcall; external cLibName name 'RegOpenKeyW';
function RegQueryInfoKey(hKey: HKEY; lpClass: LPWStr; lpcbClass: Puint32; lpReserved: Pointer; lpcSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues, lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor: Puint32; lpftLastWriteTime: PFileTime): Longint; stdcall; external cLibName name 'RegQueryInfoKeyA';
function RegQueryInfoKeyW(hKey: HKEY; lpClass: LPWStr; lpcbClass: Puint32; lpReserved: Pointer; lpcSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues, lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor: Puint32; lpftLastWriteTime: PFileTime): Longint; stdcall; external cLibName name 'RegQueryInfoKeyW';
function RegQueryMultipleValues(hKey: HKEY; var ValList; NumVals: uint32; lpValueBuf: PAnsiChar; var ldwTotsize: uint32): Longint; stdcall; external cLibName name 'RegQueryMultipleValuesA';
function RegQueryMultipleValuesW(hKey: HKEY; var ValList; NumVals: uint32; lpValueBuf: PWideChar; var ldwTotsize: uint32): Longint; stdcall; external cLibName name 'RegQueryMultipleValuesW';
function RegQueryValue(hKey: HKEY; lpSubKey: PAnsiChar; lpValue: PAnsiChar; var lpcbValue: Longint): Longint; stdcall; external cLibName name 'RegQueryValueA';
function RegQueryValueEx(hKey: HKEY; lpValueName: PAnsiChar; lpReserved: Pointer; lpType: Puint32; lpData: PByte; lpcbData: Puint32): Longint; stdcall; external cLibName name 'RegQueryValueExA';
function RegQueryValueExW(hKey: HKEY; lpValueName: PWideChar; lpReserved: Pointer; lpType: Puint32; lpData: PByte; lpcbData: Puint32): Longint; stdcall; external cLibName name 'RegQueryValueExW';
function RegQueryValueW(hKey: HKEY; lpSubKey: PWideChar; lpValue: PWideChar; var lpcbValue: Longint): Longint; stdcall; external cLibName name 'RegQueryValueW';
function RegReplaceKey(hKey: HKEY; lpSubKey: PAnsiChar; lpNewFile: PAnsiChar; lpOldFile: PAnsiChar): Longint; stdcall; external cLibName name 'RegReplaceKeyA';
function RegReplaceKeyW(hKey: HKEY; lpSubKey: PWideChar; lpNewFile: PWideChar; lpOldFile: PWideChar): Longint; stdcall; external cLibName name 'RegReplaceKeyW';
function RegRestoreKey(hKey: HKEY; lpFile: PAnsiChar; dwFlags: uint32): Longint; stdcall; external cLibName name 'RegRestoreKeyA';
function RegRestoreKeyW(hKey: HKEY; lpFile: PWideChar; dwFlags: uint32): Longint; stdcall; external cLibName name 'RegRestoreKeyW';
function RegSaveKey(hKey: HKEY; lpFile: PAnsiChar; lpSecurityAttributes: PSecurityAttributes): Longint; stdcall; external cLibName name 'RegSaveKeyA';
function RegSaveKeyW(hKey: HKEY; lpFile: PWideChar; lpSecurityAttributes: PSecurityAttributes): Longint; stdcall; external cLibName name 'RegSaveKeyW';
function RegSetKeySecurity(hKey: HKEY; SecurityInformation: TSECURITY_INFORMATION; pSecurityDescriptor: PSECURITY_DESCRIPTOR): Longint; stdcall; external cLibName name 'RegSetKeySecurity';
function RegSetValue(hKey: HKEY; lpSubKey: PAnsiChar; dwType: uint32; lpData: PAnsiChar; cbData: uint32): Longint; stdcall; external cLibName name 'RegSetValueA';
function RegSetValueEx(hKey: HKEY; lpValueName: PAnsiChar; Reserved: uint32; dwType: uint32; lpData: Pointer; cbData: uint32): Longint; stdcall; external cLibName name 'RegSetValueExA';
function RegSetValueExW(hKey: HKEY; lpValueName: PWideChar; Reserved: uint32; dwType: uint32; lpData: Pointer; cbData: uint32): Longint; stdcall; external cLibName name 'RegSetValueExW';
function RegSetValueW(hKey: HKEY; lpSubKey: PWideChar; dwType: uint32; lpData: PWideChar; cbData: uint32): Longint; stdcall; external cLibName name 'RegSetValueW';
function RegUnLoadKey(hKey: HKEY; lpSubKey: PAnsiChar): Longint; stdcall; external cLibName name 'RegUnLoadKeyA';
function RegUnLoadKeyW(hKey: HKEY; lpSubKey: PWideChar): Longint; stdcall; external cLibName name 'RegUnLoadKeyW';
function RegisterEventSource(lpUNCServerName, lpSourceName: PAnsiChar): THandle; stdcall; external cLibName name 'RegisterEventSourceA';
function RegisterEventSourceW(lpUNCServerName, lpSourceName: PWideChar): THandle; stdcall; external cLibName name 'RegisterEventSourceW';
function RegisterServiceCtrlHandler(lpServiceName: PAnsiChar; lpHandlerProc: ThandlerFunction): TServiceStatusHandle; stdcall; external cLibName name 'RegisterServiceCtrlHandlerA';
function RegisterServiceCtrlHandlerW(lpServiceName: PWideChar; lpHandlerProc: ThandlerFunction): TServiceStatusHandle; stdcall; external cLibName name 'RegisterServiceCtrlHandlerW';
function ReportEvent(hEventLog: THandle; wType, wCategory: Word; dwEventID: uint32; lpUserSid: Pointer; wNumStrings: Word; dwDataSize: uint32; lpStrings, lpRawData: Pointer): Boolean; stdcall; external cLibName name 'ReportEventA';
function ReportEventW(hEventLog: THandle; wType, wCategory: Word; dwEventID: uint32; lpUserSid: Pointer; wNumStrings: Word; dwDataSize: uint32; lpStrings, lpRawData: Pointer): Boolean; stdcall; external cLibName name 'ReportEventW';
function RevertToSelf: Boolean; stdcall; external cLibName name 'RevertToSelf';
function SetAclInformation(var pAcl: TACL; pAclInformation: Pointer; nAclInformationLength: uint32; dwAclInformationClass: TAclInformationClass): Boolean; stdcall; external cLibName name 'SetAclInformation';
function SetFileSecurity(lpFileName: PAnsiChar; SecurityInformation: TSECURITY_INFORMATION; pSecurityDescriptor: PSecurityDescriptor): Boolean; stdcall; external cLibName name 'SetFileSecurityA';
function SetFileSecurityW(lpFileName: PWideChar; SecurityInformation: TSECURITY_INFORMATION; pSecurityDescriptor: PSecurityDescriptor): Boolean; stdcall; external cLibName name 'SetFileSecurityW';
function SetKernelObjectSecurity(Handle: THandle; SecurityInformation: TSECURITY_INFORMATION; SecurityDescriptor: PSecurityDescriptor): Boolean; stdcall; external cLibName name 'SetKernelObjectSecurity';
function SetPrivateObjectSecurity(SecurityInformation: TSECURITY_INFORMATION; ModificationDescriptor: PSecurityDescriptor; var ObjectsSecurityDescriptor: PSecurityDescriptor; const GenericMapping: TGenericMapping; Token: THandle): Boolean; stdcall; external cLibName name 'SetPrivateObjectSecurity';
function SetPrivateObjectSecurityEx(SecurityInformation: TSECURITY_INFORMATION; ModificationDescriptor: PSecurityDescriptor; var ObjectsSecurityDescriptor: PSecurityDescriptor; AutoInheritFlags: uint32; const GenericMapping: TGenericMapping; Token: THandle): Boolean; stdcall; external cLibName name 'SetPrivateObjectSecurityEx';
function SetSecurityDescriptorControl(pSecurityDescriptor: PSecurityDescriptor; ControlBitsOfInterest, ControlBitsToSet: SECURITY_DESCRIPTOR_CONTROL): Boolean; stdcall; external cLibName name 'SetSecurityDescriptorControl';
function SetSecurityDescriptorDacl(pSecurityDescriptor: PSecurityDescriptor; bDaclPresent: Boolean; pDacl: PACL; bDaclDefaulted: Boolean): Boolean; stdcall; external cLibName name 'SetSecurityDescriptorDacl';
function SetSecurityDescriptorGroup(pSecurityDescriptor: PSecurityDescriptor; pGroup: PSID; bGroupDefaulted: Boolean): Boolean; stdcall; external cLibName name 'SetSecurityDescriptorGroup';
function SetSecurityDescriptorOwner(pSecurityDescriptor: PSecurityDescriptor; pOwner: PSID; bOwnerDefaulted: Boolean): Boolean; stdcall; external cLibName name 'SetSecurityDescriptorOwner';
function SetSecurityDescriptorSacl(pSecurityDescriptor: PSecurityDescriptor; bSaclPresent: Boolean; pSacl: PACL; bSaclDefaulted: Boolean): Boolean; stdcall; external cLibName name 'SetSecurityDescriptorSacl';
function SetServiceObjectSecurity(hService: TSC_HANDLE; dwSecurityInformation: TSECURITY_INFORMATION; lpSecurityDescriptor: PSECURITY_DESCRIPTOR): Boolean; stdcall; external cLibName name 'SetServiceObjectSecurity';
function SetServiceStatus(hServiceStatus: TServiceStatusHandle; var lpServiceStatus: TServiceStatus): Boolean; stdcall; external cLibName name 'SetServiceStatus';
function SetThreadToken(Thread: PHandle; Token: THandle): Boolean; stdcall; external cLibName name 'SetThreadToken';
function SetTokenInformation(TokenHandle: THandle; TokenInformationClass: TTokenInformationClass; TokenInformation: Pointer; TokenInformationLength: uint32): Boolean; stdcall; external cLibName name 'SetTokenInformation';
function StartService(hService: TSC_HANDLE; dwNumServiceArgs: uint32; var lpServiceArgVectors: PAnsiChar): Boolean; stdcall; external cLibName name 'StartServiceA';
function StartServiceCtrlDispatcher(lpServiceStartTable: PServiceTableEntryA): Boolean; stdcall; external cLibName name 'StartServiceCtrlDispatcherA';
function StartServiceCtrlDispatcherW(lpServiceStartTable: PServiceTableEntryW): Boolean; stdcall; external cLibName name 'StartServiceCtrlDispatcherW';
function StartServiceW(hService: TSC_HANDLE; dwNumServiceArgs: uint32; var lpServiceArgVectors: PWideChar): Boolean; stdcall; external cLibName name 'StartServiceW';
function UnlockServiceDatabase(ScLock: SC_LOCK): Boolean; stdcall; external cLibName name 'UnlockServiceDatabase';
function RegisterServiceCtrlHandlerExA(lpServiceName: LPCSTR; lpHandlerProc: THandlerEx; lpContext: LPVOID): TServiceStatusHandle; stdcall; external cLibName name 'RegisterServiceCtrlHandlerExA';
function RegisterServiceCtrlHandlerExW(lpServiceName: LPCWSTR; lpHandlerProc: THandlerEx; lpContext: LPVOID): TServiceStatusHandle; stdcall; external cLibName name 'RegisterServiceCtrlHandlerExW';

{$endif}
implementation

end.
