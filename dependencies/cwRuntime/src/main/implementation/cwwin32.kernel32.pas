{$ifdef license}
(*
  Copyright 2020 ChapmanWorld LLC ( https://chapmanworld.com )

  Redistribution and use in source and binary forms, with or without modification,
  are permitted provided that the following conditions are met:

  1. Redistributions of source code must retain the above copyright notice,
     this list of conditions and the following disclaimer.

  2. Redistributions in binary form must reproduce the above copyright notice,
     this list of conditions and the following disclaimer in the documentation and/or
     other materials provided with the distribution.

  3. Neither the name of the copyright holder nor the names of its contributors may be
     used to endorse or promote products derived from this software without specific prior
     written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*)
{$endif}
/// <remarks>
///   cwWin32.xxx represents an incomplete Win32 API binding.
/// </remarks>
unit cwWin32.Kernel32;
{$ifdef fpc}{$mode delphiunicode}{$endif}

interface
{$ifdef MSWINDOWS}
uses
 cwWin32.Types
;

const
  cLibName = 'kernel32.dll';

// Report generated by PE Explorer 1.99 (http://www.heaventools.com)
// File name: C:\Windows\System32\kernel32.dll
// Created  : 23.02.2017 00:38
// Type     : Exports
// BaseThreadInitThunk; Index 1;	Information not available
// InterlockedPushListSList; Index 2;	Information not available
// Wow64Transition; Index 3;		Information not available
// AcquireSRWLockShared; Index 5;	Information not available
// ActivateActCtx; Index 6;		Information not available
// ActivateActCtxWorker; Index 7;	Information not available
// AddConsoleAliasA; Index 10;		Information not available
// AddConsoleAliasW; Index 11;		Information not available
// AddDllDirectory; Index 12;		Information not available
// AddIntegrityLabelToBoundaryDescriptor; Index 13;	Information not available
// AddLocalAlternateComputerNameA; Index 14;	Information not available
// AddLocalAlternateComputerNameW; Index 15;	Information not available
// AddRefActCtx; Index 16;		Information not available
// AddRefActCtxWorker; Index 17;	Information not available
// AddResourceAttributeAce; Index 18;	Information not available
// AddSIDToBoundaryDescriptor; Index 19;	Information not available
// AddScopedPolicyIDAce; Index 20;	Information not available
// AddSecureMemoryCacheCallback; Index 21;	Information not available
// AddVectoredContinueHandler; Index 22;	Information not available
// AddVectoredExceptionHandler; Index 23;	Information not available
// AdjustCalendarDate; Index 24;	Information not available
// AllocateUserPhysicalPages; Index 26;	Information not available
// AllocateUserPhysicalPagesNuma; Index 27;	Information not available
// AppPolicyGetClrCompat; Index 28;	Information not available
// AppPolicyGetCreateFileAccess; Index 29;	Information not available
// AppPolicyGetLifecycleManagement; Index 30;	Information not available
// AppPolicyGetMediaFoundationCodecLoading; Index 31;	Information not available
// AppPolicyGetProcessTerminationMethod; Index 32;	Information not available
// AppPolicyGetShowDeveloperDiagnostic; Index 33;	Information not available
// AppPolicyGetThreadInitializationType; Index 34;	Information not available
// AppPolicyGetWindowingModel; Index 35;	Information not available
// AppXGetOSMaxVersionTested; Index 36;	Information not available
// ApplicationRecoveryFinished; Index 37;	Information not available
// ApplicationRecoveryInProgress; Index 38;	Information not available
// AssignProcessToJobObject; Index 40;	Information not available
// AttachConsole; Index 41;		Information not available
// BaseCheckAppcompatCache; Index 45;	Information not available
// BaseCheckAppcompatCacheEx; Index 46;	Information not available
// BaseCheckAppcompatCacheExWorker; Index 47;	Information not available
// BaseCheckAppcompatCacheWorker; Index 48;	Information not available
// BaseCheckElevation; Index 49;	Information not available
// BaseCleanupAppcompatCacheSupport; Index 50;	Information not available
// BaseCleanupAppcompatCacheSupportWorker; Index 51;	Information not available
// BaseDestroyVDMEnvironment; Index 52;	Information not available
// BaseDllReadWriteIniFile; Index 53;	Information not available
// BaseDumpAppcompatCache; Index 54;	Information not available
// BaseDumpAppcompatCacheWorker; Index 55;	Information not available
// BaseElevationPostProcessing; Index 56;	Information not available
// BaseFlushAppcompatCache; Index 57;	Information not available
// BaseFlushAppcompatCacheWorker; Index 58;	Information not available
// BaseFormatObjectAttributes; Index 59;	Information not available
// BaseFormatTimeOut; Index 60;		Information not available
// BaseFreeAppCompatDataForProcessWorker; Index 61;	Information not available
// BaseGenerateAppCompatData; Index 62;	Information not available
// BaseGetNamedObjectDirectory; Index 63;	Information not available
// BaseInitAppcompatCacheSupport; Index 64;	Information not available
// BaseInitAppcompatCacheSupportWorker; Index 65;	Information not available
// BaseIsAppcompatInfrastructureDisabled; Index 66;	Information not available
// BaseIsAppcompatInfrastructureDisabledWorker; Index 67;	Information not available
// BaseIsDosApplication; Index 68;	Information not available
// BaseQueryModuleData; Index 69;	Information not available
// BaseReadAppCompatDataForProcessWorker; Index 70;	Information not available
// BaseSetLastNTError; Index 71;	Information not available
// BaseUpdateAppcompatCache; Index 72;	Information not available
// BaseUpdateAppcompatCacheWorker; Index 73;	Information not available
// BaseUpdateVDMEntry; Index 74;	Information not available
// BaseVerifyUnicodeString; Index 75;	Information not available
// BaseWriteErrorElevationRequiredEvent; Index 76;	Information not available
// Basep8BitStringToDynamicUnicodeString; Index 77;	Information not available
// BasepAllocateActivationContextActivationBlock; Index 78;	Information not available
// BasepAnsiStringToDynamicUnicodeString; Index 79;	Information not available
// BasepAppContainerEnvironmentExtension; Index 80;	Information not available
// BasepAppXExtension; Index 81;	Information not available
// BasepCheckAppCompat; Index 82;	Information not available
// BasepCheckWebBladeHashes; Index 83;	Information not available
// BasepCheckWinSaferRestrictions; Index 84;	Information not available
// BasepConstructSxsCreateProcessMessage; Index 85;	Information not available
// BasepCopyEncryption; Index 86;	Information not available
// BasepFreeActivationContextActivationBlock; Index 87;	Information not available
// BasepFreeAppCompatData; Index 88;	Information not available
// BasepGetAppCompatData; Index 89;	Information not available
// BasepGetComputerNameFromNtPath; Index 90;	Information not available
// BasepGetExeArchType; Index 91;	Information not available
// BasepIsProcessAllowed; Index 92;	Information not available
// BasepMapModuleHandle; Index 93;	Information not available
// BasepNotifyLoadStringResource; Index 94;	Information not available
// BasepPostSuccessAppXExtension; Index 95;	Information not available
// BasepProcessInvalidImage; Index 96;	Information not available
// BasepQueryAppCompat; Index 97;	Information not available
// BasepReleaseAppXContext; Index 98;	Information not available
// BasepReleaseSxsCreateProcessUtilityStruct; Index 99;	Information not available
// BasepReportFault; Index 100;		Information not available
// BasepSetFileEncryptionCompression; Index 101;	Information not available
// BindIoCompletionCallback; Index 105;	Information not available
// CallbackMayRunLong; Index 112;	Information not available
// CancelDeviceWakeupRequest; Index 113;	Information not available
// CancelIoEx; Index 115;		Information not available
// CancelSynchronousIo; Index 116;	Information not available
// CancelThreadpoolIo; Index 117;	Information not available
// CancelTimerQueueTimer; Index 118;	Information not available
// CeipIsOptedIn; Index 120;		Information not available
// ChangeTimerQueueTimer; Index 121;	Information not available
// CheckAllowDecryptedRemoteDestinationPolicy; Index 122;	Information not available
// CheckElevation; Index 123;		Information not available
// CheckElevationEnabled; Index 124;	Information not available
// CheckForReadOnlyResource; Index 125;	Information not available
// CheckForReadOnlyResourceFilter; Index 126;	Information not available
// CheckNameLegalDOS8Dot3A; Index 127;	Information not available
// CheckNameLegalDOS8Dot3W; Index 128;	Information not available
// CheckRemoteDebuggerPresent; Index 129;	Information not available
// CheckTokenCapability; Index 130;	Information not available
// CheckTokenMembershipEx; Index 131;	Information not available
// CloseConsoleHandle; Index 134;	Information not available
// ClosePackageInfo; Index 136;		Information not available
// ClosePrivateNamespace; Index 137;	Information not available
// CloseProfileUserMapping; Index 138;	Information not available
// CloseState; Index 139;		Information not available
// CloseThreadpool; Index 140;		Information not available
// CloseThreadpoolCleanupGroup; Index 141;	Information not available
// CloseThreadpoolCleanupGroupMembers; Index 142;	Information not available
// CloseThreadpoolIo; Index 143;	Information not available
// CloseThreadpoolTimer; Index 144;	Information not available
// CloseThreadpoolWait; Index 145;	Information not available
// CloseThreadpoolWork; Index 146;	Information not available
// CmdBatNotification; Index 147;	Information not available
// CompareCalendarDates; Index 150;	Information not available
// CompareStringEx; Index 153;		Information not available
// CompareStringOrdinal; Index 154;	Information not available
// ConsoleMenuControl; Index 157;	Information not available
// ConvertCalDateTimeToSystemTime; Index 159;	Information not available
// ConvertFiberToThread; Index 161;	Information not available
// ConvertNLSDayOfWeekToWin32DayOfWeek; Index 162;	Information not available
// ConvertSystemTimeToCalDateTime; Index 163;	Information not available
// ConvertThreadToFiberEx; Index 165;	Information not available
// CopyContext; Index 166;		Information not available
// CopyFile2; Index 167;		Information not available
// CopyFileTransactedA; Index 171;	Information not available
// CopyFileTransactedW; Index 172;	Information not available
// CopyLZFile; Index 174;		Information not available
// CreateActCtxA; Index 175;		Information not available
// CreateActCtxW; Index 176;		Information not available
// CreateActCtxWWorker; Index 177;	Information not available
// CreateBoundaryDescriptorA; Index 178;	Information not available
// CreateBoundaryDescriptorW; Index 179;	Information not available
// CreateDirectoryTransactedA; Index 184;	Information not available
// CreateDirectoryTransactedW; Index 185;	Information not available
// CreateEnclave; Index 187;		Information not available
// CreateEventExA; Index 189;		Information not available
// CreateEventExW; Index 190;		Information not available
// CreateFiberEx; Index 193;		Information not available
// CreateFile2; Index 194;		Information not available
// CreateFileMappingFromApp; Index 197;	Information not available
// CreateFileMappingNumaA; Index 198;	Information not available
// CreateFileMappingNumaW; Index 199;	Information not available
// CreateFileTransactedA; Index 201;	Information not available
// CreateFileTransactedW; Index 202;	Information not available
// CreateHardLinkTransactedA; Index 205;	Information not available
// CreateHardLinkTransactedW; Index 206;	Information not available
// CreateJobObjectA; Index 209;		Information not available
// CreateJobObjectW; Index 210;		Information not available
// CreateJobSet; Index 211;		Information not available
// CreateMemoryResourceNotification; Index 214;	Information not available
// CreateMutexExA; Index 216;		Information not available
// CreateMutexExW; Index 217;		Information not available
// CreatePrivateNamespaceA; Index 222;	Information not available
// CreatePrivateNamespaceW; Index 223;	Information not available
// CreateProcessAsUserA; Index 225;	Information not available
// CreateProcessAsUserW; Index 226;	Information not available
// CreateProcessInternalA; Index 227;	Information not available
// CreateProcessInternalW; Index 228;	Information not available
// CreateRemoteThreadEx; Index 231;	Information not available
// CreateSemaphoreExA; Index 233;	Information not available
// CreateSemaphoreExW; Index 234;	Information not available
// CreateSocketHandle; Index 236;	Information not available
// CreateSymbolicLinkA; Index 237;	Information not available
// CreateSymbolicLinkTransactedA; Index 238;	Information not available
// CreateSymbolicLinkTransactedW; Index 239;	Information not available
// CreateSymbolicLinkW; Index 240;	Information not available
// CreateThreadpool; Index 243;		Information not available
// CreateThreadpoolCleanupGroup; Index 244;	Information not available
// CreateThreadpoolIo; Index 245;	Information not available
// CreateThreadpoolTimer; Index 246;	Information not available
// CreateThreadpoolWait; Index 247;	Information not available
// CreateThreadpoolWork; Index 248;	Information not available
// CreateTimerQueue; Index 249;		Information not available
// CreateTimerQueueTimer; Index 250;	Information not available
// CreateWaitableTimerExA; Index 253;	Information not available
// CreateWaitableTimerExW; Index 254;	Information not available
// CtrlRoutine; Index 256;		Information not available
// DeactivateActCtx; Index 257;		Information not available
// DeactivateActCtxWorker; Index 258;	Information not available
// DebugActiveProcessStop; Index 260;	Information not available
// DebugBreakProcess; Index 262;	Information not available
// DebugSetProcessKillOnExit; Index 263;	Information not available
// DecodePointer; Index 264;		Information not available
// DecodeSystemPointer; Index 265;	Information not available
// DelayLoadFailureHook; Index 268;	Information not available
// DeleteBoundaryDescriptor; Index 270;	Information not available
// DeleteFileTransactedA; Index 274;	Information not available
// DeleteFileTransactedW; Index 275;	Information not available
// DeleteProcThreadAttributeList; Index 277;	Information not available
// DeleteSynchronizationBarrier; Index 278;	Information not available
// DeleteTimerQueue; Index 279;		Information not available
// DeleteTimerQueueEx; Index 280;	Information not available
// DeleteTimerQueueTimer; Index 281;	Information not available
// DeleteVolumeMountPointA; Index 282;	Information not available
// DeleteVolumeMountPointW; Index 283;	Information not available
// DisableThreadProfiling; Index 286;	Information not available
// DisassociateCurrentThreadFromCallback; Index 287;	Information not available
// DiscardVirtualMemory; Index 288;	Information not available
// DnsHostnameToComputerNameA; Index 290;	Information not available
// DnsHostnameToComputerNameExW; Index 291;	Information not available
// DnsHostnameToComputerNameW; Index 292;	Information not available
// DosPathToSessionPathA; Index 294;	Information not available
// DosPathToSessionPathW; Index 295;	Information not available
// DuplicateConsoleHandle; Index 296;	Information not available
// DuplicateEncryptionInfoFileExt; Index 297;	Information not available
// EnableThreadProfiling; Index 299;	Information not available
// EncodePointer; Index 300;		Information not available
// EncodeSystemPointer; Index 301;	Information not available
// EnterSynchronizationBarrier; Index 305;	Information not available
// EnumCalendarInfoExA; Index 307;	Information not available
// EnumCalendarInfoExEx; Index 308;	Information not available
// EnumCalendarInfoExW; Index 309;	Information not available
// EnumDateFormatsExA; Index 312;	Information not available
// EnumDateFormatsExEx; Index 313;	Information not available
// EnumDateFormatsExW; Index 314;	Information not available
// EnumLanguageGroupLocalesA; Index 316;	Information not available
// EnumLanguageGroupLocalesW; Index 317;	Information not available
// EnumResourceLanguagesExA; Index 319;	Information not available
// EnumResourceLanguagesExW; Index 320;	Information not available
// EnumResourceNamesExA; Index 323;	Information not available
// EnumResourceNamesExW; Index 324;	Information not available
// EnumResourceTypesExA; Index 327;	Information not available
// EnumResourceTypesExW; Index 328;	Information not available
// EnumSystemFirmwareTables; Index 332;	Information not available
// EnumSystemGeoID; Index 333;		Information not available
// EnumSystemLanguageGroupsA; Index 334;	Information not available
// EnumSystemLanguageGroupsW; Index 335;	Information not available
// EnumSystemLocalesEx; Index 337;	Information not available
// EnumTimeFormatsEx; Index 340;	Information not available
// EnumUILanguagesA; Index 342;		Information not available
// EnumUILanguagesW; Index 343;		Information not available
// EnumerateLocalComputerNamesA; Index 344;	Information not available
// EnumerateLocalComputerNamesW; Index 345;	Information not available
// ExitVDM; Index 350;			Information not available
// ExpungeConsoleCommandHistoryA; Index 353;	Information not available
// ExpungeConsoleCommandHistoryW; Index 354;	Information not available
// FindActCtxSectionGuid; Index 364;	Information not available
// FindActCtxSectionGuidWorker; Index 365;	Information not available
// FindActCtxSectionStringA; Index 366;	Information not available
// FindActCtxSectionStringW; Index 367;	Information not available
// FindActCtxSectionStringWWorker; Index 368;	Information not available
// FindFirstFileNameTransactedW; Index 378;	Information not available
// FindFirstFileNameW; Index 379;	Information not available
// FindFirstFileTransactedA; Index 380;	Information not available
// FindFirstFileTransactedW; Index 381;	Information not available
// FindFirstStreamTransactedW; Index 383;	Information not available
// FindFirstStreamW; Index 384;		Information not available
// FindFirstVolumeMountPointA; Index 386;	Information not available
// FindFirstVolumeMountPointW; Index 387;	Information not available
// FindNLSString; Index 389;		Information not available
// FindNLSStringEx; Index 390;		Information not available
// FindNextFileNameW; Index 393;	Information not available
// FindNextStreamW; Index 395;		Information not available
// FindNextVolumeMountPointA; Index 397;	Information not available
// FindNextVolumeMountPointW; Index 398;	Information not available
// FindPackagesByPackageFamily; Index 400;	Information not available
// FindStringOrdinal; Index 405;	Information not available
// FindVolumeMountPointClose; Index 407;	Information not available
// FlsAlloc; Index 408;			Information not available
// FlsFree; Index 409;			Information not available
// FlsGetValue; Index 410;		Information not available
// FlsSetValue; Index 411;		Information not available
// FlushProcessWriteBuffers; Index 415;	Information not available
// FormatApplicationUserModelId; Index 419;	Information not available
// FreeLibraryWhenCallbackReturns; Index 427;	Information not available
// FreeMemoryJobObject; Index 428;	Information not available
// FreeUserPhysicalPages; Index 430;	Information not available
// GetActiveProcessorCount; Index 433;	Information not available
// GetActiveProcessorGroupCount; Index 434;	Information not available
// GetAppContainerAce; Index 435;	Information not available
// GetAppContainerNamedObjectPath; Index 436;	Information not available
// GetApplicationRecoveryCallback; Index 437;	Information not available
// GetApplicationRecoveryCallbackWorker; Index 438;	Information not available
// GetApplicationRestartSettings; Index 439;	Information not available
// GetApplicationRestartSettingsWorker; Index 440;	Information not available
// GetApplicationUserModelId; Index 441;	Information not available
// GetBinaryType; Index 444;		Information not available
// GetCPInfoExA; Index 448;		Information not available
// GetCPInfoExW; Index 449;		Information not available
// GetCachedSigningLevel; Index 450;	Information not available
// GetCalendarDateFormat; Index 451;	Information not available
// GetCalendarDateFormatEx; Index 452;	Information not available
// GetCalendarDaysInMonth; Index 453;	Information not available
// GetCalendarDifferenceInDays; Index 454;	Information not available
// GetCalendarInfoA; Index 455;		Information not available
// GetCalendarInfoEx; Index 456;	Information not available
// GetCalendarInfoW; Index 457;		Information not available
// GetCalendarMonthsInYear; Index 458;	Information not available
// GetCalendarSupportedDateRange; Index 459;	Information not available
// GetCalendarWeekNumber; Index 460;	Information not available
// GetComPlusPackageInstallStatus; Index 461;	Information not available
// GetCompressedFileSizeTransactedA; Index 471;	Information not available
// GetCompressedFileSizeTransactedW; Index 472;	Information not available
// GetComputerNameExA; Index 475;	Information not available
// GetComputerNameExW; Index 476;	Information not available
// GetConsoleAliasA; Index 478;		Information not available
// GetConsoleAliasExesA; Index 479;	Information not available
// GetConsoleAliasExesLengthA; Index 480;	Information not available
// GetConsoleAliasExesLengthW; Index 481;	Information not available
// GetConsoleAliasExesW; Index 482;	Information not available
// GetConsoleAliasW; Index 483;		Information not available
// GetConsoleAliasesA; Index 484;	Information not available
// GetConsoleAliasesLengthA; Index 485;	Information not available
// GetConsoleAliasesLengthW; Index 486;	Information not available
// GetConsoleAliasesW; Index 487;	Information not available
// GetConsoleCharType; Index 489;	Information not available
// GetConsoleCommandHistoryA; Index 490;	Information not available
// GetConsoleCommandHistoryLengthA; Index 491;	Information not available
// GetConsoleCommandHistoryLengthW; Index 492;	Information not available
// GetConsoleCommandHistoryW; Index 493;	Information not available
// GetConsoleCursorMode; Index 495;	Information not available
// GetConsoleDisplayMode; Index 496;	Information not available
// GetConsoleFontInfo; Index 497;	Information not available
// GetConsoleFontSize; Index 498;	Information not available
// GetConsoleHardwareState; Index 499;	Information not available
// GetConsoleHistoryInfo; Index 500;	Information not available
// GetConsoleInputExeNameA; Index 501;	Information not available
// GetConsoleInputExeNameW; Index 502;	Information not available
// GetConsoleInputWaitHandle; Index 503;	Information not available
// GetConsoleKeyboardLayoutNameA; Index 504;	Information not available
// GetConsoleKeyboardLayoutNameW; Index 505;	Information not available
// GetConsoleNlsMode; Index 507;	Information not available
// GetConsoleOriginalTitleA; Index 508;	Information not available
// GetConsoleOriginalTitleW; Index 509;	Information not available
// GetConsoleProcessList; Index 511;	Information not available
// GetConsoleScreenBufferInfoEx; Index 513;	Information not available
// GetConsoleSelectionInfo; Index 514;	Information not available
// GetConsoleWindow; Index 517;		Information not available
// GetCurrencyFormatEx; Index 519;	Information not available
// GetCurrentActCtx; Index 521;		Information not available
// GetCurrentActCtxWorker; Index 522;	Information not available
// GetCurrentApplicationUserModelId; Index 523;	Information not available
// GetCurrentConsoleFont; Index 524;	Information not available
// GetCurrentConsoleFontEx; Index 525;	Information not available
// GetCurrentPackageFamilyName; Index 528;	Information not available
// GetCurrentPackageFullName; Index 529;	Information not available
// GetCurrentPackageId; Index 530;	Information not available
// GetCurrentPackageInfo; Index 531;	Information not available
// GetCurrentPackagePath; Index 532;	Information not available
// GetCurrentProcessorNumber; Index 535;	Information not available
// GetCurrentProcessorNumberEx; Index 536;	Information not available
// GetCurrentThreadStackLimits; Index 539;	Information not available
// GetDateFormatAWorker; Index 541;	Information not available
// GetDateFormatEx; Index 542;		Information not available
// GetDateFormatWWorker; Index 544;	Information not available
// GetDevicePowerState; Index 547;	Information not available
// GetDllDirectoryA; Index 552;		Information not available
// GetDllDirectoryW; Index 553;		Information not available
// GetDurationFormat; Index 556;	Information not available
// GetDurationFormatEx; Index 557;	Information not available
// GetDynamicTimeZoneInformation; Index 558;	Information not available
// GetEnabledXStateFeatures; Index 559;	Information not available
// GetEncryptedFileVersionExt; Index 560;	Information not available
// GetEnvironmentStrings; Index 561;	Information not available
// GetEraNameCountedString; Index 566;	Information not available
// GetErrorMode; Index 567;		Information not available
// GetExpandedNameA; Index 570;		Information not available
// GetExpandedNameW; Index 571;		Information not available
// GetFileAttributesTransactedA; Index 575;	Information not available
// GetFileAttributesTransactedW; Index 576;	Information not available
// GetFileBandwidthReservation; Index 578;	Information not available
// GetFileInformationByHandleEx; Index 580;	Information not available
// GetFileMUIInfo; Index 581;		Information not available
// GetFileMUIPath; Index 582;		Information not available
// GetFileSizeEx; Index 584;		Information not available
// GetFinalPathNameByHandleA; Index 587;	Information not available
// GetFinalPathNameByHandleW; Index 588;	Information not available
// GetFirmwareEnvironmentVariableA; Index 589;	Information not available
// GetFirmwareEnvironmentVariableExA; Index 590;	Information not available
// GetFirmwareEnvironmentVariableExW; Index 591;	Information not available
// GetFirmwareEnvironmentVariableW; Index 592;	Information not available
// GetFirmwareType; Index 593;		Information not available
// GetFullPathNameTransactedA; Index 595;	Information not available
// GetFullPathNameTransactedW; Index 596;	Information not available
// GetGeoInfoA; Index 598;		Information not available
// GetGeoInfoW; Index 599;		Information not available
// GetHandleContext; Index 600;		Information not available
// GetLargePageMinimum; Index 602;	Information not available
// GetLocaleInfoEx; Index 607;		Information not available
// GetLogicalProcessorInformation; Index 612;	Information not available
// GetLogicalProcessorInformationEx; Index 613;	Information not available
// GetLongPathNameA; Index 614;		Information not available
// GetLongPathNameTransactedA; Index 615;	Information not available
// GetLongPathNameTransactedW; Index 616;	Information not available
// GetLongPathNameW; Index 617;		Information not available
// GetMaximumProcessorCount; Index 619;	Information not available
// GetMaximumProcessorGroupCount; Index 620;	Information not available
// GetMemoryErrorHandlingCapabilities; Index 621;	Information not available
// GetModuleHandleExA; Index 625;	Information not available
// GetModuleHandleExW; Index 626;	Information not available
// GetNLSVersion; Index 628;		Information not available
// GetNLSVersionEx; Index 629;		Information not available
// GetNamedPipeAttribute; Index 630;	Information not available
// GetNamedPipeClientComputerNameA; Index 631;	Information not available
// GetNamedPipeClientComputerNameW; Index 632;	Information not available
// GetNamedPipeClientProcessId; Index 633;	Information not available
// GetNamedPipeClientSessionId; Index 634;	Information not available
// GetNamedPipeServerProcessId; Index 638;	Information not available
// GetNamedPipeServerSessionId; Index 639;	Information not available
// GetNativeSystemInfo; Index 640;	Information not available
// GetNextVDMCommand; Index 641;	Information not available
// GetNumaAvailableMemoryNode; Index 642;	Information not available
// GetNumaAvailableMemoryNodeEx; Index 643;	Information not available
// GetNumaHighestNodeNumber; Index 644;	Information not available
// GetNumaNodeNumberFromHandle; Index 645;	Information not available
// GetNumaNodeProcessorMask; Index 646;	Information not available
// GetNumaNodeProcessorMaskEx; Index 647;	Information not available
// GetNumaProcessorNode; Index 648;	Information not available
// GetNumaProcessorNodeEx; Index 649;	Information not available
// GetNumaProximityNode; Index 650;	Information not available
// GetNumaProximityNodeEx; Index 651;	Information not available
// GetNumberFormatEx; Index 653;	Information not available
// GetNumberOfConsoleFonts; Index 655;	Information not available
// GetOverlappedResultEx; Index 660;	Information not available
// GetPackageApplicationIds; Index 661;	Information not available
// GetPackageFamilyName; Index 662;	Information not available
// GetPackageFullName; Index 663;	Information not available
// GetPackageId; Index 664;		Information not available
// GetPackageInfo; Index 665;		Information not available
// GetPackagePath; Index 666;		Information not available
// GetPackagePathByFullName; Index 667;	Information not available
// GetPackagesByPackageFamily; Index 668;	Information not available
// GetPhysicallyInstalledSystemMemory; Index 669;	Information not available
// GetProcessDEPPolicy; Index 683;	Information not available
// GetProcessDefaultCpuSets; Index 684;	Information not available
// GetProcessGroupAffinity; Index 685;	Information not available
// GetProcessHandleCount; Index 686;	Information not available
// GetProcessId; Index 689;		Information not available
// GetProcessIdOfThread; Index 690;	Information not available
// GetProcessInformation; Index 691;	Information not available
// GetProcessIoCounters; Index 692;	Information not available
// GetProcessMitigationPolicy; Index 693;	Information not available
// GetProcessPreferredUILanguages; Index 694;	Information not available
// GetProcessWorkingSetSizeEx; Index 700;	Information not available
// GetProcessorSystemCycleTime; Index 701;	Information not available
// GetProductInfo; Index 702;		Information not available
// GetQueuedCompletionStatusEx; Index 710;	Information not available
// GetStagedPackagePathByFullName; Index 713;	Information not available
// GetStateFolder; Index 716;		Information not available
// GetStringScripts; Index 718;		Information not available
// GetSystemAppDataKey; Index 723;	Information not available
// GetSystemCpuSetInformation; Index 724;	Information not available
// GetSystemDEPPolicy; Index 725;	Information not available
// GetSystemDefaultLocaleName; Index 728;	Information not available
// GetSystemDefaultUILanguage; Index 729;	Information not available
// GetSystemFileCacheSize; Index 732;	Information not available
// GetSystemFirmwareTable; Index 733;	Information not available
// GetSystemPreferredUILanguages; Index 736;	Information not available
// GetSystemRegistryQuota; Index 737;	Information not available
// GetSystemTimePreciseAsFileTime; Index 741;	Information not available
// GetSystemTimes; Index 742;		Information not available
// GetSystemWindowsDirectoryA; Index 743;	Information not available
// GetSystemWindowsDirectoryW; Index 744;	Information not available
// GetSystemWow64DirectoryA; Index 745;	Information not available
// GetSystemWow64DirectoryW; Index 746;	Information not available
// GetThreadErrorMode; Index 755;	Information not available
// GetThreadGroupAffinity; Index 756;	Information not available
// GetThreadIOPendingFlag; Index 757;	Information not available
// GetThreadId; Index 758;		Information not available
// GetThreadIdealProcessorEx; Index 759;	Information not available
// GetThreadInformation; Index 760;	Information not available
// GetThreadPreferredUILanguages; Index 762;	Information not available
// GetThreadSelectedCpuSets; Index 765;	Information not available
// GetThreadUILanguage; Index 768;	Information not available
// GetTickCount64; Index 769;		Information not available
// GetTimeFormatAWorker; Index 772;	Information not available
// GetTimeFormatEx; Index 773;		Information not available
// GetTimeFormatWWorker; Index 775;	Information not available
// GetTimeZoneInformationForYear; Index 777;	Information not available
// GetUILanguageInfo; Index 778;	Information not available
// GetUserDefaultLocaleName; Index 781;	Information not available
// GetUserDefaultUILanguage; Index 782;	Information not available
// GetUserGeoID; Index 783;		Information not available
// GetUserPreferredUILanguages; Index 784;	Information not available
// GetVDMCurrentDirectories; Index 785;	Information not available
// GetVolumeInformationByHandleW; Index 790;	Information not available
// GetVolumeNameForVolumeMountPointA; Index 792;	Information not available
// GetVolumeNameForVolumeMountPointW; Index 793;	Information not available
// GetVolumePathNameA; Index 794;	Information not available
// GetVolumePathNameW; Index 795;	Information not available
// GetWriteWatch; Index 800;		Information not available
// GetXStateFeaturesMask; Index 801;	Information not available
// GlobalAddAtomExA; Index 803;		Information not available
// GlobalAddAtomExW; Index 804;		Information not available
// GlobalMemoryStatusEx; Index 819;	Information not available
// HeapQueryInformation; Index 836;	Information not available
// HeapSetInformation; Index 838;	Information not available
// HeapSummary; Index 840;		Information not available
// IdnToAscii; Index 844;		Information not available
// IdnToNameprepUnicode; Index 845;	Information not available
// IdnToUnicode; Index 846;		Information not available
// InitOnceBeginInitialize; Index 848;	Information not available
// InitOnceComplete; Index 849;		Information not available
// InitOnceExecuteOnce; Index 850;	Information not available
// InitOnceInitialize; Index 851;	Information not available
// InitializeContext; Index 853;	Information not available
// InitializeCriticalSectionEx; Index 856;	Information not available
// InitializeEnclave; Index 857;	Information not available
// InitializeProcThreadAttributeList; Index 858;	Information not available
// InitializeSListHead; Index 859;	Information not available
// InitializeSynchronizationBarrier; Index 861;	Information not available
// InstallELAMCertificateInfo; Index 862;	Information not available
// InterlockedCompareExchange64; Index 863;	Information not available
// InterlockedFlushSList; Index 868;	Information not available
// InterlockedPopEntrySList; Index 870;	Information not available
// InterlockedPushEntrySList; Index 871;	Information not available
// InterlockedPushListSListEx; Index 872;	Information not available
// InvalidateConsoleDIBits; Index 873;	Information not available
// IsCalendarLeapDay; Index 881;	Information not available
// IsCalendarLeapMonth; Index 882;	Information not available
// IsCalendarLeapYear; Index 883;	Information not available
// IsDebuggerPresent; Index 886;	Information not available
// IsEnclaveTypeSupported; Index 887;	Information not available
// IsNLSDefinedString; Index 888;	Information not available
// IsNativeVhdBoot; Index 889;		Information not available
// IsNormalizedString; Index 890;	Information not available
// IsProcessCritical; Index 891;	Information not available
// IsProcessInJob; Index 892;		Information not available
// IsSystemResumeAutomatic; Index 894;	Information not available
// IsThreadAFiber; Index 895;		Information not available
// IsThreadpoolTimerSet; Index 896;	Information not available
// IsValidCalDateTime; Index 897;	Information not available
// IsValidLanguageGroup; Index 899;	Information not available
// IsValidLocaleName; Index 901;	Information not available
// IsValidNLSVersion; Index 902;	Information not available
// IsWow64Process; Index 903;		Information not available
// K32EmptyWorkingSet; Index 904;	Information not available
// K32EnumDeviceDrivers; Index 905;	Information not available
// K32EnumPageFilesA; Index 906;	Information not available
// K32EnumPageFilesW; Index 907;	Information not available
// K32EnumProcessModules; Index 908;	Information not available
// K32EnumProcessModulesEx; Index 909;	Information not available
// K32EnumProcesses; Index 910;		Information not available
// K32GetDeviceDriverBaseNameA; Index 911;	Information not available
// K32GetDeviceDriverBaseNameW; Index 912;	Information not available
// K32GetDeviceDriverFileNameA; Index 913;	Information not available
// K32GetDeviceDriverFileNameW; Index 914;	Information not available
// K32GetMappedFileNameA; Index 915;	Information not available
// K32GetMappedFileNameW; Index 916;	Information not available
// K32GetModuleBaseNameA; Index 917;	Information not available
// K32GetModuleBaseNameW; Index 918;	Information not available
// K32GetModuleFileNameExA; Index 919;	Information not available
// K32GetModuleFileNameExW; Index 920;	Information not available
// K32GetModuleInformation; Index 921;	Information not available
// K32GetPerformanceInfo; Index 922;	Information not available
// K32GetProcessImageFileNameA; Index 923;	Information not available
// K32GetProcessImageFileNameW; Index 924;	Information not available
// K32GetProcessMemoryInfo; Index 925;	Information not available
// K32GetWsChanges; Index 926;		Information not available
// K32GetWsChangesEx; Index 927;	Information not available
// K32InitializeProcessForWsWatch; Index 928;	Information not available
// K32QueryWorkingSet; Index 929;	Information not available
// K32QueryWorkingSetEx; Index 930;	Information not available
// LCIDToLocaleName; Index 931;		Information not available
// LCMapStringEx; Index 933;		Information not available
// LZClose; Index 935;			Information not available
// LZCloseFile; Index 936;		Information not available
// LZCopy; Index 937;			Information not available
// LZCreateFileW; Index 938;		Information not available
// LZDone; Index 939;			Information not available
// LZInit; Index 940;			Information not available
// LZOpenFileA; Index 941;		Information not available
// LZOpenFileW; Index 942;		Information not available
// LZRead; Index 943;			Information not available
// LZSeek; Index 944;			Information not available
// LZStart; Index 945;			Information not available
// LeaveCriticalSectionWhenCallbackReturns; Index 947;	Information not available
// LoadAppInitDlls; Index 948;		Information not available
// LoadEnclaveData; Index 949;		Information not available
// LoadPackagedLibrary; Index 955;	Information not available
// LoadStringBaseExW; Index 957;	Information not available
// LoadStringBaseW; Index 958;		Information not available
// LocalHandle; Index 964;		Information not available
// LocaleNameToLCID; Index 970;		Information not available
// LocateXStateFeature; Index 971;	Information not available
// MapUserPhysicalPages; Index 975;	Information not available
// MapUserPhysicalPagesScatter; Index 976;	Information not available
// MapViewOfFileExNuma; Index 979;	Information not available
// MapViewOfFileFromApp; Index 980;	Information not available
// Module32FirstW; Index 982;		Information not available
// Module32NextW; Index 984;		Information not available
// MoveFileTransactedA; Index 988;	Information not available
// MoveFileTransactedW; Index 989;	Information not available
// NeedCurrentDirectoryForExePathA; Index 995;	Information not available
// NeedCurrentDirectoryForExePathW; Index 996;	Information not available
// NlsCheckPolicy; Index 997;		Information not available
// NlsEventDataDescCreate; Index 998;	Information not available
// NlsGetCacheUpdateCount; Index 999;	Information not available
// NlsUpdateLocale; Index 1000;		Information not available
// NlsUpdateSystemLocale; Index 1001;	Information not available
// NlsWriteEtwEvent; Index 1002;	Information not available
// NormalizeString; Index 1003;		Information not available
// NotifyMountMgr; Index 1004;		Information not available
// NotifyUILanguageChange; Index 1005;	Information not available
// NtVdm64CreateProcessInternalW; Index 1006;	Information not available
// OOBEComplete; Index 1007;		Information not available
// OfferVirtualMemory; Index 1008;	Information not available
// OpenConsoleW; Index 1009;		Information not available
// OpenConsoleWStub; Index 1010;	Information not available
// OpenFileById; Index 1014;		Information not available
// OpenJobObjectA; Index 1017;		Information not available
// OpenJobObjectW; Index 1018;		Information not available
// OpenPackageInfoByFullName; Index 1021;	Information not available
// OpenPrivateNamespaceA; Index 1022;	Information not available
// OpenPrivateNamespaceW; Index 1023;	Information not available
// OpenProcessToken; Index 1025;	Information not available
// OpenProfileUserMapping; Index 1026;	Information not available
// OpenState; Index 1029;		Information not available
// OpenStateExplicit; Index 1030;	Information not available
// OpenThread; Index 1031;		Information not available
// OpenThreadToken; Index 1032;		Information not available
// PackageFamilyNameFromFullName; Index 1037;	Information not available
// PackageFamilyNameFromId; Index 1038;	Information not available
// PackageFullNameFromId; Index 1039;	Information not available
// PackageIdFromFullName; Index 1040;	Information not available
// PackageNameAndPublisherIdFromFamilyName; Index 1041;	Information not available
// ParseApplicationUserModelId; Index 1042;	Information not available
// PowerClearRequest; Index 1047;	Information not available
// PowerCreateRequest; Index 1048;	Information not available
// PowerSetRequest; Index 1049;		Information not available
// PrefetchVirtualMemory; Index 1050;	Information not available
// PrivCopyFileExW; Index 1052;		Information not available
// PrivMoveFileIdentityW; Index 1053;	Information not available
// Process32FirstW; Index 1055;		Information not available
// Process32NextW; Index 1057;		Information not available
// ProcessIdToSessionId; Index 1058;	Information not available
// PssCaptureSnapshot; Index 1059;	Information not available
// PssDuplicateSnapshot; Index 1060;	Information not available
// PssFreeSnapshot; Index 1061;		Information not available
// PssQuerySnapshot; Index 1062;	Information not available
// PssWalkMarkerCreate; Index 1063;	Information not available
// PssWalkMarkerFree; Index 1064;	Information not available
// PssWalkMarkerGetPosition; Index 1065;	Information not available
// PssWalkMarkerRewind; Index 1066;	Information not available
// PssWalkMarkerSeek; Index 1067;	Information not available
// PssWalkMarkerSeekToBeginning; Index 1068;	Information not available
// PssWalkMarkerSetPosition; Index 1069;	Information not available
// PssWalkMarkerTell; Index 1070;	Information not available
// PssWalkSnapshot; Index 1071;		Information not available
// QueryActCtxSettingsW; Index 1074;	Information not available
// QueryActCtxSettingsWWorker; Index 1075;	Information not available
// QueryActCtxW; Index 1076;		Information not available
// QueryActCtxWWorker; Index 1077;	Information not available
// QueryDepthSList; Index 1078;		Information not available
// QueryFullProcessImageNameA; Index 1081;	Information not available
// QueryFullProcessImageNameW; Index 1082;	Information not available
// QueryIdleProcessorCycleTime; Index 1083;	Information not available
// QueryIdleProcessorCycleTimeEx; Index 1084;	Information not available
// QueryInformationJobObject; Index 1085;	Information not available
// QueryIoRateControlInformationJobObject; Index 1086;	Information not available
// QueryMemoryResourceNotification; Index 1087;	Information not available
// QueryProcessAffinityUpdateMode; Index 1090;	Information not available
// QueryProcessCycleTime; Index 1091;	Information not available
// QueryProtectedPolicy; Index 1092;	Information not available
// QueryThreadCycleTime; Index 1093;	Information not available
// QueryThreadProfiling; Index 1094;	Information not available
// QueryThreadpoolStackInformation; Index 1095;	Information not available
// QueryUnbiasedInterruptTime; Index 1096;	Information not available
// QueueUserWorkItem; Index 1098;	Information not available
// QuirkGetData2Worker; Index 1099;	Information not available
// QuirkGetDataWorker; Index 1100;	Information not available
// QuirkIsEnabled2Worker; Index 1101;	Information not available
// QuirkIsEnabled3Worker; Index 1102;	Information not available
// QuirkIsEnabledForPackage2Worker; Index 1103;	Information not available
// QuirkIsEnabledForPackage3Worker; Index 1104;	Information not available
// QuirkIsEnabledForPackage4Worker; Index 1105;	Information not available
// QuirkIsEnabledForPackageWorker; Index 1106;	Information not available
// QuirkIsEnabledForProcessWorker; Index 1107;	Information not available
// QuirkIsEnabledWorker; Index 1108;	Information not available
// RaiseFailFastException; Index 1110;	Information not available
// RaiseInvalid16BitExeError; Index 1111;	Information not available
// ReOpenFile; Index 1112;		Information not available
// ReadConsoleInputExA; Index 1115;	Information not available
// ReadConsoleInputExW; Index 1116;	Information not available
// ReadFileScatter; Index 1127;		Information not available
// ReadThreadProfilingData; Index 1129;	Information not available
// ReclaimVirtualMemory; Index 1130;	Information not available
// RegCloseKey; Index 1131;		Information not available
// RegCopyTreeW; Index 1132;		Information not available
// RegCreateKeyExA; Index 1133;		Information not available
// RegCreateKeyExW; Index 1134;		Information not available
// RegDeleteKeyExA; Index 1135;		Information not available
// RegDeleteKeyExW; Index 1136;		Information not available
// RegDeleteTreeA; Index 1137;		Information not available
// RegDeleteTreeW; Index 1138;		Information not available
// RegDeleteValueA; Index 1139;		Information not available
// RegDeleteValueW; Index 1140;		Information not available
// RegDisablePredefinedCacheEx; Index 1141;	Information not available
// RegEnumKeyExA; Index 1142;		Information not available
// RegEnumKeyExW; Index 1143;		Information not available
// RegEnumValueA; Index 1144;		Information not available
// RegEnumValueW; Index 1145;		Information not available
// RegFlushKey; Index 1146;		Information not available
// RegGetKeySecurity; Index 1147;	Information not available
// RegGetValueA; Index 1148;		Information not available
// RegGetValueW; Index 1149;		Information not available
// RegLoadKeyA; Index 1150;		Information not available
// RegLoadKeyW; Index 1151;		Information not available
// RegLoadMUIStringA; Index 1152;	Information not available
// RegLoadMUIStringW; Index 1153;	Information not available
// RegNotifyChangeKeyValue; Index 1154;	Information not available
// RegOpenCurrentUser; Index 1155;	Information not available
// RegOpenKeyExA; Index 1156;		Information not available
// RegOpenKeyExW; Index 1157;		Information not available
// RegOpenUserClassesRoot; Index 1158;	Information not available
// RegQueryInfoKeyA; Index 1159;	Information not available
// RegQueryInfoKeyW; Index 1160;	Information not available
// RegQueryValueExA; Index 1161;	Information not available
// RegQueryValueExW; Index 1162;	Information not available
// RegRestoreKeyA; Index 1163;		Information not available
// RegRestoreKeyW; Index 1164;		Information not available
// RegSaveKeyExA; Index 1165;		Information not available
// RegSaveKeyExW; Index 1166;		Information not available
// RegSetKeySecurity; Index 1167;	Information not available
// RegSetValueExA; Index 1168;		Information not available
// RegSetValueExW; Index 1169;		Information not available
// RegUnLoadKeyA; Index 1170;		Information not available
// RegUnLoadKeyW; Index 1171;		Information not available
// RegisterApplicationRecoveryCallback; Index 1172;	Information not available
// RegisterApplicationRestart; Index 1173;	Information not available
// RegisterBadMemoryNotification; Index 1174;	Information not available
// RegisterConsoleIME; Index 1175;	Information not available
// RegisterConsoleOS2; Index 1176;	Information not available
// RegisterConsoleVDM; Index 1177;	Information not available
// RegisterWaitForInputIdle; Index 1178;	Information not available
// RegisterWaitForSingleObject; Index 1179;	Information not available
// RegisterWaitForSingleObjectEx; Index 1180;	Information not available
// RegisterWaitUntilOOBECompleted; Index 1181;	Information not available
// RegisterWowBaseHandlers; Index 1182;	Information not available
// RegisterWowExec; Index 1183;		Information not available
// ReleaseActCtx; Index 1184;		Information not available
// ReleaseActCtxWorker; Index 1185;	Information not available
// ReleaseMutexWhenCallbackReturns; Index 1187;	Information not available
// ReleaseSRWLockShared; Index 1189;	Information not available
// ReleaseSemaphoreWhenCallbackReturns; Index 1191;	Information not available
// RemoveDirectoryTransactedA; Index 1193;	Information not available
// RemoveDirectoryTransactedW; Index 1194;	Information not available
// RemoveDllDirectory; Index 1196;	Information not available
// RemoveLocalAlternateComputerNameA; Index 1197;	Information not available
// RemoveLocalAlternateComputerNameW; Index 1198;	Information not available
// RemoveSecureMemoryCacheCallback; Index 1199;	Information not available
// RemoveVectoredContinueHandler; Index 1200;	Information not available
// RemoveVectoredExceptionHandler; Index 1201;	Information not available
// ReplaceFile; Index 1202;		Information not available
// ReplaceFileA; Index 1203;		Information not available
// ReplaceFileW; Index 1204;		Information not available
// ReplacePartitionUnit; Index 1205;	Information not available
// RequestDeviceWakeup; Index 1206;	Information not available
// RequestWakeupLatency; Index 1207;	Information not available
// ResetWriteWatch; Index 1209;		Information not available
// ResolveDelayLoadedAPI; Index 1210;	Information not available
// ResolveDelayLoadsFromDll; Index 1211;	Information not available
// ResolveLocaleName; Index 1212;	Information not available
// RestoreLastError; Index 1213;	Information not available
// RtlCaptureContext; Index 1215;	Information not available
// RtlCaptureStackBackTrace; Index 1216;	Information not available
// RtlFillMemory; Index 1217;		Information not available
// RtlMoveMemory; Index 1218;		Information not available
// RtlPcToFileHeader; Index 1219;	Information not available
// RtlUnwind; Index 1220;		Information not available
// RtlZeroMemory; Index 1221;		Information not available
// SetCachedSigningLevel; Index 1226;	Information not available
// SetCalendarInfoA; Index 1227;	Information not available
// SetCalendarInfoW; Index 1228;	Information not available
// SetComPlusPackageInstallStatus; Index 1229;	Information not available
// SetComputerNameEx2W; Index 1236;	Information not available
// SetComputerNameExA; Index 1237;	Information not available
// SetComputerNameExW; Index 1238;	Information not available
// SetConsoleCursor; Index 1243;	Information not available
// SetConsoleCursorMode; Index 1245;	Information not available
// SetConsoleDisplayMode; Index 1247;	Information not available
// SetConsoleFont; Index 1248;		Information not available
// SetConsoleHardwareState; Index 1249;	Information not available
// SetConsoleHistoryInfo; Index 1250;	Information not available
// SetConsoleIcon; Index 1251;		Information not available
// SetConsoleInputExeNameA; Index 1252;	Information not available
// SetConsoleInputExeNameW; Index 1253;	Information not available
// SetConsoleKeyShortcuts; Index 1254;	Information not available
// SetConsoleLocalEUDC; Index 1255;	Information not available
// SetConsoleMaximumWindowSize; Index 1256;	Information not available
// SetConsoleMenuClose; Index 1257;	Information not available
// SetConsoleNlsMode; Index 1259;	Information not available
// SetConsoleNumberOfCommandsA; Index 1260;	Information not available
// SetConsoleNumberOfCommandsW; Index 1261;	Information not available
// SetConsoleOS2OemFormat; Index 1262;	Information not available
// SetConsolePalette; Index 1264;	Information not available
// SetConsoleScreenBufferInfoEx; Index 1265;	Information not available
// SetCurrentConsoleFontEx; Index 1272;	Information not available
// SetDefaultDllDirectories; Index 1277;	Information not available
// SetDllDirectoryA; Index 1278;	Information not available
// SetDllDirectoryW; Index 1279;	Information not available
// SetDynamicTimeZoneInformation; Index 1280;	Information not available
// SetEnvironmentStringsA; Index 1282;	Information not available
// SetEnvironmentStringsW; Index 1283;	Information not available
// SetEventWhenCallbackReturns; Index 1288;	Information not available
// SetFileAttributesTransactedA; Index 1292;	Information not available
// SetFileAttributesTransactedW; Index 1293;	Information not available
// SetFileBandwidthReservation; Index 1295;	Information not available
// SetFileCompletionNotificationModes; Index 1296;	Information not available
// SetFileInformationByHandle; Index 1297;	Information not available
// SetFileIoOverlappedRange; Index 1298;	Information not available
// SetFilePointerEx; Index 1300;	Information not available
// SetFileShortNameA; Index 1301;	Information not available
// SetFileShortNameW; Index 1302;	Information not available
// SetFileValidData; Index 1304;	Information not available
// SetFirmwareEnvironmentVariableA; Index 1305;	Information not available
// SetFirmwareEnvironmentVariableExA; Index 1306;	Information not available
// SetFirmwareEnvironmentVariableExW; Index 1307;	Information not available
// SetFirmwareEnvironmentVariableW; Index 1308;	Information not available
// SetHandleContext; Index 1309;	Information not available
// SetInformationJobObject; Index 1312;	Information not available
// SetIoRateControlInformationJobObject; Index 1313;	Information not available
// SetLastConsoleEventActive; Index 1314;	Information not available
// SetLocalPrimaryComputerNameA; Index 1316;	Information not available
// SetLocalPrimaryComputerNameW; Index 1317;	Information not available
// SetMessageWaitingIndicator; Index 1322;	Information not available
// SetNamedPipeAttribute; Index 1323;	Information not available
// SetProcessAffinityUpdateMode; Index 1327;	Information not available
// SetProcessDEPPolicy; Index 1328;	Information not available
// SetProcessDefaultCpuSets; Index 1329;	Information not available
// SetProcessInformation; Index 1330;	Information not available
// SetProcessMitigationPolicy; Index 1331;	Information not available
// SetProcessPreferredUILanguages; Index 1332;	Information not available
// SetProcessWorkingSetSizeEx; Index 1336;	Information not available
// SetProtectedPolicy; Index 1337;	Information not available
// SetSearchPathMode; Index 1338;	Information not available
// SetStdHandleEx; Index 1340;		Information not available
// SetSystemFileCacheSize; Index 1341;	Information not available
// SetTermsrvAppInstallMode; Index 1347;	Information not available
// SetThreadErrorMode; Index 1350;	Information not available
// SetThreadExecutionState; Index 1351;	Information not available
// SetThreadGroupAffinity; Index 1352;	Information not available
// SetThreadIdealProcessorEx; Index 1354;	Information not available
// SetThreadInformation; Index 1355;	Information not available
// SetThreadPreferredUILanguages; Index 1357;	Information not available
// SetThreadSelectedCpuSets; Index 1360;	Information not available
// SetThreadStackGuarantee; Index 1361;	Information not available
// SetThreadToken; Index 1362;		Information not available
// SetThreadUILanguage; Index 1363;	Information not available
// SetThreadpoolStackInformation; Index 1364;	Information not available
// SetThreadpoolThreadMaximum; Index 1365;	Information not available
// SetThreadpoolThreadMinimum; Index 1366;	Information not available
// SetThreadpoolTimer; Index 1367;	Information not available
// SetThreadpoolTimerEx; Index 1368;	Information not available
// SetThreadpoolWait; Index 1369;	Information not available
// SetThreadpoolWaitEx; Index 1370;	Information not available
// SetTimerQueueTimer; Index 1372;	Information not available
// SetUserGeoID; Index 1374;		Information not available
// SetVDMCurrentDirectories; Index 1375;	Information not available
// SetVolumeMountPointA; Index 1378;	Information not available
// SetVolumeMountPointW; Index 1379;	Information not available
// SetVolumeMountPointWStub; Index 1380;	Information not available
// SetWaitableTimerEx; Index 1382;	Information not available
// SetXStateFeaturesMask; Index 1383;	Information not available
// ShowConsoleCursor; Index 1385;	Information not available
// SleepConditionVariableCS; Index 1389;	Information not available
// SortCloseHandle; Index 1392;		Information not available
// SortGetHandle; Index 1393;		Information not available
// StartThreadpoolIo; Index 1394;	Information not available
// SubmitThreadpoolWork; Index 1395;	Information not available
// SystemTimeToTzSpecificLocalTimeEx; Index 1401;	Information not available
// TerminateJobObject; Index 1402;	Information not available
// TermsrvAppInstallMode; Index 1405;	Information not available
// TermsrvConvertSysRootToUserDir; Index 1406;	Information not available
// TermsrvCreateRegEntry; Index 1407;	Information not available
// TermsrvDeleteKey; Index 1408;	Information not available
// TermsrvDeleteValue; Index 1409;	Information not available
// TermsrvGetPreSetValue; Index 1410;	Information not available
// TermsrvGetWindowsDirectoryA; Index 1411;	Information not available
// TermsrvGetWindowsDirectoryW; Index 1412;	Information not available
// TermsrvOpenRegEntry; Index 1413;	Information not available
// TermsrvOpenUserClasses; Index 1414;	Information not available
// TermsrvRestoreKey; Index 1415;	Information not available
// TermsrvSetKeySecurity; Index 1416;	Information not available
// TermsrvSetValueKey; Index 1417;	Information not available
// TermsrvSyncUserIniFileExt; Index 1418;	Information not available
// TryAcquireSRWLockExclusive; Index 1428;	Information not available
// TryAcquireSRWLockShared; Index 1429;	Information not available
// TrySubmitThreadpoolCallback; Index 1431;	Information not available
// TzSpecificLocalTimeToSystemTime; Index 1432;	Information not available
// TzSpecificLocalTimeToSystemTimeEx; Index 1433;	Information not available
// UTRegister; Index 1434;		Information not available
// UTUnRegister; Index 1435;		Information not available
// UnmapViewOfFileEx; Index 1440;	Information not available
// UnregisterApplicationRecoveryCallback; Index 1441;	Information not available
// UnregisterApplicationRestart; Index 1442;	Information not available
// UnregisterBadMemoryNotification; Index 1443;	Information not available
// UnregisterConsoleIME; Index 1444;	Information not available
// UnregisterWait; Index 1445;		Information not available
// UnregisterWaitEx; Index 1446;	Information not available
// UnregisterWaitUntilOOBECompleted; Index 1447;	Information not available
// UpdateCalendarDayOfWeek; Index 1448;	Information not available
// UpdateProcThreadAttribute; Index 1449;	Information not available
// VDMConsoleOperation; Index 1452;	Information not available
// VDMOperationStarted; Index 1453;	Information not available
// VerSetConditionMask; Index 1456;	Information not available
// VerifyConsoleIoHandle; Index 1457;	Information not available
// VerifyScripts; Index 1458;		Information not available
// VerifyVersionInfoA; Index 1459;	Information not available
// VerifyVersionInfoW; Index 1460;	Information not available
// VirtualAllocExNuma; Index 1463;	Information not available
// WTSGetActiveConsoleSessionId; Index 1472;	Information not available
// WaitForDebugEventEx; Index 1475;	Information not available
// WaitForThreadpoolIoCallbacks; Index 1480;	Information not available
// WaitForThreadpoolTimerCallbacks; Index 1481;	Information not available
// WaitForThreadpoolWaitCallbacks; Index 1482;	Information not available
// WaitForThreadpoolWorkCallbacks; Index 1483;	Information not available
// WakeAllConditionVariable; Index 1486;	Information not available
// WerGetFlags; Index 1488;		Information not available
// WerGetFlagsWorker; Index 1489;	Information not available
// WerRegisterFile; Index 1490;		Information not available
// WerRegisterFileWorker; Index 1491;	Information not available
// WerRegisterMemoryBlock; Index 1492;	Information not available
// WerRegisterMemoryBlockWorker; Index 1493;	Information not available
// WerRegisterRuntimeExceptionModule; Index 1494;	Information not available
// WerRegisterRuntimeExceptionModuleWorker; Index 1495;	Information not available
// WerSetFlags; Index 1496;		Information not available
// WerSetFlagsWorker; Index 1497;	Information not available
// WerUnregisterFile; Index 1498;	Information not available
// WerUnregisterFileWorker; Index 1499;	Information not available
// WerUnregisterMemoryBlock; Index 1500;	Information not available
// WerUnregisterMemoryBlockWorker; Index 1501;	Information not available
// WerUnregisterRuntimeExceptionModule; Index 1502;	Information not available
// WerUnregisterRuntimeExceptionModuleWorker; Index 1503;	Information not available
// WerpCleanupMessageMapping; Index 1504;	Information not available
// WerpGetDebugger; Index 1505;		Information not available
// WerpInitiateRemoteRecovery; Index 1506;	Information not available
// WerpLaunchAeDebug; Index 1507;	Information not available
// WerpNotifyLoadStringResource; Index 1508;	Information not available
// WerpNotifyLoadStringResourceEx; Index 1509;	Information not available
// WerpNotifyLoadStringResourceWorker; Index 1510;	Information not available
// WerpNotifyUseStringResource; Index 1511;	Information not available
// WerpNotifyUseStringResourceWorker; Index 1512;	Information not available
// WerpStringLookup; Index 1513;	Information not available
// Wow64DisableWow64FsRedirection; Index 1516;	Information not available
// Wow64EnableWow64FsRedirection; Index 1517;	Information not available
// Wow64GetThreadContext; Index 1518;	Information not available
// Wow64GetThreadSelectorEntry; Index 1519;	Information not available
// Wow64RevertWow64FsRedirection; Index 1520;	Information not available
// Wow64SetThreadContext; Index 1521;	Information not available
// Wow64SuspendThread; Index 1522;	Information not available
// WriteConsoleInputVDMA; Index 1525;	Information not available
// WriteConsoleInputVDMW; Index 1526;	Information not available
// WriteFileGather; Index 1536;		Information not available
// ZombifyActCtx; Index 1549;		Information not available
// ZombifyActCtxWorker; Index 1550;	Information not available
// lstrcat; Index 1559;			Information not available
// lstrcmp; Index 1562;			Information not available
// lstrcmpi; Index 1565;		Information not available
// lstrcpy; Index 1568;			Information not available
// lstrcpyn; Index 1571;		Information not available
// lstrlen; Index 1574;			Information not available
// timeBeginPeriod; Index 1577;		Information not available
// timeEndPeriod; Index 1578;		Information not available
// timeGetDevCaps; Index 1579;		Information not available
// timeGetSystemTime; Index 1580;	Information not available
// timeGetTime; Index 1581;		Information not available

///  <summary>
///    MSDN: https://docs.microsoft.com/en-us/windows/desktop/api/synchapi/nf-synchapi-acquiresrwlockexclusive
///  </summary>
procedure AcquireSRWLockExclusive( var SRWLock: TSRWLock ); stdcall; external cLibName name 'AcquireSRWLockExclusive';

///  <summary>
///    MSDN: https://docs.microsoft.com/en-us/windows/desktop/api/synchapi/nf-synchapi-initializesrwlock
///  </summary>
procedure InitializeSRWLock( var SRWLock: TSRWLock ); stdcall; external cLibName name 'InitializeSRWLock';

///  <summary>
///    MSDN: https://docs.microsoft.com/en-us/windows/desktop/api/synchapi/nf-synchapi-initializeconditionvariable
///  </summary>
procedure InitializeConditionVariable( var ConditionVariable: TCONDITION_VARIABLE ); stdcall; external cLibName name 'InitializeConditionVariable';

///  <summary>
///    MSDN: https://docs.microsoft.com/en-us/windows/desktop/api/synchapi/nf-synchapi-releasesrwlockexclusive
///  </summary>
procedure ReleaseSRWLockExclusive( var SRWLock: TSRWLock ); stdcall; external cLibName name 'ReleaseSRWLockExclusive';


///  <summary>
///    MSDN: https://docs.microsoft.com/en-us/windows/desktop/api/synchapi/nf-synchapi-sleepconditionvariablesrw
///  </summary>
function SleepConditionVariableSRW( var ConditionVariable: TCONDITION_VARIABLE; var SRWLock: TSRWLock; dwMilliseconds: dword; flags: uint64 ): boolean; stdcall; external cLibName name 'SleepConditionVariableSRW';

///  <summary>
///    MSDN: https://docs.microsoft.com/en-us/windows/desktop/api/synchapi/nf-synchapi-wakeconditionvariable
///  </summary>
procedure WakeConditionVariable( var ConditionVariable: TCONDITION_VARIABLE ); stdcall; external cLibName name 'WakeConditionVariable';

function AddAtom(lpString: PAnsiChar): TAtom; stdcall; external cLibName name 'AddAtomA';
function AddAtomW(lpString: PWideChar): TAtom; stdcall; external cLibName name 'AddAtomW';
function AllocConsole: BOOL; stdcall; external cLibName name 'AllocConsole';
function AreFileApisANSI: BOOL; stdcall; external cLibName name 'AreFileApisANSI';
function BackupRead(hFile: THandle; lpBuffer: PByte; nNumberOfBytesToRead: DWORD; var lpNumberOfBytesRead: DWORD; bAbort: BOOL; bProcessSecurity: BOOL; var lpContext: Pointer): BOOL; stdcall; external cLibName name 'BackupRead';
function BackupSeek(hFile: THandle; dwLowBytesToSeek, dwHighBytesToSeek: DWORD; var lpdwLowByteSeeked, lpdwHighByteSeeked: DWORD; lpContext: Pointer): BOOL; stdcall; external cLibName name 'BackupSeek';
function BackupWrite(hFile: THandle; lpBuffer: PByte; nNumberOfBytesToWrite: DWORD; var lpNumberOfBytesWritten: DWORD; bAbort, bProcessSecurity: BOOL; var lpContext: Pointer): BOOL; stdcall; external cLibName name 'BackupWrite';
function Beep(dwFreq, dwDuration: DWORD): BOOL; stdcall; external cLibName name 'Beep';
function BeginUpdateResource(pFileName: PAnsiChar; bDeleteExistingResources: BOOL): THandle; stdcall; external cLibName name 'BeginUpdateResourceA';
function BeginUpdateResourceW(pFileName: PWideChar; bDeleteExistingResources: BOOL): THandle; stdcall; external cLibName name 'BeginUpdateResourceW';
function BuildCommDCB(lpDef: PAnsiChar; var lpDCB: TDCB): BOOL; stdcall; external cLibName name 'BuildCommDCBA';
function BuildCommDCBAndTimeouts(lpDef: PAnsiChar; var lpDCB: TDCB; var lpCommTimeouts: TCommTimeouts): BOOL; stdcall; external cLibName name 'BuildCommDCBAndTimeoutsA';
function BuildCommDCBAndTimeoutsW(lpDef: PWideChar; var lpDCB: TDCB; var lpCommTimeouts: TCommTimeouts): BOOL; stdcall; external cLibName name 'BuildCommDCBAndTimeoutsW';
function BuildCommDCBW(lpDef: PWideChar; var lpDCB: TDCB): BOOL; stdcall; external cLibName name 'BuildCommDCBW';
function CallNamedPipe(lpNamedPipeName: PAnsiChar; lpInBuffer: Pointer; nInBufferSize: DWORD; lpOutBuffer: Pointer; nOutBufferSize: DWORD; var lpBytesRead: DWORD; nTimeOut: DWORD): BOOL; stdcall; external cLibName name 'CallNamedPipeA';
function CallNamedPipeW(lpNamedPipeName: PWideChar; lpInBuffer: Pointer; nInBufferSize: DWORD; lpOutBuffer: Pointer; nOutBufferSize: DWORD; var lpBytesRead: DWORD; nTimeOut: DWORD): BOOL; stdcall; external cLibName name 'CallNamedPipeW';
function CancelIo(hFile: THandle): BOOL; stdcall; external cLibName name 'CancelIo';
function CancelWaitableTimer(hTimer: THandle): BOOL; stdcall; external cLibName name 'CancelWaitableTimer';
function ClearCommBreak(hFile: THandle): BOOL; stdcall; external cLibName name 'ClearCommBreak';
function ClearCommError(hFile: THandle; var lpErrors: DWORD; lpStat: PComStat): BOOL; stdcall; external cLibName name 'ClearCommError';
function CloseHandle(hObject: THandle): BOOL; stdcall; external cLibName name 'CloseHandle';
function CommConfigDialog(lpszName: PAnsiChar; hWnd: THWND; var lpCC: TCommConfig): BOOL; stdcall; external cLibName name 'CommConfigDialogA';
function CommConfigDialogW(lpszName: PWideChar; hWnd: THWND; var lpCC: TCommConfig): BOOL; stdcall; external cLibName name 'CommConfigDialogW';
function CompareFileTime(const lpFileTime1, lpFileTime2: TFileTime): Longint; stdcall; external cLibName name 'CompareFileTime';
function CompareString(Locale: LCID; dwCmpFlags: DWORD; lpString1: PAnsiChar; cchCount1: Integer; lpString2: PAnsiChar; cchCount2: Integer): Integer; stdcall; external cLibName name 'CompareStringA';
function CompareStringW(Locale: LCID; dwCmpFlags: DWORD; lpString1: PWideChar; cchCount1: Integer; lpString2: PWideChar; cchCount2: Integer): Integer; stdcall; external cLibName name 'CompareStringW';
function ConnectNamedPipe(hNamedPipe: THandle; lpOverlapped: POverlapped): BOOL; stdcall; external cLibName name 'ConnectNamedPipe';
function ContinueDebugEvent(dwProcessId, dwThreadId, dwContinueStatus: DWORD): BOOL; stdcall; external cLibName name 'ContinueDebugEvent';
function ConvertDefaultLocale(Locale: LCID): LCID; stdcall; external cLibName name 'ConvertDefaultLocale';
function ConvertThreadToFiber(lpParameter: Pointer): BOOL; stdcall; external cLibName name 'ConvertThreadToFiber';
function CopyFile(lpExistingFileName, lpNewFileName: PAnsiChar; bFailIfExists: BOOL): BOOL; stdcall; external cLibName name 'CopyFileA';
function CopyFileEx(lpExistingFileName, lpNewFileName: PAnsiChar; lpProgressRoutine: TCopyProgressRoutine; lpData: Pointer; pbCancel: PBool; dwCopyFlags: DWORD): BOOL; stdcall; external cLibName name 'CopyFileExA';
function CopyFileExW(lpExistingFileName, lpNewFileName: PWideChar; lpProgressRoutine: TCopyProgressRoutine; lpData: Pointer; pbCancel: PBool; dwCopyFlags: DWORD): BOOL; stdcall; external cLibName name 'CopyFileExW';
function CopyFileW(lpExistingFileName, lpNewFileName: PWideChar; bFailIfExists: BOOL): BOOL; stdcall; external cLibName name 'CopyFileW';
function CreateConsoleScreenBuffer(dwDesiredAccess, dwShareMode: DWORD; lpSecurityAttributes: PSecurityAttributes; dwFlags: DWORD; lpScreenBufferData: Pointer): THandle; stdcall; external cLibName name 'CreateConsoleScreenBuffer';
function CreateDirectory(lpPathName: PAnsiChar; lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall; external cLibName name 'CreateDirectoryA';
function CreateDirectoryEx(lpTemplateDirectory, lpNewDirectory: PAnsiChar; lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall; external cLibName name 'CreateDirectoryExA';
function CreateDirectoryExW(lpTemplateDirectory, lpNewDirectory: PWideChar; lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall; external cLibName name 'CreateDirectoryExW';
function CreateDirectoryW(lpPathName: PWideChar; lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall; external cLibName name 'CreateDirectoryW';
function CreateEvent(lpEventAttributes: PSecurityAttributes; bManualReset, bInitialState: BOOL; lpName: PAnsiChar): THandle; stdcall; external cLibName name 'CreateEventA';
function CreateEventW(lpEventAttributes: PSecurityAttributes; bManualReset, bInitialState: BOOL; lpName: PWideChar): THandle; stdcall; external cLibName name 'CreateEventW';
function CreateFiber(dwStackSize: DWORD; lpStartAddress: TFiberProc; lpParameter: Pointer): BOOL; stdcall; external cLibName name 'CreateFiber';
function CreateFile(lpFileName: PAnsiChar; dwDesiredAccess, dwShareMode: DWORD; lpSecurityAttributes: PSecurityAttributes; dwCreationDisposition, dwFlagsAndAttributes: DWORD; hTemplateFile: THandle): THandle; stdcall; external cLibName name 'CreateFileA';
function CreateFileMapping(hFile: THandle; lpFileMappingAttributes: PSecurityAttributes; flProtect, dwMaximumSizeHigh, dwMaximumSizeLow: DWORD; lpName: PAnsiChar): THandle; stdcall; external cLibName name 'CreateFileMappingA';
function CreateFileMappingW(hFile: THandle; lpFileMappingAttributes: PSecurityAttributes; flProtect, dwMaximumSizeHigh, dwMaximumSizeLow: DWORD; lpName: PWideChar): THandle; stdcall; external cLibName name 'CreateFileMappingW';
function CreateFileW(lpFileName: PWideChar; dwDesiredAccess, dwShareMode: DWORD; lpSecurityAttributes: PSecurityAttributes; dwCreationDisposition, dwFlagsAndAttributes: DWORD; hTemplateFile: THandle): THandle; stdcall; external cLibName name 'CreateFileW';
function CreateHardLink(lpFileName, lpExistingFileName: PAnsiChar; lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall; external cLibName name 'CreateHardLinkA';
function CreateHardLinkW(lpFileName, lpExistingFileName: PWideChar; lpSecurityAttributes: PSecurityAttributes): BOOL; stdcall; external cLibName name 'CreateHardLinkW';
function CreateIoCompletionPort(FileHandle, ExistingCompletionPort: THandle; CompletionKey, NumberOfConcurrentThreads: DWORD): THandle; stdcall; external cLibName name 'CreateIoCompletionPort';
function CreateMailslot(lpName: PAnsiChar; nMaxMessageSize: DWORD; lReadTimeout: DWORD; lpSecurityAttributes: PSecurityAttributes): THandle; stdcall; external cLibName name 'CreateMailslotA';
function CreateMailslotW(lpName: PWideChar; nMaxMessageSize: DWORD; lReadTimeout: DWORD; lpSecurityAttributes: PSecurityAttributes): THandle; stdcall; external cLibName name 'CreateMailslotW';
function CreateMutex(lpMutexAttributes: PSecurityAttributes; bInitialOwner: BOOL; lpName: PAnsiChar): THandle; stdcall; external cLibName name 'CreateMutexA';
function CreateMutexW(lpMutexAttributes: PSecurityAttributes; bInitialOwner: BOOL; lpName: PWideChar): THandle; stdcall; external cLibName name 'CreateMutexW';
function CreateNamedPipe(lpName: PAnsiChar; dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut: DWORD; lpSecurityAttributes: PSecurityAttributes): THandle; stdcall; external cLibName name 'CreateNamedPipeA';
function CreateNamedPipeW(lpName: PWideChar; dwOpenMode, dwPipeMode, nMaxInstances, nOutBufferSize, nInBufferSize, nDefaultTimeOut: DWORD; lpSecurityAttributes: PSecurityAttributes): THandle; stdcall; external cLibName name 'CreateNamedPipeW';
function CreatePipe(var hReadPipe, hWritePipe: THandle; lpPipeAttributes: PSecurityAttributes; nSize: DWORD): BOOL; stdcall; external cLibName name 'CreatePipe';
function CreateProcess(lpApplicationName: PAnsiChar; lpCommandLine: PAnsiChar; lpProcessAttributes, lpThreadAttributes: PSecurityAttributes; bInheritHandles: BOOL; dwCreationFlags: DWORD; lpEnvironment: Pointer; lpCurrentDirectory: PAnsiChar; const lpStartupInfo: TStartupInfoA; var lpProcessInformation: TProcessInformation): BOOL; stdcall; external cLibName name 'CreateProcessA';
function CreateProcessW(lpApplicationName: PWideChar; lpCommandLine: PWideChar; lpProcessAttributes, lpThreadAttributes: PSecurityAttributes; bInheritHandles: BOOL; dwCreationFlags: DWORD; lpEnvironment: Pointer; lpCurrentDirectory: PWideChar; const lpStartupInfo: TStartupInfoW; var lpProcessInformation: TProcessInformation): BOOL; stdcall; external cLibName name 'CreateProcessW';
function CreateRemoteThread(hProcess: THandle; lpThreadAttributes: Pointer; dwStackSize: DWORD; lpStartAddress: TThreadProc; lpParameter: Pointer; dwCreationFlags: DWORD; var lpThreadId: DWORD): THandle; stdcall; external cLibName name 'CreateRemoteThread';
function CreateSemaphore(lpSemaphoreAttributes: PSecurityAttributes; lInitialCount, lMaximumCount: Longint; lpName: PAnsiChar): THandle; stdcall; external cLibName name 'CreateSemaphoreA';
function CreateSemaphoreW(lpSemaphoreAttributes: PSecurityAttributes; lInitialCount, lMaximumCount: Longint; lpName: PWideChar): THandle; stdcall; external cLibName name 'CreateSemaphoreW';
function CreateTapePartition(hDevice: THandle; dwPartitionMethod, dwCount, dwSize: DWORD): DWORD; stdcall; external cLibName name 'CreateTapePartition';
function CreateThread(lpThreadAttributes: Pointer; dwStackSize: DWORD; lpStartAddress: TThreadProc; lpParameter: Pointer; dwCreationFlags: DWORD; var lpThreadId: DWORD): THandle; stdcall; external cLibName name 'CreateThread';
function CreateToolhelp32Snapshot(dwFlags, th32ProcessID: DWORD): THandle; stdcall; external cLibName name 'CreateToolhelp32Snapshot';
function CreateWaitableTimer(lpTimerAttributes: PSecurityAttributes; bManualReset: BOOL; lpTimerName: PAnsiChar): THandle; stdcall; external cLibName name 'CreateWaitableTimerA';
function CreateWaitableTimerW(lpTimerAttributes: PSecurityAttributes; bManualReset: BOOL; lpTimerName: PWideChar): THandle; stdcall; external cLibName name 'CreateWaitableTimerW';
function DebugActiveProcess(dwProcessId: DWORD): BOOL; stdcall; external cLibName name 'DebugActiveProcess';
procedure DebugBreak; stdcall; external cLibName name 'DebugBreak';
function DefineDosDevice(dwFlags: DWORD; lpDeviceName, lpTargetPath: PAnsiChar): BOOL; stdcall; external cLibName name 'DefineDosDeviceA';
function DefineDosDeviceW(dwFlags: DWORD; lpDeviceName, lpTargetPath: PWideChar): BOOL; stdcall; external cLibName name 'DefineDosDeviceW';
function DeleteAtom(nAtom: TATOM): TATOM; stdcall; external cLibName name 'DeleteAtom';
procedure DeleteCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall; external cLibName name 'DeleteCriticalSection';
function DeleteFiber(lpFiber: Pointer): BOOL; stdcall; external cLibName name 'DeleteFiber';
function DeleteFile(lpFileName: PAnsiChar): BOOL; stdcall; external cLibName name 'DeleteFileA';
function DeleteFileW(lpFileName: PWideChar): BOOL; stdcall; external cLibName name 'DeleteFileW';
function DeviceIoControl(hDevice: THandle; dwIoControlCode: DWORD; lpInBuffer: Pointer; nInBufferSize: DWORD; lpOutBuffer: Pointer; nOutBufferSize: DWORD; var lpBytesReturned: DWORD; lpOverlapped: POverlapped): BOOL; stdcall; external cLibName name 'DeviceIoControl';
function DisableThreadLibraryCalls(hLibModule: HMODULE): BOOL; stdcall; external cLibName name 'DisableThreadLibraryCalls';
function DisconnectNamedPipe(hNamedPipe: THandle): BOOL; stdcall; external cLibName name 'DisconnectNamedPipe';
function DosDateTimeToFileTime(wFatDate, wFatTime: Word; var lpFileTime: TFileTime): BOOL; stdcall; external cLibName name 'DosDateTimeToFileTime';
function DuplicateHandle(hSourceProcessHandle, hSourceHandle, hTargetProcessHandle: THandle; lpTargetHandle: PHandle; dwDesiredAccess: DWORD; bInheritHandle: BOOL; dwOptions: DWORD): BOOL; stdcall; external cLibName name 'DuplicateHandle';
function EndUpdateResource(hUpdate: THandle; fDiscard: BOOL): BOOL; stdcall; external cLibName name 'EndUpdateResourceA';
function EndUpdateResourceW(hUpdate: THandle; fDiscard: BOOL): BOOL; stdcall; external cLibName name 'EndUpdateResourceW';
procedure EnterCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall; external cLibName name 'EnterCriticalSection';
function EnumCalendarInfo(lpCalInfoEnumProc: TCalInfoEnumProcA; Locale: LCID; Calendar: CALID; CalType: CALTYPE): BOOL; stdcall; external cLibName name 'EnumCalendarInfoA';
function EnumCalendarInfoW(lpCalInfoEnumProc: TCalInfoEnumProcW; Locale: LCID; Calendar: CALID; CalType: CALTYPE): BOOL; stdcall; external cLibName name 'EnumCalendarInfoW';
function EnumDateFormats(lpDateFmtEnumProc: TDateFmtEnumProcA; Locale: LCID; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'EnumDateFormatsA';
function EnumDateFormatsW(lpDateFmtEnumProc: TDateFmtEnumProcW; Locale: LCID; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'EnumDateFormatsW';
function EnumResourceLanguages(hModule: HMODULE; lpType, lpName: PAnsiChar; lpEnumFunc: TEnumResLangProcA; lParam: Longint): BOOL; stdcall; external cLibName name 'EnumResourceLanguagesA';
function EnumResourceLanguagesW(hModule: HMODULE; lpType, lpName: PWideChar; lpEnumFunc: TEnumResLangProcW; lParam: Longint): BOOL; stdcall; external cLibName name 'EnumResourceLanguagesW';
function EnumResourceNames(hModule: HMODULE; lpType: PAnsiChar; lpEnumFunc: TEnumResNameProcA; lParam: Longint): BOOL; stdcall; external cLibName name 'EnumResourceNamesA';
function EnumResourceNamesW(hModule: HMODULE; lpType: PWideChar; lpEnumFunc: TEnumResNameProcW; lParam: Longint): BOOL; stdcall; external cLibName name 'EnumResourceNamesW';
function EnumResourceTypes(hModule: HMODULE; lpEnumFunc: TEnumResTypeProcA; lParam: Longint): BOOL; stdcall; external cLibName name 'EnumResourceTypesA';
function EnumResourceTypesW(hModule: HMODULE; lpEnumFunc: TEnumResTypeProcW; lParam: Longint): BOOL; stdcall; external cLibName name 'EnumResourceTypesW';
function EnumSystemCodePages(lpCodePageEnumProc: TEnumCodePageProcA; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'EnumSystemCodePagesA';
function EnumSystemCodePagesW(lpCodePageEnumProc: TEnumCodePageProcW; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'EnumSystemCodePagesW';
function EnumSystemLocales(lpLocaleEnumProc: TEnumLocaleProcA; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'EnumSystemLocalesA';
function EnumSystemLocalesW(lpLocaleEnumProc: TEnumLocaleProcW; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'EnumSystemLocalesW';
function EnumTimeFormats(lpTimeFmtEnumProc: TEnumTimeFmtProcA; Locale: LCID; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'EnumTimeFormatsA';
function EnumTimeFormatsW(lpTimeFmtEnumProc: TEnumTimeFmtProcW; Locale: LCID; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'EnumTimeFormatsW';
function EraseTape(hDevice: THandle; dwEraseType: DWORD; bImmediate: BOOL): DWORD; stdcall; external cLibName name 'EraseTape';
function EscapeCommFunction(hFile: THandle; dwFunc: DWORD): BOOL; stdcall; external cLibName name 'EscapeCommFunction';
procedure ExitProcess(uExitCode: UINT); stdcall; external cLibName name 'ExitProcess';
procedure ExitThread(dwExitCode: DWORD); stdcall; external cLibName name 'ExitThread';
function ExpandEnvironmentStrings(lpSrc: PAnsiChar; lpDst: PAnsiChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'ExpandEnvironmentStringsA';
function ExpandEnvironmentStringsW(lpSrc: PWideChar; lpDst: PWideChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'ExpandEnvironmentStringsW';
procedure FatalAppExit(uAction: UINT; lpMessageText: PAnsiChar); stdcall; external cLibName name 'FatalAppExitA';
procedure FatalAppExitW(uAction: UINT; lpMessageText: PWideChar); stdcall; external cLibName name 'FatalAppExitW';
procedure FatalExit(ExitCode: Integer); stdcall; external cLibName name 'FatalExit';
function FileTimeToDosDateTime(const lpFileTime: TFileTime; var lpFatDate, lpFatTime: Word): BOOL; stdcall; external cLibName name 'FileTimeToDosDateTime';
function FileTimeToLocalFileTime(const lpFileTime: TFileTime; var lpLocalFileTime: TFileTime): BOOL; stdcall; external cLibName name 'FileTimeToLocalFileTime';
function FileTimeToSystemTime(const lpFileTime: TFileTime; var lpSystemTime: TSystemTime): BOOL; stdcall; external cLibName name 'FileTimeToSystemTime';
function FillConsoleOutputAttribute(hConsoleOutput: THandle; wAttribute: Word; nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfAttrsWritten: DWORD): BOOL; stdcall; external cLibName name 'FillConsoleOutputAttribute';
function FillConsoleOutputCharacter(hConsoleOutput: THandle; cCharacter: AnsiChar; nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfCharsWritten: DWORD): BOOL; stdcall; external cLibName name 'FillConsoleOutputCharacterA';
function FillConsoleOutputCharacterW(hConsoleOutput: THandle; cCharacter: WideChar; nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfCharsWritten: DWORD): BOOL; stdcall; external cLibName name 'FillConsoleOutputCharacterW';
function FindAtom(lpString: PAnsiChar): TATOM; stdcall; external cLibName name 'FindAtomA';
function FindAtomW(lpString: PWideChar): TATOM; stdcall; external cLibName name 'FindAtomW';
function FindClose(hFindFile: THandle): BOOL; stdcall; external cLibName name 'FindClose';
function FindCloseChangeNotification(hChangeHandle: THandle): BOOL; stdcall; external cLibName name 'FindCloseChangeNotification';
function FindFirstChangeNotification(lpPathName: PAnsiChar; bWatchSubtree: BOOL; dwNotifyFilter: DWORD): THandle; stdcall; external cLibName name 'FindFirstChangeNotificationA';
function FindFirstChangeNotificationW(lpPathName: PWideChar; bWatchSubtree: BOOL; dwNotifyFilter: DWORD): THandle; stdcall; external cLibName name 'FindFirstChangeNotificationW';
function FindFirstFile(lpFileName: pointer; lpFindFileData: PWIN32FindDataA): THandle; stdcall; external cLibName name 'FindFirstFileA';
function FindFirstFileW(lpFileName: pointer; lpFindFileData: PWIN32FindDataW): THandle; stdcall; external cLibName name 'FindFirstFileW';
function FindFirstFileEx(lpFileName: PAnsiChar; fInfoLevelId: TFindexInfoLevels; lpFindFileData: Pointer; fSearchOp: TFindexSearchOps; lpSearchFilter: Pointer; dwAdditionalFlags: DWORD): BOOL; stdcall; external cLibName name 'FindFirstFileExA';
function FindFirstFileExW(lpFileName: PWideChar; fInfoLevelId: TFindexInfoLevels; lpFindFileData: Pointer; fSearchOp: TFindexSearchOps; lpSearchFilter: Pointer; dwAdditionalFlags: DWORD): BOOL; stdcall; external cLibName name 'FindFirstFileExW';
function FindNextChangeNotification(hChangeHandle: THandle): BOOL; stdcall; external cLibName name 'FindNextChangeNotification';
function FindNextFile(hFindFile: THandle; lpFindFileData: PWIN32FindDataA): BOOL; stdcall; external cLibName name 'FindNextFileA';
function FindNextFileW(hFindFile: THandle; lpFindFileData: PWIN32FindDataW): BOOL; stdcall; external cLibName name 'FindNextFileW';
function FindResource(hModule: HMODULE; lpName, lpType: PAnsiChar): THRSRC; stdcall; external cLibName name 'FindResourceA';
function FindResourceEx(hModule: HMODULE; lpType, lpName: PAnsiChar; wLanguage: Word): THRSRC; stdcall; external cLibName name 'FindResourceExA';
function FindResourceExW(hModule: HMODULE; lpType, lpName: PWideChar; wLanguage: Word): THRSRC; stdcall; external cLibName name 'FindResourceExW';
function FindResourceW(hModule: HMODULE; lpName, lpType: PWideChar): THRSRC; stdcall; external cLibName name 'FindResourceW';
function FlushConsoleInputBuffer(hConsoleInput: THandle): BOOL; stdcall; external cLibName name 'FlushConsoleInputBuffer';
function FlushFileBuffers(hFile: THandle): BOOL; stdcall; external cLibName name 'FlushFileBuffers';
function FlushInstructionCache(hProcess: THandle; const lpBaseAddress: Pointer; dwSize: DWORD): BOOL; stdcall; external cLibName name 'FlushInstructionCache';
function FlushViewOfFile(const lpBaseAddress: Pointer; dwNumberOfBytesToFlush: DWORD): BOOL; stdcall; external cLibName name 'FlushViewOfFile';
function FoldString(dwMapFlags: DWORD; lpSrcStr: PAnsiChar; cchSrc: Integer; lpDestStr: PAnsiChar; cchDest: Integer): Integer; stdcall; external cLibName name 'FoldStringA';
function FoldStringW(dwMapFlags: DWORD; lpSrcStr: PWideChar; cchSrc: Integer; lpDestStr: PWideChar; cchDest: Integer): Integer; stdcall; external cLibName name 'FoldStringW';
function FormatMessage(dwFlags: DWORD; lpSource: Pointer; dwMessageId: DWORD; dwLanguageId: DWORD; lpBuffer: PAnsiChar; nSize: DWORD; Arguments: Pointer): DWORD; stdcall; external cLibName name 'FormatMessageA';
function FormatMessageW(dwFlags: DWORD; lpSource: Pointer; dwMessageId: DWORD; dwLanguageId: DWORD; lpBuffer: PWideChar; nSize: DWORD; Arguments: Pointer): DWORD; stdcall; external cLibName name 'FormatMessageW';
function FreeConsole: BOOL; stdcall; external cLibName name 'FreeConsole';
function FreeEnvironmentStrings(p1: PAnsiChar): BOOL; stdcall; external cLibName name 'FreeEnvironmentStringsA';
function FreeEnvironmentStringsW(p1: PWideChar): BOOL; stdcall; external cLibName name 'FreeEnvironmentStringsW';
function FreeLibrary(hLibModule: HMODULE): BOOL; stdcall; external cLibName name 'FreeLibrary';
procedure FreeLibraryAndExitThread(hLibModule: HMODULE; dwExitCode: DWORD); stdcall; external cLibName name 'FreeLibraryAndExitThread';
function FreeResource(hResData: HGLOBAL): BOOL; stdcall; external cLibName name 'FreeResource';
function GenerateConsoleCtrlEvent(dwCtrlEvent: DWORD; dwProcessGroupId: DWORD): BOOL; stdcall; external cLibName name 'GenerateConsoleCtrlEvent';
function GetACP: UINT; stdcall; external cLibName name 'GetACP';
function GetAtomName(nAtom: TATOM; lpBuffer: PAnsiChar; nSize: Integer): UINT; stdcall; external cLibName name 'GetAtomNameA';
function GetAtomNameW(nAtom: TATOM; lpBuffer: PWideChar; nSize: Integer): UINT; stdcall; external cLibName name 'GetAtomNameW';
function GetBinaryType(lpApplicationName: PAnsiChar; var lpBinaryType: DWORD): BOOL; stdcall; external cLibName name 'GetBinaryTypeA';
function GetBinaryTypeW(lpApplicationName: PWideChar; var lpBinaryType: DWORD): BOOL; stdcall; external cLibName name 'GetBinaryTypeW';
function GetCPInfo(CodePage: UINT; var lpCPInfo: TCPInfo): BOOL; stdcall; external cLibName name 'GetCPInfo';
function GetCommConfig(hCommDev: THandle; var lpCC: TCommConfig; var lpdwSize: DWORD): BOOL; stdcall; external cLibName name 'GetCommConfig';
function GetCommMask(hFile: THandle; var lpEvtMask: DWORD): BOOL; stdcall; external cLibName name 'GetCommMask';
function GetCommModemStatus(hFile: THandle; var lpModemStat: DWORD): BOOL; stdcall; external cLibName name 'GetCommModemStatus';
function GetCommProperties(hFile: THandle; var lpCommProp: TCommProp): BOOL; stdcall; external cLibName name 'GetCommProperties';
function GetCommState(hFile: THandle; var lpDCB: TDCB): BOOL; stdcall; external cLibName name 'GetCommState';
function GetCommTimeouts(hFile: THandle; var lpCommTimeouts: TCommTimeouts): BOOL; stdcall; external cLibName name 'GetCommTimeouts';
function GetCommandLine: PAnsiChar; stdcall; external cLibName name 'GetCommandLineA';
function GetCommandLineW: PWideChar; stdcall; external cLibName name 'GetCommandLineW';
function GetCompressedFileSize(lpFileName: PAnsiChar; lpFileSizeHigh: PDWORD): DWORD; stdcall; external cLibName name 'GetCompressedFileSizeA';
function GetCompressedFileSizeW(lpFileName: PWideChar; lpFileSizeHigh: PDWORD): DWORD; stdcall; external cLibName name 'GetCompressedFileSizeW';
function GetComputerName(lpBuffer: PAnsiChar; var nSize: DWORD): BOOL; stdcall; external cLibName name 'GetComputerNameA';
function GetComputerNameW(lpBuffer: PWideChar; var nSize: DWORD): BOOL; stdcall; external cLibName name 'GetComputerNameW';
function GetConsoleCP: UINT; stdcall; external cLibName name 'GetConsoleCP';
function GetConsoleCursorInfo(hConsoleOutput: THandle; var lpConsoleCursorInfo: TConsoleCursorInfo): BOOL; stdcall; external cLibName name 'GetConsoleCursorInfo';
function GetConsoleMode(hConsoleHandle: THandle; var lpMode: DWORD): BOOL; stdcall; external cLibName name 'GetConsoleMode';
function GetConsoleOutputCP: UINT; stdcall; external cLibName name 'GetConsoleOutputCP';
function GetConsoleScreenBufferInfo(hConsoleOutput: THandle; var lpConsoleScreenBufferInfo: TConsoleScreenBufferInfo): BOOL; stdcall; external cLibName name 'GetConsoleScreenBufferInfo';
function GetConsoleTitle(lpConsoleTitle: PAnsiChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'GetConsoleTitleA';
function GetConsoleTitleW(lpConsoleTitle: PWideChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'GetConsoleTitleW';
function GetCurrencyFormat(Locale: LCID; dwFlags: DWORD; lpValue: PAnsiChar; lpFormat: PCurrencyFmtA; lpCurrencyStr: PAnsiChar; cchCurrency: Integer): Integer; stdcall; external cLibName name 'GetCurrencyFormatA';
function GetCurrencyFormatW(Locale: LCID; dwFlags: DWORD; lpValue: PWideChar; lpFormat: PCurrencyFmtW; lpCurrencyStr: PWideChar; cchCurrency: Integer): Integer; stdcall; external cLibName name 'GetCurrencyFormatW';
function GetCurrentDirectory(nBufferLength: DWORD; lpBuffer: PAnsiChar): DWORD; stdcall; external cLibName name 'GetCurrentDirectoryA';
function GetCurrentDirectoryW(nBufferLength: DWORD; lpBuffer: PWideChar): DWORD; stdcall; external cLibName name 'GetCurrentDirectoryW';
function GetCurrentProcess: THandle; stdcall; external cLibName name 'GetCurrentProcess';
function GetCurrentProcessId: DWORD; stdcall; external cLibName name 'GetCurrentProcessId';
function GetCurrentThread: THandle; stdcall; external cLibName name 'GetCurrentThread';
function GetCurrentThreadId: DWORD; stdcall; external cLibName name 'GetCurrentThreadId';
function GetDateFormat(Locale: LCID; dwFlags: DWORD; lpDate: PSystemTime; lpFormat: PAnsiChar; lpDateStr: PAnsiChar; cchDate: Integer): Integer; stdcall; external cLibName name 'GetDateFormatA';
function GetDateFormatW(Locale: LCID; dwFlags: DWORD; lpDate: PSystemTime; lpFormat: PWideChar; lpDateStr: PWideChar; cchDate: Integer): Integer; stdcall; external cLibName name 'GetDateFormatW';
function GetDefaultCommConfig(lpszName: PAnsiChar; var lpCC: TCommConfig; var lpdwSize: DWORD): BOOL; stdcall; external cLibName name 'GetDefaultCommConfigA';
function GetDefaultCommConfigW(lpszName: PWideChar; var lpCC: TCommConfig; var lpdwSize: DWORD): BOOL; stdcall; external cLibName name 'GetDefaultCommConfigW';
function GetDiskFreeSpace(lpRootPathName: PAnsiChar; var lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters: DWORD): BOOL; stdcall; external cLibName name 'GetDiskFreeSpaceA';
function GetDiskFreeSpaceEx(lpDirectoryName: PAnsiChar; var lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes; lpTotalNumberOfFreeBytes: PLargeInteger): BOOL; stdcall; external cLibName name 'GetDiskFreeSpaceExA';
function GetDiskFreeSpaceExW(lpDirectoryName: PWideChar; var lpFreeBytesAvailableToCaller, lpTotalNumberOfBytes; lpTotalNumberOfFreeBytes: PLargeInteger): BOOL; stdcall; external cLibName name 'GetDiskFreeSpaceExW';
function GetDiskFreeSpaceW(lpRootPathName: PWideChar; var lpSectorsPerCluster, lpBytesPerSector, lpNumberOfFreeClusters, lpTotalNumberOfClusters: DWORD): BOOL; stdcall; external cLibName name 'GetDiskFreeSpaceW';
function GetDriveType(lpRootPathName: PAnsiChar): UINT; stdcall; external cLibName name 'GetDriveTypeA';
function GetDriveTypeW(lpRootPathName: PWideChar): UINT; stdcall; external cLibName name 'GetDriveTypeW';
function GetEnvironmentStrings: PAnsiChar; stdcall; external cLibName name 'GetEnvironmentStringsA';
function GetEnvironmentStringsW: PWideChar; stdcall; external cLibName name 'GetEnvironmentStringsW';
function GetEnvironmentVariable(lpName: PAnsiChar; lpBuffer: PAnsiChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'GetEnvironmentVariableA';
function GetEnvironmentVariableW(lpName: PWideChar; lpBuffer: PWideChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'GetEnvironmentVariableW';
function GetExitCodeProcess(hProcess: THandle; var lpExitCode: DWORD): BOOL; stdcall; external cLibName name 'GetExitCodeProcess';
function GetExitCodeThread(hThread: THandle; var lpExitCode: DWORD): BOOL; stdcall; external cLibName name 'GetExitCodeThread';
function GetFileAttributes(lpFileName: PAnsiChar): DWORD; stdcall; external cLibName name 'GetFileAttributesA';
function GetFileAttributesEx(lpFileName: PAnsiChar; fInfoLevelId: TGetFileExInfoLevels; lpFileInformation: Pointer): BOOL; stdcall; external cLibName name 'GetFileAttributesExA';
function GetFileAttributesExW(lpFileName: PWideChar; fInfoLevelId: TGetFileExInfoLevels; lpFileInformation: Pointer): BOOL; stdcall; external cLibName name 'GetFileAttributesExW';
function GetFileAttributesW(lpFileName: PWideChar): DWORD; stdcall; external cLibName name 'GetFileAttributesW';
function GetFileInformationByHandle(hFile: THandle; var lpFileInformation: TByHandleFileInformation): BOOL; stdcall; external cLibName name 'GetFileInformationByHandle';
function GetFileSize(hFile: THandle; lpFileSizeHigh: Pointer): DWORD; stdcall; external cLibName name 'GetFileSize';
function GetFileTime(hFile: THandle; lpCreationTime, lpLastAccessTime, lpLastWriteTime: PFileTime): BOOL; stdcall; external cLibName name 'GetFileTime';
function GetFileType(hFile: THandle): DWORD; stdcall; external cLibName name 'GetFileType';
function GetFullPathName(lpFileName: PAnsiChar; nBufferLength: DWORD; lpBuffer: PAnsiChar; var lpFilePart: PAnsiChar): DWORD; stdcall; external cLibName name 'GetFullPathNameA';
function GetFullPathNameW(lpFileName: PWideChar; nBufferLength: DWORD; lpBuffer: PWideChar; var lpFilePart: PWideChar): DWORD; stdcall; external cLibName name 'GetFullPathNameW';
function GetHandleInformation(hObject: THandle; var lpdwFlags: DWORD): BOOL; stdcall; external cLibName name 'GetHandleInformation';
function GetLargestConsoleWindowSize(hConsoleOutput: THandle): TCoord; stdcall; external cLibName name 'GetLargestConsoleWindowSize';
function GetLastError: DWORD; stdcall; external cLibName name 'GetLastError';
procedure GetLocalTime(var lpSystemTime: TSystemTime); stdcall; external cLibName name 'GetLocalTime';
function GetLocaleInfo(Locale: LCID; LCType: LCTYPE; lpLCData: PAnsiChar; cchData: Integer): Integer; stdcall; external cLibName name 'GetLocaleInfoA';
function GetLocaleInfoW(Locale: LCID; LCType: LCTYPE; lpLCData: PWideChar; cchData: Integer): Integer; stdcall; external cLibName name 'GetLocaleInfoW';
function GetLogicalDriveStrings(nBufferLength: DWORD; lpBuffer: PAnsiChar): DWORD; stdcall; external cLibName name 'GetLogicalDriveStringsA';
function GetLogicalDriveStringsW(nBufferLength: DWORD; lpBuffer: PAnsiChar): DWORD; stdcall; external cLibName name 'GetLogicalDriveStringsW';
function GetLogicalDrives: DWORD; stdcall; external cLibName name 'GetLogicalDrives';
function GetMailslotInfo(hMailslot: THandle; lpMaxMessageSize: Pointer; var lpNextSize: DWORD; lpMessageCount, lpReadTimeout: Pointer): BOOL; stdcall; external cLibName name 'GetMailslotInfo';
function GetModuleFileName(hModule: THINST; lpFilename: PAnsiChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'GetModuleFileNameA';
function GetModuleFileNameW(hModule: THINST; lpFilename: PWideChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'GetModuleFileNameW';
function GetModuleHandle(lpModuleName: PAnsiChar): HMODULE; stdcall; external cLibName name 'GetModuleHandleA';
function GetModuleHandleW(lpModuleName: PWideChar): HMODULE; stdcall; external cLibName name 'GetModuleHandleW';
function GetNamedPipeHandleState(hNamedPipe: THandle; lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout: PDWORD; lpUserName: PAnsiChar; nMaxUserNameSize: DWORD): BOOL; stdcall; external cLibName name 'GetNamedPipeHandleStateA';
function GetNamedPipeHandleStateW(hNamedPipe: THandle; lpState, lpCurInstances, lpMaxCollectionCount, lpCollectDataTimeout: PDWORD; lpUserName: PWideChar; nMaxUserNameSize: DWORD): BOOL; stdcall; external cLibName name 'GetNamedPipeHandleStateW';
function GetNamedPipeInfo(hNamedPipe: THandle; var lpFlags: DWORD; lpOutBufferSize, lpInBufferSize, lpMaxInstances: Pointer): BOOL; stdcall; external cLibName name 'GetNamedPipeInfo';
function GetNumberFormat(Locale: LCID; dwFlags: DWORD; lpValue: PAnsiChar; lpFormat: PNumberFmtA; lpNumberStr: PAnsiChar; cchNumber: Integer): Integer; stdcall; external cLibName name 'GetNumberFormatA';
function GetNumberFormatW(Locale: LCID; dwFlags: DWORD; lpValue: PWideChar; lpFormat: PNumberFmtW; lpNumberStr: PWideChar; cchNumber: Integer): Integer; stdcall; external cLibName name 'GetNumberFormatW';
function GetNumberOfConsoleInputEvents(hConsoleInput: THandle; var lpNumberOfEvents: DWORD): BOOL; stdcall; external cLibName name 'GetNumberOfConsoleInputEvents';
function GetNumberOfConsoleMouseButtons(var lpNumberOfMouseButtons: DWORD): BOOL; stdcall; external cLibName name 'GetNumberOfConsoleMouseButtons';
function GetOEMCP: UINT; stdcall; external cLibName name 'GetOEMCP';
function GetOverlappedResult(hFile: THandle; const lpOverlapped: TOverlapped; var lpNumberOfBytesTransferred: DWORD; bWait: BOOL): BOOL; stdcall; external cLibName name 'GetOverlappedResult';
function GetPriorityClass(hProcess: THandle): DWORD; stdcall; external cLibName name 'GetPriorityClass';
function GetPrivateProfileInt(lpAppName, lpKeyName: PAnsiChar; nDefault: Integer; lpFileName: PAnsiChar): UINT; stdcall; external cLibName name 'GetPrivateProfileIntA';
function GetPrivateProfileIntW(lpAppName, lpKeyName: PWideChar; nDefault: Integer; lpFileName: PWideChar): UINT; stdcall; external cLibName name 'GetPrivateProfileIntW';
function GetPrivateProfileSection(lpAppName: PAnsiChar; lpReturnedString: PAnsiChar; nSize: DWORD; lpFileName: PAnsiChar): DWORD; stdcall; external cLibName name 'GetPrivateProfileSectionA';
function GetPrivateProfileSectionNames(lpszReturnBuffer: PAnsiChar; nSize: DWORD; lpFileName: PAnsiChar): DWORD; stdcall; external cLibName name 'GetPrivateProfileSectionNamesA';
function GetPrivateProfileSectionNamesW(lpszReturnBuffer: PWideChar; nSize: DWORD; lpFileName: PWideChar): DWORD; stdcall; external cLibName name 'GetPrivateProfileSectionNamesW';
function GetPrivateProfileSectionW(lpAppName: PWideChar; lpReturnedString: PWideChar; nSize: DWORD; lpFileName: PWideChar): DWORD; stdcall; external cLibName name 'GetPrivateProfileSectionW';
function GetPrivateProfileString(lpAppName, lpKeyName, lpDefault: PAnsiChar; lpReturnedString: PAnsiChar; nSize: DWORD; lpFileName: PAnsiChar): DWORD; stdcall; external cLibName name 'GetPrivateProfileStringA';
function GetPrivateProfileStringW(lpAppName, lpKeyName, lpDefault: PWideChar; lpReturnedString: PWideChar; nSize: DWORD; lpFileName: PWideChar): DWORD; stdcall; external cLibName name 'GetPrivateProfileStringW';
function GetPrivateProfileStruct(lpszSection, lpszKey: PAnsiChar; lpStruct: Pointer; uSizeStruct: UINT; szFile: PAnsiChar): BOOL; stdcall; external cLibName name 'GetPrivateProfileStructA';
function GetPrivateProfileStructW(lpszSection, lpszKey: PWideChar; lpStruct: Pointer; uSizeStruct: UINT; szFile: PWideChar): BOOL; stdcall; external cLibName name 'GetPrivateProfileStructW';
function GetProcAddress(hModule: HMODULE; lpProcName: LPCSTR): pointer; stdcall; external cLibName name 'GetProcAddress';
function GetProcessAffinityMask(hProcess: THandle; var lpProcessAffinityMask, lpSystemAffinityMask: DWORD): BOOL; stdcall; external cLibName name 'GetProcessAffinityMask';
function GetProcessHeap: THandle; stdcall; external cLibName name 'GetProcessHeap';
function GetProcessHeaps(NumberOfHeaps: DWORD; var ProcessHeaps: THandle): DWORD; stdcall; external cLibName name 'GetProcessHeaps';
function GetProcessPriorityBoost(hThread: THandle; var DisablePriorityBoost: Bool): BOOL; stdcall; external cLibName name 'GetProcessPriorityBoost';
function GetProcessShutdownParameters(var lpdwLevel, lpdwFlags: DWORD): BOOL; stdcall; external cLibName name 'GetProcessShutdownParameters';
function GetProcessTimes(hProcess: THandle; var lpCreationTime, lpExitTime, lpKernelTime, lpUserTime: TFileTime): BOOL; stdcall; external cLibName name 'GetProcessTimes';
function GetProcessVersion(ProcessId: DWORD): DWORD; stdcall; external cLibName name 'GetProcessVersion';
function GetProcessWorkingSetSize(hProcess: THandle; var lpMinimumWorkingSetSize, lpMaximumWorkingSetSize: DWORD): BOOL; stdcall; external cLibName name 'GetProcessWorkingSetSize';
function GetProfileInt(lpAppName, lpKeyName: PAnsiChar; nDefault: Integer): UINT; stdcall; external cLibName name 'GetProfileIntA';
function GetProfileIntW(lpAppName, lpKeyName: PWideChar; nDefault: Integer): UINT; stdcall; external cLibName name 'GetProfileIntW';
function GetProfileSection(lpAppName: PAnsiChar; lpReturnedString: PAnsiChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'GetProfileSectionA';
function GetProfileSectionW(lpAppName: PWideChar; lpReturnedString: PWideChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'GetProfileSectionW';
function GetProfileString(lpAppName, lpKeyName, lpDefault: PAnsiChar; lpReturnedString: PAnsiChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'GetProfileStringA';
function GetProfileStringW(lpAppName, lpKeyName, lpDefault: PWideChar; lpReturnedString: PWideChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'GetProfileStringW';
function GetQueuedCompletionStatus(CompletionPort: THandle; var lpNumberOfBytesTransferred, lpCompletionKey: DWORD; var lpOverlapped: POverlapped; dwMilliseconds: DWORD): BOOL; stdcall; external cLibName name 'GetQueuedCompletionStatus';
function GetShortPathName(lpszLongPath: PAnsiChar; lpszShortPath: PAnsiChar; cchBuffer: DWORD): DWORD; stdcall; external cLibName name 'GetShortPathNameA';
function GetShortPathNameW(lpszLongPath: PWideChar; lpszShortPath: PWideChar; cchBuffer: DWORD): DWORD; stdcall; external cLibName name 'GetShortPathNameW';
procedure GetStartupInfo(var lpStartupInfo: TStartupInfoA); stdcall; external cLibName name 'GetStartupInfoA';
procedure GetStartupInfoW(var lpStartupInfo: TStartupInfoW); stdcall; external cLibName name 'GetStartupInfoW';
function GetStdHandle(nStdHandle: DWORD): THandle; stdcall; external cLibName name 'GetStdHandle';
function GetStringTypeA(Locale: LCID; dwInfoType: DWORD; const lpSrcStr: LPCSTR; cchSrc: BOOL; var lpCharType: Word): BOOL; external cLibName name 'GetStringTypeA';
function GetStringTypeEx(Locale: LCID; dwInfoType: DWORD; lpSrcStr: PAnsiChar; cchSrc: Integer; var lpCharType): BOOL; stdcall; external cLibName name 'GetStringTypeExA';
function GetStringTypeExW(Locale: LCID; dwInfoType: DWORD; lpSrcStr: PWideChar; cchSrc: Integer; var lpCharType): BOOL; stdcall; external cLibName name 'GetStringTypeExW';
function GetStringTypeW(dwInfoType: DWORD; const lpSrcStr: WideChar; cchSrc: BOOL; var lpCharType: Word): BOOL; external cLibName name 'GetStringTypeW';
function GetSystemDefaultLCID: LCID; stdcall; external cLibName name 'GetSystemDefaultLCID';
function GetSystemDefaultLangID: LANGID; stdcall; external cLibName name 'GetSystemDefaultLangID';
function GetSystemDirectory(lpBuffer: PAnsiChar; uSize: UINT): UINT; stdcall; external cLibName name 'GetSystemDirectoryA';
function GetSystemDirectoryW(lpBuffer: PWideChar; uSize: UINT): UINT; stdcall; external cLibName name 'GetSystemDirectoryW';
procedure GetSystemInfo(var lpSystemInfo: TSystemInfo); stdcall; external cLibName name 'GetSystemInfo';
function GetSystemPowerStatus(var lpSystemPowerStatus: TSystemPowerStatus): BOOL; stdcall; external cLibName name 'GetSystemPowerStatus';
procedure GetSystemTime(var lpSystemTime: TSystemTime); stdcall; external cLibName name 'GetSystemTime';
function GetSystemTimeAdjustment(var lpTimeAdjustment, lpTimeIncrement: DWORD; var lpTimeAdjustmentDisabled: BOOL): BOOL; stdcall; external cLibName name 'GetSystemTimeAdjustment';
procedure GetSystemTimeAsFileTime(var lpSystemTimeAsFileTime: TFileTime); stdcall; external cLibName name 'GetSystemTimeAsFileTime';
function GetTapeParameters(hDevice: THandle; dwOperation: DWORD; var lpdwSize: DWORD; lpTapeInformation: Pointer): DWORD; stdcall; external cLibName name 'GetTapeParameters';
function GetTapePosition(hDevice: THandle; dwPositionType: DWORD; var lpdwPartition, lpdwOffsetLow: DWORD; lpdwOffsetHigh: Pointer): DWORD; stdcall; external cLibName name 'GetTapePosition';
function GetTapeStatus(hDevice: THandle): DWORD; stdcall; external cLibName name 'GetTapeStatus';
function GetTempFileName(lpPathName, lpPrefixString: PAnsiChar; uUnique: UINT; lpTempFileName: PAnsiChar): UINT; stdcall; external cLibName name 'GetTempFileNameA';
function GetTempFileNameW(lpPathName, lpPrefixString: PWideChar; uUnique: UINT; lpTempFileName: PWideChar): UINT; stdcall; external cLibName name 'GetTempFileNameW';
function GetTempPath(nBufferLength: DWORD; lpBuffer: PAnsiChar): DWORD; stdcall; external cLibName name 'GetTempPathA';
function GetTempPathW(nBufferLength: DWORD; lpBuffer: PWideChar): DWORD; stdcall; external cLibName name 'GetTempPathW';
function GetThreadContext(hThread: THandle; var lpContext: TContext): BOOL; stdcall; external cLibName name 'GetThreadContext';
function GetThreadLocale: LCID; stdcall; external cLibName name 'GetThreadLocale';
function GetThreadPriority(hThread: THandle): Integer; stdcall; external cLibName name 'GetThreadPriority';
function GetThreadPriorityBoost(hThread: THandle; var DisablePriorityBoost: Bool): BOOL; stdcall; external cLibName name 'GetThreadPriorityBoost';
function GetThreadSelectorEntry(hThread: THandle; dwSelector: DWORD; var lpSelectorEntry: TLDTEntry): BOOL; stdcall; external cLibName name 'GetThreadSelectorEntry';
function GetThreadTimes(hThread: THandle; var lpCreationTime, lpExitTime, lpKernelTime, lpUserTime: TFileTime): BOOL; stdcall; external cLibName name 'GetThreadTimes';
function GetTickCount: DWORD; stdcall; external cLibName name 'GetTickCount';
function GetTimeFormat(Locale: LCID; dwFlags: DWORD; lpTime: PSystemTime; lpFormat: PAnsiChar; lpTimeStr: PAnsiChar; cchTime: Integer): Integer; stdcall; external cLibName name 'GetTimeFormatA';
function GetTimeFormatW(Locale: LCID; dwFlags: DWORD; lpTime: PSystemTime; lpFormat: PWideChar; lpTimeStr: PWideChar; cchTime: Integer): Integer; stdcall; external cLibName name 'GetTimeFormatW';
function GetTimeZoneInformation(var lpTimeZoneInformation: TTimeZoneInformation): DWORD; stdcall; external cLibName name 'GetTimeZoneInformation';
function GetUserDefaultLCID: LCID; stdcall; external cLibName name 'GetUserDefaultLCID';
function GetUserDefaultLangID: LANGID; stdcall; external cLibName name 'GetUserDefaultLangID';
function GetVersion: DWORD; stdcall; external cLibName name 'GetVersion';
function GetVersionEx(var lpVersionInformation: TOSVersionInfoA): BOOL; stdcall; external cLibName name 'GetVersionExA';
function GetVersionExW(var lpVersionInformation: TOSVersionInfoW): BOOL; stdcall; external cLibName name 'GetVersionExW';
function GetVolumeInformation(lpRootPathName: PAnsiChar; lpVolumeNameBuffer: PAnsiChar; nVolumeNameSize: DWORD; lpVolumeSerialNumber: PDWORD; var lpMaximumComponentLength, lpFileSystemFlags: DWORD; lpFileSystemNameBuffer: PAnsiChar; nFileSystemNameSize: DWORD): BOOL; stdcall; external cLibName name 'GetVolumeInformationA';
function GetVolumeInformationW(lpRootPathName: PWideChar; lpVolumeNameBuffer: PWideChar; nVolumeNameSize: DWORD; lpVolumeSerialNumber: PDWORD; var lpMaximumComponentLength, lpFileSystemFlags: DWORD; lpFileSystemNameBuffer: PWideChar; nFileSystemNameSize: DWORD): BOOL; stdcall; external cLibName name 'GetVolumeInformationW';
function GetWindowsDirectory(lpBuffer: PAnsiChar; uSize: UINT): UINT; stdcall; external cLibName name 'GetWindowsDirectoryA';
function GetWindowsDirectoryW(lpBuffer: PWideChar; uSize: UINT): UINT; stdcall; external cLibName name 'GetWindowsDirectoryW';
function GlobalAddAtom(lpString: PAnsiChar): TATOM; stdcall; external cLibName name 'GlobalAddAtomA';
function GlobalAddAtomW(lpString: PWideChar): TATOM; stdcall; external cLibName name 'GlobalAddAtomW';
function GlobalAlloc(uFlags: UINT; dwBytes: DWORD): HGLOBAL; stdcall; external cLibName name 'GlobalAlloc';
function GlobalCompact(dwMinFree: DWORD): UINT; stdcall; external cLibName name 'GlobalCompact';
function GlobalDeleteAtom(nAtom: TATOM): TATOM; stdcall; external cLibName name 'GlobalDeleteAtom';
function GlobalFindAtom(lpString: PAnsiChar): TATOM; stdcall; external cLibName name 'GlobalFindAtomA';
function GlobalFindAtomW(lpString: PWideChar): TATOM; stdcall; external cLibName name 'GlobalFindAtomW';
procedure GlobalFix(hMem: HGLOBAL); stdcall; external cLibName name 'GlobalFix';
function GlobalFlags(hMem: HGLOBAL): UINT; stdcall; external cLibName name 'GlobalFlags';
function GlobalFree(hMem: HGLOBAL): HGLOBAL; stdcall; external cLibName name 'GlobalFree';
function GlobalGetAtomName(nAtom: TATOM; lpBuffer: PAnsiChar; nSize: Integer): UINT; stdcall; external cLibName name 'GlobalGetAtomNameA';
function GlobalGetAtomNameW(nAtom: TATOM; lpBuffer: PWideChar; nSize: Integer): UINT; stdcall; external cLibName name 'GlobalGetAtomNameW';
function GlobalHandle(Mem: Pointer): HGLOBAL; stdcall; external cLibName name 'GlobalHandle';
function GlobalLock(hMem: HGLOBAL): Pointer; stdcall; external cLibName name 'GlobalLock';
procedure GlobalMemoryStatus(var lpBuffer: TMemoryStatus); stdcall; external cLibName name 'GlobalMemoryStatus';
function GlobalReAlloc(hMem: HGLOBAL; dwBytes: DWORD; uFlags: UINT): HGLOBAL; stdcall; external cLibName name 'GlobalReAlloc';
function GlobalSize(hMem: HGLOBAL): DWORD; stdcall; external cLibName name 'GlobalSize';
function GlobalUnWire(hMem: HGLOBAL): BOOL; stdcall; external cLibName name 'GlobalUnWire';
procedure GlobalUnfix(hMem: HGLOBAL); stdcall; external cLibName name 'GlobalUnfix';
function GlobalUnlock(hMem: HGLOBAL): BOOL; stdcall; external cLibName name 'GlobalUnlock';
function GlobalWire(hMem: HGLOBAL): Pointer; stdcall; external cLibName name 'GlobalWire';
function Heap32First(var lphe: THeapEntry32; th32ProcessID, th32HeapID: DWORD): BOOL; stdcall; external cLibName name 'Heap32First';
function Heap32ListFirst(hSnapshot: THandle; var lphl: THeapList32): BOOL; stdcall; external cLibName name 'Heap32ListFirst';
function Heap32ListNext(hSnapshot: THandle; var lphl: THeapList32): BOOL; stdcall; external cLibName name 'Heap32ListNext';
function Heap32Next(var lphe: THeapEntry32): BOOL; stdcall; external cLibName name 'Heap32Next';
function HeapAlloc(hHeap: THandle; dwFlags, dwBytes: DWORD): Pointer; stdcall; external cLibName name 'HeapAlloc';
function HeapCompact(hHeap: THandle; dwFlags: DWORD): UINT; stdcall; external cLibName name 'HeapCompact';
function HeapCreate(flOptions, dwInitialSize, dwMaximumSize: DWORD): THandle; stdcall; external cLibName name 'HeapCreate';
function HeapDestroy(hHeap: THandle): BOOL; stdcall; external cLibName name 'HeapDestroy';
function HeapFree(hHeap: THandle; dwFlags: DWORD; lpMem: Pointer): BOOL; stdcall; external cLibName name 'HeapFree';
function HeapLock(hHeap: THandle): BOOL; stdcall; external cLibName name 'HeapLock';
function HeapReAlloc(hHeap: THandle; dwFlags: DWORD; lpMem: Pointer; dwBytes: DWORD): Pointer; stdcall; external cLibName name 'HeapReAlloc';
function HeapSize(hHeap: THandle; dwFlags: DWORD; lpMem: Pointer): DWORD; stdcall; external cLibName name 'HeapSize';
function HeapUnlock(hHeap: THandle): BOOL; stdcall; external cLibName name 'HeapUnlock';
function HeapValidate(hHeap: THandle; dwFlags: DWORD; lpMem: Pointer): BOOL; stdcall; external cLibName name 'HeapValidate';
function HeapWalk(hHeap: THandle; var lpEntry: TProcessHeapEntry): BOOL; stdcall; external cLibName name 'HeapWalk';
function InitAtomTable(nSize: DWORD): BOOL; stdcall; external cLibName name 'InitAtomTable';
procedure InitializeCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall; external cLibName name 'InitializeCriticalSection';
function InitializeCriticalSectionAndSpinCount(var lpCriticalSection: TRTLCriticalSection; dwSpinCount: DWORD): BOOL; stdcall; external cLibName name 'InitializeCriticalSectionAndSpinCount';
function InterlockedCompareExchange(var Destination: Pointer; Exchange: Pointer; Comperand: Pointer): Pointer; stdcall; external cLibName name 'InterlockedCompareExchange';
function InterlockedDecrement(var Addend: Integer): Integer; stdcall; external cLibName name 'InterlockedDecrement';
function InterlockedExchange(var Target: Integer; Value: Integer): Integer; stdcall; external cLibName name 'InterlockedExchange';
function InterlockedExchangeAdd(Addend: PLongint; Value: Longint): Longint; stdcall; external cLibName name 'InterlockedExchangeAdd';
function InterlockedIncrement(var Addend: Integer): Integer; stdcall; external cLibName name 'InterlockedIncrement';
function IsBadCodePtr(lpfn: Pointer): BOOL; stdcall; external cLibName name 'IsBadCodePtr';
function IsBadHugeReadPtr(lp: Pointer; ucb: UINT): BOOL; stdcall; external cLibName name 'IsBadHugeReadPtr';
function IsBadHugeWritePtr(lp: Pointer; ucb: UINT): BOOL; stdcall; external cLibName name 'IsBadHugeWritePtr';
function IsBadReadPtr(lp: Pointer; ucb: UINT): BOOL; stdcall; external cLibName name 'IsBadReadPtr';
function IsBadStringPtr(lpsz: PAnsiChar; ucchMax: UINT): BOOL; stdcall; external cLibName name 'IsBadStringPtrA';
function IsBadStringPtrW(lpsz: PWideChar; ucchMax: UINT): BOOL; stdcall; external cLibName name 'IsBadStringPtrW';
function IsBadWritePtr(lp: Pointer; ucb: UINT): BOOL; stdcall; external cLibName name 'IsBadWritePtr';
function IsDBCSLeadByte(TestChar: Byte): BOOL; stdcall; external cLibName name 'IsDBCSLeadByte';
function IsDBCSLeadByteEx(CodePage: UINT; TestChar: Byte): BOOL; stdcall; external cLibName name 'IsDBCSLeadByteEx';
function IsProcessorFeaturePresent(ProcessorFeature: DWORD): BOOL; stdcall; external cLibName name 'IsProcessorFeaturePresent';
function IsValidCodePage(CodePage: UINT): BOOL; stdcall; external cLibName name 'IsValidCodePage';
function IsValidLocale(Locale: LCID; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'IsValidLocale';
function LCMapString(Locale: LCID; dwMapFlags: DWORD; lpSrcStr: PAnsiChar; cchSrc: Integer; lpDestStr: PAnsiChar; cchDest: Integer): Integer; stdcall; external cLibName name 'LCMapStringA';
function LCMapStringW(Locale: LCID; dwMapFlags: DWORD; lpSrcStr: PWideChar; cchSrc: Integer; lpDestStr: PWideChar; cchDest: Integer): Integer; stdcall; external cLibName name 'LCMapStringW';
procedure LeaveCriticalSection(var lpCriticalSection: TRTLCriticalSection); stdcall; external cLibName name 'LeaveCriticalSection';
function LoadLibrary(lpLibFileName: PAnsiChar): THModule; stdcall; external cLibName name 'LoadLibraryA';
function LoadLibraryEx(lpLibFileName: PAnsiChar; hFile: THandle; dwFlags: DWORD): THModule; stdcall; external cLibName name 'LoadLibraryExA';
function LoadLibraryExW(lpLibFileName: PWideChar; hFile: THandle; dwFlags: DWORD): THModule; stdcall; external cLibName name 'LoadLibraryExW';
function LoadLibraryW(lpLibFileName: PWideChar): THModule; stdcall; external cLibName name 'LoadLibraryW';
function LoadModule(lpModuleName: LPCSTR; lpParameterBlock: Pointer): DWORD; stdcall; external cLibName name 'LoadModule';
function LoadResource(hModule: THINST; hResInfo: THRSRC): HGLOBAL; stdcall; external cLibName name 'LoadResource';
function LocalAlloc(uFlags, uBytes: UINT): THLOCAL; stdcall; external cLibName name 'LocalAlloc';
function LocalCompact(uMinFree: UINT): UINT; stdcall; external cLibName name 'LocalCompact';
function LocalFileTimeToFileTime(const lpLocalFileTime: TFileTime; var lpFileTime: TFileTime): BOOL; stdcall; external cLibName name 'LocalFileTimeToFileTime';
function LocalFlags(hMem: THLOCAL): UINT; stdcall; external cLibName name 'LocalFlags';
function LocalFree(hMem: THLOCAL): THLOCAL; stdcall; external cLibName name 'LocalFree';
function LocalLock(hMem: THLOCAL): Pointer; stdcall; external cLibName name 'LocalLock';
function LocalReAlloc(hMem: THLOCAL; uBytes, uFlags: UINT): THLOCAL; stdcall; external cLibName name 'LocalReAlloc';
function LocalShrink(hMem: THLOCAL; cbNewSize: UINT): UINT; stdcall; external cLibName name 'LocalShrink';
function LocalSize(hMem: THLOCAL): UINT; stdcall; external cLibName name 'LocalSize';
function LocalUnlock(hMem: THLOCAL): BOOL; stdcall; external cLibName name 'LocalUnlock';
function LockFile(hFile: THandle; dwFileOffsetLow, dwFileOffsetHigh: DWORD; nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh: DWORD): BOOL; stdcall; external cLibName name 'LockFile';
function LockFileEx(hFile: THandle; dwFlags, dwReserved: DWORD; nNumberOfBytesToLockLow, nNumberOfBytesToLockHigh: DWORD; const lpOverlapped: TOverlapped): BOOL; stdcall; external cLibName name 'LockFileEx';
function LockResource(hResData: HGLOBAL): Pointer; stdcall; external cLibName name 'LockResource';
function MapViewOfFile(hFileMappingObject: THandle; dwDesiredAccess: DWORD; dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap: DWORD): Pointer; stdcall; external cLibName name 'MapViewOfFile';
function MapViewOfFileEx(hFileMappingObject: THandle; dwDesiredAccess, dwFileOffsetHigh, dwFileOffsetLow, dwNumberOfBytesToMap: DWORD; lpBaseAddress: Pointer): Pointer; stdcall; external cLibName name 'MapViewOfFileEx';
function Module32First(hSnapshot: THandle; var lpme: TModuleEntry32A): BOOL; stdcall; external cLibName name 'Module32First';
function Module32Next(hSnapshot: THandle; var lpme: TModuleEntry32W): BOOL; stdcall; external cLibName name 'Module32Next';
function MoveFile(lpExistingFileName, lpNewFileName: PAnsiChar): BOOL; stdcall; external cLibName name 'MoveFileA';
function MoveFileEx(lpExistingFileName, lpNewFileName: PAnsiChar; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'MoveFileExA';
function MoveFileExW(lpExistingFileName, lpNewFileName: PWideChar; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'MoveFileExW';
function MoveFileW(lpExistingFileName, lpNewFileName: PWideChar): BOOL; stdcall; external cLibName name 'MoveFileW';
function MoveFileWithProgress(lpExistingFileName, lpNewFileName: PAnsiChar; lpProgressRoutine: TCopyProgressRoutine; lpData: Pointer; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'MoveFileWithProgressA';
function MoveFileWithProgressW(lpExistingFileName, lpNewFileName: PWideChar; lpProgressRoutine: TCopyProgressRoutine; lpData: Pointer; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'MoveFileWithProgressW';
function MulDiv(nNumber, nNumerator, nDenominator: Integer): Integer; stdcall; external cLibName name 'MulDiv';
function MultiByteToWideChar(CodePage: UINT; dwFlags: DWORD; const lpMultiByteStr: LPCSTR; cchMultiByte: Integer; lpWideCharStr: LPWSTR; cchWideChar: Integer): Integer; stdcall; external cLibName name 'MultiByteToWideChar';
function OpenEvent(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PAnsiChar): THandle; stdcall; external cLibName name 'OpenEventA';
function OpenEventW(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PWideChar): THandle; stdcall; external cLibName name 'OpenEventW';
function OpenFile(const lpFileName: LPCSTR; var lpReOpenBuff: TOFStruct; uStyle: UINT): THFILE; stdcall; external cLibName name 'OpenFile';
function OpenFileMapping(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PAnsiChar): THandle; stdcall; external cLibName name 'OpenFileMappingA';
function OpenFileMappingW(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PWideChar): THandle; stdcall; external cLibName name 'OpenFileMappingW';
function OpenMutex(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PAnsiChar): THandle; stdcall; external cLibName name 'OpenMutexA';
function OpenMutexW(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PWideChar): THandle; stdcall; external cLibName name 'OpenMutexW';
function OpenProcess(dwDesiredAccess: DWORD; bInheritHandle: BOOL; dwProcessId: DWORD): THandle; stdcall; external cLibName name 'OpenProcess';
function OpenSemaphore(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PAnsiChar): THandle; stdcall; external cLibName name 'OpenSemaphoreA';
function OpenSemaphoreW(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpName: PWideChar): THandle; stdcall; external cLibName name 'OpenSemaphoreW';
function OpenWaitableTimer(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpTimerName: PAnsiChar): THandle; stdcall; external cLibName name 'OpenWaitableTimerA';
function OpenWaitableTimerW(dwDesiredAccess: DWORD; bInheritHandle: BOOL; lpTimerName: PWideChar): THandle; stdcall; external cLibName name 'OpenWaitableTimerW';
procedure OutputDebugString(lpOutputString: PAnsiChar); stdcall; external cLibName name 'OutputDebugStringA';
procedure OutputDebugStringW(lpOutputString: PWideChar); stdcall; external cLibName name 'OutputDebugStringW';
function PeekConsoleInput(hConsoleInput: THandle; var lpBuffer: TInputRecord; nLength: DWORD; var lpNumberOfEventsRead: DWORD): BOOL; stdcall; external cLibName name 'PeekConsoleInputA';
function PeekConsoleInputW(hConsoleInput: THandle; var lpBuffer: TInputRecord; nLength: DWORD; var lpNumberOfEventsRead: DWORD): BOOL; stdcall; external cLibName name 'PeekConsoleInputW';
function PeekNamedPipe(hNamedPipe: THandle; lpBuffer: Pointer; nBufferSize: DWORD; lpBytesRead, lpTotalBytesAvail, lpBytesLeftThisMessage: Pointer): BOOL; stdcall; external cLibName name 'PeekNamedPipe';
function PostQueuedCompletionStatus(CompletionPort: THandle; dwNumberOfBytesTransferred: DWORD; dwCompletionKey: DWORD; lpOverlapped: POverlapped): BOOL; stdcall; external cLibName name 'PostQueuedCompletionStatus';
function PrepareTape(hDevice: THandle; dwOperation: DWORD; bImmediate: BOOL): DWORD; stdcall; external cLibName name 'PrepareTape';
function Process32First(hSnapshot: THandle; var lppe: TProcessEntry32W): BOOL; stdcall; external cLibName name 'Process32First';
function Process32Next(hSnapshot: THandle; var lppe: TProcessEntry32W): BOOL; stdcall; external cLibName name 'Process32Next';
function PulseEvent(hEvent: THandle): BOOL; stdcall; external cLibName name 'PulseEvent';
function PurgeComm(hFile: THandle; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'PurgeComm';
function QueryDosDevice(lpDeviceName: PAnsiChar; lpTargetPath: PAnsiChar; ucchMax: DWORD): DWORD; stdcall; external cLibName name 'QueryDosDeviceA';
function QueryDosDeviceW(lpDeviceName: PWideChar; lpTargetPath: PWideChar; ucchMax: DWORD): DWORD; stdcall; external cLibName name 'QueryDosDeviceW';
function QueryPerformanceCounter(var lpPerformanceCount: TLargeInteger): BOOL; stdcall; external cLibName name 'QueryPerformanceCounter';
function QueryPerformanceFrequency(var lpFrequency: TLargeInteger): BOOL; stdcall; external cLibName name 'QueryPerformanceFrequency';
function QueueUserAPC(pfnAPC: TAPCProc; hThread: THandle; dwData: DWORD): BOOL; stdcall; external cLibName name 'QueueUserAPC';
procedure RaiseException(dwExceptionCode, dwExceptionFlags, nNumberOfArguments: DWORD; lpArguments: PDWORD); stdcall; external cLibName name 'RaiseException';
function ReadConsole(hConsoleInput: THandle; lpBuffer: Pointer; nNumberOfCharsToRead: DWORD; var lpNumberOfCharsRead: DWORD; lpReserved: Pointer): BOOL; stdcall; external cLibName name 'ReadConsoleA';
function ReadConsoleInput(hConsoleInput: THandle; var lpBuffer: TInputRecord; nLength: DWORD; var lpNumberOfEventsRead: DWORD): BOOL; stdcall; external cLibName name 'ReadConsoleInputA';
function ReadConsoleInputW(hConsoleInput: THandle; var lpBuffer: TInputRecord; nLength: DWORD; var lpNumberOfEventsRead: DWORD): BOOL; stdcall; external cLibName name 'ReadConsoleInputW';
function ReadConsoleOutput(hConsoleOutput: THandle; lpBuffer: Pointer; dwBufferSize, dwBufferCoord: TCoord; var lpReadRegion: TSmallRect): BOOL; stdcall; external cLibName name 'ReadConsoleOutputA';
function ReadConsoleOutputAttribute(hConsoleOutput: THandle; lpAttribute: Pointer; nLength: DWORD; dwReadCoord: TCoord; var lpNumberOfAttrsRead: DWORD): BOOL; stdcall; external cLibName name 'ReadConsoleOutputAttribute';
function ReadConsoleOutputCharacter(hConsoleOutput: THandle; lpCharacter: PAnsiChar; nLength: DWORD; dwReadCoord: TCoord; var lpNumberOfCharsRead: DWORD): BOOL; stdcall; external cLibName name 'ReadConsoleOutputCharacterA';
function ReadConsoleOutputCharacterW(hConsoleOutput: THandle; lpCharacter: PAnsiChar; nLength: DWORD; dwReadCoord: TCoord; var lpNumberOfCharsRead: DWORD): BOOL; stdcall; external cLibName name 'ReadConsoleOutputCharacterW';
function ReadConsoleOutputW(hConsoleOutput: THandle; lpBuffer: Pointer; dwBufferSize, dwBufferCoord: TCoord; var lpReadRegion: TSmallRect): BOOL; stdcall; external cLibName name 'ReadConsoleOutputW';
function ReadConsoleW(hConsoleInput: THandle; lpBuffer: Pointer; nNumberOfCharsToRead: DWORD; var lpNumberOfCharsRead: DWORD; lpReserved: Pointer): BOOL; stdcall; external cLibName name 'ReadConsoleW';
function ReadDirectoryChangesW(hDirectory: THandle; lpBuffer: Pointer; nBufferLength: DWORD; bWatchSubtree: Bool; dwNotifyFilter: DWORD; lpBytesReturned: LPDWORD; lpOverlapped: POverlapped; lpCompletionRoutine: pointer): BOOL; stdcall; external cLibName name 'ReadDirectoryChangesW';
function ReadFile(hFile: THandle; var Buffer; nNumberOfBytesToRead: DWORD; var lpNumberOfBytesRead: DWORD; lpOverlapped: POverlapped): BOOL; stdcall; external cLibName name 'ReadFile';
function ReadFileEx(hFile: THandle; lpBuffer: Pointer; nNumberOfBytesToRead: DWORD; lpOverlapped: POverlapped; lpCompletionRoutine: TFileIOCompletionRoutine): BOOL; stdcall; external cLibName name 'ReadFileEx';
function ReadProcessMemory(hProcess: THandle; const lpBaseAddress: Pointer; lpBuffer: Pointer; nSize: DWORD; var lpNumberOfBytesRead: DWORD): BOOL; stdcall; external cLibName name 'ReadProcessMemory';
function ReleaseMutex(hMutex: THandle): BOOL; stdcall; external cLibName name 'ReleaseMutex';
function ReleaseSemaphore(hSemaphore: THandle; lReleaseCount: Longint; lpPreviousCount: Pointer): BOOL; stdcall; external cLibName name 'ReleaseSemaphore';
function RemoveDirectory(lpPathName: PAnsiChar): BOOL; stdcall; external cLibName name 'RemoveDirectoryA';
function RemoveDirectoryW(lpPathName: PWideChar): BOOL; stdcall; external cLibName name 'RemoveDirectoryW';
function ResetEvent(hEvent: THandle): BOOL; stdcall; external cLibName name 'ResetEvent';
function ResumeThread(hThread: THandle): DWORD; stdcall; external cLibName name 'ResumeThread';
function ScrollConsoleScreenBuffer(hConsoleOutput: THandle; const lpScrollRectangle: TSmallRect; lpClipRectangle: PSmallRect; dwDestinationOrigin: TCoord; var lpFill: TCharInfo): BOOL; stdcall; external cLibName name 'ScrollConsoleScreenBufferA';
function ScrollConsoleScreenBufferW(hConsoleOutput: THandle; const lpScrollRectangle: TSmallRect; lpClipRectangle: PSmallRect; dwDestinationOrigin: TCoord; var lpFill: TCharInfo): BOOL; stdcall; external cLibName name 'ScrollConsoleScreenBufferW';
function SearchPath(lpPath, lpFileName, lpExtension: PAnsiChar; nBufferLength: DWORD; lpBuffer: PAnsiChar; var lpFilePart: PAnsiChar): DWORD; stdcall; external cLibName name 'SearchPathA';
function SearchPathW(lpPath, lpFileName, lpExtension: PWideChar; nBufferLength: DWORD; lpBuffer: PWideChar; var lpFilePart: PWideChar): DWORD; stdcall; external cLibName name 'SearchPathW';
function SetCommBreak(hFile: THandle): BOOL; stdcall; external cLibName name 'SetCommBreak';
function SetCommConfig(hCommDev: THandle; const lpCC: TCommConfig; dwSize: DWORD): BOOL; stdcall; external cLibName name 'SetCommConfig';
function SetCommMask(hFile: THandle; dwEvtMask: DWORD): BOOL; stdcall; external cLibName name 'SetCommMask';
function SetCommState(hFile: THandle; const lpDCB: TDCB): BOOL; stdcall; external cLibName name 'SetCommState';
function SetCommTimeouts(hFile: THandle; const lpCommTimeouts: TCommTimeouts): BOOL; stdcall; external cLibName name 'SetCommTimeouts';
function SetComputerName(lpComputerName: PAnsiChar): BOOL; stdcall; external cLibName name 'SetComputerNameA';
function SetComputerNameW(lpComputerName: PWideChar): BOOL; stdcall; external cLibName name 'SetComputerNameW';
function SetConsoleActiveScreenBuffer(hConsoleOutput: THandle): BOOL; stdcall; external cLibName name 'SetConsoleActiveScreenBuffer';
function SetConsoleCP(wCodePageID: UINT): BOOL; stdcall; external cLibName name 'SetConsoleCP';
function SetConsoleCtrlHandler(HandlerRoutine: THandlerRoutine; Add: BOOL): BOOL; stdcall; external cLibName name 'SetConsoleCtrlHandler';
function SetConsoleCursorInfo(hConsoleOutput: THandle; const lpConsoleCursorInfo: TConsoleCursorInfo): BOOL; stdcall; external cLibName name 'SetConsoleCursorInfo';
function SetConsoleCursorPosition(hConsoleOutput: THandle; dwCursorPosition: TCoord): BOOL; stdcall; external cLibName name 'SetConsoleCursorPosition';
function SetConsoleMode(hConsoleHandle: THandle; dwMode: DWORD): BOOL; stdcall; external cLibName name 'SetConsoleMode';
function SetConsoleOutputCP(wCodePageID: UINT): BOOL; stdcall; external cLibName name 'SetConsoleOutputCP';
function SetConsoleScreenBufferSize(hConsoleOutput: THandle; dwSize: TCoord): BOOL; stdcall; external cLibName name 'SetConsoleScreenBufferSize';
function SetConsoleTextAttribute(hConsoleOutput: THandle; wAttributes: Word): BOOL; stdcall; external cLibName name 'SetConsoleTextAttribute';
function SetConsoleTitle(lpConsoleTitle: PAnsiChar): BOOL; stdcall; external cLibName name 'SetConsoleTitleA';
function SetConsoleTitleW(lpConsoleTitle: PWideChar): BOOL; stdcall; external cLibName name 'SetConsoleTitleW';
function SetConsoleWindowInfo(hConsoleOutput: THandle; bAbsolute: BOOL; const lpConsoleWindow: TSmallRect): BOOL; stdcall; external cLibName name 'SetConsoleWindowInfo';
function SetCriticalSectionSpinCount(var lpCriticalSection: TRTLCriticalSection; dwSpinCount: DWORD): DWORD; stdcall; external cLibName name 'SetCriticalSectionSpinCount';
function SetCurrentDirectory(lpPathName: PAnsiChar): BOOL; stdcall; external cLibName name 'SetCurrentDirectoryA';
function SetCurrentDirectoryW(lpPathName: PWideChar): BOOL; stdcall; external cLibName name 'SetCurrentDirectoryW';
function SetDefaultCommConfig(lpszName: PAnsiChar; lpCC: PCommConfigA; dwSize: DWORD): BOOL; stdcall; external cLibName name 'SetDefaultCommConfigA';
function SetDefaultCommConfigW(lpszName: PWideChar; lpCC: PCommConfigW; dwSize: DWORD): BOOL; stdcall; external cLibName name 'SetDefaultCommConfigW';
function SetEndOfFile(hFile: THandle): BOOL; stdcall; external cLibName name 'SetEndOfFile';
function SetEnvironmentVariable(lpName, lpValue: PAnsiChar): BOOL; stdcall; external cLibName name 'SetEnvironmentVariableA';
function SetEnvironmentVariableW(lpName, lpValue: PWideChar): BOOL; stdcall; external cLibName name 'SetEnvironmentVariableW';
function SetErrorMode(uMode: UINT): UINT; stdcall; external cLibName name 'SetErrorMode';
function SetEvent(hEvent: THandle): BOOL; stdcall; external cLibName name 'SetEvent';
procedure SetFileApisToANSI; stdcall; external cLibName name 'SetFileApisToANSI';
procedure SetFileApisToOEM; stdcall; external cLibName name 'SetFileApisToOEM';
function SetFileAttributes(lpFileName: PAnsiChar; dwFileAttributes: DWORD): BOOL; stdcall; external cLibName name 'SetFileAttributesA';
function SetFileAttributesW(lpFileName: PWideChar; dwFileAttributes: DWORD): BOOL; stdcall; external cLibName name 'SetFileAttributesW';
function SetFilePointer(hFile: THandle; lDistanceToMove: Longint; lpDistanceToMoveHigh: Pointer; dwMoveMethod: DWORD): DWORD; stdcall; external cLibName name 'SetFilePointer';
function SetFileTime(hFile: THandle; lpCreationTime, lpLastAccessTime, lpLastWriteTime: PFileTime): BOOL; stdcall; external cLibName name 'SetFileTime';
function SetHandleCount(uNumber: UINT): UINT; stdcall; external cLibName name 'SetHandleCount';
function SetHandleInformation(hObject: THandle; dwMask: DWORD; dwFlags: DWORD): BOOL; stdcall; external cLibName name 'SetHandleInformation';
procedure SetLastError(dwErrCode: DWORD); stdcall; external cLibName name 'SetLastError';
function SetLocalTime(const lpSystemTime: TSystemTime): BOOL; stdcall; external cLibName name 'SetLocalTime';
function SetLocaleInfo(Locale: LCID; LCType: LCTYPE; lpLCData: PAnsiChar): BOOL; stdcall; external cLibName name 'SetLocaleInfoA';
function SetLocaleInfoW(Locale: LCID; LCType: LCTYPE; lpLCData: PWideChar): BOOL; stdcall; external cLibName name 'SetLocaleInfoW';
function SetMailslotInfo(hMailslot: THandle; lReadTimeout: DWORD): BOOL; stdcall; external cLibName name 'SetMailslotInfo';
function SetNamedPipeHandleState(hNamedPipe: THandle; var lpMode: DWORD; lpMaxCollectionCount, lpCollectDataTimeout: Pointer): BOOL; stdcall; external cLibName name 'SetNamedPipeHandleState';
function SetPriorityClass(hProcess: THandle; dwPriorityClass: DWORD): BOOL; stdcall; external cLibName name 'SetPriorityClass';
function SetProcessAffinityMask(hProcess: THandle; dwProcessAffinityMask: DWORD): BOOL; stdcall; external cLibName name 'SetProcessAffinityMask';
function SetProcessPriorityBoost(hThread: THandle; DisablePriorityBoost: Bool): BOOL; stdcall; external cLibName name 'SetProcessPriorityBoost';
function SetProcessShutdownParameters(dwLevel, dwFlags: DWORD): BOOL; stdcall; external cLibName name 'SetProcessShutdownParameters';
function SetProcessWorkingSetSize(hProcess: THandle; dwMinimumWorkingSetSize, dwMaximumWorkingSetSize: DWORD): BOOL; stdcall; external cLibName name 'SetProcessWorkingSetSize';
function SetStdHandle(nStdHandle: DWORD; hHandle: THandle): BOOL; stdcall; external cLibName name 'SetStdHandle';
function SetSystemPowerState(fSuspend, fForce: BOOL): BOOL; stdcall; external cLibName name 'SetSystemPowerState';
function SetSystemTime(const lpSystemTime: TSystemTime): BOOL; stdcall; external cLibName name 'SetSystemTime';
function SetSystemTimeAdjustment(dwTimeAdjustment: DWORD; bTimeAdjustmentDisabled: BOOL): BOOL; stdcall; external cLibName name 'SetSystemTimeAdjustment';
function SetTapeParameters(hDevice: THandle; dwOperation: DWORD; lpTapeInformation: Pointer): DWORD; stdcall; external cLibName name 'SetTapeParameters';
function SetTapePosition(hDevice: THandle; dwPositionMethod, dwPartition: DWORD; dwOffsetLow, dwOffsetHigh: DWORD; bImmediate: BOOL): DWORD; stdcall; external cLibName name 'SetTapePosition';
function SetThreadAffinityMask(hThread: THandle; dwThreadAffinityMask: DWORD): DWORD; stdcall; external cLibName name 'SetThreadAffinityMask';
function SetThreadContext(hThread: THandle; const lpContext: TContext): BOOL; stdcall; external cLibName name 'SetThreadContext';
function SetThreadIdealProcessor(hThread: THandle; dwIdealProcessor: DWORD): BOOL; stdcall; external cLibName name 'SetThreadIdealProcessor';
function SetThreadLocale(Locale: LCID): BOOL; stdcall; external cLibName name 'SetThreadLocale';
function SetThreadPriority(hThread: THandle; nPriority: Integer): BOOL; stdcall; external cLibName name 'SetThreadPriority';
function SetThreadPriorityBoost(hThread: THandle; DisablePriorityBoost: Bool): BOOL; stdcall; external cLibName name 'SetThreadPriorityBoost';
function SetTimeZoneInformation(const lpTimeZoneInformation: TTimeZoneInformation): BOOL; stdcall; external cLibName name 'SetTimeZoneInformation';
function SetUnhandledExceptionFilter(lpTopLevelExceptionFilter: TUnhandledExceptionFilter): TUnhandledExceptionFilter; stdcall; external cLibName name 'SetUnhandledExceptionFilter';
function SetVolumeLabel(lpRootPathName: PAnsiChar; lpVolumeName: PAnsiChar): BOOL; stdcall; external cLibName name 'SetVolumeLabelA';
function SetVolumeLabelW(lpRootPathName: PWideChar; lpVolumeName: PAnsiChar): BOOL; stdcall; external cLibName name 'SetVolumeLabelW';
function SetWaitableTimer(hTimer: THandle; var lpDueTime: TLargeInteger; lPeriod: Longint; pfnCompletionRoutine: TimerAPCProc; lpArgToCompletionRoutine: Pointer; fResume: BOOL): BOOL; stdcall; external cLibName name 'SetWaitableTimer';
function SetupComm(hFile: THandle; dwInQueue, dwOutQueue: DWORD): BOOL; stdcall; external cLibName name 'SetupComm';
function SignalObjectAndWait(hObjectToSignal: THandle; hObjectToWaitOn: THandle; dwMilliseconds: DWORD; bAlertable: BOOL): BOOL; stdcall; external cLibName name 'SignalObjectAndWait';
function SizeofResource(hModule: THINST; hResInfo: THRSRC): DWORD; stdcall; external cLibName name 'SizeofResource';
procedure Sleep(dwMilliseconds: DWORD); stdcall; external cLibName name 'Sleep';
function SleepEx(dwMilliseconds: DWORD; bAlertable: BOOL): DWORD; stdcall; external cLibName name 'SleepEx';
function SuspendThread(hThread: THandle): DWORD; stdcall; external cLibName name 'SuspendThread';
function SwitchToFiber(lpFiber: Pointer): BOOL; stdcall; external cLibName name 'SwitchToFiber';
function SwitchToThread: BOOL; stdcall; external cLibName name 'SwitchToThread';
function SystemTimeToFileTime(const lpSystemTime: TSystemTime; var lpFileTime: TFileTime): BOOL; stdcall; external cLibName name 'SystemTimeToFileTime';
function SystemTimeToTzSpecificLocalTime(lpTimeZoneInformation: PTimeZoneInformation; var lpUniversalTime, lpLocalTime: TSystemTime): BOOL; stdcall; external cLibName name 'SystemTimeToTzSpecificLocalTime';
function TerminateProcess(hProcess: THandle; uExitCode: UINT): BOOL; stdcall; external cLibName name 'TerminateProcess';
function TerminateThread(hThread: THandle; dwExitCode: DWORD): BOOL; stdcall; external cLibName name 'TerminateThread';
function Thread32First(hSnapshot: THandle; var lpte: TThreadEntry32): BOOL; stdcall; external cLibName name 'Thread32First';
function Thread32Next(hSnapshot: THandle; var lpte: TThreadENtry32): BOOL; stdcall; external cLibName name 'Thread32Next';
function TlsAlloc: DWORD; stdcall; external cLibName name 'TlsAlloc';
function TlsFree(dwTlsIndex: DWORD): BOOL; stdcall; external cLibName name 'TlsFree';
function TlsGetValue(dwTlsIndex: DWORD): Pointer; stdcall; external cLibName name 'TlsGetValue';
function TlsSetValue(dwTlsIndex: DWORD; lpTlsValue: Pointer): BOOL; stdcall; external cLibName name 'TlsSetValue';
function Toolhelp32ReadProcessMemory(th32ProcessID: DWORD; lpBaseAddress: Pointer; var lpBuffer; cbRead: DWORD; var lpNumberOfBytesRead: DWORD): BOOL; stdcall; external cLibName name 'Toolhelp32ReadProcessMemory';
function TransactNamedPipe(hNamedPipe: THandle; lpInBuffer: Pointer; nInBufferSize: DWORD; lpOutBuffer: Pointer; nOutBufferSize: DWORD; var lpBytesRead: DWORD; lpOverlapped: POverlapped): BOOL; stdcall; external cLibName name 'TransactNamedPipe';
function TransmitCommChar(hFile: THandle; cChar: char): BOOL; stdcall; external cLibName name 'TransmitCommChar';
function TryEnterCriticalSection(var lpCriticalSection: TRTLCriticalSection): BOOL; stdcall; external cLibName name 'TryEnterCriticalSection';
function UnhandledExceptionFilter(const ExceptionInfo: TExceptionPointers): Longint; stdcall; external cLibName name 'UnhandledExceptionFilter';
function UnlockFile(hFile: THandle; dwFileOffsetLow, dwFileOffsetHigh: DWORD; nNumberOfBytesToUnlockLow, nNumberOfBytesToUnlockHigh: DWORD): BOOL; stdcall; external cLibName name 'UnlockFile';
function UnlockFileEx(hFile: THandle; dwReserved, nNumberOfBytesToUnlockLow: DWORD; nNumberOfBytesToUnlockHigh: DWORD; const lpOverlapped: TOverlapped): BOOL; stdcall; external cLibName name 'UnlockFileEx';
function UnmapViewOfFile(lpBaseAddress: Pointer): BOOL; stdcall; external cLibName name 'UnmapViewOfFile';
function UpdateResource(hUpdate: THandle; lpType, lpName: PAnsiChar; wLanguage: Word; lpData: Pointer; cbData: DWORD): BOOL; stdcall; external cLibName name 'UpdateResourceA';
function UpdateResourceW(hUpdate: THandle; lpType, lpName: PWideChar; wLanguage: Word; lpData: Pointer; cbData: DWORD): BOOL; stdcall; external cLibName name 'UpdateResourceW';
function VerLanguageName(wLang: DWORD; szLang: PAnsiChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'VerLanguageNameA';
function VerLanguageNameW(wLang: DWORD; szLang: PWideChar; nSize: DWORD): DWORD; stdcall; external cLibName name 'VerLanguageNameW';
function VirtualAlloc(lpvAddress: Pointer; dwSize, flAllocationType, flProtect: DWORD): Pointer; stdcall; external cLibName name 'VirtualAlloc';
function VirtualAllocEx(hProcess: THandle; lpAddress: Pointer; dwSize, flAllocationType: DWORD; flProtect: DWORD): Pointer; stdcall; external cLibName name 'VirtualAllocEx';
function VirtualFree(lpAddress: Pointer; dwSize, dwFreeType: DWORD): BOOL; stdcall; external cLibName name 'VirtualFree';
function VirtualFreeEx(hProcess: THandle; lpAddress: Pointer; dwSize, dwFreeType: DWORD): Pointer; stdcall; external cLibName name 'VirtualFreeEx';
function VirtualLock(lpAddress: Pointer; dwSize: DWORD): BOOL; stdcall; external cLibName name 'VirtualLock';
function VirtualProtect(lpAddress: Pointer; dwSize, flNewProtect: DWORD; lpflOldProtect: Pointer): BOOL; stdcall; external cLibName name 'VirtualProtect';
function VirtualProtectEx(hProcess: THandle; lpAddress: Pointer; dwSize, flNewProtect: DWORD; lpflOldProtect: Pointer): BOOL; stdcall; external cLibName name 'VirtualProtectEx';
function VirtualQuery(lpAddress: Pointer; var lpBuffer: TMemoryBasicInformation; dwLength: DWORD): DWORD; stdcall; external cLibName name 'VirtualQuery';
function VirtualQueryEx(hProcess: THandle; lpAddress: Pointer; var lpBuffer: TMemoryBasicInformation; dwLength: DWORD): DWORD; stdcall; external cLibName name 'VirtualQueryEx';
function VirtualUnlock(lpAddress: Pointer; dwSize: DWORD): BOOL; stdcall; external cLibName name 'VirtualUnlock';
function WaitCommEvent(hFile: THandle; var lpEvtMask: DWORD; lpOverlapped: POverlapped): BOOL; stdcall; external cLibName name 'WaitCommEvent';
function WaitForDebugEvent(var lpDebugEvent: TDebugEvent; dwMilliseconds: DWORD): BOOL; stdcall; external cLibName name 'WaitForDebugEvent';
function WaitForMultipleObjects(nCount: DWORD; lpHandles: PHandleArray; bWaitAll: BOOL; dwMilliseconds: DWORD): DWORD; stdcall; external cLibName name 'WaitForMultipleObjects';
function WaitForMultipleObjectsEx(nCount: DWORD; lpHandles: PHandleArray; bWaitAll: BOOL; dwMilliseconds: DWORD; bAlertable: BOOL): DWORD; stdcall; external cLibName name 'WaitForMultipleObjectsEx';
function WaitForSingleObject(hHandle: THandle; dwMilliseconds: DWORD): DWORD; stdcall; external cLibName name 'WaitForSingleObject';
function WaitForSingleObjectEx(hHandle: THandle; dwMilliseconds: DWORD; bAlertable: BOOL): DWORD; stdcall; external cLibName name 'WaitForSingleObjectEx';
function WaitNamedPipe(lpNamedPipeName: PAnsiChar; nTimeOut: DWORD): BOOL; stdcall; external cLibName name 'WaitNamedPipeA';
function WaitNamedPipeW(lpNamedPipeName: PWideChar; nTimeOut: DWORD): BOOL; stdcall; external cLibName name 'WaitNamedPipeW';
function WideCharToMultiByte(CodePage: UINT; dwFlags: DWORD; lpWideCharStr: LPWSTR; cchWideChar: Integer; lpMultiByteStr: LPSTR; cchMultiByte: Integer; lpDefaultChar: LPCSTR; lpUsedDefaultChar: PBOOL): Integer; stdcall; external cLibName name 'WideCharToMultiByte';
function WinExec(lpCmdLine: LPCSTR; uCmdShow: UINT): UINT; stdcall; external cLibName name 'WinExec';
function WriteConsole(hConsoleOutput: THandle; const lpBuffer: Pointer; nNumberOfCharsToWrite: DWORD; var lpNumberOfCharsWritten: DWORD; lpReserved: Pointer): BOOL; stdcall; external cLibName name 'WriteConsoleA';
function WriteConsoleInput(hConsoleInput: THandle; const lpBuffer: TInputRecord; nLength: DWORD; var lpNumberOfEventsWritten: DWORD): BOOL; stdcall; external cLibName name 'WriteConsoleInputA';
function WriteConsoleInputW(hConsoleInput: THandle; const lpBuffer: TInputRecord; nLength: DWORD; var lpNumberOfEventsWritten: DWORD): BOOL; stdcall; external cLibName name 'WriteConsoleInputW';
function WriteConsoleOutput(hConsoleOutput: THandle; lpBuffer: Pointer; dwBufferSize, dwBufferCoord: TCoord; var lpWriteRegion: TSmallRect): BOOL; stdcall; external cLibName name 'WriteConsoleOutputA';
function WriteConsoleOutputAttribute(hConsoleOutput: THandle; lpAttribute: Pointer; nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfAttrsWritten: DWORD): BOOL; stdcall; external cLibName name 'WriteConsoleOutputAttribute';
function WriteConsoleOutputCharacter(hConsoleOutput: THandle; lpCharacter: PAnsiChar; nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfCharsWritten: DWORD): BOOL; stdcall; external cLibName name 'WriteConsoleOutputCharacterA';
function WriteConsoleOutputCharacterW(hConsoleOutput: THandle; lpCharacter: PWideChar; nLength: DWORD; dwWriteCoord: TCoord; var lpNumberOfCharsWritten: DWORD): BOOL; stdcall; external cLibName name 'WriteConsoleOutputCharacterW';
function WriteConsoleOutputW(hConsoleOutput: THandle; lpBuffer: Pointer; dwBufferSize, dwBufferCoord: TCoord; var lpWriteRegion: TSmallRect): BOOL; stdcall; external cLibName name 'WriteConsoleOutputW';
function WriteConsoleW(hConsoleOutput: THandle; const lpBuffer: Pointer; nNumberOfCharsToWrite: DWORD; var lpNumberOfCharsWritten: DWORD; lpReserved: Pointer): BOOL; stdcall; external cLibName name 'WriteConsoleW';
function WriteFile(hFile: THandle; const Buffer; nNumberOfBytesToWrite: DWORD; var lpNumberOfBytesWritten: DWORD; lpOverlapped: POverlapped): BOOL; stdcall; external cLibName name 'WriteFile';
function WriteFileEx(hFile: THandle; lpBuffer: Pointer; nNumberOfBytesToWrite: DWORD; const lpOverlapped: TOverlapped; lpCompletionRoutine: pointer): BOOL; stdcall; external cLibName name 'WriteFileEx';
function WritePrivateProfileSection(lpAppName, lpString, lpFileName: PAnsiChar): BOOL; stdcall; external cLibName name 'WritePrivateProfileSectionA';
function WritePrivateProfileSectionW(lpAppName, lpString, lpFileName: PWideChar): BOOL; stdcall; external cLibName name 'WritePrivateProfileSectionW';
function WritePrivateProfileString(lpAppName, lpKeyName, lpString, lpFileName: PAnsiChar): BOOL; stdcall; external cLibName name 'WritePrivateProfileStringA';
function WritePrivateProfileStringW(lpAppName, lpKeyName, lpString, lpFileName: PWideChar): BOOL; stdcall; external cLibName name 'WritePrivateProfileStringW';
function WritePrivateProfileStruct(lpszSection, lpszKey: PAnsiChar; lpStruct: Pointer; uSizeStruct: UINT; szFile: PAnsiChar): BOOL; stdcall; external cLibName name 'WritePrivateProfileStructA';
function WritePrivateProfileStructW(lpszSection, lpszKey: PWideChar; lpStruct: Pointer; uSizeStruct: UINT; szFile: PWideChar): BOOL; stdcall; external cLibName name 'WritePrivateProfileStructW';
function WriteProcessMemory(hProcess: THandle; const lpBaseAddress: Pointer; lpBuffer: Pointer; nSize: DWORD; var lpNumberOfBytesWritten: DWORD): BOOL; stdcall; external cLibName name 'WriteProcessMemory';
function WriteProfileSection(lpAppName, lpString: PAnsiChar): BOOL; stdcall; external cLibName name 'WriteProfileSectionA';
function WriteProfileSectionW(lpAppName, lpString: PWideChar): BOOL; stdcall; external cLibName name 'WriteProfileSectionW';
function WriteProfileString(lpAppName, lpKeyName, lpString: PAnsiChar): BOOL; stdcall; external cLibName name 'WriteProfileStringA';
function WriteProfileStringW(lpAppName, lpKeyName, lpString: PWideChar): BOOL; stdcall; external cLibName name 'WriteProfileStringW';
function WriteTapemark(hDevice: THandle; dwTapemarkType, dwTapemarkCount: DWORD; bImmediate: BOOL): DWORD; stdcall; external cLibName name 'WriteTapemark';
function _hread(hFile: THFILE; lpBuffer: Pointer; lBytes: Longint): Longint; stdcall; external cLibName name '_hread';
function _hwrite(hFile: THFILE; lpBuffer: LPCSTR; lBytes: Longint): Longint; stdcall; external cLibName name '_hwrite';
function _lclose(hFile: THFILE): THFILE; stdcall; external cLibName name '_lclose';
function _lcreat(const lpPathName: LPCSTR; iAttribute: Integer): THFILE; stdcall; external cLibName name '_lcreat';
function _llseek(hFile: THFILE; lOffset: Longint; iOrigin: Integer): Longint; stdcall; external cLibName name '_llseek';
function _lopen(const lpPathName: LPCSTR; iReadWrite: Integer): THFILE; stdcall; external cLibName name '_lopen';
function _lread(hFile: THFILE; lpBuffer: Pointer; uBytes: UINT): UINT; stdcall; external cLibName name '_lread';
function _lwrite(hFile: THFILE; const lpBuffer: LPCSTR; uBytes: UINT): UINT; stdcall; external cLibName name '_lwrite';
function lstrcat(lpString1, lpString2: PAnsiChar): PAnsiChar; stdcall; external cLibName name 'lstrcatA';
function lstrcatW(lpString1, lpString2: PWideChar): PWideChar; stdcall; external cLibName name 'lstrcatW';
function lstrcmp(lpString1, lpString2: PAnsiChar): Integer; stdcall; external cLibName name 'lstrcmpA';
function lstrcmpW(lpString1, lpString2: PWideChar): Integer; stdcall; external cLibName name 'lstrcmpW';
function lstrcmpi(lpString1, lpString2: PAnsiChar): Integer; stdcall; external cLibName name 'lstrcmpiA';
function lstrcmpiW(lpString1, lpString2: PWideChar): Integer; stdcall; external cLibName name 'lstrcmpiW';
function lstrcpy(lpString1, lpString2: PAnsiChar): PAnsiChar; stdcall; external cLibName name 'lstrcpyA';
function lstrcpyW(lpString1, lpString2: PWideChar): PWideChar; stdcall; external cLibName name 'lstrcpyW';
function lstrcpyn(lpString1, lpString2: PAnsiChar; iMaxLength: Integer): PAnsiChar; stdcall; external cLibName name 'lstrcpynA';
function lstrcpynW(lpString1, lpString2: PWideChar; iMaxLength: Integer): PWideChar; stdcall; external cLibName name 'lstrcpynW';
function lstrlen(lpString: PAnsiChar): Integer; stdcall; external cLibName name 'lstrlenA';
function lstrlenW(lpString: PWideChar): Integer; stdcall; external cLibName name 'lstrlenW';




//* -------------------------- DISK VOLUMES ---------------------------------*//

/// <summary>
///   FROM MSDN: Retrieves the name of a volume on a computer. FindFirstVolume is used to
///   begin scanning the volumes of a computer.
/// </summary>
/// <param name="lpszVolumeName">
///   FROM MSDN: A pointer to a buffer that receives a null-terminated string that
///   specifies a volume GUID path for the first volume that is found. <br />
/// </param>
/// <param name="cchBufferLength">
///   FROM MSDN: The length of the buffer to receive the volume GUID path, in TCHARs.
/// </param>
/// <returns>
///   FROM MSDN: The length of the buffer to receive the volume GUID path, in TCHARs.
/// </returns>
/// <remarks>
///   FROM MSDN: The FindFirstVolume function opens a volume search handle and returns
///   information about the first volume found on a computer. After the search
///   handle is established, you can use the FindNextVolume function to search
///   for other volumes. When the search handle is no longer needed, close it
///   by using the FindVolumeClose function. <br />You should not assume any
///   correlation between the order of the volumes that are returned by these
///   functions and the order of the volumes that are on the computer. In
///   particular, do not assume any correlation between volume order and drive
///   letters as assigned by the BIOS (if any) or the Disk Administrator.
/// </remarks>
function FindFirstVolume( lpszVolumeName: pointer; cchBufferLength: uint32 ): THandle; stdcall; external cLibName name 'FindFirstVolumeW';

/// <summary>
///   FROM MSDN: Continues a volume search started by a call to the FindFirstVolume
///   function. FindNextVolume finds one volume per call.
/// </summary>
/// <param name="hFindVolume">
///   FROM MSDN: The volume search handle returned by a previous call to the
///   FindFirstVolume function.
/// </param>
/// <param name="lptstrVolumeName">
///   FROM MSDN: A pointer to a string that receives the volume GUID path that is found.
/// </param>
/// <param name="cchBufferLength">
///   FROM MSDN: The length of the buffer that receives the volume GUID path, in TCHARs.
/// </param>
/// <returns>
///   FROM MSDN: If the function succeeds, the return value is nonzero. <br />If the
///   function fails, the return value is zero. To get extended error
///   information, call GetLastError. If no matching files can be found, the
///   GetLastError function returns the ERROR_NO_MORE_FILES error code. In that
///   case, close the search with the FindVolumeClose function.
/// </returns>
/// <remarks>
///   FROM MSDN: After the search handle is established by calling FindFirstVolume, you
///   can use the FindNextVolume function to search for other volumes. <br />
///   You should not assume any correlation between the order of the volumes
///   that are returned by these functions and the order of the volumes that
///   are on the computer. In particular, do not assume any correlation between
///   volume order and drive letters as assigned by the BIOS (if any) or the
///   Disk Administrator.
/// </remarks>
function FindNextVolume( hFindVolume: THandle; lptstrVolumeName: pointer; cchBufferLength: uint32 ): boolean; stdcall; external cLibName name 'FindNextVolumeW';

/// <summary>
///   FROM MSDN: Closes the specified volume search handle. The FindFirstVolume and
///   FindNextVolume functions use this search handle to locate volumes.
/// </summary>
/// <param name="hFindVolume">
///   FROM MSDN: The volume search handle to be closed. This handle must have been
///   previously opened by the FindFirstVolume function.
/// </param>
/// <returns>
///   FROM MSDN: If the function succeeds, the return value is nonzero. <br />If the
///   function fails, the return value is zero. To get extended error
///   information, call GetLastError.
/// </returns>
/// <remarks>
///   FROM MSDN: After the FindVolumeClose function is called, the handle hFindVolume
///   cannot be used in subsequent calls to either FindNextVolume or
///   FindVolumeClose.
/// </remarks>
function FindVolumeClose( hFindVolume: THandle ): boolean; stdcall; external cLibName name 'FindVolumeClose';

/// <summary>
///   FROM MSDN: Retrieves a list of drive letters and mounted folder paths for the
///   specified volume.
/// </summary>
/// <param name="lpszVolumeName">
///   FROM MSDN: A volume GUID path for the volume. A volume GUID path is of the form
///   "\\?\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\".
/// </param>
/// <param name="lpszVolumePathNames">
///   FROM MSDN: A pointer to a buffer that receives the list of drive letters and mounted
///   folder paths. The list is an array of null-terminated strings terminated
///   by an additional NULL character. If the buffer is not large enough to
///   hold the complete list, the buffer holds as much of the list as possible.
/// </param>
/// <param name="cchBufferLength">
///   FROM MSDN: The length of the lpszVolumePathNames buffer, in TCHARs, including all
///   NULL characters.
/// </param>
/// <param name="lpcchReturnLength">
///   FROM MSDN: If the call is successful, this parameter is the number of TCHARs copied
///   to the lpszVolumePathNames buffer. Otherwise, this parameter is the size
///   of the buffer required to hold the complete list, in TCHARs.
/// </param>
/// <returns>
///   FROM MSDN: If the function succeeds, the return value is nonzero. (bool true) <br />
///   If the function fails, the return value is zero. To get extended error
///   information, call GetLastError. If the buffer is not large enough to hold
///   the complete list, the error code is ERROR_MORE_DATA and the
///   lpcchReturnLength parameter receives the required buffer size.
/// </returns>
function GetVolumePathNamesForVolumeName( lpszVolumeName: pointer; lpszVolumePathNames: pointer; cchBufferLength: uint32; var lpcchReturnLength: uint32 ): boolean; stdcall; external cLibName name 'GetVolumePathNamesForVolumeNameW';

{$endif}
implementation


end.


