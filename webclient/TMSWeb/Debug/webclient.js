//***********************************************************************************
// TMS WEB CORE framework code is copyright (c) 2018 - 2020 by tmssoftware.com bvba
// The code or parts of the code cannot be used in any way outside 
// a TMS WEB Core application generated by a licensed user or company.
//***********************************************************************************
var pas = {};

var rtl = {

  version: 10501,

  quiet: false,
  debug_load_units: false,
  debug_rtti: false,

  debug: function(){
    if (rtl.quiet || !console || !console.log) return;
    console.log(arguments);
  },

  error: function(s){
    rtl.debug('Error: ',s);
    throw s;
  },

  warn: function(s){
    rtl.debug('Warn: ',s);
  },

  checkVersion: function(v){
    if (rtl.version != v) throw "expected rtl version "+v+", but found "+rtl.version;
  },

  hiInt: Math.pow(2,53),

  hasString: function(s){
    return rtl.isString(s) && (s.length>0);
  },

  isArray: function(a) {
    return Array.isArray(a);
  },

  isFunction: function(f){
    return typeof(f)==="function";
  },

  isModule: function(m){
    return rtl.isObject(m) && rtl.hasString(m.$name) && (pas[m.$name]===m);
  },

  isImplementation: function(m){
    return rtl.isObject(m) && rtl.isModule(m.$module) && (m.$module.$impl===m);
  },

  isNumber: function(n){
    return typeof(n)==="number";
  },

  isObject: function(o){
    var s=typeof(o);
    return (typeof(o)==="object") && (o!=null);
  },

  isString: function(s){
    return typeof(s)==="string";
  },

  getNumber: function(n){
    return typeof(n)==="number"?n:NaN;
  },

  getChar: function(c){
    return ((typeof(c)==="string") && (c.length===1)) ? c : "";
  },

  getObject: function(o){
    return ((typeof(o)==="object") || (typeof(o)==='function')) ? o : null;
  },

  isTRecord: function(type){
    return (rtl.isObject(type) && type.hasOwnProperty('$new') && (typeof(type.$new)==='function'));
  },

  isPasClass: function(type){
    return (rtl.isObject(type) && type.hasOwnProperty('$classname') && rtl.isObject(type.$module));
  },

  isPasClassInstance: function(type){
    return (rtl.isObject(type) && rtl.isPasClass(type.$class));
  },

  hexStr: function(n,digits){
    return ("000000000000000"+n.toString(16).toUpperCase()).slice(-digits);
  },

  m_loading: 0,
  m_loading_intf: 1,
  m_intf_loaded: 2,
  m_loading_impl: 3, // loading all used unit
  m_initializing: 4, // running initialization
  m_initialized: 5,

  module: function(module_name, intfuseslist, intfcode, impluseslist, implcode){
    if (rtl.debug_load_units) rtl.debug('rtl.module name="'+module_name+'" intfuses='+intfuseslist+' impluses='+impluseslist+' hasimplcode='+rtl.isFunction(implcode));
    if (!rtl.hasString(module_name)) rtl.error('invalid module name "'+module_name+'"');
    if (!rtl.isArray(intfuseslist)) rtl.error('invalid interface useslist of "'+module_name+'"');
    if (!rtl.isFunction(intfcode)) rtl.error('invalid interface code of "'+module_name+'"');
    if (!(impluseslist==undefined) && !rtl.isArray(impluseslist)) rtl.error('invalid implementation useslist of "'+module_name+'"');
    if (!(implcode==undefined) && !rtl.isFunction(implcode)) rtl.error('invalid implementation code of "'+module_name+'"');

    if (pas[module_name])
      rtl.error('module "'+module_name+'" is already registered');

    var module = pas[module_name] = {
      $name: module_name,
      $intfuseslist: intfuseslist,
      $impluseslist: impluseslist,
      $state: rtl.m_loading,
      $intfcode: intfcode,
      $implcode: implcode,
      $impl: null,
      $rtti: Object.create(rtl.tSectionRTTI)
    };
    module.$rtti.$module = module;
    if (implcode) module.$impl = {
      $module: module,
      $rtti: module.$rtti
    };
  },

  exitcode: 0,

  run: function(module_name){
  
    function doRun(){
      if (!rtl.hasString(module_name)) module_name='program';
      if (rtl.debug_load_units) rtl.debug('rtl.run module="'+module_name+'"');
      rtl.initRTTI();
      var module = pas[module_name];
      if (!module) rtl.error('rtl.run module "'+module_name+'" missing');
      rtl.loadintf(module);
      rtl.loadimpl(module);
      if (module_name=='program'){
        if (rtl.debug_load_units) rtl.debug('running $main');
        var r = pas.program.$main();
        if (rtl.isNumber(r)) rtl.exitcode = r;
      }
    }
    
    if (rtl.showUncaughtExceptions) {
      try{
        doRun();
      } catch(re) {
        var errMsg = rtl.hasString(re.$classname) ? re.$classname : '';
	    errMsg +=  ((errMsg) ? ': ' : '') + (re.hasOwnProperty('fMessage') ? re.fMessage : re);
        alert('Uncaught Exception : '+errMsg);
        rtl.exitCode = 216;
      }
    } else {
      doRun();
    }
    return rtl.exitcode;
  },

  loadintf: function(module){
    if (module.$state>rtl.m_loading_intf) return; // already finished
    if (rtl.debug_load_units) rtl.debug('loadintf: "'+module.$name+'"');
    if (module.$state===rtl.m_loading_intf)
      rtl.error('unit cycle detected "'+module.$name+'"');
    module.$state=rtl.m_loading_intf;
    // load interfaces of interface useslist
    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadintf);
    // run interface
    if (rtl.debug_load_units) rtl.debug('loadintf: run intf of "'+module.$name+'"');
    module.$intfcode(module.$intfuseslist);
    // success
    module.$state=rtl.m_intf_loaded;
    // Note: units only used in implementations are not yet loaded (not even their interfaces)
  },

  loaduseslist: function(module,useslist,f){
    if (useslist==undefined) return;
    for (var i in useslist){
      var unitname=useslist[i];
      if (rtl.debug_load_units) rtl.debug('loaduseslist of "'+module.$name+'" uses="'+unitname+'"');
      if (pas[unitname]==undefined)
        rtl.error('module "'+module.$name+'" misses "'+unitname+'"');
      f(pas[unitname]);
    }
  },

  loadimpl: function(module){
    if (module.$state>=rtl.m_loading_impl) return; // already processing
    if (module.$state<rtl.m_intf_loaded) rtl.error('loadimpl: interface not loaded of "'+module.$name+'"');
    if (rtl.debug_load_units) rtl.debug('loadimpl: load uses of "'+module.$name+'"');
    module.$state=rtl.m_loading_impl;
    // load interfaces of implementation useslist
    rtl.loaduseslist(module,module.$impluseslist,rtl.loadintf);
    // load implementation of interfaces useslist
    rtl.loaduseslist(module,module.$intfuseslist,rtl.loadimpl);
    // load implementation of implementation useslist
    rtl.loaduseslist(module,module.$impluseslist,rtl.loadimpl);
    // Note: At this point all interfaces used by this unit are loaded. If
    //   there are implementation uses cycles some used units might not yet be
    //   initialized. This is by design.
    // run implementation
    if (rtl.debug_load_units) rtl.debug('loadimpl: run impl of "'+module.$name+'"');
    if (rtl.isFunction(module.$implcode)) module.$implcode(module.$impluseslist);
    // run initialization
    if (rtl.debug_load_units) rtl.debug('loadimpl: run init of "'+module.$name+'"');
    module.$state=rtl.m_initializing;
    if (rtl.isFunction(module.$init)) module.$init();
    // unit initialized
    module.$state=rtl.m_initialized;
  },

  createCallback: function(scope, fn){
    var cb;
    if (typeof(fn)==='string'){
      cb = function(){
        return scope[fn].apply(scope,arguments);
      };
    } else {
      cb = function(){
        return fn.apply(scope,arguments);
      };
    };
    cb.scope = scope;
    cb.fn = fn;
    return cb;
  },

  cloneCallback: function(cb){
    return rtl.createCallback(cb.scope,cb.fn);
  },

  eqCallback: function(a,b){
    // can be a function or a function wrapper
    if (a==b){
      return true;
    } else {
      return (a!=null) && (b!=null) && (a.fn) && (a.scope===b.scope) && (a.fn==b.fn);
    }
  },

  initStruct: function(c,parent,name){
    if ((parent.$module) && (parent.$module.$impl===parent)) parent=parent.$module;
    c.$parent = parent;
    if (rtl.isModule(parent)){
      c.$module = parent;
      c.$name = name;
    } else {
      c.$module = parent.$module;
      c.$name = parent.$name+'.'+name;
    };
    return parent;
  },

  initClass: function(c,parent,name,initfn){
    parent[name] = c;
    c.$class = c; // Note: o.$class === Object.getPrototypeOf(o)
    c.$classname = name;
    parent = rtl.initStruct(c,parent,name);
    c.$fullname = parent.$name+'.'+name;
    // rtti
    if (rtl.debug_rtti) rtl.debug('initClass '+c.$fullname);
    var t = c.$module.$rtti.$Class(c.$name,{ "class": c });
    c.$rtti = t;
    if (rtl.isObject(c.$ancestor)) t.ancestor = c.$ancestor.$rtti;
    if (!t.ancestor) t.ancestor = null;
    // init members
    initfn.call(c);
  },

  createClass: function(parent,name,ancestor,initfn){
    // create a normal class,
    // ancestor must be null or a normal class,
    // the root ancestor can be an external class
    var c = null;
    if (ancestor != null){
      c = Object.create(ancestor);
      c.$ancestor = ancestor;
      // Note:
      // if root is an "object" then c.$ancestor === Object.getPrototypeOf(c)
      // if root is a "function" then c.$ancestor === c.__proto__, Object.getPrototypeOf(c) returns the root
    } else {
      c = { $ancestor: null };
      c.$create = function(fn,args){
        if (args == undefined) args = [];
        var o = Object.create(this);
        o.$init();
        try{
          if (typeof(fn)==="string"){
            o[fn].apply(o,args);
          } else {
            fn.apply(o,args);
          };
          o.AfterConstruction();
        } catch($e){
          // do not call BeforeDestruction
          if (o.Destroy) o.Destroy();
          o.$final();
          throw $e;
        }
        return o;
      };
      c.$destroy = function(fnname){
        this.BeforeDestruction();
        if (this[fnname]) this[fnname]();
        this.$final();
      };
    };
    rtl.initClass(c,parent,name,initfn);
  },

  createClassExt: function(parent,name,ancestor,newinstancefnname,initfn){
    // Create a class using an external ancestor.
    // If newinstancefnname is given, use that function to create the new object.
    // If exist call BeforeDestruction and AfterConstruction.
    var c = Object.create(ancestor);
    c.$create = function(fn,args){
      if (args == undefined) args = [];
      var o = null;
      if (newinstancefnname.length>0){
        o = this[newinstancefnname](fn,args);
      } else {
        o = Object.create(this);
      }
      if (o.$init) o.$init();
      try{
        if (typeof(fn)==="string"){
          o[fn].apply(o,args);
        } else {
          fn.apply(o,args);
        };
        if (o.AfterConstruction) o.AfterConstruction();
      } catch($e){
        // do not call BeforeDestruction
        console.log($e);
        if (o.Destroy) o.Destroy();
        if (o.$final) this.$final();
        throw $e;
      }
      return o;
    };
    c.$destroy = function(fnname){
      if (this.BeforeDestruction) this.BeforeDestruction();
      if (this[fnname]) this[fnname]();
      if (this.$final) this.$final();
    };
    rtl.initClass(c,parent,name,initfn);
  },

  createHelper: function(parent,name,ancestor,initfn){
    // create a helper,
    // ancestor must be null or a helper,
    var c = null;
    if (ancestor != null){
      c = Object.create(ancestor);
      c.$ancestor = ancestor;
      // c.$ancestor === Object.getPrototypeOf(c)
    } else {
      c = { $ancestor: null };
    };
    parent[name] = c;
    c.$class = c; // Note: o.$class === Object.getPrototypeOf(o)
    c.$classname = name;
    parent = rtl.initStruct(c,parent,name);
    c.$fullname = parent.$name+'.'+name;
    // rtti
    var t = c.$module.$rtti.$Helper(c.$name,{ "helper": c });
    c.$rtti = t;
    if (rtl.isObject(ancestor)) t.ancestor = ancestor.$rtti;
    if (!t.ancestor) t.ancestor = null;
    // init members
    initfn.call(c);
  },

  tObjectDestroy: "Destroy",

  free: function(obj,name){
    if (obj[name]==null) return null;
    obj[name].$destroy(rtl.tObjectDestroy);
    obj[name]=null;
  },

  freeLoc: function(obj){
    if (obj==null) return null;
    obj.$destroy(rtl.tObjectDestroy);
    return null;
  },

  recNewT: function(parent,name,initfn,full){
    // create new record type
    var t = {};
    if (parent) parent[name] = t;
    function hide(prop){
      Object.defineProperty(t,prop,{enumerable:false});
    }
    if (full){
      rtl.initStruct(t,parent,name);
      t.$record = t;
      hide('$record');
      hide('$name');
      hide('$parent');
      hide('$module');
    }
    initfn.call(t);
    if (!t.$new){
      t.$new = function(){ return Object.create(this); };
    }
    t.$clone = function(r){ return this.$new().$assign(r); };
    hide('$new');
    hide('$clone');
    hide('$eq');
    hide('$assign');
    return t;
  },

  is: function(instance,type){
    return type.isPrototypeOf(instance) || (instance===type);
  },

  isExt: function(instance,type,mode){
    // mode===1 means instance must be a Pascal class instance
    // mode===2 means instance must be a Pascal class
    // Notes:
    // isPrototypeOf and instanceof return false on equal
    // isPrototypeOf does not work for Date.isPrototypeOf(new Date())
    //   so if isPrototypeOf is false test with instanceof
    // instanceof needs a function on right side
    if (instance == null) return false; // Note: ==null checks for undefined too
    if ((typeof(type) !== 'object') && (typeof(type) !== 'function')) return false;
    if (instance === type){
      if (mode===1) return false;
      if (mode===2) return rtl.isPasClass(instance);
      return true;
    }
    if (type.isPrototypeOf && type.isPrototypeOf(instance)){
      if (mode===1) return rtl.isPasClassInstance(instance);
      if (mode===2) return rtl.isPasClass(instance);
      return true;
    }
    if ((typeof type == 'function') && (instance instanceof type)) return true;
    return false;
  },

  Exception: null,
  EInvalidCast: null,
  EAbstractError: null,
  ERangeError: null,
  EIntOverflow: null,
  EPropWriteOnly: null,

  raiseE: function(typename){
    var t = rtl[typename];
    if (t==null){
      var mod = pas.SysUtils;
      if (!mod) mod = pas.sysutils;
      if (mod){
        t = mod[typename];
        if (!t) t = mod[typename.toLowerCase()];
        if (!t) t = mod['Exception'];
        if (!t) t = mod['exception'];
      }
    }
    if (t){
      if (t.Create){
        throw t.$create("Create");
      } else if (t.create){
        throw t.$create("create");
      }
    }
    if (typename === "EInvalidCast") throw "invalid type cast";
    if (typename === "EAbstractError") throw "Abstract method called";
    if (typename === "ERangeError") throw "range error";
    throw typename;
  },

  as: function(instance,type){
    if((instance === null) || rtl.is(instance,type)) return instance;
    rtl.raiseE("EInvalidCast");
  },

  asExt: function(instance,type,mode){
    if((instance === null) || rtl.isExt(instance,type,mode)) return instance;
    rtl.raiseE("EInvalidCast");
  },

  createInterface: function(module, name, guid, fnnames, ancestor, initfn){
    //console.log('createInterface name="'+name+'" guid="'+guid+'" names='+fnnames);
    var i = ancestor?Object.create(ancestor):{};
    module[name] = i;
    i.$module = module;
    i.$name = name;
    i.$fullname = module.$name+'.'+name;
    i.$guid = guid;
    i.$guidr = null;
    i.$names = fnnames?fnnames:[];
    if (rtl.isFunction(initfn)){
      // rtti
      if (rtl.debug_rtti) rtl.debug('createInterface '+i.$fullname);
      var t = i.$module.$rtti.$Interface(name,{ "interface": i, module: module });
      i.$rtti = t;
      if (ancestor) t.ancestor = ancestor.$rtti;
      if (!t.ancestor) t.ancestor = null;
      initfn.call(i);
    }
    return i;
  },

  strToGUIDR: function(s,g){
    var p = 0;
    function n(l){
      var h = s.substr(p,l);
      p+=l;
      return parseInt(h,16);
    }
    p+=1; // skip {
    g.D1 = n(8);
    p+=1; // skip -
    g.D2 = n(4);
    p+=1; // skip -
    g.D3 = n(4);
    p+=1; // skip -
    if (!g.D4) g.D4=[];
    g.D4[0] = n(2);
    g.D4[1] = n(2);
    p+=1; // skip -
    for(var i=2; i<8; i++) g.D4[i] = n(2);
    return g;
  },

  guidrToStr: function(g){
    if (g.$intf) return g.$intf.$guid;
    var h = rtl.hexStr;
    var s='{'+h(g.D1,8)+'-'+h(g.D2,4)+'-'+h(g.D3,4)+'-'+h(g.D4[0],2)+h(g.D4[1],2)+'-';
    for (var i=2; i<8; i++) s+=h(g.D4[i],2);
    s+='}';
    return s;
  },

  createTGUID: function(guid){
    var TGuid = (pas.System)?pas.System.TGuid:pas.system.tguid;
    var g = rtl.strToGUIDR(guid,TGuid.$new());
    return g;
  },

  getIntfGUIDR: function(intfTypeOrVar){
    if (!intfTypeOrVar) return null;
    if (!intfTypeOrVar.$guidr){
      var g = rtl.createTGUID(intfTypeOrVar.$guid);
      if (!intfTypeOrVar.hasOwnProperty('$guid')) intfTypeOrVar = Object.getPrototypeOf(intfTypeOrVar);
      g.$intf = intfTypeOrVar;
      intfTypeOrVar.$guidr = g;
    }
    return intfTypeOrVar.$guidr;
  },

  addIntf: function (aclass, intf, map){
    function jmp(fn){
      if (typeof(fn)==="function"){
        return function(){ return fn.apply(this.$o,arguments); };
      } else {
        return function(){ rtl.raiseE('EAbstractError'); };
      }
    }
    if(!map) map = {};
    var t = intf;
    var item = Object.create(t);
    if (!aclass.hasOwnProperty('$intfmaps')) aclass.$intfmaps = {};
    aclass.$intfmaps[intf.$guid] = item;
    do{
      var names = t.$names;
      if (!names) break;
      for (var i=0; i<names.length; i++){
        var intfname = names[i];
        var fnname = map[intfname];
        if (!fnname) fnname = intfname;
        //console.log('addIntf: intftype='+t.$name+' index='+i+' intfname="'+intfname+'" fnname="'+fnname+'" old='+typeof(item[intfname]));
        item[intfname] = jmp(aclass[fnname]);
      }
      t = Object.getPrototypeOf(t);
    }while(t!=null);
  },

  getIntfG: function (obj, guid, query){
    if (!obj) return null;
    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query);
    // search
    var maps = obj.$intfmaps;
    if (!maps) return null;
    var item = maps[guid];
    if (!item) return null;
    // check delegation
    //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' query='+query+' item='+typeof(item));
    if (typeof item === 'function') return item.call(obj); // delegate. Note: COM contains _AddRef
    // check cache
    var intf = null;
    if (obj.$interfaces){
      intf = obj.$interfaces[guid];
      //console.log('getIntfG: obj='+obj.$classname+' guid='+guid+' cache='+typeof(intf));
    }
    if (!intf){ // intf can be undefined!
      intf = Object.create(item);
      intf.$o = obj;
      if (!obj.$interfaces) obj.$interfaces = {};
      obj.$interfaces[guid] = intf;
    }
    if (typeof(query)==='object'){
      // called by queryIntfT
      var o = null;
      if (intf.QueryInterface(rtl.getIntfGUIDR(query),
          {get:function(){ return o; }, set:function(v){ o=v; }}) === 0){
        return o;
      } else {
        return null;
      }
    } else if(query===2){
      // called by TObject.GetInterfaceByStr
      if (intf.$kind === 'com') intf._AddRef();
    }
    return intf;
  },

  getIntfT: function(obj,intftype){
    return rtl.getIntfG(obj,intftype.$guid);
  },

  queryIntfT: function(obj,intftype){
    return rtl.getIntfG(obj,intftype.$guid,intftype);
  },

  queryIntfIsT: function(obj,intftype){
    var i = rtl.queryIntfG(obj,intftype.$guid);
    if (!i) return false;
    if (i.$kind === 'com') i._Release();
    return true;
  },

  asIntfT: function (obj,intftype){
    var i = rtl.getIntfG(obj,intftype.$guid);
    if (i!==null) return i;
    rtl.raiseEInvalidCast();
  },

  intfIsIntfT: function(intf,intftype){
    return (intf!==null) && rtl.queryIntfIsT(intf.$o,intftype);
  },

  intfAsIntfT: function (intf,intftype){
    if (intf){
      var i = rtl.getIntfG(intf.$o,intftype.$guid);
      if (i!==null) return i;
    }
    rtl.raiseEInvalidCast();
  },

  intfIsClass: function(intf,classtype){
    return (intf!=null) && (rtl.is(intf.$o,classtype));
  },

  intfAsClass: function(intf,classtype){
    if (intf==null) return null;
    return rtl.as(intf.$o,classtype);
  },

  intfToClass: function(intf,classtype){
    if ((intf!==null) && rtl.is(intf.$o,classtype)) return intf.$o;
    return null;
  },

  // interface reference counting
  intfRefs: { // base object for temporary interface variables
    ref: function(id,intf){
      // called for temporary interface references needing delayed release
      var old = this[id];
      //console.log('rtl.intfRefs.ref: id='+id+' old="'+(old?old.$name:'null')+'" intf="'+(intf?intf.$name:'null')+' $o='+(intf?intf.$o:'null'));
      if (old){
        // called again, e.g. in a loop
        delete this[id];
        old._Release(); // may fail
      }
      this[id]=intf;
      return intf;
    },
    free: function(){
      //console.log('rtl.intfRefs.free...');
      for (var id in this){
        if (this.hasOwnProperty(id)){
          //console.log('rtl.intfRefs.free: id='+id+' '+this[id].$name+' $o='+this[id].$o.$classname);
          this[id]._Release();
        }
      }
    }
  },

  createIntfRefs: function(){
    //console.log('rtl.createIntfRefs');
    return Object.create(rtl.intfRefs);
  },

  setIntfP: function(path,name,value,skipAddRef){
    var old = path[name];
    //console.log('rtl.setIntfP path='+path+' name='+name+' old="'+(old?old.$name:'null')+'" value="'+(value?value.$name:'null')+'"');
    if (old === value) return;
    if (old !== null){
      path[name]=null;
      old._Release();
    }
    if (value !== null){
      if (!skipAddRef) value._AddRef();
      path[name]=value;
    }
  },

  setIntfL: function(old,value,skipAddRef){
    //console.log('rtl.setIntfL old="'+(old?old.$name:'null')+'" value="'+(value?value.$name:'null')+'"');
    if (old !== value){
      if (value!==null){
        if (!skipAddRef) value._AddRef();
      }
      if (old!==null){
        old._Release();  // Release after AddRef, to avoid double Release if Release creates an exception
      }
    } else if (skipAddRef){
      if (old!==null){
        old._Release();  // value has an AddRef
      }
    }
    return value;
  },

  _AddRef: function(intf){
    //if (intf) console.log('rtl._AddRef intf="'+(intf?intf.$name:'null')+'"');
    if (intf) intf._AddRef();
    return intf;
  },

  _Release: function(intf){
    //if (intf) console.log('rtl._Release intf="'+(intf?intf.$name:'null')+'"');
    if (intf) intf._Release();
    return intf;
  },

  checkMethodCall: function(obj,type){
    if (rtl.isObject(obj) && rtl.is(obj,type)) return;
    rtl.raiseE("EInvalidCast");
  },

  oc: function(i){
    // overflow check integer
    if ((Math.floor(i)===i) && (i>=-0x1fffffffffffff) && (i<=0x1fffffffffffff)) return i;
    rtl.raiseE('EIntOverflow');
  },

  rc: function(i,minval,maxval){
    // range check integer
    if ((Math.floor(i)===i) && (i>=minval) && (i<=maxval)) return i;
    rtl.raiseE('ERangeError');
  },

  rcc: function(c,minval,maxval){
    // range check char
    if ((typeof(c)==='string') && (c.length===1)){
      var i = c.charCodeAt(0);
      if ((i>=minval) && (i<=maxval)) return c;
    }
    rtl.raiseE('ERangeError');
  },

  rcSetCharAt: function(s,index,c){
    // range check setCharAt
    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');
    return rtl.setCharAt(s,index,c);
  },

  rcCharAt: function(s,index){
    // range check charAt
    if ((typeof(s)!=='string') || (index<0) || (index>=s.length)) rtl.raiseE('ERangeError');
    return s.charAt(index);
  },

  rcArrR: function(arr,index){
    // range check read array
    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){
      if (arguments.length>2){
        // arr,index1,index2,...
        arr=arr[index];
        for (var i=2; i<arguments.length; i++) arr=rtl.rcArrR(arr,arguments[i]);
        return arr;
      }
      return arr[index];
    }
    rtl.raiseE('ERangeError');
  },

  rcArrW: function(arr,index,value){
    // range check write array
    // arr,index1,index2,...,value
    for (var i=3; i<arguments.length; i++){
      arr=rtl.rcArrR(arr,index);
      index=arguments[i-1];
      value=arguments[i];
    }
    if (Array.isArray(arr) && (typeof(index)==='number') && (index>=0) && (index<arr.length)){
      return arr[index]=value;
    }
    rtl.raiseE('ERangeError');
  },

  length: function(arr){
    return (arr == null) ? 0 : arr.length;
  },

  arraySetLength: function(arr,defaultvalue,newlength){
    var stack = [];
    for (var i=2; i<arguments.length; i++){
      stack.push({ dim:arguments[i]+0, a:null, i:0, src:null });
    }
    var dimmax = stack.length-1;
    var depth = 0;
    var lastlen = stack[dimmax].dim;
    var item = null;
    var a = null;
    var src = arr;
    var oldlen = 0
    do{
      a = [];
      if (depth>0){
        item=stack[depth-1];
        item.a[item.i]=a;
        src = (item.src && item.src.length>item.i)?item.src[item.i]:null;
        item.i++;
      }
      if (depth<dimmax){
        item = stack[depth];
        item.a = a;
        item.i = 0;
        item.src = src;
        depth++;
      } else {
        oldlen = src?src.length:0;
        if (rtl.isArray(defaultvalue)){
          for (var i=0; i<lastlen; i++) a[i]=(i<oldlen)?src[i]:[]; // array of dyn array
        } else if (rtl.isObject(defaultvalue)) {
          if (rtl.isTRecord(defaultvalue)){
            for (var i=0; i<lastlen; i++){
              a[i]=(i<oldlen)?defaultvalue.$clone(src[i]):defaultvalue.$new(); // e.g. record
            }
          } else {
            for (var i=0; i<lastlen; i++) a[i]=(i<oldlen)?rtl.refSet(src[i]):{}; // e.g. set
          }
        } else {
          for (var i=0; i<lastlen; i++)
            a[i]=(i<oldlen)?src[i]:defaultvalue;
        }
        while ((depth>0) && (stack[depth-1].i>=stack[depth-1].dim)){
          depth--;
        };
        if (depth===0){
          if (dimmax===0) return a;
          return stack[0].a;
        }
      }
    }while (true);
  },

  /*arrayChgLength: function(arr,defaultvalue,newlength){
    // multi dim: (arr,defaultvalue,dim1,dim2,...)
    if (arr == null) arr = [];
    var p = arguments;
    function setLength(a,argNo){
      var oldlen = a.length;
      var newlen = p[argNo];
      if (oldlen!==newlength){
        a.length = newlength;
        if (argNo === p.length-1){
          if (rtl.isArray(defaultvalue)){
            for (var i=oldlen; i<newlen; i++) a[i]=[]; // nested array
          } else if (rtl.isObject(defaultvalue)) {
            if (rtl.isTRecord(defaultvalue)){
              for (var i=oldlen; i<newlen; i++) a[i]=defaultvalue.$new(); // e.g. record
            } else {
              for (var i=oldlen; i<newlen; i++) a[i]={}; // e.g. set
            }
          } else {
            for (var i=oldlen; i<newlen; i++) a[i]=defaultvalue;
          }
        } else {
          for (var i=oldlen; i<newlen; i++) a[i]=[]; // nested array
        }
      }
      if (argNo < p.length-1){
        // multi argNo
        for (var i=0; i<newlen; i++) a[i]=setLength(a[i],argNo+1);
      }
      return a;
    }
    return setLength(arr,2);
  },*/

  arrayEq: function(a,b){
    if (a===null) return b===null;
    if (b===null) return false;
    if (a.length!==b.length) return false;
    for (var i=0; i<a.length; i++) if (a[i]!==b[i]) return false;
    return true;
  },

  arrayClone: function(type,src,srcpos,endpos,dst,dstpos){
    // type: 0 for references, "refset" for calling refSet(), a function for new type()
    // src must not be null
    // This function does not range check.
    if(type === 'refSet') {
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = rtl.refSet(src[srcpos]); // ref set
    } else if (rtl.isTRecord(type)){
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = type.$clone(src[srcpos]); // clone record
    }  else {
      for (; srcpos<endpos; srcpos++) dst[dstpos++] = src[srcpos]; // reference
    };
  },

  arrayConcat: function(type){
    // type: see rtl.arrayClone
    var a = [];
    var l = 0;
    for (var i=1; i<arguments.length; i++){
      var src = arguments[i];
      if (src !== null) l+=src.length;
    };
    a.length = l;
    l=0;
    for (var i=1; i<arguments.length; i++){
      var src = arguments[i];
      if (src === null) continue;
      rtl.arrayClone(type,src,0,src.length,a,l);
      l+=src.length;
    };
    return a;
  },

  arrayConcatN: function(){
    var a = null;
    for (var i=1; i<arguments.length; i++){
      var src = arguments[i];
      if (src === null) continue;
      if (a===null){
        a=src; // Note: concat(a) does not clone
      } else {
        a=a.concat(src);
      }
    };
    return a;
  },

  arrayCopy: function(type, srcarray, index, count){
    // type: see rtl.arrayClone
    // if count is missing, use srcarray.length
    if (srcarray === null) return [];
    if (index < 0) index = 0;
    if (count === undefined) count=srcarray.length;
    var end = index+count;
    if (end>srcarray.length) end = srcarray.length;
    if (index>=end) return [];
    if (type===0){
      return srcarray.slice(index,end);
    } else {
      var a = [];
      a.length = end-index;
      rtl.arrayClone(type,srcarray,index,end,a,0);
      return a;
    }
  },

  setCharAt: function(s,index,c){
    return s.substr(0,index)+c+s.substr(index+1);
  },

  getResStr: function(mod,name){
    var rs = mod.$resourcestrings[name];
    return rs.current?rs.current:rs.org;
  },

  createSet: function(){
    var s = {};
    for (var i=0; i<arguments.length; i++){
      if (arguments[i]!=null){
        s[arguments[i]]=true;
      } else {
        var first=arguments[i+=1];
        var last=arguments[i+=1];
        for(var j=first; j<=last; j++) s[j]=true;
      }
    }
    return s;
  },

  cloneSet: function(s){
    var r = {};
    for (var key in s) r[key]=true;
    return r;
  },

  refSet: function(s){
    Object.defineProperty(s, '$shared', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: true
    });
    return s;
  },

  includeSet: function(s,enumvalue){
    if (s.$shared) s = rtl.cloneSet(s);
    s[enumvalue] = true;
    return s;
  },

  excludeSet: function(s,enumvalue){
    if (s.$shared) s = rtl.cloneSet(s);
    delete s[enumvalue];
    return s;
  },

  diffSet: function(s,t){
    var r = {};
    for (var key in s) if (!t[key]) r[key]=true;
    return r;
  },

  unionSet: function(s,t){
    var r = {};
    for (var key in s) r[key]=true;
    for (var key in t) r[key]=true;
    return r;
  },

  intersectSet: function(s,t){
    var r = {};
    for (var key in s) if (t[key]) r[key]=true;
    return r;
  },

  symDiffSet: function(s,t){
    var r = {};
    for (var key in s) if (!t[key]) r[key]=true;
    for (var key in t) if (!s[key]) r[key]=true;
    return r;
  },

  eqSet: function(s,t){
    for (var key in s) if (!t[key]) return false;
    for (var key in t) if (!s[key]) return false;
    return true;
  },

  neSet: function(s,t){
    return !rtl.eqSet(s,t);
  },

  leSet: function(s,t){
    for (var key in s) if (!t[key]) return false;
    return true;
  },

  geSet: function(s,t){
    for (var key in t) if (!s[key]) return false;
    return true;
  },

  strSetLength: function(s,newlen){
    var oldlen = s.length;
    if (oldlen > newlen){
      return s.substring(0,newlen);
    } else if (s.repeat){
      // Note: repeat needs ECMAScript6!
      return s+' '.repeat(newlen-oldlen);
    } else {
       while (oldlen<newlen){
         s+=' ';
         oldlen++;
       };
       return s;
    }
  },

  spaceLeft: function(s,width){
    var l=s.length;
    if (l>=width) return s;
    if (s.repeat){
      // Note: repeat needs ECMAScript6!
      return ' '.repeat(width-l) + s;
    } else {
      while (l<width){
        s=' '+s;
        l++;
      };
      return s;
    };
  },

  floatToStr: function(d,w,p){
    // input 1-3 arguments: double, width, precision
    if (arguments.length>2){
      return rtl.spaceLeft(d.toFixed(p),w);
    } else {
	  // exponent width
	  var pad = "";
	  var ad = Math.abs(d);
	  if (ad<1.0e+10) {
		pad='00';
	  } else if (ad<1.0e+100) {
		pad='0';
      }  	
	  if (arguments.length<2) {
	    w=9;		
      } else if (w<9) {
		w=9;
      }		  
      var p = w-8;
      var s=(d>0 ? " " : "" ) + d.toExponential(p);
      s=s.replace(/e(.)/,'E$1'+pad);
      return rtl.spaceLeft(s,w);
    }
  },

  valEnum: function(s, enumType, setCodeFn){
    s = s.toLowerCase();
    for (var key in enumType){
      if((typeof(key)==='string') && (key.toLowerCase()===s)){
        setCodeFn(0);
        return enumType[key];
      }
    }
    setCodeFn(1);
    return 0;
  },

  lw: function(l){
    // fix longword bitwise operation
    return l<0?l+0x100000000:l;
  },

  and: function(a,b){
    var hi = 0x80000000;
    var low = 0x7fffffff;
    var h = (a / hi) & (b / hi);
    var l = (a & low) & (b & low);
    return h*hi + l;
  },

  or: function(a,b){
    var hi = 0x80000000;
    var low = 0x7fffffff;
    var h = (a / hi) | (b / hi);
    var l = (a & low) | (b & low);
    return h*hi + l;
  },

  xor: function(a,b){
    var hi = 0x80000000;
    var low = 0x7fffffff;
    var h = (a / hi) ^ (b / hi);
    var l = (a & low) ^ (b & low);
    return h*hi + l;
  },

  shr: function(a,b){
    if (a<0) a += rtl.hiInt;
    if (a<0x80000000) return a >> b;
    if (b<=0) return a;
    if (b>54) return 0;
    return Math.floor(a / Math.pow(2,b));
  },

  shl: function(a,b){
    if (a<0) a += rtl.hiInt;
    if (b<=0) return a;
    if (b>54) return 0;
    var r = a * Math.pow(2,b);
    if (r <= rtl.hiInt) return r;
    return r % rtl.hiInt;
  },

  initRTTI: function(){
    if (rtl.debug_rtti) rtl.debug('initRTTI');

    // base types
    rtl.tTypeInfo = { name: "tTypeInfo" };
    function newBaseTI(name,kind,ancestor){
      if (!ancestor) ancestor = rtl.tTypeInfo;
      if (rtl.debug_rtti) rtl.debug('initRTTI.newBaseTI "'+name+'" '+kind+' ("'+ancestor.name+'")');
      var t = Object.create(ancestor);
      t.name = name;
      t.kind = kind;
      rtl[name] = t;
      return t;
    };
    function newBaseInt(name,minvalue,maxvalue,ordtype){
      var t = newBaseTI(name,1 /* tkInteger */,rtl.tTypeInfoInteger);
      t.minvalue = minvalue;
      t.maxvalue = maxvalue;
      t.ordtype = ordtype;
      return t;
    };
    newBaseTI("tTypeInfoInteger",1 /* tkInteger */);
    newBaseInt("shortint",-0x80,0x7f,0);
    newBaseInt("byte",0,0xff,1);
    newBaseInt("smallint",-0x8000,0x7fff,2);
    newBaseInt("word",0,0xffff,3);
    newBaseInt("longint",-0x80000000,0x7fffffff,4);
    newBaseInt("longword",0,0xffffffff,5);
    newBaseInt("nativeint",-0x10000000000000,0xfffffffffffff,6);
    newBaseInt("nativeuint",0,0xfffffffffffff,7);
    newBaseTI("char",2 /* tkChar */);
    newBaseTI("string",3 /* tkString */);
    newBaseTI("tTypeInfoEnum",4 /* tkEnumeration */,rtl.tTypeInfoInteger);
    newBaseTI("tTypeInfoSet",5 /* tkSet */);
    newBaseTI("double",6 /* tkDouble */);
    newBaseTI("boolean",7 /* tkBool */);
    newBaseTI("tTypeInfoProcVar",8 /* tkProcVar */);
    newBaseTI("tTypeInfoMethodVar",9 /* tkMethod */,rtl.tTypeInfoProcVar);
    newBaseTI("tTypeInfoArray",10 /* tkArray */);
    newBaseTI("tTypeInfoDynArray",11 /* tkDynArray */);
    newBaseTI("tTypeInfoPointer",15 /* tkPointer */);
    var t = newBaseTI("pointer",15 /* tkPointer */,rtl.tTypeInfoPointer);
    t.reftype = null;
    newBaseTI("jsvalue",16 /* tkJSValue */);
    newBaseTI("tTypeInfoRefToProcVar",17 /* tkRefToProcVar */,rtl.tTypeInfoProcVar);

    // member kinds
    rtl.tTypeMember = {};
    function newMember(name,kind){
      var m = Object.create(rtl.tTypeMember);
      m.name = name;
      m.kind = kind;
      rtl[name] = m;
    };
    newMember("tTypeMemberField",1); // tmkField
    newMember("tTypeMemberMethod",2); // tmkMethod
    newMember("tTypeMemberProperty",3); // tmkProperty

    // base object for storing members: a simple object
    rtl.tTypeMembers = {};

    // tTypeInfoStruct - base object for tTypeInfoClass, tTypeInfoRecord, tTypeInfoInterface
    var tis = newBaseTI("tTypeInfoStruct",0);
    tis.$addMember = function(name,ancestor,options){
      if (rtl.debug_rtti){
        if (!rtl.hasString(name) || (name.charAt()==='$')) throw 'invalid member "'+name+'", this="'+this.name+'"';
        if (!rtl.is(ancestor,rtl.tTypeMember)) throw 'invalid ancestor "'+ancestor+':'+ancestor.name+'", "'+this.name+'.'+name+'"';
        if ((options!=undefined) && (typeof(options)!='object')) throw 'invalid options "'+options+'", "'+this.name+'.'+name+'"';
      };
      var t = Object.create(ancestor);
      t.name = name;
      this.members[name] = t;
      this.names.push(name);
      if (rtl.isObject(options)){
        for (var key in options) if (options.hasOwnProperty(key)) t[key] = options[key];
      };
      return t;
    };
    tis.addField = function(name,type,options){
      var t = this.$addMember(name,rtl.tTypeMemberField,options);
      if (rtl.debug_rtti){
        if (!rtl.is(type,rtl.tTypeInfo)) throw 'invalid type "'+type+'", "'+this.name+'.'+name+'"';
      };
      t.typeinfo = type;
      this.fields.push(name);
      return t;
    };
    tis.addFields = function(){
      var i=0;
      while(i<arguments.length){
        var name = arguments[i++];
        var type = arguments[i++];
        if ((i<arguments.length) && (typeof(arguments[i])==='object')){
          this.addField(name,type,arguments[i++]);
        } else {
          this.addField(name,type);
        };
      };
    };
    tis.addMethod = function(name,methodkind,params,result,options){
      var t = this.$addMember(name,rtl.tTypeMemberMethod,options);
      t.methodkind = methodkind;
      t.procsig = rtl.newTIProcSig(params);
      t.procsig.resulttype = result?result:null;
      this.methods.push(name);
      return t;
    };
    tis.addProperty = function(name,flags,result,getter,setter,options){
      var t = this.$addMember(name,rtl.tTypeMemberProperty,options);
      t.flags = flags;
      t.typeinfo = result;
      t.getter = getter;
      t.setter = setter;
      // Note: in options: params, stored, defaultvalue
      if (rtl.isArray(t.params)) t.params = rtl.newTIParams(t.params);
      this.properties.push(name);
      if (!rtl.isString(t.stored)) t.stored = "";
      return t;
    };
    tis.getField = function(index){
      return this.members[this.fields[index]];
    };
    tis.getMethod = function(index){
      return this.members[this.methods[index]];
    };
    tis.getProperty = function(index){
      return this.members[this.properties[index]];
    };

    newBaseTI("tTypeInfoRecord",12 /* tkRecord */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoClass",13 /* tkClass */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoClassRef",14 /* tkClassRef */);
    newBaseTI("tTypeInfoInterface",18 /* tkInterface */,rtl.tTypeInfoStruct);
    newBaseTI("tTypeInfoHelper",19 /* tkHelper */,rtl.tTypeInfoStruct);
  },

  tSectionRTTI: {
    $module: null,
    $inherited: function(name,ancestor,o){
      if (rtl.debug_rtti){
        rtl.debug('tSectionRTTI.newTI "'+(this.$module?this.$module.$name:"(no module)")
          +'"."'+name+'" ('+ancestor.name+') '+(o?'init':'forward'));
      };
      var t = this[name];
      if (t){
        if (!t.$forward) throw 'duplicate type "'+name+'"';
        if (!ancestor.isPrototypeOf(t)) throw 'typeinfo ancestor mismatch "'+name+'" ancestor="'+ancestor.name+'" t.name="'+t.name+'"';
      } else {
        t = Object.create(ancestor);
        t.name = name;
        t.$module = this.$module;
        this[name] = t;
      }
      if (o){
        delete t.$forward;
        for (var key in o) if (o.hasOwnProperty(key)) t[key]=o[key];
      } else {
        t.$forward = true;
      }
      return t;
    },
    $Scope: function(name,ancestor,o){
      var t=this.$inherited(name,ancestor,o);
      t.members = {};
      t.names = [];
      t.fields = [];
      t.methods = [];
      t.properties = [];
      return t;
    },
    $TI: function(name,kind,o){ var t=this.$inherited(name,rtl.tTypeInfo,o); t.kind = kind; return t; },
    $Int: function(name,o){ return this.$inherited(name,rtl.tTypeInfoInteger,o); },
    $Enum: function(name,o){ return this.$inherited(name,rtl.tTypeInfoEnum,o); },
    $Set: function(name,o){ return this.$inherited(name,rtl.tTypeInfoSet,o); },
    $StaticArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoArray,o); },
    $DynArray: function(name,o){ return this.$inherited(name,rtl.tTypeInfoDynArray,o); },
    $ProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoProcVar,o); },
    $RefToProcVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoRefToProcVar,o); },
    $MethodVar: function(name,o){ return this.$inherited(name,rtl.tTypeInfoMethodVar,o); },
    $Record: function(name,o){ return this.$Scope(name,rtl.tTypeInfoRecord,o); },
    $Class: function(name,o){ return this.$Scope(name,rtl.tTypeInfoClass,o); },
    $ClassRef: function(name,o){ return this.$inherited(name,rtl.tTypeInfoClassRef,o); },
    $Pointer: function(name,o){ return this.$inherited(name,rtl.tTypeInfoPointer,o); },
    $Interface: function(name,o){ return this.$Scope(name,rtl.tTypeInfoInterface,o); },
    $Helper: function(name,o){ return this.$Scope(name,rtl.tTypeInfoHelper,o); }
  },

  newTIParam: function(param){
    // param is an array, 0=name, 1=type, 2=optional flags
    var t = {
      name: param[0],
      typeinfo: param[1],
      flags: (rtl.isNumber(param[2]) ? param[2] : 0)
    };
    return t;
  },

  newTIParams: function(list){
    // list: optional array of [paramname,typeinfo,optional flags]
    var params = [];
    if (rtl.isArray(list)){
      for (var i=0; i<list.length; i++) params.push(rtl.newTIParam(list[i]));
    };
    return params;
  },

  newTIProcSig: function(params,result,flags){
    var s = {
      params: rtl.newTIParams(params),
      resulttype: result,
      flags: flags
    };
    return s;
  }
}
rtl.module("System",[],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.LineEnding = "\n";
  this.sLineBreak = $mod.LineEnding;
  this.PathDelim = "\/";
  this.AllowDirectorySeparators = rtl.createSet(47);
  this.AllowDriveSeparators = rtl.createSet(58);
  this.ExtensionSeparator = ".";
  this.MaxSmallint = 32767;
  this.MinSmallint = -32768;
  this.MaxShortInt = 127;
  this.MinShortInt = -128;
  this.MaxByte = 0xFF;
  this.MaxWord = 0xFFFF;
  this.MaxLongint = 0x7fffffff;
  this.MaxCardinal = 0xffffffff;
  this.Maxint = 2147483647;
  this.IsMultiThread = false;
  $mod.$rtti.$inherited("Real",rtl.double,{});
  $mod.$rtti.$inherited("TDateTime",rtl.double,{});
  $mod.$rtti.$inherited("TTime",$mod.$rtti["TDateTime"],{});
  $mod.$rtti.$inherited("TDate",$mod.$rtti["TDateTime"],{});
  $mod.$rtti.$inherited("UInt64",rtl.nativeuint,{});
  $mod.$rtti.$inherited("QWord",rtl.nativeuint,{});
  $mod.$rtti.$inherited("Comp",rtl.nativeint,{});
  $mod.$rtti.$inherited("UnicodeString",rtl.string,{});
  $mod.$rtti.$inherited("WideString",rtl.string,{});
  this.TTextLineBreakStyle = {"0": "tlbsLF", tlbsLF: 0, "1": "tlbsCRLF", tlbsCRLF: 1, "2": "tlbsCR", tlbsCR: 2};
  $mod.$rtti.$Enum("TTextLineBreakStyle",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTextLineBreakStyle});
  rtl.recNewT($mod,"TSystemTime",function () {
    this.Year = 0;
    this.Month = 0;
    this.Day = 0;
    this.DayOfWeek = 0;
    this.Hour = 0;
    this.Minute = 0;
    this.Second = 0;
    this.MilliSecond = 0;
    this.$eq = function (b) {
      return (this.Year === b.Year) && (this.Month === b.Month) && (this.Day === b.Day) && (this.DayOfWeek === b.DayOfWeek) && (this.Hour === b.Hour) && (this.Minute === b.Minute) && (this.Second === b.Second) && (this.MilliSecond === b.MilliSecond);
    };
    this.$assign = function (s) {
      this.Year = s.Year;
      this.Month = s.Month;
      this.Day = s.Day;
      this.DayOfWeek = s.DayOfWeek;
      this.Hour = s.Hour;
      this.Minute = s.Minute;
      this.Second = s.Second;
      this.MilliSecond = s.MilliSecond;
      return this;
    };
    var $r = $mod.$rtti.$Record("TSystemTime",{});
    $r.addField("Year",rtl.word);
    $r.addField("Month",rtl.word);
    $r.addField("Day",rtl.word);
    $r.addField("DayOfWeek",rtl.word);
    $r.addField("Hour",rtl.word);
    $r.addField("Minute",rtl.word);
    $r.addField("Second",rtl.word);
    $r.addField("MilliSecond",rtl.word);
  });
  rtl.recNewT($mod,"TTimeStamp",function () {
    this.Time = 0;
    this.Date = 0;
    this.$eq = function (b) {
      return (this.Time === b.Time) && (this.Date === b.Date);
    };
    this.$assign = function (s) {
      this.Time = s.Time;
      this.Date = s.Date;
      return this;
    };
    var $r = $mod.$rtti.$Record("TTimeStamp",{});
    $r.addField("Time",rtl.longint);
    $r.addField("Date",rtl.longint);
  });
  rtl.recNewT($mod,"TGuid",function () {
    this.D1 = 0;
    this.D2 = 0;
    this.D3 = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.D4 = rtl.arraySetLength(null,0,8);
      return r;
    };
    this.$eq = function (b) {
      return (this.D1 === b.D1) && (this.D2 === b.D2) && (this.D3 === b.D3) && rtl.arrayEq(this.D4,b.D4);
    };
    this.$assign = function (s) {
      this.D1 = s.D1;
      this.D2 = s.D2;
      this.D3 = s.D3;
      this.D4 = s.D4.slice(0);
      return this;
    };
    var $r = $mod.$rtti.$Record("TGuid",{});
    $r.addField("D1",rtl.longword);
    $r.addField("D2",rtl.word);
    $r.addField("D3",rtl.word);
    $mod.$rtti.$StaticArray("TGuid.D4$a",{dims: [8], eltype: rtl.byte});
    $r.addField("D4",$mod.$rtti["TGuid.D4$a"]);
  });
  $mod.$rtti.$inherited("TGUIDString",rtl.string,{});
  $mod.$rtti.$inherited("PMethod",{comptype: $mod.$rtti["TMethod"]});
  rtl.recNewT($mod,"TMethod",function () {
    this.Code = null;
    this.Data = null;
    this.$eq = function (b) {
      return (this.Code === b.Code) && (this.Data === b.Data);
    };
    this.$assign = function (s) {
      this.Code = s.Code;
      this.Data = s.Data;
      return this;
    };
    var $r = $mod.$rtti.$Record("TMethod",{});
    $r.addField("Code",rtl.pointer);
    $r.addField("Data",rtl.pointer);
  });
  $mod.$rtti.$Class("TObject");
  $mod.$rtti.$ClassRef("TClass",{instancetype: $mod.$rtti["TObject"]});
  rtl.createClass($mod,"TObject",null,function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
    this.Create = function () {
      return this;
    };
    this.Destroy = function () {
    };
    this.Free = function () {
      this.$destroy("Destroy");
    };
    this.ClassType = function () {
      return this;
    };
    this.ClassNameIs = function (Name) {
      var Result = false;
      Result = $impl.SameText(Name,this.$classname);
      return Result;
    };
    this.InheritsFrom = function (aClass) {
      return (aClass!=null) && ((this==aClass) || aClass.isPrototypeOf(this));
    };
    this.MethodName = function (ACode) {
      var Result = "";
      Result = "";
      if (ACode === null) return Result;
      if (typeof(ACode)!=='function') return "";
      var i = 0;
      var TI = this.$rtti;
      if (rtl.isObject(ACode.scope)){
        // callback
        if (typeof ACode.fn === "string") return ACode.fn;
        ACode = ACode.fn;
      }
      // Not a callback, check rtti
      while ((Result === "") && (TI != null)) {
        i = 0;
        while ((Result === "") && (i < TI.methods.length)) {
          if (this[TI.getMethod(i).name] === ACode)
            Result=TI.getMethod(i).name;
          i += 1;
        };
        if (Result === "") TI = TI.ancestor;
      };
      return Result;
      return Result;
    };
    this.MethodAddress = function (AName) {
      var Result = null;
      Result = null;
      if (AName === "") return Result;
      var i = 0;
      var TI = this.$rtti;
      var N = "";
      var MN = "";
      N = AName.toLowerCase();
      while ((MN === "") && (TI != null)) {
        i = 0;
        while ((MN === "") && (i < TI.methods.length)) {
          if (TI.getMethod(i).name.toLowerCase() === N) MN = TI.getMethod(i).name;
          i += 1;
        };
        if (MN === "") TI = TI.ancestor;
      };
      if (MN !== "") Result = this[MN];
      return Result;
      return Result;
    };
    this.FieldAddress = function (aName) {
      var Result = null;
      Result = null;
      if (aName === "") return Result;
      var aClass = null;
      var i = 0;
      var ClassTI = null;
      var myName = aName.toLowerCase();
      var MemberTI = null;
      aClass = this.$class;
      while (aClass !== null) {
        ClassTI = aClass.$rtti;
        for (var $l1 = 0, $end2 = ClassTI.fields.length - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          MemberTI = ClassTI.getField(i);
          if (MemberTI.name.toLowerCase() === myName) {
             return MemberTI;
          };
        };
        aClass = aClass.$ancestor ? aClass.$ancestor : null;
      };
      return Result;
    };
    this.AfterConstruction = function () {
    };
    this.BeforeDestruction = function () {
    };
    this.GetInterface = function (iid, obj) {
      var Result = false;
      var i = iid.$intf;
      if (i){
        // iid is the private TGuid of an interface
        i = rtl.getIntfG(this,i.$guid,2);
        if (i){
          obj.set(i);
          return true;
        }
      };
      Result = this.GetInterfaceByStr(rtl.guidrToStr(iid),obj);
      return Result;
    };
    this.GetInterface$1 = function (iidstr, obj) {
      var Result = false;
      Result = this.GetInterfaceByStr(iidstr,obj);
      return Result;
    };
    this.GetInterfaceByStr = function (iidstr, obj) {
      var Result = false;
      if (!$mod.IObjectInstance["$str"]) $mod.IObjectInstance["$str"] = rtl.guidrToStr($mod.IObjectInstance);
      if (iidstr == $mod.IObjectInstance["$str"]) {
        obj.set(this);
        return true;
      };
      var i = rtl.getIntfG(this,iidstr,2);
      obj.set(i);
      return i!==null;
      Result = false;
      return Result;
    };
    this.GetInterfaceWeak = function (iid, obj) {
      var Result = false;
      Result = this.GetInterface(iid,obj);
      if (Result){
        var o = obj.get();
        if (o.$kind==='com'){
          o._Release();
        }
      };
      return Result;
    };
    this.Equals = function (Obj) {
      var Result = false;
      Result = Obj === this;
      return Result;
    };
    this.ToString = function () {
      var Result = "";
      Result = this.$classname;
      return Result;
    };
  });
  rtl.createClass($mod,"TCustomAttribute",$mod.TObject,function () {
  });
  $mod.$rtti.$DynArray("TCustomAttributeArray",{eltype: $mod.$rtti["TCustomAttribute"]});
  this.S_OK = 0;
  this.S_FALSE = 1;
  this.E_NOINTERFACE = -2147467262;
  this.E_UNEXPECTED = -2147418113;
  this.E_NOTIMPL = -2147467263;
  rtl.createInterface($mod,"IUnknown","{00000000-0000-0000-C000-000000000046}",["QueryInterface","_AddRef","_Release"],null,function () {
    this.$kind = "com";
    var $r = this.$rtti;
    $r.addMethod("QueryInterface",1,[["iid",$mod.$rtti["TGuid"],2],["obj",null,4]],rtl.longint);
    $r.addMethod("_AddRef",1,null,rtl.longint);
    $r.addMethod("_Release",1,null,rtl.longint);
  });
  rtl.createInterface($mod,"IInvokable","{88387EF6-BCEE-3E17-9E85-5D491ED4FC10}",[],$mod.IUnknown,function () {
  });
  rtl.createInterface($mod,"IEnumerator","{ECEC7568-4E50-30C9-A2F0-439342DE2ADB}",["GetCurrent","MoveNext","Reset"],$mod.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("GetCurrent",1,null,$mod.$rtti["TObject"]);
    $r.addMethod("MoveNext",1,null,rtl.boolean);
    $r.addMethod("Reset",0,null);
    $r.addProperty("Current",1,$mod.$rtti["TObject"],"GetCurrent","");
  });
  rtl.createInterface($mod,"IEnumerable","{9791C368-4E51-3424-A3CE-D4911D54F385}",["GetEnumerator"],$mod.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("GetEnumerator",1,null,$mod.$rtti["IEnumerator"]);
  });
  rtl.createClass($mod,"TInterfacedObject",$mod.TObject,function () {
    this.$init = function () {
      $mod.TObject.$init.call(this);
      this.fRefCount = 0;
    };
    this.QueryInterface = function (iid, obj) {
      var Result = 0;
      if (this.GetInterface(iid,obj)) {
        Result = 0}
       else Result = -2147467262;
      return Result;
    };
    this._AddRef = function () {
      var Result = 0;
      this.fRefCount += 1;
      Result = this.fRefCount;
      return Result;
    };
    this._Release = function () {
      var Result = 0;
      this.fRefCount -= 1;
      Result = this.fRefCount;
      if (this.fRefCount === 0) this.$destroy("Destroy");
      return Result;
    };
    this.BeforeDestruction = function () {
      if (this.fRefCount !== 0) rtl.raiseE('EHeapMemoryError');
    };
    rtl.addIntf(this,$mod.IUnknown);
  });
  $mod.$rtti.$ClassRef("TInterfacedClass",{instancetype: $mod.$rtti["TInterfacedObject"]});
  rtl.createClass($mod,"TAggregatedObject",$mod.TObject,function () {
    this.$init = function () {
      $mod.TObject.$init.call(this);
      this.fController = null;
    };
    this.GetController = function () {
      var Result = null;
      var $ok = false;
      try {
        Result = rtl.setIntfL(Result,this.fController);
        $ok = true;
      } finally {
        if (!$ok) rtl._Release(Result);
      };
      return Result;
    };
    this.QueryInterface = function (iid, obj) {
      var Result = 0;
      Result = this.fController.QueryInterface(iid,obj);
      return Result;
    };
    this._AddRef = function () {
      var Result = 0;
      Result = this.fController._AddRef();
      return Result;
    };
    this._Release = function () {
      var Result = 0;
      Result = this.fController._Release();
      return Result;
    };
    this.Create$1 = function (aController) {
      $mod.TObject.Create.call(this);
      this.fController = aController;
      return this;
    };
  });
  rtl.createClass($mod,"TContainedObject",$mod.TAggregatedObject,function () {
    this.QueryInterface = function (iid, obj) {
      var Result = 0;
      if (this.GetInterface(iid,obj)) {
        Result = 0}
       else Result = -2147467262;
      return Result;
    };
    rtl.addIntf(this,$mod.IUnknown);
  });
  this.IObjectInstance = $mod.TGuid.$clone({D1: 0xD91C9AF4, D2: 0x3C93, D3: 0x420F, D4: [0xA3,0x03,0xBF,0x5B,0xA8,0x2B,0xFD,0x23]});
  this.vtInteger = 0;
  this.vtBoolean = 1;
  this.vtExtended = 3;
  this.vtPointer = 5;
  this.vtObject = 7;
  this.vtClass = 8;
  this.vtWideChar = 9;
  this.vtCurrency = 12;
  this.vtInterface = 14;
  this.vtUnicodeString = 18;
  this.vtNativeInt = 19;
  this.vtJSValue = 20;
  $mod.$rtti.$inherited("PVarRec",{comptype: $mod.$rtti["TVarRec"]});
  rtl.recNewT($mod,"TVarRec",function () {
    this.VType = 0;
    this.VJSValue = undefined;
    this.$eq = function (b) {
      return (this.VType === b.VType) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue) && (this.VJSValue === b.VJSValue);
    };
    this.$assign = function (s) {
      this.VType = s.VType;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      this.VJSValue = s.VJSValue;
      return this;
    };
    var $r = $mod.$rtti.$Record("TVarRec",{});
    $r.addField("VType",rtl.byte);
    $r.addField("VJSValue",rtl.jsvalue);
    $r.addField("VJSValue",rtl.longint);
    $r.addField("VJSValue",rtl.boolean);
    $r.addField("VJSValue",rtl.double);
    $r.addField("VJSValue",rtl.pointer);
    $r.addField("VJSValue",$mod.$rtti["TObject"]);
    $r.addField("VJSValue",$mod.$rtti["TClass"]);
    $r.addField("VJSValue",rtl.char);
    $r.addField("VJSValue",rtl.nativeint);
    $r.addField("VJSValue",rtl.pointer);
    $r.addField("VJSValue",$mod.$rtti["UnicodeString"]);
    $r.addField("VJSValue",rtl.nativeint);
  });
  $mod.$rtti.$DynArray("TVarRecArray",{eltype: $mod.$rtti["TVarRec"]});
  this.VarRecs = function () {
    var Result = [];
    var i = 0;
    var v = null;
    Result = [];
    while (i < arguments.length) {
      v = $mod.TVarRec.$new();
      v.VType = Math.floor(arguments[i]);
      i += 1;
      v.VJSValue = arguments[i];
      i += 1;
      Result.push($mod.TVarRec.$clone(v));
    };
    return Result;
  };
  this.IsConsole = false;
  this.FirstDotAtFileNameStartIsExtension = false;
  $mod.$rtti.$ProcVar("TOnParamCount",{procsig: rtl.newTIProcSig(null,rtl.longint)});
  $mod.$rtti.$ProcVar("TOnParamStr",{procsig: rtl.newTIProcSig([["Index",rtl.longint]],rtl.string)});
  this.OnParamCount = null;
  this.OnParamStr = null;
  this.ParamCount = function () {
    var Result = 0;
    if ($mod.OnParamCount != null) {
      Result = $mod.OnParamCount()}
     else Result = 0;
    return Result;
  };
  this.ParamStr = function (Index) {
    var Result = "";
    if ($mod.OnParamStr != null) {
      Result = $mod.OnParamStr(Index)}
     else if (Index === 0) {
      Result = "js"}
     else Result = "";
    return Result;
  };
  this.Frac = function (A) {
    return A % 1;
  };
  this.Odd = function (A) {
    return A&1 != 0;
  };
  this.Random = function (Range) {
    return Math.floor(Math.random()*Range);
  };
  this.Sqr = function (A) {
    return A*A;
  };
  this.Sqr$1 = function (A) {
    return A*A;
  };
  this.Trunc = function (A) {
    if (!Math.trunc) {
      Math.trunc = function(v) {
        v = +v;
        if (!isFinite(v)) return v;
        return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
      };
    }
    $mod.Trunc = Math.trunc;
    return Math.trunc(A);
  };
  this.DefaultTextLineBreakStyle = $mod.TTextLineBreakStyle.tlbsLF;
  this.Int = function (A) {
    var Result = 0.0;
    Result = $mod.Trunc(A);
    return Result;
  };
  this.Copy = function (S, Index, Size) {
    if (Index<1) Index = 1;
    return (Size>0) ? S.substring(Index-1,Index+Size-1) : "";
  };
  this.Copy$1 = function (S, Index) {
    if (Index<1) Index = 1;
    return S.substr(Index-1);
  };
  this.Delete = function (S, Index, Size) {
    var h = "";
    if ((Index < 1) || (Index > S.get().length) || (Size <= 0)) return;
    h = S.get();
    S.set($mod.Copy(h,1,Index - 1) + $mod.Copy$1(h,Index + Size));
  };
  this.Pos = function (Search, InString) {
    return InString.indexOf(Search)+1;
  };
  this.Insert = function (Insertion, Target, Index) {
    var t = "";
    if (Insertion === "") return;
    t = Target.get();
    if (Index < 1) {
      Target.set(Insertion + t)}
     else if (Index > t.length) {
      Target.set(t + Insertion)}
     else Target.set($mod.Copy(t,1,Index - 1) + Insertion + $mod.Copy(t,Index,t.length));
  };
  this.upcase = function (c) {
    return c.toUpperCase();
  };
  this.val = function (S, NI, Code) {
    NI.set($impl.valint(S,-4503599627370496,4503599627370495,Code));
  };
  this.val$1 = function (S, NI, Code) {
    var x = 0.0;
    x = Number(S);
    if (isNaN(x) || (x !== $mod.Int(x)) || (x < 0)) {
      Code.set(1)}
     else {
      Code.set(0);
      NI.set($mod.Trunc(x));
    };
  };
  this.val$2 = function (S, SI, Code) {
    SI.set($impl.valint(S,-128,127,Code));
  };
  this.val$3 = function (S, B, Code) {
    B.set($impl.valint(S,0,255,Code));
  };
  this.val$4 = function (S, SI, Code) {
    SI.set($impl.valint(S,-32768,32767,Code));
  };
  this.val$5 = function (S, W, Code) {
    W.set($impl.valint(S,0,65535,Code));
  };
  this.val$6 = function (S, I, Code) {
    I.set($impl.valint(S,-2147483648,2147483647,Code));
  };
  this.val$7 = function (S, C, Code) {
    C.set($impl.valint(S,0,4294967295,Code));
  };
  this.val$8 = function (S, d, Code) {
    var x = 0.0;
    x = Number(S);
    if (isNaN(x)) {
      Code.set(1)}
     else {
      Code.set(0);
      d.set(x);
    };
  };
  this.val$9 = function (S, b, Code) {
    if ($impl.SameText(S,"true")) {
      Code.set(0);
      b.set(true);
    } else if ($impl.SameText(S,"false")) {
      Code.set(0);
      b.set(false);
    } else Code.set(1);
  };
  this.StringOfChar = function (c, l) {
    var Result = "";
    var i = 0;
    Result = "";
    for (var $l1 = 1, $end2 = l; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = Result + c;
    };
    return Result;
  };
  this.Write = function () {
    var i = 0;
    for (var $l1 = 0, $end2 = arguments.length - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if ($impl.WriteCallBack != null) {
        $impl.WriteCallBack(arguments[i],false)}
       else $impl.WriteBuf = $impl.WriteBuf + ("" + arguments[i]);
    };
  };
  this.Writeln = function () {
    var i = 0;
    var l = 0;
    var s = "";
    l = arguments.length - 1;
    if ($impl.WriteCallBack != null) {
      for (var $l1 = 0, $end2 = l; $l1 <= $end2; $l1++) {
        i = $l1;
        $impl.WriteCallBack(arguments[i],i === l);
      };
    } else {
      s = $impl.WriteBuf;
      for (var $l3 = 0, $end4 = l; $l3 <= $end4; $l3++) {
        i = $l3;
        s = s + ("" + arguments[i]);
      };
      console.log(s);
      $impl.WriteBuf = "";
    };
  };
  $mod.$rtti.$ProcVar("TConsoleHandler",{procsig: rtl.newTIProcSig([["S",rtl.jsvalue],["NewLine",rtl.boolean]])});
  this.SetWriteCallBack = function (H) {
    var Result = null;
    Result = $impl.WriteCallBack;
    $impl.WriteCallBack = H;
    return Result;
  };
  this.Assigned = function (V) {
    return (V!=undefined) && (V!=null) && (!rtl.isArray(V) || (V.length > 0));
  };
  this.StrictEqual = function (A, B) {
    return A === B;
  };
  this.StrictInequal = function (A, B) {
    return A !== B;
  };
  $mod.$init = function () {
    rtl.exitcode = 0;
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.SameText = function (s1, s2) {
    return s1.toLowerCase() == s2.toLowerCase();
  };
  $impl.WriteBuf = "";
  $impl.WriteCallBack = null;
  $impl.valint = function (S, MinVal, MaxVal, Code) {
    var Result = 0;
    var x = 0.0;
    x = Number(S);
    if (isNaN(x)) {
      var $tmp1 = $mod.Copy(S,1,1);
      if ($tmp1 === "$") {
        x = Number("0x" + $mod.Copy$1(S,2))}
       else if ($tmp1 === "&") {
        x = Number("0o" + $mod.Copy$1(S,2))}
       else if ($tmp1 === "%") {
        x = Number("0b" + $mod.Copy$1(S,2))}
       else {
        Code.set(1);
        return Result;
      };
    };
    if (isNaN(x) || (x !== $mod.Int(x))) {
      Code.set(1)}
     else if ((x < MinVal) || (x > MaxVal)) {
      Code.set(2)}
     else {
      Result = $mod.Trunc(x);
      Code.set(0);
    };
    return Result;
  };
});
rtl.module("RTLConsts",["System"],function () {
  "use strict";
  var $mod = this;
  this.SArgumentMissing = 'Missing argument in format "%s"';
  this.SInvalidFormat = 'Invalid format specifier : "%s"';
  this.SInvalidArgIndex = 'Invalid argument index in format: "%s"';
  this.SListCapacityError = "List capacity (%s) exceeded.";
  this.SListCountError = "List count (%s) out of bounds.";
  this.SListIndexError = "List index (%s) out of bounds";
  this.SSortedListError = "Operation not allowed on sorted list";
  this.SDuplicateString = "String list does not allow duplicates";
  this.SErrFindNeedsSortedList = "Cannot use find on unsorted list";
  this.SInvalidName = 'Invalid component name: "%s"';
  this.SInvalidBoolean = '"%s" is not a valid boolean.';
  this.SDuplicateName = 'Duplicate component name: "%s"';
  this.SErrInvalidDate = 'Invalid date: "%s"';
  this.SErrInvalidTimeFormat = 'Invalid time format: "%s"';
  this.SInvalidDateFormat = 'Invalid date format: "%s"';
  this.SCantReadPropertyS = 'Cannot read property "%s"';
  this.SCantWritePropertyS = 'Cannot write property "%s"';
  this.SErrPropertyNotFound = 'Unknown property: "%s"';
  this.SIndexedPropertyNeedsParams = 'Indexed property "%s" needs parameters';
  this.SErrInvalidTypecast = "Invalid class typecast";
  this.SErrInvalidInteger = 'Invalid integer value: "%s"';
  this.SErrInvalidFloat = 'Invalid floating-point value: "%s"';
  this.SInvalidDateTime = "Invalid date-time value: %s";
  this.SInvalidCurrency = "Invalid currency value: %s";
  this.SErrInvalidDayOfWeek = "%d is not a valid day of the week";
  this.SErrInvalidTimeStamp = 'Invalid date\/timestamp : "%s"';
  this.SErrInvalidDateWeek = "%d %d %d is not a valid dateweek";
  this.SErrInvalidDayOfYear = "Year %d does not have a day number %d";
  this.SErrInvalidDateMonthWeek = "Year %d, month %d, Week %d and day %d is not a valid date.";
  this.SErrInvalidDayOfWeekInMonth = "Year %d Month %d NDow %d DOW %d is not a valid date";
  this.SInvalidJulianDate = "%f Julian cannot be represented as a DateTime";
  this.SErrInvalidHourMinuteSecMsec = "%d:%d:%d.%d is not a valid time specification";
  this.SInvalidGUID = '"%s" is not a valid GUID value';
  this.SEmptyStreamIllegalReader = "Illegal Nil stream for TReader constructor";
  this.SInvalidPropertyValue = "Invalid value for property";
  this.SInvalidImage = "Invalid stream format";
  this.SUnknownProperty = 'Unknown property: "%s"';
  this.SUnknownPropertyType = "Unknown property type %d";
  this.SAncestorNotFound = 'Ancestor class for "%s" not found.';
  this.SUnsupportedPropertyVariantType = "Unsupported property variant type %d";
  this.SPropertyException = "Error reading %s%s%s: %s";
  this.SInvalidPropertyPath = "Invalid property path";
  this.SReadOnlyProperty = "Property is read-only";
  this.SClassNotFound = 'Class "%s" not found';
  this.SEmptyStreamIllegalWriter = "Illegal Nil stream for TWriter constructor";
  this.SErrInvalidPropertyType = "Invalid property type from streamed property: %d";
  this.SParserExpected = "Wrong token type: %s expected";
  this.SParserInvalidFloat = "Invalid floating point number: %s";
  this.SParserInvalidInteger = "Invalid integer number: %s";
  this.SParserUnterminatedString = "Unterminated string";
  this.SParserWrongTokenType = "Wrong token type: %s expected but %s found";
  this.SParserWrongTokenSymbol = "Wrong token symbol: %s expected but %s found";
  this.SParserLocInfo = " (at %d,%d, stream offset %.8x)";
  this.SParserUnterminatedBinValue = "Unterminated byte value";
  this.SParserInvalidProperty = "Invalid property";
});
rtl.module("Types",["System"],function () {
  "use strict";
  var $mod = this;
  this.TDirection = {"0": "FromBeginning", FromBeginning: 0, "1": "FromEnd", FromEnd: 1};
  $mod.$rtti.$Enum("TDirection",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TDirection});
  $mod.$rtti.$DynArray("TBooleanDynArray",{eltype: rtl.boolean});
  $mod.$rtti.$DynArray("TIntegerDynArray",{eltype: rtl.longint});
  $mod.$rtti.$DynArray("TNativeIntDynArray",{eltype: rtl.nativeint});
  $mod.$rtti.$DynArray("TStringDynArray",{eltype: rtl.string});
  $mod.$rtti.$DynArray("TDoubleDynArray",{eltype: rtl.double});
  $mod.$rtti.$DynArray("TJSValueDynArray",{eltype: rtl.jsvalue});
  $mod.$rtti.$DynArray("TObjectDynArray",{eltype: pas.System.$rtti["TObject"]});
  this.TDuplicates = {"0": "dupIgnore", dupIgnore: 0, "1": "dupAccept", dupAccept: 1, "2": "dupError", dupError: 2};
  $mod.$rtti.$Enum("TDuplicates",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TDuplicates});
  $mod.$rtti.$MethodVar("TListCallback",{procsig: rtl.newTIProcSig([["data",rtl.jsvalue],["arg",rtl.jsvalue]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TListStaticCallback",{procsig: rtl.newTIProcSig([["data",rtl.jsvalue],["arg",rtl.jsvalue]])});
  rtl.recNewT($mod,"TSize",function () {
    this.cx = 0;
    this.cy = 0;
    this.$eq = function (b) {
      return (this.cx === b.cx) && (this.cy === b.cy);
    };
    this.$assign = function (s) {
      this.cx = s.cx;
      this.cy = s.cy;
      return this;
    };
    var $r = $mod.$rtti.$Record("TSize",{});
    $r.addField("cx",rtl.longint);
    $r.addField("cy",rtl.longint);
  });
  rtl.recNewT($mod,"TPoint",function () {
    this.x = 0;
    this.y = 0;
    this.$eq = function (b) {
      return (this.x === b.x) && (this.y === b.y);
    };
    this.$assign = function (s) {
      this.x = s.x;
      this.y = s.y;
      return this;
    };
    var $r = $mod.$rtti.$Record("TPoint",{});
    $r.addField("x",rtl.longint);
    $r.addField("y",rtl.longint);
  });
  rtl.recNewT($mod,"TRect",function () {
    this.Left = 0;
    this.Top = 0;
    this.Right = 0;
    this.Bottom = 0;
    this.$eq = function (b) {
      return (this.Left === b.Left) && (this.Top === b.Top) && (this.Right === b.Right) && (this.Bottom === b.Bottom);
    };
    this.$assign = function (s) {
      this.Left = s.Left;
      this.Top = s.Top;
      this.Right = s.Right;
      this.Bottom = s.Bottom;
      return this;
    };
    var $r = $mod.$rtti.$Record("TRect",{});
    $r.addField("Left",rtl.longint);
    $r.addField("Top",rtl.longint);
    $r.addField("Right",rtl.longint);
    $r.addField("Bottom",rtl.longint);
  });
  this.EqualRect = function (r1, r2) {
    var Result = false;
    Result = (r1.Left === r2.Left) && (r1.Right === r2.Right) && (r1.Top === r2.Top) && (r1.Bottom === r2.Bottom);
    return Result;
  };
  this.Rect = function (Left, Top, Right, Bottom) {
    var Result = $mod.TRect.$new();
    Result.Left = Left;
    Result.Top = Top;
    Result.Right = Right;
    Result.Bottom = Bottom;
    return Result;
  };
  this.Bounds = function (ALeft, ATop, AWidth, AHeight) {
    var Result = $mod.TRect.$new();
    Result.Left = ALeft;
    Result.Top = ATop;
    Result.Right = ALeft + AWidth;
    Result.Bottom = ATop + AHeight;
    return Result;
  };
  this.Point = function (x, y) {
    var Result = $mod.TPoint.$new();
    Result.x = x;
    Result.y = y;
    return Result;
  };
  this.PtInRect = function (aRect, p) {
    var Result = false;
    Result = (p.y >= aRect.Top) && (p.y < aRect.Bottom) && (p.x >= aRect.Left) && (p.x < aRect.Right);
    return Result;
  };
  this.IntersectRect = function (aRect, R1, R2) {
    var Result = false;
    var lRect = $mod.TRect.$new();
    lRect.$assign(R1);
    if (R2.Left > R1.Left) lRect.Left = R2.Left;
    if (R2.Top > R1.Top) lRect.Top = R2.Top;
    if (R2.Right < R1.Right) lRect.Right = R2.Right;
    if (R2.Bottom < R1.Bottom) lRect.Bottom = R2.Bottom;
    if ($mod.IsRectEmpty(lRect)) {
      aRect.$assign($mod.Rect(0,0,0,0));
      Result = false;
    } else {
      Result = true;
      aRect.$assign(lRect);
    };
    return Result;
  };
  this.UnionRect = function (aRect, R1, R2) {
    var Result = false;
    var lRect = $mod.TRect.$new();
    lRect.$assign(R1);
    if (R2.Left < R1.Left) lRect.Left = R2.Left;
    if (R2.Top < R1.Top) lRect.Top = R2.Top;
    if (R2.Right > R1.Right) lRect.Right = R2.Right;
    if (R2.Bottom > R1.Bottom) lRect.Bottom = R2.Bottom;
    if ($mod.IsRectEmpty(lRect)) {
      aRect.$assign($mod.Rect(0,0,0,0));
      Result = false;
    } else {
      aRect.$assign(lRect);
      Result = true;
    };
    return Result;
  };
  this.IsRectEmpty = function (aRect) {
    var Result = false;
    Result = (aRect.Right <= aRect.Left) || (aRect.Bottom <= aRect.Top);
    return Result;
  };
  this.OffsetRect = function (aRect, DX, DY) {
    var Result = false;
    aRect.Left += DX;
    aRect.Top += DY;
    aRect.Right += DX;
    aRect.Bottom += DY;
    Result = true;
    return Result;
  };
  this.CenterPoint = function (aRect) {
    var Result = $mod.TPoint.$new();
    function Avg(a, b) {
      var Result = 0;
      if (a < b) {
        Result = a + ((b - a) >>> 1)}
       else Result = b + ((a - b) >>> 1);
      return Result;
    };
    Result.x = Avg(aRect.Left,aRect.Right);
    Result.y = Avg(aRect.Top,aRect.Bottom);
    return Result;
  };
  this.InflateRect = function (aRect, dx, dy) {
    var Result = false;
    aRect.Left -= dx;
    aRect.Top -= dy;
    aRect.Right += dx;
    aRect.Bottom += dy;
    Result = true;
    return Result;
  };
  this.Size = function (AWidth, AHeight) {
    var Result = $mod.TSize.$new();
    Result.cx = AWidth;
    Result.cy = AHeight;
    return Result;
  };
  this.Size$1 = function (aRect) {
    var Result = $mod.TSize.$new();
    Result.cx = aRect.Right - aRect.Left;
    Result.cy = aRect.Bottom - aRect.Top;
    return Result;
  };
});
rtl.module("JS",["System","Types"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"EJS",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FMessage = "";
    };
    this.Create$1 = function (Msg) {
      this.FMessage = Msg;
      return this;
    };
  });
  $mod.$rtti.$DynArray("TJSObjectDynArray",{eltype: $mod.$rtti["TJSObject"]});
  $mod.$rtti.$DynArray("TJSObjectDynArrayArray",{eltype: $mod.$rtti["TJSObjectDynArray"]});
  $mod.$rtti.$DynArray("TJSStringDynArray",{eltype: rtl.string});
  $mod.$rtti.$RefToProcVar("TJSSetEventProc",{procsig: rtl.newTIProcSig([["value",rtl.jsvalue],["key",rtl.nativeint],["set_",$mod.$rtti["TJSSet"]]])});
  $mod.$rtti.$RefToProcVar("TJSSetProcCallBack",{procsig: rtl.newTIProcSig([["value",rtl.jsvalue],["key",rtl.jsvalue]])});
  $mod.$rtti.$RefToProcVar("TJSMapFunctionCallBack",{procsig: rtl.newTIProcSig([["arg",rtl.jsvalue]],rtl.jsvalue)});
  $mod.$rtti.$RefToProcVar("TJSMapProcCallBack",{procsig: rtl.newTIProcSig([["value",rtl.jsvalue],["key",rtl.jsvalue]])});
  rtl.recNewT($mod,"TLocaleCompareOptions",function () {
    this.localematched = "";
    this.usage = "";
    this.sensitivity = "";
    this.ignorePunctuation = false;
    this.numeric = false;
    this.caseFirst = "";
    this.$eq = function (b) {
      return (this.localematched === b.localematched) && (this.usage === b.usage) && (this.sensitivity === b.sensitivity) && (this.ignorePunctuation === b.ignorePunctuation) && (this.numeric === b.numeric) && (this.caseFirst === b.caseFirst);
    };
    this.$assign = function (s) {
      this.localematched = s.localematched;
      this.usage = s.usage;
      this.sensitivity = s.sensitivity;
      this.ignorePunctuation = s.ignorePunctuation;
      this.numeric = s.numeric;
      this.caseFirst = s.caseFirst;
      return this;
    };
    var $r = $mod.$rtti.$Record("TLocaleCompareOptions",{});
    $r.addField("localematched",rtl.string);
    $r.addField("usage",rtl.string);
    $r.addField("sensitivity",rtl.string);
    $r.addField("ignorePunctuation",rtl.boolean);
    $r.addField("numeric",rtl.boolean);
    $r.addField("caseFirst",rtl.string);
  });
  $mod.$rtti.$RefToProcVar("TReplaceCallBack",{procsig: rtl.newTIProcSig([["match",rtl.string,2]],rtl.string,2)});
  $mod.$rtti.$RefToProcVar("TReplaceCallBack0",{procsig: rtl.newTIProcSig([["match",rtl.string,2],["offset",rtl.longint],["AString",rtl.string]],rtl.string)});
  $mod.$rtti.$RefToProcVar("TReplaceCallBack1",{procsig: rtl.newTIProcSig([["match",rtl.string,2],["p1",rtl.string,2],["offset",rtl.longint],["AString",rtl.string]],rtl.string)});
  $mod.$rtti.$RefToProcVar("TReplaceCallBack2",{procsig: rtl.newTIProcSig([["match",rtl.string,2],["p1",rtl.string,2],["p2",rtl.string,2],["offset",rtl.longint],["AString",rtl.string]],rtl.string)});
  $mod.$rtti.$RefToProcVar("TJSArrayEventProc",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSArray"]]])});
  $mod.$rtti.$RefToProcVar("TJSArrayEvent",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSArray"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSArrayMapEvent",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSArray"]]],rtl.jsvalue)});
  $mod.$rtti.$RefToProcVar("TJSArrayReduceEvent",{procsig: rtl.newTIProcSig([["accumulator",rtl.jsvalue],["currentValue",rtl.jsvalue],["currentIndex",rtl.nativeint],["anArray",$mod.$rtti["TJSArray"]]],rtl.jsvalue)});
  $mod.$rtti.$RefToProcVar("TJSArrayCompareEvent",{procsig: rtl.newTIProcSig([["a",rtl.jsvalue],["b",rtl.jsvalue]],rtl.nativeint)});
  $mod.$rtti.$ProcVar("TJSTypedArrayCallBack",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSTypedArray"]]],rtl.boolean)});
  $mod.$rtti.$MethodVar("TJSTypedArrayEvent",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSTypedArray"]]],rtl.boolean), methodkind: 1});
  $mod.$rtti.$ProcVar("TJSTypedArrayMapCallBack",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSTypedArray"]]],rtl.jsvalue)});
  $mod.$rtti.$MethodVar("TJSTypedArrayMapEvent",{procsig: rtl.newTIProcSig([["element",rtl.jsvalue],["index",rtl.nativeint],["anArray",$mod.$rtti["TJSTypedArray"]]],rtl.jsvalue), methodkind: 1});
  $mod.$rtti.$ProcVar("TJSTypedArrayReduceCallBack",{procsig: rtl.newTIProcSig([["accumulator",rtl.jsvalue],["currentValue",rtl.jsvalue],["currentIndex",rtl.nativeint],["anArray",$mod.$rtti["TJSTypedArray"]]],rtl.jsvalue)});
  $mod.$rtti.$ProcVar("TJSTypedArrayCompareCallBack",{procsig: rtl.newTIProcSig([["a",rtl.jsvalue],["b",rtl.jsvalue]],rtl.nativeint)});
  $mod.$rtti.$RefToProcVar("TJSPromiseResolver",{procsig: rtl.newTIProcSig([["aValue",rtl.jsvalue]],rtl.jsvalue)});
  $mod.$rtti.$RefToProcVar("TJSPromiseExecutor",{procsig: rtl.newTIProcSig([["resolve",$mod.$rtti["TJSPromiseResolver"]],["reject",$mod.$rtti["TJSPromiseResolver"]]])});
  $mod.$rtti.$RefToProcVar("TJSPromiseFinallyHandler",{procsig: rtl.newTIProcSig(null)});
  $mod.$rtti.$DynArray("TJSPromiseArray",{eltype: $mod.$rtti["TJSPromise"]});
  this.New = function (aElements) {
    var Result = null;
    var L = 0;
    var I = 0;
    var S = "";
    L = rtl.length(aElements);
    if ((L % 2) === 1) throw $mod.EJS.$create("Create$1",["Number of arguments must be even"]);
    I = 0;
    while (I < L) {
      if (!rtl.isString(aElements[I])) {
        S = String(I);
        throw $mod.EJS.$create("Create$1",["Argument " + S + " must be a string."]);
      };
      I += 2;
    };
    I = 0;
    Result = new Object();
    while (I < L) {
      S = "" + aElements[I];
      Result[S] = aElements[I + 1];
      I += 2;
    };
    return Result;
  };
  this.JSDelete = function (Obj, PropName) {
    return delete Obj[PropName];
  };
  this.hasValue = function (v) {
    if(v){ return true; } else { return false; };
  };
  this.isBoolean = function (v) {
    return typeof(v) == 'boolean';
  };
  this.isDate = function (v) {
    return (v instanceof Date);
  };
  this.isCallback = function (v) {
    return rtl.isObject(v) && rtl.isObject(v.scope) && (rtl.isString(v.fn) || rtl.isFunction(v.fn));
  };
  this.isChar = function (v) {
    return (typeof(v)!="string") && (v.length==1);
  };
  this.isClass = function (v) {
    return (typeof(v)=="object") && (v!=null) && (v.$class == v);
  };
  this.isClassInstance = function (v) {
    return (typeof(v)=="object") && (v!=null) && (v.$class == Object.getPrototypeOf(v));
  };
  this.isInteger = function (v) {
    return Math.floor(v)===v;
  };
  this.isNull = function (v) {
    return v === null;
  };
  this.isRecord = function (v) {
    return (typeof(v)==="object")
    && (typeof(v.$new)==="function")
    && (typeof(v.$clone)==="function")
    && (typeof(v.$eq)==="function")
    && (typeof(v.$assign)==="function");
  };
  this.isUndefined = function (v) {
    return v == undefined;
  };
  this.isDefined = function (v) {
    return !(v == undefined);
  };
  this.isUTF16Char = function (v) {
    if (typeof(v)!="string") return false;
    if ((v.length==0) || (v.length>2)) return false;
    var code = v.charCodeAt(0);
    if (code < 0xD800){
      if (v.length == 1) return true;
    } else if (code <= 0xDBFF){
      if (v.length==2){
        code = v.charCodeAt(1);
        if (code >= 0xDC00 && code <= 0xDFFF) return true;
      };
    };
    return false;
  };
  this.jsInstanceOf = function (aFunction, aFunctionWithPrototype) {
    return aFunction instanceof aFunctionWithPrototype;
  };
  this.toNumber = function (v) {
    return v-0;
  };
  this.toInteger = function (v) {
    var Result = 0;
    if ($mod.isInteger(v)) {
      Result = Math.floor(v)}
     else Result = 0;
    return Result;
  };
  this.toObject = function (Value) {
    var Result = null;
    if (rtl.isObject(Value)) {
      Result = rtl.getObject(Value)}
     else Result = null;
    return Result;
  };
  this.toArray = function (Value) {
    var Result = null;
    if (rtl.isArray(Value)) {
      Result = rtl.getObject(Value)}
     else Result = null;
    return Result;
  };
  this.toBoolean = function (Value) {
    var Result = false;
    if ($mod.isBoolean(Value)) {
      Result = !(Value == false)}
     else Result = false;
    return Result;
  };
  this.ToString = function (Value) {
    var Result = "";
    if (rtl.isString(Value)) {
      Result = "" + Value}
     else Result = "";
    return Result;
  };
  this.TJSValueType = {"0": "jvtNull", jvtNull: 0, "1": "jvtBoolean", jvtBoolean: 1, "2": "jvtInteger", jvtInteger: 2, "3": "jvtFloat", jvtFloat: 3, "4": "jvtString", jvtString: 4, "5": "jvtObject", jvtObject: 5, "6": "jvtArray", jvtArray: 6};
  $mod.$rtti.$Enum("TJSValueType",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TJSValueType});
  this.GetValueType = function (JS) {
    var Result = 0;
    var t = "";
    if ($mod.isNull(JS)) {
      Result = $mod.TJSValueType.jvtNull}
     else {
      t = typeof(JS);
      if (t === "string") {
        Result = $mod.TJSValueType.jvtString}
       else if (t === "boolean") {
        Result = $mod.TJSValueType.jvtBoolean}
       else if (t === "object") {
        if (rtl.isArray(JS)) {
          Result = $mod.TJSValueType.jvtArray}
         else Result = $mod.TJSValueType.jvtObject;
      } else if (t === "number") if ($mod.isInteger(JS)) {
        Result = $mod.TJSValueType.jvtInteger}
       else Result = $mod.TJSValueType.jvtFloat;
    };
    return Result;
  };
  this.URLToArrayOfString = function (URL) {
    var Result = [];
    var a = [];
    var cors_api_url = "";
    cors_api_url = "";
    var xhr = new XMLHttpRequest();
        xhr.open("GET", cors_api_url + URL, false);
        xhr.send();
    
        if (xhr.status==200)
        {
          var obj = xhr.responseText.split(/\r\n|\n/);
          for (var i = 0; i < obj.length; i++) {
            a.push(obj[i]);
          }
        };
    Result = a;
    return Result;
  };
});
rtl.module("SysUtils",["System","RTLConsts","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.FreeAndNil = function (Obj) {
    var o = null;
    o = Obj.get();
    if (o === null) return;
    Obj.set(null);
    o.$destroy("Destroy");
  };
  $mod.$rtti.$ProcVar("TProcedure",{procsig: rtl.newTIProcSig(null)});
  this.FloatRecDigits = 19;
  rtl.recNewT($mod,"TFloatRec",function () {
    this.Exponent = 0;
    this.Negative = false;
    this.$new = function () {
      var r = Object.create(this);
      r.Digits = rtl.arraySetLength(null,"",19);
      return r;
    };
    this.$eq = function (b) {
      return (this.Exponent === b.Exponent) && (this.Negative === b.Negative) && rtl.arrayEq(this.Digits,b.Digits);
    };
    this.$assign = function (s) {
      this.Exponent = s.Exponent;
      this.Negative = s.Negative;
      this.Digits = s.Digits.slice(0);
      return this;
    };
    var $r = $mod.$rtti.$Record("TFloatRec",{});
    $r.addField("Exponent",rtl.longint);
    $r.addField("Negative",rtl.boolean);
    $mod.$rtti.$StaticArray("TFloatRec.Digits$a",{dims: [19], eltype: rtl.char});
    $r.addField("Digits",$mod.$rtti["TFloatRec.Digits$a"]);
  });
  this.TEndian = {"0": "Little", Little: 0, "1": "Big", Big: 1};
  $mod.$rtti.$Enum("TEndian",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TEndian});
  $mod.$rtti.$StaticArray("TByteArray",{dims: [32768], eltype: rtl.byte});
  $mod.$rtti.$StaticArray("TWordArray",{dims: [16384], eltype: rtl.word});
  $mod.$rtti.$DynArray("TBytes",{eltype: rtl.byte});
  $mod.$rtti.$DynArray("TStringArray",{eltype: rtl.string});
  $mod.$rtti.$StaticArray("TMonthNameArray",{dims: [12], eltype: rtl.string});
  $mod.$rtti.$StaticArray("TDayTable",{dims: [12], eltype: rtl.word});
  $mod.$rtti.$StaticArray("TWeekNameArray",{dims: [7], eltype: rtl.string});
  $mod.$rtti.$StaticArray("TDayNames",{dims: [7], eltype: rtl.string});
  rtl.createClass($mod,"Exception",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.fMessage = "";
      this.fHelpContext = 0;
    };
    this.Create$1 = function (Msg) {
      this.fMessage = Msg;
      return this;
    };
    this.CreateFmt = function (Msg, Args) {
      this.Create$1($mod.Format(Msg,Args));
      return this;
    };
    this.CreateHelp = function (Msg, AHelpContext) {
      this.Create$1(Msg);
      this.fHelpContext = AHelpContext;
      return this;
    };
    this.CreateFmtHelp = function (Msg, Args, AHelpContext) {
      this.Create$1($mod.Format(Msg,Args));
      this.fHelpContext = AHelpContext;
      return this;
    };
    this.ToString = function () {
      var Result = "";
      Result = this.$classname + ": " + this.fMessage;
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("ExceptClass",{instancetype: $mod.$rtti["Exception"]});
  rtl.createClass($mod,"EExternal",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EMathError",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EInvalidOp",$mod.EMathError,function () {
  });
  rtl.createClass($mod,"EZeroDivide",$mod.EMathError,function () {
  });
  rtl.createClass($mod,"EOverflow",$mod.EMathError,function () {
  });
  rtl.createClass($mod,"EUnderflow",$mod.EMathError,function () {
  });
  rtl.createClass($mod,"EAbort",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EInvalidCast",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EAssertionFailed",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EObjectCheck",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EConvertError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EFormatError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EIntError",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EDivByZero",$mod.EIntError,function () {
  });
  rtl.createClass($mod,"ERangeError",$mod.EIntError,function () {
  });
  rtl.createClass($mod,"EIntOverflow",$mod.EIntError,function () {
  });
  rtl.createClass($mod,"EInOutError",$mod.Exception,function () {
    this.$init = function () {
      $mod.Exception.$init.call(this);
      this.ErrorCode = 0;
    };
  });
  rtl.createClass($mod,"EHeapMemoryError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EExternalException",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EInvalidPointer",$mod.EHeapMemoryError,function () {
  });
  rtl.createClass($mod,"EOutOfMemory",$mod.EHeapMemoryError,function () {
  });
  rtl.createClass($mod,"EVariantError",$mod.Exception,function () {
    this.$init = function () {
      $mod.Exception.$init.call(this);
      this.ErrCode = 0;
    };
    this.CreateCode = function (Code) {
      this.ErrCode = Code;
      return this;
    };
  });
  rtl.createClass($mod,"EAccessViolation",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EBusError",$mod.EAccessViolation,function () {
  });
  rtl.createClass($mod,"EPrivilege",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EStackOverflow",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EControlC",$mod.EExternal,function () {
  });
  rtl.createClass($mod,"EAbstractError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EPropReadOnly",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EPropWriteOnly",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EIntfCastError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EInvalidContainer",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EInvalidInsert",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EPackageError",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EOSError",$mod.Exception,function () {
    this.$init = function () {
      $mod.Exception.$init.call(this);
      this.ErrorCode = 0;
    };
  });
  rtl.createClass($mod,"ESafecallException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"ENoThreadSupport",$mod.Exception,function () {
  });
  rtl.createClass($mod,"ENoWideStringSupport",$mod.Exception,function () {
  });
  rtl.createClass($mod,"ENotImplemented",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EArgumentException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EArgumentOutOfRangeException",$mod.EArgumentException,function () {
  });
  rtl.createClass($mod,"EArgumentNilException",$mod.EArgumentException,function () {
  });
  rtl.createClass($mod,"EPathTooLongException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"ENotSupportedException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EDirectoryNotFoundException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EFileNotFoundException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"EPathNotFoundException",$mod.Exception,function () {
  });
  rtl.createClass($mod,"ENoConstructException",$mod.Exception,function () {
  });
  this.EmptyStr = "";
  this.EmptyWideStr = "";
  this.HexDisplayPrefix = "$";
  this.LeadBytes = {};
  this.CharInSet = function (Ch, CSet) {
    var Result = false;
    var I = 0;
    Result = false;
    I = rtl.length(CSet) - 1;
    while (!Result && (I >= 0)) {
      Result = Ch === CSet[I];
      I -= 1;
    };
    return Result;
  };
  this.LeftStr = function (S, Count) {
    return (Count>0) ? S.substr(0,Count) : "";
  };
  this.RightStr = function (S, Count) {
    var l = S.length;
    return (Count<1) ? "" : ( Count>=l ? S : S.substr(l-Count));
  };
  this.Trim = function (S) {
    return S.trim();
  };
  this.TrimLeft = function (S) {
    return S.replace(/^[\s\uFEFF\xA0\x00-\x1f]+/,'');
  };
  this.TrimRight = function (S) {
    return S.replace(/[\s\uFEFF\xA0\x00-\x1f]+$/,'');
  };
  this.UpperCase = function (s) {
    return s.toUpperCase();
  };
  this.LowerCase = function (s) {
    return s.toLowerCase();
  };
  this.CompareStr = function (s1, s2) {
    var l1 = s1.length;
    var l2 = s2.length;
    if (l1<=l2){
      var s = s2.substr(0,l1);
      if (s1<s){ return -1;
      } else if (s1>s){ return 1;
      } else { return l1<l2 ? -1 : 0; };
    } else {
      var s = s1.substr(0,l2);
      if (s<s2){ return -1;
      } else { return 1; };
    };
  };
  this.SameStr = function (s1, s2) {
    return s1 == s2;
  };
  this.CompareText = function (s1, s2) {
    var l1 = s1.toLowerCase();
    var l2 = s2.toLowerCase();
    if (l1>l2){ return 1;
    } else if (l1<l2){ return -1;
    } else { return 0; };
  };
  this.SameText = function (s1, s2) {
    return s1.toLowerCase() == s2.toLowerCase();
  };
  this.AnsiCompareText = function (s1, s2) {
    return s1.localeCompare(s2);
  };
  this.AnsiSameText = function (s1, s2) {
    return s1.localeCompare(s2) == 0;
  };
  this.AnsiCompareStr = function (s1, s2) {
    var Result = 0;
    Result = $mod.CompareText(s1,s2);
    return Result;
  };
  this.AppendStr = function (Dest, S) {
    Dest.set(Dest.get() + S);
  };
  this.Format = function (Fmt, Args) {
    var Result = "";
    var ChPos = 0;
    var OldPos = 0;
    var ArgPos = 0;
    var DoArg = 0;
    var Len = 0;
    var Hs = "";
    var ToAdd = "";
    var Index = 0;
    var Width = 0;
    var Prec = 0;
    var Left = false;
    var Fchar = "";
    var vq = 0;
    function ReadFormat() {
      var Result = "";
      var Value = 0;
      function ReadInteger() {
        var Code = 0;
        var ArgN = 0;
        if (Value !== -1) return;
        OldPos = ChPos;
        while ((ChPos <= Len) && (Fmt.charAt(ChPos - 1) <= "9") && (Fmt.charAt(ChPos - 1) >= "0")) ChPos += 1;
        if (ChPos > Len) $impl.DoFormatError(1,Fmt);
        if (Fmt.charAt(ChPos - 1) === "*") {
          if (Index === -1) {
            ArgN = ArgPos}
           else {
            ArgN = Index;
            Index += 1;
          };
          if ((ChPos > OldPos) || (ArgN > (rtl.length(Args) - 1))) $impl.DoFormatError(1,Fmt);
          ArgPos = ArgN + 1;
          if (rtl.isNumber(Args[ArgN]) && pas.JS.isInteger(Args[ArgN])) {
            Value = Math.floor(Args[ArgN])}
           else $impl.DoFormatError(1,Fmt);
          ChPos += 1;
        } else {
          if (OldPos < ChPos) {
            pas.System.val(pas.System.Copy(Fmt,OldPos,ChPos - OldPos),{get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }},{get: function () {
                return Code;
              }, set: function (v) {
                Code = v;
              }});
            if (Code > 0) $impl.DoFormatError(1,Fmt);
          } else Value = -1;
        };
      };
      function ReadIndex() {
        if (Fmt.charAt(ChPos - 1) !== ":") {
          ReadInteger()}
         else Value = 0;
        if (Fmt.charAt(ChPos - 1) === ":") {
          if (Value === -1) $impl.DoFormatError(2,Fmt);
          Index = Value;
          Value = -1;
          ChPos += 1;
        };
      };
      function ReadLeft() {
        if (Fmt.charAt(ChPos - 1) === "-") {
          Left = true;
          ChPos += 1;
        } else Left = false;
      };
      function ReadWidth() {
        ReadInteger();
        if (Value !== -1) {
          Width = Value;
          Value = -1;
        };
      };
      function ReadPrec() {
        if (Fmt.charAt(ChPos - 1) === ".") {
          ChPos += 1;
          ReadInteger();
          if (Value === -1) Value = 0;
          Prec = Value;
        };
      };
      Index = -1;
      Width = -1;
      Prec = -1;
      Value = -1;
      ChPos += 1;
      if (Fmt.charAt(ChPos - 1) === "%") {
        Result = "%";
        return Result;
      };
      ReadIndex();
      ReadLeft();
      ReadWidth();
      ReadPrec();
      Result = pas.System.upcase(Fmt.charAt(ChPos - 1));
      return Result;
    };
    function Checkarg(AT, err) {
      var Result = false;
      Result = false;
      if (Index === -1) {
        DoArg = ArgPos}
       else DoArg = Index;
      ArgPos = DoArg + 1;
      if ((DoArg > (rtl.length(Args) - 1)) || (pas.JS.GetValueType(Args[DoArg]) !== AT)) {
        if (err) $impl.DoFormatError(3,Fmt);
        ArgPos -= 1;
        return Result;
      };
      Result = true;
      return Result;
    };
    Result = "";
    Len = Fmt.length;
    ChPos = 1;
    OldPos = 1;
    ArgPos = 0;
    while (ChPos <= Len) {
      while ((ChPos <= Len) && (Fmt.charAt(ChPos - 1) !== "%")) ChPos += 1;
      if (ChPos > OldPos) Result = Result + pas.System.Copy(Fmt,OldPos,ChPos - OldPos);
      if (ChPos < Len) {
        Fchar = ReadFormat();
        var $tmp1 = Fchar;
        if ($tmp1 === "D") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          ToAdd = $mod.IntToStr(Math.floor(Args[DoArg]));
          Width = Math.abs(Width);
          Index = Prec - ToAdd.length;
          if (ToAdd.charAt(0) !== "-") {
            ToAdd = pas.System.StringOfChar("0",Index) + ToAdd}
           else pas.System.Insert(pas.System.StringOfChar("0",Index + 1),{get: function () {
              return ToAdd;
            }, set: function (v) {
              ToAdd = v;
            }},2);
        } else if ($tmp1 === "U") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          if (Math.floor(Args[DoArg]) < 0) $impl.DoFormatError(3,Fmt);
          ToAdd = $mod.IntToStr(Math.floor(Args[DoArg]));
          Width = Math.abs(Width);
          Index = Prec - ToAdd.length;
          ToAdd = pas.System.StringOfChar("0",Index) + ToAdd;
        } else if ($tmp1 === "E") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffFixed,9999,Prec);
        } else if ($tmp1 === "F") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffFixed,9999,Prec);
        } else if ($tmp1 === "G") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffGeneral,Prec,3);
        } else if ($tmp1 === "N") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffNumber,9999,Prec);
        } else if ($tmp1 === "M") {
          if (Checkarg(pas.JS.TJSValueType.jvtFloat,false) || Checkarg(pas.JS.TJSValueType.jvtInteger,true)) ToAdd = $mod.FloatToStrF(rtl.getNumber(Args[DoArg]),$mod.TFloatFormat.ffCurrency,9999,Prec);
        } else if ($tmp1 === "S") {
          Checkarg(pas.JS.TJSValueType.jvtString,true);
          Hs = "" + Args[DoArg];
          Index = Hs.length;
          if ((Prec !== -1) && (Index > Prec)) Index = Prec;
          ToAdd = pas.System.Copy(Hs,1,Index);
        } else if ($tmp1 === "P") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          ToAdd = $mod.IntToHex(Math.floor(Args[DoArg]),31);
        } else if ($tmp1 === "X") {
          Checkarg(pas.JS.TJSValueType.jvtInteger,true);
          vq = Math.floor(Args[DoArg]);
          Index = 31;
          if (Prec > Index) {
            ToAdd = $mod.IntToHex(vq,Index)}
           else {
            Index = 1;
            while ((rtl.shl(1,Index * 4) <= vq) && (Index < 16)) Index += 1;
            if (Index > Prec) Prec = Index;
            ToAdd = $mod.IntToHex(vq,Prec);
          };
        } else if ($tmp1 === "%") ToAdd = "%";
        if (Width !== -1) if (ToAdd.length < Width) if (!Left) {
          ToAdd = pas.System.StringOfChar(" ",Width - ToAdd.length) + ToAdd}
         else ToAdd = ToAdd + pas.System.StringOfChar(" ",Width - ToAdd.length);
        Result = Result + ToAdd;
      };
      ChPos += 1;
      OldPos = ChPos;
    };
    return Result;
  };
  this.BytesOf = function (AVal) {
    var Result = [];
    var I = 0;
    Result = rtl.arraySetLength(Result,0,AVal.length);
    for (var $l1 = 0, $end2 = AVal.length - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      Result[I] = AVal.charCodeAt((I + 1) - 1);
    };
    return Result;
  };
  this.StringOf = function (ABytes) {
    var Result = "";
    var I = 0;
    Result = "";
    for (var $l1 = 0, $end2 = rtl.length(ABytes) - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      Result = Result + String.fromCharCode(ABytes[I]);
    };
    return Result;
  };
  this.LocaleCompare = function (s1, s2, locales) {
    return s1.localeCompare(s2,locales) == 0;
  };
  this.NormalizeStr = function (S, Norm) {
    return S.normalize(Norm);
  };
  var Alpha = rtl.createSet(null,65,90,null,97,122,95);
  var AlphaNum = rtl.unionSet(Alpha,rtl.createSet(null,48,57));
  var Dot = ".";
  this.IsValidIdent = function (Ident, AllowDots, StrictDots) {
    var Result = false;
    var First = false;
    var I = 0;
    var Len = 0;
    Len = Ident.length;
    if (Len < 1) return false;
    First = true;
    Result = false;
    I = 1;
    while (I <= Len) {
      if (First) {
        if (!(Ident.charCodeAt(I - 1) in Alpha)) return Result;
        First = false;
      } else if (AllowDots && (Ident.charAt(I - 1) === Dot)) {
        if (StrictDots) {
          if (I >= Len) return Result;
          First = true;
        };
      } else if (!(Ident.charCodeAt(I - 1) in AlphaNum)) return Result;
      I = I + 1;
    };
    Result = true;
    return Result;
  };
  this.TStringReplaceFlag = {"0": "rfReplaceAll", rfReplaceAll: 0, "1": "rfIgnoreCase", rfIgnoreCase: 1};
  $mod.$rtti.$Enum("TStringReplaceFlag",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TStringReplaceFlag});
  $mod.$rtti.$Set("TStringReplaceFlags",{comptype: $mod.$rtti["TStringReplaceFlag"]});
  this.StringReplace = function (aOriginal, aSearch, aReplace, Flags) {
    var Result = "";
    var REFlags = "";
    var REString = "";
    REFlags = "";
    if ($mod.TStringReplaceFlag.rfReplaceAll in Flags) REFlags = "g";
    if ($mod.TStringReplaceFlag.rfIgnoreCase in Flags) REFlags = REFlags + "i";
    REString = aSearch.replace(new RegExp($impl.RESpecials,"g"),"\\$1");
    Result = aOriginal.replace(new RegExp(REString,REFlags),aReplace);
    return Result;
  };
  this.QuoteString = function (aOriginal, AQuote) {
    var Result = "";
    Result = AQuote + $mod.StringReplace(aOriginal,AQuote,AQuote + AQuote,rtl.createSet($mod.TStringReplaceFlag.rfReplaceAll)) + AQuote;
    return Result;
  };
  this.QuotedStr = function (s, QuoteChar) {
    var Result = "";
    Result = $mod.QuoteString(s,QuoteChar);
    return Result;
  };
  this.DeQuoteString = function (aQuoted, AQuote) {
    var Result = "";
    var i = 0;
    Result = aQuoted;
    if (Result.substr(0,1) !== AQuote) return Result;
    Result = Result.slice(1);
    i = 1;
    while (i <= Result.length) {
      if (Result.charAt(i - 1) === AQuote) {
        if ((i === Result.length) || (Result.charAt((i + 1) - 1) !== AQuote)) {
          Result = Result.slice(0,i - 1);
          return Result;
        } else Result = Result.slice(0,i - 1) + Result.slice(i);
      } else i += 1;
    };
    return Result;
  };
  this.IsDelimiter = function (Delimiters, S, Index) {
    var Result = false;
    Result = false;
    if ((Index > 0) && (Index <= S.length)) Result = pas.System.Pos(S.charAt(Index - 1),Delimiters) !== 0;
    return Result;
  };
  this.AdjustLineBreaks = function (S) {
    var Result = "";
    Result = $mod.AdjustLineBreaks$1(S,pas.System.DefaultTextLineBreakStyle);
    return Result;
  };
  this.AdjustLineBreaks$1 = function (S, Style) {
    var Result = "";
    var I = 0;
    var L = 0;
    var Res = "";
    function Add(C) {
      Res = Res + C;
    };
    I = 0;
    L = S.length;
    Result = "";
    while (I <= L) {
      var $tmp1 = S.charAt(I - 1);
      if ($tmp1 === "\n") {
        if (Style in rtl.createSet(pas.System.TTextLineBreakStyle.tlbsCRLF,pas.System.TTextLineBreakStyle.tlbsCR)) Add("\r");
        if (Style === pas.System.TTextLineBreakStyle.tlbsCRLF) Add("\n");
        I += 1;
      } else if ($tmp1 === "\r") {
        if (Style === pas.System.TTextLineBreakStyle.tlbsCRLF) Add("\r");
        Add("\n");
        I += 1;
        if (S.charAt(I - 1) === "\n") I += 1;
      } else {
        Add(S.charAt(I - 1));
        I += 1;
      };
    };
    Result = Res;
    return Result;
  };
  var Quotes = rtl.createSet(39,34);
  this.WrapText = function (Line, BreakStr, BreakChars, MaxCol) {
    var Result = "";
    var L = "";
    var C = "";
    var LQ = "";
    var BC = "";
    var P = 0;
    var BLen = 0;
    var Len = 0;
    var HB = false;
    var IBC = false;
    Result = "";
    L = Line;
    BLen = BreakStr.length;
    if (BLen > 0) {
      BC = BreakStr.charAt(0)}
     else BC = "\x00";
    Len = L.length;
    while (Len > 0) {
      P = 1;
      LQ = "\x00";
      HB = false;
      IBC = false;
      while ((P <= Len) && ((P <= MaxCol) || !IBC) && ((LQ !== "\x00") || !HB)) {
        C = L.charAt(P - 1);
        if (C === LQ) {
          LQ = "\x00"}
         else if (C.charCodeAt() in Quotes) LQ = C;
        if (LQ !== "\x00") {
          P += 1}
         else {
          HB = (C === BC) && (BreakStr === pas.System.Copy(L,P,BLen));
          if (HB) {
            P += BLen}
           else {
            if (P >= MaxCol) IBC = $mod.CharInSet(C,BreakChars);
            P += 1;
          };
        };
      };
      Result = Result + pas.System.Copy(L,1,P - 1);
      pas.System.Delete({get: function () {
          return L;
        }, set: function (v) {
          L = v;
        }},1,P - 1);
      Len = L.length;
      if ((Len > 0) && !HB) Result = Result + BreakStr;
    };
    return Result;
  };
  this.WrapText$1 = function (Line, MaxCol) {
    var Result = "";
    Result = $mod.WrapText(Line,pas.System.sLineBreak,[" ","-","\t"],MaxCol);
    return Result;
  };
  this.IntToStr = function (Value) {
    var Result = "";
    Result = "" + Value;
    return Result;
  };
  this.TryStrToInt = function (S, res) {
    var Result = false;
    var NI = 0;
    Result = $mod.TryStrToInt$1(S,{get: function () {
        return NI;
      }, set: function (v) {
        NI = v;
      }});
    if (Result) res.set(NI);
    return Result;
  };
  this.TryStrToInt$1 = function (S, res) {
    var Result = false;
    var Radix = 10;
    var N = "";
    var J = undefined;
    N = S;
    var $tmp1 = pas.System.Copy(N,1,1);
    if ($tmp1 === "$") {
      Radix = 16}
     else if ($tmp1 === "&") {
      Radix = 8}
     else if ($tmp1 === "%") Radix = 2;
    if (Radix !== 10) pas.System.Delete({get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},1,1);
    J = parseInt(N,Radix);
    Result = !isNaN(J);
    if (Result) res.set(Math.floor(J));
    return Result;
  };
  this.StrToIntDef = function (S, aDef) {
    var Result = 0;
    var R = 0;
    if ($mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }})) {
      Result = R}
     else Result = aDef;
    return Result;
  };
  this.StrToIntDef$1 = function (S, aDef) {
    var Result = 0;
    var R = 0;
    if ($mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }})) {
      Result = R}
     else Result = aDef;
    return Result;
  };
  this.StrToInt = function (S) {
    var Result = 0;
    var R = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    Result = R;
    return Result;
  };
  this.StrToNativeInt = function (S) {
    var Result = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    return Result;
  };
  this.StrToInt64 = function (S) {
    var Result = 0;
    var N = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    Result = N;
    return Result;
  };
  this.StrToInt64Def = function (S, ADefault) {
    var Result = 0;
    if (!$mod.TryStrToInt64(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = ADefault;
    return Result;
  };
  this.TryStrToInt64 = function (S, res) {
    var Result = false;
    var R = 0;
    Result = $mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }});
    if (Result) res.set(R);
    return Result;
  };
  this.StrToQWord = function (S) {
    var Result = 0;
    var N = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }}) || (N < 0)) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    Result = N;
    return Result;
  };
  this.StrToQWordDef = function (S, ADefault) {
    var Result = 0;
    if (!$mod.TryStrToQWord(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = ADefault;
    return Result;
  };
  this.TryStrToQWord = function (S, res) {
    var Result = false;
    var R = 0;
    Result = $mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }}) && (R >= 0);
    if (Result) res.set(R);
    return Result;
  };
  this.StrToUInt64 = function (S) {
    var Result = 0;
    var N = 0;
    if (!$mod.TryStrToInt$1(S,{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }}) || (N < 0)) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    Result = N;
    return Result;
  };
  this.StrToUInt64Def = function (S, ADefault) {
    var Result = 0;
    if (!$mod.TryStrToUInt64(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = ADefault;
    return Result;
  };
  this.TryStrToUInt64 = function (S, res) {
    var Result = false;
    var R = 0;
    Result = $mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }}) && (R >= 0);
    if (Result) res.set(R);
    return Result;
  };
  this.StrToDWord = function (S) {
    var Result = 0;
    if (!$mod.TryStrToDWord(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidInteger,[S]]);
    return Result;
  };
  this.StrToDWordDef = function (S, ADefault) {
    var Result = 0;
    if (!$mod.TryStrToDWord(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = ADefault;
    return Result;
  };
  this.TryStrToDWord = function (S, res) {
    var Result = false;
    var R = 0;
    Result = $mod.TryStrToInt$1(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }}) && (R >= 0) && (R <= 0xFFFFFFFF);
    if (Result) res.set(R);
    return Result;
  };
  var HexDigits = "0123456789ABCDEF";
  this.IntToHex = function (Value, Digits) {
    var Result = "";
    if (Digits === 0) Digits = 1;
    Result = "";
    while (Value > 0) {
      Result = HexDigits.charAt(((Value & 15) + 1) - 1) + Result;
      Value = Math.floor(Value / 16);
    };
    while (Result.length < Digits) Result = "0" + Result;
    return Result;
  };
  this.MaxCurrency = 450359962737.0495;
  this.MinCurrency = -450359962737.0496;
  this.TFloatFormat = {"0": "ffFixed", ffFixed: 0, "1": "ffGeneral", ffGeneral: 1, "2": "ffExponent", ffExponent: 2, "3": "ffNumber", ffNumber: 3, "4": "ffCurrency", ffCurrency: 4};
  $mod.$rtti.$Enum("TFloatFormat",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TFloatFormat});
  var Rounds = "123456789:";
  this.FloatToDecimal = function (Value, Precision, Decimals) {
    var Result = $mod.TFloatRec.$new();
    var Buffer = "";
    var InfNan = "";
    var OutPos = 0;
    var error = 0;
    var N = 0;
    var L = 0;
    var C = 0;
    var GotNonZeroBeforeDot = false;
    var BeforeDot = false;
    Result.Negative = false;
    Result.Exponent = 0;
    for (C = 0; C <= 19; C++) Result.Digits[C] = "0";
    if (Value === 0) return Result;
    Buffer=Value.toPrecision(21); // Double precision;
    N = 1;
    L = Buffer.length;
    while (Buffer.charAt(N - 1) === " ") N += 1;
    Result.Negative = Buffer.charAt(N - 1) === "-";
    if (Result.Negative) {
      N += 1}
     else if (Buffer.charAt(N - 1) === "+") N += 1;
    if (L >= (N + 2)) {
      InfNan = pas.System.Copy(Buffer,N,3);
      if (InfNan === "Inf") {
        Result.Digits[0] = "\x00";
        Result.Exponent = 32767;
        return Result;
      };
      if (InfNan === "Nan") {
        Result.Digits[0] = "\x00";
        Result.Exponent = -32768;
        return Result;
      };
    };
    OutPos = 0;
    Result.Exponent = 0;
    BeforeDot = true;
    GotNonZeroBeforeDot = false;
    while ((L >= N) && (Buffer.charAt(N - 1) !== "E")) {
      if (Buffer.charAt(N - 1) === ".") {
        BeforeDot = false}
       else {
        if (BeforeDot) {
          Result.Exponent += 1;
          Result.Digits[OutPos] = Buffer.charAt(N - 1);
          if (Buffer.charAt(N - 1) !== "0") GotNonZeroBeforeDot = true;
        } else Result.Digits[OutPos] = Buffer.charAt(N - 1);
        OutPos += 1;
      };
      N += 1;
    };
    N += 1;
    if (N <= L) {
      pas.System.val$6(pas.System.Copy(Buffer,N,(L - N) + 1),{get: function () {
          return C;
        }, set: function (v) {
          C = v;
        }},{get: function () {
          return error;
        }, set: function (v) {
          error = v;
        }});
      Result.Exponent += C;
    };
    N = OutPos;
    L = 19;
    while (N < L) {
      Result.Digits[N] = "0";
      N += 1;
    };
    if ((Decimals + Result.Exponent) < Precision) {
      N = Decimals + Result.Exponent}
     else N = Precision;
    if (N >= L) N = L - 1;
    if (N === 0) {
      if (Result.Digits[0] >= "5") {
        Result.Digits[0] = "1";
        Result.Digits[1] = "\x00";
        Result.Exponent += 1;
      } else Result.Digits[0] = "\x00";
    } else if (N > 0) {
      if (Result.Digits[N] >= "5") {
        do {
          Result.Digits[N] = "\x00";
          N -= 1;
          Result.Digits[N] = Rounds.charAt(($mod.StrToInt(Result.Digits[N]) + 1) - 1);
        } while (!((N === 0) || (Result.Digits[N] < ":")));
        if (Result.Digits[0] === ":") {
          Result.Digits[0] = "1";
          Result.Exponent += 1;
        };
      } else {
        Result.Digits[N] = "0";
        while ((N > -1) && (Result.Digits[N] === "0")) {
          Result.Digits[N] = "\x00";
          N -= 1;
        };
      };
    } else Result.Digits[0] = "\x00";
    if ((Result.Digits[0] === "\x00") && !GotNonZeroBeforeDot) {
      Result.Exponent = 0;
      Result.Negative = false;
    };
    return Result;
  };
  this.FloatToStr = function (Value) {
    var Result = "";
    Result = $mod.FloatToStrF(Value,$mod.TFloatFormat.ffGeneral,15,0);
    return Result;
  };
  this.FloatToStrF = function (Value, format, Precision, Digits) {
    var Result = "";
    var DS = "";
    DS = $mod.DecimalSeparator;
    var $tmp1 = format;
    if ($tmp1 === $mod.TFloatFormat.ffGeneral) {
      Result = $impl.FormatGeneralFloat(Value,Precision,DS)}
     else if ($tmp1 === $mod.TFloatFormat.ffExponent) {
      Result = $impl.FormatExponentFloat(Value,Precision,Digits,DS)}
     else if ($tmp1 === $mod.TFloatFormat.ffFixed) {
      Result = $impl.FormatFixedFloat(Value,Digits,DS)}
     else if ($tmp1 === $mod.TFloatFormat.ffNumber) {
      Result = $impl.FormatNumberFloat(Value,Digits,DS,$mod.ThousandSeparator)}
     else if ($tmp1 === $mod.TFloatFormat.ffCurrency) Result = $impl.FormatNumberCurrency(Value,Digits,DS,$mod.ThousandSeparator);
    if ((format !== $mod.TFloatFormat.ffCurrency) && (Result.length > 1) && (Result.charAt(0) === "-")) $impl.RemoveLeadingNegativeSign({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},DS);
    return Result;
  };
  this.TryStrToFloat = function (S, res) {
    var Result = false;
    var J = undefined;
    var N = "";
    N = S;
    if ($mod.ThousandSeparator !== "") N = $mod.StringReplace(N,$mod.ThousandSeparator,"",rtl.createSet($mod.TStringReplaceFlag.rfReplaceAll));
    if ($mod.DecimalSeparator !== ".") N = $mod.StringReplace(N,$mod.DecimalSeparator,".",{});
    J = parseFloat(N);
    Result = !isNaN(J);
    if (Result) res.set(rtl.getNumber(J));
    return Result;
  };
  this.StrToFloatDef = function (S, aDef) {
    var Result = 0.0;
    if (!$mod.TryStrToFloat(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = aDef;
    return Result;
  };
  this.StrToFloat = function (S) {
    var Result = 0.0;
    if (!$mod.TryStrToFloat(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidFloat,[S]]);
    return Result;
  };
  var MaxPrecision = 18;
  this.FormatFloat = function (Fmt, aValue) {
    var Result = "";
    var E = 0.0;
    var FV = $mod.TFloatRec.$new();
    var Section = "";
    var SectionLength = 0;
    var ThousandSep = false;
    var IsScientific = false;
    var DecimalPos = 0;
    var FirstDigit = 0;
    var LastDigit = 0;
    var RequestedDigits = 0;
    var ExpSize = 0;
    var Available = 0;
    var Current = 0;
    var PadZeroes = 0;
    var DistToDecimal = 0;
    function InitVars() {
      E = aValue;
      Section = "";
      SectionLength = 0;
      ThousandSep = false;
      IsScientific = false;
      DecimalPos = 0;
      FirstDigit = 2147483647;
      LastDigit = 0;
      RequestedDigits = 0;
      ExpSize = 0;
      Available = -1;
    };
    function ToResult(AChar) {
      Result = Result + AChar;
    };
    function AddToResult(AStr) {
      Result = Result + AStr;
    };
    function WriteDigit(ADigit) {
      if (ADigit === "\x00") return;
      DistToDecimal -= 1;
      if (DistToDecimal === -1) {
        AddToResult($mod.DecimalSeparator);
        ToResult(ADigit);
      } else {
        ToResult(ADigit);
        if (ThousandSep && ((DistToDecimal % 3) === 0) && (DistToDecimal > 1)) AddToResult($mod.ThousandSeparator);
      };
    };
    function GetDigit() {
      var Result = "";
      Result = "\x00";
      if (Current <= Available) {
        Result = FV.Digits[Current];
        Current += 1;
      } else if (DistToDecimal <= LastDigit) {
        DistToDecimal -= 1}
       else Result = "0";
      return Result;
    };
    function CopyDigit() {
      if (PadZeroes === 0) {
        WriteDigit(GetDigit())}
       else if (PadZeroes < 0) {
        PadZeroes += 1;
        if (DistToDecimal <= FirstDigit) {
          WriteDigit("0")}
         else DistToDecimal -= 1;
      } else {
        while (PadZeroes > 0) {
          WriteDigit(GetDigit());
          PadZeroes -= 1;
        };
        WriteDigit(GetDigit());
      };
    };
    function GetSections(SP) {
      var Result = 0;
      var FL = 0;
      var i = 0;
      var C = "";
      var Q = "";
      var inQuote = false;
      Result = 1;
      SP.get()[1] = -1;
      SP.get()[2] = -1;
      SP.get()[3] = -1;
      inQuote = false;
      Q = "\x00";
      i = 1;
      FL = Fmt.length;
      while (i <= FL) {
        C = Fmt.charAt(i - 1);
        var $tmp1 = C;
        if ($tmp1 === ";") {
          if (!inQuote) {
            if (Result > 3) throw $mod.Exception.$create("Create$1",["Invalid float format"]);
            SP.get()[Result] = i + 1;
            Result += 1;
          };
        } else if (($tmp1 === '"') || ($tmp1 === "'")) {
          if (inQuote) {
            inQuote = C !== Q}
           else {
            inQuote = true;
            Q = C;
          };
        };
        i += 1;
      };
      if (SP.get()[Result] === -1) SP.get()[Result] = FL + 1;
      return Result;
    };
    function AnalyzeFormat() {
      var I = 0;
      var Len = 0;
      var Q = "";
      var C = "";
      var InQuote = false;
      Len = Section.length;
      I = 1;
      InQuote = false;
      Q = "\x00";
      while (I <= Len) {
        C = Section.charAt(I - 1);
        if (C.charCodeAt() in rtl.createSet(34,39)) {
          if (InQuote) {
            InQuote = C !== Q}
           else {
            InQuote = true;
            Q = C;
          };
        } else if (!InQuote) {
          var $tmp1 = C;
          if ($tmp1 === ".") {
            if (DecimalPos === 0) DecimalPos = RequestedDigits + 1}
           else if ($tmp1 === ",") {
            ThousandSep = $mod.ThousandSeparator !== "\x00"}
           else if (($tmp1 === "e") || ($tmp1 === "E")) {
            I += 1;
            if (I < Len) {
              C = Section.charAt(I - 1);
              IsScientific = C.charCodeAt() in rtl.createSet(45,43);
              if (IsScientific) while ((I < Len) && (Section.charAt((I + 1) - 1) === "0")) {
                ExpSize += 1;
                I += 1;
              };
              if (ExpSize > 4) ExpSize = 4;
            };
          } else if ($tmp1 === "#") {
            RequestedDigits += 1}
           else if ($tmp1 === "0") {
            if (RequestedDigits < FirstDigit) FirstDigit = RequestedDigits + 1;
            RequestedDigits += 1;
            LastDigit = RequestedDigits + 1;
          };
        };
        I += 1;
      };
      if (DecimalPos === 0) DecimalPos = RequestedDigits + 1;
      LastDigit = DecimalPos - LastDigit;
      if (LastDigit > 0) LastDigit = 0;
      FirstDigit = DecimalPos - FirstDigit;
      if (FirstDigit < 0) FirstDigit = 0;
    };
    function ValueOutSideScope() {
      var Result = false;
      Result = ((FV.Exponent >= 18) && !IsScientific) || (FV.Exponent === 0x7FF) || (FV.Exponent === 0x800);
      return Result;
    };
    function CalcRunVars() {
      var D = 0;
      var P = 0;
      if (IsScientific) {
        P = RequestedDigits;
        D = 9999;
      } else {
        P = 18;
        D = (RequestedDigits - DecimalPos) + 1;
      };
      FV.$assign($mod.FloatToDecimal(aValue,P,D));
      DistToDecimal = DecimalPos - 1;
      if (IsScientific) {
        PadZeroes = 0}
       else {
        PadZeroes = FV.Exponent - (DecimalPos - 1);
        if (PadZeroes >= 0) DistToDecimal = FV.Exponent;
      };
      Available = -1;
      while ((Available < 18) && (FV.Digits[Available + 1] !== "\x00")) Available += 1;
    };
    function FormatExponent(ASign, aExponent) {
      var Result = "";
      Result = $mod.IntToStr(aExponent);
      Result = pas.System.StringOfChar("0",ExpSize - Result.length) + Result;
      if (aExponent < 0) {
        Result = "-" + Result}
       else if ((aExponent > 0) && (ASign === "+")) Result = ASign + Result;
      return Result;
    };
    var I = 0;
    var S = 0;
    var C = "";
    var Q = "";
    var PA = [];
    var InLiteral = false;
    PA = rtl.arraySetLength(PA,0,4);
    Result = "";
    InitVars();
    if (E > 0) {
      S = 1}
     else if (E < 0) {
      S = 2}
     else S = 3;
    PA[0] = 0;
    I = GetSections({get: function () {
        return PA;
      }, set: function (v) {
        PA = v;
      }});
    if ((I < S) || ((PA[S] - PA[S - 1]) === 0)) S = 1;
    SectionLength = PA[S] - PA[S - 1] - 1;
    Section = pas.System.Copy(Fmt,PA[S - 1] + 1,SectionLength);
    Section = rtl.strSetLength(Section,SectionLength);
    AnalyzeFormat();
    CalcRunVars();
    if ((SectionLength === 0) || ValueOutSideScope()) {
      Section=E.toPrecision(15);
      Result = Section;
    };
    I = 1;
    Current = 0;
    Q = " ";
    InLiteral = false;
    if (FV.Negative && (S === 1)) ToResult("-");
    while (I <= SectionLength) {
      C = Section.charAt(I - 1);
      if (C.charCodeAt() in rtl.createSet(34,39)) {
        if (InLiteral) {
          InLiteral = C !== Q}
         else {
          InLiteral = true;
          Q = C;
        };
      } else if (InLiteral) {
        ToResult(C)}
       else {
        var $tmp1 = C;
        if (($tmp1 === "0") || ($tmp1 === "#")) {
          CopyDigit()}
         else if (($tmp1 === ".") || ($tmp1 === ",")) {}
        else if (($tmp1 === "e") || ($tmp1 === "E")) {
          ToResult(C);
          I += 1;
          if (I <= Section.length) {
            C = Section.charAt(I - 1);
            if (C.charCodeAt() in rtl.createSet(43,45)) {
              AddToResult(FormatExponent(C,(FV.Exponent - DecimalPos) + 1));
              while ((I < SectionLength) && (Section.charAt((I + 1) - 1) === "0")) I += 1;
            };
          };
        } else {
          ToResult(C);
        };
      };
      I += 1;
    };
    return Result;
  };
  this.TrueBoolStrs = [];
  this.FalseBoolStrs = [];
  this.StrToBool = function (S) {
    var Result = false;
    if (!$mod.TryStrToBool(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidBoolean,[S]]);
    return Result;
  };
  this.BoolToStr = function (B, UseBoolStrs) {
    var Result = "";
    if (UseBoolStrs) {
      $impl.CheckBoolStrs();
      if (B) {
        Result = $mod.TrueBoolStrs[0]}
       else Result = $mod.FalseBoolStrs[0];
    } else if (B) {
      Result = "-1"}
     else Result = "0";
    return Result;
  };
  this.BoolToStr$1 = function (B, TrueS, FalseS) {
    var Result = "";
    if (B) {
      Result = TrueS}
     else Result = FalseS;
    return Result;
  };
  this.StrToBoolDef = function (S, Default) {
    var Result = false;
    if (!$mod.TryStrToBool(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = Default;
    return Result;
  };
  this.TryStrToBool = function (S, Value) {
    var Result = false;
    var Temp = "";
    var I = 0;
    var D = 0.0;
    var Code = 0;
    Temp = $mod.UpperCase(S);
    pas.System.val$8(Temp,{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},{get: function () {
        return Code;
      }, set: function (v) {
        Code = v;
      }});
    Result = true;
    if (Code === 0) {
      Value.set(D !== 0.0)}
     else {
      $impl.CheckBoolStrs();
      for (var $l1 = 0, $end2 = rtl.length($mod.TrueBoolStrs) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (Temp === $mod.UpperCase($mod.TrueBoolStrs[I])) {
          Value.set(true);
          return Result;
        };
      };
      for (var $l3 = 0, $end4 = rtl.length($mod.FalseBoolStrs) - 1; $l3 <= $end4; $l3++) {
        I = $l3;
        if (Temp === $mod.UpperCase($mod.FalseBoolStrs[I])) {
          Value.set(false);
          return Result;
        };
      };
      Result = false;
    };
    return Result;
  };
  this.ConfigExtension = ".cfg";
  this.SysConfigDir = "";
  $mod.$rtti.$ProcVar("TOnGetEnvironmentVariable",{procsig: rtl.newTIProcSig([["EnvVar",rtl.string,2]],rtl.string)});
  $mod.$rtti.$ProcVar("TOnGetEnvironmentString",{procsig: rtl.newTIProcSig([["Index",rtl.longint]],rtl.string)});
  $mod.$rtti.$ProcVar("TOnGetEnvironmentVariableCount",{procsig: rtl.newTIProcSig(null,rtl.longint)});
  this.OnGetEnvironmentVariable = null;
  this.OnGetEnvironmentString = null;
  this.OnGetEnvironmentVariableCount = null;
  this.GetEnvironmentVariable = function (EnvVar) {
    var Result = "";
    if ($mod.OnGetEnvironmentVariable != null) {
      Result = $mod.OnGetEnvironmentVariable(EnvVar)}
     else Result = "";
    return Result;
  };
  this.GetEnvironmentVariableCount = function () {
    var Result = 0;
    if ($mod.OnGetEnvironmentVariableCount != null) {
      Result = $mod.OnGetEnvironmentVariableCount()}
     else Result = 0;
    return Result;
  };
  this.GetEnvironmentString = function (Index) {
    var Result = "";
    if ($mod.OnGetEnvironmentString != null) {
      Result = $mod.OnGetEnvironmentString(Index)}
     else Result = "";
    return Result;
  };
  this.ShowException = function (ExceptObject, ExceptAddr) {
    var S = "";
    S = "Application raised an exception " + ExceptObject.$classname;
    if ($mod.Exception.isPrototypeOf(ExceptObject)) S = S + " : " + ExceptObject.fMessage;
    window.alert(S);
    if (ExceptAddr === null) ;
  };
  this.Abort = function () {
    throw $mod.EAbort.$create("Create$1",[$impl.SAbortError]);
  };
  this.TEventType = {"0": "etCustom", etCustom: 0, "1": "etInfo", etInfo: 1, "2": "etWarning", etWarning: 2, "3": "etError", etError: 3, "4": "etDebug", etDebug: 4};
  $mod.$rtti.$Enum("TEventType",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TEventType});
  $mod.$rtti.$Set("TEventTypes",{comptype: $mod.$rtti["TEventType"]});
  rtl.recNewT($mod,"TSystemTime",function () {
    this.Year = 0;
    this.Month = 0;
    this.Day = 0;
    this.DayOfWeek = 0;
    this.Hour = 0;
    this.Minute = 0;
    this.Second = 0;
    this.MilliSecond = 0;
    this.$eq = function (b) {
      return (this.Year === b.Year) && (this.Month === b.Month) && (this.Day === b.Day) && (this.DayOfWeek === b.DayOfWeek) && (this.Hour === b.Hour) && (this.Minute === b.Minute) && (this.Second === b.Second) && (this.MilliSecond === b.MilliSecond);
    };
    this.$assign = function (s) {
      this.Year = s.Year;
      this.Month = s.Month;
      this.Day = s.Day;
      this.DayOfWeek = s.DayOfWeek;
      this.Hour = s.Hour;
      this.Minute = s.Minute;
      this.Second = s.Second;
      this.MilliSecond = s.MilliSecond;
      return this;
    };
    var $r = $mod.$rtti.$Record("TSystemTime",{});
    $r.addField("Year",rtl.word);
    $r.addField("Month",rtl.word);
    $r.addField("Day",rtl.word);
    $r.addField("DayOfWeek",rtl.word);
    $r.addField("Hour",rtl.word);
    $r.addField("Minute",rtl.word);
    $r.addField("Second",rtl.word);
    $r.addField("MilliSecond",rtl.word);
  });
  rtl.recNewT($mod,"TTimeStamp",function () {
    this.Time = 0;
    this.Date = 0;
    this.$eq = function (b) {
      return (this.Time === b.Time) && (this.Date === b.Date);
    };
    this.$assign = function (s) {
      this.Time = s.Time;
      this.Date = s.Date;
      return this;
    };
    var $r = $mod.$rtti.$Record("TTimeStamp",{});
    $r.addField("Time",rtl.longint);
    $r.addField("Date",rtl.longint);
  });
  this.TimeSeparator = "";
  this.DateSeparator = "";
  this.ShortDateFormat = "";
  this.LongDateFormat = "";
  this.ShortTimeFormat = "";
  this.LongTimeFormat = "";
  this.DecimalSeparator = "";
  this.ThousandSeparator = "";
  this.TimeAMString = "";
  this.TimePMString = "";
  this.HoursPerDay = 24;
  this.MinsPerHour = 60;
  this.SecsPerMin = 60;
  this.MSecsPerSec = 1000;
  this.MinsPerDay = 24 * 60;
  this.SecsPerDay = 1440 * 60;
  this.MSecsPerDay = 86400 * 1000;
  this.MaxDateTime = 2958465.99999999;
  this.MinDateTime = -693593.99999999;
  this.JulianEpoch = -2415018.5;
  this.UnixEpoch = -2415018.5 + 2440587.5;
  this.DateDelta = 693594;
  this.UnixDateDelta = 25569;
  this.MonthDays = rtl.arraySetLength(null,0,2,12);
  this.ShortMonthNames = rtl.arraySetLength(null,"",12);
  this.LongMonthNames = rtl.arraySetLength(null,"",12);
  this.ShortDayNames = rtl.arraySetLength(null,"",7);
  this.LongDayNames = rtl.arraySetLength(null,"",7);
  rtl.createClass($mod,"TFormatSettings",pas.System.TObject,function () {
    this.GetCurrencyDecimals = function () {
      var Result = 0;
      Result = $mod.CurrencyDecimals;
      return Result;
    };
    this.GetCurrencyFormat = function () {
      var Result = 0;
      Result = $mod.CurrencyFormat;
      return Result;
    };
    this.GetCurrencyString = function () {
      var Result = "";
      Result = $mod.CurrencyString;
      return Result;
    };
    this.GetDateSeparator = function () {
      var Result = "";
      Result = $mod.DateSeparator;
      return Result;
    };
    this.GetDecimalSeparator = function () {
      var Result = "";
      Result = $mod.DecimalSeparator;
      return Result;
    };
    this.GetLongDateFormat = function () {
      var Result = "";
      Result = $mod.LongDateFormat;
      return Result;
    };
    this.GetLongDayNames = function () {
      var Result = rtl.arraySetLength(null,"",7);
      Result = $mod.LongDayNames.slice(0);
      return Result;
    };
    this.GetLongMonthNames = function () {
      var Result = rtl.arraySetLength(null,"",12);
      Result = $mod.LongMonthNames.slice(0);
      return Result;
    };
    this.GetLongTimeFormat = function () {
      var Result = "";
      Result = $mod.LongTimeFormat;
      return Result;
    };
    this.GetNegCurrFormat = function () {
      var Result = 0;
      Result = $mod.NegCurrFormat;
      return Result;
    };
    this.GetShortDateFormat = function () {
      var Result = "";
      Result = $mod.ShortDateFormat;
      return Result;
    };
    this.GetShortDayNames = function () {
      var Result = rtl.arraySetLength(null,"",7);
      Result = $mod.ShortDayNames.slice(0);
      return Result;
    };
    this.GetShortMonthNames = function () {
      var Result = rtl.arraySetLength(null,"",12);
      Result = $mod.ShortMonthNames.slice(0);
      return Result;
    };
    this.GetShortTimeFormat = function () {
      var Result = "";
      Result = $mod.ShortTimeFormat;
      return Result;
    };
    this.GetThousandSeparator = function () {
      var Result = "";
      Result = $mod.ThousandSeparator;
      return Result;
    };
    this.GetTimeAMString = function () {
      var Result = "";
      Result = $mod.TimeAMString;
      return Result;
    };
    this.GetTimePMString = function () {
      var Result = "";
      Result = $mod.TimePMString;
      return Result;
    };
    this.GetTimeSeparator = function () {
      var Result = "";
      Result = $mod.TimeSeparator;
      return Result;
    };
    this.SetCurrencyFormat = function (AValue) {
      $mod.CurrencyFormat = AValue;
    };
    this.SetCurrencyString = function (AValue) {
      $mod.CurrencyString = AValue;
    };
    this.SetDateSeparator = function (Value) {
      $mod.DateSeparator = Value;
    };
    this.SetDecimalSeparator = function (Value) {
      $mod.DecimalSeparator = Value;
    };
    this.SetLongDateFormat = function (Value) {
      $mod.LongDateFormat = Value;
    };
    this.SetLongDayNames = function (AValue) {
      $mod.LongDayNames = AValue.slice(0);
    };
    this.SetLongMonthNames = function (AValue) {
      $mod.LongMonthNames = AValue.slice(0);
    };
    this.SetLongTimeFormat = function (Value) {
      $mod.LongTimeFormat = Value;
    };
    this.SetNegCurrFormat = function (AValue) {
      $mod.NegCurrFormat = AValue;
    };
    this.SetShortDateFormat = function (Value) {
      $mod.ShortDateFormat = Value;
    };
    this.SetShortDayNames = function (AValue) {
      $mod.ShortDayNames = AValue.slice(0);
    };
    this.SetShortMonthNames = function (AValue) {
      $mod.ShortMonthNames = AValue.slice(0);
    };
    this.SetShortTimeFormat = function (Value) {
      $mod.ShortTimeFormat = Value;
    };
    this.SetCurrencyDecimals = function (AValue) {
      $mod.CurrencyDecimals = AValue;
    };
    this.SetThousandSeparator = function (Value) {
      $mod.ThousandSeparator = Value;
    };
    this.SetTimeAMString = function (Value) {
      $mod.TimeAMString = Value;
    };
    this.SetTimePMString = function (Value) {
      $mod.TimePMString = Value;
    };
    this.SetTimeSeparator = function (Value) {
      $mod.TimeSeparator = Value;
    };
    this.Init = function () {
      $mod.FormatSettings = $mod.TFormatSettings.$create("Create");
    };
  });
  this.FormatSettings = null;
  this.TwoDigitYearCenturyWindow = 0;
  this.DateTimeToJSDate = function (aDateTime) {
    var Result = null;
    var Y = 0;
    var M = 0;
    var D = 0;
    var h = 0;
    var n = 0;
    var s = 0;
    var z = 0;
    $mod.DecodeDate(pas.System.Trunc(aDateTime),{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    $mod.DecodeTime(pas.System.Frac(aDateTime),{get: function () {
        return h;
      }, set: function (v) {
        h = v;
      }},{get: function () {
        return n;
      }, set: function (v) {
        n = v;
      }},{get: function () {
        return s;
      }, set: function (v) {
        s = v;
      }},{get: function () {
        return z;
      }, set: function (v) {
        z = v;
      }});
    Result = new Date(Y,M - 1,D,h,n,s,z);
    return Result;
  };
  this.JSDateToDateTime = function (aDate) {
    var Result = 0.0;
    Result = $mod.EncodeDate(aDate.getFullYear(),aDate.getMonth() + 1,aDate.getDate()) + $mod.EncodeTime(aDate.getHours(),aDate.getMinutes(),aDate.getSeconds(),aDate.getMilliseconds());
    return Result;
  };
  this.DateTimeToTimeStamp = function (DateTime) {
    var Result = $mod.TTimeStamp.$new();
    var D = 0.0;
    D = DateTime * 86400000;
    if (D < 0) {
      D = D - 0.5}
     else D = D + 0.5;
    Result.Time = pas.System.Trunc(Math.abs(pas.System.Trunc(D)) % 86400000);
    Result.Date = 693594 + Math.floor(pas.System.Trunc(D) / 86400000);
    return Result;
  };
  this.TimeStampToDateTime = function (TimeStamp) {
    var Result = 0.0;
    Result = $mod.ComposeDateTime(TimeStamp.Date - 693594,TimeStamp.Time / 86400000);
    return Result;
  };
  this.MSecsToTimeStamp = function (MSecs) {
    var Result = $mod.TTimeStamp.$new();
    Result.Date = pas.System.Trunc(MSecs / 86400000);
    MSecs = MSecs - (Result.Date * 86400000);
    Result.Time = Math.round(MSecs);
    return Result;
  };
  this.TimeStampToMSecs = function (TimeStamp) {
    var Result = 0;
    Result = TimeStamp.Time + (TimeStamp.Date * 86400000);
    return Result;
  };
  this.TryEncodeDate = function (Year, Month, Day, date) {
    var Result = false;
    var c = 0;
    var ya = 0;
    Result = (Year > 0) && (Year < 10000) && (Month >= 1) && (Month <= 12) && (Day > 0) && (Day <= $mod.MonthDays[+$mod.IsLeapYear(Year)][Month - 1]);
    if (Result) {
      if (Month > 2) {
        Month -= 3}
       else {
        Month += 9;
        Year -= 1;
      };
      c = Math.floor(Year / 100);
      ya = Year - (100 * c);
      date.set(((146097 * c) >>> 2) + ((1461 * ya) >>> 2) + Math.floor(((153 * Month) + 2) / 5) + Day);
      date.set(date.get() - 693900);
    };
    return Result;
  };
  this.TryEncodeTime = function (Hour, Min, Sec, MSec, Time) {
    var Result = false;
    Result = (Hour < 24) && (Min < 60) && (Sec < 60) && (MSec < 1000);
    if (Result) Time.set(((Hour * 3600000) + (Min * 60000) + (Sec * 1000) + MSec) / 86400000);
    return Result;
  };
  this.EncodeDate = function (Year, Month, Day) {
    var Result = 0.0;
    if (!$mod.TryEncodeDate(Year,Month,Day,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",["%s-%s-%s is not a valid date specification",[$mod.IntToStr(Year),$mod.IntToStr(Month),$mod.IntToStr(Day)]]);
    return Result;
  };
  this.EncodeTime = function (Hour, Minute, Second, MilliSecond) {
    var Result = 0.0;
    if (!$mod.TryEncodeTime(Hour,Minute,Second,MilliSecond,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",["%s:%s:%s.%s is not a valid time specification",[$mod.IntToStr(Hour),$mod.IntToStr(Minute),$mod.IntToStr(Second),$mod.IntToStr(MilliSecond)]]);
    return Result;
  };
  this.ComposeDateTime = function (date, Time) {
    var Result = 0.0;
    if (date < 0) {
      Result = pas.System.Trunc(date) - Math.abs(pas.System.Frac(Time))}
     else Result = pas.System.Trunc(date) + Math.abs(pas.System.Frac(Time));
    return Result;
  };
  this.DecodeDate = function (date, Year, Month, Day) {
    var ly = 0;
    var ld = 0;
    var lm = 0;
    var j = 0;
    if (date <= -693594) {
      Year.set(0);
      Month.set(0);
      Day.set(0);
    } else {
      if (date > 0) {
        date = date + (1 / (86400000 * 2))}
       else date = date - (1 / (86400000 * 2));
      if (date > $mod.MaxDateTime) date = $mod.MaxDateTime;
      j = rtl.shl(pas.System.Trunc(date) + 693900,2) - 1;
      ly = Math.floor(j / 146097);
      j = j - (146097 * ly);
      ld = rtl.lw(j >>> 2);
      j = Math.floor((rtl.lw(ld << 2) + 3) / 1461);
      ld = rtl.lw(((rtl.lw(ld << 2) + 7) - (1461 * j)) >>> 2);
      lm = Math.floor(((5 * ld) - 3) / 153);
      ld = Math.floor((((5 * ld) + 2) - (153 * lm)) / 5);
      ly = (100 * ly) + j;
      if (lm < 10) {
        lm += 3}
       else {
        lm -= 9;
        ly += 1;
      };
      Year.set(ly);
      Month.set(lm);
      Day.set(ld);
    };
  };
  this.DecodeDateFully = function (DateTime, Year, Month, Day, DOW) {
    var Result = false;
    $mod.DecodeDate(DateTime,Year,Month,Day);
    DOW.set($mod.DayOfWeek(DateTime));
    Result = $mod.IsLeapYear(Year.get());
    return Result;
  };
  this.DecodeTime = function (Time, Hour, Minute, Second, MilliSecond) {
    var l = 0;
    l = $mod.DateTimeToTimeStamp(Time).Time;
    Hour.set(Math.floor(l / 3600000));
    l = l % 3600000;
    Minute.set(Math.floor(l / 60000));
    l = l % 60000;
    Second.set(Math.floor(l / 1000));
    l = l % 1000;
    MilliSecond.set(l);
  };
  this.DateTimeToSystemTime = function (DateTime, SystemTime) {
    $mod.DecodeDateFully(DateTime,{p: SystemTime, get: function () {
        return this.p.Year;
      }, set: function (v) {
        this.p.Year = v;
      }},{p: SystemTime, get: function () {
        return this.p.Month;
      }, set: function (v) {
        this.p.Month = v;
      }},{p: SystemTime, get: function () {
        return this.p.Day;
      }, set: function (v) {
        this.p.Day = v;
      }},{p: SystemTime, get: function () {
        return this.p.DayOfWeek;
      }, set: function (v) {
        this.p.DayOfWeek = v;
      }});
    $mod.DecodeTime(DateTime,{p: SystemTime, get: function () {
        return this.p.Hour;
      }, set: function (v) {
        this.p.Hour = v;
      }},{p: SystemTime, get: function () {
        return this.p.Minute;
      }, set: function (v) {
        this.p.Minute = v;
      }},{p: SystemTime, get: function () {
        return this.p.Second;
      }, set: function (v) {
        this.p.Second = v;
      }},{p: SystemTime, get: function () {
        return this.p.MilliSecond;
      }, set: function (v) {
        this.p.MilliSecond = v;
      }});
    SystemTime.DayOfWeek -= 1;
  };
  this.SystemTimeToDateTime = function (SystemTime) {
    var Result = 0.0;
    Result = $mod.ComposeDateTime($impl.DoEncodeDate(SystemTime.Year,SystemTime.Month,SystemTime.Day),$impl.DoEncodeTime(SystemTime.Hour,SystemTime.Minute,SystemTime.Second,SystemTime.MilliSecond));
    return Result;
  };
  this.DayOfWeek = function (DateTime) {
    var Result = 0;
    Result = 1 + ((pas.System.Trunc(DateTime) - 1) % 7);
    if (Result <= 0) Result += 7;
    return Result;
  };
  this.Date = function () {
    var Result = 0.0;
    Result = pas.System.Trunc($mod.Now());
    return Result;
  };
  this.Time = function () {
    var Result = 0.0;
    Result = $mod.Now() - $mod.Date();
    return Result;
  };
  this.Now = function () {
    var Result = 0.0;
    Result = $mod.JSDateToDateTime(new Date());
    return Result;
  };
  this.IncMonth = function (DateTime, NumberOfMonths) {
    var Result = 0.0;
    var Year = 0;
    var Month = 0;
    var Day = 0;
    $mod.DecodeDate(DateTime,{get: function () {
        return Year;
      }, set: function (v) {
        Year = v;
      }},{get: function () {
        return Month;
      }, set: function (v) {
        Month = v;
      }},{get: function () {
        return Day;
      }, set: function (v) {
        Day = v;
      }});
    $mod.IncAMonth({get: function () {
        return Year;
      }, set: function (v) {
        Year = v;
      }},{get: function () {
        return Month;
      }, set: function (v) {
        Month = v;
      }},{get: function () {
        return Day;
      }, set: function (v) {
        Day = v;
      }},NumberOfMonths);
    Result = $mod.ComposeDateTime($impl.DoEncodeDate(Year,Month,Day),DateTime);
    return Result;
  };
  this.IncAMonth = function (Year, Month, Day, NumberOfMonths) {
    var TempMonth = 0;
    var S = 0;
    if (NumberOfMonths >= 0) {
      S = 1;
      Year.set(Year.get() + Math.floor(NumberOfMonths / 12));
    } else {
      S = -1;
      Year.set(Year.get() - Math.floor(Math.abs(NumberOfMonths) / 12));
    };
    TempMonth = (Month.get() + (NumberOfMonths % 12)) - 1;
    if ((TempMonth > 11) || (TempMonth < 0)) {
      TempMonth -= S * 12;
      Year.set(Year.get() + S);
    };
    Month.set(TempMonth + 1);
    if (Day.get() > $mod.MonthDays[+$mod.IsLeapYear(Year.get())][Month.get() - 1]) Day.set($mod.MonthDays[+$mod.IsLeapYear(Year.get())][Month.get() - 1]);
  };
  this.IsLeapYear = function (Year) {
    var Result = false;
    Result = ((Year % 4) === 0) && (((Year % 100) !== 0) || ((Year % 400) === 0));
    return Result;
  };
  this.DateToStr = function (date) {
    var Result = "";
    Result = $mod.FormatDateTime("ddddd",date);
    return Result;
  };
  this.TimeToStr = function (Time) {
    var Result = "";
    Result = $mod.FormatDateTime("tt",Time);
    return Result;
  };
  this.DateTimeToStr = function (DateTime, ForceTimeIfZero) {
    var Result = "";
    Result = $mod.FormatDateTime($impl.DateTimeToStrFormat[+ForceTimeIfZero],DateTime);
    return Result;
  };
  this.StrToDate = function (S) {
    var Result = 0.0;
    Result = $mod.StrToDate$2(S,$mod.ShortDateFormat,"\x00");
    return Result;
  };
  this.StrToDate$1 = function (S, separator) {
    var Result = 0.0;
    Result = $mod.StrToDate$2(S,$mod.ShortDateFormat,separator);
    return Result;
  };
  this.StrToDate$2 = function (S, useformat, separator) {
    var Result = 0.0;
    var MSg = "";
    Result = $impl.IntStrToDate({get: function () {
        return MSg;
      }, set: function (v) {
        MSg = v;
      }},S,useformat,separator);
    if (MSg !== "") throw $mod.EConvertError.$create("Create$1",[MSg]);
    return Result;
  };
  this.StrToTime = function (S) {
    var Result = 0.0;
    Result = $mod.StrToTime$1(S,$mod.TimeSeparator);
    return Result;
  };
  this.StrToTime$1 = function (S, separator) {
    var Result = 0.0;
    var Msg = "";
    Result = $impl.IntStrToTime({get: function () {
        return Msg;
      }, set: function (v) {
        Msg = v;
      }},S,S.length,separator);
    if (Msg !== "") throw $mod.EConvertError.$create("Create$1",[Msg]);
    return Result;
  };
  this.StrToDateTime = function (S) {
    var Result = 0.0;
    var TimeStr = "";
    var DateStr = "";
    var PartsFound = 0;
    PartsFound = $impl.SplitDateTimeStr(S,{get: function () {
        return DateStr;
      }, set: function (v) {
        DateStr = v;
      }},{get: function () {
        return TimeStr;
      }, set: function (v) {
        TimeStr = v;
      }});
    var $tmp1 = PartsFound;
    if ($tmp1 === 0) {
      Result = $mod.StrToDate("")}
     else if ($tmp1 === 1) {
      if (DateStr.length > 0) {
        Result = $mod.StrToDate$2(DateStr,$mod.ShortDateFormat,$mod.DateSeparator)}
       else Result = $mod.StrToTime(TimeStr)}
     else if ($tmp1 === 2) Result = $mod.ComposeDateTime($mod.StrToDate$2(DateStr,$mod.ShortDateFormat,$mod.DateSeparator),$mod.StrToTime(TimeStr));
    return Result;
  };
  this.FormatDateTime = function (FormatStr, DateTime) {
    var Result = "";
    function StoreStr(APos, Len) {
      Result = Result + pas.System.Copy(FormatStr,APos,Len);
    };
    function StoreString(AStr) {
      Result = Result + AStr;
    };
    function StoreInt(Value, Digits) {
      var S = "";
      S = $mod.IntToStr(Value);
      while (S.length < Digits) S = "0" + S;
      StoreString(S);
    };
    var Year = 0;
    var Month = 0;
    var Day = 0;
    var DayOfWeek = 0;
    var Hour = 0;
    var Minute = 0;
    var Second = 0;
    var MilliSecond = 0;
    function StoreFormat(FormatStr, Nesting, TimeFlag) {
      var Token = "";
      var lastformattoken = "";
      var prevlasttoken = "";
      var Count = 0;
      var Clock12 = false;
      var tmp = 0;
      var isInterval = false;
      var P = 0;
      var FormatCurrent = 0;
      var FormatEnd = 0;
      if (Nesting > 1) return;
      FormatCurrent = 1;
      FormatEnd = FormatStr.length;
      Clock12 = false;
      isInterval = false;
      P = 1;
      while (P <= FormatEnd) {
        Token = FormatStr.charAt(P - 1);
        var $tmp1 = Token;
        if (($tmp1 === "'") || ($tmp1 === '"')) {
          P += 1;
          while ((P < FormatEnd) && (FormatStr.charAt(P - 1) !== Token)) P += 1;
        } else if (($tmp1 === "A") || ($tmp1 === "a")) {
          if (($mod.CompareText(pas.System.Copy(FormatStr,P,3),"A\/P") === 0) || ($mod.CompareText(pas.System.Copy(FormatStr,P,4),"AMPM") === 0) || ($mod.CompareText(pas.System.Copy(FormatStr,P,5),"AM\/PM") === 0)) {
            Clock12 = true;
            break;
          };
        };
        P += 1;
      };
      Token = "ÿ";
      lastformattoken = " ";
      prevlasttoken = "H";
      while (FormatCurrent <= FormatEnd) {
        Token = $mod.UpperCase(FormatStr.charAt(FormatCurrent - 1)).charAt(0);
        Count = 1;
        P = FormatCurrent + 1;
        var $tmp2 = Token;
        if (($tmp2 === "'") || ($tmp2 === '"')) {
          while ((P < FormatEnd) && (FormatStr.charAt(P - 1) !== Token)) P += 1;
          P += 1;
          Count = P - FormatCurrent;
          StoreStr(FormatCurrent + 1,Count - 2);
        } else if ($tmp2 === "A") {
          if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,4),"AMPM") === 0) {
            Count = 4;
            if (Hour < 12) {
              StoreString($mod.TimeAMString)}
             else StoreString($mod.TimePMString);
          } else if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,5),"AM\/PM") === 0) {
            Count = 5;
            if (Hour < 12) {
              StoreStr(FormatCurrent,2)}
             else StoreStr(FormatCurrent + 3,2);
          } else if ($mod.CompareText(pas.System.Copy(FormatStr,FormatCurrent,3),"A\/P") === 0) {
            Count = 3;
            if (Hour < 12) {
              StoreStr(FormatCurrent,1)}
             else StoreStr(FormatCurrent + 2,1);
          } else throw $mod.EConvertError.$create("Create$1",["Illegal character in format string"]);
        } else if ($tmp2 === "\/") {
          StoreString($mod.DateSeparator);
        } else if ($tmp2 === ":") {
          StoreString($mod.TimeSeparator)}
         else if (($tmp2 === " ") || ($tmp2 === "C") || ($tmp2 === "D") || ($tmp2 === "H") || ($tmp2 === "M") || ($tmp2 === "N") || ($tmp2 === "S") || ($tmp2 === "T") || ($tmp2 === "Y") || ($tmp2 === "Z") || ($tmp2 === "F")) {
          while ((P <= FormatEnd) && ($mod.UpperCase(FormatStr.charAt(P - 1)) === Token)) P += 1;
          Count = P - FormatCurrent;
          var $tmp3 = Token;
          if ($tmp3 === " ") {
            StoreStr(FormatCurrent,Count)}
           else if ($tmp3 === "Y") {
            if (Count > 2) {
              StoreInt(Year,4)}
             else StoreInt(Year % 100,2);
          } else if ($tmp3 === "M") {
            if (isInterval && ((prevlasttoken === "H") || TimeFlag)) {
              StoreInt(Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60),0)}
             else if ((lastformattoken === "H") || TimeFlag) {
              if (Count === 1) {
                StoreInt(Minute,0)}
               else StoreInt(Minute,2);
            } else {
              var $tmp4 = Count;
              if ($tmp4 === 1) {
                StoreInt(Month,0)}
               else if ($tmp4 === 2) {
                StoreInt(Month,2)}
               else if ($tmp4 === 3) {
                StoreString($mod.ShortMonthNames[Month - 1])}
               else {
                StoreString($mod.LongMonthNames[Month - 1]);
              };
            };
          } else if ($tmp3 === "D") {
            var $tmp5 = Count;
            if ($tmp5 === 1) {
              StoreInt(Day,0)}
             else if ($tmp5 === 2) {
              StoreInt(Day,2)}
             else if ($tmp5 === 3) {
              StoreString($mod.ShortDayNames[DayOfWeek - 1])}
             else if ($tmp5 === 4) {
              StoreString($mod.LongDayNames[DayOfWeek - 1])}
             else if ($tmp5 === 5) {
              StoreFormat($mod.ShortDateFormat,Nesting + 1,false)}
             else {
              StoreFormat($mod.LongDateFormat,Nesting + 1,false);
            };
          } else if ($tmp3 === "H") {
            if (isInterval) {
              StoreInt(Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24),0)}
             else if (Clock12) {
              tmp = Hour % 12;
              if (tmp === 0) tmp = 12;
              if (Count === 1) {
                StoreInt(tmp,0)}
               else StoreInt(tmp,2);
            } else {
              if (Count === 1) {
                StoreInt(Hour,0)}
               else StoreInt(Hour,2);
            }}
           else if ($tmp3 === "N") {
            if (isInterval) {
              StoreInt(Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60),0)}
             else if (Count === 1) {
              StoreInt(Minute,0)}
             else StoreInt(Minute,2)}
           else if ($tmp3 === "S") {
            if (isInterval) {
              StoreInt(Second + ((Minute + ((Hour + (pas.System.Trunc(Math.abs(DateTime)) * 24)) * 60)) * 60),0)}
             else if (Count === 1) {
              StoreInt(Second,0)}
             else StoreInt(Second,2)}
           else if ($tmp3 === "Z") {
            if (Count === 1) {
              StoreInt(MilliSecond,0)}
             else StoreInt(MilliSecond,3)}
           else if ($tmp3 === "T") {
            if (Count === 1) {
              StoreFormat($mod.ShortTimeFormat,Nesting + 1,true)}
             else StoreFormat($mod.LongTimeFormat,Nesting + 1,true)}
           else if ($tmp3 === "C") {
            StoreFormat($mod.ShortDateFormat,Nesting + 1,false);
            if ((Hour !== 0) || (Minute !== 0) || (Second !== 0)) {
              StoreString(" ");
              StoreFormat($mod.LongTimeFormat,Nesting + 1,true);
            };
          } else if ($tmp3 === "F") {
            StoreFormat($mod.ShortDateFormat,Nesting + 1,false);
            StoreString(" ");
            StoreFormat($mod.LongTimeFormat,Nesting + 1,true);
          };
          prevlasttoken = lastformattoken;
          lastformattoken = Token;
        } else {
          StoreString(Token);
        };
        FormatCurrent += Count;
      };
    };
    $mod.DecodeDateFully(DateTime,{get: function () {
        return Year;
      }, set: function (v) {
        Year = v;
      }},{get: function () {
        return Month;
      }, set: function (v) {
        Month = v;
      }},{get: function () {
        return Day;
      }, set: function (v) {
        Day = v;
      }},{get: function () {
        return DayOfWeek;
      }, set: function (v) {
        DayOfWeek = v;
      }});
    $mod.DecodeTime(DateTime,{get: function () {
        return Hour;
      }, set: function (v) {
        Hour = v;
      }},{get: function () {
        return Minute;
      }, set: function (v) {
        Minute = v;
      }},{get: function () {
        return Second;
      }, set: function (v) {
        Second = v;
      }},{get: function () {
        return MilliSecond;
      }, set: function (v) {
        MilliSecond = v;
      }});
    if (FormatStr !== "") {
      StoreFormat(FormatStr,0,false)}
     else StoreFormat("C",0,false);
    return Result;
  };
  this.TryStrToDate = function (S, Value) {
    var Result = false;
    Result = $mod.TryStrToDate$2(S,Value,$mod.ShortDateFormat,"\x00");
    return Result;
  };
  this.TryStrToDate$1 = function (S, Value, separator) {
    var Result = false;
    Result = $mod.TryStrToDate$2(S,Value,$mod.ShortDateFormat,separator);
    return Result;
  };
  this.TryStrToDate$2 = function (S, Value, useformat, separator) {
    var Result = false;
    var Msg = "";
    Result = S.length !== 0;
    if (Result) {
      Value.set($impl.IntStrToDate({get: function () {
          return Msg;
        }, set: function (v) {
          Msg = v;
        }},S,useformat,separator));
      Result = Msg === "";
    };
    return Result;
  };
  this.TryStrToTime = function (S, Value) {
    var Result = false;
    Result = $mod.TryStrToTime$1(S,Value,"\x00");
    return Result;
  };
  this.TryStrToTime$1 = function (S, Value, separator) {
    var Result = false;
    var Msg = "";
    Result = S.length !== 0;
    if (Result) {
      Value.set($impl.IntStrToTime({get: function () {
          return Msg;
        }, set: function (v) {
          Msg = v;
        }},S,S.length,separator));
      Result = Msg === "";
    };
    return Result;
  };
  this.TryStrToDateTime = function (S, Value) {
    var Result = false;
    var I = 0;
    var dtdate = 0.0;
    var dttime = 0.0;
    Result = false;
    I = pas.System.Pos($mod.TimeSeparator,S);
    if (I > 0) {
      while ((I > 0) && (S.charAt(I - 1) !== " ")) I -= 1;
      if (I > 0) {
        if (!$mod.TryStrToDate(pas.System.Copy(S,1,I - 1),{get: function () {
            return dtdate;
          }, set: function (v) {
            dtdate = v;
          }})) return Result;
        if (!$mod.TryStrToTime(pas.System.Copy(S,I + 1,S.length - I),{get: function () {
            return dttime;
          }, set: function (v) {
            dttime = v;
          }})) return Result;
        Value.set($mod.ComposeDateTime(dtdate,dttime));
        Result = true;
      } else Result = $mod.TryStrToTime(S,Value);
    } else Result = $mod.TryStrToDate(S,Value);
    return Result;
  };
  this.StrToDateDef = function (S, Defvalue) {
    var Result = 0.0;
    Result = $mod.StrToDateDef$1(S,Defvalue,"\x00");
    return Result;
  };
  this.StrToDateDef$1 = function (S, Defvalue, separator) {
    var Result = 0.0;
    if (!$mod.TryStrToDate$1(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},separator)) Result = Defvalue;
    return Result;
  };
  this.StrToTimeDef = function (S, Defvalue) {
    var Result = 0.0;
    Result = $mod.StrToTimeDef$1(S,Defvalue,"\x00");
    return Result;
  };
  this.StrToTimeDef$1 = function (S, Defvalue, separator) {
    var Result = 0.0;
    if (!$mod.TryStrToTime$1(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},separator)) Result = Defvalue;
    return Result;
  };
  this.StrToDateTimeDef = function (S, Defvalue) {
    var Result = 0.0;
    if (!$mod.TryStrToDateTime(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = Defvalue;
    return Result;
  };
  this.CurrentYear = function () {
    var Result = 0;
    Result = (new Date()).getFullYear();
    return Result;
  };
  this.ReplaceTime = function (dati, NewTime) {
    dati.set($mod.ComposeDateTime(dati.get(),NewTime));
  };
  this.ReplaceDate = function (DateTime, NewDate) {
    var tmp = 0.0;
    tmp = NewDate;
    $mod.ReplaceTime({get: function () {
        return tmp;
      }, set: function (v) {
        tmp = v;
      }},DateTime.get());
    DateTime.set(tmp);
  };
  this.FloatToDateTime = function (Value) {
    var Result = 0.0;
    if ((Value < $mod.MinDateTime) || (Value > $mod.MaxDateTime)) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidDateTime,[$mod.FloatToStr(Value)]]);
    Result = Value;
    return Result;
  };
  this.CurrencyFormat = 0;
  this.NegCurrFormat = 0;
  this.CurrencyDecimals = 2;
  this.CurrencyString = "$";
  this.FloattoCurr = function (Value) {
    var Result = 0.0;
    if (!$mod.TryFloatToCurr(Value,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidCurrency,[$mod.FloatToStr(Value)]]);
    return Result;
  };
  this.TryFloatToCurr = function (Value, AResult) {
    var Result = false;
    Result = (Value >= $mod.MinCurrency) && (Value <= $mod.MaxCurrency);
    if (Result) AResult.set(Value);
    return Result;
  };
  this.CurrToStr = function (Value) {
    var Result = "";
    Result = $mod.FloatToStrF(Value,$mod.TFloatFormat.ffGeneral,-1,0);
    return Result;
  };
  this.StrToCurr = function (S) {
    var Result = 0.0;
    if (!$mod.TryStrToCurr(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidCurrency,[S]]);
    return Result;
  };
  this.TryStrToCurr = function (S, Value) {
    var Result = false;
    var D = 0.0;
    Result = $mod.TryStrToFloat(S,{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    if (Result) Value.set(D);
    return Result;
  };
  this.StrToCurrDef = function (S, Default) {
    var Result = 0.0;
    var R = 0.0;
    if ($mod.TryStrToCurr(S,{get: function () {
        return R;
      }, set: function (v) {
        R = v;
      }})) {
      Result = R}
     else Result = Default;
    return Result;
  };
  $mod.$rtti.$DynArray("TPathStrArray",{eltype: rtl.string});
  this.ChangeFileExt = function (FileName, Extension) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    var SOF = false;
    i = FileName.length;
    EndSep = rtl.unionSet(rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators),rtl.createSet(pas.System.ExtensionSeparator.charCodeAt()));
    while ((i > 0) && !(FileName.charCodeAt(i - 1) in EndSep)) i -= 1;
    if ((i === 0) || (FileName.charAt(i - 1) !== pas.System.ExtensionSeparator)) {
      i = FileName.length + 1}
     else {
      SOF = (i === 1) || (FileName.charCodeAt(i - 1 - 1) in pas.System.AllowDirectorySeparators);
      if (SOF && !pas.System.FirstDotAtFileNameStartIsExtension) i = FileName.length + 1;
    };
    Result = pas.System.Copy(FileName,1,i - 1) + Extension;
    return Result;
  };
  this.ExtractFilePath = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    i = FileName.length;
    EndSep = rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators);
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    if (i > 0) {
      Result = pas.System.Copy(FileName,1,i)}
     else Result = "";
    return Result;
  };
  this.ExtractFileDrive = function (FileName) {
    var Result = "";
    var i = 0;
    var l = 0;
    Result = "";
    l = FileName.length;
    if (l < 2) return Result;
    if ($impl.CharInSet$1(FileName.charAt(1),pas.System.AllowDriveSeparators)) {
      Result = pas.System.Copy(FileName,1,2)}
     else if ($impl.CharInSet$1(FileName.charAt(0),pas.System.AllowDirectorySeparators) && $impl.CharInSet$1(FileName.charAt(1),pas.System.AllowDirectorySeparators)) {
      i = 2;
      while ((i < l) && !$impl.CharInSet$1(FileName.charAt((i + 1) - 1),pas.System.AllowDirectorySeparators)) i += 1;
      i += 1;
      while ((i < l) && !$impl.CharInSet$1(FileName.charAt((i + 1) - 1),pas.System.AllowDirectorySeparators)) i += 1;
      Result = pas.System.Copy(FileName,1,i);
    };
    return Result;
  };
  this.ExtractFileName = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    i = FileName.length;
    EndSep = rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators);
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    Result = pas.System.Copy(FileName,i + 1,2147483647);
    return Result;
  };
  this.ExtractFileExt = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    var SOF = false;
    Result = "";
    i = FileName.length;
    EndSep = rtl.unionSet(rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators),rtl.createSet(pas.System.ExtensionSeparator.charCodeAt()));
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    if ((i > 0) && (FileName.charAt(i - 1) === pas.System.ExtensionSeparator)) {
      SOF = (i === 1) || (FileName.charCodeAt(i - 1 - 1) in pas.System.AllowDirectorySeparators);
      if (!SOF || pas.System.FirstDotAtFileNameStartIsExtension) Result = pas.System.Copy(FileName,i,2147483647);
    } else Result = "";
    return Result;
  };
  this.ExtractFileDir = function (FileName) {
    var Result = "";
    var i = 0;
    var EndSep = {};
    i = FileName.length;
    EndSep = rtl.unionSet(pas.System.AllowDirectorySeparators,pas.System.AllowDriveSeparators);
    while ((i > 0) && !$impl.CharInSet$1(FileName.charAt(i - 1),EndSep)) i -= 1;
    if ((i > 1) && $impl.CharInSet$1(FileName.charAt(i - 1),pas.System.AllowDirectorySeparators) && !$impl.CharInSet$1(FileName.charAt(i - 1 - 1),EndSep)) i -= 1;
    Result = pas.System.Copy(FileName,1,i);
    return Result;
  };
  this.ExtractRelativepath = function (BaseName, DestName) {
    var Result = "";
    var OneLevelBack = "";
    var Source = "";
    var Dest = "";
    var Sc = 0;
    var Dc = 0;
    var I = 0;
    var J = 0;
    var SD = [];
    var DD = [];
    OneLevelBack = ".." + pas.System.PathDelim;
    if ($mod.UpperCase($mod.ExtractFileDrive(BaseName)) !== $mod.UpperCase($mod.ExtractFileDrive(DestName))) {
      Result = DestName;
      return Result;
    };
    Source = $mod.ExcludeTrailingPathDelimiter($mod.ExtractFilePath(BaseName));
    Dest = $mod.ExcludeTrailingPathDelimiter($mod.ExtractFilePath(DestName));
    SD = $mod.GetDirs(Source);
    Sc = rtl.length(SD);
    DD = $mod.GetDirs(Dest);
    Dc = rtl.length(SD);
    I = 0;
    while ((I < Dc) && (I < Sc)) {
      if ($mod.SameText(DD[I],SD[I])) {
        I += 1}
       else break;
    };
    Result = "";
    for (var $l1 = I, $end2 = Sc; $l1 <= $end2; $l1++) {
      J = $l1;
      Result = Result + OneLevelBack;
    };
    for (var $l3 = I, $end4 = Dc; $l3 <= $end4; $l3++) {
      J = $l3;
      Result = Result + DD[J] + pas.System.PathDelim;
    };
    Result = Result + $mod.ExtractFileName(DestName);
    return Result;
  };
  this.IncludeTrailingPathDelimiter = function (Path) {
    var Result = "";
    var l = 0;
    Result = Path;
    l = Result.length;
    if ((l === 0) || !$impl.CharInSet$1(Result.charAt(l - 1),pas.System.AllowDirectorySeparators)) Result = Result + pas.System.PathDelim;
    return Result;
  };
  this.ExcludeTrailingPathDelimiter = function (Path) {
    var Result = "";
    var L = 0;
    L = Path.length;
    if ((L > 0) && $impl.CharInSet$1(Path.charAt(L - 1),pas.System.AllowDirectorySeparators)) L -= 1;
    Result = pas.System.Copy(Path,1,L);
    return Result;
  };
  this.IncludeLeadingPathDelimiter = function (Path) {
    var Result = "";
    var l = 0;
    Result = Path;
    l = Result.length;
    if ((l === 0) || !$impl.CharInSet$1(Result.charAt(0),pas.System.AllowDirectorySeparators)) Result = pas.System.PathDelim + Result;
    return Result;
  };
  this.ExcludeLeadingPathDelimiter = function (Path) {
    var Result = "";
    var L = 0;
    Result = Path;
    L = Result.length;
    if ((L > 0) && $impl.CharInSet$1(Result.charAt(0),pas.System.AllowDirectorySeparators)) pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    return Result;
  };
  this.IsPathDelimiter = function (Path, Index) {
    var Result = false;
    Result = (Index > 0) && (Index <= Path.length) && $impl.CharInSet$1(Path.charAt(Index - 1),pas.System.AllowDirectorySeparators);
    return Result;
  };
  this.SetDirSeparators = function (FileName) {
    var Result = "";
    var I = 0;
    Result = FileName;
    for (var $l1 = 1, $end2 = Result.length; $l1 <= $end2; $l1++) {
      I = $l1;
      if ($impl.CharInSet$1(Result.charAt(I - 1),pas.System.AllowDirectorySeparators)) Result = rtl.setCharAt(Result,I - 1,pas.System.PathDelim);
    };
    return Result;
  };
  this.GetDirs = function (DirName) {
    var Result = [];
    var I = 0;
    var J = 0;
    var L = 0;
    var D = "";
    I = 1;
    J = 0;
    L = 0;
    Result = rtl.arraySetLength(Result,"",DirName.length);
    while (I <= DirName.length) {
      if ($impl.CharInSet$1(DirName.charAt(I - 1),pas.System.AllowDirectorySeparators)) {
        D = pas.System.Copy(DirName,J + 1,J - I);
        if (D !== "") {
          Result[L] = D;
          L += 1;
        };
        J = I;
      };
      I += 1;
    };
    Result = rtl.arraySetLength(Result,"",L);
    return Result;
  };
  this.ConcatPaths = function (Paths) {
    var Result = "";
    var I = 0;
    if (rtl.length(Paths) > 0) {
      Result = Paths[0];
      for (var $l1 = 1, $end2 = rtl.length(Paths) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        Result = $mod.IncludeTrailingPathDelimiter(Result) + $mod.ExcludeLeadingPathDelimiter(Paths[I]);
      };
    } else Result = "";
    return Result;
  };
  this.GUID_NULL = pas.System.TGuid.$clone({D1: 0x00000000, D2: 0x0000, D3: 0x0000, D4: [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]});
  this.Supports = function (Instance, AClass, Obj) {
    var Result = false;
    Result = (Instance !== null) && (Instance.QueryInterface(pas.System.IObjectInstance,Obj) === 0) && Obj.get().$class.InheritsFrom(AClass);
    return Result;
  };
  this.Supports$1 = function (Instance, IID, Intf) {
    var Result = false;
    Result = (Instance !== null) && (Instance.QueryInterface(IID,Intf) === 0);
    return Result;
  };
  this.Supports$2 = function (Instance, IID, Intf) {
    var Result = false;
    Result = (Instance !== null) && Instance.GetInterface(IID,Intf);
    return Result;
  };
  this.Supports$3 = function (Instance, IID, Intf) {
    var Result = false;
    Result = (Instance !== null) && Instance.GetInterfaceByStr(IID,Intf);
    return Result;
  };
  this.Supports$4 = function (Instance, AClass) {
    var Result = false;
    var Temp = null;
    Result = $mod.Supports(Instance,AClass,{get: function () {
        return Temp;
      }, set: function (v) {
        Temp = v;
      }});
    return Result;
  };
  this.Supports$5 = function (Instance, IID) {
    var Result = false;
    var Temp = null;
    try {
      Result = $mod.Supports$1(Instance,IID,{get: function () {
          return Temp;
        }, set: function (v) {
          Temp = v;
        }});
    } finally {
      rtl._Release(Temp);
    };
    return Result;
  };
  this.Supports$6 = function (Instance, IID) {
    var Result = false;
    var Temp = null;
    Result = $mod.Supports$2(Instance,IID,{get: function () {
        return Temp;
      }, set: function (v) {
        Temp = v;
      }});
    if (Temp && Temp.$kind==='com') Temp._Release();
    return Result;
  };
  this.Supports$7 = function (Instance, IID) {
    var Result = false;
    var Temp = null;
    Result = $mod.Supports$3(Instance,IID,{get: function () {
        return Temp;
      }, set: function (v) {
        Temp = v;
      }});
    if (Temp && Temp.$kind==='com') Temp._Release();
    return Result;
  };
  this.Supports$8 = function (AClass, IID) {
    var Result = false;
    var maps = undefined;
    if (AClass === null) return false;
    maps = AClass["$intfmaps"];
    if (!maps) return false;
    if (rtl.getObject(maps)[$mod.GUIDToString(IID)]) return true;
    Result = false;
    return Result;
  };
  this.Supports$9 = function (AClass, IID) {
    var Result = false;
    var maps = undefined;
    if (AClass === null) return false;
    maps = AClass["$intfmaps"];
    if (!maps) return false;
    if (rtl.getObject(maps)[$mod.UpperCase(IID)]) return true;
    Result = false;
    return Result;
  };
  this.TryStringToGUID = function (s, Guid) {
    var Result = false;
    var re = null;
    if (s.length !== 38) return false;
    re = new RegExp("^\\{[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\}$");
    Result = re.test(s);
    if (!Result) {
      Guid.D1 = 0;
      return Result;
    };
    rtl.strToGUIDR(s,Guid);
    Result = true;
    return Result;
  };
  this.StringToGUID = function (S) {
    var Result = pas.System.TGuid.$new();
    if (!$mod.TryStringToGUID(S,Result)) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidGUID,[S]]);
    return Result;
  };
  this.GUIDToString = function (guid) {
    var Result = "";
    Result = rtl.guidrToStr(guid);
    return Result;
  };
  this.IsEqualGUID = function (guid1, guid2) {
    var Result = false;
    var i = 0;
    if ((guid1.D1 !== guid2.D1) || (guid1.D2 !== guid2.D2) || (guid1.D3 !== guid2.D3)) return false;
    for (i = 0; i <= 7; i++) if (guid1.D4[i] !== guid2.D4[i]) return false;
    Result = true;
    return Result;
  };
  this.GuidCase = function (guid, List) {
    var Result = 0;
    for (var $l1 = rtl.length(List) - 1; $l1 >= 0; $l1--) {
      Result = $l1;
      if ($mod.IsEqualGUID(guid,List[Result])) return Result;
    };
    Result = -1;
    return Result;
  };
  this.CreateGUID = function (GUID) {
    var Result = 0;
    function R(B) {
      var Result = 0;
      var v = 0;
      v = pas.System.Random(256);
      while (B > 1) {
        v = (v * 256) + pas.System.Random(256);
        B -= 1;
      };
      Result = v;
      return Result;
    };
    var I = 0;
    Result = 0;
    GUID.D1 = R(4);
    GUID.D2 = R(2);
    GUID.D3 = R(2);
    for (I = 0; I <= 7; I++) GUID.D4[I] = R(1);
    return Result;
  };
  this.LastDelimiter = function (Delimiters, S) {
    var Result = 0;
    var P = "";
    Result = S.length;
    P = Delimiters;
    while (Result > 0) {
      if ((S.charAt(Result - 1) !== "\x00") && ($impl.StrScan(P,S.charAt(Result - 1)) !== "")) return Result;
      Result -= 1;
    };
    return Result;
  };
  $mod.$init = function () {
    $mod.FormatSettings = $mod.TFormatSettings.$create("Create");
    $mod.LongDayNames[0] = "Sunday";
    $mod.LongDayNames[1] = "Monday";
    $mod.LongDayNames[2] = "Tuesday";
    $mod.LongDayNames[3] = "Wednesday";
    $mod.LongDayNames[4] = "Thursday";
    $mod.LongDayNames[5] = "Friday";
    $mod.LongDayNames[6] = "Saturday";
    $mod.ShortDayNames[0] = "Sun";
    $mod.ShortDayNames[1] = "Mon";
    $mod.ShortDayNames[2] = "Tue";
    $mod.ShortDayNames[3] = "Wed";
    $mod.ShortDayNames[4] = "Thu";
    $mod.ShortDayNames[5] = "Fri";
    $mod.ShortDayNames[6] = "Sat";
    $mod.ShortMonthNames[0] = "Jan";
    $mod.ShortMonthNames[1] = "Feb";
    $mod.ShortMonthNames[2] = "Mar";
    $mod.ShortMonthNames[3] = "Apr";
    $mod.ShortMonthNames[4] = "May";
    $mod.ShortMonthNames[5] = "Jun";
    $mod.ShortMonthNames[6] = "Jul";
    $mod.ShortMonthNames[7] = "Aug";
    $mod.ShortMonthNames[8] = "Sep";
    $mod.ShortMonthNames[9] = "Oct";
    $mod.ShortMonthNames[10] = "Nov";
    $mod.ShortMonthNames[11] = "Dec";
    $mod.LongMonthNames[0] = "January";
    $mod.LongMonthNames[1] = "February";
    $mod.LongMonthNames[2] = "March";
    $mod.LongMonthNames[3] = "April";
    $mod.LongMonthNames[4] = "May";
    $mod.LongMonthNames[5] = "June";
    $mod.LongMonthNames[6] = "July";
    $mod.LongMonthNames[7] = "August";
    $mod.LongMonthNames[8] = "September";
    $mod.LongMonthNames[9] = "October";
    $mod.LongMonthNames[10] = "November";
    $mod.LongMonthNames[11] = "December";
    $mod.MonthDays[1][0] = 31;
    $mod.MonthDays[1][1] = 29;
    $mod.MonthDays[1][2] = 31;
    $mod.MonthDays[1][3] = 30;
    $mod.MonthDays[1][4] = 31;
    $mod.MonthDays[1][5] = 30;
    $mod.MonthDays[1][6] = 31;
    $mod.MonthDays[1][7] = 31;
    $mod.MonthDays[1][8] = 30;
    $mod.MonthDays[1][9] = 31;
    $mod.MonthDays[1][10] = 30;
    $mod.MonthDays[1][11] = 31;
    $mod.MonthDays[0][0] = 31;
    $mod.MonthDays[0][1] = 28;
    $mod.MonthDays[0][2] = 31;
    $mod.MonthDays[0][3] = 30;
    $mod.MonthDays[0][4] = 31;
    $mod.MonthDays[0][5] = 30;
    $mod.MonthDays[0][6] = 31;
    $mod.MonthDays[0][7] = 31;
    $mod.MonthDays[0][8] = 30;
    $mod.MonthDays[0][9] = 31;
    $mod.MonthDays[0][10] = 30;
    $mod.MonthDays[0][11] = 31;
    $impl.DateTimeToStrFormat[0] = "c";
    $impl.DateTimeToStrFormat[1] = "f";
    $mod.DateSeparator = "-";
    $mod.TimeSeparator = ":";
    $mod.ShortDateFormat = "yyyy-mm-dd";
    $mod.LongDateFormat = "ddd, yyyy-mm-dd";
    $mod.ShortTimeFormat = "hh:nn";
    $mod.LongTimeFormat = "hh:nn:ss";
    $mod.DecimalSeparator = ".";
    $mod.ThousandSeparator = ",";
    $mod.TimeAMString = "AM";
    $mod.TimePMString = "PM";
    $mod.TwoDigitYearCenturyWindow = 50;
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.StrScan = function (Str, Chr) {
    var Result = "";
    var i = 0;
    Result = Str;
    if (Result === "") return Result;
    i = 1;
    while (Result.charAt(i - 1) !== "\x00") {
      if (Result.charAt(i - 1) === Chr) return Result;
      i += 1;
      if (i > Str.length) break;
    };
    if (Chr !== "\x00") Result = "";
    return Result;
  };
  $impl.SAbortError = "Operation aborted";
  $mod.$rtti.$Set("TCharSet",{comptype: rtl.char});
  $impl.CharInSet$1 = function (Ch, CSet) {
    var Result = false;
    Result = Ch.charCodeAt() in CSet;
    return Result;
  };
  $impl.CheckBoolStrs = function () {
    if (rtl.length($mod.TrueBoolStrs) === 0) {
      $mod.TrueBoolStrs = rtl.arraySetLength($mod.TrueBoolStrs,"",1);
      $mod.TrueBoolStrs[0] = "True";
    };
    if (rtl.length($mod.FalseBoolStrs) === 0) {
      $mod.FalseBoolStrs = rtl.arraySetLength($mod.FalseBoolStrs,"",1);
      $mod.FalseBoolStrs[0] = "False";
    };
  };
  $impl.feInvalidFormat = 1;
  $impl.feMissingArgument = 2;
  $impl.feInvalidArgIndex = 3;
  $impl.DoFormatError = function (ErrCode, fmt) {
    var $tmp1 = ErrCode;
    if ($tmp1 === 1) {
      throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidFormat,[fmt]])}
     else if ($tmp1 === 2) {
      throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SArgumentMissing,[fmt]])}
     else if ($tmp1 === 3) throw $mod.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidArgIndex,[fmt]]);
  };
  $impl.maxdigits = 15;
  $impl.ReplaceDecimalSep = function (S, DS) {
    var Result = "";
    var P = 0;
    P = pas.System.Pos(".",S);
    if (P > 0) {
      Result = pas.System.Copy(S,1,P - 1) + DS + pas.System.Copy(S,P + 1,S.length - P)}
     else Result = S;
    return Result;
  };
  $impl.FormatGeneralFloat = function (Value, Precision, DS) {
    var Result = "";
    var P = 0;
    var PE = 0;
    var Q = 0;
    var Exponent = 0;
    if ((Precision === -1) || (Precision > 15)) Precision = 15;
    Result = rtl.floatToStr(Value,Precision + 7);
    Result = $mod.TrimLeft(Result);
    P = pas.System.Pos(".",Result);
    if (P === 0) return Result;
    PE = pas.System.Pos("E",Result);
    if (PE === 0) {
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    Q = PE + 2;
    Exponent = 0;
    while (Q <= Result.length) {
      Exponent = ((Exponent * 10) + Result.charCodeAt(Q - 1)) - "0".charCodeAt();
      Q += 1;
    };
    if (Result.charAt((PE + 1) - 1) === "-") Exponent = -Exponent;
    if (((P + Exponent) < PE) && (Exponent > -6)) {
      Result = rtl.strSetLength(Result,PE - 1);
      if (Exponent >= 0) {
        for (var $l1 = 0, $end2 = Exponent - 1; $l1 <= $end2; $l1++) {
          Q = $l1;
          Result = rtl.setCharAt(Result,P - 1,Result.charAt((P + 1) - 1));
          P += 1;
        };
        Result = rtl.setCharAt(Result,P - 1,".");
        P = 1;
        if (Result.charAt(P - 1) === "-") P += 1;
        while ((Result.charAt(P - 1) === "0") && (P < Result.length) && (pas.System.Copy(Result,P + 1,DS.length) !== DS)) pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P,1);
      } else {
        pas.System.Insert(pas.System.Copy("00000",1,-Exponent),{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P - 1);
        Result = rtl.setCharAt(Result,P - Exponent - 1,Result.charAt(P - Exponent - 1 - 1));
        Result = rtl.setCharAt(Result,P - 1,".");
        if (Exponent !== -1) Result = rtl.setCharAt(Result,P - Exponent - 1 - 1,"0");
      };
      Q = Result.length;
      while ((Q > 0) && (Result.charAt(Q - 1) === "0")) Q -= 1;
      if (Result.charAt(Q - 1) === ".") Q -= 1;
      if ((Q === 0) || ((Q === 1) && (Result.charAt(0) === "-"))) {
        Result = "0"}
       else Result = rtl.strSetLength(Result,Q);
    } else {
      while (Result.charAt(PE - 1 - 1) === "0") {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},PE - 1,1);
        PE -= 1;
      };
      if (Result.charAt(PE - 1 - 1) === DS) {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},PE - 1,1);
        PE -= 1;
      };
      if (Result.charAt((PE + 1) - 1) === "+") {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},PE + 1,1)}
       else PE += 1;
      while (Result.charAt((PE + 1) - 1) === "0") pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},PE + 1,1);
    };
    Result = $impl.ReplaceDecimalSep(Result,DS);
    return Result;
  };
  $impl.FormatExponentFloat = function (Value, Precision, Digits, DS) {
    var Result = "";
    var P = 0;
    DS = $mod.DecimalSeparator;
    if ((Precision === -1) || (Precision > 15)) Precision = 15;
    Result = rtl.floatToStr(Value,Precision + 7);
    while (Result.charAt(0) === " ") pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    P = pas.System.Pos("E",Result);
    if (P === 0) {
      Result = $impl.ReplaceDecimalSep(Result,DS);
      return Result;
    };
    P += 2;
    if (Digits > 4) Digits = 4;
    Digits = (Result.length - P - Digits) + 1;
    if (Digits < 0) {
      pas.System.Insert(pas.System.Copy("0000",1,-Digits),{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},P)}
     else while ((Digits > 0) && (Result.charAt(P - 1) === "0")) {
      pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},P,1);
      if (P > Result.length) {
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P - 2,2);
        break;
      };
      Digits -= 1;
    };
    Result = $impl.ReplaceDecimalSep(Result,DS);
    return Result;
  };
  $impl.FormatFixedFloat = function (Value, Digits, DS) {
    var Result = "";
    if (Digits === -1) {
      Digits = 2}
     else if (Digits > 18) Digits = 18;
    Result = rtl.floatToStr(Value,0,Digits);
    if ((Result !== "") && (Result.charAt(0) === " ")) pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    Result = $impl.ReplaceDecimalSep(Result,DS);
    return Result;
  };
  $impl.FormatNumberFloat = function (Value, Digits, DS, TS) {
    var Result = "";
    var P = 0;
    if (Digits === -1) {
      Digits = 2}
     else if (Digits > 15) Digits = 15;
    Result = rtl.floatToStr(Value,0,Digits);
    if ((Result !== "") && (Result.charAt(0) === " ")) pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    P = pas.System.Pos(".",Result);
    if (P <= 0) P = Result.length + 1;
    Result = $impl.ReplaceDecimalSep(Result,DS);
    P -= 3;
    if ((TS !== "") && (TS !== "\x00")) while (P > 1) {
      if (Result.charAt(P - 1 - 1) !== "-") pas.System.Insert(TS,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},P);
      P -= 3;
    };
    return Result;
  };
  $impl.RemoveLeadingNegativeSign = function (AValue, DS) {
    var Result = false;
    var i = 0;
    var TS = "";
    var StartPos = 0;
    Result = false;
    StartPos = 2;
    TS = $mod.ThousandSeparator;
    for (var $l1 = StartPos, $end2 = AValue.get().length; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = (AValue.get().charCodeAt(i - 1) in rtl.createSet(48,DS.charCodeAt(),69,43)) || (AValue.get().charAt(i - 1) === TS);
      if (!Result) break;
    };
    if (Result && (AValue.get().charAt(0) === "-")) pas.System.Delete(AValue,1,1);
    return Result;
  };
  $impl.FormatNumberCurrency = function (Value, Digits, DS, TS) {
    var Result = "";
    var Negative = false;
    var P = 0;
    if (Digits === -1) {
      Digits = $mod.CurrencyDecimals}
     else if (Digits > 18) Digits = 18;
    Result = rtl.floatToStr(Value,0,Digits);
    Negative = Result.charAt(0) === "-";
    if (Negative) pas.System.Delete({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},1,1);
    P = pas.System.Pos(".",Result);
    if (TS !== "") {
      if (P !== 0) {
        Result = $impl.ReplaceDecimalSep(Result,DS)}
       else P = Result.length + 1;
      P -= 3;
      while (P > 1) {
        pas.System.Insert(TS,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},P);
        P -= 3;
      };
    };
    if (Negative) $impl.RemoveLeadingNegativeSign({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},DS);
    if (!Negative) {
      var $tmp1 = $mod.CurrencyFormat;
      if ($tmp1 === 0) {
        Result = $mod.CurrencyString + Result}
       else if ($tmp1 === 1) {
        Result = Result + $mod.CurrencyString}
       else if ($tmp1 === 2) {
        Result = $mod.CurrencyString + " " + Result}
       else if ($tmp1 === 3) Result = Result + " " + $mod.CurrencyString;
    } else {
      var $tmp2 = $mod.NegCurrFormat;
      if ($tmp2 === 0) {
        Result = "(" + $mod.CurrencyString + Result + ")"}
       else if ($tmp2 === 1) {
        Result = "-" + $mod.CurrencyString + Result}
       else if ($tmp2 === 2) {
        Result = $mod.CurrencyString + "-" + Result}
       else if ($tmp2 === 3) {
        Result = $mod.CurrencyString + Result + "-"}
       else if ($tmp2 === 4) {
        Result = "(" + Result + $mod.CurrencyString + ")"}
       else if ($tmp2 === 5) {
        Result = "-" + Result + $mod.CurrencyString}
       else if ($tmp2 === 6) {
        Result = Result + "-" + $mod.CurrencyString}
       else if ($tmp2 === 7) {
        Result = Result + $mod.CurrencyString + "-"}
       else if ($tmp2 === 8) {
        Result = "-" + Result + " " + $mod.CurrencyString}
       else if ($tmp2 === 9) {
        Result = "-" + $mod.CurrencyString + " " + Result}
       else if ($tmp2 === 10) {
        Result = Result + " " + $mod.CurrencyString + "-"}
       else if ($tmp2 === 11) {
        Result = $mod.CurrencyString + " " + Result + "-"}
       else if ($tmp2 === 12) {
        Result = $mod.CurrencyString + " " + "-" + Result}
       else if ($tmp2 === 13) {
        Result = Result + "-" + " " + $mod.CurrencyString}
       else if ($tmp2 === 14) {
        Result = "(" + $mod.CurrencyString + " " + Result + ")"}
       else if ($tmp2 === 15) Result = "(" + Result + " " + $mod.CurrencyString + ")";
    };
    return Result;
  };
  $impl.RESpecials = "([\\+\\[\\]\\(\\)\\\\\\.\\*])";
  $impl.DoEncodeDate = function (Year, Month, Day) {
    var Result = 0;
    var D = 0.0;
    if ($mod.TryEncodeDate(Year,Month,Day,{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }})) {
      Result = pas.System.Trunc(D)}
     else Result = 0;
    return Result;
  };
  $impl.DoEncodeTime = function (Hour, Minute, Second, MilliSecond) {
    var Result = 0.0;
    if (!$mod.TryEncodeTime(Hour,Minute,Second,MilliSecond,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = 0;
    return Result;
  };
  $impl.DateTimeToStrFormat = ["c","f"];
  var WhiteSpace = " \b\t\n\f\r";
  var Digits = "0123456789";
  $impl.IntStrToDate = function (ErrorMsg, S, useformat, separator) {
    var Result = 0.0;
    function FixErrorMsg(errmarg) {
      ErrorMsg.set($mod.Format(pas.RTLConsts.SInvalidDateFormat,[errmarg]));
    };
    var df = "";
    var d = 0;
    var m = 0;
    var y = 0;
    var ly = 0;
    var ld = 0;
    var lm = 0;
    var n = 0;
    var i = 0;
    var len = 0;
    var c = 0;
    var dp = 0;
    var mp = 0;
    var yp = 0;
    var which = 0;
    var s1 = "";
    var values = [];
    var YearMoreThenTwoDigits = false;
    values = rtl.arraySetLength(values,0,4);
    Result = 0;
    len = S.length;
    ErrorMsg.set("");
    while ((len > 0) && (pas.System.Pos(S.charAt(len - 1),WhiteSpace) > 0)) len -= 1;
    if (len === 0) {
      FixErrorMsg(S);
      return Result;
    };
    YearMoreThenTwoDigits = false;
    if (separator === "\x00") if ($mod.DateSeparator !== "\x00") {
      separator = $mod.DateSeparator}
     else separator = "-";
    df = $mod.UpperCase(useformat);
    yp = 0;
    mp = 0;
    dp = 0;
    which = 0;
    i = 0;
    while ((i < df.length) && (which < 3)) {
      i += 1;
      var $tmp1 = df.charAt(i - 1);
      if ($tmp1 === "Y") {
        if (yp === 0) {
          which += 1;
          yp = which;
        }}
       else if ($tmp1 === "M") {
        if (mp === 0) {
          which += 1;
          mp = which;
        }}
       else if ($tmp1 === "D") if (dp === 0) {
        which += 1;
        dp = which;
      };
    };
    for (i = 1; i <= 3; i++) values[i] = 0;
    s1 = "";
    n = 0;
    for (var $l2 = 1, $end3 = len; $l2 <= $end3; $l2++) {
      i = $l2;
      if (pas.System.Pos(S.charAt(i - 1),Digits) > 0) s1 = s1 + S.charAt(i - 1);
      if ((separator !== " ") && (S.charAt(i - 1) === " ")) continue;
      if ((S.charAt(i - 1) === separator) || ((i === len) && (pas.System.Pos(S.charAt(i - 1),Digits) > 0))) {
        n += 1;
        if (n > 3) {
          FixErrorMsg(S);
          return Result;
        };
        if ((n === yp) && (s1.length > 2)) YearMoreThenTwoDigits = true;
        pas.System.val$6(s1,{a: n, p: values, get: function () {
            return this.p[this.a];
          }, set: function (v) {
            this.p[this.a] = v;
          }},{get: function () {
            return c;
          }, set: function (v) {
            c = v;
          }});
        if (c !== 0) {
          FixErrorMsg(S);
          return Result;
        };
        s1 = "";
      } else if (pas.System.Pos(S.charAt(i - 1),Digits) === 0) {
        FixErrorMsg(S);
        return Result;
      };
    };
    if ((which < 3) && (n > which)) {
      FixErrorMsg(S);
      return Result;
    };
    $mod.DecodeDate($mod.Date(),{get: function () {
        return ly;
      }, set: function (v) {
        ly = v;
      }},{get: function () {
        return lm;
      }, set: function (v) {
        lm = v;
      }},{get: function () {
        return ld;
      }, set: function (v) {
        ld = v;
      }});
    if (n === 3) {
      y = values[yp];
      m = values[mp];
      d = values[dp];
    } else {
      y = ly;
      if (n < 2) {
        d = values[1];
        m = lm;
      } else if (dp < mp) {
        d = values[1];
        m = values[2];
      } else {
        d = values[2];
        m = values[1];
      };
    };
    if ((y >= 0) && (y < 100) && !YearMoreThenTwoDigits) {
      ly = ly - $mod.TwoDigitYearCenturyWindow;
      y += Math.floor(ly / 100) * 100;
      if (($mod.TwoDigitYearCenturyWindow > 0) && (y < ly)) y += 100;
    };
    if (!$mod.TryEncodeDate(y,m,d,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) ErrorMsg.set(pas.RTLConsts.SErrInvalidDate);
    return Result;
  };
  var AMPM_None = 0;
  var AMPM_AM = 1;
  var AMPM_PM = 2;
  var tiHour = 0;
  var tiMin = 1;
  var tiSec = 2;
  var tiMSec = 3;
  var Digits$1 = "0123456789";
  $impl.IntStrToTime = function (ErrorMsg, S, Len, separator) {
    var Result = 0.0;
    var AmPm = 0;
    var TimeValues = [];
    function SplitElements(TimeValues, AmPm) {
      var Result = false;
      var Cur = 0;
      var Offset = 0;
      var ElemLen = 0;
      var Err = 0;
      var TimeIndex = 0;
      var FirstSignificantDigit = 0;
      var Value = 0;
      var DigitPending = false;
      var MSecPending = false;
      var AmPmStr = "";
      var CurChar = "";
      var I = 0;
      var allowedchars = "";
      Result = false;
      AmPm.set(0);
      MSecPending = false;
      TimeIndex = 0;
      for (I = 0; I <= 3; I++) TimeValues.get()[I] = 0;
      Cur = 1;
      while ((Cur < Len) && (S.charAt(Cur - 1) === " ")) Cur += 1;
      Offset = Cur;
      if ((Cur > (Len - 1)) || (S.charAt(Cur - 1) === separator) || (S.charAt(Cur - 1) === $mod.DecimalSeparator)) {
        return Result;
      };
      DigitPending = pas.System.Pos(S.charAt(Cur - 1),Digits$1) > 0;
      while (Cur <= Len) {
        CurChar = S.charAt(Cur - 1);
        if (pas.System.Pos(CurChar,Digits$1) > 0) {
          if (!DigitPending || (TimeIndex > 3)) {
            return Result;
          };
          Offset = Cur;
          if (CurChar !== "0") {
            FirstSignificantDigit = Offset}
           else FirstSignificantDigit = -1;
          while ((Cur < Len) && (pas.System.Pos(S.charAt((Cur + 1) - 1),Digits$1) > 0)) {
            if ((FirstSignificantDigit === -1) && (S.charAt(Cur - 1) !== "0")) FirstSignificantDigit = Cur;
            Cur += 1;
          };
          if (FirstSignificantDigit === -1) FirstSignificantDigit = Cur;
          ElemLen = (1 + Cur) - FirstSignificantDigit;
          if ((ElemLen <= 2) || ((ElemLen <= 3) && (TimeIndex === 3))) {
            pas.System.val$6(pas.System.Copy(S,FirstSignificantDigit,ElemLen),{get: function () {
                return Value;
              }, set: function (v) {
                Value = v;
              }},{get: function () {
                return Err;
              }, set: function (v) {
                Err = v;
              }});
            TimeValues.get()[TimeIndex] = Value;
            TimeIndex += 1;
            DigitPending = false;
          } else {
            return Result;
          };
        } else if (CurChar === " ") {}
        else if (CurChar === separator) {
          if (DigitPending || (TimeIndex > 2)) {
            return Result;
          };
          DigitPending = true;
          MSecPending = false;
        } else if (CurChar === $mod.DecimalSeparator) {
          if (DigitPending || MSecPending || (TimeIndex !== 3)) {
            return Result;
          };
          DigitPending = true;
          MSecPending = true;
        } else {
          if ((AmPm.get() !== 0) || DigitPending) {
            return Result;
          };
          Offset = Cur;
          allowedchars = $mod.DecimalSeparator + " ";
          if (separator !== "\x00") allowedchars = allowedchars + separator;
          while ((Cur < (Len - 1)) && (pas.System.Pos(S.charAt((Cur + 1) - 1),allowedchars) === 0) && (pas.System.Pos(S.charAt((Cur + 1) - 1),Digits$1) === 0)) Cur += 1;
          ElemLen = (1 + Cur) - Offset;
          AmPmStr = pas.System.Copy(S,1 + Offset,ElemLen);
          if ($mod.CompareText(AmPmStr,$mod.TimeAMString) === 0) {
            AmPm.set(1)}
           else if ($mod.CompareText(AmPmStr,$mod.TimePMString) === 0) {
            AmPm.set(2)}
           else if ($mod.CompareText(AmPmStr,"AM") === 0) {
            AmPm.set(1)}
           else if ($mod.CompareText(AmPmStr,"PM") === 0) {
            AmPm.set(2)}
           else {
            return Result;
          };
          if (TimeIndex === 0) {
            DigitPending = true;
          } else {
            TimeIndex = 3 + 1;
            DigitPending = false;
          };
        };
        Cur += 1;
      };
      if ((TimeIndex === 0) || ((AmPm.get() !== 0) && ((TimeValues.get()[0] > 12) || (TimeValues.get()[0] === 0))) || DigitPending) return Result;
      Result = true;
      return Result;
    };
    TimeValues = rtl.arraySetLength(TimeValues,0,4);
    if (separator === "\x00") if ($mod.TimeSeparator !== "\x00") {
      separator = $mod.TimeSeparator}
     else separator = ":";
    AmPm = 0;
    if (!SplitElements({get: function () {
        return TimeValues;
      }, set: function (v) {
        TimeValues = v;
      }},{get: function () {
        return AmPm;
      }, set: function (v) {
        AmPm = v;
      }})) {
      ErrorMsg.set($mod.Format(pas.RTLConsts.SErrInvalidTimeFormat,[S]));
      return Result;
    };
    if ((AmPm === 2) && (TimeValues[0] !== 12)) {
      TimeValues[0] += 12}
     else if ((AmPm === 1) && (TimeValues[0] === 12)) TimeValues[0] = 0;
    if (!$mod.TryEncodeTime(TimeValues[0],TimeValues[1],TimeValues[2],TimeValues[3],{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) ErrorMsg.set($mod.Format(pas.RTLConsts.SErrInvalidTimeFormat,[S]));
    return Result;
  };
  var WhiteSpace$1 = "\t\n\r ";
  $impl.SplitDateTimeStr = function (DateTimeStr, DateStr, TimeStr) {
    var Result = 0;
    var p = 0;
    var DummyDT = 0.0;
    Result = 0;
    DateStr.set("");
    TimeStr.set("");
    DateTimeStr = $mod.Trim(DateTimeStr);
    if (DateTimeStr.length === 0) return Result;
    if (($mod.DateSeparator === " ") && ($mod.TimeSeparator === " ") && (pas.System.Pos(" ",DateTimeStr) > 0)) {
      DateStr.set(DateTimeStr);
      return 1;
    };
    p = 1;
    if ($mod.DateSeparator !== " ") {
      while ((p < DateTimeStr.length) && !(pas.System.Pos(DateTimeStr.charAt((p + 1) - 1),WhiteSpace$1) > 0)) p += 1;
    } else {
      p = pas.System.Pos($mod.TimeSeparator,DateTimeStr);
      if (p !== 0) do {
        p -= 1;
      } while (!((p === 0) || (pas.System.Pos(DateTimeStr.charAt(p - 1),WhiteSpace$1) > 0)));
    };
    if (p === 0) p = DateTimeStr.length;
    DateStr.set(pas.System.Copy(DateTimeStr,1,p));
    TimeStr.set($mod.Trim(pas.System.Copy(DateTimeStr,p + 1,100)));
    if (TimeStr.get().length !== 0) {
      Result = 2}
     else {
      Result = 1;
      if ((($mod.DateSeparator !== $mod.TimeSeparator) && (pas.System.Pos($mod.TimeSeparator,DateStr.get()) > 0)) || (($mod.DateSeparator === $mod.TimeSeparator) && !$mod.TryStrToDate(DateStr.get(),{get: function () {
          return DummyDT;
        }, set: function (v) {
          DummyDT = v;
        }}))) {
        TimeStr.set(DateStr.get());
        DateStr.set("");
      };
    };
    return Result;
  };
});
rtl.module("TypInfo",["System","SysUtils","Types","RTLConsts","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TTypeKind = {"0": "tkUnknown", tkUnknown: 0, "1": "tkInteger", tkInteger: 1, "2": "tkChar", tkChar: 2, "3": "tkString", tkString: 3, "4": "tkEnumeration", tkEnumeration: 4, "5": "tkSet", tkSet: 5, "6": "tkDouble", tkDouble: 6, "7": "tkBool", tkBool: 7, "8": "tkProcVar", tkProcVar: 8, "9": "tkMethod", tkMethod: 9, "10": "tkArray", tkArray: 10, "11": "tkDynArray", tkDynArray: 11, "12": "tkRecord", tkRecord: 12, "13": "tkClass", tkClass: 13, "14": "tkClassRef", tkClassRef: 14, "15": "tkPointer", tkPointer: 15, "16": "tkJSValue", tkJSValue: 16, "17": "tkRefToProcVar", tkRefToProcVar: 17, "18": "tkInterface", tkInterface: 18, "19": "tkHelper", tkHelper: 19};
  $mod.$rtti.$Enum("TTypeKind",{minvalue: 0, maxvalue: 19, ordtype: 1, enumtype: this.TTypeKind});
  $mod.$rtti.$Set("TTypeKinds",{comptype: $mod.$rtti["TTypeKind"]});
  this.TCallConv = {"0": "ccReg", ccReg: 0, "1": "ccCdecl", ccCdecl: 1, "2": "ccPascal", ccPascal: 2, "3": "ccStdCall", ccStdCall: 3, "4": "ccSafeCall", ccSafeCall: 4, "5": "ccCppdecl", ccCppdecl: 5, "6": "ccFar16", ccFar16: 6, "7": "ccOldFPCCall", ccOldFPCCall: 7, "8": "ccInternProc", ccInternProc: 8, "9": "ccSysCall", ccSysCall: 9, "10": "ccSoftFloat", ccSoftFloat: 10, "11": "ccMWPascal", ccMWPascal: 11};
  $mod.$rtti.$Enum("TCallConv",{minvalue: 0, maxvalue: 11, ordtype: 1, enumtype: this.TCallConv});
  this.tkFloat = $mod.TTypeKind.tkDouble;
  this.tkProcedure = $mod.TTypeKind.tkProcVar;
  this.tkAny = rtl.createSet(null,$mod.TTypeKind.tkUnknown,$mod.TTypeKind.tkHelper);
  this.tkMethods = rtl.createSet($mod.TTypeKind.tkMethod);
  this.tkProperties = rtl.diffSet(rtl.diffSet($mod.tkAny,$mod.tkMethods),rtl.createSet($mod.TTypeKind.tkUnknown));
  $mod.$rtti.$inherited("TTypeInfoAttributes",pas.Types.$rtti["TJSValueDynArray"],{});
  $mod.$rtti.$ClassRef("TTypeInfoClassOf",{instancetype: $mod.$rtti["TTypeInfo"]});
  this.TOrdType = {"0": "otSByte", otSByte: 0, "1": "otUByte", otUByte: 1, "2": "otSWord", otSWord: 2, "3": "otUWord", otUWord: 3, "4": "otSLong", otSLong: 4, "5": "otULong", otULong: 5, "6": "otSIntDouble", otSIntDouble: 6, "7": "otUIntDouble", otUIntDouble: 7};
  $mod.$rtti.$Enum("TOrdType",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TOrdType});
  this.TParamFlag = {"0": "pfVar", pfVar: 0, "1": "pfConst", pfConst: 1, "2": "pfOut", pfOut: 2, "3": "pfArray", pfArray: 3};
  $mod.$rtti.$Enum("TParamFlag",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TParamFlag});
  $mod.$rtti.$Set("TParamFlags",{comptype: $mod.$rtti["TParamFlag"]});
  $mod.$rtti.$DynArray("TProcedureParams",{eltype: $mod.$rtti["TProcedureParam"]});
  this.TProcedureFlag = {"0": "pfStatic", pfStatic: 0, "1": "pfVarargs", pfVarargs: 1, "2": "pfExternal", pfExternal: 2};
  $mod.$rtti.$Enum("TProcedureFlag",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TProcedureFlag});
  $mod.$rtti.$Set("TProcedureFlags",{comptype: $mod.$rtti["TProcedureFlag"]});
  this.TMethodKind = {"0": "mkProcedure", mkProcedure: 0, "1": "mkFunction", mkFunction: 1, "2": "mkConstructor", mkConstructor: 2, "3": "mkDestructor", mkDestructor: 3, "4": "mkClassProcedure", mkClassProcedure: 4, "5": "mkClassFunction", mkClassFunction: 5};
  $mod.$rtti.$Enum("TMethodKind",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TMethodKind});
  $mod.$rtti.$Set("TMethodKinds",{comptype: $mod.$rtti["TMethodKind"]});
  this.TTypeMemberKind = {"0": "tmkUnknown", tmkUnknown: 0, "1": "tmkField", tmkField: 1, "2": "tmkMethod", tmkMethod: 2, "3": "tmkProperty", tmkProperty: 3};
  $mod.$rtti.$Enum("TTypeMemberKind",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTypeMemberKind});
  $mod.$rtti.$Set("TTypeMemberKinds",{comptype: $mod.$rtti["TTypeMemberKind"]});
  $mod.$rtti.$DynArray("TTypeMemberDynArray",{eltype: $mod.$rtti["TTypeMember"]});
  $mod.$rtti.$DynArray("TTypeMemberMethodDynArray",{eltype: $mod.$rtti["TTypeMemberMethod"]});
  this.pfGetFunction = 1;
  this.pfSetProcedure = 2;
  this.pfStoredFalse = 4;
  this.pfStoredField = 8;
  this.pfStoredFunction = 12;
  this.pfHasIndex = 16;
  $mod.$rtti.$DynArray("TTypeMemberPropertyDynArray",{eltype: $mod.$rtti["TTypeMemberProperty"]});
  rtl.createClass($mod,"EPropertyError",pas.SysUtils.Exception,function () {
  });
  this.GetClassMembers = function (aTIStruct) {
    var Result = [];
    var C = null;
    var i = 0;
    var PropName = "";
    var Names = null;
    Result = [];
    Names = new Object();
    C = aTIStruct;
    while (C !== null) {
      for (var $l1 = 0, $end2 = rtl.length(C.names) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        PropName = C.names[i];
        if (Names.hasOwnProperty(PropName)) continue;
        Result.push(C.members[PropName]);
        Names[PropName] = true;
      };
      if (!rtl.isExt(C,rtl.tTypeInfoClass)) break;
      C = C.ancestor;
    };
    return Result;
  };
  this.GetClassMember = function (aTIStruct, aName) {
    var Result = null;
    var C = null;
    var i = 0;
    C = aTIStruct;
    while (C !== null) {
      if (C.members.hasOwnProperty(aName)) return C.members[aName];
      if (!rtl.isExt(C,rtl.tTypeInfoClass)) break;
      C = C.ancestor;
    };
    C = aTIStruct;
    while (C !== null) {
      for (var $l1 = 0, $end2 = rtl.length(C.names) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.CompareText(C.names[i],aName) === 0) return C.members[C.names[i]];
      };
      if (!rtl.isExt(C,rtl.tTypeInfoClass)) break;
      C = C.ancestor;
    };
    Result = null;
    return Result;
  };
  this.GetInstanceMethod = function (Instance, aName) {
    var Result = null;
    var TI = null;
    if (Instance === null) return null;
    TI = $mod.GetClassMember(Instance.$rtti,aName);
    if (!rtl.isExt(TI,rtl.tTypeMemberMethod)) return null;
    Result = rtl.createCallback(Instance,TI.name);
    return Result;
  };
  this.GetClassMethods = function (aTIStruct) {
    var Result = [];
    var C = null;
    var i = 0;
    var Cnt = 0;
    var j = 0;
    Cnt = 0;
    C = aTIStruct;
    while (C !== null) {
      Cnt += C.methods.length;
      if (!rtl.isExt(C,rtl.tTypeInfoClass)) break;
      C = C.ancestor;
    };
    Result = rtl.arraySetLength(Result,null,Cnt);
    C = aTIStruct;
    i = 0;
    while (C !== null) {
      for (var $l1 = 0, $end2 = C.methods.length - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        Result[i] = C.members[C.methods[j]];
        i += 1;
      };
      if (!rtl.isExt(C,rtl.tTypeInfoClass)) break;
      C = C.ancestor;
    };
    return Result;
  };
  this.GetInterfaceMembers = function (aTIInterface) {
    var Result = [];
    var Intf = null;
    var i = 0;
    var Cnt = 0;
    var j = 0;
    Cnt = 0;
    Intf = aTIInterface;
    while (Intf !== null) {
      Cnt += rtl.length(Intf.names);
      Intf = Intf.ancestor;
    };
    Result = rtl.arraySetLength(Result,null,Cnt);
    Intf = aTIInterface;
    i = 0;
    while (Intf !== null) {
      for (var $l1 = 0, $end2 = rtl.length(Intf.names) - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        Result[i] = Intf.members[Intf.names[j]];
        i += 1;
      };
      Intf = Intf.ancestor;
    };
    return Result;
  };
  this.GetInterfaceMember = function (aTIInterface, aName) {
    var Result = null;
    var Intf = null;
    var i = 0;
    Intf = aTIInterface;
    while (Intf !== null) {
      if (Intf.members.hasOwnProperty(aName)) return Intf.members[aName];
      Intf = Intf.ancestor;
    };
    Intf = aTIInterface;
    while (Intf !== null) {
      for (var $l1 = 0, $end2 = rtl.length(Intf.names) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.CompareText(Intf.names[i],aName) === 0) return Intf.members[Intf.names[i]];
      };
      Intf = Intf.ancestor;
    };
    Result = null;
    return Result;
  };
  this.GetInterfaceMethods = function (aTIInterface) {
    var Result = [];
    var Intf = null;
    var i = 0;
    var Cnt = 0;
    var j = 0;
    Cnt = 0;
    Intf = aTIInterface;
    while (Intf !== null) {
      Cnt += Intf.methods.length;
      Intf = Intf.ancestor;
    };
    Result = rtl.arraySetLength(Result,null,Cnt);
    Intf = aTIInterface;
    i = 0;
    while (Intf !== null) {
      for (var $l1 = 0, $end2 = Intf.methods.length - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        Result[i] = Intf.members[Intf.methods[j]];
        i += 1;
      };
      Intf = Intf.ancestor;
    };
    return Result;
  };
  this.GetRTTIAttributes = function (Attributes) {
    var Result = [];
    var i = 0;
    var len = 0;
    var AttrClass = null;
    var ProcName = "";
    var Attr = null;
    Result = [];
    if (Attributes == undefined) return Result;
    i = 0;
    len = rtl.length(Attributes);
    while (i < len) {
      AttrClass = rtl.getObject(Attributes[i]);
      i += 1;
      ProcName = "" + Attributes[i];
      i += 1;
      if ((i < len) && rtl.isArray(Attributes[i])) {
        Attr = AttrClass.$create(ProcName,Attributes[i]);
        i += 1;
      } else Attr = AttrClass.$create(ProcName);
      Result.splice(rtl.length(Result),0,Attr);
    };
    return Result;
  };
  this.GetPropInfos = function (aTIStruct) {
    var Result = [];
    var C = null;
    var i = 0;
    var Names = null;
    var PropName = "";
    Result = [];
    C = aTIStruct;
    Names = new Object();
    while (C !== null) {
      for (var $l1 = 0, $end2 = C.properties.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        PropName = C.properties[i];
        if (Names.hasOwnProperty(PropName)) continue;
        Result.push(C.members[PropName]);
        Names[PropName] = true;
      };
      if (!rtl.isExt(C,rtl.tTypeInfoClass)) break;
      C = C.ancestor;
    };
    return Result;
  };
  this.GetPropList = function (aTIStruct, TypeKinds, Sorted) {
    var Result = [];
    function NameSort(a, b) {
      var Result = 0;
      if (rtl.getObject(a).name < rtl.getObject(b).name) {
        Result = -1}
       else if (rtl.getObject(a).name > rtl.getObject(b).name) {
        Result = 1}
       else Result = 0;
      return Result;
    };
    var C = null;
    var i = 0;
    var Names = null;
    var PropName = "";
    var Prop = null;
    Result = [];
    C = aTIStruct;
    Names = new Object();
    while (C !== null) {
      for (var $l1 = 0, $end2 = C.properties.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        PropName = C.properties[i];
        if (Names.hasOwnProperty(PropName)) continue;
        Prop = C.members[PropName];
        if (!(Prop.typeinfo.kind in TypeKinds)) continue;
        Result.push(Prop);
        Names[PropName] = true;
      };
      if (!rtl.isExt(C,rtl.tTypeInfoClass)) break;
      C = C.ancestor;
    };
    if (Sorted) Result.sort(NameSort);
    return Result;
  };
  this.GetPropList$1 = function (aTIStruct) {
    var Result = [];
    Result = $mod.GetPropInfos(aTIStruct);
    return Result;
  };
  this.GetPropList$2 = function (AClass) {
    var Result = [];
    Result = $mod.GetPropInfos(AClass.$rtti);
    return Result;
  };
  this.GetPropList$3 = function (Instance) {
    var Result = [];
    Result = $mod.GetPropList$2(Instance.$class.ClassType());
    return Result;
  };
  this.GetPropInfo = function (TI, PropName) {
    var Result = null;
    var m = null;
    var i = 0;
    var C = null;
    C = TI;
    while (C !== null) {
      m = C.members[PropName];
      if (rtl.isExt(m,rtl.tTypeMemberProperty)) return m;
      if (!rtl.isExt(C,rtl.tTypeInfoClass)) break;
      C = C.ancestor;
    };
    Result = null;
    do {
      for (var $l1 = 0, $end2 = TI.properties.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (pas.SysUtils.CompareText(PropName,TI.properties[i]) === 0) {
          m = TI.members[TI.properties[i]];
          if (rtl.isExt(m,rtl.tTypeMemberProperty)) Result = m;
          return Result;
        };
      };
      if (!rtl.isExt(TI,rtl.tTypeInfoClass)) break;
      TI = TI.ancestor;
    } while (!(TI === null));
    return Result;
  };
  this.GetPropInfo$1 = function (TI, PropName, Kinds) {
    var Result = null;
    Result = $mod.GetPropInfo(TI,PropName);
    if (rtl.neSet(Kinds,{}) && (Result !== null) && !(Result.typeinfo.kind in Kinds)) Result = null;
    return Result;
  };
  this.GetPropInfo$2 = function (Instance, PropName) {
    var Result = null;
    Result = $mod.GetPropInfo$1(Instance.$rtti,PropName,{});
    return Result;
  };
  this.GetPropInfo$3 = function (Instance, PropName, Kinds) {
    var Result = null;
    Result = $mod.GetPropInfo$1(Instance.$rtti,PropName,Kinds);
    return Result;
  };
  this.GetPropInfo$4 = function (aClass, PropName) {
    var Result = null;
    Result = $mod.GetPropInfo$1(aClass.$rtti,PropName,{});
    return Result;
  };
  this.GetPropInfo$5 = function (aClass, PropName, Kinds) {
    var Result = null;
    Result = $mod.GetPropInfo$1(aClass.$rtti,PropName,Kinds);
    return Result;
  };
  this.FindPropInfo = function (Instance, PropName) {
    var Result = null;
    Result = $mod.GetPropInfo(Instance.$rtti,PropName);
    if (Result === null) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SErrPropertyNotFound,[PropName]]);
    return Result;
  };
  this.FindPropInfo$1 = function (Instance, PropName, Kinds) {
    var Result = null;
    Result = $mod.GetPropInfo$1(Instance.$rtti,PropName,Kinds);
    if (Result === null) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SErrPropertyNotFound,[PropName]]);
    return Result;
  };
  this.FindPropInfo$2 = function (aClass, PropName) {
    var Result = null;
    Result = $mod.GetPropInfo(aClass.$rtti,PropName);
    if (Result === null) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SErrPropertyNotFound,[PropName]]);
    return Result;
  };
  this.FindPropInfo$3 = function (aClass, PropName, Kinds) {
    var Result = null;
    Result = $mod.GetPropInfo$1(aClass.$rtti,PropName,Kinds);
    if (Result === null) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SErrPropertyNotFound,[PropName]]);
    return Result;
  };
  this.IsStoredProp = function (Instance, PropInfo) {
    var Result = false;
    var $tmp1 = PropInfo.flags & 12;
    if ($tmp1 === 0) {
      Result = true}
     else if ($tmp1 === 4) {
      Result = false}
     else if ($tmp1 === 8) {
      Result = !(Instance[PropInfo.stored] == false)}
     else {
      Result = Instance[PropInfo.stored]();
    };
    return Result;
  };
  this.IsStoredProp$1 = function (Instance, PropName) {
    var Result = false;
    Result = $mod.IsStoredProp(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.IsPublishedProp = function (Instance, PropName) {
    var Result = false;
    Result = $mod.GetPropInfo$2(Instance,PropName) !== null;
    return Result;
  };
  this.IsPublishedProp$1 = function (aClass, PropName) {
    var Result = false;
    Result = $mod.GetPropInfo$4(aClass,PropName) !== null;
    return Result;
  };
  this.PropType = function (Instance, PropName) {
    var Result = 0;
    Result = $mod.FindPropInfo(Instance,PropName).typeinfo.kind;
    return Result;
  };
  this.PropType$1 = function (aClass, PropName) {
    var Result = 0;
    Result = $mod.FindPropInfo$2(aClass,PropName).typeinfo.kind;
    return Result;
  };
  this.PropIsType = function (Instance, PropName, TypeKind) {
    var Result = false;
    Result = $mod.PropType(Instance,PropName) === TypeKind;
    return Result;
  };
  this.PropIsType$1 = function (aClass, PropName, TypeKind) {
    var Result = false;
    Result = $mod.PropType$1(aClass,PropName) === TypeKind;
    return Result;
  };
  this.GetJSValueProp = function (Instance, TI, PropName) {
    var Result = undefined;
    var PropInfo = null;
    PropInfo = $mod.GetPropInfo(TI,PropName);
    if (PropInfo === null) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SErrPropertyNotFound,[PropName]]);
    Result = $mod.GetJSValueProp$1(Instance,PropInfo);
    return Result;
  };
  this.GetJSValueProp$1 = function (Instance, PropInfo) {
    var Result = undefined;
    var gk = 0;
    gk = $impl.GetPropGetterKind(PropInfo);
    var $tmp1 = gk;
    if ($tmp1 === $impl.TGetterKind.gkNone) {
      throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SCantReadPropertyS,[PropInfo.name]])}
     else if ($tmp1 === $impl.TGetterKind.gkField) {
      Result = Instance[PropInfo.getter]}
     else if ($tmp1 === $impl.TGetterKind.gkFunction) {
      if ((16 & PropInfo.flags) > 0) {
        Result = Instance[PropInfo.getter](PropInfo.index)}
       else Result = Instance[PropInfo.getter]()}
     else if ($tmp1 === $impl.TGetterKind.gkFunctionWithParams) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SIndexedPropertyNeedsParams,[PropInfo.name]]);
    return Result;
  };
  this.GetJSValueProp$2 = function (Instance, PropName) {
    var Result = undefined;
    Result = $mod.GetJSValueProp$3(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetJSValueProp$3 = function (Instance, PropInfo) {
    var Result = undefined;
    Result = $mod.GetJSValueProp$1(Instance,PropInfo);
    return Result;
  };
  this.SetJSValueProp = function (Instance, TI, PropName, Value) {
    var PropInfo = null;
    PropInfo = $mod.GetPropInfo(TI,PropName);
    if (PropInfo === null) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SErrPropertyNotFound,[PropName]]);
    $mod.SetJSValueProp$1(Instance,PropInfo,Value);
  };
  this.SetJSValueProp$1 = function (Instance, PropInfo, Value) {
    var sk = 0;
    sk = $impl.GetPropSetterKind(PropInfo);
    var $tmp1 = sk;
    if ($tmp1 === $impl.TSetterKind.skNone) {
      throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SCantWritePropertyS,[PropInfo.name]])}
     else if ($tmp1 === $impl.TSetterKind.skField) {
      Instance[PropInfo.setter] = Value}
     else if ($tmp1 === $impl.TSetterKind.skProcedure) {
      if ((16 & PropInfo.flags) > 0) {
        Instance[PropInfo.setter](PropInfo.index,Value)}
       else Instance[PropInfo.setter](Value)}
     else if ($tmp1 === $impl.TSetterKind.skProcedureWithParams) throw $mod.EPropertyError.$create("CreateFmt",[pas.RTLConsts.SIndexedPropertyNeedsParams,[PropInfo.name]]);
  };
  this.SetJSValueProp$2 = function (Instance, PropName, Value) {
    $mod.SetJSValueProp$3(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetJSValueProp$3 = function (Instance, PropInfo, Value) {
    $mod.SetJSValueProp$1(Instance,PropInfo,Value);
  };
  this.GetNativeIntProp = function (Instance, PropName) {
    var Result = 0;
    Result = $mod.GetNativeIntProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetNativeIntProp$1 = function (Instance, PropInfo) {
    var Result = 0;
    Result = Math.floor($mod.GetJSValueProp$3(Instance,PropInfo));
    return Result;
  };
  this.SetNativeIntProp = function (Instance, PropName, Value) {
    $mod.SetJSValueProp$3(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetNativeIntProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetJSValueProp$3(Instance,PropInfo,Value);
  };
  this.GetOrdProp = function (Instance, PropName) {
    var Result = 0;
    Result = $mod.GetOrdProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetOrdProp$1 = function (Instance, PropInfo) {
    var Result = 0;
    var o = null;
    var Key = "";
    var n = 0;
    if (PropInfo.typeinfo.kind === $mod.TTypeKind.tkSet) {
      o = rtl.getObject($mod.GetJSValueProp$3(Instance,PropInfo));
      Result = 0;
      for (Key in o) {
        n = parseInt(Key,10);
        if (n < 32) Result = Result + (1 << n);
      };
    } else Result = Math.floor($mod.GetJSValueProp$3(Instance,PropInfo));
    return Result;
  };
  this.SetOrdProp = function (Instance, PropName, Value) {
    $mod.SetOrdProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetOrdProp$1 = function (Instance, PropInfo, Value) {
    var o = null;
    var i = 0;
    if (PropInfo.typeinfo.kind === $mod.TTypeKind.tkSet) {
      o = new Object();
      for (i = 0; i <= 31; i++) if (((1 << i) & Value) > 0) o["" + i] = true;
      $mod.SetJSValueProp$3(Instance,PropInfo,o);
    } else $mod.SetJSValueProp$3(Instance,PropInfo,Value);
  };
  this.GetEnumProp = function (Instance, PropName) {
    var Result = "";
    Result = $mod.GetEnumProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetEnumProp$1 = function (Instance, PropInfo) {
    var Result = "";
    var n = 0;
    var TIEnum = null;
    TIEnum = rtl.asExt(PropInfo.typeinfo,rtl.tTypeInfoEnum);
    n = Math.floor($mod.GetJSValueProp$3(Instance,PropInfo));
    if ((n >= TIEnum.minvalue) && (n <= TIEnum.maxvalue)) {
      Result = TIEnum.enumtype[n]}
     else Result = "" + n;
    return Result;
  };
  this.SetEnumProp = function (Instance, PropName, Value) {
    $mod.SetEnumProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetEnumProp$1 = function (Instance, PropInfo, Value) {
    var TIEnum = null;
    var n = 0;
    TIEnum = rtl.asExt(PropInfo.typeinfo,rtl.tTypeInfoEnum);
    n = TIEnum.enumtype[Value];
    if (!pas.JS.isUndefined(n)) $mod.SetJSValueProp$3(Instance,PropInfo,n);
  };
  this.GetEnumName = function (TypeInfo, Value) {
    var Result = "";
    Result = TypeInfo.enumtype[Value];
    return Result;
  };
  this.GetEnumValue = function (TypeInfo, Name) {
    var Result = 0;
    Result = TypeInfo.enumtype[Name];
    return Result;
  };
  this.GetEnumNameCount = function (TypeInfo) {
    var Result = 0;
    var o = null;
    var l = 0;
    var r = 0;
    o = TypeInfo.enumtype;
    Result = 1;
    while (o.hasOwnProperty("" + Result)) Result = Result * 2;
    l = Math.floor(Result / 2);
    r = Result;
    while (l <= r) {
      Result = Math.floor((l + r) / 2);
      if (o.hasOwnProperty("" + Result)) {
        l = Result + 1}
       else r = Result - 1;
    };
    if (o.hasOwnProperty("" + Result)) Result += 1;
    return Result;
  };
  this.GetSetProp = function (Instance, PropName) {
    var Result = "";
    Result = $mod.GetSetProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetSetProp$1 = function (Instance, PropInfo) {
    var Result = "";
    var o = null;
    var key = "";
    var Value = "";
    var n = 0;
    var TIEnum = null;
    var TISet = null;
    Result = "";
    TISet = rtl.asExt(PropInfo.typeinfo,rtl.tTypeInfoSet);
    TIEnum = null;
    if (rtl.isExt(TISet.comptype,rtl.tTypeInfoEnum)) TIEnum = TISet.comptype;
    o = rtl.getObject($mod.GetJSValueProp$3(Instance,PropInfo));
    for (key in o) {
      n = parseInt(key,10);
      if ((TIEnum !== null) && (n >= TIEnum.minvalue) && (n <= TIEnum.maxvalue)) {
        Value = TIEnum.enumtype[n]}
       else Value = "" + n;
      if (Result !== "") Result = Result + ",";
      Result = Result + Value;
    };
    Result = "[" + Result + "]";
    return Result;
  };
  this.GetSetPropArray = function (Instance, PropName) {
    var Result = [];
    Result = $mod.GetSetPropArray$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetSetPropArray$1 = function (Instance, PropInfo) {
    var Result = [];
    var o = null;
    var Key = "";
    Result = [];
    o = rtl.getObject($mod.GetJSValueProp$3(Instance,PropInfo));
    for (Key in o) Result.push(parseInt(Key,10));
    return Result;
  };
  this.SetSetPropArray = function (Instance, PropName, Arr) {
    $mod.SetSetPropArray$1(Instance,$mod.FindPropInfo(Instance,PropName),Arr);
  };
  this.SetSetPropArray$1 = function (Instance, PropInfo, Arr) {
    var o = null;
    var i = 0;
    o = new Object();
    for (var $in1 = Arr, $l2 = 0, $end3 = rtl.length($in1) - 1; $l2 <= $end3; $l2++) {
      i = $in1[$l2];
      o["" + i] = true;
    };
    $mod.SetJSValueProp$3(Instance,PropInfo,o);
  };
  this.GetBoolProp = function (Instance, PropName) {
    var Result = false;
    Result = $mod.GetBoolProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetBoolProp$1 = function (Instance, PropInfo) {
    var Result = false;
    Result = !($mod.GetJSValueProp$3(Instance,PropInfo) == false);
    return Result;
  };
  this.SetBoolProp = function (Instance, PropName, Value) {
    $mod.SetBoolProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetBoolProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetJSValueProp$3(Instance,PropInfo,Value);
  };
  this.GetStrProp = function (Instance, PropName) {
    var Result = "";
    Result = $mod.GetStrProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetStrProp$1 = function (Instance, PropInfo) {
    var Result = "";
    Result = "" + $mod.GetJSValueProp$3(Instance,PropInfo);
    return Result;
  };
  this.SetStrProp = function (Instance, PropName, Value) {
    $mod.SetStrProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetStrProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetJSValueProp$3(Instance,PropInfo,Value);
  };
  this.GetStringProp = function (Instance, PropName) {
    var Result = "";
    Result = $mod.GetStrProp(Instance,PropName);
    return Result;
  };
  this.GetStringProp$1 = function (Instance, PropInfo) {
    var Result = "";
    Result = $mod.GetStrProp$1(Instance,PropInfo);
    return Result;
  };
  this.SetStringProp = function (Instance, PropName, Value) {
    $mod.SetStrProp(Instance,PropName,Value);
  };
  this.SetStringProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetStrProp$1(Instance,PropInfo,Value);
  };
  this.GetFloatProp = function (Instance, PropName) {
    var Result = 0.0;
    Result = $mod.GetFloatProp$1(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetFloatProp$1 = function (Instance, PropInfo) {
    var Result = 0.0;
    Result = rtl.getNumber($mod.GetJSValueProp$3(Instance,PropInfo));
    return Result;
  };
  this.SetFloatProp = function (Instance, PropName, Value) {
    $mod.SetFloatProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetFloatProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetJSValueProp$3(Instance,PropInfo,Value);
  };
  this.GetObjectProp = function (Instance, PropName) {
    var Result = null;
    Result = $mod.GetObjectProp$2(Instance,$mod.FindPropInfo(Instance,PropName));
    return Result;
  };
  this.GetObjectProp$1 = function (Instance, PropName, MinClass) {
    var Result = null;
    Result = $mod.GetObjectProp$2(Instance,$mod.FindPropInfo(Instance,PropName));
    if ((MinClass !== null) && (Result !== null)) if (!Result.$class.InheritsFrom(MinClass)) Result = null;
    return Result;
  };
  this.GetObjectProp$2 = function (Instance, PropInfo) {
    var Result = null;
    Result = $mod.GetObjectProp$3(Instance,PropInfo,null);
    return Result;
  };
  this.GetObjectProp$3 = function (Instance, PropInfo, MinClass) {
    var Result = null;
    var O = null;
    O = rtl.getObject($mod.GetJSValueProp$3(Instance,PropInfo));
    if ((MinClass !== null) && !O.$class.InheritsFrom(MinClass)) {
      Result = null}
     else Result = O;
    return Result;
  };
  this.SetObjectProp = function (Instance, PropName, Value) {
    $mod.SetObjectProp$1(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
  this.SetObjectProp$1 = function (Instance, PropInfo, Value) {
    $mod.SetJSValueProp$3(Instance,PropInfo,Value);
  };
  this.GetMethodProp = function (Instance, PropInfo) {
    var Result = pas.System.TMethod.$new();
    var v = undefined;
    var fn = undefined;
    Result.Code = null;
    Result.Data = null;
    v = $mod.GetJSValueProp$3(Instance,PropInfo);
    if (!rtl.isFunction(v)) return Result;
    Result.Data = rtl.getObject(v)["scope"];
    fn = rtl.getObject(v)["fn"];
    if (rtl.isString(fn)) {
      if (Result.Data !== null) {
        Result.Code = Result.Data["" + fn]}
       else Result.Code = v;
    } else Result.Code = fn;
    return Result;
  };
  this.GetMethodProp$1 = function (Instance, PropName) {
    var Result = pas.System.TMethod.$new();
    Result.$assign($mod.GetMethodProp(Instance,$mod.FindPropInfo(Instance,PropName)));
    return Result;
  };
  this.SetMethodProp = function (Instance, PropInfo, Value) {
    var cb = null;
    var Code = null;
    Code = Value.Code;
    if (Code === null) {
      cb = null}
     else if (rtl.isFunction(Code)) {
      if ((Code["scope"] === Value.Data) && (rtl.isFunction(Code["fn"]) || rtl.isString(Code["fn"]))) {
        cb = Code;
      } else if (rtl.isString(Code["fn"])) {
        cb = rtl.createCallback(Value.Data,"" + Code["fn"])}
       else cb = rtl.createCallback(Value.Data,Code);
    } else cb = rtl.createCallback(Value.Data,Code);
    $mod.SetJSValueProp$3(Instance,PropInfo,cb);
  };
  this.SetMethodProp$1 = function (Instance, PropName, Value) {
    $mod.SetMethodProp(Instance,$mod.FindPropInfo(Instance,PropName),Value);
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$ClassRef("TCreatorAttributeClass",{instancetype: $mod.$rtti["TCreatorAttribute"]});
  $impl.TGetterKind = {"0": "gkNone", gkNone: 0, "1": "gkField", gkField: 1, "2": "gkFunction", gkFunction: 2, "3": "gkFunctionWithParams", gkFunctionWithParams: 3};
  $mod.$rtti.$Enum("TGetterKind",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: $impl.TGetterKind});
  $impl.GetPropGetterKind = function (PropInfo) {
    var Result = 0;
    if (PropInfo.getter === "") {
      Result = $impl.TGetterKind.gkNone}
     else if ((1 & PropInfo.flags) > 0) {
      if (rtl.length(PropInfo.params) > 0) {
        Result = $impl.TGetterKind.gkFunctionWithParams}
       else Result = $impl.TGetterKind.gkFunction;
    } else Result = $impl.TGetterKind.gkField;
    return Result;
  };
  $impl.TSetterKind = {"0": "skNone", skNone: 0, "1": "skField", skField: 1, "2": "skProcedure", skProcedure: 2, "3": "skProcedureWithParams", skProcedureWithParams: 3};
  $mod.$rtti.$Enum("TSetterKind",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: $impl.TSetterKind});
  $impl.GetPropSetterKind = function (PropInfo) {
    var Result = 0;
    if (PropInfo.setter === "") {
      Result = $impl.TSetterKind.skNone}
     else if ((2 & PropInfo.flags) > 0) {
      if (rtl.length(PropInfo.params) > 0) {
        Result = $impl.TSetterKind.skProcedureWithParams}
       else Result = $impl.TSetterKind.skProcedure;
    } else Result = $impl.TSetterKind.skField;
    return Result;
  };
});
rtl.module("Web",["System","Types","JS"],function () {
  "use strict";
  var $mod = this;
  $mod.$rtti.$RefToProcVar("TJSEventHandler",{procsig: rtl.newTIProcSig([["Event",$mod.$rtti["TEventListenerEvent"]]],rtl.boolean)});
  $mod.$rtti.$ProcVar("TJSNodeListCallBack",{procsig: rtl.newTIProcSig([["currentValue",$mod.$rtti["TJSNode"]],["currentIndex",rtl.nativeint],["list",$mod.$rtti["TJSNodeList"]]])});
  $mod.$rtti.$MethodVar("TJSNodeListEvent",{procsig: rtl.newTIProcSig([["currentValue",$mod.$rtti["TJSNode"]],["currentIndex",rtl.nativeint],["list",$mod.$rtti["TJSNodeList"]]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TDOMTokenlistCallBack",{procsig: rtl.newTIProcSig([["Current",rtl.jsvalue],["currentIndex",rtl.nativeint],["list",$mod.$rtti["TJSDOMTokenList"]]])});
  rtl.recNewT($mod,"TJSClientRect",function () {
    this.left = 0.0;
    this.top = 0.0;
    this.right = 0.0;
    this.bottom = 0.0;
    this.$eq = function (b) {
      return (this.left === b.left) && (this.top === b.top) && (this.right === b.right) && (this.bottom === b.bottom);
    };
    this.$assign = function (s) {
      this.left = s.left;
      this.top = s.top;
      this.right = s.right;
      this.bottom = s.bottom;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSClientRect",{});
    $r.addField("left",rtl.double);
    $r.addField("top",rtl.double);
    $r.addField("right",rtl.double);
    $r.addField("bottom",rtl.double);
  });
  $mod.$rtti.$DynArray("TJSClientRectArray",{eltype: $mod.$rtti["TJSClientRect"]});
  rtl.recNewT($mod,"TJSElementCreationOptions",function () {
    this.named = "";
    this.$eq = function (b) {
      return this.named === b.named;
    };
    this.$assign = function (s) {
      this.named = s.named;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSElementCreationOptions",{});
    $r.addField("named",rtl.string);
  });
  rtl.recNewT($mod,"TJSEventInit",function () {
    this.bubbles = false;
    this.cancelable = false;
    this.scoped = false;
    this.composed = false;
    this.$eq = function (b) {
      return (this.bubbles === b.bubbles) && (this.cancelable === b.cancelable) && (this.scoped === b.scoped) && (this.composed === b.composed);
    };
    this.$assign = function (s) {
      this.bubbles = s.bubbles;
      this.cancelable = s.cancelable;
      this.scoped = s.scoped;
      this.composed = s.composed;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSEventInit",{});
    $r.addField("bubbles",rtl.boolean);
    $r.addField("cancelable",rtl.boolean);
    $r.addField("scoped",rtl.boolean);
    $r.addField("composed",rtl.boolean);
  });
  $mod.$rtti.$ProcVar("TJSNameSpaceMapperCallback",{procsig: rtl.newTIProcSig([["aNameSpace",rtl.string]],rtl.string)});
  $mod.$rtti.$RefToProcVar("TJSDataTransferItemCallBack",{procsig: rtl.newTIProcSig([["aData",rtl.string]])});
  $mod.$rtti.$RefToProcVar("TJSDragDropEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSDragEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("THTMLClickEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSMouseEvent"]]],rtl.boolean)});
  rtl.createClassExt($mod,"TJSAnimationEvent",Event,"",function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
  });
  rtl.createClassExt($mod,"TJSLoadEvent",Event,"",function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
  });
  rtl.createClassExt($mod,"TJsPageTransitionEvent",Event,"",function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
  });
  $mod.$rtti.$RefToProcVar("TJSPageTransitionEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJsPageTransitionEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSHashChangeEventhandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSHashChangeEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSMouseWheelEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSWheelEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSMouseEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSMouseEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("THTMLAnimationEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSAnimationEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSErrorEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSErrorEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSFocusEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSKeyEventhandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSKeyboardEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSLoadEventhandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSLoadEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSPointerEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSPointerEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSUIEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSUIEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSPopStateEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSPopStateEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSStorageEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSStorageEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSProgressEventhandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSProgressEvent"]]],rtl.boolean)});
  $mod.$rtti.$RefToProcVar("TJSTouchEventHandler",{procsig: rtl.newTIProcSig([["aEvent",$mod.$rtti["TJSTouchEvent"]]],rtl.boolean)});
  rtl.recNewT($mod,"Algorithm",function () {
    this.name = "";
    this.$eq = function (b) {
      return this.name === b.name;
    };
    this.$assign = function (s) {
      this.name = s.name;
      return this;
    };
    var $r = $mod.$rtti.$Record("Algorithm",{});
    $r.addField("name",rtl.string);
  });
  rtl.recNewT($mod,"AesCbcParams",function () {
    this.iv = null;
    this.$eq = function (b) {
      return this.iv === b.iv;
    };
    this.$assign = function (s) {
      this.iv = s.iv;
      return this;
    };
    var $r = $mod.$rtti.$Record("AesCbcParams",{});
    $r.addField("iv",pas.JS.$rtti["TJSBufferSource"]);
  });
  rtl.recNewT($mod,"AesCtrParams",function () {
    this.counter = null;
    this.$eq = function (b) {
      return (this.counter === b.counter) && (this.length === b.length);
    };
    this.$assign = function (s) {
      this.counter = s.counter;
      this.length = s.length;
      return this;
    };
    var $r = $mod.$rtti.$Record("AesCtrParams",{});
    $r.addField("counter",pas.JS.$rtti["TJSBufferSource"]);
    $r.addField("length",rtl.byte);
  });
  rtl.recNewT($mod,"AesGcmParams",function () {
    this.iv = null;
    this.additionalData = null;
    this.tagLength = 0;
    this.$eq = function (b) {
      return (this.iv === b.iv) && (this.additionalData === b.additionalData) && (this.tagLength === b.tagLength);
    };
    this.$assign = function (s) {
      this.iv = s.iv;
      this.additionalData = s.additionalData;
      this.tagLength = s.tagLength;
      return this;
    };
    var $r = $mod.$rtti.$Record("AesGcmParams",{});
    $r.addField("iv",pas.JS.$rtti["TJSBufferSource"]);
    $r.addField("additionalData",pas.JS.$rtti["TJSBufferSource"]);
    $r.addField("tagLength",rtl.byte);
  });
  rtl.recNewT($mod,"HmacImportParams",function () {
    this.hash = undefined;
    this.$eq = function (b) {
      return this.hash === b.hash;
    };
    this.$assign = function (s) {
      this.hash = s.hash;
      return this;
    };
    var $r = $mod.$rtti.$Record("HmacImportParams",{});
    $r.addField("hash",rtl.jsvalue);
  });
  rtl.recNewT($mod,"Pbkdf2Params",function () {
    this.salt = null;
    this.iterations = 0;
    this.hash = undefined;
    this.$eq = function (b) {
      return (this.salt === b.salt) && (this.iterations === b.iterations) && (this.hash === b.hash);
    };
    this.$assign = function (s) {
      this.salt = s.salt;
      this.iterations = s.iterations;
      this.hash = s.hash;
      return this;
    };
    var $r = $mod.$rtti.$Record("Pbkdf2Params",{});
    $r.addField("salt",pas.JS.$rtti["TJSBufferSource"]);
    $r.addField("iterations",rtl.nativeint);
    $r.addField("hash",rtl.jsvalue);
  });
  rtl.recNewT($mod,"RsaHashedImportParams",function () {
    this.hash = undefined;
    this.$eq = function (b) {
      return this.hash === b.hash;
    };
    this.$assign = function (s) {
      this.hash = s.hash;
      return this;
    };
    var $r = $mod.$rtti.$Record("RsaHashedImportParams",{});
    $r.addField("hash",rtl.jsvalue);
  });
  rtl.recNewT($mod,"AesKeyGenParams",function () {
    this.$eq = function (b) {
      return this.length === b.length;
    };
    this.$assign = function (s) {
      this.length = s.length;
      return this;
    };
    var $r = $mod.$rtti.$Record("AesKeyGenParams",{});
    $r.addField("length",rtl.longint);
  });
  rtl.recNewT($mod,"HmacKeyGenParams",function () {
    this.hash = undefined;
    this.$eq = function (b) {
      return (this.hash === b.hash) && (this.length === b.length);
    };
    this.$assign = function (s) {
      this.hash = s.hash;
      this.length = s.length;
      return this;
    };
    var $r = $mod.$rtti.$Record("HmacKeyGenParams",{});
    $r.addField("hash",rtl.jsvalue);
    $r.addField("length",rtl.longint);
  });
  rtl.recNewT($mod,"RsaHashedKeyGenParams",function () {
    this.modulusLength = 0;
    this.publicExponent = null;
    this.hash = undefined;
    this.$eq = function (b) {
      return (this.modulusLength === b.modulusLength) && (this.publicExponent === b.publicExponent) && (this.hash === b.hash);
    };
    this.$assign = function (s) {
      this.modulusLength = s.modulusLength;
      this.publicExponent = s.publicExponent;
      this.hash = s.hash;
      return this;
    };
    var $r = $mod.$rtti.$Record("RsaHashedKeyGenParams",{});
    $r.addField("modulusLength",rtl.longint);
    $r.addField("publicExponent",pas.JS.$rtti["TJSUint8Array"]);
    $r.addField("hash",rtl.jsvalue);
  });
  rtl.recNewT($mod,"RsaOaepParams",function () {
    this.$eq = function (b) {
      return this.label === b.label;
    };
    this.$assign = function (s) {
      this.label = s.label;
      return this;
    };
    var $r = $mod.$rtti.$Record("RsaOaepParams",{});
    $r.addField("label",pas.JS.$rtti["TJSBufferSource"]);
  });
  rtl.recNewT($mod,"RsaPssParams",function () {
    this.saltLength = 0;
    this.$eq = function (b) {
      return this.saltLength === b.saltLength;
    };
    this.$assign = function (s) {
      this.saltLength = s.saltLength;
      return this;
    };
    var $r = $mod.$rtti.$Record("RsaPssParams",{});
    $r.addField("saltLength",rtl.longint);
  });
  rtl.recNewT($mod,"DhKeyGenParams",function () {
    this.prime = null;
    this.generator = null;
    this.$eq = function (b) {
      return (this.prime === b.prime) && (this.generator === b.generator);
    };
    this.$assign = function (s) {
      this.prime = s.prime;
      this.generator = s.generator;
      return this;
    };
    var $r = $mod.$rtti.$Record("DhKeyGenParams",{});
    $r.addField("prime",pas.JS.$rtti["TJSUint8Array"]);
    $r.addField("generator",pas.JS.$rtti["TJSUint8Array"]);
  });
  rtl.recNewT($mod,"EcKeyGenParams",function () {
    this.$eq = function (b) {
      return this.namedCurve === b.namedCurve;
    };
    this.$assign = function (s) {
      this.namedCurve = s.namedCurve;
      return this;
    };
    var $r = $mod.$rtti.$Record("EcKeyGenParams",{});
    $r.addField("namedCurve",rtl.string);
  });
  rtl.recNewT($mod,"AesDerivedKeyParams",function () {
    this.$eq = function (b) {
      return this.length === b.length;
    };
    this.$assign = function (s) {
      this.length = s.length;
      return this;
    };
    var $r = $mod.$rtti.$Record("AesDerivedKeyParams",{});
    $r.addField("length",rtl.longint);
  });
  rtl.recNewT($mod,"HmacDerivedKeyParams",function () {
    this.$eq = function (b) {
      return this.length === b.length;
    };
    this.$assign = function (s) {
      this.length = s.length;
      return this;
    };
    var $r = $mod.$rtti.$Record("HmacDerivedKeyParams",{});
    $r.addField("length",rtl.longint);
  });
  rtl.recNewT($mod,"EcdhKeyDeriveParams",function () {
    this.$eq = function (b) {
      return this.public === b.public;
    };
    this.$assign = function (s) {
      this.public = s.public;
      return this;
    };
    var $r = $mod.$rtti.$Record("EcdhKeyDeriveParams",{});
    $r.addField("public",$mod.$rtti["TJSCryptoKey"]);
  });
  rtl.recNewT($mod,"DhKeyDeriveParams",function () {
    this.$eq = function (b) {
      return this.public === b.public;
    };
    this.$assign = function (s) {
      this.public = s.public;
      return this;
    };
    var $r = $mod.$rtti.$Record("DhKeyDeriveParams",{});
    $r.addField("public",$mod.$rtti["TJSCryptoKey"]);
  });
  rtl.recNewT($mod,"DhImportKeyParams",function () {
    this.prime = null;
    this.generator = null;
    this.$eq = function (b) {
      return (this.prime === b.prime) && (this.generator === b.generator);
    };
    this.$assign = function (s) {
      this.prime = s.prime;
      this.generator = s.generator;
      return this;
    };
    var $r = $mod.$rtti.$Record("DhImportKeyParams",{});
    $r.addField("prime",pas.JS.$rtti["TJSUint8Array"]);
    $r.addField("generator",pas.JS.$rtti["TJSUint8Array"]);
  });
  rtl.recNewT($mod,"EcdsaParams",function () {
    this.hash = undefined;
    this.$eq = function (b) {
      return this.hash === b.hash;
    };
    this.$assign = function (s) {
      this.hash = s.hash;
      return this;
    };
    var $r = $mod.$rtti.$Record("EcdsaParams",{});
    $r.addField("hash",rtl.jsvalue);
  });
  rtl.recNewT($mod,"EcKeyImportParams",function () {
    this.$eq = function (b) {
      return this.namedCurve === b.namedCurve;
    };
    this.$assign = function (s) {
      this.namedCurve = s.namedCurve;
      return this;
    };
    var $r = $mod.$rtti.$Record("EcKeyImportParams",{});
    $r.addField("namedCurve",rtl.string);
  });
  rtl.recNewT($mod,"HkdfParams",function () {
    this.hash = undefined;
    this.salt = null;
    this.info = null;
    this.$eq = function (b) {
      return (this.hash === b.hash) && (this.salt === b.salt) && (this.info === b.info);
    };
    this.$assign = function (s) {
      this.hash = s.hash;
      this.salt = s.salt;
      this.info = s.info;
      return this;
    };
    var $r = $mod.$rtti.$Record("HkdfParams",{});
    $r.addField("hash",rtl.jsvalue);
    $r.addField("salt",pas.JS.$rtti["TJSBufferSource"]);
    $r.addField("info",pas.JS.$rtti["TJSBufferSource"]);
  });
  rtl.recNewT($mod,"RsaOtherPrimesInfo",function () {
    this.r = "";
    this.d = "";
    this.t = "";
    this.$eq = function (b) {
      return (this.r === b.r) && (this.d === b.d) && (this.t === b.t);
    };
    this.$assign = function (s) {
      this.r = s.r;
      this.d = s.d;
      this.t = s.t;
      return this;
    };
    var $r = $mod.$rtti.$Record("RsaOtherPrimesInfo",{});
    $r.addField("r",rtl.string);
    $r.addField("d",rtl.string);
    $r.addField("t",rtl.string);
  });
  $mod.$rtti.$DynArray("TStringDynArray",{eltype: rtl.string});
  $mod.$rtti.$DynArray("TRsaOtherPrimesInfoDynArray",{eltype: $mod.$rtti["RsaOtherPrimesInfo"]});
  rtl.recNewT($mod,"JsonWebKey",function () {
    this.kty = "";
    this.use = "";
    this.key_ops = [];
    this.alg = "";
    this.ext = false;
    this.crv = "";
    this.x = "";
    this.y = "";
    this.d = "";
    this.n = "";
    this.e = "";
    this.p = "";
    this.q = "";
    this.dp = "";
    this.dq = "";
    this.qi = "";
    this.oth = [];
    this.k = "";
    this.$eq = function (b) {
      return (this.kty === b.kty) && (this.use === b.use) && (this.key_ops === b.key_ops) && (this.alg === b.alg) && (this.ext === b.ext) && (this.crv === b.crv) && (this.x === b.x) && (this.y === b.y) && (this.d === b.d) && (this.n === b.n) && (this.e === b.e) && (this.p === b.p) && (this.q === b.q) && (this.dp === b.dp) && (this.dq === b.dq) && (this.qi === b.qi) && (this.oth === b.oth) && (this.k === b.k);
    };
    this.$assign = function (s) {
      this.kty = s.kty;
      this.use = s.use;
      this.key_ops = s.key_ops;
      this.alg = s.alg;
      this.ext = s.ext;
      this.crv = s.crv;
      this.x = s.x;
      this.y = s.y;
      this.d = s.d;
      this.n = s.n;
      this.e = s.e;
      this.p = s.p;
      this.q = s.q;
      this.dp = s.dp;
      this.dq = s.dq;
      this.qi = s.qi;
      this.oth = s.oth;
      this.k = s.k;
      return this;
    };
    var $r = $mod.$rtti.$Record("JsonWebKey",{});
    $r.addField("kty",rtl.string);
    $r.addField("use",rtl.string);
    $r.addField("key_ops",$mod.$rtti["TStringDynArray"]);
    $r.addField("alg",rtl.string);
    $r.addField("ext",rtl.boolean);
    $r.addField("crv",rtl.string);
    $r.addField("x",rtl.string);
    $r.addField("y",rtl.string);
    $r.addField("d",rtl.string);
    $r.addField("n",rtl.string);
    $r.addField("e",rtl.string);
    $r.addField("p",rtl.string);
    $r.addField("q",rtl.string);
    $r.addField("dp",rtl.string);
    $r.addField("dq",rtl.string);
    $r.addField("qi",rtl.string);
    $r.addField("oth",$mod.$rtti["TRsaOtherPrimesInfoDynArray"]);
    $r.addField("k",rtl.string);
  });
  rtl.recNewT($mod,"CryptoKeyPair",function () {
    this.publicKey = null;
    this.privateKey = null;
    this.$eq = function (b) {
      return (this.publicKey === b.publicKey) && (this.privateKey === b.privateKey);
    };
    this.$assign = function (s) {
      this.publicKey = s.publicKey;
      this.privateKey = s.privateKey;
      return this;
    };
    var $r = $mod.$rtti.$Record("CryptoKeyPair",{});
    $r.addField("publicKey",$mod.$rtti["TJSCryptoKey"]);
    $r.addField("privateKey",$mod.$rtti["TJSCryptoKey"]);
  });
  $mod.$rtti.$DynArray("TKeyUsageDynArray",{eltype: rtl.string});
  rtl.createClass($mod,"TJSIDBTransactionMode",pas.System.TObject,function () {
    this.readonly = "readonly";
    this.readwrite = "readwrite";
    this.versionchange = "versionchange";
  });
  rtl.recNewT($mod,"TJSIDBIndexParameters",function () {
    this.unique = false;
    this.multiEntry = false;
    this.locale = "";
    this.$eq = function (b) {
      return (this.unique === b.unique) && (this.multiEntry === b.multiEntry) && (this.locale === b.locale);
    };
    this.$assign = function (s) {
      this.unique = s.unique;
      this.multiEntry = s.multiEntry;
      this.locale = s.locale;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSIDBIndexParameters",{});
    $r.addField("unique",rtl.boolean);
    $r.addField("multiEntry",rtl.boolean);
    $r.addField("locale",rtl.string);
  });
  rtl.recNewT($mod,"TJSCreateObjectStoreOptions",function () {
    this.keyPath = undefined;
    this.autoIncrement = false;
    this.$eq = function (b) {
      return (this.keyPath === b.keyPath) && (this.autoIncrement === b.autoIncrement);
    };
    this.$assign = function (s) {
      this.keyPath = s.keyPath;
      this.autoIncrement = s.autoIncrement;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSCreateObjectStoreOptions",{});
    $r.addField("keyPath",rtl.jsvalue);
    $r.addField("autoIncrement",rtl.boolean);
  });
  rtl.recNewT($mod,"TJSPositionError",function () {
    this.code = 0;
    this.message = "";
    this.$eq = function (b) {
      return (this.code === b.code) && (this.message === b.message);
    };
    this.$assign = function (s) {
      this.code = s.code;
      this.message = s.message;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSPositionError",{});
    $r.addField("code",rtl.longint);
    $r.addField("message",rtl.string);
  });
  rtl.recNewT($mod,"TJSPositionOptions",function () {
    this.enableHighAccuracy = false;
    this.timeout = 0;
    this.maximumAge = 0;
    this.$eq = function (b) {
      return (this.enableHighAccuracy === b.enableHighAccuracy) && (this.timeout === b.timeout) && (this.maximumAge === b.maximumAge);
    };
    this.$assign = function (s) {
      this.enableHighAccuracy = s.enableHighAccuracy;
      this.timeout = s.timeout;
      this.maximumAge = s.maximumAge;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSPositionOptions",{});
    $r.addField("enableHighAccuracy",rtl.boolean);
    $r.addField("timeout",rtl.longint);
    $r.addField("maximumAge",rtl.longint);
  });
  rtl.recNewT($mod,"TJSCoordinates",function () {
    this.latitude = 0.0;
    this.longitude = 0.0;
    this.altitude = 0.0;
    this.accuracy = 0.0;
    this.altitudeAccuracy = 0.0;
    this.heading = 0.0;
    this.speed = 0.0;
    this.$eq = function (b) {
      return (this.latitude === b.latitude) && (this.longitude === b.longitude) && (this.altitude === b.altitude) && (this.accuracy === b.accuracy) && (this.altitudeAccuracy === b.altitudeAccuracy) && (this.heading === b.heading) && (this.speed === b.speed);
    };
    this.$assign = function (s) {
      this.latitude = s.latitude;
      this.longitude = s.longitude;
      this.altitude = s.altitude;
      this.accuracy = s.accuracy;
      this.altitudeAccuracy = s.altitudeAccuracy;
      this.heading = s.heading;
      this.speed = s.speed;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSCoordinates",{});
    $r.addField("latitude",rtl.double);
    $r.addField("longitude",rtl.double);
    $r.addField("altitude",rtl.double);
    $r.addField("accuracy",rtl.double);
    $r.addField("altitudeAccuracy",rtl.double);
    $r.addField("heading",rtl.double);
    $r.addField("speed",rtl.double);
  });
  rtl.recNewT($mod,"TJSPosition",function () {
    this.timestamp = "";
    this.$new = function () {
      var r = Object.create(this);
      r.coords = $mod.TJSCoordinates.$new();
      return r;
    };
    this.$eq = function (b) {
      return this.coords.$eq(b.coords) && (this.timestamp === b.timestamp);
    };
    this.$assign = function (s) {
      this.coords.$assign(s.coords);
      this.timestamp = s.timestamp;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSPosition",{});
    $r.addField("coords",$mod.$rtti["TJSCoordinates"]);
    $r.addField("timestamp",rtl.string);
  });
  $mod.$rtti.$ProcVar("TJSGeoLocationCallback",{procsig: rtl.newTIProcSig([["aPosition",$mod.$rtti["TJSPosition"]]])});
  $mod.$rtti.$MethodVar("TJSGeoLocationEvent",{procsig: rtl.newTIProcSig([["aPosition",$mod.$rtti["TJSPosition"]]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TJSGeoLocationErrorCallback",{procsig: rtl.newTIProcSig([["aValue",$mod.$rtti["TJSPositionError"]]])});
  $mod.$rtti.$MethodVar("TJSGeoLocationErrorEvent",{procsig: rtl.newTIProcSig([["aValue",$mod.$rtti["TJSPositionError"]]]), methodkind: 0});
  rtl.recNewT($mod,"TJSServiceWorkerContainerOptions",function () {
    this.scope = "";
    this.$eq = function (b) {
      return this.scope === b.scope;
    };
    this.$assign = function (s) {
      this.scope = s.scope;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSServiceWorkerContainerOptions",{});
    $r.addField("scope",rtl.string);
  });
  $mod.$rtti.$RefToProcVar("TJSTimerCallBack",{procsig: rtl.newTIProcSig(null)});
  $mod.$rtti.$ProcVar("TFrameRequestCallback",{procsig: rtl.newTIProcSig([["aTime",rtl.double]])});
  $mod.$rtti.$DynArray("TJSWindowArray",{eltype: $mod.$rtti["TJSWindow"]});
  $mod.$rtti.$RefToProcVar("THTMLCanvasToBlobCallback",{procsig: rtl.newTIProcSig([["aBlob",$mod.$rtti["TJSBlob"]]],rtl.boolean)});
  rtl.recNewT($mod,"TJSTextMetrics",function () {
    this.width = 0.0;
    this.actualBoundingBoxLeft = 0.0;
    this.actualBoundingBoxRight = 0.0;
    this.fontBoundingBoxAscent = 0.0;
    this.fontBoundingBoxDescent = 0.0;
    this.actualBoundingBoxAscent = 0.0;
    this.actualBoundingBoxDescent = 0.0;
    this.emHeightAscent = 0.0;
    this.emHeightDescent = 0.0;
    this.hangingBaseline = 0.0;
    this.alphabeticBaseline = 0.0;
    this.ideographicBaseline = 0.0;
    this.$eq = function (b) {
      return (this.width === b.width) && (this.actualBoundingBoxLeft === b.actualBoundingBoxLeft) && (this.actualBoundingBoxRight === b.actualBoundingBoxRight) && (this.fontBoundingBoxAscent === b.fontBoundingBoxAscent) && (this.fontBoundingBoxDescent === b.fontBoundingBoxDescent) && (this.actualBoundingBoxAscent === b.actualBoundingBoxAscent) && (this.actualBoundingBoxDescent === b.actualBoundingBoxDescent) && (this.emHeightAscent === b.emHeightAscent) && (this.emHeightDescent === b.emHeightDescent) && (this.hangingBaseline === b.hangingBaseline) && (this.alphabeticBaseline === b.alphabeticBaseline) && (this.ideographicBaseline === b.ideographicBaseline);
    };
    this.$assign = function (s) {
      this.width = s.width;
      this.actualBoundingBoxLeft = s.actualBoundingBoxLeft;
      this.actualBoundingBoxRight = s.actualBoundingBoxRight;
      this.fontBoundingBoxAscent = s.fontBoundingBoxAscent;
      this.fontBoundingBoxDescent = s.fontBoundingBoxDescent;
      this.actualBoundingBoxAscent = s.actualBoundingBoxAscent;
      this.actualBoundingBoxDescent = s.actualBoundingBoxDescent;
      this.emHeightAscent = s.emHeightAscent;
      this.emHeightDescent = s.emHeightDescent;
      this.hangingBaseline = s.hangingBaseline;
      this.alphabeticBaseline = s.alphabeticBaseline;
      this.ideographicBaseline = s.ideographicBaseline;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSTextMetrics",{});
    $r.addField("width",rtl.double);
    $r.addField("actualBoundingBoxLeft",rtl.double);
    $r.addField("actualBoundingBoxRight",rtl.double);
    $r.addField("fontBoundingBoxAscent",rtl.double);
    $r.addField("fontBoundingBoxDescent",rtl.double);
    $r.addField("actualBoundingBoxAscent",rtl.double);
    $r.addField("actualBoundingBoxDescent",rtl.double);
    $r.addField("emHeightAscent",rtl.double);
    $r.addField("emHeightDescent",rtl.double);
    $r.addField("hangingBaseline",rtl.double);
    $r.addField("alphabeticBaseline",rtl.double);
    $r.addField("ideographicBaseline",rtl.double);
  });
  $mod.$rtti.$RefToProcVar("TJSOnReadyStateChangeHandler",{procsig: rtl.newTIProcSig(null)});
  rtl.recNewT($mod,"TJSWheelEventInit",function () {
    this.deltaX = 0.0;
    this.deltaY = 0.0;
    this.deltaZ = 0.0;
    this.deltaMode = 0;
    this.$eq = function (b) {
      return (this.deltaX === b.deltaX) && (this.deltaY === b.deltaY) && (this.deltaZ === b.deltaZ) && (this.deltaMode === b.deltaMode);
    };
    this.$assign = function (s) {
      this.deltaX = s.deltaX;
      this.deltaY = s.deltaY;
      this.deltaZ = s.deltaZ;
      this.deltaMode = s.deltaMode;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSWheelEventInit",{});
    $r.addField("deltaX",rtl.double);
    $r.addField("deltaY",rtl.double);
    $r.addField("deltaZ",rtl.double);
    $r.addField("deltaMode",rtl.nativeint);
  });
  rtl.createClass($mod,"TJSKeyNames",pas.System.TObject,function () {
    this.Alt = "Alt";
    this.AltGraph = "AltGraph";
    this.CapsLock = "CapsLock";
    this.Control = "Control";
    this.Fn = "Fn";
    this.FnLock = "FnLock";
    this.Hyper = "Hyper";
    this.Meta = "Meta";
    this.NumLock = "NumLock";
    this.ScrollLock = "ScrollLock";
    this.Shift = "Shift";
    this.Super = "Super";
    this.Symbol = "Symbol";
    this.SymbolLock = "SymbolLock";
    this.Enter = "Enter";
    this.Tab = "Tab";
    this.Space = "Space";
    this.ArrowDown = "ArrowDown";
    this.ArrowLeft = "ArrowLeft";
    this.ArrowRight = "ArrowRight";
    this.ArrowUp = "ArrowUp";
    this._End = "End";
    this.Home = "Home";
    this.PageDown = "PageDown";
    this.PageUp = "PageUp";
    this.BackSpace = "Backspace";
    this.Clear = "Clear";
    this.Copy = "Copy";
    this.CrSel = "CrSel";
    this.Cut = "Cut";
    this.Delete = "Delete";
    this.EraseEof = "EraseEof";
    this.ExSel = "ExSel";
    this.Insert = "Insert";
    this.Paste = "Paste";
    this.Redo = "Redo";
    this.Undo = "Undo";
    this.Accept = "Accept";
    this.Again = "Again";
    this.Attn = "Attn";
    this.Cancel = "Cancel";
    this.ContextMenu = "Contextmenu";
    this.Escape = "Escape";
    this.Execute = "Execute";
    this.Find = "Find";
    this.Finish = "Finish";
    this.Help = "Help";
    this.Pause = "Pause";
    this.Play = "Play";
    this.Props = "Props";
    this.Select = "Select";
    this.ZoomIn = "ZoomIn";
    this.ZoomOut = "ZoomOut";
    this.BrightnessDown = "BrightnessDown";
    this.BrightnessUp = "BrightnessUp";
    this.Eject = "Eject";
    this.LogOff = "LogOff";
    this.Power = "Power";
    this.PowerOff = "PowerOff";
    this.PrintScreen = "PrintScreen";
    this.Hibernate = "Hibernate";
    this.Standby = "Standby";
    this.WakeUp = "WakeUp";
    this.AllCandidates = "AllCandidates";
    this.Alphanumeric = "Alphanumeric";
    this.CodeInput = "CodeInput";
    this.Compose = "Compose";
    this.Convert = "Convert";
    this.Dead = "Dead";
    this.FinalMode = "FinalMode";
    this.GroupFirst = "GroupFirst";
    this.GroupLast = "GroupLast";
    this.GroupNext = "GroupNext";
    this.GroupPrevious = "GroupPrevious";
    this.ModelChange = "ModelChange";
    this.NextCandidate = "NextCandidate";
    this.NonConvert = "NonConvert";
    this.PreviousCandidate = "PreviousCandidate";
    this.Process = "Process";
    this.SingleCandidate = "SingleCandidate";
    this.HangulMode = "HangulMode";
    this.HanjaMode = "HanjaMode";
    this.JunjaMode = "JunjaMode";
    this.Eisu = "Eisu";
    this.Hankaku = "Hankaku";
    this.Hiranga = "Hiranga";
    this.HirangaKatakana = "HirangaKatakana";
    this.KanaMode = "KanaMode";
    this.Katakana = "Katakana";
    this.Romaji = "Romaji";
    this.Zenkaku = "Zenkaku";
    this.ZenkakuHanaku = "ZenkakuHanaku";
    this.F1 = "F1";
    this.F2 = "F2";
    this.F3 = "F3";
    this.F4 = "F4";
    this.F5 = "F5";
    this.F6 = "F6";
    this.F7 = "F7";
    this.F8 = "F8";
    this.F9 = "F9";
    this.F10 = "F10";
    this.F11 = "F11";
    this.F12 = "F12";
    this.F13 = "F13";
    this.F14 = "F14";
    this.F15 = "F15";
    this.F16 = "F16";
    this.F17 = "F17";
    this.F18 = "F18";
    this.F19 = "F19";
    this.F20 = "F20";
    this.Soft1 = "Soft1";
    this.Soft2 = "Soft2";
    this.Soft3 = "Soft3";
    this.Soft4 = "Soft4";
    this.Decimal = "Decimal";
    this.Key11 = "Key11";
    this.Key12 = "Key12";
    this.Multiply = "Multiply";
    this.Add = "Add";
    this.NumClear = "Clear";
    this.Divide = "Divide";
    this.Subtract = "Subtract";
    this.Separator = "Separator";
    this.AppSwitch = "AppSwitch";
    this.Call = "Call";
    this.Camera = "Camera";
    this.CameraFocus = "CameraFocus";
    this.EndCall = "EndCall";
    this.GoBack = "GoBack";
    this.GoHome = "GoHome";
    this.HeadsetHook = "HeadsetHook";
    this.LastNumberRedial = "LastNumberRedial";
    this.Notification = "Notification";
    this.MannerMode = "MannerMode";
    this.VoiceDial = "VoiceDial";
  });
  rtl.recNewT($mod,"TJSMutationRecord",function () {
    this.type_ = "";
    this.target = null;
    this.addedNodes = null;
    this.removedNodes = null;
    this.previousSibling = null;
    this.nextSibling = null;
    this.attributeName = "";
    this.attributeNamespace = "";
    this.oldValue = "";
    this.$eq = function (b) {
      return (this.type_ === b.type_) && (this.target === b.target) && (this.addedNodes === b.addedNodes) && (this.removedNodes === b.removedNodes) && (this.previousSibling === b.previousSibling) && (this.nextSibling === b.nextSibling) && (this.attributeName === b.attributeName) && (this.attributeNamespace === b.attributeNamespace) && (this.oldValue === b.oldValue);
    };
    this.$assign = function (s) {
      this.type_ = s.type_;
      this.target = s.target;
      this.addedNodes = s.addedNodes;
      this.removedNodes = s.removedNodes;
      this.previousSibling = s.previousSibling;
      this.nextSibling = s.nextSibling;
      this.attributeName = s.attributeName;
      this.attributeNamespace = s.attributeNamespace;
      this.oldValue = s.oldValue;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSMutationRecord",{});
    $r.addField("type_",rtl.string);
    $r.addField("target",$mod.$rtti["TJSNode"]);
    $r.addField("addedNodes",$mod.$rtti["TJSNodeList"]);
    $r.addField("removedNodes",$mod.$rtti["TJSNodeList"]);
    $r.addField("previousSibling",$mod.$rtti["TJSNode"]);
    $r.addField("nextSibling",$mod.$rtti["TJSNode"]);
    $r.addField("attributeName",rtl.string);
    $r.addField("attributeNamespace",rtl.string);
    $r.addField("oldValue",rtl.string);
  });
  $mod.$rtti.$DynArray("TJSMutationRecordArray",{eltype: $mod.$rtti["TJSMutationRecord"]});
  $mod.$rtti.$RefToProcVar("TJSMutationCallback",{procsig: rtl.newTIProcSig([["mutations",$mod.$rtti["TJSMutationRecordArray"]],["observer",$mod.$rtti["TJSMutationObserver"]]])});
  rtl.recNewT($mod,"TJSMutationObserverInit",function () {
    this.attributes = false;
    this.attributeOldValue = false;
    this.characterData = false;
    this.characterDataOldValue = false;
    this.childList = false;
    this.subTree = false;
    this.attributeFilter = null;
    this.$eq = function (b) {
      return (this.attributes === b.attributes) && (this.attributeOldValue === b.attributeOldValue) && (this.characterData === b.characterData) && (this.characterDataOldValue === b.characterDataOldValue) && (this.childList === b.childList) && (this.subTree === b.subTree) && (this.attributeFilter === b.attributeFilter);
    };
    this.$assign = function (s) {
      this.attributes = s.attributes;
      this.attributeOldValue = s.attributeOldValue;
      this.characterData = s.characterData;
      this.characterDataOldValue = s.characterDataOldValue;
      this.childList = s.childList;
      this.subTree = s.subTree;
      this.attributeFilter = s.attributeFilter;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSMutationObserverInit",{});
    $r.addField("attributes",rtl.boolean);
    $r.addField("attributeOldValue",rtl.boolean);
    $r.addField("characterData",rtl.boolean);
    $r.addField("characterDataOldValue",rtl.boolean);
    $r.addField("childList",rtl.boolean);
    $r.addField("subTree",rtl.boolean);
    $r.addField("attributeFilter",pas.JS.$rtti["TJSArray"]);
  });
  $mod.$rtti.$DynArray("TJSMessagePortArray",{eltype: $mod.$rtti["TJSMessagePort"]});
  $mod.$rtti.$DynArray("TJSFormDataEntryValueArray",{eltype: rtl.string});
});
rtl.module("Classes",["System","RTLConsts","Types","SysUtils","JS","TypInfo","Web"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$MethodVar("TNotifyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]]]), methodkind: 0});
  this.TFPObservedOperation = {"0": "ooChange", ooChange: 0, "1": "ooFree", ooFree: 1, "2": "ooAddItem", ooAddItem: 2, "3": "ooDeleteItem", ooDeleteItem: 3, "4": "ooCustom", ooCustom: 4};
  $mod.$rtti.$Enum("TFPObservedOperation",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TFPObservedOperation});
  rtl.createClass($mod,"EStreamError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EFCreateError",$mod.EStreamError,function () {
  });
  rtl.createClass($mod,"EFOpenError",$mod.EStreamError,function () {
  });
  rtl.createClass($mod,"EFilerError",$mod.EStreamError,function () {
  });
  rtl.createClass($mod,"EReadError",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EWriteError",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EClassNotFound",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EMethodNotFound",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EInvalidImage",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EResNotFound",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EListError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EBitsError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EStringListError",$mod.EListError,function () {
  });
  rtl.createClass($mod,"EComponentError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EParserError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EOutOfResources",pas.SysUtils.EOutOfMemory,function () {
  });
  rtl.createClass($mod,"EInvalidOperation",pas.SysUtils.Exception,function () {
  });
  this.TListAssignOp = {"0": "laCopy", laCopy: 0, "1": "laAnd", laAnd: 1, "2": "laOr", laOr: 2, "3": "laXor", laXor: 3, "4": "laSrcUnique", laSrcUnique: 4, "5": "laDestUnique", laDestUnique: 5};
  $mod.$rtti.$Enum("TListAssignOp",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TListAssignOp});
  $mod.$rtti.$ProcVar("TListSortCompare",{procsig: rtl.newTIProcSig([["Item1",rtl.jsvalue],["Item2",rtl.jsvalue]],rtl.longint)});
  this.TAlignment = {"0": "taLeftJustify", taLeftJustify: 0, "1": "taRightJustify", taRightJustify: 1, "2": "taCenter", taCenter: 2};
  $mod.$rtti.$Enum("TAlignment",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TAlignment});
  $mod.$rtti.$Class("TFPList");
  rtl.createClass($mod,"TFPListEnumerator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = null;
      this.FPosition = 0;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AList) {
      pas.System.TObject.Create.call(this);
      this.FList = AList;
      this.FPosition = -1;
      return this;
    };
    this.GetCurrent = function () {
      var Result = undefined;
      Result = this.FList.Get(this.FPosition);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FPosition += 1;
      Result = this.FPosition < this.FList.FCount;
      return Result;
    };
  });
  rtl.createClass($mod,"TFPList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = [];
      this.FCount = 0;
      this.FCapacity = 0;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.CopyMove = function (aList) {
      var r = 0;
      this.Clear();
      for (var $l1 = 0, $end2 = aList.FCount - 1; $l1 <= $end2; $l1++) {
        r = $l1;
        this.Add(aList.Get(r));
      };
    };
    this.MergeMove = function (aList) {
      var r = 0;
      for (var $l1 = 0, $end2 = aList.FCount - 1; $l1 <= $end2; $l1++) {
        r = $l1;
        if (this.IndexOf(aList.Get(r)) < 0) this.Add(aList.Get(r));
      };
    };
    this.DoCopy = function (ListA, ListB) {
      if (ListB != null) {
        this.CopyMove(ListB)}
       else this.CopyMove(ListA);
    };
    this.DoSrcUnique = function (ListA, ListB) {
      var r = 0;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.FCount - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
        };
      } else {
        for (var $l3 = this.FCount - 1; $l3 >= 0; $l3--) {
          r = $l3;
          if (ListA.IndexOf(this.Get(r)) >= 0) this.Delete(r);
        };
      };
    };
    this.DoAnd = function (ListA, ListB) {
      var r = 0;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.FCount - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) >= 0) this.Add(ListA.Get(r));
        };
      } else {
        for (var $l3 = this.FCount - 1; $l3 >= 0; $l3--) {
          r = $l3;
          if (ListA.IndexOf(this.Get(r)) < 0) this.Delete(r);
        };
      };
    };
    this.DoDestUnique = function (ListA, ListB) {
      var $Self = this;
      function MoveElements(Src, Dest) {
        var r = 0;
        $Self.Clear();
        for (var $l1 = 0, $end2 = Src.FCount - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (Dest.IndexOf(Src.Get(r)) < 0) $Self.Add(Src.Get(r));
        };
      };
      var Dest = null;
      if (ListB != null) {
        MoveElements(ListB,ListA)}
       else Dest = $mod.TFPList.$create("Create");
      try {
        Dest.CopyMove($Self);
        MoveElements(ListA,Dest);
      } finally {
        Dest.$destroy("Destroy");
      };
    };
    this.DoOr = function (ListA, ListB) {
      if (ListB != null) {
        this.CopyMove(ListA);
        this.MergeMove(ListB);
      } else this.MergeMove(ListA);
    };
    this.DoXOr = function (ListA, ListB) {
      var r = 0;
      var l = null;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.FCount - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
        };
        for (var $l3 = 0, $end4 = ListB.FCount - 1; $l3 <= $end4; $l3++) {
          r = $l3;
          if (ListA.IndexOf(ListB.Get(r)) < 0) this.Add(ListB.Get(r));
        };
      } else {
        l = $mod.TFPList.$create("Create");
        try {
          l.CopyMove(this);
          for (var $l5 = this.FCount - 1; $l5 >= 0; $l5--) {
            r = $l5;
            if (ListA.IndexOf(this.Get(r)) >= 0) this.Delete(r);
          };
          for (var $l6 = 0, $end7 = ListA.FCount - 1; $l6 <= $end7; $l6++) {
            r = $l6;
            if (l.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
          };
        } finally {
          l.$destroy("Destroy");
        };
      };
    };
    this.Get = function (Index) {
      var Result = undefined;
      if ((Index < 0) || (Index >= this.FCount)) this.RaiseIndexError(Index);
      Result = this.FList[Index];
      return Result;
    };
    this.Put = function (Index, Item) {
      if ((Index < 0) || (Index >= this.FCount)) this.RaiseIndexError(Index);
      this.FList[Index] = Item;
    };
    this.SetCapacity = function (NewCapacity) {
      if (NewCapacity < this.FCount) this.$class.Error(pas.RTLConsts.SListCapacityError,"" + NewCapacity);
      if (NewCapacity === this.FCapacity) return;
      this.FList = rtl.arraySetLength(this.FList,undefined,NewCapacity);
      this.FCapacity = NewCapacity;
    };
    this.SetCount = function (NewCount) {
      if (NewCount < 0) this.$class.Error(pas.RTLConsts.SListCountError,"" + NewCount);
      if (NewCount > this.FCount) {
        if (NewCount > this.FCapacity) this.SetCapacity(NewCount);
      };
      this.FCount = NewCount;
    };
    this.RaiseIndexError = function (Index) {
      this.$class.Error(pas.RTLConsts.SListIndexError,"" + Index);
    };
    this.Destroy = function () {
      this.Clear();
      pas.System.TObject.Destroy.call(this);
    };
    this.AddList = function (AList) {
      var I = 0;
      if (this.FCapacity < (this.FCount + AList.FCount)) this.SetCapacity(this.FCount + AList.FCount);
      for (var $l1 = 0, $end2 = AList.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.Add(AList.Get(I));
      };
    };
    this.Add = function (Item) {
      var Result = 0;
      if (this.FCount === this.FCapacity) this.Expand();
      this.FList[this.FCount] = Item;
      Result = this.FCount;
      this.FCount += 1;
      return Result;
    };
    this.Clear = function () {
      if (rtl.length(this.FList) > 0) {
        this.SetCount(0);
        this.SetCapacity(0);
      };
    };
    this.Delete = function (Index) {
      if ((Index < 0) || (Index >= this.FCount)) this.$class.Error(pas.RTLConsts.SListIndexError,"" + Index);
      this.FCount = this.FCount - 1;
      this.FList.splice(Index,1);
      this.FCapacity -= 1;
    };
    this.Error = function (Msg, Data) {
      throw $mod.EListError.$create("CreateFmt",[Msg,[Data]]);
    };
    this.Exchange = function (Index1, Index2) {
      var Temp = undefined;
      if ((Index1 >= this.FCount) || (Index1 < 0)) this.$class.Error(pas.RTLConsts.SListIndexError,"" + Index1);
      if ((Index2 >= this.FCount) || (Index2 < 0)) this.$class.Error(pas.RTLConsts.SListIndexError,"" + Index2);
      Temp = this.FList[Index1];
      this.FList[Index1] = this.FList[Index2];
      this.FList[Index2] = Temp;
    };
    this.Expand = function () {
      var Result = null;
      var IncSize = 0;
      if (this.FCount < this.FCapacity) return this;
      IncSize = 4;
      if (this.FCapacity > 3) IncSize = IncSize + 4;
      if (this.FCapacity > 8) IncSize = IncSize + 8;
      if (this.FCapacity > 127) IncSize += this.FCapacity >>> 2;
      this.SetCapacity(this.FCapacity + IncSize);
      Result = this;
      return Result;
    };
    this.Extract = function (Item) {
      var Result = undefined;
      var i = 0;
      i = this.IndexOf(Item);
      if (i >= 0) {
        Result = Item;
        this.Delete(i);
      } else Result = null;
      return Result;
    };
    this.First = function () {
      var Result = undefined;
      if (this.FCount === 0) {
        Result = null}
       else Result = this.Get(0);
      return Result;
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $mod.TFPListEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.IndexOf = function (Item) {
      var Result = 0;
      var C = 0;
      Result = 0;
      C = this.FCount;
      while ((Result < C) && (this.FList[Result] != Item)) Result += 1;
      if (Result >= C) Result = -1;
      return Result;
    };
    this.IndexOfItem = function (Item, Direction) {
      var Result = 0;
      if (Direction === pas.Types.TDirection.FromBeginning) {
        Result = this.IndexOf(Item)}
       else {
        Result = this.FCount - 1;
        while ((Result >= 0) && (this.FList[Result] != Item)) Result = Result - 1;
      };
      return Result;
    };
    this.Insert = function (Index, Item) {
      if ((Index < 0) || (Index > this.FCount)) this.$class.Error(pas.RTLConsts.SListIndexError,"" + Index);
      this.FList.splice(Index,0,Item);
      this.FCapacity += 1;
      this.FCount += 1;
    };
    this.Last = function () {
      var Result = undefined;
      if (this.FCount === 0) {
        Result = null}
       else Result = this.Get(this.FCount - 1);
      return Result;
    };
    this.Move = function (CurIndex, NewIndex) {
      var Temp = undefined;
      if ((CurIndex < 0) || (CurIndex > (this.FCount - 1))) this.$class.Error(pas.RTLConsts.SListIndexError,"" + CurIndex);
      if ((NewIndex < 0) || (NewIndex > (this.FCount - 1))) this.$class.Error(pas.RTLConsts.SListIndexError,"" + NewIndex);
      if (CurIndex === NewIndex) return;
      Temp = this.FList[CurIndex];
      this.FList.splice(CurIndex,1);
      this.FList.splice(NewIndex,0,Temp);
    };
    this.Assign = function (ListA, AOperator, ListB) {
      var $tmp1 = AOperator;
      if ($tmp1 === $mod.TListAssignOp.laCopy) {
        this.DoCopy(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laSrcUnique) {
        this.DoSrcUnique(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laAnd) {
        this.DoAnd(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laDestUnique) {
        this.DoDestUnique(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laOr) {
        this.DoOr(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laXor) this.DoXOr(ListA,ListB);
    };
    this.Remove = function (Item) {
      var Result = 0;
      Result = this.IndexOf(Item);
      if (Result !== -1) this.Delete(Result);
      return Result;
    };
    this.Pack = function () {
      var Dst = 0;
      var i = 0;
      var V = undefined;
      Dst = 0;
      for (var $l1 = 0, $end2 = this.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        V = this.FList[i];
        if (!pas.System.Assigned(V)) continue;
        this.FList[Dst] = V;
        Dst += 1;
      };
    };
    this.Sort = function (Compare) {
      if (!(rtl.length(this.FList) > 0) || (this.FCount < 2)) return;
      $impl.QuickSort(this.FList,0,this.FCount - 1,Compare);
    };
    this.ForEachCall = function (proc2call, arg) {
      var i = 0;
      var v = undefined;
      for (var $l1 = 0, $end2 = this.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        v = this.FList[i];
        if (pas.System.Assigned(v)) proc2call(v,arg);
      };
    };
    this.ForEachCall$1 = function (proc2call, arg) {
      var i = 0;
      var v = undefined;
      for (var $l1 = 0, $end2 = this.FCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        v = this.FList[i];
        if (pas.System.Assigned(v)) proc2call(v,arg);
      };
    };
  });
  this.TListNotification = {"0": "lnAdded", lnAdded: 0, "1": "lnExtracted", lnExtracted: 1, "2": "lnDeleted", lnDeleted: 2};
  $mod.$rtti.$Enum("TListNotification",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TListNotification});
  $mod.$rtti.$Class("TList");
  rtl.createClass($mod,"TListEnumerator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = null;
      this.FPosition = 0;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AList) {
      pas.System.TObject.Create.call(this);
      this.FList = AList;
      this.FPosition = -1;
      return this;
    };
    this.GetCurrent = function () {
      var Result = undefined;
      Result = this.FList.Get(this.FPosition);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FPosition += 1;
      Result = this.FPosition < this.FList.GetCount();
      return Result;
    };
  });
  rtl.createClass($mod,"TList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = null;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.CopyMove = function (aList) {
      var r = 0;
      this.Clear();
      for (var $l1 = 0, $end2 = aList.GetCount() - 1; $l1 <= $end2; $l1++) {
        r = $l1;
        this.Add(aList.Get(r));
      };
    };
    this.MergeMove = function (aList) {
      var r = 0;
      for (var $l1 = 0, $end2 = aList.GetCount() - 1; $l1 <= $end2; $l1++) {
        r = $l1;
        if (this.IndexOf(aList.Get(r)) < 0) this.Add(aList.Get(r));
      };
    };
    this.DoCopy = function (ListA, ListB) {
      if (ListB != null) {
        this.CopyMove(ListB)}
       else this.CopyMove(ListA);
    };
    this.DoSrcUnique = function (ListA, ListB) {
      var r = 0;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.GetCount() - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
        };
      } else {
        for (var $l3 = this.GetCount() - 1; $l3 >= 0; $l3--) {
          r = $l3;
          if (ListA.IndexOf(this.Get(r)) >= 0) this.Delete(r);
        };
      };
    };
    this.DoAnd = function (ListA, ListB) {
      var r = 0;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.GetCount() - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) >= 0) this.Add(ListA.Get(r));
        };
      } else {
        for (var $l3 = this.GetCount() - 1; $l3 >= 0; $l3--) {
          r = $l3;
          if (ListA.IndexOf(this.Get(r)) < 0) this.Delete(r);
        };
      };
    };
    this.DoDestUnique = function (ListA, ListB) {
      var $Self = this;
      function MoveElements(Src, Dest) {
        var r = 0;
        $Self.Clear();
        for (var $l1 = 0, $end2 = Src.GetCount() - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (Dest.IndexOf(Src.Get(r)) < 0) $Self.Add(Src.Get(r));
        };
      };
      var Dest = null;
      if (ListB != null) {
        MoveElements(ListB,ListA)}
       else try {
        Dest = $mod.TList.$create("Create$1");
        Dest.CopyMove($Self);
        MoveElements(ListA,Dest);
      } finally {
        Dest.$destroy("Destroy");
      };
    };
    this.DoOr = function (ListA, ListB) {
      if (ListB != null) {
        this.CopyMove(ListA);
        this.MergeMove(ListB);
      } else this.MergeMove(ListA);
    };
    this.DoXOr = function (ListA, ListB) {
      var r = 0;
      var l = null;
      if (ListB != null) {
        this.Clear();
        for (var $l1 = 0, $end2 = ListA.GetCount() - 1; $l1 <= $end2; $l1++) {
          r = $l1;
          if (ListB.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
        };
        for (var $l3 = 0, $end4 = ListB.GetCount() - 1; $l3 <= $end4; $l3++) {
          r = $l3;
          if (ListA.IndexOf(ListB.Get(r)) < 0) this.Add(ListB.Get(r));
        };
      } else try {
        l = $mod.TList.$create("Create$1");
        l.CopyMove(this);
        for (var $l5 = this.GetCount() - 1; $l5 >= 0; $l5--) {
          r = $l5;
          if (ListA.IndexOf(this.Get(r)) >= 0) this.Delete(r);
        };
        for (var $l6 = 0, $end7 = ListA.GetCount() - 1; $l6 <= $end7; $l6++) {
          r = $l6;
          if (l.IndexOf(ListA.Get(r)) < 0) this.Add(ListA.Get(r));
        };
      } finally {
        l.$destroy("Destroy");
      };
    };
    this.Get = function (Index) {
      var Result = undefined;
      Result = this.FList.Get(Index);
      return Result;
    };
    this.Put = function (Index, Item) {
      var V = undefined;
      V = this.Get(Index);
      this.FList.Put(Index,Item);
      if (pas.System.Assigned(V)) this.Notify(V,$mod.TListNotification.lnDeleted);
      if (pas.System.Assigned(Item)) this.Notify(Item,$mod.TListNotification.lnAdded);
    };
    this.Notify = function (aValue, Action) {
      if (pas.System.Assigned(aValue)) ;
      if (Action === $mod.TListNotification.lnExtracted) ;
    };
    this.SetCapacity = function (NewCapacity) {
      this.FList.SetCapacity(NewCapacity);
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = this.FList.FCapacity;
      return Result;
    };
    this.SetCount = function (NewCount) {
      if (NewCount < this.FList.FCount) {
        while (this.FList.FCount > NewCount) this.Delete(this.FList.FCount - 1)}
       else this.FList.SetCount(NewCount);
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FList.FCount;
      return Result;
    };
    this.GetList = function () {
      var Result = [];
      Result = this.FList.FList;
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FList = $mod.TFPList.$create("Create");
      return this;
    };
    this.Destroy = function () {
      if (this.FList != null) this.Clear();
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FList;
        }, set: function (v) {
          this.p.FList = v;
        }});
    };
    this.AddList = function (AList) {
      var I = 0;
      this.FList.AddList(AList.FList);
      for (var $l1 = 0, $end2 = AList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (pas.System.Assigned(AList.Get(I))) this.Notify(AList.Get(I),$mod.TListNotification.lnAdded);
      };
    };
    this.Add = function (Item) {
      var Result = 0;
      Result = this.FList.Add(Item);
      if (pas.System.Assigned(Item)) this.Notify(Item,$mod.TListNotification.lnAdded);
      return Result;
    };
    this.Clear = function () {
      while (this.FList.FCount > 0) this.Delete(this.GetCount() - 1);
    };
    this.Delete = function (Index) {
      var V = undefined;
      V = this.FList.Get(Index);
      this.FList.Delete(Index);
      if (pas.System.Assigned(V)) this.Notify(V,$mod.TListNotification.lnDeleted);
    };
    this.Error = function (Msg, Data) {
      throw $mod.EListError.$create("CreateFmt",[Msg,[Data]]);
    };
    this.Exchange = function (Index1, Index2) {
      this.FList.Exchange(Index1,Index2);
    };
    this.Expand = function () {
      var Result = null;
      this.FList.Expand();
      Result = this;
      return Result;
    };
    this.Extract = function (Item) {
      var Result = undefined;
      var c = 0;
      c = this.FList.FCount;
      Result = this.FList.Extract(Item);
      if (c !== this.FList.FCount) this.Notify(Result,$mod.TListNotification.lnExtracted);
      return Result;
    };
    this.First = function () {
      var Result = undefined;
      Result = this.FList.First();
      return Result;
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $mod.TListEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.IndexOf = function (Item) {
      var Result = 0;
      Result = this.FList.IndexOf(Item);
      return Result;
    };
    this.Insert = function (Index, Item) {
      this.FList.Insert(Index,Item);
      if (pas.System.Assigned(Item)) this.Notify(Item,$mod.TListNotification.lnAdded);
    };
    this.Last = function () {
      var Result = undefined;
      Result = this.FList.Last();
      return Result;
    };
    this.Move = function (CurIndex, NewIndex) {
      this.FList.Move(CurIndex,NewIndex);
    };
    this.Assign = function (ListA, AOperator, ListB) {
      var $tmp1 = AOperator;
      if ($tmp1 === $mod.TListAssignOp.laCopy) {
        this.DoCopy(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laSrcUnique) {
        this.DoSrcUnique(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laAnd) {
        this.DoAnd(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laDestUnique) {
        this.DoDestUnique(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laOr) {
        this.DoOr(ListA,ListB)}
       else if ($tmp1 === $mod.TListAssignOp.laXor) this.DoXOr(ListA,ListB);
    };
    this.Remove = function (Item) {
      var Result = 0;
      Result = this.IndexOf(Item);
      if (Result !== -1) this.Delete(Result);
      return Result;
    };
    this.Pack = function () {
      this.FList.Pack();
    };
    this.Sort = function (Compare) {
      this.FList.Sort(Compare);
    };
  });
  rtl.createClass($mod,"TPersistent",pas.System.TObject,function () {
    this.AssignError = function (Source) {
      var SourceName = "";
      if (Source !== null) {
        SourceName = Source.$classname}
       else SourceName = "Nil";
      throw pas.SysUtils.EConvertError.$create("Create$1",["Cannot assign a " + SourceName + " to a " + this.$classname + "."]);
    };
    this.AssignTo = function (Dest) {
      Dest.AssignError(this);
    };
    this.GetOwner = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.Assign = function (Source) {
      if (Source !== null) {
        Source.AssignTo(this)}
       else this.AssignError(null);
    };
    this.GetNamePath = function () {
      var Result = "";
      var OwnerName = "";
      var TheOwner = null;
      Result = this.$classname;
      TheOwner = this.GetOwner();
      if (TheOwner !== null) {
        OwnerName = TheOwner.GetNamePath();
        if (OwnerName !== "") Result = OwnerName + "." + Result;
      };
      return Result;
    };
    this.SetEvent = function (AInstance, ALookupRoot, APropName, AMethodName) {
      var lMethod = pas.System.TMethod.$new();
      lMethod.Code = ALookupRoot.$class.MethodAddress(AMethodName);
      if (lMethod.Code === null) throw pas.SysUtils.Exception.$create("Create$1",[ALookupRoot.$classname + ' has no published method "' + AMethodName + '"']);
      lMethod.Data = ALookupRoot;
      pas.TypInfo.SetMethodProp$1(AInstance,APropName,lMethod);
    };
    this.SetEvent$1 = function (ALookupRoot, APropName, AMethodName) {
      this.SetEvent(this,ALookupRoot,APropName,AMethodName);
    };
  });
  $mod.$rtti.$ClassRef("TPersistentClass",{instancetype: $mod.$rtti["TPersistent"]});
  rtl.createClass($mod,"TInterfacedPersistent",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FOwnerInterface = null;
    };
    this.$final = function () {
      this.FOwnerInterface = undefined;
      $mod.TPersistent.$final.call(this);
    };
    this._AddRef = function () {
      var Result = 0;
      Result = -1;
      if (this.FOwnerInterface != null) Result = this.FOwnerInterface._AddRef();
      return Result;
    };
    this._Release = function () {
      var Result = 0;
      Result = -1;
      if (this.FOwnerInterface != null) Result = this.FOwnerInterface._Release();
      return Result;
    };
    this.QueryInterface = function (IID, Obj) {
      var Result = 0;
      Result = -2147467262;
      if (this.GetInterface(IID,Obj)) Result = 0;
      return Result;
    };
    this.AfterConstruction = function () {
      try {
        pas.System.TObject.AfterConstruction.call(this);
        if (this.GetOwner() !== null) this.GetOwner().GetInterface(rtl.getIntfGUIDR(pas.System.IUnknown),{p: this, get: function () {
            return this.p.FOwnerInterface;
          }, set: function (v) {
            this.p.FOwnerInterface = v;
          }});
      } finally {
        rtl._Release(this.FOwnerInterface);
      };
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$Class("TStrings");
  rtl.createClass($mod,"TStringsEnumerator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FStrings = null;
      this.FPosition = 0;
    };
    this.$final = function () {
      this.FStrings = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AStrings) {
      pas.System.TObject.Create.call(this);
      this.FStrings = AStrings;
      this.FPosition = -1;
      return this;
    };
    this.GetCurrent = function () {
      var Result = "";
      Result = this.FStrings.Get(this.FPosition);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FPosition += 1;
      Result = this.FPosition < this.FStrings.GetCount();
      return Result;
    };
  });
  rtl.createClass($mod,"TStrings",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FReq = null;
      this.FSpecialCharsInited = false;
      this.FAlwaysQuote = false;
      this.FQuoteChar = "";
      this.FDelimiter = "";
      this.FNameValueSeparator = "";
      this.FUpdateCount = 0;
      this.FLBS = 0;
      this.FSkipLastLineBreak = false;
      this.FStrictDelimiter = false;
      this.FLineBreak = "";
    };
    this.$final = function () {
      this.FReq = undefined;
      $mod.TPersistent.$final.call(this);
    };
    this.GetCommaText = function () {
      var Result = "";
      var C1 = "";
      var C2 = "";
      var FSD = false;
      this.CheckSpecialChars();
      FSD = this.FStrictDelimiter;
      C1 = this.GetDelimiter();
      C2 = this.GetQuoteChar();
      this.SetDelimiter(",");
      this.SetQuoteChar('"');
      this.FStrictDelimiter = false;
      try {
        Result = this.GetDelimitedText();
      } finally {
        this.SetDelimiter(C1);
        this.SetQuoteChar(C2);
        this.FStrictDelimiter = FSD;
      };
      return Result;
    };
    this.GetName = function (Index) {
      var Result = "";
      var V = "";
      this.GetNameValue(Index,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},{get: function () {
          return V;
        }, set: function (v) {
          V = v;
        }});
      return Result;
    };
    this.GetValue = function (Name) {
      var Result = "";
      var L = 0;
      var N = "";
      Result = "";
      L = this.IndexOfName(Name);
      if (L !== -1) this.GetNameValue(L,{get: function () {
          return N;
        }, set: function (v) {
          N = v;
        }},{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.GetLBS = function () {
      var Result = 0;
      this.CheckSpecialChars();
      Result = this.FLBS;
      return Result;
    };
    this.SetLBS = function (AValue) {
      this.CheckSpecialChars();
      this.FLBS = AValue;
    };
    this.SetCommaText = function (Value) {
      var C1 = "";
      var C2 = "";
      this.CheckSpecialChars();
      C1 = this.GetDelimiter();
      C2 = this.GetQuoteChar();
      this.SetDelimiter(",");
      this.SetQuoteChar('"');
      try {
        this.SetDelimitedText(Value);
      } finally {
        this.SetDelimiter(C1);
        this.SetQuoteChar(C2);
      };
    };
    this.SetValue = function (Name, Value) {
      var L = 0;
      this.CheckSpecialChars();
      L = this.IndexOfName(Name);
      if (L === -1) {
        this.Add(Name + this.FNameValueSeparator + Value)}
       else this.Put(L,Name + this.FNameValueSeparator + Value);
    };
    this.SetDelimiter = function (c) {
      this.CheckSpecialChars();
      this.FDelimiter = c;
    };
    this.SetQuoteChar = function (c) {
      this.CheckSpecialChars();
      this.FQuoteChar = c;
    };
    this.SetNameValueSeparator = function (c) {
      this.CheckSpecialChars();
      this.FNameValueSeparator = c;
    };
    this.DoSetTextStr = function (Value, DoClear) {
      var S = "";
      var P = 0;
      try {
        this.BeginUpdate();
        if (DoClear) this.Clear();
        P = 1;
        while (this.GetNextLinebreak(Value,{get: function () {
            return S;
          }, set: function (v) {
            S = v;
          }},{get: function () {
            return P;
          }, set: function (v) {
            P = v;
          }})) this.Add(S);
      } finally {
        this.EndUpdate();
      };
    };
    this.GetDelimiter = function () {
      var Result = "";
      this.CheckSpecialChars();
      Result = this.FDelimiter;
      return Result;
    };
    this.GetNameValueSeparator = function () {
      var Result = "";
      this.CheckSpecialChars();
      Result = this.FNameValueSeparator;
      return Result;
    };
    this.GetQuoteChar = function () {
      var Result = "";
      this.CheckSpecialChars();
      Result = this.FQuoteChar;
      return Result;
    };
    this.GetLineBreak = function () {
      var Result = "";
      this.CheckSpecialChars();
      Result = this.FLineBreak;
      return Result;
    };
    this.SetLineBreak = function (S) {
      this.CheckSpecialChars();
      this.FLineBreak = S;
    };
    this.GetSkipLastLineBreak = function () {
      var Result = false;
      this.CheckSpecialChars();
      Result = this.FSkipLastLineBreak;
      return Result;
    };
    this.SetSkipLastLineBreak = function (AValue) {
      this.CheckSpecialChars();
      this.FSkipLastLineBreak = AValue;
    };
    this.onLoad = function (Event) {
      var Result = false;
      var a = [];
      var req = null;
      req = Event.target;
      if (req.status === 200) {
        var obj = req.responseText.split(/\r\n|\n/);
        for (var i = 0; i < obj.length; i++) {
          a.push(obj[i]);
        };
      };
      this.AddStrings$3(a,true);
      Result = true;
      return Result;
    };
    this.Error = function (Msg, Data) {
      throw $mod.EStringListError.$create("CreateFmt",[Msg,[pas.SysUtils.IntToStr(Data)]]);
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = this.GetCount();
      return Result;
    };
    this.GetObject = function (Index) {
      var Result = null;
      if (Index === 0) ;
      Result = null;
      return Result;
    };
    this.GetTextStr = function () {
      var Result = "";
      var I = 0;
      var S = "";
      var NL = "";
      this.CheckSpecialChars();
      if (this.FLineBreak !== pas.System.sLineBreak) {
        NL = this.FLineBreak}
       else {
        var $tmp1 = this.FLBS;
        if ($tmp1 === pas.System.TTextLineBreakStyle.tlbsLF) {
          NL = "\n"}
         else if ($tmp1 === pas.System.TTextLineBreakStyle.tlbsCRLF) {
          NL = "\r\n"}
         else if ($tmp1 === pas.System.TTextLineBreakStyle.tlbsCR) NL = "\r";
      };
      Result = "";
      for (var $l2 = 0, $end3 = this.GetCount() - 1; $l2 <= $end3; $l2++) {
        I = $l2;
        S = this.Get(I);
        Result = Result + S;
        if ((I < (this.GetCount() - 1)) || !this.GetSkipLastLineBreak()) Result = Result + NL;
      };
      return Result;
    };
    this.Put = function (Index, S) {
      var Obj = null;
      Obj = this.GetObject(Index);
      this.Delete(Index);
      this.InsertObject(Index,S,Obj);
    };
    this.PutObject = function (Index, AObject) {
      if (Index === 0) return;
      if (AObject === null) return;
    };
    this.SetCapacity = function (NewCapacity) {
      if (NewCapacity === 0) ;
    };
    this.SetTextStr = function (Value) {
      this.CheckSpecialChars();
      this.DoSetTextStr(Value,true);
    };
    this.SetUpdateState = function (Updating) {
      if (Updating) ;
    };
    this.DoCompareText = function (s1, s2) {
      var Result = 0;
      Result = pas.SysUtils.CompareText(s1,s2);
      return Result;
    };
    this.GetDelimitedText = function () {
      var Result = "";
      var I = 0;
      var RE = "";
      var S = "";
      var doQuote = false;
      this.CheckSpecialChars();
      Result = "";
      RE = this.GetQuoteChar() + "|" + this.GetDelimiter();
      if (!this.FStrictDelimiter) RE = " |" + RE;
      RE = "\/" + RE + "\/";
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        S = this.Get(I);
        doQuote = this.FAlwaysQuote || (S.search(RE) !== -1);
        if (doQuote) {
          Result = Result + pas.SysUtils.QuoteString(S,this.GetQuoteChar())}
         else Result = Result + S;
        if (I < (this.GetCount() - 1)) Result = Result + this.GetDelimiter();
      };
      if ((Result.length === 0) && (this.GetCount() === 1)) Result = this.GetQuoteChar() + this.GetQuoteChar();
      return Result;
    };
    this.SetDelimitedText = function (AValue) {
      var i = 0;
      var j = 0;
      var aNotFirst = false;
      this.CheckSpecialChars();
      this.BeginUpdate();
      i = 1;
      j = 1;
      aNotFirst = false;
      try {
        this.Clear();
        if (this.FStrictDelimiter) {
          while (i <= AValue.length) {
            if (aNotFirst && (i <= AValue.length) && (AValue.charAt(i - 1) === this.FDelimiter)) i += 1;
            if (i <= AValue.length) {
              if (AValue.charAt(i - 1) === this.FQuoteChar) {
                j = i + 1;
                while ((j <= AValue.length) && ((AValue.charAt(j - 1) !== this.FQuoteChar) || (((j + 1) <= AValue.length) && (AValue.charAt((j + 1) - 1) === this.FQuoteChar)))) {
                  if ((j <= AValue.length) && (AValue.charAt(j - 1) === this.FQuoteChar)) {
                    j += 2}
                   else j += 1;
                };
                this.Add(pas.SysUtils.StringReplace(pas.System.Copy(AValue,i + 1,j - i - 1),this.FQuoteChar + this.FQuoteChar,this.FQuoteChar,rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
                i = j + 1;
              } else {
                j = i;
                while ((j <= AValue.length) && (AValue.charAt(j - 1) !== this.FDelimiter)) j += 1;
                this.Add(pas.System.Copy(AValue,i,j - i));
                i = j;
              };
            } else {
              if (aNotFirst) this.Add("");
            };
            aNotFirst = true;
          };
        } else {
          while (i <= AValue.length) {
            if (aNotFirst && (i <= AValue.length) && (AValue.charAt(i - 1) === this.FDelimiter)) i += 1;
            while ((i <= AValue.length) && (AValue.charCodeAt(i - 1) <= " ".charCodeAt())) i += 1;
            if (i <= AValue.length) {
              if (AValue.charAt(i - 1) === this.FQuoteChar) {
                j = i + 1;
                while ((j <= AValue.length) && ((AValue.charAt(j - 1) !== this.FQuoteChar) || (((j + 1) <= AValue.length) && (AValue.charAt((j + 1) - 1) === this.FQuoteChar)))) {
                  if ((j <= AValue.length) && (AValue.charAt(j - 1) === this.FQuoteChar)) {
                    j += 2}
                   else j += 1;
                };
                this.Add(pas.SysUtils.StringReplace(pas.System.Copy(AValue,i + 1,j - i - 1),this.FQuoteChar + this.FQuoteChar,this.FQuoteChar,rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
                i = j + 1;
              } else {
                j = i;
                while ((j <= AValue.length) && (AValue.charCodeAt(j - 1) > " ".charCodeAt()) && (AValue.charAt(j - 1) !== this.FDelimiter)) j += 1;
                this.Add(pas.System.Copy(AValue,i,j - i));
                i = j;
              };
            } else {
              if (aNotFirst) this.Add("");
            };
            while ((i <= AValue.length) && (AValue.charCodeAt(i - 1) <= " ".charCodeAt())) i += 1;
            aNotFirst = true;
          };
        };
      } finally {
        this.EndUpdate();
      };
    };
    this.GetValueFromIndex = function (Index) {
      var Result = "";
      var N = "";
      this.GetNameValue(Index,{get: function () {
          return N;
        }, set: function (v) {
          N = v;
        }},{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.SetValueFromIndex = function (Index, Value) {
      if (Value === "") {
        this.Delete(Index)}
       else {
        if (Index < 0) Index = this.Add("");
        this.CheckSpecialChars();
        this.Put(Index,this.GetName(Index) + this.FNameValueSeparator + Value);
      };
    };
    this.CheckSpecialChars = function () {
      if (!this.FSpecialCharsInited) {
        this.FQuoteChar = '"';
        this.FDelimiter = ",";
        this.FNameValueSeparator = "=";
        this.FLBS = pas.System.DefaultTextLineBreakStyle;
        this.FSpecialCharsInited = true;
        this.FLineBreak = pas.System.sLineBreak;
      };
    };
    this.GetNextLinebreak = function (Value, S, P) {
      var Result = false;
      var PP = 0;
      S.set("");
      Result = false;
      if ((Value.length - P.get()) < 0) return Result;
      PP = Value.indexOf(this.GetLineBreak(),P.get() - 1) + 1;
      if (PP < 1) PP = Value.length + 1;
      S.set(pas.System.Copy(Value,P.get(),PP - P.get()));
      P.set(PP + this.GetLineBreak().length);
      Result = true;
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FAlwaysQuote = false;
      return this;
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.Add = function (S) {
      var Result = 0;
      Result = this.GetCount();
      this.Insert(this.GetCount(),S);
      return Result;
    };
    this.AddObject = function (S, AObject) {
      var Result = 0;
      Result = this.Add(S);
      this.PutObject(Result,AObject);
      return Result;
    };
    this.Append = function (S) {
      this.Add(S);
    };
    this.AddStrings = function (TheStrings) {
      var Runner = 0;
      for (var $l1 = 0, $end2 = TheStrings.GetCount() - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        this.AddObject(TheStrings.Get(Runner),TheStrings.GetObject(Runner));
      };
    };
    this.AddStrings$1 = function (TheStrings, ClearFirst) {
      this.BeginUpdate();
      try {
        if (ClearFirst) this.Clear();
        this.AddStrings(TheStrings);
      } finally {
        this.EndUpdate();
      };
    };
    this.AddStrings$2 = function (TheStrings) {
      var Runner = 0;
      if ((this.GetCount() + (rtl.length(TheStrings) - 1) + 1) > this.GetCapacity()) this.SetCapacity(this.GetCount() + (rtl.length(TheStrings) - 1) + 1);
      for (var $l1 = 0, $end2 = rtl.length(TheStrings) - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        this.Add(TheStrings[Runner]);
      };
    };
    this.AddStrings$3 = function (TheStrings, ClearFirst) {
      this.BeginUpdate();
      try {
        if (ClearFirst) this.Clear();
        this.AddStrings$2(TheStrings);
      } finally {
        this.EndUpdate();
      };
    };
    this.AddPair = function (AName, AValue) {
      var Result = null;
      Result = this.AddPair$1(AName,AValue,null);
      return Result;
    };
    this.AddPair$1 = function (AName, AValue, AObject) {
      var Result = null;
      Result = this;
      this.AddObject(AName + this.GetNameValueSeparator() + AValue,AObject);
      return Result;
    };
    this.AddText = function (S) {
      this.CheckSpecialChars();
      this.DoSetTextStr(S,false);
    };
    this.Assign = function (Source) {
      var S = null;
      if ($mod.TStrings.isPrototypeOf(Source)) {
        S = Source;
        this.BeginUpdate();
        try {
          this.Clear();
          this.FSpecialCharsInited = S.FSpecialCharsInited;
          this.FQuoteChar = S.FQuoteChar;
          this.FDelimiter = S.FDelimiter;
          this.FNameValueSeparator = S.FNameValueSeparator;
          this.FLBS = S.FLBS;
          this.FLineBreak = S.FLineBreak;
          this.AddStrings(S);
        } finally {
          this.EndUpdate();
        };
      } else $mod.TPersistent.Assign.call(this,Source);
    };
    this.BeginUpdate = function () {
      if (this.FUpdateCount === 0) this.SetUpdateState(true);
      this.FUpdateCount += 1;
    };
    this.EndUpdate = function () {
      if (this.FUpdateCount > 0) this.FUpdateCount -= 1;
      if (this.FUpdateCount === 0) this.SetUpdateState(false);
    };
    this.Equals = function (Obj) {
      var Result = false;
      if ($mod.TStrings.isPrototypeOf(Obj)) {
        Result = this.Equals$2(Obj)}
       else Result = pas.System.TObject.Equals.call(this,Obj);
      return Result;
    };
    this.Equals$2 = function (TheStrings) {
      var Result = false;
      var Runner = 0;
      var Nr = 0;
      Result = false;
      Nr = this.GetCount();
      if (Nr !== TheStrings.GetCount()) return Result;
      for (var $l1 = 0, $end2 = Nr - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        if (this.Get(Runner) !== TheStrings.Get(Runner)) return Result;
      };
      Result = true;
      return Result;
    };
    this.Exchange = function (Index1, Index2) {
      var Obj = null;
      var Str = "";
      this.BeginUpdate();
      try {
        Obj = this.GetObject(Index1);
        Str = this.Get(Index1);
        this.PutObject(Index1,this.GetObject(Index2));
        this.Put(Index1,this.Get(Index2));
        this.PutObject(Index2,Obj);
        this.Put(Index2,Str);
      } finally {
        this.EndUpdate();
      };
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $mod.TStringsEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.IndexOf = function (S) {
      var Result = 0;
      Result = 0;
      while ((Result < this.GetCount()) && (this.DoCompareText(this.Get(Result),S) !== 0)) Result = Result + 1;
      if (Result === this.GetCount()) Result = -1;
      return Result;
    };
    this.IndexOfName = function (Name) {
      var Result = 0;
      var len = 0;
      var S = "";
      this.CheckSpecialChars();
      Result = 0;
      while (Result < this.GetCount()) {
        S = this.Get(Result);
        len = pas.System.Pos(this.FNameValueSeparator,S) - 1;
        if ((len >= 0) && (this.DoCompareText(Name,pas.System.Copy(S,1,len)) === 0)) return Result;
        Result += 1;
      };
      Result = -1;
      return Result;
    };
    this.IndexOfObject = function (AObject) {
      var Result = 0;
      Result = 0;
      while ((Result < this.GetCount()) && (this.GetObject(Result) !== AObject)) Result = Result + 1;
      if (Result === this.GetCount()) Result = -1;
      return Result;
    };
    this.InsertObject = function (Index, S, AObject) {
      this.Insert(Index,S);
      this.PutObject(Index,AObject);
    };
    this.LoadFromFile = function (FileName) {
      var a = [];
      a = pas.JS.URLToArrayOfString(FileName);
      this.AddStrings$3(a,true);
    };
    this.LoadFromFileAsync = function (FileName) {
      var cors_api_url = "";
      cors_api_url = "";
      this.FReq = new XMLHttpRequest();
      this.FReq.addEventListener("load",rtl.createCallback(this,"onLoad"));
      this.FReq.open("GET",cors_api_url + FileName,true);
      this.FReq.send();
    };
    this.SaveToFile = function (FileName) {
      var AText = "";
      AText = this.GetTextStr();
      var element = document.createElement('a');
      element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(AText));
      if (FileName != ''){
        element.setAttribute('download', FileName);
      }
      element.style.display = 'none';
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    };
    this.Move = function (CurIndex, NewIndex) {
      var Obj = null;
      var Str = "";
      this.BeginUpdate();
      try {
        Obj = this.GetObject(CurIndex);
        Str = this.Get(CurIndex);
        this.PutObject(CurIndex,null);
        this.Delete(CurIndex);
        this.InsertObject(NewIndex,Str,Obj);
      } finally {
        this.EndUpdate();
      };
    };
    this.GetNameValue = function (Index, AName, AValue) {
      var L = 0;
      this.CheckSpecialChars();
      AValue.set(this.Get(Index));
      L = pas.System.Pos(this.FNameValueSeparator,AValue.get());
      if (L !== 0) {
        AName.set(pas.System.Copy(AValue.get(),1,L - 1));
        AValue.set(pas.System.Copy(AValue.get(),L + 1,AValue.get().length - L));
      } else AName.set("");
    };
    this.ExtractName = function (S) {
      var Result = "";
      var L = 0;
      this.CheckSpecialChars();
      L = pas.System.Pos(this.FNameValueSeparator,S);
      if (L !== 0) {
        Result = pas.System.Copy(S,1,L - 1)}
       else Result = "";
      return Result;
    };
  });
  rtl.recNewT($mod,"TStringItem",function () {
    this.FString = "";
    this.FObject = null;
    this.$eq = function (b) {
      return (this.FString === b.FString) && (this.FObject === b.FObject);
    };
    this.$assign = function (s) {
      this.FString = s.FString;
      this.FObject = s.FObject;
      return this;
    };
    var $r = $mod.$rtti.$Record("TStringItem",{});
    $r.addField("FString",rtl.string);
    $r.addField("FObject",pas.System.$rtti["TObject"]);
  });
  $mod.$rtti.$DynArray("TStringItemArray",{eltype: $mod.$rtti["TStringItem"]});
  $mod.$rtti.$Class("TStringList");
  $mod.$rtti.$ProcVar("TStringListSortCompare",{procsig: rtl.newTIProcSig([["List",$mod.$rtti["TStringList"]],["Index1",rtl.longint],["Index2",rtl.longint]],rtl.longint)});
  this.TStringsSortStyle = {"0": "sslNone", sslNone: 0, "1": "sslUser", sslUser: 1, "2": "sslAuto", sslAuto: 2};
  $mod.$rtti.$Enum("TStringsSortStyle",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TStringsSortStyle});
  $mod.$rtti.$Set("TStringsSortStyles",{comptype: $mod.$rtti["TStringsSortStyle"]});
  rtl.createClass($mod,"TStringList",$mod.TStrings,function () {
    this.$init = function () {
      $mod.TStrings.$init.call(this);
      this.FList = [];
      this.FCount = 0;
      this.FOnChange = null;
      this.FOnChanging = null;
      this.FDuplicates = 0;
      this.FCaseSensitive = false;
      this.FForceSort = false;
      this.FOwnsObjects = false;
      this.FSortStyle = 0;
    };
    this.$final = function () {
      this.FList = undefined;
      this.FOnChange = undefined;
      this.FOnChanging = undefined;
      $mod.TStrings.$final.call(this);
    };
    this.ExchangeItemsInt = function (Index1, Index2) {
      var S = "";
      var O = null;
      S = this.FList[Index1].FString;
      O = this.FList[Index1].FObject;
      this.FList[Index1].FString = this.FList[Index2].FString;
      this.FList[Index1].FObject = this.FList[Index2].FObject;
      this.FList[Index2].FString = S;
      this.FList[Index2].FObject = O;
    };
    this.GetSorted = function () {
      var Result = false;
      Result = this.FSortStyle in rtl.createSet($mod.TStringsSortStyle.sslUser,$mod.TStringsSortStyle.sslAuto);
      return Result;
    };
    this.Grow = function () {
      var NC = 0;
      NC = this.GetCapacity();
      if (NC >= 256) {
        NC = NC + Math.floor(NC / 4)}
       else if (NC === 0) {
        NC = 4}
       else NC = NC * 4;
      this.SetCapacity(NC);
    };
    this.InternalClear = function (FromIndex, ClearOnly) {
      var I = 0;
      if (FromIndex < this.FCount) {
        if (this.FOwnsObjects) {
          for (var $l1 = FromIndex, $end2 = this.FCount - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            this.FList[I].FString = "";
            pas.SysUtils.FreeAndNil({p: this.FList[I], get: function () {
                return this.p.FObject;
              }, set: function (v) {
                this.p.FObject = v;
              }});
          };
        } else {
          for (var $l3 = FromIndex, $end4 = this.FCount - 1; $l3 <= $end4; $l3++) {
            I = $l3;
            this.FList[I].FString = "";
          };
        };
        this.FCount = FromIndex;
      };
      if (!ClearOnly) this.SetCapacity(0);
    };
    this.QuickSort = function (L, R, CompareFn) {
      var Pivot = 0;
      var vL = 0;
      var vR = 0;
      if ((R - L) <= 1) {
        if (L < R) if (CompareFn(this,L,R) > 0) this.ExchangeItems(L,R);
        return;
      };
      vL = L;
      vR = R;
      Pivot = L + pas.System.Random(R - L);
      while (vL < vR) {
        while ((vL < Pivot) && (CompareFn(this,vL,Pivot) <= 0)) vL += 1;
        while ((vR > Pivot) && (CompareFn(this,vR,Pivot) > 0)) vR -= 1;
        this.ExchangeItems(vL,vR);
        if (Pivot === vL) {
          Pivot = vR}
         else if (Pivot === vR) Pivot = vL;
      };
      if ((Pivot - 1) >= L) this.QuickSort(L,Pivot - 1,CompareFn);
      if ((Pivot + 1) <= R) this.QuickSort(Pivot + 1,R,CompareFn);
    };
    this.SetSorted = function (Value) {
      if (Value) {
        this.SetSortStyle($mod.TStringsSortStyle.sslAuto)}
       else this.SetSortStyle($mod.TStringsSortStyle.sslNone);
    };
    this.SetCaseSensitive = function (b) {
      if (b === this.FCaseSensitive) return;
      this.FCaseSensitive = b;
      if (this.FSortStyle === $mod.TStringsSortStyle.sslAuto) {
        this.FForceSort = true;
        try {
          this.Sort();
        } finally {
          this.FForceSort = false;
        };
      };
    };
    this.SetSortStyle = function (AValue) {
      if (this.FSortStyle === AValue) return;
      if (AValue === $mod.TStringsSortStyle.sslAuto) this.Sort();
      this.FSortStyle = AValue;
    };
    this.CheckIndex = function (AIndex) {
      if ((AIndex < 0) || (AIndex >= this.FCount)) this.Error(pas.RTLConsts.SListIndexError,AIndex);
    };
    this.ExchangeItems = function (Index1, Index2) {
      this.ExchangeItemsInt(Index1,Index2);
    };
    this.Changed = function () {
      if (this.FUpdateCount === 0) {
        if (this.FOnChange != null) this.FOnChange(this);
      };
    };
    this.Changing = function () {
      if (this.FUpdateCount === 0) if (this.FOnChanging != null) this.FOnChanging(this);
    };
    this.Get = function (Index) {
      var Result = "";
      this.CheckIndex(Index);
      Result = this.FList[Index].FString;
      return Result;
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = rtl.length(this.FList);
      return Result;
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FCount;
      return Result;
    };
    this.GetObject = function (Index) {
      var Result = null;
      this.CheckIndex(Index);
      Result = this.FList[Index].FObject;
      return Result;
    };
    this.Put = function (Index, S) {
      if (this.GetSorted()) this.Error(pas.RTLConsts.SSortedListError,0);
      this.CheckIndex(Index);
      this.Changing();
      this.FList[Index].FString = S;
      this.Changed();
    };
    this.PutObject = function (Index, AObject) {
      this.CheckIndex(Index);
      this.Changing();
      this.FList[Index].FObject = AObject;
      this.Changed();
    };
    this.SetCapacity = function (NewCapacity) {
      if (NewCapacity < 0) this.Error(pas.RTLConsts.SListCapacityError,NewCapacity);
      if (NewCapacity !== this.GetCapacity()) this.FList = rtl.arraySetLength(this.FList,$mod.TStringItem,NewCapacity);
    };
    this.SetUpdateState = function (Updating) {
      if (Updating) {
        this.Changing()}
       else this.Changed();
    };
    this.InsertItem = function (Index, S) {
      this.InsertItem$1(Index,S,null);
    };
    this.InsertItem$1 = function (Index, S, O) {
      var It = $mod.TStringItem.$new();
      this.Changing();
      if (this.FCount === this.GetCapacity()) this.Grow();
      It.FString = S;
      It.FObject = O;
      this.FList.splice(Index,0,It);
      this.FCount += 1;
      this.Changed();
    };
    this.DoCompareText = function (s1, s2) {
      var Result = 0;
      if (this.FCaseSensitive) {
        Result = pas.SysUtils.CompareStr(s1,s2)}
       else Result = pas.SysUtils.CompareText(s1,s2);
      return Result;
    };
    this.CompareStrings = function (s1, s2) {
      var Result = 0;
      Result = this.DoCompareText(s1,s2);
      return Result;
    };
    this.Destroy = function () {
      this.InternalClear(0,false);
      $mod.TStrings.Destroy.call(this);
    };
    this.Add = function (S) {
      var Result = 0;
      if (!(this.FSortStyle === $mod.TStringsSortStyle.sslAuto)) {
        Result = this.FCount}
       else if (this.Find(S,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }})) {
        var $tmp1 = this.FDuplicates;
        if ($tmp1 === pas.Types.TDuplicates.dupIgnore) {
          return Result}
         else if ($tmp1 === pas.Types.TDuplicates.dupError) this.Error(pas.RTLConsts.SDuplicateString,0);
      };
      this.InsertItem(Result,S);
      return Result;
    };
    this.Clear = function () {
      if (this.FCount === 0) return;
      this.Changing();
      this.InternalClear(0,false);
      this.Changed();
    };
    this.Delete = function (Index) {
      this.CheckIndex(Index);
      this.Changing();
      if (this.FOwnsObjects) pas.SysUtils.FreeAndNil({p: this.FList[Index], get: function () {
          return this.p.FObject;
        }, set: function (v) {
          this.p.FObject = v;
        }});
      this.FList.splice(Index,1);
      this.FList[this.GetCount() - 1].FString = "";
      this.FList[this.GetCount() - 1].FObject = null;
      this.FCount -= 1;
      this.Changed();
    };
    this.Exchange = function (Index1, Index2) {
      this.CheckIndex(Index1);
      this.CheckIndex(Index2);
      this.Changing();
      this.ExchangeItemsInt(Index1,Index2);
      this.Changed();
    };
    this.Find = function (S, Index) {
      var Result = false;
      var L = 0;
      var R = 0;
      var I = 0;
      var CompareRes = 0;
      Result = false;
      Index.set(-1);
      if (!this.GetSorted()) throw $mod.EListError.$create("Create$1",[pas.RTLConsts.SErrFindNeedsSortedList]);
      L = 0;
      R = this.GetCount() - 1;
      while (L <= R) {
        I = L + Math.floor((R - L) / 2);
        CompareRes = this.DoCompareText(S,this.FList[I].FString);
        if (CompareRes > 0) {
          L = I + 1}
         else {
          R = I - 1;
          if (CompareRes === 0) {
            Result = true;
            if (this.FDuplicates !== pas.Types.TDuplicates.dupAccept) L = I;
          };
        };
      };
      Index.set(L);
      return Result;
    };
    this.IndexOf = function (S) {
      var Result = 0;
      if (!this.GetSorted()) {
        Result = $mod.TStrings.IndexOf.call(this,S)}
       else if (!this.Find(S,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }})) Result = -1;
      return Result;
    };
    this.Insert = function (Index, S) {
      if (this.FSortStyle === $mod.TStringsSortStyle.sslAuto) {
        this.Error(pas.RTLConsts.SSortedListError,0)}
       else {
        if ((Index < 0) || (Index > this.FCount)) this.Error(pas.RTLConsts.SListIndexError,Index);
        this.InsertItem(Index,S);
      };
    };
    this.Sort = function () {
      this.CustomSort($impl.StringListAnsiCompare);
    };
    this.CustomSort = function (CompareFn) {
      if ((this.FForceSort || !(this.FSortStyle === $mod.TStringsSortStyle.sslAuto)) && (this.FCount > 1)) {
        this.Changing();
        this.QuickSort(0,this.FCount - 1,CompareFn);
        this.Changed();
      };
    };
  });
  $mod.$rtti.$Class("TCollection");
  rtl.createClass($mod,"TCollectionItem",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FCollection = null;
      this.FID = 0;
      this.FUpdateCount = 0;
    };
    this.$final = function () {
      this.FCollection = undefined;
      $mod.TPersistent.$final.call(this);
    };
    this.GetIndex = function () {
      var Result = 0;
      if (this.FCollection !== null) {
        Result = this.FCollection.FItems.IndexOf(this)}
       else Result = -1;
      return Result;
    };
    this.SetCollection = function (Value) {
      if (Value !== this.FCollection) {
        if (this.FCollection !== null) this.FCollection.RemoveItem(this);
        if (Value !== null) Value.InsertItem(this);
      };
    };
    this.Changed = function (AllItems) {
      if ((this.FCollection !== null) && (this.FCollection.FUpdateCount === 0)) {
        if (AllItems) {
          this.FCollection.Update(null)}
         else this.FCollection.Update(this);
      };
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FCollection;
      return Result;
    };
    this.GetDisplayName = function () {
      var Result = "";
      Result = this.$classname;
      return Result;
    };
    this.SetIndex = function (Value) {
      var Temp = 0;
      Temp = this.GetIndex();
      if ((Temp > -1) && (Temp !== Value)) {
        this.FCollection.FItems.Move(Temp,Value);
        this.Changed(true);
      };
    };
    this.SetDisplayName = function (Value) {
      this.Changed(false);
      if (Value === "") ;
    };
    this.Create$1 = function (ACollection) {
      pas.System.TObject.Create.call(this);
      this.SetCollection(ACollection);
      return this;
    };
    this.Destroy = function () {
      this.SetCollection(null);
      pas.System.TObject.Destroy.call(this);
    };
    this.GetNamePath = function () {
      var Result = "";
      if (this.FCollection !== null) {
        Result = this.FCollection.GetNamePath() + "[" + pas.SysUtils.IntToStr(this.GetIndex()) + "]"}
       else Result = this.$classname;
      return Result;
    };
  });
  rtl.createClass($mod,"TCollectionEnumerator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FCollection = null;
      this.FPosition = 0;
    };
    this.$final = function () {
      this.FCollection = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (ACollection) {
      pas.System.TObject.Create.call(this);
      this.FCollection = ACollection;
      this.FPosition = -1;
      return this;
    };
    this.GetCurrent = function () {
      var Result = null;
      Result = this.FCollection.GetItem(this.FPosition);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FPosition += 1;
      Result = this.FPosition < this.FCollection.GetCount();
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("TCollectionItemClass",{instancetype: $mod.$rtti["TCollectionItem"]});
  this.TCollectionNotification = {"0": "cnAdded", cnAdded: 0, "1": "cnExtracting", cnExtracting: 1, "2": "cnDeleting", cnDeleting: 2};
  $mod.$rtti.$Enum("TCollectionNotification",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TCollectionNotification});
  $mod.$rtti.$ProcVar("TCollectionSortCompare",{procsig: rtl.newTIProcSig([["Item1",$mod.$rtti["TCollectionItem"]],["Item2",$mod.$rtti["TCollectionItem"]]],rtl.longint)});
  rtl.createClass($mod,"TCollection",$mod.TPersistent,function () {
    this.$init = function () {
      $mod.TPersistent.$init.call(this);
      this.FItemClass = null;
      this.FItems = null;
      this.FUpdateCount = 0;
      this.FNextID = 0;
      this.FPropName = "";
    };
    this.$final = function () {
      this.FItemClass = undefined;
      this.FItems = undefined;
      $mod.TPersistent.$final.call(this);
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FItems.FCount;
      return Result;
    };
    this.GetPropName = function () {
      var Result = "";
      Result = this.FPropName;
      this.SetPropName();
      Result = this.FPropName;
      return Result;
    };
    this.InsertItem = function (Item) {
      if (!this.FItemClass.isPrototypeOf(Item)) return;
      this.FItems.Add(Item);
      Item.FCollection = this;
      Item.FID = this.FNextID;
      this.FNextID += 1;
      this.SetItemName(Item);
      this.Notify(Item,$mod.TCollectionNotification.cnAdded);
      this.Changed();
    };
    this.RemoveItem = function (Item) {
      var I = 0;
      this.Notify(Item,$mod.TCollectionNotification.cnExtracting);
      I = this.FItems.IndexOfItem(Item,pas.Types.TDirection.FromEnd);
      if (I !== -1) this.FItems.Delete(I);
      Item.FCollection = null;
      this.Changed();
    };
    this.DoClear = function () {
      var Item = null;
      while (this.FItems.FCount > 0) {
        Item = rtl.getObject(this.FItems.Last());
        if (Item != null) Item.$destroy("Destroy");
      };
    };
    this.GetAttrCount = function () {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.GetAttr = function (Index) {
      var Result = "";
      Result = "";
      if (Index === 0) ;
      return Result;
    };
    this.GetItemAttr = function (Index, ItemIndex) {
      var Result = "";
      Result = rtl.getObject(this.FItems.Get(ItemIndex)).GetDisplayName();
      if (Index === 0) ;
      return Result;
    };
    this.Changed = function () {
      if (this.FUpdateCount === 0) this.Update(null);
    };
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.FItems.Get(Index));
      return Result;
    };
    this.SetItem = function (Index, Value) {
      rtl.getObject(this.FItems.Get(Index)).Assign(Value);
    };
    this.SetItemName = function (Item) {
      if (Item === null) ;
    };
    this.SetPropName = function () {
    };
    this.Update = function (Item) {
      if (Item === null) ;
    };
    this.Notify = function (Item, Action) {
      if (Item === null) ;
      if (Action === $mod.TCollectionNotification.cnAdded) ;
    };
    this.Create$1 = function (AItemClass) {
      pas.System.TObject.Create.call(this);
      this.FItemClass = AItemClass;
      this.FItems = $mod.TFPList.$create("Create");
      return this;
    };
    this.Destroy = function () {
      this.FUpdateCount = 1;
      try {
        this.DoClear();
      } finally {
        this.FUpdateCount = 0;
      };
      if (this.FItems != null) this.FItems.$destroy("Destroy");
      pas.System.TObject.Destroy.call(this);
    };
    this.Owner = function () {
      var Result = null;
      Result = this.GetOwner();
      return Result;
    };
    this.Add = function () {
      var Result = null;
      Result = this.FItemClass.$create("Create$1",[this]);
      return Result;
    };
    this.Assign = function (Source) {
      var I = 0;
      if ($mod.TCollection.isPrototypeOf(Source)) {
        this.Clear();
        for (var $l1 = 0, $end2 = Source.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          this.Add().Assign(Source.GetItem(I));
        };
        return;
      } else $mod.TPersistent.Assign.call(this,Source);
    };
    this.BeginUpdate = function () {
      this.FUpdateCount += 1;
    };
    this.Clear = function () {
      if (this.FItems.FCount === 0) return;
      this.BeginUpdate();
      try {
        this.DoClear();
      } finally {
        this.EndUpdate();
      };
    };
    this.EndUpdate = function () {
      if (this.FUpdateCount > 0) this.FUpdateCount -= 1;
      if (this.FUpdateCount === 0) this.Changed();
    };
    this.Delete = function (Index) {
      var Item = null;
      Item = rtl.getObject(this.FItems.Get(Index));
      this.Notify(Item,$mod.TCollectionNotification.cnDeleting);
      if (Item != null) Item.$destroy("Destroy");
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $mod.TCollectionEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.GetNamePath = function () {
      var Result = "";
      var o = null;
      o = this.GetOwner();
      if ((o != null) && (this.GetPropName() !== "")) {
        Result = o.GetNamePath() + "." + this.GetPropName()}
       else Result = this.$classname;
      return Result;
    };
    this.Insert = function (Index) {
      var Result = null;
      Result = this.Add();
      Result.SetIndex(Index);
      return Result;
    };
    this.FindItemID = function (ID) {
      var Result = null;
      var I = 0;
      for (var $l1 = 0, $end2 = this.FItems.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        Result = rtl.getObject(this.FItems.Get(I));
        if (Result.FID === ID) return Result;
      };
      Result = null;
      return Result;
    };
    this.Exchange = function (Index1, index2) {
      this.FItems.Exchange(Index1,index2);
    };
    this.Sort = function (Compare) {
      this.BeginUpdate();
      try {
        this.FItems.Sort(Compare);
      } finally {
        this.EndUpdate();
      };
    };
  });
  rtl.createClass($mod,"TOwnedCollection",$mod.TCollection,function () {
    this.$init = function () {
      $mod.TCollection.$init.call(this);
      this.FOwner = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      $mod.TCollection.$final.call(this);
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner;
      return Result;
    };
    this.Create$2 = function (AOwner, AItemClass) {
      this.FOwner = AOwner;
      $mod.TCollection.Create$1.call(this,AItemClass);
      return this;
    };
  });
  $mod.$rtti.$Class("TComponent");
  this.TOperation = {"0": "opInsert", opInsert: 0, "1": "opRemove", opRemove: 1};
  $mod.$rtti.$Enum("TOperation",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TOperation});
  this.TComponentStateItem = {"0": "csLoading", csLoading: 0, "1": "csReading", csReading: 1, "2": "csWriting", csWriting: 2, "3": "csDestroying", csDestroying: 3, "4": "csDesigning", csDesigning: 4, "5": "csAncestor", csAncestor: 5, "6": "csUpdating", csUpdating: 6, "7": "csFixups", csFixups: 7, "8": "csFreeNotification", csFreeNotification: 8, "9": "csInline", csInline: 9, "10": "csDesignInstance", csDesignInstance: 10};
  $mod.$rtti.$Enum("TComponentStateItem",{minvalue: 0, maxvalue: 10, ordtype: 1, enumtype: this.TComponentStateItem});
  $mod.$rtti.$Set("TComponentState",{comptype: $mod.$rtti["TComponentStateItem"]});
  this.TComponentStyleItem = {"0": "csInheritable", csInheritable: 0, "1": "csCheckPropAvail", csCheckPropAvail: 1, "2": "csSubComponent", csSubComponent: 2, "3": "csTransient", csTransient: 3};
  $mod.$rtti.$Enum("TComponentStyleItem",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TComponentStyleItem});
  $mod.$rtti.$Set("TComponentStyle",{comptype: $mod.$rtti["TComponentStyleItem"]});
  $mod.$rtti.$MethodVar("TGetChildProc",{procsig: rtl.newTIProcSig([["Child",$mod.$rtti["TComponent"]]]), methodkind: 0});
  rtl.createClass($mod,"TComponentEnumerator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FComponent = null;
      this.FPosition = 0;
    };
    this.$final = function () {
      this.FComponent = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AComponent) {
      pas.System.TObject.Create.call(this);
      this.FComponent = AComponent;
      this.FPosition = -1;
      return this;
    };
    this.GetCurrent = function () {
      var Result = null;
      Result = this.FComponent.GetComponent(this.FPosition);
      return Result;
    };
    this.MoveNext = function () {
      var Result = false;
      this.FPosition += 1;
      Result = this.FPosition < this.FComponent.GetComponentCount();
      return Result;
    };
  });
  rtl.createClass($mod,"TComponent",$mod.TInterfacedPersistent,function () {
    this.$init = function () {
      $mod.TInterfacedPersistent.$init.call(this);
      this.FOwner = null;
      this.FName = "";
      this.FTag = 0;
      this.FComponents = null;
      this.FFreeNotifies = null;
      this.FDesignInfo = 0;
      this.FComponentState = {};
      this.FComponentStyle = {};
      this.FLeft = 0;
      this.FTop = 0;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FComponents = undefined;
      this.FFreeNotifies = undefined;
      this.FComponentState = undefined;
      this.FComponentStyle = undefined;
      $mod.TInterfacedPersistent.$final.call(this);
    };
    this.GetComponent = function (AIndex) {
      var Result = null;
      if (!(this.FComponents != null)) {
        Result = null}
       else Result = rtl.getObject(this.FComponents.Get(AIndex));
      return Result;
    };
    this.GetComponentCount = function () {
      var Result = 0;
      if (!(this.FComponents != null)) {
        Result = 0}
       else Result = this.FComponents.FCount;
      return Result;
    };
    this.GetComponentIndex = function () {
      var Result = 0;
      if ((this.FOwner != null) && (this.FOwner.FComponents != null)) {
        Result = this.FOwner.FComponents.IndexOf(this)}
       else Result = -1;
      return Result;
    };
    this.Insert = function (AComponent) {
      if (!(this.FComponents != null)) this.FComponents = $mod.TFPList.$create("Create");
      this.FComponents.Add(AComponent);
      AComponent.FOwner = this;
    };
    this.Remove = function (AComponent) {
      AComponent.FOwner = null;
      if (this.FComponents != null) {
        this.FComponents.Remove(AComponent);
        if (this.FComponents.FCount === 0) {
          this.FComponents.$destroy("Destroy");
          this.FComponents = null;
        };
      };
    };
    this.RemoveNotification = function (AComponent) {
      if (this.FFreeNotifies !== null) {
        this.FFreeNotifies.Remove(AComponent);
        if (this.FFreeNotifies.FCount === 0) {
          this.FFreeNotifies.$destroy("Destroy");
          this.FFreeNotifies = null;
          this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csFreeNotification);
        };
      };
    };
    this.SetComponentIndex = function (Value) {
      var Temp = 0;
      var Count = 0;
      if (!(this.FOwner != null)) return;
      Temp = this.GetComponentIndex();
      if (Temp < 0) return;
      if (Value < 0) Value = 0;
      Count = this.FOwner.FComponents.FCount;
      if (Value >= Count) Value = Count - 1;
      if (Value !== Temp) {
        this.FOwner.FComponents.Delete(Temp);
        this.FOwner.FComponents.Insert(Value,this);
      };
    };
    this.ChangeName = function (NewName) {
      this.FName = NewName;
    };
    this.GetChildren = function (Proc, Root) {
      if (Proc === null) ;
      if (Root === null) ;
    };
    this.GetChildOwner = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.GetChildParent = function () {
      var Result = null;
      Result = this;
      return Result;
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner;
      return Result;
    };
    this.GetLeft = function () {
      var Result = 0;
      Result = this.FLeft;
      return Result;
    };
    this.GetTop = function () {
      var Result = 0;
      Result = this.FTop;
      return Result;
    };
    this.Loaded = function () {
      this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csLoading);
    };
    this.Loading = function () {
      this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csLoading);
    };
    this.Notification = function (AComponent, Operation) {
      var C = 0;
      if (Operation === $mod.TOperation.opRemove) this.RemoveFreeNotification(AComponent);
      if (!(this.FComponents != null)) return;
      C = this.FComponents.FCount - 1;
      while (C >= 0) {
        rtl.getObject(this.FComponents.Get(C)).Notification(AComponent,Operation);
        C -= 1;
        if (C >= this.FComponents.FCount) C = this.FComponents.FCount - 1;
      };
    };
    this.PaletteCreated = function () {
    };
    this.SetAncestor = function (Value) {
      var Runner = 0;
      if (Value) {
        this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csAncestor)}
       else this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csAncestor);
      if (this.FComponents != null) for (var $l1 = 0, $end2 = this.FComponents.FCount - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        rtl.getObject(this.FComponents.Get(Runner)).SetAncestor(Value);
      };
    };
    this.SetDesigning = function (Value, SetChildren) {
      var Runner = 0;
      if (Value) {
        this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csDesigning)}
       else this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csDesigning);
      if ((this.FComponents != null) && SetChildren) for (var $l1 = 0, $end2 = this.FComponents.FCount - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        rtl.getObject(this.FComponents.Get(Runner)).SetDesigning(Value,true);
      };
    };
    this.SetDesignInstance = function (Value) {
      if (Value) {
        this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csDesignInstance)}
       else this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csDesignInstance);
    };
    this.SetInline = function (Value) {
      if (Value) {
        this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csInline)}
       else this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csInline);
    };
    this.SetName = function (NewName) {
      if (this.FName === NewName) return;
      if ((NewName !== "") && !pas.SysUtils.IsValidIdent(NewName,false,false)) throw $mod.EComponentError.$create("CreateFmt",[pas.RTLConsts.SInvalidName,[NewName]]);
      if (this.FOwner != null) {
        this.FOwner.ValidateRename(this,this.FName,NewName)}
       else this.ValidateRename(null,this.FName,NewName);
      this.ChangeName(NewName);
    };
    this.SetChildOrder = function (Child, Order) {
      if (Child === null) ;
      if (Order === 0) ;
    };
    this.SetLeft = function (AValue) {
      this.FLeft = AValue;
    };
    this.SetTop = function (AValue) {
      this.FTop = AValue;
    };
    this.Updating = function () {
      this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csUpdating);
    };
    this.Updated = function () {
      this.FComponentState = rtl.excludeSet(this.FComponentState,$mod.TComponentStateItem.csUpdating);
    };
    this.ValidateRename = function (AComponent, CurName, NewName) {
      if ((AComponent !== null) && (pas.SysUtils.CompareText(CurName,NewName) !== 0) && (AComponent.FOwner === this) && (this.FindComponent(NewName) !== null)) throw $mod.EComponentError.$create("CreateFmt",[pas.RTLConsts.SDuplicateName,[NewName]]);
      if (($mod.TComponentStateItem.csDesigning in this.FComponentState) && (this.FOwner !== null)) this.FOwner.ValidateRename(AComponent,CurName,NewName);
    };
    this.ValidateContainer = function (AComponent) {
      AComponent.ValidateInsert(this);
    };
    this.ValidateInsert = function (AComponent) {
      if (AComponent === null) ;
    };
    this.Create$1 = function (AOwner) {
      this.FComponentStyle = rtl.createSet($mod.TComponentStyleItem.csInheritable);
      if (AOwner != null) AOwner.InsertComponent(this);
      return this;
    };
    this.Destroy = function () {
      var I = 0;
      var C = null;
      this.Destroying();
      if (this.FFreeNotifies != null) {
        I = this.FFreeNotifies.FCount - 1;
        while (I >= 0) {
          C = rtl.getObject(this.FFreeNotifies.Get(I));
          this.FFreeNotifies.Delete(I);
          C.Notification(this,$mod.TOperation.opRemove);
          if (this.FFreeNotifies === null) {
            I = 0}
           else if (I > this.FFreeNotifies.FCount) I = this.FFreeNotifies.FCount;
          I -= 1;
        };
        pas.SysUtils.FreeAndNil({p: this, get: function () {
            return this.p.FFreeNotifies;
          }, set: function (v) {
            this.p.FFreeNotifies = v;
          }});
      };
      this.DestroyComponents();
      if (this.FOwner !== null) this.FOwner.RemoveComponent(this);
      pas.System.TObject.Destroy.call(this);
    };
    this.BeforeDestruction = function () {
      if (!($mod.TComponentStateItem.csDestroying in this.FComponentState)) this.Destroying();
    };
    this.DestroyComponents = function () {
      var acomponent = null;
      while (this.FComponents != null) {
        acomponent = rtl.getObject(this.FComponents.Last());
        this.Remove(acomponent);
        acomponent.$destroy("Destroy");
      };
    };
    this.Destroying = function () {
      var Runner = 0;
      if ($mod.TComponentStateItem.csDestroying in this.FComponentState) return;
      this.FComponentState = rtl.includeSet(this.FComponentState,$mod.TComponentStateItem.csDestroying);
      if (this.FComponents != null) for (var $l1 = 0, $end2 = this.FComponents.FCount - 1; $l1 <= $end2; $l1++) {
        Runner = $l1;
        rtl.getObject(this.FComponents.Get(Runner)).Destroying();
      };
    };
    this.AfterLoadDFMValues = function () {
      this.EndUpdate();
    };
    this.BeforeLoadDFMValues = function () {
      this.BeginUpdate();
    };
    this.BeginUpdate = function () {
    };
    this.EndUpdate = function () {
    };
    this.FindComponent = function (AName) {
      var Result = null;
      var I = 0;
      Result = null;
      if ((AName === "") || !(this.FComponents != null)) return Result;
      for (var $l1 = 0, $end2 = this.FComponents.FCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (pas.SysUtils.CompareText(rtl.getObject(this.FComponents.Get(I)).FName,AName) === 0) {
          Result = rtl.getObject(this.FComponents.Get(I));
          return Result;
        };
      };
      return Result;
    };
    this.FreeNotification = function (AComponent) {
      if ((this.FOwner !== null) && (AComponent === this.FOwner)) return;
      if (!(this.FFreeNotifies != null)) this.FFreeNotifies = $mod.TFPList.$create("Create");
      if (this.FFreeNotifies.IndexOf(AComponent) === -1) {
        this.FFreeNotifies.Add(AComponent);
        AComponent.FreeNotification(this);
      };
    };
    this.RemoveFreeNotification = function (AComponent) {
      this.RemoveNotification(AComponent);
      AComponent.RemoveNotification(this);
    };
    this.GetNamePath = function () {
      var Result = "";
      Result = this.FName;
      return Result;
    };
    this.GetParentComponent = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.HasParent = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.InsertComponent = function (AComponent) {
      AComponent.ValidateContainer(this);
      this.ValidateRename(AComponent,"",AComponent.FName);
      this.Insert(AComponent);
      if ($mod.TComponentStateItem.csDesigning in this.FComponentState) AComponent.SetDesigning(true,true);
      this.Notification(AComponent,$mod.TOperation.opInsert);
    };
    this.RemoveComponent = function (AComponent) {
      this.Notification(AComponent,$mod.TOperation.opRemove);
      this.Remove(AComponent);
      AComponent.SetDesigning(false,true);
      this.ValidateRename(AComponent,AComponent.FName,"");
    };
    this.SetParentComponent = function (Value) {
      if (Value === null) ;
    };
    this.SetSubComponent = function (ASubComponent) {
      if (ASubComponent) {
        this.FComponentStyle = rtl.includeSet(this.FComponentStyle,$mod.TComponentStyleItem.csSubComponent)}
       else this.FComponentStyle = rtl.excludeSet(this.FComponentStyle,$mod.TComponentStyleItem.csSubComponent);
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $mod.TComponentEnumerator.$create("Create$1",[this]);
      return Result;
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Name",6,rtl.string,"FName","SetName");
    $r.addProperty("Tag",0,rtl.nativeint,"FTag","FTag");
  });
  $mod.$rtti.$ClassRef("TComponentClass",{instancetype: $mod.$rtti["TComponent"]});
  this.TSeekOrigin = {"0": "soBeginning", soBeginning: 0, "1": "soCurrent", soCurrent: 1, "2": "soEnd", soEnd: 2};
  $mod.$rtti.$Enum("TSeekOrigin",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TSeekOrigin});
  this.RegisterClass = function (AClass) {
    $impl.ClassList[AClass.$classname] = AClass;
  };
  this.RegisterClasses = function (AClasses) {
    var I = 0;
    for (var $l1 = 0, $end2 = rtl.length(AClasses) - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      $mod.RegisterClass(AClasses[I]);
    };
  };
  this.GetClass = function (AClassName) {
    var Result = null;
    Result = null;
    if (AClassName === "") return Result;
    Result = rtl.getObject($impl.ClassList[AClassName]);
    return Result;
  };
  $mod.$init = function () {
    $impl.ClassList = Object.create(null);
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.QuickSort = function (aList, L, R, Compare) {
    var I = 0;
    var J = 0;
    var P = undefined;
    var Q = undefined;
    do {
      I = L;
      J = R;
      P = aList[Math.floor((L + R) / 2)];
      do {
        while (Compare(P,aList[I]) > 0) I = I + 1;
        while (Compare(P,aList[J]) < 0) J = J - 1;
        if (I <= J) {
          Q = aList[I];
          aList[I] = aList[J];
          aList[J] = Q;
          I = I + 1;
          J = J - 1;
        };
      } while (!(I > J));
      if ((J - L) < (R - I)) {
        if (L < J) $impl.QuickSort(aList,L,J,Compare);
        L = I;
      } else {
        if (I < R) $impl.QuickSort(aList,I,R,Compare);
        R = J;
      };
    } while (!(L >= R));
  };
  $impl.StringListAnsiCompare = function (List, Index1, Index) {
    var Result = 0;
    Result = List.DoCompareText(List.FList[Index1].FString,List.FList[Index].FString);
    return Result;
  };
  $impl.ClassList = null;
});
rtl.module("Math",["System","SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.MinInteger = -0xfffffffffffff - 1;
  this.MaxInteger = 0xfffffffffffff;
  this.MinDouble = 5.0e-324;
  this.MaxDouble = 1.7e+308;
  this.InRange = function (AValue, AMin, AMax) {
    return (AValue >= AMin) && (AValue <= AMax);
  };
  this.InRange$1 = function (AValue, AMin, AMax) {
    return (AValue >= AMin) && (AValue <= AMax);
  };
  this.EnsureRange = function (AValue, AMin, AMax) {
    if (AValue<AMin){ return AMin;
    } else if (AValue>AMax){ return AMax;
    } else return AValue;
  };
  this.EnsureRange$1 = function (AValue, AMin, AMax) {
    if (AValue<AMin){ return AMin;
    } else if (AValue>AMax){ return AMax;
    } else return AValue;
  };
  $mod.$rtti.$Int("TRoundToRange",{minvalue: -37, maxvalue: 37, ordtype: 0});
  this.RoundTo = function (AValue, Digits) {
    var Result = 0.0;
    var RV = 0.0;
    RV = $mod.IntPower(10,Digits);
    Result = Math.round(AValue / RV) * RV;
    return Result;
  };
  this.SimpleRoundTo = function (AValue, Digits) {
    var Result = 0.0;
    var RV = 0.0;
    RV = $mod.IntPower(10,-Digits);
    if (AValue < 0) {
      Result = pas.System.Int((AValue * RV) - 0.5) / RV}
     else Result = pas.System.Int((AValue * RV) + 0.5) / RV;
    return Result;
  };
  this.randg = function (mean, stddev) {
    var Result = 0.0;
    var U1 = 0.0;
    var S2 = 0.0;
    do {
      U1 = (2 * Math.random()) - 1;
      S2 = pas.System.Sqr$1(U1) + pas.System.Sqr$1((2 * Math.random()) - 1);
    } while (!(S2 < 1));
    Result = (Math.sqrt((-2 * Math.log(S2)) / S2) * U1 * stddev) + mean;
    return Result;
  };
  this.RandomRange = function (aFrom, aTo) {
    var Result = 0;
    Result = pas.System.Random(Math.abs(aFrom - aTo)) + Math.min(aTo,aFrom);
    return Result;
  };
  this.RandomRange$1 = function (aFrom, aTo) {
    var Result = 0;
    var m = 0;
    if (aFrom < aTo) {
      m = aFrom}
     else m = aTo;
    Result = pas.System.Random(Math.abs(aFrom - aTo)) + m;
    return Result;
  };
  this.NegativeValue = -1;
  this.ZeroValue = 0;
  this.PositiveValue = 1;
  this.IsZero = function (d, Epsilon) {
    var Result = false;
    if (Epsilon === 0) Epsilon = 1E-12;
    Result = Math.abs(d) <= Epsilon;
    return Result;
  };
  this.IsZero$1 = function (d) {
    var Result = false;
    Result = Math.abs(d) <= 1E-12;
    return Result;
  };
  this.IsInfinite = function (d) {
    return (d==Infinity) || (d==-Infinity);
  };
  this.SameValue = function (A, B, Epsilon) {
    var Result = false;
    if (Epsilon === 0.0) Epsilon = Math.max(Math.min(Math.abs(A),Math.abs(B)) * 1E-12,1E-12);
    if (A > B) {
      Result = (A - B) <= Epsilon}
     else Result = (B - A) <= Epsilon;
    return Result;
  };
  this.LogN = function (A, Base) {
    var Result = 0.0;
    Result = Math.log(A) / Math.log(Base);
    return Result;
  };
  this.Ceil = function (A) {
    var Result = 0;
    Result = pas.System.Trunc(Math.ceil(A));
    return Result;
  };
  this.Floor = function (A) {
    var Result = 0;
    Result = pas.System.Trunc(Math.floor(A));
    return Result;
  };
  this.Ceil64 = function (A) {
    var Result = 0;
    Result = pas.System.Trunc(Math.ceil(A));
    return Result;
  };
  this.Floor64 = function (A) {
    var Result = 0;
    Result = pas.System.Trunc(Math.ceil(A));
    return Result;
  };
  this.ldexp = function (x, p) {
    var Result = 0.0;
    Result = x * $mod.IntPower(2.0,p);
    return Result;
  };
  this.Frexp = function (X, Mantissa, Exponent) {
    Exponent.set(0);
    if (X !== 0) if (Math.abs(X) < 0.5) {
      do {
        X = X * 2;
        Exponent.set(Exponent.get() - 1);
      } while (!(Math.abs(X) >= 0.5))}
     else while (Math.abs(X) >= 1) {
      X = X / 2;
      Exponent.set(Exponent.get() + 1);
    };
    Mantissa.set(X);
  };
  this.lnxp1 = function (x) {
    var Result = 0.0;
    var y = 0.0;
    if (x >= 4.0) {
      Result = Math.log(1.0 + x)}
     else {
      y = 1.0 + x;
      if (y === 1.0) {
        Result = x}
       else {
        Result = Math.log(y);
        if (y > 0.0) Result = Result + ((x - (y - 1.0)) / y);
      };
    };
    return Result;
  };
  this.IntPower = function (base, exponent) {
    var Result = 0.0;
    var i = 0;
    if ((base === 0.0) && (exponent === 0)) {
      Result = 1}
     else {
      i = Math.abs(exponent);
      Result = 1.0;
      while (i > 0) {
        while ((i & 1) === 0) {
          i = i >>> 1;
          base = pas.System.Sqr$1(base);
        };
        i = i - 1;
        Result = Result * base;
      };
      if (exponent < 0) Result = 1.0 / Result;
    };
    return Result;
  };
  this.DivMod = function (Dividend, Divisor, Result, Remainder) {
    if (Dividend < 0) {
      Dividend = -Dividend;
      Result.set(-Math.floor(Dividend / Divisor));
      Remainder.set(-(Dividend + (Result.get() * Divisor)));
    } else {
      Result.set(Math.floor(Dividend / Divisor));
      Remainder.set(Dividend - (Result.get() * Divisor));
    };
  };
  this.DivMod$1 = function (Dividend, Divisor, Result, Remainder) {
    if (Dividend < 0) {
      Dividend = -Dividend;
      Result.set(-Math.floor(Dividend / Divisor));
      Remainder.set(-(Dividend + (Result.get() * Divisor)));
    } else {
      Result.set(Math.floor(Dividend / Divisor));
      Remainder.set(Dividend - (Result.get() * Divisor));
    };
  };
  this.DivMod$2 = function (Dividend, Divisor, Result, Remainder) {
    Result.set(Math.floor(Dividend / Divisor));
    Remainder.set(Dividend - (Result.get() * Divisor));
  };
  this.DivMod$3 = function (Dividend, Divisor, Result, Remainder) {
    if (Dividend < 0) {
      Dividend = -Dividend;
      Result.set(-Math.floor(Dividend / Divisor));
      Remainder.set(-(Dividend + (Result.get() * Divisor)));
    } else {
      Result.set(Math.floor(Dividend / Divisor));
      Remainder.set(Dividend - (Result.get() * Divisor));
    };
  };
  this.DegToRad = function (deg) {
    var Result = 0.0;
    Result = deg * (Math.PI / 180.0);
    return Result;
  };
  this.RadToDeg = function (rad) {
    var Result = 0.0;
    Result = rad * (180.0 / Math.PI);
    return Result;
  };
  this.GradToRad = function (grad) {
    var Result = 0.0;
    Result = grad * (Math.PI / 200.0);
    return Result;
  };
  this.RadToGrad = function (rad) {
    var Result = 0.0;
    Result = rad * (200.0 / Math.PI);
    return Result;
  };
  this.DegToGrad = function (deg) {
    var Result = 0.0;
    Result = deg * (200.0 / 180.0);
    return Result;
  };
  this.GradToDeg = function (grad) {
    var Result = 0.0;
    Result = grad * (180.0 / 200.0);
    return Result;
  };
  this.CycleToRad = function (cycle) {
    var Result = 0.0;
    Result = 2 * Math.PI * cycle;
    return Result;
  };
  this.RadToCycle = function (rad) {
    var Result = 0.0;
    Result = rad * (1 / (2 * Math.PI));
    return Result;
  };
  this.DegNormalize = function (deg) {
    var Result = 0.0;
    Result = deg - (pas.System.Int(deg / 360) * 360);
    if (Result < 0) Result = Result + 360;
    return Result;
  };
  this.Norm = function (data) {
    var Result = 0.0;
    Result = Math.sqrt($impl.sumofsquares(data));
    return Result;
  };
  this.Mean = function (data) {
    var Result = 0.0;
    var N = 0;
    N = rtl.length(data);
    if (N === 0) {
      Result = 0}
     else Result = $mod.Sum(data) / N;
    return Result;
  };
  this.Sum = function (data) {
    var Result = 0.0;
    var i = 0;
    var N = 0;
    N = rtl.length(data);
    Result = 0.0;
    for (var $l1 = 0, $end2 = N - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = Result + data[i];
    };
    return Result;
  };
  this.SumsAndSquares = function (data, Sum, SumOfSquares) {
    var i = 0;
    var n = 0;
    var t = 0.0;
    var s = 0.0;
    var ss = 0.0;
    n = rtl.length(data);
    ss = 0.0;
    s = 0.0;
    for (var $l1 = 0, $end2 = n - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      t = data[i];
      ss = ss + pas.System.Sqr$1(t);
      s = s + t;
    };
    Sum.set(s);
    SumOfSquares.set(ss);
  };
  this.StdDev = function (data) {
    var Result = 0.0;
    Result = Math.sqrt($mod.Variance(data));
    return Result;
  };
  this.MeanAndStdDev = function (data, Mean, StdDev) {
    var I = 0;
    var N = 0;
    var M = 0.0;
    var S = 0.0;
    N = rtl.length(data);
    M = 0;
    S = 0;
    for (var $l1 = 0, $end2 = N - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      M = M + data[I];
      S = S + pas.System.Sqr$1(data[I]);
    };
    M = M / N;
    S = S - (N * pas.System.Sqr$1(M));
    if (N > 1) {
      S = Math.sqrt(S / (N - 1))}
     else S = 0;
    Mean.set(M);
    StdDev.set(S);
  };
  this.Variance = function (data) {
    var Result = 0.0;
    var n = 0;
    n = rtl.length(data);
    if (n === 1) {
      Result = 0}
     else Result = $mod.TotalVariance(data) / (n - 1);
    return Result;
  };
  this.TotalVariance = function (data) {
    var Result = 0.0;
    var S = 0.0;
    var SS = 0.0;
    var N = 0;
    N = rtl.length(data);
    if (rtl.length(data) === 1) {
      Result = 0}
     else {
      $mod.SumsAndSquares(data,{get: function () {
          return S;
        }, set: function (v) {
          S = v;
        }},{get: function () {
          return SS;
        }, set: function (v) {
          SS = v;
        }});
      Result = SS - (pas.System.Sqr$1(S) / N);
    };
    return Result;
  };
  this.PopNStdDev = function (data) {
    var Result = 0.0;
    Result = Math.sqrt($mod.PopNVariance(data));
    return Result;
  };
  this.PopNVariance = function (data) {
    var Result = 0.0;
    var N = 0;
    N = rtl.length(data);
    if (N === 0) {
      Result = 0}
     else Result = $mod.TotalVariance(data) / N;
    return Result;
  };
  this.MomentSkewKurtosis = function (data, m1, m2, m3, m4, skew, kurtosis) {
    var i = 0;
    var N = 0;
    var deviation = 0.0;
    var deviation2 = 0.0;
    var reciprocalN = 0.0;
    var lm1 = 0.0;
    var lm2 = 0.0;
    var lm3 = 0.0;
    var lm4 = 0.0;
    var lskew = 0.0;
    var lkurtosis = 0.0;
    N = rtl.length(data);
    lm1 = 0;
    reciprocalN = 1 / N;
    for (var $l1 = 0, $end2 = N - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      lm1 = lm1 + data[i];
    };
    lm1 = reciprocalN * lm1;
    lm2 = 0;
    lm3 = 0;
    lm4 = 0;
    for (var $l3 = 0, $end4 = N - 1; $l3 <= $end4; $l3++) {
      i = $l3;
      deviation = data[i] - lm1;
      deviation2 = deviation * deviation;
      lm2 = lm2 + deviation2;
      lm3 = lm3 + (deviation2 * deviation);
      lm4 = lm4 + (deviation2 * deviation2);
    };
    lm2 = reciprocalN * lm2;
    lm3 = reciprocalN * lm3;
    lm4 = reciprocalN * lm4;
    lskew = lm3 / (Math.sqrt(lm2) * lm2);
    lkurtosis = lm4 / (lm2 * lm2);
    m1.set(lm1);
    m2.set(lm2);
    m3.set(lm3);
    m4.set(lm4);
    skew.set(lskew);
    kurtosis.set(lkurtosis);
  };
  this.TPaymentTime = {"0": "ptEndOfPeriod", ptEndOfPeriod: 0, "1": "ptStartOfPeriod", ptStartOfPeriod: 1};
  $mod.$rtti.$Enum("TPaymentTime",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TPaymentTime});
  this.FutureValue = function (ARate, NPeriods, APayment, APresentValue, APaymentTime) {
    var Result = 0.0;
    var q = 0.0;
    var qn = 0.0;
    var factor = 0.0;
    if (ARate === 0) {
      Result = -APresentValue - (APayment * NPeriods)}
     else {
      q = 1.0 + ARate;
      qn = Math.pow(q,NPeriods);
      factor = (qn - 1) / (q - 1);
      if (APaymentTime === $mod.TPaymentTime.ptStartOfPeriod) factor = factor * q;
      Result = -((APresentValue * qn) + (APayment * factor));
    };
    return Result;
  };
  var DELTA = 0.001;
  var EPS = 1E-9;
  var MAXIT = 20;
  this.InterestRate = function (NPeriods, APayment, APresentValue, AFutureValue, APaymentTime) {
    var Result = 0.0;
    var r1 = 0.0;
    var r2 = 0.0;
    var dr = 0.0;
    var fv1 = 0.0;
    var fv2 = 0.0;
    var iteration = 0;
    iteration = 0;
    r1 = 0.05;
    do {
      r2 = r1 + 0.001;
      fv1 = $mod.FutureValue(r1,NPeriods,APayment,APresentValue,APaymentTime);
      fv2 = $mod.FutureValue(r2,NPeriods,APayment,APresentValue,APaymentTime);
      dr = ((AFutureValue - fv1) / (fv2 - fv1)) * 0.001;
      r1 = r1 + dr;
      iteration += 1;
    } while (!((Math.abs(dr) < 1E-9) || (iteration >= 20)));
    Result = r1;
    return Result;
  };
  this.NumberOfPeriods = function (ARate, APayment, APresentValue, AFutureValue, APaymentTime) {
    var Result = 0.0;
    var q = 0.0;
    var x1 = 0.0;
    var x2 = 0.0;
    if (ARate === 0) {
      Result = -(APresentValue + AFutureValue) / APayment}
     else {
      q = 1.0 + ARate;
      if (APaymentTime === $mod.TPaymentTime.ptStartOfPeriod) APayment = APayment * q;
      x1 = APayment - (AFutureValue * ARate);
      x2 = APayment + (APresentValue * ARate);
      if ((x2 === 0) || ((Math.sign(x1) * Math.sign(x2)) < 0)) {
        Result = Infinity}
       else {
        Result = Math.log(x1 / x2) / Math.log(q);
      };
    };
    return Result;
  };
  this.Payment = function (ARate, NPeriods, APresentValue, AFutureValue, APaymentTime) {
    var Result = 0.0;
    var q = 0.0;
    var qn = 0.0;
    var factor = 0.0;
    if (ARate === 0) {
      Result = -(AFutureValue + APresentValue) / NPeriods}
     else {
      q = 1.0 + ARate;
      qn = Math.pow(q,NPeriods);
      factor = (qn - 1) / (q - 1);
      if (APaymentTime === $mod.TPaymentTime.ptStartOfPeriod) factor = factor * q;
      Result = -(AFutureValue + (APresentValue * qn)) / factor;
    };
    return Result;
  };
  this.PresentValue = function (ARate, NPeriods, APayment, AFutureValue, APaymentTime) {
    var Result = 0.0;
    var q = 0.0;
    var qn = 0.0;
    var factor = 0.0;
    if (ARate === 0.0) {
      Result = -AFutureValue - (APayment * NPeriods)}
     else {
      q = 1.0 + ARate;
      qn = Math.pow(q,NPeriods);
      factor = (qn - 1) / (q - 1);
      if (APaymentTime === $mod.TPaymentTime.ptStartOfPeriod) factor = factor * q;
      Result = -(AFutureValue + (APayment * factor)) / qn;
    };
    return Result;
  };
  this.IfThen = function (val, ifTrue, ifFalse) {
    var Result = 0;
    if (val) {
      Result = ifTrue}
     else Result = ifFalse;
    return Result;
  };
  this.IfThen$1 = function (val, ifTrue, ifFalse) {
    var Result = 0.0;
    if (val) {
      Result = ifTrue}
     else Result = ifFalse;
    return Result;
  };
  $mod.$rtti.$Int("TValueRelationship",{minvalue: -1, maxvalue: 1, ordtype: 0});
  this.EqualsValue = 0;
  this.LessThanValue = -1;
  this.GreaterThanValue = 1;
  this.CompareValue = function (A, B) {
    var Result = 0;
    Result = 1;
    if (A === B) {
      Result = 0}
     else if (A < B) Result = -1;
    return Result;
  };
  this.CompareValue$1 = function (A, B) {
    var Result = 0;
    Result = 1;
    if (A === B) {
      Result = 0}
     else if (A < B) Result = -1;
    return Result;
  };
  this.CompareValue$2 = function (A, B) {
    var Result = 0;
    Result = 1;
    if (A === B) {
      Result = 0}
     else if (A < B) Result = -1;
    return Result;
  };
  this.CompareValue$3 = function (A, B, delta) {
    var Result = 0;
    Result = 1;
    if (Math.abs(A - B) <= delta) {
      Result = 0}
     else if (A < B) Result = -1;
    return Result;
  };
  this.MinValue = function (Data) {
    var Result = 0.0;
    var I = 0;
    Result = Data[0];
    for (var $l1 = 1, $end2 = rtl.length(Data) - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      if (Result > Data[I]) Result = Data[I];
    };
    return Result;
  };
  this.MaxValue = function (Data) {
    var Result = 0.0;
    var I = 0;
    Result = Data[0];
    for (var $l1 = 1, $end2 = rtl.length(Data) - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      if (Result < Data[I]) Result = Data[I];
    };
    return Result;
  };
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.DZeroResolution = 1E-12;
  $impl.sumofsquares = function (data) {
    var Result = 0.0;
    var i = 0;
    var N = 0;
    N = rtl.length(data);
    Result = 0.0;
    for (var $l1 = 0, $end2 = N - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = Result + pas.System.Sqr$1(data[i]);
    };
    return Result;
  };
});
rtl.module("contnrs",["System","SysUtils","Classes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$RefToProcVar("TObjectListCallback",{procsig: rtl.newTIProcSig([["data",pas.System.$rtti["TObject"]],["arg",rtl.jsvalue]])});
  rtl.createClass($mod,"TFPObjectList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FFreeObjects = false;
      this.FList = null;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FList.FCount;
      return Result;
    };
    this.SetCount = function (AValue) {
      if (this.FList.FCount !== AValue) this.FList.SetCount(AValue);
    };
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.FList.Get(Index));
      return Result;
    };
    this.SetItem = function (Index, AObject) {
      var O = null;
      if (this.FFreeObjects) {
        O = rtl.getObject(this.FList.Get(Index));
        this.FList.Put(Index,AObject);
        O = rtl.freeLoc(O);
      } else this.FList.Put(Index,AObject);
    };
    this.SetCapacity = function (NewCapacity) {
      this.FList.SetCapacity(NewCapacity);
    };
    this.GetCapacity = function () {
      var Result = 0;
      Result = this.FList.FCapacity;
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FList = pas.Classes.TFPList.$create("Create");
      this.FFreeObjects = true;
      return this;
    };
    this.Create$2 = function (FreeObjects) {
      this.Create$1();
      this.FFreeObjects = FreeObjects;
      return this;
    };
    this.Destroy = function () {
      if (this.FList !== null) {
        this.Clear();
        this.FList.$destroy("Destroy");
      };
      pas.System.TObject.Destroy.call(this);
    };
    this.Clear = function () {
      var i = 0;
      var O = null;
      if (this.FFreeObjects) for (var $l1 = this.FList.FCount - 1; $l1 >= 0; $l1--) {
        i = $l1;
        O = rtl.getObject(this.FList.Get(i));
        this.FList.Put(i,null);
        O = rtl.freeLoc(O);
      };
      this.FList.Clear();
    };
    this.Add = function (AObject) {
      var Result = 0;
      Result = this.FList.Add(AObject);
      return Result;
    };
    this.Delete = function (Index) {
      var O = null;
      if (this.FFreeObjects) {
        O = rtl.getObject(this.FList.Get(Index));
        this.FList.Put(Index,null);
        O = rtl.freeLoc(O);
      };
      this.FList.Delete(Index);
    };
    this.Exchange = function (Index1, Index2) {
      this.FList.Exchange(Index1,Index2);
    };
    this.Expand = function () {
      var Result = null;
      this.FList.Expand();
      Result = this;
      return Result;
    };
    this.Extract = function (Item) {
      var Result = null;
      Result = rtl.getObject(this.FList.Extract(Item));
      return Result;
    };
    this.Remove = function (AObject) {
      var Result = 0;
      var O = null;
      Result = this.IndexOf(AObject);
      if (Result !== -1) {
        if (this.FFreeObjects) {
          O = rtl.getObject(this.FList.Get(Result));
          this.FList.Put(Result,null);
          O = rtl.freeLoc(O);
        };
        this.FList.Delete(Result);
      };
      return Result;
    };
    this.IndexOf = function (AObject) {
      var Result = 0;
      Result = this.FList.IndexOf(AObject);
      return Result;
    };
    this.FindInstanceOf = function (AClass, AExact, AStartAt) {
      var Result = 0;
      var I = 0;
      I = AStartAt;
      Result = -1;
      if (AExact) {
        while ((I < this.GetCount()) && (Result === -1)) if (this.GetItem(I).$class.ClassType() === AClass) {
          Result = I}
         else I += 1}
       else while ((I < this.GetCount()) && (Result === -1)) if (this.GetItem(I).$class.InheritsFrom(AClass)) {
        Result = I}
       else I += 1;
      return Result;
    };
    this.Insert = function (Index, AObject) {
      this.FList.Insert(Index,AObject);
    };
    this.First = function () {
      var Result = null;
      Result = rtl.getObject(this.FList.First());
      return Result;
    };
    this.Last = function () {
      var Result = null;
      Result = rtl.getObject(this.FList.Last());
      return Result;
    };
    this.Move = function (CurIndex, NewIndex) {
      this.FList.Move(CurIndex,NewIndex);
    };
    this.Assign = function (Obj) {
      var i = 0;
      this.Clear();
      for (var $l1 = 0, $end2 = Obj.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.Add(Obj.GetItem(i));
      };
    };
    this.Pack = function () {
      this.FList.Pack();
    };
    this.Sort = function (Compare) {
      this.FList.Sort(Compare);
    };
    this.ForEachCall = function (proc2call, arg) {
      this.FList.ForEachCall(proc2call,arg);
    };
  });
  rtl.createClass($mod,"TObjectList",pas.Classes.TList,function () {
    this.$init = function () {
      pas.Classes.TList.$init.call(this);
      this.FFreeObjects = false;
    };
    this.Notify = function (Ptr, Action) {
      var O = null;
      if (this.FFreeObjects) if (Action === pas.Classes.TListNotification.lnDeleted) {
        O = rtl.getObject(Ptr);
        O = rtl.freeLoc(O);
      };
      pas.Classes.TList.Notify.call(this,Ptr,Action);
    };
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.Get.call(this,Index));
      return Result;
    };
    this.SetItem = function (Index, AObject) {
      this.Put(Index,AObject);
    };
    this.Create$2 = function () {
      pas.Classes.TList.Create$1.call(this);
      this.FFreeObjects = true;
      return this;
    };
    this.Create$3 = function (FreeObjects) {
      pas.Classes.TList.Create$1.call(this);
      this.FFreeObjects = FreeObjects;
      return this;
    };
    this.Add$1 = function (AObject) {
      var Result = 0;
      Result = pas.Classes.TList.Add.call(this,AObject);
      return Result;
    };
    this.Extract$1 = function (Item) {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.Extract.call(this,Item));
      return Result;
    };
    this.Remove$1 = function (AObject) {
      var Result = 0;
      Result = pas.Classes.TList.Remove.call(this,AObject);
      return Result;
    };
    this.IndexOf$1 = function (AObject) {
      var Result = 0;
      Result = pas.Classes.TList.IndexOf.call(this,AObject);
      return Result;
    };
    this.FindInstanceOf = function (AClass, AExact, AStartAt) {
      var Result = 0;
      var I = 0;
      I = AStartAt;
      Result = -1;
      if (AExact) {
        while ((I < this.GetCount()) && (Result === -1)) if (this.GetItem(I).$class.ClassType() === AClass) {
          Result = I}
         else I += 1}
       else while ((I < this.GetCount()) && (Result === -1)) if (this.GetItem(I).$class.InheritsFrom(AClass)) {
        Result = I}
       else I += 1;
      return Result;
    };
    this.Insert$1 = function (Index, AObject) {
      pas.Classes.TList.Insert.call(this,Index,AObject);
    };
    this.First$1 = function () {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.First.call(this));
      return Result;
    };
    this.Last$1 = function () {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.Last.call(this));
      return Result;
    };
  });
  rtl.createClass($mod,"TComponentList",$mod.TObjectList,function () {
    this.$init = function () {
      $mod.TObjectList.$init.call(this);
      this.FNotifier = null;
    };
    this.$final = function () {
      this.FNotifier = undefined;
      $mod.TObjectList.$final.call(this);
    };
    this.Notify = function (Ptr, Action) {
      if (this.FNotifier === null) {
        this.FNotifier = $impl.TlistComponent.$create("Create$1",[null]);
        this.FNotifier.Flist = this;
      };
      if (pas.System.Assigned(Ptr)) {
        var $with1 = rtl.getObject(Ptr);
        var $tmp2 = Action;
        if ($tmp2 === pas.Classes.TListNotification.lnAdded) {
          $with1.FreeNotification(this.FNotifier)}
         else if (($tmp2 === pas.Classes.TListNotification.lnExtracted) || ($tmp2 === pas.Classes.TListNotification.lnDeleted)) $with1.RemoveFreeNotification(this.FNotifier);
      };
      $mod.TObjectList.Notify.call(this,Ptr,Action);
    };
    this.GetItems = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItems = function (Index, AComponent) {
      this.Put(Index,AComponent);
    };
    this.HandleFreeNotify = function (Sender, AComponent) {
      this.Extract$2(AComponent);
      if (Sender === null) ;
    };
    this.Destroy = function () {
      pas.Classes.TList.Destroy.call(this);
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FNotifier;
        }, set: function (v) {
          this.p.FNotifier = v;
        }});
    };
    this.Add$2 = function (AComponent) {
      var Result = 0;
      Result = $mod.TObjectList.Add$1.call(this,AComponent);
      return Result;
    };
    this.Extract$2 = function (Item) {
      var Result = null;
      Result = $mod.TObjectList.Extract$1.call(this,Item);
      return Result;
    };
    this.Remove$2 = function (AComponent) {
      var Result = 0;
      Result = $mod.TObjectList.Remove$1.call(this,AComponent);
      return Result;
    };
    this.IndexOf$2 = function (AComponent) {
      var Result = 0;
      Result = $mod.TObjectList.IndexOf$1.call(this,AComponent);
      return Result;
    };
    this.First$2 = function () {
      var Result = null;
      Result = $mod.TObjectList.First$1.call(this);
      return Result;
    };
    this.Last$2 = function () {
      var Result = null;
      Result = $mod.TObjectList.Last$1.call(this);
      return Result;
    };
    this.Insert$2 = function (Index, AComponent) {
      $mod.TObjectList.Insert$1.call(this,Index,AComponent);
    };
  });
  rtl.createClass($mod,"TClassList",pas.Classes.TList,function () {
    this.GetItems = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.Get(Index));
      return Result;
    };
    this.SetItems = function (Index, AClass) {
      this.Put(Index,AClass);
    };
    this.Add$1 = function (AClass) {
      var Result = 0;
      Result = pas.Classes.TList.Add.call(this,AClass);
      return Result;
    };
    this.Extract$1 = function (Item) {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.Extract.call(this,Item));
      return Result;
    };
    this.Remove$1 = function (AClass) {
      var Result = 0;
      Result = pas.Classes.TList.Remove.call(this,AClass);
      return Result;
    };
    this.IndexOf$1 = function (AClass) {
      var Result = 0;
      Result = pas.Classes.TList.IndexOf.call(this,AClass);
      return Result;
    };
    this.First$1 = function () {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.First.call(this));
      return Result;
    };
    this.Last$1 = function () {
      var Result = null;
      Result = rtl.getObject(pas.Classes.TList.Last.call(this));
      return Result;
    };
    this.Insert$1 = function (Index, AClass) {
      pas.Classes.TList.Insert.call(this,Index,AClass);
    };
  });
  rtl.createClass($mod,"TOrderedList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FList = null;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.PopItem = function () {
      var Result = undefined;
      var $with1 = this.FList;
      if ($with1.GetCount() > 0) {
        Result = $with1.Get($with1.GetCount() - 1);
        $with1.Delete($with1.GetCount() - 1);
      } else Result = null;
      return Result;
    };
    this.PeekItem = function () {
      var Result = undefined;
      var $with1 = this.FList;
      Result = $with1.Get($with1.GetCount() - 1);
      return Result;
    };
    this.Create$1 = function () {
      this.FList = pas.Classes.TList.$create("Create$1");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FList");
    };
    this.Count = function () {
      var Result = 0;
      Result = this.FList.GetCount();
      return Result;
    };
    this.AtLeast = function (ACount) {
      var Result = false;
      Result = this.FList.GetCount() >= ACount;
      return Result;
    };
    this.Push = function (AItem) {
      var Result = undefined;
      this.PushItem(AItem);
      Result = AItem;
      return Result;
    };
    this.Pop = function () {
      var Result = undefined;
      if (this.AtLeast(1)) {
        Result = this.PopItem()}
       else Result = null;
      return Result;
    };
    this.Peek = function () {
      var Result = undefined;
      if (this.AtLeast(1)) {
        Result = this.PeekItem()}
       else Result = null;
      return Result;
    };
  });
  rtl.createClass($mod,"TStack",$mod.TOrderedList,function () {
    this.PushItem = function (AItem) {
      this.FList.Add(AItem);
    };
  });
  rtl.createClass($mod,"TObjectStack",$mod.TStack,function () {
    this.Push$1 = function (AObject) {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Push.call(this,AObject));
      return Result;
    };
    this.Pop$1 = function () {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Pop.call(this));
      return Result;
    };
    this.Peek$1 = function () {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Peek.call(this));
      return Result;
    };
  });
  rtl.createClass($mod,"TQueue",$mod.TOrderedList,function () {
    this.PushItem = function (AItem) {
      var $with1 = this.FList;
      $with1.Insert(0,AItem);
    };
  });
  rtl.createClass($mod,"TObjectQueue",$mod.TQueue,function () {
    this.Push$1 = function (AObject) {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Push.call(this,AObject));
      return Result;
    };
    this.Pop$1 = function () {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Pop.call(this));
      return Result;
    };
    this.Peek$1 = function () {
      var Result = null;
      Result = rtl.getObject($mod.TOrderedList.Peek.call(this));
      return Result;
    };
  });
  $mod.$rtti.$ProcVar("THashFunction",{procsig: rtl.newTIProcSig([["S",rtl.string,2],["TableSize",rtl.longword,2]],rtl.longword)});
  rtl.createClass($mod,"THTCustomNode",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FKey = "";
    };
    this.CreateWith = function (AString) {
      pas.System.TObject.Create.call(this);
      this.FKey = AString;
      return this;
    };
    this.HasKey = function (AKey) {
      var Result = false;
      Result = AKey === this.FKey;
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("THTCustomNodeClass",{instancetype: $mod.$rtti["THTCustomNode"]});
  rtl.createClass($mod,"TFPCustomHashTable",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FHashTable = null;
      this.FHashFunction = null;
      this.FCount = 0;
      this.FHashTableSize = 0;
    };
    this.$final = function () {
      this.FHashTable = undefined;
      this.FHashFunction = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetDensity = function () {
      var Result = 0;
      Result = this.FHashTableSize - this.GetVoidSlots();
      return Result;
    };
    this.GetNumberOfCollisions = function () {
      var Result = 0;
      Result = this.FCount - (this.FHashTableSize - this.GetVoidSlots());
      return Result;
    };
    this.SetHashTableSize = function (Value) {
      var i = 0;
      var newSize = 0;
      if (Value !== this.FHashTableSize) {
        i = 0;
        while (($impl.PRIMELIST[i] < Value) && (i < 27)) i += 1;
        newSize = $impl.PRIMELIST[i];
        if (this.FCount === 0) {
          this.FHashTableSize = newSize;
          this.InitializeHashTable();
        } else this.ChangeTableSize(newSize);
      };
    };
    this.InitializeHashTable = function () {
      var i = 0;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.FHashTable.Add(null);
      };
      this.FCount = 0;
    };
    this.GetVoidSlots = function () {
      var Result = 0;
      var i = 0;
      var num = 0;
      num = 0;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (!(this.Chain(i) != null)) num += 1;
      };
      Result = num;
      return Result;
    };
    this.GetLoadFactor = function () {
      var Result = 0.0;
      Result = this.FCount / this.FHashTableSize;
      return Result;
    };
    this.GetAVGChainLen = function () {
      var Result = 0.0;
      Result = this.FCount / (this.FHashTableSize - this.GetVoidSlots());
      return Result;
    };
    this.GetMaxChainLength = function () {
      var Result = 0;
      var i = 0;
      Result = 0;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.ChainLength(i) > Result) Result = this.ChainLength(i);
      };
      return Result;
    };
    this.Chain = function (index) {
      var Result = null;
      Result = this.FHashTable.GetItem(index);
      return Result;
    };
    this.ChainLength = function (ChainIndex) {
      var Result = 0;
      if (this.Chain(ChainIndex) != null) {
        Result = this.Chain(ChainIndex).GetCount()}
       else Result = 0;
      return Result;
    };
    this.FindOrCreateNew = function (aKey) {
      var Result = null;
      var hashCode = 0;
      var chn = null;
      var i = 0;
      hashCode = this.FHashFunction(aKey,this.FHashTableSize);
      chn = this.Chain(hashCode);
      if (chn != null) {
        if (chn.GetCount() > 0) for (var $l1 = 0, $end2 = chn.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (chn.GetItem(i).FKey === aKey) return chn.GetItem(i);
        };
      } else {
        this.FHashTable.SetItem(hashCode,$mod.TFPObjectList.$create("Create$2",[true]));
        chn = this.Chain(hashCode);
      };
      this.FCount += 1;
      Result = this.CreateNewNode(aKey);
      chn.Add(Result);
      return Result;
    };
    this.SetHashFunction = function (AHashFunction) {
      if (this.IsEmpty()) {
        this.FHashFunction = AHashFunction}
       else throw pas.SysUtils.Exception.$create("Create$1",[rtl.getResStr(pas.contnrs,"NotEmptyMsg")]);
    };
    this.FindChainForAdd = function (aKey) {
      var Result = null;
      var hashCode = 0;
      var i = 0;
      hashCode = this.FHashFunction(aKey,this.FHashTableSize);
      Result = this.Chain(hashCode);
      if (Result != null) {
        if (Result.GetCount() > 0) for (var $l1 = 0, $end2 = Result.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (Result.GetItem(i).FKey === aKey) throw $mod.EDuplicate.$create("CreateFmt",[rtl.getResStr(pas.contnrs,"DuplicateMsg"),[aKey]]);
        };
      } else {
        this.FHashTable.SetItem(hashCode,$mod.TFPObjectList.$create("Create$2",[true]));
        Result = this.Chain(hashCode);
      };
      this.FCount += 1;
      return Result;
    };
    this.Create$1 = function () {
      this.CreateWith(196613,$mod.RSHash);
      return this;
    };
    this.CreateWith = function (AHashTableSize, aHashFunc) {
      pas.System.TObject.Create.call(this);
      this.FHashTable = $mod.TFPObjectList.$create("Create$2",[true]);
      this.SetHashTableSize(AHashTableSize);
      this.FHashFunction = aHashFunc;
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FHashTable");
      pas.System.TObject.Destroy.call(this);
    };
    this.ChangeTableSize = function (ANewSize) {
      var SavedTable = null;
      var List = null;
      var SavedTableSize = 0;
      var i = 0;
      var j = 0;
      var temp = null;
      SavedTable = this.FHashTable;
      SavedTableSize = this.FHashTableSize;
      this.FHashTableSize = ANewSize;
      this.FHashTable = $mod.TFPObjectList.$create("Create$2",[true]);
      this.InitializeHashTable();
      if (SavedTableSize > 0) for (var $l1 = 0, $end2 = SavedTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        List = SavedTable.GetItem(i);
        if (List != null) for (var $l3 = 0, $end4 = List.GetCount() - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          temp = List.GetItem(j);
          this.AddNode(temp);
        };
      };
      SavedTable = rtl.freeLoc(SavedTable);
    };
    this.Clear = function () {
      var i = 0;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.Chain(i) != null) this.Chain(i).Clear();
      };
      this.FCount = 0;
    };
    this.Delete = function (aKey) {
      var hashCode = 0;
      var chn = null;
      var i = 0;
      hashCode = this.FHashFunction(aKey,this.FHashTableSize);
      chn = this.Chain(hashCode);
      if (chn != null) if (chn.GetCount() > 0) for (var $l1 = 0, $end2 = chn.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (chn.GetItem(i).FKey === aKey) {
          chn.Delete(i);
          this.FCount -= 1;
          return;
        };
      };
    };
    this.Find = function (aKey) {
      var Result = null;
      var hashCode = 0;
      var chn = null;
      var i = 0;
      hashCode = this.FHashFunction(aKey,this.FHashTableSize);
      chn = this.Chain(hashCode);
      if (chn != null) if (chn.GetCount() > 0) for (var $l1 = 0, $end2 = chn.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (chn.GetItem(i).FKey === aKey) return chn.GetItem(i);
      };
      Result = null;
      return Result;
    };
    this.IsEmpty = function () {
      var Result = false;
      Result = this.FCount === 0;
      return Result;
    };
  });
  rtl.createClass($mod,"THTDataNode",$mod.THTCustomNode,function () {
    this.$init = function () {
      $mod.THTCustomNode.$init.call(this);
      this.FData = undefined;
    };
  });
  $mod.$rtti.$MethodVar("TDataIteratorMethod",{procsig: rtl.newTIProcSig([["Item",rtl.jsvalue],["Key",rtl.string,2],["Continue",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TDataIteratorCallBack",{procsig: rtl.newTIProcSig([["Item",rtl.jsvalue],["Key",rtl.string,2],["Continue",rtl.boolean,1]])});
  rtl.createClass($mod,"TFPDataHashTable",$mod.TFPCustomHashTable,function () {
    this.$init = function () {
      $mod.TFPCustomHashTable.$init.call(this);
      this.FIteratorCallBack = null;
    };
    this.$final = function () {
      this.FIteratorCallBack = undefined;
      $mod.TFPCustomHashTable.$final.call(this);
    };
    this.CallbackIterator = function (Item, Key, Continue) {
      this.FIteratorCallBack(Item,Key,Continue);
    };
    this.CreateNewNode = function (aKey) {
      var Result = null;
      Result = $mod.THTDataNode.$create("CreateWith",[aKey]);
      return Result;
    };
    this.AddNode = function (ANode) {
      this.Add(ANode.FKey,ANode.FData);
    };
    this.SetData = function (index, AValue) {
      this.FindOrCreateNew(index).FData = AValue;
    };
    this.GetData = function (index) {
      var Result = undefined;
      var node = null;
      node = this.Find(index);
      if (node != null) {
        Result = node.FData}
       else Result = null;
      return Result;
    };
    this.ForEachCall = function (aMethod) {
      var Result = null;
      var i = 0;
      var j = 0;
      var Continue = false;
      Result = null;
      Continue = true;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.Chain(i) != null) if (this.Chain(i).GetCount() > 0) for (var $l3 = 0, $end4 = this.Chain(i).GetCount() - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          aMethod(this.Chain(i).GetItem(j).FData,this.Chain(i).GetItem(j).FKey,{get: function () {
              return Continue;
            }, set: function (v) {
              Continue = v;
            }});
          if (!Continue) {
            Result = this.Chain(i).GetItem(j);
            return Result;
          };
        };
      };
      return Result;
    };
    this.Iterate = function (aMethod) {
      var Result = undefined;
      var N = null;
      N = this.ForEachCall(aMethod);
      if (N != null) {
        Result = N.FData}
       else Result = null;
      return Result;
    };
    this.Iterate$1 = function (aMethod) {
      var Result = undefined;
      this.FIteratorCallBack = aMethod;
      Result = this.Iterate(rtl.createCallback(this,"CallbackIterator"));
      return Result;
    };
    this.Add = function (aKey, AItem) {
      var chn = null;
      var NewNode = null;
      chn = this.FindChainForAdd(aKey);
      NewNode = this.CreateNewNode(aKey);
      NewNode.FData = AItem;
      chn.Add(NewNode);
    };
  });
  rtl.createClass($mod,"THTStringNode",$mod.THTCustomNode,function () {
    this.$init = function () {
      $mod.THTCustomNode.$init.call(this);
      this.FData = "";
    };
  });
  $mod.$rtti.$MethodVar("TStringIteratorMethod",{procsig: rtl.newTIProcSig([["Item",rtl.string],["Key",rtl.string,2],["Continue",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TStringIteratorCallback",{procsig: rtl.newTIProcSig([["Item",rtl.string],["Key",rtl.string,2],["Continue",rtl.boolean,1]])});
  rtl.createClass($mod,"TFPStringHashTable",$mod.TFPCustomHashTable,function () {
    this.$init = function () {
      $mod.TFPCustomHashTable.$init.call(this);
      this.FIteratorCallBack = null;
    };
    this.$final = function () {
      this.FIteratorCallBack = undefined;
      $mod.TFPCustomHashTable.$final.call(this);
    };
    this.CallbackIterator = function (Item, Key, Continue) {
      this.FIteratorCallBack(Item,Key,Continue);
    };
    this.CreateNewNode = function (aKey) {
      var Result = null;
      Result = $mod.THTStringNode.$create("CreateWith",[aKey]);
      return Result;
    };
    this.AddNode = function (ANode) {
      this.Add(ANode.FKey,ANode.FData);
    };
    this.SetData = function (Index, AValue) {
      this.FindOrCreateNew(Index).FData = AValue;
    };
    this.GetData = function (index) {
      var Result = "";
      var node = null;
      node = this.Find(index);
      if (node != null) {
        Result = node.FData}
       else Result = "";
      return Result;
    };
    this.ForEachCall = function (aMethod) {
      var Result = null;
      var i = 0;
      var j = 0;
      var Continue = false;
      Result = null;
      Continue = true;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.Chain(i) != null) if (this.Chain(i).GetCount() > 0) for (var $l3 = 0, $end4 = this.Chain(i).GetCount() - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          aMethod(this.Chain(i).GetItem(j).FData,this.Chain(i).GetItem(j).FKey,{get: function () {
              return Continue;
            }, set: function (v) {
              Continue = v;
            }});
          if (!Continue) {
            Result = this.Chain(i).GetItem(j);
            return Result;
          };
        };
      };
      return Result;
    };
    this.Iterate = function (aMethod) {
      var Result = "";
      var N = null;
      N = this.ForEachCall(aMethod);
      if (N != null) {
        Result = N.FData}
       else Result = "";
      return Result;
    };
    this.Iterate$1 = function (aMethod) {
      var Result = "";
      this.FIteratorCallBack = aMethod;
      Result = this.Iterate(rtl.createCallback(this,"CallbackIterator"));
      return Result;
    };
    this.Add = function (aKey, aItem) {
      var chn = null;
      var NewNode = null;
      chn = this.FindChainForAdd(aKey);
      NewNode = this.CreateNewNode(aKey);
      NewNode.FData = aItem;
      chn.Add(NewNode);
    };
  });
  rtl.createClass($mod,"THTObjectNode",$mod.THTCustomNode,function () {
    this.$init = function () {
      $mod.THTCustomNode.$init.call(this);
      this.FData = null;
    };
    this.$final = function () {
      this.FData = undefined;
      $mod.THTCustomNode.$final.call(this);
    };
  });
  rtl.createClass($mod,"THTOwnedObjectNode",$mod.THTObjectNode,function () {
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FData;
        }, set: function (v) {
          this.p.FData = v;
        }});
      pas.System.TObject.Destroy.call(this);
    };
  });
  $mod.$rtti.$MethodVar("TObjectIteratorMethod",{procsig: rtl.newTIProcSig([["Item",pas.System.$rtti["TObject"]],["Key",rtl.string,2],["Continue",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$ProcVar("TObjectIteratorCallback",{procsig: rtl.newTIProcSig([["Item",pas.System.$rtti["TObject"]],["Key",rtl.string,2],["Continue",rtl.boolean,1]])});
  rtl.createClass($mod,"TFPObjectHashTable",$mod.TFPCustomHashTable,function () {
    this.$init = function () {
      $mod.TFPCustomHashTable.$init.call(this);
      this.FOwnsObjects = false;
      this.FIteratorCallBack = null;
    };
    this.$final = function () {
      this.FIteratorCallBack = undefined;
      $mod.TFPCustomHashTable.$final.call(this);
    };
    this.CallbackIterator = function (Item, Key, Continue) {
      this.FIteratorCallBack(Item,Key,Continue);
    };
    this.CreateNewNode = function (aKey) {
      var Result = null;
      if (this.FOwnsObjects) {
        Result = $mod.THTOwnedObjectNode.$create("CreateWith",[aKey])}
       else Result = $mod.THTObjectNode.$create("CreateWith",[aKey]);
      return Result;
    };
    this.AddNode = function (ANode) {
      this.Add(ANode.FKey,ANode.FData);
    };
    this.SetData = function (Index, AObject) {
      this.FindOrCreateNew(Index).FData = AObject;
    };
    this.GetData = function (index) {
      var Result = null;
      var node = null;
      node = this.Find(index);
      if (node != null) {
        Result = node.FData}
       else Result = null;
      return Result;
    };
    this.ForEachCall = function (aMethod) {
      var Result = null;
      var i = 0;
      var j = 0;
      var Continue = false;
      Result = null;
      Continue = true;
      if (this.FHashTableSize > 0) for (var $l1 = 0, $end2 = this.FHashTableSize - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.Chain(i) != null) if (this.Chain(i).GetCount() > 0) for (var $l3 = 0, $end4 = this.Chain(i).GetCount() - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          aMethod(this.Chain(i).GetItem(j).FData,this.Chain(i).GetItem(j).FKey,{get: function () {
              return Continue;
            }, set: function (v) {
              Continue = v;
            }});
          if (!Continue) {
            Result = this.Chain(i).GetItem(j);
            return Result;
          };
        };
      };
      return Result;
    };
    this.Create$2 = function (AOwnsObjects) {
      $mod.TFPCustomHashTable.Create$1.call(this);
      this.FOwnsObjects = AOwnsObjects;
      return this;
    };
    this.CreateWith$1 = function (AHashTableSize, aHashFunc, AOwnsObjects) {
      $mod.TFPCustomHashTable.CreateWith.call(this,AHashTableSize,aHashFunc);
      this.FOwnsObjects = AOwnsObjects;
      return this;
    };
    this.Iterate = function (aMethod) {
      var Result = null;
      var N = null;
      N = this.ForEachCall(aMethod);
      if (N != null) {
        Result = N.FData}
       else Result = null;
      return Result;
    };
    this.Iterate$1 = function (aMethod) {
      var Result = null;
      this.FIteratorCallBack = aMethod;
      Result = this.Iterate(rtl.createCallback(this,"CallbackIterator"));
      return Result;
    };
    this.Add = function (aKey, AItem) {
      var chn = null;
      var NewNode = null;
      chn = this.FindChainForAdd(aKey);
      NewNode = this.CreateNewNode(aKey);
      NewNode.FData = AItem;
      chn.Add(NewNode);
    };
  });
  rtl.createClass($mod,"EDuplicate",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EKeyNotFound",pas.SysUtils.Exception,function () {
  });
  var b = 378551;
  this.RSHash = function (S, TableSize) {
    var Result = 0;
    var a = 0;
    var i = 0;
    a = 63689;
    Result = 0;
    if (S.length > 0) for (var $l1 = 1, $end2 = S.length; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = (Result * a) + S.charCodeAt(i - 1);
      a = a * 378551;
    };
    Result = rtl.lw(Result & 0x7FFFFFFF) % TableSize;
    return Result;
  };
  rtl.recNewT($mod,"TBucketItem",function () {
    this.Item = undefined;
    this.Data = undefined;
    this.$eq = function (b) {
      return (this.Item === b.Item) && (this.Data === b.Data);
    };
    this.$assign = function (s) {
      this.Item = s.Item;
      this.Data = s.Data;
      return this;
    };
    var $r = $mod.$rtti.$Record("TBucketItem",{});
    $r.addField("Item",rtl.jsvalue);
    $r.addField("Data",rtl.jsvalue);
  });
  $mod.$rtti.$DynArray("TBucketItemArray",{eltype: $mod.$rtti["TBucketItem"]});
  rtl.recNewT($mod,"TBucket",function () {
    this.Count = 0;
    this.Items = [];
    this.$eq = function (b) {
      return (this.Count === b.Count) && (this.Items === b.Items);
    };
    this.$assign = function (s) {
      this.Count = s.Count;
      this.Items = s.Items;
      return this;
    };
    var $r = $mod.$rtti.$Record("TBucket",{});
    $r.addField("Count",rtl.longint);
    $r.addField("Items",$mod.$rtti["TBucketItemArray"]);
  });
  $mod.$rtti.$DynArray("TBucketArray",{eltype: $mod.$rtti["TBucket"]});
  $mod.$rtti.$RefToProcVar("TBucketProc",{procsig: rtl.newTIProcSig([["AInfo",rtl.jsvalue],["AItem",rtl.jsvalue],["AData",rtl.jsvalue],["AContinue",rtl.boolean,4]])});
  rtl.createClass($mod,"TCustomBucketList",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FBuckets = [];
    };
    this.$final = function () {
      this.FBuckets = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetBucketCount = function () {
      var Result = 0;
      Result = rtl.length(this.FBuckets);
      return Result;
    };
    this.GetData = function (AItem) {
      var Result = undefined;
      var B = 0;
      var I = 0;
      this.GetBucketItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }});
      Result = this.FBuckets[B].Items[I].Data;
      return Result;
    };
    this.SetData = function (AItem, AData) {
      var B = 0;
      var I = 0;
      this.GetBucketItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }});
      this.FBuckets[B].Items[I].Data = AData;
    };
    this.SetBucketCount = function (Value) {
      if (Value !== this.GetBucketCount()) this.FBuckets = rtl.arraySetLength(this.FBuckets,$mod.TBucket,Value);
    };
    this.GetBucketItem = function (AItem, ABucket, AIndex) {
      if (!this.FindItem(AItem,ABucket,AIndex)) this.Error(rtl.getResStr(pas.contnrs,"SErrNoSuchItem"),[AItem]);
    };
    this.AddItem = function (ABucket, AItem, AData) {
      var Result = undefined;
      var L = 0;
      L = rtl.length(this.FBuckets[ABucket].Items);
      if (this.FBuckets[ABucket].Count === L) {
        if (L < 8) {
          L = 8}
         else L = L + Math.floor(L / 2);
        this.FBuckets[ABucket].Items = rtl.arraySetLength(this.FBuckets[ABucket].Items,$mod.TBucketItem,L);
      };
      var $with1 = this.FBuckets[ABucket];
      $with1.Items[$with1.Count].Item = AItem;
      $with1.Items[$with1.Count].Data = AData;
      Result = AData;
      $with1.Count += 1;
      return Result;
    };
    this.DeleteItem = function (ABucket, AIndex) {
      var Result = undefined;
      var I = 0;
      var L = 0;
      Result = this.FBuckets[ABucket].Items[AIndex].Data;
      if (this.FBuckets[ABucket].Count === 1) {
        this.FBuckets[ABucket].Items = rtl.arraySetLength(this.FBuckets[ABucket].Items,$mod.TBucketItem,0)}
       else {
        L = this.FBuckets[ABucket].Count - AIndex - 1;
        for (var $l1 = 0, $end2 = L - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          this.FBuckets[ABucket].Items[AIndex + I].$assign(this.FBuckets[ABucket].Items[AIndex + I + 1]);
        };
      };
      this.FBuckets[ABucket].Count -= 1;
      return Result;
    };
    this.Error = function (Msg, Args) {
      throw pas.Classes.EListError.$create("CreateFmt",[Msg,Args]);
    };
    this.FindItem = function (AItem, ABucket, AIndex) {
      var Result = false;
      var I = 0;
      var B = $mod.TBucket.$new();
      ABucket.set(this.BucketFor(AItem));
      B.$assign(this.FBuckets[ABucket.get()]);
      I = B.Count - 1;
      while ((I >= 0) && (B.Items[I].Item != AItem)) I -= 1;
      Result = I >= 0;
      if (Result) AIndex.set(I);
      return Result;
    };
    this.Destroy = function () {
      this.Clear();
      pas.System.TObject.Destroy.call(this);
    };
    this.Clear = function () {
      var B = $mod.TBucket.$new();
      var I = 0;
      var J = 0;
      for (var $l1 = 0, $end2 = rtl.length(this.FBuckets) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        B.$assign(this.FBuckets[I]);
        for (var $l3 = B.Count - 1; $l3 >= 0; $l3--) {
          J = $l3;
          this.DeleteItem(I,J);
        };
      };
      this.FBuckets = rtl.arraySetLength(this.FBuckets,$mod.TBucket,0);
    };
    this.Add = function (AItem, AData) {
      var Result = undefined;
      var B = 0;
      var I = 0;
      if (this.FindItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }})) this.Error(rtl.getResStr(pas.contnrs,"SDuplicateItem"),[AItem]);
      Result = this.AddItem(B,AItem,AData);
      return Result;
    };
    this.Assign = function (AList) {
      var I = 0;
      var J = 0;
      this.Clear();
      this.FBuckets = rtl.arraySetLength(this.FBuckets,$mod.TBucket,rtl.length(AList.FBuckets));
      for (var $l1 = 0, $end2 = this.GetBucketCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.FBuckets[I].Items = rtl.arraySetLength(this.FBuckets[I].Items,$mod.TBucketItem,rtl.length(AList.FBuckets[I].Items));
        for (var $l3 = 0, $end4 = AList.FBuckets[I].Count - 1; $l3 <= $end4; $l3++) {
          J = $l3;
          var $with5 = AList.FBuckets[I].Items[J];
          this.AddItem(I,$with5.Item,$with5.Data);
        };
      };
    };
    this.Exists = function (AItem) {
      var Result = false;
      var B = 0;
      var I = 0;
      Result = this.FindItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }});
      return Result;
    };
    this.Find = function (AItem, AData) {
      var Result = false;
      var B = 0;
      var I = 0;
      Result = this.FindItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }});
      if (Result) AData.set(this.FBuckets[B].Items[I].Data);
      return Result;
    };
    this.ForEach = function (AProc, AInfo) {
      var Result = false;
      var I = 0;
      var J = 0;
      var S = 0;
      var Bu = $mod.TBucket.$new();
      I = 0;
      Result = true;
      S = this.GetBucketCount();
      while (Result && (I < S)) {
        J = 0;
        Bu.$assign(this.FBuckets[I]);
        while (Result && (J < Bu.Count)) {
          var $with1 = Bu.Items[J];
          AProc(AInfo,$with1.Item,$with1.Data,{get: function () {
              return Result;
            }, set: function (v) {
              Result = v;
            }});
          J += 1;
        };
        I += 1;
      };
      return Result;
    };
    this.ForEach$1 = function (AProc) {
      var Result = false;
      Result = this.ForEach(AProc,null);
      return Result;
    };
    this.Remove = function (AItem) {
      var Result = undefined;
      var B = 0;
      var I = 0;
      if (this.FindItem(AItem,{get: function () {
          return B;
        }, set: function (v) {
          B = v;
        }},{get: function () {
          return I;
        }, set: function (v) {
          I = v;
        }})) {
        Result = this.FBuckets[B].Items[I].Data;
        this.DeleteItem(B,I);
      } else Result = null;
      return Result;
    };
  });
  this.TBucketListSizes = {"0": "bl2", bl2: 0, "1": "bl4", bl4: 1, "2": "bl8", bl8: 2, "3": "bl16", bl16: 3, "4": "bl32", bl32: 4, "5": "bl64", bl64: 5, "6": "bl128", bl128: 6, "7": "bl256", bl256: 7};
  $mod.$rtti.$Enum("TBucketListSizes",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TBucketListSizes});
  rtl.createClass($mod,"TBucketList",$mod.TCustomBucketList,function () {
    this.$init = function () {
      $mod.TCustomBucketList.$init.call(this);
      this.FBucketMask = 0;
    };
    this.BucketFor = function (AItem) {
      var Result = 0;
      Result = rtl.lw(rtl.lw(Math.floor(AItem) >>> 2) & this.FBucketMask);
      return Result;
    };
    this.Create$1 = function (ABuckets) {
      var L = 0;
      pas.System.TObject.Create.call(this);
      L = 1 << (ABuckets + 1);
      this.SetBucketCount(L);
      this.FBucketMask = L - 1;
      return this;
    };
  });
  rtl.createClass($mod,"TObjectBucketList",$mod.TBucketList,function () {
    this.GetData$1 = function (AItem) {
      var Result = null;
      Result = rtl.getObject($mod.TCustomBucketList.GetData.call(this,AItem));
      return Result;
    };
    this.SetData$1 = function (AItem, AData) {
      $mod.TCustomBucketList.SetData.call(this,AItem,AData);
    };
    this.Add$1 = function (AItem, AData) {
      var Result = null;
      Result = rtl.getObject($mod.TCustomBucketList.Add.call(this,AItem,AData));
      return Result;
    };
    this.Remove$1 = function (AItem) {
      var Result = null;
      Result = rtl.getObject($mod.TCustomBucketList.Remove.call(this,AItem));
      return Result;
    };
  });
},["JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.NPRIMES = 28;
  $impl.PRIMELIST = [53,97,193,389,769,1543,3079,6151,12289,24593,49157,98317,196613,393241,786433,1572869,3145739,6291469,12582917,25165843,50331653,100663319,201326611,402653189,805306457,1610612741,3221225473,4294967291];
  rtl.createClass($impl,"TlistComponent",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.Flist = null;
    };
    this.$final = function () {
      this.Flist = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.Notification = function (AComponent, Operation) {
      if (Operation === pas.Classes.TOperation.opRemove) this.Flist.HandleFreeNotify(this,AComponent);
      pas.Classes.TComponent.Notification.apply(this,arguments);
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$resourcestrings = {DuplicateMsg: {org: "An item with key %0:s already exists"}, NotEmptyMsg: {org: "Hash table not empty."}, SErrNoSuchItem: {org: "No item in list for %p"}, SDuplicateItem: {org: "Item already exists in list: %p"}};
});
rtl.module("WEBLib.Graphics",["System","Classes","Types","Web","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.WEBDEFAULTFONT = "Arial";
  this.SysDefault = 0x20000000;
  this.clNone = -1;
  this.clBlack = 0x0;
  this.clMaroon = 0x80;
  this.clGreen = 0x8000;
  this.clOlive = 0x8080;
  this.clNavy = 0x800000;
  this.clPurple = 0x800080;
  this.clTeal = 0x808000;
  this.clGray = 0x808080;
  this.clSilver = 0xC0C0C0;
  this.clRed = 0xFF;
  this.clLime = 0xFF00;
  this.clYellow = 0xFFFF;
  this.clBlue = 0xFF0000;
  this.clFuchsia = 0xFF00FF;
  this.clAqua = 0xFFFF00;
  this.clLtGray = 0xC1C1C1;
  this.clDkGray = 0x818181;
  this.clWhite = 0xFFFFFF;
  this.clDefault = 536870912;
  this.clBtnFace = 0xF0F0F0;
  this.clWindowText = 0x10101;
  this.clWindow = 0xFEFEFE;
  this.clHighlight = 0xD77800;
  this.clHighlightText = 0x30303;
  this.clInfoText = 0x20202;
  this.clInfoBk = 0xE1FFFF;
  this.clActiveCaption = 0xD1B499;
  this.clInactiveCaption = 0xE2C5AA;
  this.clHotLight = 0xCC6600;
  this.clMoneyGreen = 0xC0DCC0;
  this.clSkyBlue = 0xF0CAA6;
  this.clCream = 0xF0FBFF;
  this.clMedGray = 0xA0A0A0;
  this.clWebAliceblue = 0xFFF8F0;
  this.clWebAntiquewhite = 0xD7EBFA;
  this.clWebAqua = 0xFFFF00;
  this.clWebAquamarine = 0xD4FF7F;
  this.clWebAzure = 0xFFFFF0;
  this.clWebBeige = 0xDCF5F5;
  this.clWebBisque = 0xC4E4FF;
  this.clWebBlack = 0x0;
  this.clWebBlanchedalmond = 0xCDEBFF;
  this.clWebBlue = 0xFF0000;
  this.clWebBlueviolet = 0xE22B8A;
  this.clWebBrown = 0x2A2AA5;
  this.clWebBurlywood = 0x87B8DE;
  this.clWebCadetblue = 0xA09E5F;
  this.clWebChartreuse = 0xFF7F;
  this.clWebChocolate = 0x1E69D2;
  this.clWebCoral = 0x507FFF;
  this.clWebCornflowerblue = 0xED9564;
  this.clWebCornsilk = 0xDCF8FF;
  this.clWebCrimson = 0x3C14DC;
  this.clWebCyan = 0xFFFF00;
  this.clWebDarkblue = 0x8B0000;
  this.clWebDarkcyan = 0x8B8B00;
  this.clWebDarkgoldenrod = 0xB86B8;
  this.clWebDarkgray = 0xA9A9A9;
  this.clWebDarkgreen = 0x6400;
  this.clWebDarkgrey = 0xA9A9A9;
  this.clWebDarkkhaki = 0x6BB7BD;
  this.clWebDarkmagenta = 0x8B008B;
  this.clWebDarkolivegreen = 0x2F6B55;
  this.clWebDarkorange = 0x8CFF;
  this.clWebDarkorchid = 0xCC3299;
  this.clWebDarkred = 0x8B;
  this.clWebDarksalmon = 0x7A96E9;
  this.clWebDarkseagreen = 0x8FBC8F;
  this.clWebDarkslateblue = 0x8B3D48;
  this.clWebDarkslategray = 0x4F4F2F;
  this.clWebDarkslategrey = 0x4F4F2F;
  this.clWebDarkturquoise = 0xD1CE00;
  this.clWebDarkviolet = 0xD30094;
  this.clWebDeeppink = 0x9314FF;
  this.clWebDeepskyblue = 0xFFBF00;
  this.clWebDimgray = 0x696969;
  this.clWebDimgrey = 0x696969;
  this.clWebDodgerblue = 0xFF901E;
  this.clWebFirebrick = 0x2222B2;
  this.clWebFloralwhite = 0xF0FAFF;
  this.clWebForestgreen = 0x228B22;
  this.clWebFuchsia = 0xFF00FF;
  this.clWebGainsboro = 0xDCDCDC;
  this.clWebGhostwhite = 0xFFF8F8;
  this.clWebGold = 0xD7FF;
  this.clWebGoldenrod = 0x20A5DA;
  this.clWebGray = 0x808080;
  this.clWebGreen = 0x8000;
  this.clWebGreenyellow = 0x2FFFAD;
  this.clWebGrey = 0x808080;
  this.clWebHoneydew = 0xF0FFF0;
  this.clWebHotpink = 0xB469FF;
  this.clWebIndianred = 0x5C5CCD;
  this.clWebIndigo = 0x82004B;
  this.clWebIvory = 0xF0FFFF;
  this.clWebKhaki = 0x8CE6F0;
  this.clWebLavender = 0xFAE6E6;
  this.clWebLavenderblush = 0xF5F0FF;
  this.clWebLawngreen = 0xFC7C;
  this.clWebLemonchiffon = 0xCDFAFF;
  this.clWebLightblue = 0xE6D8AD;
  this.clWebLightcoral = 0x8080F0;
  this.clWebLightcyan = 0xFFFFE0;
  this.clWebLightgoldenrodyellow = 0xD2FAFA;
  this.clWebLightgray = 0xD3D3D3;
  this.clWebLightgreen = 0x90EE90;
  this.clWebLightgrey = 0xD3D3D3;
  this.clWebLightpink = 0xC1B6FF;
  this.clWebLightsalmon = 0x7AA0FF;
  this.clWebLightseagreen = 0xAAB220;
  this.clWebLightskyblue = 0xFACE87;
  this.clWebLightslategray = 0x998877;
  this.clWebLightslategrey = 0x998877;
  this.clWebLightsteelblue = 0xDEC4B0;
  this.clWebLightyellow = 0xE0FFFF;
  this.clWebLtGray = 0xC0C0C0;
  this.clWebMedGray = 0xA4A0A0;
  this.clWebDkGray = 0x808080;
  this.clWebMoneyGreen = 0xC0DCC0;
  this.clWebLegacySkyBlue = 0xF0CAA6;
  this.clWebCream = 0xF0FBFF;
  this.clWebLime = 0xFF00;
  this.clWebLimegreen = 0x32CD32;
  this.clWebLinen = 0xE6F0FA;
  this.clWebMagenta = 0xFF00FF;
  this.clWebMaroon = 0x80;
  this.clWebMediumaquamarine = 0xAACD66;
  this.clWebMediumblue = 0xCD0000;
  this.clWebMediumorchid = 0xD355BA;
  this.clWebMediumpurple = 0xDB7093;
  this.clWebMediumseagreen = 0x71B33C;
  this.clWebMediumslateblue = 0xEE687B;
  this.clWebMediumspringgreen = 0x9AFA00;
  this.clWebMediumturquoise = 0xCCD148;
  this.clWebMediumvioletred = 0x8515C7;
  this.clWebMidnightblue = 0x701919;
  this.clWebMintcream = 0xFAFFF5;
  this.clWebMistyrose = 0xE1E4FF;
  this.clWebMoccasin = 0xB5E4FF;
  this.clWebNavajowhite = 0xADDEFF;
  this.clWebNavy = 0x800000;
  this.clWebOldlace = 0xE6F5FD;
  this.clWebOlive = 0x8080;
  this.clWebOlivedrab = 0x238E6B;
  this.clWebOrange = 0xA5FF;
  this.clWebOrangered = 0x45FF;
  this.clWebOrchid = 0xD670DA;
  this.clWebPalegoldenrod = 0xAAE8EE;
  this.clWebPalegreen = 0x98FB98;
  this.clWebPaleturquoise = 0xEEEEAF;
  this.clWebPalevioletred = 0x9370DB;
  this.clWebPapayawhip = 0xD5EFFF;
  this.clWebPeachpuff = 0xB9DAFF;
  this.clWebPeru = 0x3F85CD;
  this.clWebPink = 0xCBC0FF;
  this.clWebPlum = 0xDDA0DD;
  this.clWebPowderblue = 0xE6E0B0;
  this.clWebPurple = 0x800080;
  this.clWebRed = 0xFF;
  this.clWebRosybrown = 0x8F8FBC;
  this.clWebRoyalblue = 0xE16941;
  this.clWebSaddlebrown = 0x13458B;
  this.clWebSalmon = 0x7280FA;
  this.clWebSandybrown = 0x60A4F4;
  this.clWebSeagreen = 0x578B2E;
  this.clWebSeashell = 0xEEF5FF;
  this.clWebSienna = 0x2D52A0;
  this.clWebSilver = 0xC0C0C0;
  this.clWebSkyblue = 0xEBCE87;
  this.clWebSlateblue = 0xCD5A6A;
  this.clWebSlategray = 0x908070;
  this.clWebSlategrey = 0x908070;
  this.clWebSnow = 0xFAFAFF;
  this.clWebSpringgreen = 0x7FFF00;
  this.clWebSteelblue = 0xB48246;
  this.clWebTan = 0x8CB4D2;
  this.clWebTeal = 0x808000;
  this.clWebThistle = 0xD8BFD8;
  this.clWebTomato = 0x4763FF;
  this.clWebTurquoise = 0xD0E040;
  this.clWebViolet = 0xEE82EE;
  this.clWebWheat = 0xB3DEF5;
  this.clWebWhite = 0xFFFFFF;
  this.clWebWhitesmoke = 0xF5F5F5;
  this.clWebYellow = 0xFFFF;
  this.clWebYellowgreen = 0x32CD9A;
  this.clScrollBar = 15790320;
  this.clBackground = 15790320;
  this.clMenu = 15790320;
  this.clWindowFrame = 16777215;
  this.clMenuText = 0;
  this.clCaptionText = 16777215;
  this.clActiveBorder = 16711680;
  this.clInactiveBorder = 9109504;
  this.clAppWorkSpace = 16777215;
  this.clBtnShadow = 8421504;
  this.clGrayText = 8421504;
  this.clBtnText = 0;
  this.clInactiveCaptionText = 16777215;
  this.clBtnHighlight = 16777215;
  this.cl3DDkShadow = 11119017;
  this.cl3DLight = 16711680;
  this.clMenuHighlight = 16711680;
  this.clMenuBar = 16711680;
  this.ANSI_CHARSET = 0;
  this.DEFAULT_CHARSET = 1;
  this.SYMBOL_CHARSET = 2;
  this.MAC_CHARSET = 77;
  this.SHIFTJIS_CHARSET = 128;
  this.HANGEUL_CHARSET = 129;
  this.JOHAB_CHARSET = 130;
  this.GB2312_CHARSET = 134;
  this.CHINESEBIG5_CHARSET = 136;
  this.GREEK_CHARSET = 161;
  this.TURKISH_CHARSET = 162;
  this.HEBREW_CHARSET = 177;
  this.ARABIC_CHARSET = 178;
  this.BALTIC_CHARSET = 186;
  this.RUSSIAN_CHARSET = 204;
  this.THAI_CHARSET = 222;
  this.EASTEUROPE_CHARSET = 238;
  this.OEM_CHARSET = 255;
  $mod.$rtti.$inherited("TColor",rtl.nativeint,{});
  this.TVerticalAlignment = {"0": "taAlignTop", taAlignTop: 0, "1": "taAlignBottom", taAlignBottom: 1, "2": "taVerticalCenter", taVerticalCenter: 2};
  $mod.$rtti.$Enum("TVerticalAlignment",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TVerticalAlignment});
  this.TPenStyle = {"0": "psSolid", psSolid: 0, "1": "psDash", psDash: 1, "2": "psDot", psDot: 2, "3": "psDashDot", psDashDot: 3, "4": "psDashDotDot", psDashDotDot: 4, "5": "psClear", psClear: 5, "6": "psInsideFrame", psInsideFrame: 6, "7": "psUserStyle", psUserStyle: 7, "8": "psAlternate", psAlternate: 8};
  $mod.$rtti.$Enum("TPenStyle",{minvalue: 0, maxvalue: 8, ordtype: 1, enumtype: this.TPenStyle});
  this.TBrushStyle = {"0": "bsSolid", bsSolid: 0, "1": "bsClear", bsClear: 1, "2": "bsHorizontal", bsHorizontal: 2, "3": "bsVertical", bsVertical: 3, "4": "bsFDiagonal", bsFDiagonal: 4, "5": "bsBDiagonal", bsBDiagonal: 5, "6": "bsCross", bsCross: 6, "7": "bsDiagCross", bsDiagCross: 7};
  $mod.$rtti.$Enum("TBrushStyle",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TBrushStyle});
  this.TFontStyle = {"0": "fsBold", fsBold: 0, "1": "fsItalic", fsItalic: 1, "2": "fsStrikeOut", fsStrikeOut: 2, "3": "fsUnderline", fsUnderline: 3};
  $mod.$rtti.$Enum("TFontStyle",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TFontStyle});
  $mod.$rtti.$Set("TFontStyles",{comptype: $mod.$rtti["TFontStyle"]});
  $mod.$rtti.$Int("TFontCharset",{minvalue: 0, maxvalue: 255, ordtype: 3});
  $mod.$rtti.$inherited("TBinaryString",rtl.string,{});
  rtl.recNewT($mod,"TCanvasPointF",function () {
    this.X = 0.0;
    this.Y = 0.0;
    this.$eq = function (b) {
      return (this.X === b.X) && (this.Y === b.Y);
    };
    this.$assign = function (s) {
      this.X = s.X;
      this.Y = s.Y;
      return this;
    };
    var $r = $mod.$rtti.$Record("TCanvasPointF",{});
    $r.addField("X",rtl.double);
    $r.addField("Y",rtl.double);
  });
  rtl.recNewT($mod,"TCanvasRectF",function () {
    this.Left = 0.0;
    this.Top = 0.0;
    this.Right = 0.0;
    this.Bottom = 0.0;
    this.$eq = function (b) {
      return (this.Left === b.Left) && (this.Top === b.Top) && (this.Right === b.Right) && (this.Bottom === b.Bottom);
    };
    this.$assign = function (s) {
      this.Left = s.Left;
      this.Top = s.Top;
      this.Right = s.Right;
      this.Bottom = s.Bottom;
      return this;
    };
    var $r = $mod.$rtti.$Record("TCanvasRectF",{});
    $r.addField("Left",rtl.double);
    $r.addField("Top",rtl.double);
    $r.addField("Right",rtl.double);
    $r.addField("Bottom",rtl.double);
  });
  rtl.recNewT($mod,"TCanvasSizeF",function () {
    this.cx = 0.0;
    this.cy = 0.0;
    this.$eq = function (b) {
      return (this.cx === b.cx) && (this.cy === b.cy);
    };
    this.$assign = function (s) {
      this.cx = s.cx;
      this.cy = s.cy;
      return this;
    };
    var $r = $mod.$rtti.$Record("TCanvasSizeF",{});
    $r.addField("cx",rtl.double);
    $r.addField("cy",rtl.double);
  });
  rtl.createClass($mod,"TPen",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FWidth = 0;
      this.FColor = 0;
      this.FStyle = 0;
    };
    this.SetColor = function (Value) {
      this.FColor = Value;
    };
    this.Create$1 = function () {
      this.FColor = 0;
      this.FWidth = 1;
      this.FStyle = $mod.TPenStyle.psSolid;
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TPen.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TPen).FColor;
        this.FStyle = rtl.as(Source,$mod.TPen).FStyle;
        this.FWidth = rtl.as(Source,$mod.TPen).FWidth;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Color",2,$mod.$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("Width",0,rtl.longint,"FWidth","FWidth");
    $r.addProperty("Style",0,$mod.$rtti["TPenStyle"],"FStyle","FStyle");
  });
  rtl.createClass($mod,"TBrush",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FColor = 0;
      this.FStyle = 0;
    };
    this.Create$1 = function () {
      this.FColor = 16777215;
      this.FStyle = $mod.TBrushStyle.bsSolid;
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TBrush.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TBrush).FColor;
        this.FStyle = rtl.as(Source,$mod.TBrush).FStyle;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Color",0,$mod.$rtti["TColor"],"FColor","FColor");
    $r.addProperty("Style",0,$mod.$rtti["TBrushStyle"],"FStyle","FStyle");
  });
  rtl.createClass($mod,"TFont",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FName = "";
      this.FSize = 0;
      this.FColor = 0;
      this.FStyle = {};
      this.FOnChange = null;
      this.FHeight = 0;
      this.FCharset = 0;
      this.FOrientation = 0;
    };
    this.$final = function () {
      this.FStyle = undefined;
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetHeight = function (Value) {
      var d = 0.0;
      this.FHeight = Value;
      d = (-this.FHeight * 72) / 96;
      this.FSize = Math.round(d);
      this.DoChange();
    };
    this.SetName = function (AName) {
      if (this.FName !== AName) {
        this.FName = AName;
        this.DoChange();
      };
    };
    this.SetSize = function (ASize) {
      if (this.FSize !== ASize) {
        this.FSize = ASize;
        this.DoChange();
      };
    };
    this.SetColor = function (AColor) {
      if (this.FColor !== AColor) {
        this.FColor = AColor;
        this.DoChange();
      };
    };
    this.SetStyle = function (AStyle) {
      this.FStyle = rtl.refSet(AStyle);
      this.DoChange();
    };
    this.DoChange = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Assign = function (Source) {
      if ($mod.TFont.isPrototypeOf(Source)) {
        this.FName = rtl.as(Source,$mod.TFont).FName;
        this.FColor = rtl.as(Source,$mod.TFont).FColor;
        this.FSize = rtl.as(Source,$mod.TFont).FSize;
        this.FStyle = rtl.refSet(rtl.as(Source,$mod.TFont).FStyle);
      };
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FName = $mod.WEBDEFAULTFONT;
      this.FSize = 8;
      this.FStyle = {};
      this.FColor = 0;
      return this;
    };
    this.ToString = function () {
      var Result = "";
      var s = "";
      s = "";
      if (($mod.TFontStyle.fsBold in this.FStyle) && ($mod.TFontStyle.fsItalic in this.FStyle)) {
        s = s + "bold italic"}
       else if ($mod.TFontStyle.fsBold in this.FStyle) {
        s = s + "bold"}
       else if ($mod.TFontStyle.fsItalic in this.FStyle) s = s + "italic";
      Result = s + " " + $mod.FontSizeToHTML($mod.FontSizeToPx(this.FSize)) + " " + this.FName;
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Charset",0,$mod.$rtti["TFontCharset"],"FCharset","FCharset");
    $r.addProperty("Name",2,rtl.string,"FName","SetName");
    $r.addProperty("Height",2,rtl.longint,"FHeight","SetHeight");
    $r.addProperty("Style",2,$mod.$rtti["TFontStyles"],"FStyle","SetStyle");
    $r.addProperty("Color",2,$mod.$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("Size",2,rtl.longint,"FSize","SetSize");
  });
  this.TImageType = {"0": "itBase64", itBase64: 0, "1": "itBMP", itBMP: 1, "2": "itPNG", itPNG: 2, "3": "itJPEG", itJPEG: 3, "4": "itGIF", itGIF: 4};
  $mod.$rtti.$Enum("TImageType",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TImageType});
  $mod.$rtti.$Class("TCanvas");
  $mod.$rtti.$Class("TBitmap");
  rtl.createClass($mod,"TGraphic",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FAddToQueue = false;
      this.FCanvasElement = null;
      this.FEmpty = false;
      this.FData = "";
      this.FCanvas = null;
      this.FOnChange = null;
      this.FImage = null;
      this.FBitmap = null;
      this.FURL = "";
    };
    this.$final = function () {
      this.FCanvasElement = undefined;
      this.FCanvas = undefined;
      this.FOnChange = undefined;
      this.FImage = undefined;
      this.FBitmap = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetHeight = function (Value) {
      this.FImage.height = Value;
      this.RecreateCanvas();
      this.DoChange();
    };
    this.SetWidth = function (Value) {
      this.FImage.width = Value;
      this.RecreateCanvas();
      this.DoChange();
    };
    this.GetCanvas = function () {
      var Result = null;
      if (!(this.FCanvas != null)) this.RecreateCanvas();
      Result = this.FCanvas;
      return Result;
    };
    this.DoChange = function () {
      var i = 0;
      this.FEmpty = (this.GetWidth() === 0) && (this.GetHeight() === 0);
      if (!this.FEmpty && (this.FData !== "") && !$impl.FCache.Exists(this.FData)) {
        $impl.FCache.Add$1($impl.TGraphicCache.$create("Create$1",[this.FImage,this.FData]));
        i = $impl.FQueue.IndexOf(this.FData);
        if ((i >= 0) && (i <= ($impl.FQueue.GetCount() - 1))) $impl.FQueue.Delete(i);
        $impl.FCacheCount -= 1;
        if ($impl.FCacheCount === 0) {
          if (pas["WEBLib.Forms"].Application.FOnImageCacheReady != null) pas["WEBLib.Forms"].Application.FOnImageCacheReady(pas["WEBLib.Forms"].Application);
        };
      };
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.SetURL = function (URL) {
      this.LoadFromURL(URL);
    };
    this.GetWidth = function () {
      var Result = 0;
      var w = 0;
      w = 0;
      if (this.FImage != null) {
        w = this.FImage.width;
      };
      Result = w;
      return Result;
    };
    this.GetHeight = function () {
      var Result = 0;
      var h = 0;
      h = 0;
      if (this.FImage != null) {
        h = this.FImage.height;
      };
      Result = h;
      return Result;
    };
    this.RecreateCanvas = function () {
      if (!(this.FCanvasElement != null)) this.FCanvasElement = document.createElement("CANVAS");
      if (this.FCanvasElement != null) {
        this.FCanvasElement.height = this.GetHeight();
        this.FCanvasElement.width = this.GetWidth();
        if (!(this.FCanvas != null)) {
          this.FCanvas = $mod.TCanvas.$create("Create$1",[this.FCanvasElement]);
          this.FCanvas.FOnBeginScene = rtl.createCallback(this,"DoBeginScene");
          this.FCanvas.FOnEndScene = rtl.createCallback(this,"DoEndScene");
        };
      };
    };
    this.DoBeginScene = function (Sender) {
      this.FCanvas.Clear();
    };
    this.DoEndScene = function (Sender) {
      this.FAddToQueue = false;
      this.CaptureCanvas();
      this.FAddToQueue = true;
    };
    this.AssignEvents = function () {
      var me = this;
      this.FImage.onload = function() {
         me.DoChange();
        };
    };
    this.CreateImage = function () {
      this.FImage = new Image();
    };
    this.LoadFromCache = function (AData) {
      var dt = "";
      var o = null;
      var b = false;
      var s = "";
      var l = false;
      this.FData = AData;
      dt = AData;
      if (dt === "") return;
      if (!$impl.FCache.Find(dt,{get: function () {
          return o;
        }, set: function (v) {
          o = v;
        }})) {
        b = false;
        s = "";
        s = this.FImage.src;
        b = (s != '');
        l = b && (dt !== s);
        if (l) {
          this.CreateImage();
          this.AssignEvents();
        };
        if ((!l && ($impl.FQueue.IndexOf(dt) === -1)) || l) {
          this.FImage.src = dt;
          dt = this.FImage.src;
          this.FData = dt;
          $impl.FCacheCount += 1;
          if (this.FAddToQueue) $impl.FQueue.Add(dt);
        } else if (!l && ($impl.FQueue.IndexOf(dt) !== -1)) {
          this.FImage.src = dt;
        };
      } else {
        this.FImage = o;
        this.DoChange();
      };
      this.FEmpty = (this.FImage.src == '');
    };
    this.CreateFromResource = function (AResource) {
      var Result = null;
      Result = this.CreateFromResource$1(AResource,0);
      return Result;
    };
    this.CreateFromResource$1 = function (AResource, AInstance) {
      var Result = null;
      Result = $mod.TGraphic.$create("Create$3");
      Result.LoadFromResource(AResource);
      return Result;
    };
    this.CreateFromURL = function (AURL) {
      var Result = null;
      Result = this.CreateFromURL$1(AURL,0);
      return Result;
    };
    this.CreateFromURL$1 = function (AURL, AInstance) {
      var Result = null;
      Result = $mod.TGraphic.$create("Create$3");
      Result.LoadFromURL(AURL);
      return Result;
    };
    this.Image = function () {
      var Result = null;
      Result = this.FImage;
      return Result;
    };
    this.Empty = function () {
      var Result = false;
      Result = this.FEmpty;
      return Result;
    };
    this.GetBase64Image = function () {
      var Result = "";
      Result = "";
      if (this.FCanvas != null) Result = this.FCanvas.GetBase64Image();
      return Result;
    };
    this.GetAsImage = function (AType) {
      var Result = "";
      Result = "";
      if (this.FCanvas != null) Result = this.FCanvas.GetAsImage(AType);
      return Result;
    };
    this.Create$1 = function (URL) {
      this.FAddToQueue = true;
      this.FEmpty = true;
      this.FData = "";
      this.Create$3();
      this.LoadFromURL(URL);
      return this;
    };
    this.Create$2 = function (Img) {
      this.FAddToQueue = true;
      this.FEmpty = true;
      this.FData = "";
      this.FURL = "";
      this.FImage = Img;
      return this;
    };
    this.Create$3 = function () {
      this.FAddToQueue = true;
      this.FEmpty = true;
      this.FData = "";
      this.CreateImage();
      this.AssignEvents();
      return this;
    };
    this.CaptureCanvas = function () {
      if ((this.FCanvas != null) && (this.FCanvas.FElementCanvas != null)) this.LoadFromResource(this.FCanvas.FElementCanvas.toDataURL());
    };
    this.LoadFromCanvas = function (ACanvas) {
      if ((ACanvas != null) && (ACanvas.FElementCanvas != null)) this.LoadFromResource(ACanvas.FElementCanvas.toDataURL());
    };
    this.SetSize = function (AWidth, AHeight) {
      this.SetWidth(AWidth);
      this.SetHeight(AHeight);
    };
    this.Assign = function (Source) {
      var s = "";
      if ((Source != null) && (Source.FCanvas != null)) {
        this.LoadFromCanvas(Source.FCanvas)}
       else if ((Source != null) && (Source.FImage != null) && !Source.Empty()) {
        s = Source.FImage.src;
        this.LoadFromURL(s);
      } else if (!(Source != null)) {
        this.FImage.src = "";
        this.DoChange();
      };
    };
    this.LoadFromURL = function (AURL) {
      this.LoadFromURL$1(AURL,0);
    };
    this.LoadFromURL$1 = function (AURL, AHInstance) {
      this.FEmpty = true;
      this.LoadFromCache(AURL);
    };
    this.LoadFromFile = function (AFileName) {
      this.LoadFromURL(AFileName);
    };
    this.LoadFromResource = function (AResource) {
      this.LoadFromResource$1(AResource,0);
    };
    this.LoadFromResource$1 = function (AResource, AHInstance) {
      this.FEmpty = true;
      this.LoadFromCache(AResource);
    };
    this.LoadFromStream = function (AStream) {
      this.DoChange();
    };
    var $r = this.$rtti;
    $r.addProperty("OnChange",0,pas.Classes.$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("URL",2,rtl.string,"FURL","SetURL");
  });
  rtl.createClass($mod,"TBitmap",$mod.TGraphic,function () {
  });
  rtl.recNewT($mod,"TMatrix",function () {
    this.m11 = 0.0;
    this.m12 = 0.0;
    this.m13 = 0.0;
    this.m21 = 0.0;
    this.m22 = 0.0;
    this.m23 = 0.0;
    this.m31 = 0.0;
    this.m32 = 0.0;
    this.m33 = 0.0;
    this.$eq = function (b) {
      return (this.m11 === b.m11) && (this.m12 === b.m12) && (this.m13 === b.m13) && (this.m21 === b.m21) && (this.m22 === b.m22) && (this.m23 === b.m23) && (this.m31 === b.m31) && (this.m32 === b.m32) && (this.m33 === b.m33);
    };
    this.$assign = function (s) {
      this.m11 = s.m11;
      this.m12 = s.m12;
      this.m13 = s.m13;
      this.m21 = s.m21;
      this.m22 = s.m22;
      this.m23 = s.m23;
      this.m31 = s.m31;
      this.m32 = s.m32;
      this.m33 = s.m33;
      return this;
    };
    var $r = $mod.$rtti.$Record("TMatrix",{});
    $r.addField("m11",rtl.double);
    $r.addField("m12",rtl.double);
    $r.addField("m13",rtl.double);
    $r.addField("m21",rtl.double);
    $r.addField("m22",rtl.double);
    $r.addField("m23",rtl.double);
    $r.addField("m31",rtl.double);
    $r.addField("m32",rtl.double);
    $r.addField("m33",rtl.double);
  });
  rtl.createClass($mod,"TCanvas",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FElementCanvas = null;
      this.FContext = null;
      this.FPen = null;
      this.FBrush = null;
      this.FFont = null;
      this.FPathOpen = false;
      this.FPathX = 0.0;
      this.FPathY = 0.0;
      this.FClipRect = $mod.TCanvasRectF.$new();
      this.FOnEndScene = null;
      this.FOnBeginScene = null;
      this.FApplyPixelRatio = false;
    };
    this.$final = function () {
      this.FElementCanvas = undefined;
      this.FContext = undefined;
      this.FPen = undefined;
      this.FBrush = undefined;
      this.FFont = undefined;
      this.FClipRect = undefined;
      this.FOnEndScene = undefined;
      this.FOnBeginScene = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetClipRect = function (Value) {
      this.FClipRect.$assign(Value);
      if (this.FContext != null) {
        this.FContext.beginPath();
        this.FContext.rect(this.FClipRect.Left,this.FClipRect.Top,this.FClipRect.Right - this.FClipRect.Left,this.FClipRect.Bottom - this.FClipRect.Top);
        this.FContext.clip();
      };
    };
    this.GetAccuOffset = function (X, Y, dx, dy) {
      dx.set(0);
      dy.set(0);
      if ((this.FPen.FWidth === 1) && (this.FPen.FStyle !== $mod.TPenStyle.psClear) && (pas.System.Frac(X) === 0)) dx.set(0.5);
      if ((this.FPen.FWidth === 1) && (this.FPen.FStyle !== $mod.TPenStyle.psClear) && (pas.System.Frac(Y) === 0)) dy.set(0.5);
    };
    this.GetPixel = function (X, Y) {
      var Result = 0;
      var imgd = null;
      Result = -1;
      if (this.FContext != null) {
        imgd = this.FContext.getImageData(X,Y,1,1);
        Result = $mod.RGB(imgd.data[0],imgd.data[1],imgd.data[2]);
      };
      return Result;
    };
    this.SetPixel = function (X, Y, Clr) {
      if (this.FContext != null) {
        this.FContext.fillStyle = $mod.ColorToHTML(Clr);
        this.FContext.fillRect(X,Y,1,1);
      };
    };
    this.ApplyStroke = function () {
      if (this.FContext != null) {
        this.FContext.lineWidth = this.FPen.FWidth;
        this.FContext.strokeStyle = $mod.ColorToHTML(this.FPen.FColor);
        var $tmp1 = this.FPen.FStyle;
        if ($tmp1 === $mod.TPenStyle.psSolid) {
          this.FContext.setLineDash([])}
         else if ($tmp1 === $mod.TPenStyle.psDot) {
          this.FContext.setLineDash([1,2])}
         else if ($tmp1 === $mod.TPenStyle.psDash) {
          this.FContext.setLineDash([8,2])}
         else if ($tmp1 === $mod.TPenStyle.psDashDot) {
          this.FContext.setLineDash([6,2,2,2])}
         else if ($tmp1 === $mod.TPenStyle.psDashDotDot) {
          this.FContext.setLineDash([6,2,2,2,2,2])}
         else if ($tmp1 === $mod.TPenStyle.psClear) this.FContext.setLineDash([0,0xFFFF]);
      };
    };
    this.ApplyFill = function () {
      if (this.FContext != null) this.FContext.fillStyle = $mod.ColorToHTML(this.FBrush.FColor);
    };
    this.Create$1 = function (AControl) {
      this.FElementCanvas = AControl;
      this.FContext = AControl.getContext("2d");
      this.FPen = $mod.TPen.$create("Create$1");
      this.FBrush = $mod.TBrush.$create("Create$1");
      this.FPathOpen = false;
      this.FFont = $mod.TFont.$create("Create$1");
      this.FApplyPixelRatio = false;
      return this;
    };
    this.Create$2 = function () {
      this.FElementCanvas = document.createElement("CANVAS");
      this.Create$1(this.FElementCanvas);
      return this;
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.SetTransform = function (m11, m12, m21, m22, dx, dy) {
      var m = $mod.TMatrix.$new();
      var px = 0.0;
      if (this.FContext != null) {
        m.$assign($impl.MatrixIdentity());
        m.m11 = m11;
        m.m12 = m12;
        m.m21 = m21;
        m.m22 = m22;
        m.m31 = dx;
        m.m32 = dy;
        if (this.FApplyPixelRatio) {
          px = $impl.GetPixelRatio(this);
          m.$assign($impl.MatrixMultiply(m,$impl.MatrixCreateScaling(px,px)));
        };
        this.FContext.setTransform(m.m11,m.m12,m.m21,m.m22,m.m31,m.m32);
      };
    };
    this.Transform = function (m11, m12, m21, m22, dx, dy) {
      if (this.FContext != null) this.FContext.transform(m11,m12,m21,m22,dx,dy);
    };
    this.Rotate = function (Angle) {
      if (this.FContext != null) this.FContext.rotate(Angle);
    };
    this.Translate = function (X, Y) {
      if (this.FContext != null) this.FContext.translate(X,Y);
    };
    this.AngleArc = function (X, Y, Radius, StartAngle, SweepAngle) {
      this.AngleArc$1(X,Y,Radius,StartAngle,SweepAngle);
    };
    this.AngleArc$1 = function (X, Y, Radius, StartAngle, SweepAngle) {
      if (this.FContext != null) {
        this.FContext.beginPath();
        this.ApplyStroke();
        this.FContext.arc(X,Y,Radius,StartAngle,StartAngle + SweepAngle);
        this.FContext.stroke();
      };
    };
    this.MoveTo = function (X, Y) {
      this.MoveTo$1(X,Y);
    };
    this.MoveTo$1 = function (X, Y) {
      var dx = 0.0;
      var dy = 0.0;
      if (this.FContext != null) {
        this.FPathOpen = true;
        this.FContext.beginPath();
        this.ApplyStroke();
        dx = 0;
        dy = 0;
        this.GetAccuOffset(X,Y,{get: function () {
            return dx;
          }, set: function (v) {
            dx = v;
          }},{get: function () {
            return dy;
          }, set: function (v) {
            dy = v;
          }});
        this.FContext.moveTo(X + dx,Y + dy);
      };
    };
    this.LineTo = function (X, Y) {
      this.LineTo$1(X,Y);
    };
    this.LineTo$1 = function (X, Y) {
      var dx = 0.0;
      var dy = 0.0;
      if (this.FContext != null) {
        dx = 0;
        dy = 0;
        this.GetAccuOffset(X,Y,{get: function () {
            return dx;
          }, set: function (v) {
            dx = v;
          }},{get: function () {
            return dy;
          }, set: function (v) {
            dy = v;
          }});
        if (!this.FPathOpen) {
          this.FContext.beginPath();
          this.ApplyStroke();
          this.FContext.moveTo(this.FPathX + dx,this.FPathY + dy);
        };
        this.FContext.lineTo(X + dx,Y + dy);
        this.FContext.stroke();
        this.FPathX = X;
        this.FPathY = Y;
        this.FPathOpen = false;
      };
    };
    this.Rectangle = function (X1, Y1, X2, Y2) {
      var dx = 0.0;
      var dy = 0.0;
      if (this.FContext != null) {
        this.FContext.beginPath();
        this.ApplyStroke();
        this.ApplyFill();
        this.GetAccuOffset(X1,Y1,{get: function () {
            return dx;
          }, set: function (v) {
            dx = v;
          }},{get: function () {
            return dy;
          }, set: function (v) {
            dy = v;
          }});
        this.FContext.rect(X1 + dx,Y1 + dy,X2 - X1,Y2 - Y1);
        if (this.FBrush.FStyle !== $mod.TBrushStyle.bsClear) this.FContext.fill();
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.Rectangle$1 = function (X1, Y1, X2, Y2) {
      this.Rectangle(X1,Y1,X2,Y2);
    };
    this.Rectangle$2 = function (Rect) {
      this.Rectangle$1(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom);
    };
    this.Rectangle$3 = function (Rect) {
      this.Rectangle(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom);
    };
    this.RoundRect = function (X1, Y1, X2, Y2, X3, Y3) {
      this.RoundRect$1(X1,Y1,X2,Y2,X3,Y3);
    };
    this.RoundRect$1 = function (X1, Y1, X2, Y2, X3, Y3) {
      var dx = 0.0;
      var dy = 0.0;
      if (this.FContext != null) {
        this.FContext.beginPath();
        this.ApplyStroke();
        this.ApplyFill();
        this.GetAccuOffset(X1,Y1,{get: function () {
            return dx;
          }, set: function (v) {
            dx = v;
          }},{get: function () {
            return dy;
          }, set: function (v) {
            dy = v;
          }});
        this.FContext.moveTo(X1 + (X3 / 2),Y1 + dy);
        this.FContext.lineTo(X2 - (X3 / 2),Y1 + dy);
        this.FContext.quadraticCurveTo(X2 + dx,Y1 + dy,X2 + dx,Y1 + (Y3 / 2));
        this.FContext.lineTo(X2 + dx,Y2 - (Y3 / 2));
        this.FContext.quadraticCurveTo(X2 + dx,Y2 + dy,X2 - (X3 / 2),Y2 + dy);
        this.FContext.lineTo(X1 + (X3 / 2),Y2 + dy);
        this.FContext.quadraticCurveTo(X1 + dx,Y2 + dy,X1 + dx,Y2 - (Y3 / 2));
        this.FContext.lineTo(X1 + dx,Y1 + (Y3 / 2));
        this.FContext.quadraticCurveTo(X1 + dx,Y1 + dy,X1 + (X3 / 2),Y1 + dy);
        if (this.FBrush.FStyle !== $mod.TBrushStyle.bsClear) this.FContext.fill();
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.RoundRect$2 = function (Rect, CX, CY) {
      this.RoundRect(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom,CX,CY);
    };
    this.RoundRect$3 = function (Rect, CX, CY) {
      this.RoundRect$1(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom,CX,CY);
    };
    this.FillRect = function (Rect) {
      this.Rectangle$1(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom);
    };
    this.FillRect$1 = function (Rect) {
      this.Rectangle(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom);
    };
    this.Ellipse = function (X1, Y1, X2, Y2) {
      this.Ellipse$1(X1,Y1,X2,Y2);
    };
    this.Ellipse$1 = function (X1, Y1, X2, Y2) {
      var w = 0.0;
      var h = 0.0;
      var kappa = 0.0;
      var ox = 0.0;
      var oy = 0.0;
      var xe = 0.0;
      var ye = 0.0;
      var xm = 0.0;
      var ym = 0.0;
      if (this.FContext != null) {
        w = X2 - X1;
        h = Y2 - Y1;
        kappa = 0.5522848;
        ox = (w / 2) * kappa;
        oy = (h / 2) * kappa;
        xe = X1 + w;
        ye = Y1 + h;
        xm = X1 + (w / 2);
        ym = Y1 + (h / 2);
        this.FContext.beginPath();
        this.ApplyStroke();
        this.ApplyFill();
        this.FContext.moveTo(X1,ym);
        this.FContext.bezierCurveTo(X1,ym - oy,xm - ox,Y1,xm,Y1);
        this.FContext.bezierCurveTo(xm + ox,Y1,xe,ym - oy,xe,ym);
        this.FContext.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
        this.FContext.bezierCurveTo(xm - ox,ye,X1,ym + oy,X1,ym);
        this.FContext.closePath();
        if (this.FBrush.FStyle !== $mod.TBrushStyle.bsClear) this.FContext.fill();
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.Ellipse$2 = function (Rect) {
      this.Ellipse(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom);
    };
    this.Ellipse$3 = function (Rect) {
      this.Ellipse$1(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom);
    };
    this.Polyline = function (Points) {
      var l = 0;
      var i = 0;
      if (this.FContext != null) {
        l = rtl.length(Points);
        if (l === 0) return;
        this.FContext.beginPath();
        this.ApplyStroke();
        i = 0;
        this.FContext.moveTo(Points[i].x,Points[i].y);
        while (i < (l - 1)) {
          i += 1;
          this.FContext.lineTo(Points[i].x,Points[i].y);
        };
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.Polyline$1 = function (Points) {
      var l = 0;
      var i = 0;
      if (this.FContext != null) {
        l = rtl.length(Points);
        if (l === 0) return;
        this.FContext.beginPath();
        this.ApplyStroke();
        i = 0;
        this.FContext.moveTo(Points[i].X,Points[i].Y);
        while (i < (l - 1)) {
          i += 1;
          this.FContext.lineTo(Points[i].X,Points[i].Y);
        };
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.Polygon = function (Points) {
      var l = 0;
      var i = 0;
      if (this.FContext != null) {
        l = rtl.length(Points);
        if (l === 0) return;
        this.FContext.beginPath();
        this.ApplyStroke();
        this.ApplyFill();
        i = 0;
        this.FContext.moveTo(Points[i].x,Points[i].y);
        while (i < (l - 1)) {
          i += 1;
          this.FContext.lineTo(Points[i].x,Points[i].y);
        };
        this.FContext.closePath();
        if (this.FBrush.FStyle !== $mod.TBrushStyle.bsClear) this.FContext.fill();
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.Polygon$1 = function (Points) {
      var l = 0;
      var i = 0;
      if (this.FContext != null) {
        l = rtl.length(Points);
        if (l === 0) return;
        this.FContext.beginPath();
        this.ApplyStroke();
        this.ApplyFill();
        i = 0;
        this.FContext.moveTo(Points[i].X,Points[i].Y);
        while (i < (l - 1)) {
          i += 1;
          this.FContext.lineTo(Points[i].X,Points[i].Y);
        };
        this.FContext.closePath();
        if (this.FBrush.FStyle !== $mod.TBrushStyle.bsClear) this.FContext.fill();
        if (this.FPen.FStyle !== $mod.TPenStyle.psClear) this.FContext.stroke();
      };
    };
    this.TextOut = function (X, Y, Text) {
      this.TextOut$1(X,Y,Text);
    };
    this.TextOut$1 = function (X, Y, Text) {
      var tm = pas.Web.TJSTextMetrics.$new();
      if (this.FContext != null) {
        this.FContext.fillStyle = $mod.ColorToHTML(this.FFont.FColor);
        this.FContext.font = this.FFont.ToString();
        this.FContext.textBaseline = "hanging";
        this.FContext.fillText(Text,X,Y + 0.5);
        if ($mod.TFontStyle.fsUnderline in this.FFont.FStyle) {
          tm.$assign(this.FContext.measureText(Text));
          this.FContext.fillRect(X,Y + (this.FFont.FSize * 1.4),tm.width,1);
        };
        if ($mod.TFontStyle.fsStrikeOut in this.FFont.FStyle) {
          tm.$assign(this.FContext.measureText(Text));
          this.FContext.fillRect(X,Y + (this.FFont.FSize * 0.7),tm.width,1);
        };
      };
    };
    this.Draw = function (X, Y, Graphic) {
      this.Draw$1(X,Y,Graphic);
    };
    this.Draw$1 = function (X, Y, Graphic) {
      var img = null;
      if (this.FContext != null) {
        img = Graphic.Image();
        this.FContext.drawImage(img,X,Y);
      };
    };
    this.StretchDraw = function (Rect, Graphic) {
      this.StretchDraw$1($mod.TCanvasRectF.$clone($mod.CreateCanvasRectF(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom)),Graphic);
    };
    this.StretchDraw$1 = function (Rect, Graphic) {
      var img = null;
      if (this.FContext != null) {
        img = Graphic.Image();
        this.FContext.drawImage(img,0,0,Graphic.GetWidth(),Graphic.GetHeight(),Rect.Left,Rect.Top,Rect.Right - Rect.Left,Rect.Bottom - Rect.Top);
      };
    };
    this.DrawFocusRect = function (Rect) {
      this.DrawFocusRect$1($mod.CreateCanvasRectF(Rect.Left,Rect.Top,Rect.Right,Rect.Bottom));
    };
    this.DrawFocusRect$1 = function (Rect) {
      var ps = 0;
      ps = this.FPen.FStyle;
      this.FPen.FStyle = $mod.TPenStyle.psDot;
      this.FPen.FWidth = 1;
      this.FPen.SetColor(0);
      this.MoveTo$1(Rect.Left,Rect.Top);
      this.LineTo$1(Rect.Right,Rect.Top);
      this.LineTo$1(Rect.Right,Rect.Bottom);
      this.LineTo$1(Rect.Left,Rect.Bottom);
      this.LineTo$1(Rect.Left,Rect.Top);
      this.FPen.FStyle = ps;
    };
    this.BeginScene = function () {
      if (this.FOnBeginScene != null) this.FOnBeginScene(this);
    };
    this.EndScene = function () {
      if (this.FOnEndScene != null) this.FOnEndScene(this);
    };
    this.PathBegin = function () {
      if (this.FContext != null) this.FContext.beginPath();
    };
    this.PathClose = function () {
      if (this.FContext != null) this.FContext.closePath();
    };
    this.PathStroke = function () {
      if (this.FContext != null) {
        this.ApplyStroke();
        this.FContext.stroke();
      };
    };
    this.PathFill = function () {
      if (this.FContext != null) {
        this.ApplyFill();
        this.FContext.fill();
      };
    };
    this.PathMoveTo = function (X, Y) {
      this.PathMoveTo$1(X,Y);
    };
    this.PathMoveTo$1 = function (X, Y) {
      var dx = 0.0;
      var dy = 0.0;
      if (this.FContext != null) {
        dx = 0;
        dy = 0;
        this.GetAccuOffset(X,Y,{get: function () {
            return dx;
          }, set: function (v) {
            dx = v;
          }},{get: function () {
            return dy;
          }, set: function (v) {
            dy = v;
          }});
        this.FContext.moveTo(X + dx,Y + dy);
      };
    };
    this.PathLineTo = function (X, Y) {
      this.PathLineTo$1(X,Y);
    };
    this.PathLineTo$1 = function (X, Y) {
      var dx = 0.0;
      var dy = 0.0;
      if (this.FContext != null) {
        dx = 0;
        dy = 0;
        this.GetAccuOffset(X,Y,{get: function () {
            return dx;
          }, set: function (v) {
            dx = v;
          }},{get: function () {
            return dy;
          }, set: function (v) {
            dy = v;
          }});
        this.FContext.lineTo(X + dx,Y + dy);
      };
    };
    this.Save = function () {
      if (this.FContext != null) this.FContext.save();
    };
    this.Clip = function () {
      if (this.FContext != null) this.FContext.clip();
    };
    this.Restore = function () {
      if (this.FContext != null) this.FContext.restore();
    };
    this.Refresh = function () {
    };
    this.Clear = function () {
      if ((this.FContext != null) && (this.FElementCanvas != null)) this.FContext.clearRect(0,0,this.FElementCanvas.width,this.FElementCanvas.height);
    };
    this.Clear$1 = function (AColor) {
      var c = 0;
      var s = 0;
      this.Clear();
      if (this.FElementCanvas != null) {
        c = this.FBrush.FColor;
        s = this.FBrush.FStyle;
        this.FBrush.FColor = AColor;
        this.FBrush.FStyle = $mod.TBrushStyle.bsSolid;
        this.FillRect(pas.Types.Rect(0,0,this.FElementCanvas.width,this.FElementCanvas.height));
        this.FBrush.FColor = c;
        this.FBrush.FStyle = s;
      };
    };
    this.TextExtent = function (Text) {
      var Result = $mod.TCanvasSizeF.$new();
      Result.cx = this.TextWidth(Text);
      Result.cy = this.TextHeight(Text);
      return Result;
    };
    this.TextRect = function (ARect, Text, WordWrap, Calculate, AHorizontalAlignment, AVerticalAlignment) {
      var Result = pas.Types.TRect.$new();
      var r = $mod.TCanvasRectF.$new();
      r.$assign(this.TextRect$1($mod.TCanvasRectF.$clone($mod.CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom)),Text,WordWrap,Calculate,AHorizontalAlignment,AVerticalAlignment));
      Result.$assign(pas.Types.Rect(Math.round(r.Left),Math.round(r.Top),Math.round(r.Right),Math.round(r.Bottom)));
      return Result;
    };
    this.TextRect$1 = function (ARect, Text, WordWrap, Calculate, AHorizontalAlignment, AVerticalAlignment) {
      var $Self = this;
      var Result = $mod.TCanvasRectF.$new();
      var i = 0;
      var s = "";
      var sn = "";
      var st = "";
      var l = 0;
      var w = 0.0;
      var mw = 0.0;
      var f = false;
      var p = 0;
      var tw = 0.0;
      var th = 0.0;
      var lcnt = 0;
      var rs = $mod.TCanvasRectF.$new();
      var fws = 0.0;
      var ths = 0.0;
      var ww = false;
      var wwx = false;
      var fx = false;
      function DrawText(AText, AWidth, AHeight) {
        if (ww) {
          var $tmp1 = AHorizontalAlignment;
          if ($tmp1 === pas.Classes.TAlignment.taCenter) {
            $Self.TextOut$1(ARect.Left + ((ARect.Right - ARect.Left - AWidth) / 2),ARect.Top,AText)}
           else if ($tmp1 === pas.Classes.TAlignment.taLeftJustify) {
            $Self.TextOut$1(ARect.Left,ARect.Top,AText)}
           else if ($tmp1 === pas.Classes.TAlignment.taRightJustify) $Self.TextOut$1(ARect.Right - AWidth,ARect.Top,AText);
        } else {
          var $tmp2 = AHorizontalAlignment;
          if ($tmp2 === pas.Classes.TAlignment.taCenter) {
            var $tmp3 = AVerticalAlignment;
            if ($tmp3 === $mod.TVerticalAlignment.taAlignTop) {
              $Self.TextOut$1(ARect.Left + ((ARect.Right - ARect.Left - AWidth) / 2),ARect.Top,AText)}
             else if ($tmp3 === $mod.TVerticalAlignment.taVerticalCenter) {
              $Self.TextOut$1(ARect.Left + ((ARect.Right - ARect.Left - AWidth) / 2),ARect.Top + ((ARect.Bottom - ARect.Top - AHeight) / 2),AText)}
             else if ($tmp3 === $mod.TVerticalAlignment.taAlignBottom) $Self.TextOut$1(ARect.Left + ((ARect.Right - ARect.Left - AWidth) / 2),ARect.Bottom - AHeight,AText);
          } else if ($tmp2 === pas.Classes.TAlignment.taLeftJustify) {
            var $tmp4 = AVerticalAlignment;
            if ($tmp4 === $mod.TVerticalAlignment.taAlignTop) {
              $Self.TextOut$1(ARect.Left,ARect.Top,AText)}
             else if ($tmp4 === $mod.TVerticalAlignment.taVerticalCenter) {
              $Self.TextOut$1(ARect.Left,ARect.Top + ((ARect.Bottom - ARect.Top - AHeight) / 2),AText)}
             else if ($tmp4 === $mod.TVerticalAlignment.taAlignBottom) $Self.TextOut$1(ARect.Left,ARect.Bottom - AHeight,AText);
          } else if ($tmp2 === pas.Classes.TAlignment.taRightJustify) {
            var $tmp5 = AVerticalAlignment;
            if ($tmp5 === $mod.TVerticalAlignment.taAlignTop) {
              $Self.TextOut$1(ARect.Right - AWidth,ARect.Top,AText)}
             else if ($tmp5 === $mod.TVerticalAlignment.taVerticalCenter) {
              $Self.TextOut$1(ARect.Right - AWidth,ARect.Top + ((ARect.Bottom - ARect.Top - AHeight) / 2),AText)}
             else if ($tmp5 === $mod.TVerticalAlignment.taAlignBottom) $Self.TextOut$1(ARect.Right - AWidth,ARect.Bottom - AHeight,AText);
          };
        };
      };
      function FindNextWord(Text, APos) {
        var Result = "";
        var l = 0;
        var i = 0;
        Result = "";
        l = Text.length;
        if (APos.get() > l) return Result;
        i = APos.get();
        while (true) {
          if (((Text.charAt(i - 1) === "\n") && (Text.charAt(i - 1 - 1) === "\r")) || ((Text.charAt(i - 1) === "\r") && (Text.charAt(i - 1 - 1) === "\n")) || (Text.charAt(i - 1) === " ")) {
            if (Text.charAt(i - 1) === " ") {
              Result = pas.System.Copy(Text,APos.get(),i - (APos.get() - 1))}
             else Result = pas.System.Copy(Text,APos.get(),i - APos.get());
            break;
          } else if ((Text.charAt(i - 1) === "\n") || (Text.charAt(i - 1) === "\r") || (Text.charAt(i - 1) === " ")) {
            Result = pas.System.Copy(Text,APos.get(),i - (APos.get() - 1));
            break;
          } else if (i >= l) {
            Result = pas.System.Copy(Text,APos.get(),i - (APos.get() - 1));
            break;
          } else i += 1;
        };
        APos.set(i + 1);
        return Result;
      };
      ww = WordWrap || (pas.System.Pos("\r",Text) > 0) || (pas.System.Pos("\n",Text) > 0);
      wwx = !WordWrap && ((pas.System.Pos("\r",Text) > 0) || (pas.System.Pos("\n",Text) > 0));
      if (!ww) {
        w = $Self.TextWidth(Text);
        th = $Self.TextHeight(Text);
        if (!Calculate) DrawText(Text,w,th);
        Result.$assign($mod.CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Left + w,ARect.Top + th));
      } else {
        rs.$assign(ARect);
        mw = 0;
        i = 1;
        ths = $Self.FFont.FSize * 0.5;
        lcnt = 0;
        fws = 0;
        tw = 0;
        s = FindNextWord(Text,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }});
        w = $Self.TextWidth(s);
        th = $Self.TextHeight(s) + ths;
        mw = mw + w;
        if ((s.length > 0) && (s.charAt(s.length - 1) === " ")) mw = mw + fws;
        fx = false;
        while (i <= Text.length) {
          l = s.length;
          if ((l >= 2) && (((s.charAt(l - 1) === "\n") && (s.charAt(l - 1 - 1) === "\r")) || ((s.charAt(l - 1) === "\r") && (s.charAt(l - 1 - 1) === "\n")))) {
            s = pas.System.Copy(s,1,l - 2);
            f = true;
          } else if ((l >= 1) && ((s.charAt(l - 1) === "\n") || (s.charAt(l - 1) === "\r"))) {
            s = pas.System.Copy(s,1,l - 1);
            f = true;
          } else f = false;
          sn = FindNextWord(Text,{get: function () {
              return i;
            }, set: function (v) {
              i = v;
            }});
          w = $Self.TextWidth(sn);
          th = Math.max(th,$Self.TextHeight(sn) + ths);
          if (((ARect.Left + mw + w) > ARect.Right) || f) {
            if ((s !== "") && !fx) {
              p = s.length;
              st = pas.System.Copy(s,1,p);
              lcnt += 1;
              if (mw > tw) tw = mw;
              if (!Calculate) DrawText(st,mw,th);
              mw = 0;
            };
            s = "";
            fx = false;
            if ((wwx && f) || !wwx) {
              ARect.Top = ARect.Top + th}
             else if (wwx && !f) fx = true;
            if ((pas.System.Trunc(ARect.Top) > pas.System.Trunc(ARect.Bottom - th)) && !Calculate) break;
          };
          mw = mw + w;
          if ((sn.length > 0) && (sn.charAt(sn.length - 1) === " ")) mw = mw + fws;
          s = s + sn;
        };
        if (s !== "") {
          p = s.length;
          st = pas.System.Copy(s,1,p);
          lcnt += 1;
          if (mw > tw) tw = mw;
          if (!Calculate) DrawText(st,mw,th);
        };
        Result.$assign($mod.CreateCanvasRectF(rs.Left,rs.Top,rs.Left + tw,rs.Top + (lcnt * th)));
      };
      return Result;
    };
    this.TextWidth = function (Text) {
      var Result = 0.0;
      var f = "";
      var tm = pas.Web.TJSTextMetrics.$new();
      if (this.FContext != null) {
        f = this.FFont.ToString();
        this.FContext.font = f;
        tm.$assign(this.FContext.measureText(Text));
        Result = tm.width;
      };
      return Result;
    };
    this.TextHeight = function (Text) {
      var Result = 0.0;
      Result = $mod.FontSizeToPx(this.FFont.FSize);
      return Result;
    };
    this.GetBase64Image = function () {
      var Result = "";
      Result = "";
      if (this.FElementCanvas != null) Result = this.FElementCanvas.toDataURL();
      return Result;
    };
    this.GetAsImage = function (AType) {
      var Result = "";
      Result = "";
      if (this.FElementCanvas != null) {
        var $tmp1 = AType;
        if ($tmp1 === $mod.TImageType.itBase64) {
          Result = this.FElementCanvas.toDataURL()}
         else if ($tmp1 === $mod.TImageType.itPNG) {
          Result = this.FElementCanvas.toDataURL("image\/png")}
         else if ($tmp1 === $mod.TImageType.itJPEG) {
          Result = this.FElementCanvas.toDataURL("image\/jpeg",1.0)}
         else if ($tmp1 === $mod.TImageType.itBMP) {
          Result = this.FElementCanvas.toDataURL("image\/bmp")}
         else if ($tmp1 === $mod.TImageType.itGIF) Result = this.FElementCanvas.toDataURL("image\/gif");
      };
      return Result;
    };
    this.DownloadImage = function (AFileName, AType) {
      var s = "";
      if (this.FElementCanvas != null) {
        s = this.GetAsImage(AType);
        var element = document.createElement('a');
        element.setAttribute('href', s);
        if (AFileName != ''){
          element.setAttribute('download', AFileName);
        }
        element.style.display = 'none';
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
      };
    };
  });
  rtl.createClassExt($mod,"TJSCSSStyleDeclarationEx",CSSStyleDeclaration,"",function () {
    this.$init = function () {
      this.filter = "";
    };
    this.$final = function () {
    };
  });
  rtl.createClassExt($mod,"TJSHTMLElementEx",HTMLElement,"",function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
  });
  rtl.createClassExt($mod,"TJSCanvasRenderingContext2DEx",CanvasRenderingContext2D,"",function () {
    this.$init = function () {
    };
    this.$final = function () {
    };
  });
  rtl.createClass($mod,"TURLPicture",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOnChange = null;
      this.FFilename = "";
      this.FData = "";
      this.FOnDataChange = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      this.FOnDataChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetData = function (Value) {
      if (this.FData !== Value) {
        this.FData = Value;
        this.DataChanged();
      };
    };
    this.GetData = function () {
      var Result = "";
      Result = this.FData;
      return Result;
    };
    this.Changed = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.DataChanged = function () {
      if (this.FOnDataChange != null) this.FOnDataChange(this);
    };
    this.LoadFromFile = function (AFileName) {
      this.FFilename = AFileName;
      this.Changed();
    };
    this.Assign = function (Source) {
      if ($mod.TURLPicture.isPrototypeOf(Source)) {
        this.FFilename = rtl.as(Source,$mod.TURLPicture).FFilename;
        this.Changed();
      };
    };
    var $r = this.$rtti;
    $r.addProperty("OnChange",0,pas.Classes.$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("Data",3,$mod.$rtti["TBinaryString"],"GetData","SetData");
  });
  $mod.$rtti.$RefToProcVar("TThumbnailCreatedProc",{procsig: rtl.newTIProcSig([["ADataURL",rtl.string]])});
  this.ColorToRGB = function (Color) {
    var Result = 0;
    Result = Color;
    return Result;
  };
  this.ColorToHex = function (c) {
    var Result = "";
    var s = "";
    s = c.toString(16);
    
        while (s.length < 6)
        {
          s = "0" + s;
        };
    Result = pas.System.Copy(s,5,2) + pas.System.Copy(s,3,2) + pas.System.Copy(s,1,2);
    return Result;
  };
  this.ColorToHTML = function (c) {
    var Result = "";
    Result = "#" + $mod.ColorToHex(c);
    return Result;
  };
  this.ColorToString = function (Color) {
    var Result = "";
    var $tmp1 = Color;
    if ($tmp1 === -1) {
      Result = "clNone"}
     else if ($tmp1 === 0) {
      Result = "clBlack"}
     else if ($tmp1 === 128) {
      Result = "clMaroon"}
     else if ($tmp1 === 32768) {
      Result = "clGreen"}
     else if ($tmp1 === 32896) {
      Result = "clOlive"}
     else if ($tmp1 === 8388608) {
      Result = "clNavy"}
     else if ($tmp1 === 8388736) {
      Result = "clPurple"}
     else if ($tmp1 === 8421376) {
      Result = "clTeal"}
     else if ($tmp1 === 8421504) {
      Result = "clGray"}
     else if ($tmp1 === 12632256) {
      Result = "clSilver"}
     else if ($tmp1 === 255) {
      Result = "clRed"}
     else if ($tmp1 === 65280) {
      Result = "clLime"}
     else if ($tmp1 === 65535) {
      Result = "clYellow"}
     else if ($tmp1 === 16711680) {
      Result = "clBlue"}
     else if ($tmp1 === 16711935) {
      Result = "clFuchsia"}
     else if ($tmp1 === 16776960) {
      Result = "clAqua"}
     else if ($tmp1 === 16777215) {
      Result = "clWhite"}
     else if ($tmp1 === 12698049) {
      Result = "clLtGray"}
     else if ($tmp1 === 8487297) {
      Result = "clDkGray"}
     else if ($tmp1 === 536870912) {
      Result = "clDefault"}
     else if ($tmp1 === 15790320) {
      Result = "clBtnFace"}
     else if ($tmp1 === 65793) {
      Result = "clWindowText"}
     else if ($tmp1 === 16711422) {
      Result = "clWindow"}
     else if ($tmp1 === 14120960) {
      Result = "clHighlight"}
     else if ($tmp1 === 197379) {
      Result = "clHighlightText"}
     else if ($tmp1 === 131586) {
      Result = "clInfoText"}
     else if ($tmp1 === 14811135) {
      Result = "clInfoBk"}
     else if ($tmp1 === 13743257) {
      Result = "clActiveCaption"}
     else if ($tmp1 === 14861738) {
      Result = "clInactiveCaption"}
     else if ($tmp1 === 13395456) {
      Result = "clHotLight"}
     else {
      Result = "$" + $mod.ColorToHex(Color);
    };
    return Result;
  };
  this.StringToColor = function (S) {
    var Result = 0;
    var us = "";
    us = pas.SysUtils.UpperCase(S);
    if (us === "CLNONE") {
      Result = -1}
     else if (us === "CLBLACK") {
      Result = 0}
     else if (us === "CLMAROON") {
      Result = 128}
     else if (us === "CLGREEN") {
      Result = 32768}
     else if (us === "CLOLIVE") {
      Result = 32896}
     else if (us === "CLNAVY") {
      Result = 8388608}
     else if (us === "CLPURPLE") {
      Result = 8388736}
     else if (us === "CLTEAL") {
      Result = 8421376}
     else if (us === "CLGRAY") {
      Result = 8421504}
     else if (us === "CLSILVER") {
      Result = 12632256}
     else if (us === "CLRED") {
      Result = 255}
     else if (us === "CLLIME") {
      Result = 65280}
     else if (us === "CLYELLOW") {
      Result = 65535}
     else if (us === "CLBLUE") {
      Result = 16711680}
     else if (us === "CLFUCHSIA") {
      Result = 16711935}
     else if (us === "CLAQUA") {
      Result = 16776960}
     else if (us === "CLWHITE") {
      Result = 16777215}
     else if (us === "CLLTGRAY") {
      Result = 12698049}
     else if (us === "CLDKGRAY") {
      Result = 8487297}
     else if (us === "CLDEFAULT") {
      Result = 536870912}
     else if (us === "CLBTNFACE") {
      Result = 15790320}
     else if (us === "CLWINDOWTEXT") {
      Result = 65793}
     else if (us === "CLWINDOW") {
      Result = 16711422}
     else if (us === "CLHIGHLIGHT") {
      Result = 14120960}
     else if (us === "CLHIGHLIGHTTEXT") {
      Result = 16777215}
     else if (us === "CLINFOTEXT") {
      Result = 131586}
     else if (us === "CLINFOBK") {
      Result = 14811135}
     else if (us === "CLACTIVECAPTION") {
      Result = 13743257}
     else if (us === "CLINACTIVECAPTION") {
      Result = 14861738}
     else if (us === "CLHOTLIGHT") {
      Result = 13395456}
     else Result = $mod.HexToColor(us);
    return Result;
  };
  this.CharsetToIdent = function (ACharSet) {
    var Result = "";
    var $tmp1 = ACharSet;
    if ($tmp1 === 0) {
      Result = "ANSI_CHARSET"}
     else if ($tmp1 === 1) {
      Result = "DEFAULT_CHARSET"}
     else if ($tmp1 === 2) {
      Result = "SYMBOL_CHARSET"}
     else if ($tmp1 === 77) {
      Result = "MAC_CHARSET"}
     else if ($tmp1 === 128) {
      Result = "SHIFTJIS_CHARSET"}
     else if ($tmp1 === 129) {
      Result = "HANGEUL_CHARSET"}
     else if ($tmp1 === 130) {
      Result = "JOHAB_CHARSET"}
     else if ($tmp1 === 134) {
      Result = "GB2312_CHARSET"}
     else if ($tmp1 === 136) {
      Result = "CHINESEBIG5_CHARSET"}
     else if ($tmp1 === 161) {
      Result = "GREEK_CHARSET"}
     else if ($tmp1 === 162) {
      Result = "TURKISH_CHARSET"}
     else if ($tmp1 === 177) {
      Result = "HEBREW_CHARSET"}
     else if ($tmp1 === 178) {
      Result = "ARABIC_CHARSET"}
     else if ($tmp1 === 186) {
      Result = "BALTIC_CHARSET"}
     else if ($tmp1 === 204) {
      Result = "RUSSIAN_CHARSET"}
     else if ($tmp1 === 222) {
      Result = "THAI_CHARSET"}
     else if ($tmp1 === 238) {
      Result = "EASTEUROPE_CHARSET"}
     else if ($tmp1 === 255) Result = "OEM_CHARSET";
    return Result;
  };
  this.IdentToCharset = function (S) {
    var Result = 0;
    if (S === "ANSI_CHARSET") Result = 0;
    if (S === "DEFAULT_CHARSET") Result = 1;
    if (S === "SYMBOL_CHARSET") Result = 2;
    if (S === "MAC_CHARSET") Result = 77;
    if (S === "SHIFTJIS_CHARSET") Result = 128;
    if (S === "HANGEUL_CHARSET") Result = 129;
    if (S === "JOHAB_CHARSET") Result = 130;
    if (S === "GB2312_CHARSET") Result = 134;
    if (S === "CHINESEBIG5_CHARSET") Result = 136;
    if (S === "GREEK_CHARSET") Result = 161;
    if (S === "TURKISH_CHARSET") Result = 162;
    if (S === "HEBREW_CHARSET") Result = 177;
    if (S === "ARABIC_CHARSET") Result = 178;
    if (S === "BALTIC_CHARSET") Result = 186;
    if (S === "RUSSIAN_CHARSET") Result = 204;
    if (S === "THAI_CHARSET") Result = 222;
    if (S === "EASTEUROPE_CHARSET") Result = 238;
    if (S === "OEM_CHARSET") Result = 255;
    return Result;
  };
  this.FontSizeToHTML = function (sz) {
    var Result = "";
    Result = pas.SysUtils.FloatToStr(sz) + "px";
    Result = pas.SysUtils.StringReplace(Result,",",".",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    return Result;
  };
  this.HTMLChar = function (h) {
    var Result = 0;
    pas.System.Delete({get: function () {
        return h;
      }, set: function (v) {
        h = v;
      }},1,3);
    pas.System.Delete({get: function () {
        return h;
      }, set: function (v) {
        h = v;
      }},h.length - 1,1);
    Result = pas.SysUtils.StrToInt("0x" + h);
    return Result;
  };
  this.HexToColor = function (h) {
    var Result = 0;
    var s = "";
    var i = 0;
    s = "";
    for (var $l1 = 1, $end2 = h.length; $l1 <= $end2; $l1++) {
      i = $l1;
      if (((h.charAt(i - 1) >= "0") && (h.charAt(i - 1) <= "9")) || ((h.charAt(i - 1) >= "A") && (h.charAt(i - 1) <= "F")) || ((h.charAt(i - 1) >= "a") && (h.charAt(i - 1) <= "f"))) s = s + h.charAt(i - 1);
    };
    s = "$" + pas.System.Copy(s,5,2) + pas.System.Copy(s,3,2) + pas.System.Copy(s,1,2);
    Result = pas.SysUtils.StrToInt64(s);
    return Result;
  };
  this.FontSizeToPx = function (sz) {
    var Result = 0.0;
    Result = (sz * 96) / 72;
    return Result;
  };
  this.GetRValue = function (rgb) {
    var Result = 0;
    Result = rgb & 0xFF & 255;
    return Result;
  };
  this.GetGValue = function (rgb) {
    var Result = 0;
    Result = Math.floor(rgb / 256) & 0xFF & 255;
    return Result;
  };
  this.GetBValue = function (rgb) {
    var Result = 0;
    Result = Math.floor(rgb / 65536) & 0xFF & 255;
    return Result;
  };
  this.CreateCanvasRectF = function (Left, Top, Right, Bottom) {
    var Result = $mod.TCanvasRectF.$new();
    Result.Left = Left;
    Result.Top = Top;
    Result.Right = Right;
    Result.Bottom = Bottom;
    return Result;
  };
  this.CreateCanvasPointF = function (X, Y) {
    var Result = $mod.TCanvasPointF.$new();
    Result.X = X;
    Result.Y = Y;
    return Result;
  };
  this.CreateCanvasSizeF = function (cx, cy) {
    var Result = $mod.TCanvasSizeF.$new();
    Result.cx = cx;
    Result.cy = cy;
    return Result;
  };
  this.RGB = function (r, g, b) {
    var Result = 0;
    Result = r | (g << 8) | (b << 16);
    return Result;
  };
  this.CSSFont = function (Font) {
    var Result = "";
    var res = "";
    var fs = "";
    res = "font-family:" + Font.FName + ";";
    res = res + "font-style: normal;";
    if ($mod.TFontStyle.fsBold in Font.FStyle) res = res + "font-weight: bold;";
    if ($mod.TFontStyle.fsItalic in Font.FStyle) res = res + "font-style: italic;";
    fs = "";
    if ($mod.TFontStyle.fsUnderline in Font.FStyle) fs = fs + " underline";
    if ($mod.TFontStyle.fsStrikeOut in Font.FStyle) fs = fs + " line-through";
    if (fs !== "") res = res + "text-decoration:" + fs + ";";
    res = res + "font-size:" + pas.SysUtils.IntToStr(Font.FSize) + "pt;";
    Result = res;
    return Result;
  };
  this.CreateThumbnail = function (ADataURL, AWidth, AHeight, UseAspectRatio, ThumbnailReady) {
    var LImg = null;
    if ((AWidth <= 0) || (AHeight <= 0)) return;
    LImg = document.createElement("IMG");
    LImg.onload = function() {
    
          var w = LImg.width;
          var h = LImg.height;
    
          var neww = AWidth;
          var newh = AHeight;
    
          if (UseAspectRatio) {
            if ((w/neww) > (h/newh))
            {
              newh = h / (w/neww);
            }
            else
            {
              neww = w / (h/newh);
            }
          }
          var LCanvas = document.createElement('CANVAS');
          var ctx = LCanvas.getContext("2d");
          ctx.drawImage(LImg, 0, 0, neww, newh);
          var res = LCanvas.toDataURL("image/png");
          ThumbnailReady(res);
        };
    LImg.setAttribute("src",ADataURL);
  };
  $mod.$init = function () {
    $impl.FCache = $impl.TGraphicCacheList.$create("Create$2");
    $impl.FQueue = pas.Classes.TStringList.$create("Create$1");
  };
},["WEBLib.Forms","Math","SysUtils","contnrs"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($impl,"TGraphicCache",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FImage = null;
      this.FID = "";
    };
    this.$final = function () {
      this.FImage = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AImage, AID) {
      this.FImage = AImage;
      this.FID = AID;
      return this;
    };
  });
  rtl.createClass($impl,"TGraphicCacheList",pas.contnrs.TObjectList,function () {
    this.Find = function (AID, FImage) {
      var Result = false;
      var I = 0;
      var it = null;
      Result = false;
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = rtl.as(this.GetItem(I),$impl.TGraphicCache);
        if ((it.FID === AID) && (it.FImage != null)) {
          FImage.set(it.FImage);
          Result = true;
          break;
        };
      };
      return Result;
    };
    this.Exists = function (AID) {
      var Result = false;
      var I = 0;
      var it = null;
      Result = false;
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = rtl.as(this.GetItem(I),$impl.TGraphicCache);
        if ((it.FID === AID) && (it.FImage != null)) {
          Result = true;
          break;
        };
      };
      return Result;
    };
  });
  $impl.FCache = null;
  $impl.FQueue = null;
  $impl.FCacheCount = 0;
  $impl.MatrixIdentity = function () {
    var Result = $mod.TMatrix.$new();
    Result.m11 = 1;
    Result.m12 = 0;
    Result.m13 = 0;
    Result.m21 = 0;
    Result.m22 = 1;
    Result.m23 = 0;
    Result.m31 = 0;
    Result.m32 = 0;
    Result.m33 = 1;
    return Result;
  };
  $impl.GetPixelRatio = function (ACanvas) {
    var Result = 0.0;
    var res = 0.0;
    var ca = null;
    ca = ACanvas;
    var ctx = ca.FContext,
        dpr = window.devicePixelRatio || 1,
        bsr = ctx.webkitBackingStorePixelRatio ||
              ctx.mozBackingStorePixelRatio ||
              ctx.msBackingStorePixelRatio ||
              ctx.oBackingStorePixelRatio ||
              ctx.backingStorePixelRatio || 1;
    res = dpr / bsr;
    Result = res;
    return Result;
  };
  $impl.MatrixCreateScaling = function (AScaleX, AScaleY) {
    var Result = $mod.TMatrix.$new();
    Result.$assign($impl.MatrixIdentity());
    Result.m11 = AScaleX;
    Result.m22 = AScaleY;
    return Result;
  };
  $impl.MatrixMultiply = function (AMatrix1, AMatrix2) {
    var Result = $mod.TMatrix.$new();
    Result.m11 = (AMatrix1.m11 * AMatrix2.m11) + (AMatrix1.m12 * AMatrix2.m21) + (AMatrix1.m13 * AMatrix2.m31);
    Result.m12 = (AMatrix1.m11 * AMatrix2.m12) + (AMatrix1.m12 * AMatrix2.m22) + (AMatrix1.m13 * AMatrix2.m32);
    Result.m13 = (AMatrix1.m11 * AMatrix2.m13) + (AMatrix1.m12 * AMatrix2.m23) + (AMatrix1.m13 * AMatrix2.m33);
    Result.m21 = (AMatrix1.m21 * AMatrix2.m11) + (AMatrix1.m22 * AMatrix2.m21) + (AMatrix1.m23 * AMatrix2.m31);
    Result.m22 = (AMatrix1.m21 * AMatrix2.m12) + (AMatrix1.m22 * AMatrix2.m22) + (AMatrix1.m23 * AMatrix2.m32);
    Result.m23 = (AMatrix1.m21 * AMatrix2.m13) + (AMatrix1.m22 * AMatrix2.m23) + (AMatrix1.m23 * AMatrix2.m33);
    Result.m31 = (AMatrix1.m31 * AMatrix2.m11) + (AMatrix1.m32 * AMatrix2.m21) + (AMatrix1.m33 * AMatrix2.m31);
    Result.m32 = (AMatrix1.m31 * AMatrix2.m12) + (AMatrix1.m32 * AMatrix2.m22) + (AMatrix1.m33 * AMatrix2.m32);
    Result.m33 = (AMatrix1.m31 * AMatrix2.m13) + (AMatrix1.m32 * AMatrix2.m23) + (AMatrix1.m33 * AMatrix2.m33);
    return Result;
  };
});
rtl.module("WEBLib.Controls",["System","Classes","WEBLib.Graphics","Types","SysUtils","Web"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.VK_CANCEL = 3;
  this.VK_BACK = 8;
  this.VK_TAB = 9;
  this.VK_RETURN = 13;
  this.VK_SHIFT = 16;
  this.VK_CONTROL = 17;
  this.VK_MENU = 18;
  this.VK_PAUSE = 19;
  this.VK_CAPITAL = 20;
  this.VK_ESCAPE = 27;
  this.VK_SPACE = 32;
  this.VK_PRIOR = 33;
  this.VK_NEXT = 34;
  this.VK_END = 35;
  this.VK_HOME = 36;
  this.VK_LEFT = 37;
  this.VK_UP = 38;
  this.VK_RIGHT = 39;
  this.VK_DOWN = 40;
  this.VK_PRINT = 42;
  this.VK_SNAPSHOT = 44;
  this.VK_INSERT = 45;
  this.VK_DELETE = 46;
  this.VK_HELP = 47;
  this.VK_LWIN = 91;
  this.VK_RWIN = 92;
  this.VK_NUMPAD0 = 96;
  this.VK_NUMPAD1 = 97;
  this.VK_NUMPAD2 = 98;
  this.VK_NUMPAD3 = 99;
  this.VK_NUMPAD4 = 100;
  this.VK_NUMPAD5 = 101;
  this.VK_NUMPAD6 = 102;
  this.VK_NUMPAD7 = 103;
  this.VK_NUMPAD8 = 104;
  this.VK_NUMPAD9 = 105;
  this.VK_MULTIPLY = 106;
  this.VK_ADD = 107;
  this.VK_SEPARATOR = 108;
  this.VK_SUBTRACT = 109;
  this.VK_DECIMAL = 110;
  this.VK_DIVIDE = 111;
  this.VK_F1 = 112;
  this.VK_F2 = 113;
  this.VK_F3 = 114;
  this.VK_F4 = 115;
  this.VK_F5 = 116;
  this.VK_F6 = 117;
  this.VK_F7 = 118;
  this.VK_F8 = 119;
  this.VK_F9 = 120;
  this.VK_F10 = 121;
  this.VK_F11 = 122;
  this.VK_F12 = 123;
  this.VK_F13 = 124;
  this.VK_F14 = 125;
  this.VK_F15 = 126;
  this.VK_F16 = 127;
  this.VK_F17 = 128;
  this.VK_F18 = 129;
  this.VK_F19 = 130;
  this.VK_F20 = 131;
  this.VK_F21 = 132;
  this.VK_F22 = 133;
  this.VK_F23 = 134;
  this.VK_F24 = 135;
  this.VK_NUMLOCK = 144;
  $mod.$rtti.$inherited("TCursor",rtl.longint,{});
  this.crDefault = 0;
  this.crNone = 1;
  this.crArrow = 2;
  this.crCross = 3;
  this.crIBeam = 4;
  this.crSize = 5;
  this.crSizeNESW = 6;
  this.crSizeNS = 7;
  this.crSizeNWSE = 8;
  this.crSizeWE = 9;
  this.crUpArrow = 10;
  this.crHourGlass = 11;
  this.crDrag = 12;
  this.crNoDrop = 13;
  this.crHSplit = 14;
  this.crVSplit = 15;
  this.crMultIDrag = 16;
  this.crSQLWait = 17;
  this.crNo = 18;
  this.crAppStart = 19;
  this.crHelp = 20;
  this.crHandPoint = 21;
  this.crSizeAll = 22;
  this.CSSBackground = "background-color";
  this.CSSZIndex = "z-index";
  $mod.$rtti.$Class("TCSSCodeManager");
  this.TDragState = {"0": "dsDragEnter", dsDragEnter: 0, "1": "dsDragLeave", dsDragLeave: 1, "2": "dsDragMove", dsDragMove: 2};
  $mod.$rtti.$Enum("TDragState",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TDragState});
  this.TDragMode = {"0": "dmManual", dmManual: 0, "1": "dmAutomatic", dmAutomatic: 1};
  $mod.$rtti.$Enum("TDragMode",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TDragMode});
  this.TDragKind = {"0": "dkDrag", dkDrag: 0, "1": "dkDock", dkDock: 1};
  $mod.$rtti.$Enum("TDragKind",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TDragKind});
  rtl.createClass($mod,"TDragObject",pas.System.TObject,function () {
  });
  this.TAlign = {"0": "alNone", alNone: 0, "1": "alTop", alTop: 1, "2": "alBottom", alBottom: 2, "3": "alLeft", alLeft: 3, "4": "alRight", alRight: 4, "5": "alClient", alClient: 5, "6": "alCustom", alCustom: 6};
  $mod.$rtti.$Enum("TAlign",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TAlign});
  this.TMouseButton = {"0": "mbLeft", mbLeft: 0, "1": "mbRight", mbRight: 1, "2": "mbMiddle", mbMiddle: 2};
  $mod.$rtti.$Enum("TMouseButton",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TMouseButton});
  this.TBorderStyle = {"0": "bsNone", bsNone: 0, "1": "bsSingle", bsSingle: 1};
  $mod.$rtti.$Enum("TBorderStyle",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TBorderStyle});
  this.TSizeStyle = {"0": "ssPercent", ssPercent: 0, "1": "ssAbsolute", ssAbsolute: 1, "2": "ssAuto", ssAuto: 2};
  $mod.$rtti.$Enum("TSizeStyle",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TSizeStyle});
  this.TScrollStyle = {"0": "ssNone", ssNone: 0, "1": "ssHorizontal", ssHorizontal: 1, "2": "ssVertical", ssVertical: 2, "3": "ssBoth", ssBoth: 3};
  $mod.$rtti.$Enum("TScrollStyle",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TScrollStyle});
  this.TStyleElements$a = {"0": "seFont", seFont: 0, "1": "seClient", seClient: 1, "2": "seBorder", seBorder: 2};
  $mod.$rtti.$Enum("TStyleElements$a",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TStyleElements$a});
  $mod.$rtti.$Set("TStyleElements",{comptype: $mod.$rtti["TStyleElements$a"]});
  this.TAnchorKind = {"0": "akLeft", akLeft: 0, "1": "akTop", akTop: 1, "2": "akRight", akRight: 2, "3": "akBottom", akBottom: 3};
  $mod.$rtti.$Enum("TAnchorKind",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TAnchorKind});
  $mod.$rtti.$Set("TAnchors",{comptype: $mod.$rtti["TAnchorKind"]});
  $mod.$rtti.$inherited("TElementClassName",rtl.string,{});
  $mod.$rtti.$inherited("TElementID",rtl.string,{});
  this.TElementFont = {"0": "efProperty", efProperty: 0, "1": "efCSS", efCSS: 1};
  $mod.$rtti.$Enum("TElementFont",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TElementFont});
  this.TElementPosition = {"0": "epAbsolute", epAbsolute: 0, "1": "epRelative", epRelative: 1, "2": "epIgnore", epIgnore: 2};
  $mod.$rtti.$Enum("TElementPosition",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TElementPosition});
  this.TElementEvent = {"0": "eeClick", eeClick: 0, "1": "eeMouseDown", eeMouseDown: 1, "2": "eeMouseUp", eeMouseUp: 2, "3": "eeMouseMove", eeMouseMove: 3, "4": "eeDblClick", eeDblClick: 4, "5": "eeKeyPress", eeKeyPress: 5, "6": "eeKeyDown", eeKeyDown: 6, "7": "eeKeyUp", eeKeyUp: 7};
  $mod.$rtti.$Enum("TElementEvent",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TElementEvent});
  $mod.$rtti.$Set("TEventPropagation",{comptype: $mod.$rtti["TElementEvent"]});
  this.TShiftState$a = {"0": "ssShift", ssShift: 0, "1": "ssAlt", ssAlt: 1, "2": "ssCtrl", ssCtrl: 2, "3": "ssLeft", ssLeft: 3, "4": "ssRight", ssRight: 4, "5": "ssMIDdle", ssMIDdle: 5, "6": "ssDouble", ssDouble: 6, "7": "ssTouch", ssTouch: 7, "8": "ssPen", ssPen: 8, "9": "ssCommand", ssCommand: 9};
  $mod.$rtti.$Enum("TShiftState$a",{minvalue: 0, maxvalue: 9, ordtype: 1, enumtype: this.TShiftState$a});
  $mod.$rtti.$Set("TShiftState",{comptype: $mod.$rtti["TShiftState$a"]});
  this.TTextDirection = {"0": "tdDefault", tdDefault: 0, "1": "tdLeftToRight", tdLeftToRight: 1, "2": "tdRightToLeft", tdRightToLeft: 2, "3": "tdInherit", tdInherit: 3};
  $mod.$rtti.$Enum("TTextDirection",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTextDirection});
  rtl.createClass($mod,"TDragSourceObject",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FJSEvent = null;
      this.FObject = null;
    };
    this.$final = function () {
      this.FJSEvent = undefined;
      this.FObject = undefined;
      pas.System.TObject.$final.call(this);
    };
  });
  $mod.$rtti.$MethodVar("TNotifyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMouseEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Button",$mod.$rtti["TMouseButton"]],["Shift",$mod.$rtti["TShiftState"]],["X",rtl.longint],["Y",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMouseWheelEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Shift",$mod.$rtti["TShiftState"]],["WheelDelta",rtl.longint],["MousePos",pas.Types.$rtti["TPoint"]],["Handled",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMouseMoveEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Shift",$mod.$rtti["TShiftState"]],["X",rtl.longint],["Y",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TKeyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AKey",rtl.word,1],["Shift",$mod.$rtti["TShiftState"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TKeyPressEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AChar",rtl.char,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTouchEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["X",rtl.longint],["Y",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TDragOverEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Source",pas.System.$rtti["TObject"]],["X",rtl.longint],["Y",rtl.longint],["State",$mod.$rtti["TDragState"]],["Accept",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TDragDropEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Source",pas.System.$rtti["TObject"]],["X",rtl.longint],["Y",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TStartDragEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["DragObject",$mod.$rtti["TDragObject"],1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TEndDragEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Target",pas.System.$rtti["TObject"]],["X",rtl.longint],["Y",rtl.longint]]), methodkind: 0});
  this.TControlStyleValue = {"0": "csAcceptsControls", csAcceptsControls: 0, "1": "csSetCaption", csSetCaption: 1};
  $mod.$rtti.$Enum("TControlStyleValue",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TControlStyleValue});
  $mod.$rtti.$Set("TControlStyle",{comptype: $mod.$rtti["TControlStyleValue"]});
  rtl.createClass($mod,"TMargins",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOnChange = null;
      this.FLeft = 0;
      this.FTop = 0;
      this.FRight = 0;
      this.FBottom = 0;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetLeft = function (Value) {
      if (Value !== this.FLeft) {
        this.FLeft = Value;
        this.DoChange();
      };
    };
    this.SetTop = function (Value) {
      if (Value !== this.FTop) {
        this.FTop = Value;
        this.DoChange();
      };
    };
    this.SetRight = function (Value) {
      if (Value !== this.FRight) {
        this.FRight = Value;
        this.DoChange();
      };
    };
    this.SetBottom = function (Value) {
      if (Value !== this.FBottom) {
        this.FBottom = Value;
        this.DoChange();
      };
    };
    this.DoChange = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$1 = function () {
      this.FLeft = 3;
      this.FTop = 3;
      this.FBottom = 3;
      this.FRight = 3;
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TMargins.isPrototypeOf(Source)) {
        this.FLeft = rtl.as(Source,$mod.TMargins).FLeft;
        this.FTop = rtl.as(Source,$mod.TMargins).FTop;
        this.FBottom = rtl.as(Source,$mod.TMargins).FBottom;
        this.FRight = rtl.as(Source,$mod.TMargins).FRight;
      } else pas.Classes.TPersistent.Assign.apply(this,arguments);
    };
    var $r = this.$rtti;
    $r.addProperty("Left",2,rtl.longint,"FLeft","SetLeft",{Default: 3});
    $r.addProperty("Top",2,rtl.longint,"FTop","SetTop",{Default: 3});
    $r.addProperty("Right",2,rtl.longint,"FRight","SetRight",{Default: 3});
    $r.addProperty("Bottom",2,rtl.longint,"FBottom","SetBottom",{Default: 3});
  });
  rtl.createClass($mod,"TPadding",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOnChange = null;
      this.FLeft = 0;
      this.FTop = 0;
      this.FRight = 0;
      this.FBottom = 0;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetLeft = function (Value) {
      if (this.FLeft !== Value) {
        this.FLeft = Value;
        this.DoChange();
      };
    };
    this.SetTop = function (Value) {
      if (this.FTop !== Value) {
        this.FTop = Value;
        this.DoChange();
      };
    };
    this.SetRight = function (Value) {
      if (this.FRight !== Value) {
        this.FRight = Value;
        this.DoChange();
      };
    };
    this.SetBottom = function (Value) {
      if (this.FBottom !== Value) {
        this.FBottom = Value;
        this.DoChange();
      };
    };
    this.DoChange = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FLeft = 0;
      this.FTop = 0;
      this.FRight = 0;
      this.FBottom = 0;
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TPadding.isPrototypeOf(Source)) {
        this.FLeft = rtl.as(Source,$mod.TPadding).FLeft;
        this.FRight = rtl.as(Source,$mod.TPadding).FRight;
        this.FTop = rtl.as(Source,$mod.TPadding).FTop;
        this.FBottom = rtl.as(Source,$mod.TPadding).FBottom;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Left",2,rtl.longint,"FLeft","SetLeft",{Default: 0});
    $r.addProperty("Top",2,rtl.longint,"FTop","SetTop",{Default: 0});
    $r.addProperty("Right",2,rtl.longint,"FRight","SetRight",{Default: 0});
    $r.addProperty("Bottom",2,rtl.longint,"FBottom","SetBottom",{Default: 0});
  });
  $mod.$rtti.$Int("TPercentSize",{minvalue: 0, maxvalue: 100, ordtype: 1});
  rtl.createClass($mod,"TControl",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FGotFocus = false;
      this.FCaptureDown = false;
      this.FMouseInsideLayer = false;
      this.FLayer = null;
      this.FCaptured = false;
      this.FControlCreated = false;
      this.FUpdateCount = 0;
      this.FBlockUpdateElement = false;
      this.FElement = null;
      this.FID = "";
      this.FNew = false;
      this.FContainer = null;
      this.FElementEvent = null;
      this.FLastElementEvent = null;
      this.FElementClassName = "";
      this.FColor = 0;
      this.FFont = null;
      this.FParent = null;
      this.FPrevParent = null;
      this.FControls = [];
      this.FOnDragOver = null;
      this.FOnDragDrop = null;
      this.FOnStartDrag = null;
      this.FonEndDrag = null;
      this.FOnClick = null;
      this.FOnDblClick = null;
      this.FOnMouseDown = null;
      this.FOnMouseUp = null;
      this.FOnMouseMove = null;
      this.FOnKeyDown = null;
      this.FOnKeyUp = null;
      this.FOnKeyPress = null;
      this.FOnEnter = null;
      this.FOnExit = null;
      this.FEnabled = false;
      this.FHint = "";
      this.FRole = "";
      this.FShowHint = false;
      this.FTabOrder = 0;
      this.FTabStop = false;
      this.FVisible = false;
      this.FWidth = 0;
      this.FHeight = 0;
      this.FTag$1 = 0;
      this.FAlign = 0;
      this.FAnchors = {};
      this.FAlignWithMargins = false;
      this.FIsAligning = false;
      this.FOnMouseEnter = null;
      this.FOnMouseLeave = null;
      this.FCursor = 0;
      this.FDoubleBuffered = false;
      this.FControlStyle = {};
      this.FMargins = null;
      this.FOnMouseWheel = null;
      this.FParentDoubleBuffered = false;
      this.FParentColor = false;
      this.FParentFont = false;
      this.FOnTouchMove = null;
      this.FOnTouchStart = null;
      this.FOnTouchEnd = null;
      this.FOnTouchCancel = null;
      this.FLinkTouchEvents = false;
      this.FWidthStyle = 0;
      this.FHeightStyle = 0;
      this.FWidthPercent = 0;
      this.FHeightPercent = 0;
      this.FOrigRect = pas.Types.TRect.$new();
      this.FOrigParentRect = pas.Types.TRect.$new();
      this.FIsResizing = false;
      this.FShowFocus = false;
      this.FBorderWidth = 0;
      this.FOrigTop = 0;
      this.FOrigLeft = 0;
      this.FUpdateTopLeft = false;
      this.FEnablePropagation = false;
      this.FParentShowHint = false;
      this.FScriptLoaded = false;
      this.FControlScriptCount = 0;
      this.FControlScriptCountLoaded = 0;
      this.FRequiredScripts = null;
      this.FElementFont = 0;
      this.FElementPosition = 0;
      this.FParentElement = null;
      this.FTagObject = null;
      this.FClipChildren = false;
      this.FTextDirection = 0;
      this.FEventStopPropagation = {};
      this.FParentElementID = "";
      this.FOnResize = null;
      this.FMouseMovePtr = null;
      this.FMouseDownPtr = null;
      this.FMouseUpPtr = null;
      this.FMouseEnterPtr = null;
      this.FMouseLeavePtr = null;
      this.FClickPtr = null;
      this.FDblClickPtr = null;
      this.FKeyDownPtr = null;
      this.FKeyUpPtr = null;
      this.FKeyPressPtr = null;
      this.FInputPtr = null;
      this.FTouchStartPtr = null;
      this.FTouchEndPtr = null;
      this.FTouchMovePtr = null;
      this.FTouchCancelPtr = null;
      this.FExitPtr = null;
      this.FEnterPtr = null;
      this.FWheelPtr = null;
      this.FLayerMouseEnterPtr = null;
      this.FLayerMouseLeavePtr = null;
      this.FScriptLoadedPtr = null;
      this.FChildOrder = 0;
      this.FAllowTouch = false;
    };
    this.$final = function () {
      this.FLayer = undefined;
      this.FElement = undefined;
      this.FContainer = undefined;
      this.FElementEvent = undefined;
      this.FLastElementEvent = undefined;
      this.FFont = undefined;
      this.FParent = undefined;
      this.FPrevParent = undefined;
      this.FControls = undefined;
      this.FOnDragOver = undefined;
      this.FOnDragDrop = undefined;
      this.FOnStartDrag = undefined;
      this.FonEndDrag = undefined;
      this.FOnClick = undefined;
      this.FOnDblClick = undefined;
      this.FOnMouseDown = undefined;
      this.FOnMouseUp = undefined;
      this.FOnMouseMove = undefined;
      this.FOnKeyDown = undefined;
      this.FOnKeyUp = undefined;
      this.FOnKeyPress = undefined;
      this.FOnEnter = undefined;
      this.FOnExit = undefined;
      this.FAnchors = undefined;
      this.FOnMouseEnter = undefined;
      this.FOnMouseLeave = undefined;
      this.FControlStyle = undefined;
      this.FMargins = undefined;
      this.FOnMouseWheel = undefined;
      this.FOnTouchMove = undefined;
      this.FOnTouchStart = undefined;
      this.FOnTouchEnd = undefined;
      this.FOnTouchCancel = undefined;
      this.FOrigRect = undefined;
      this.FOrigParentRect = undefined;
      this.FRequiredScripts = undefined;
      this.FParentElement = undefined;
      this.FTagObject = undefined;
      this.FEventStopPropagation = undefined;
      this.FOnResize = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.GetControlsCount = function () {
      var Result = 0;
      Result = rtl.length(this.FControls);
      return Result;
    };
    this.GetControls = function (Index) {
      var Result = null;
      Result = this.FControls[Index];
      return Result;
    };
    this.SetVisible = function (AValue) {
      if (this.FVisible !== AValue) {
        this.VisibleChanging();
        this.FVisible = AValue;
        this.UpdateElement();
        this.DoRealign();
      };
    };
    this.SetWidth = function (AValue) {
      if (this.FWidth !== AValue) {
        this.FWidth = AValue;
        this.ResetAnchoring();
        this.DoBoundsChange();
        if (this.GetIsLinked() && !this.IsUpdating() && (this.GetElementHandle() != null)) {
          if (AValue >= 0) {
            this.GetElementHandle().style.setProperty("width",pas.SysUtils.IntToStr(AValue))}
           else this.GetElementHandle().style.removeProperty("width");
        };
      };
    };
    this.SetHeight = function (AValue) {
      var dr = null;
      if (this.FHeight !== AValue) {
        if ((this.FAlign in rtl.createSet($mod.TAlign.alLeft,$mod.TAlign.alRight,$mod.TAlign.alClient)) && (this.GetElementHandle() != null)) {
          dr = this.GetElementHandle().getBoundingClientRect();
          if ((dr.top + AValue) >= window.innerHeight) {
            AValue = Math.round(window.innerHeight - dr.top);
          };
        };
        this.FHeight = AValue;
        this.ResetAnchoring();
        this.DoBoundsChange();
        if (this.GetIsLinked() && !this.IsUpdating() && (this.GetElementHandle() != null)) {
          if (AValue >= 0) {
            this.GetElementHandle().style.setProperty("height",pas.SysUtils.IntToStr(AValue))}
           else this.GetElementHandle().style.removeProperty("height");
        };
      };
    };
    this.SetHint = function (AValue) {
      if (this.FHint !== AValue) {
        this.FHint = AValue;
        this.UpdateElement();
      };
    };
    this.SetShowHint = function (AValue) {
      if (this.FShowHint !== AValue) {
        this.FShowHint = AValue;
        this.UpdateElement();
      };
    };
    this.SetTabOrder = function (AValue) {
      if (this.FTabOrder !== AValue) {
        this.FTabOrder = AValue;
        this.UpdateElement();
      };
    };
    this.SetTabStop = function (AValue) {
      if (this.FTabStop !== AValue) {
        this.FTabStop = AValue;
        this.UpdateElement();
      };
    };
    this.SetAlign = function (Value) {
      if (this.FAlign !== Value) {
        this.FAlign = Value;
        this.DoRealign();
      };
    };
    this.SetAlignWithMargins = function (Value) {
      if (this.FAlignWithMargins !== Value) {
        this.FAlignWithMargins = Value;
        this.DoRealign();
      };
    };
    this.GetBoundsRect = function () {
      var Result = pas.Types.TRect.$new();
      Result.Left = this.GetLeft();
      Result.Top = this.GetTop();
      Result.Right = this.GetLeft() + this.GetWidth();
      Result.Bottom = this.GetTop() + this.GetHeight();
      return Result;
    };
    this.SetBoundsRect = function (Value) {
      this.SetBoundsInt(Value.Left,Value.Top,Value.Right - Value.Left,Value.Bottom - Value.Top);
    };
    this.SetID = function (Value) {
      var eh = null;
      if (this.FNew && (this.FID !== Value)) {
        eh = document.getElementById(Value);
        if (eh != null) {
          this.UnbindEvents();
          if (this.FContainer != null) this.FContainer.parentElement.removeChild(this.FContainer);
          this.CreateWithID(Value);
          this.FID = Value;
          return;
        };
      };
      this.FID = Value;
      if (this.FContainer != null) this.FContainer.setAttribute("id",Value);
    };
    this.SetMargins = function (Value) {
      this.FMargins.Assign(Value);
    };
    this.SetAnchors = function (Value) {
      if (rtl.neSet(this.FAnchors,Value)) {
        this.FAnchors = rtl.refSet(Value);
        if (!(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) this.UpdateAnchoring();
      };
    };
    this.GetElementEvent = function () {
      var Result = null;
      Result = this.FElementEvent;
      return Result;
    };
    this.GetClientOrigin = function () {
      var Result = pas.Types.TPoint.$new();
      var r = null;
      Result.$assign(pas.Types.Point(0,0));
      if (this.GetElementHandle() != null) {
        r = this.GetElementHandle().getBoundingClientRect();
        Result.$assign(pas.Types.Point(Math.round(r.left),Math.round(r.top)));
      };
      return Result;
    };
    this.SetHeightStyle = function (Value) {
      if (this.FHeightStyle !== Value) {
        this.FHeightStyle = Value;
        this.UpdateElementSize();
      };
    };
    this.SetWidthStyle = function (Value) {
      if (this.FWidthStyle !== Value) {
        this.FWidthStyle = Value;
        this.UpdateElementSize();
      };
    };
    this.SetHeightPercent = function (Value) {
      if (this.FHeightPercent !== Value) {
        this.FHeightPercent = Value;
        this.UpdateElementSize();
      };
    };
    this.SetWidthPercent = function (Value) {
      if (this.FWidthPercent !== Value) {
        this.FWidthPercent = Value;
        this.UpdateElementSize();
      };
    };
    this.SetShowFocus = function (Value) {
      if (this.FShowFocus !== Value) {
        this.FShowFocus = Value;
        this.UpdateElement();
      };
    };
    this.SetBorderWidth = function (Value) {
      if (this.FBorderWidth !== Value) {
        this.FBorderWidth = Value;
        this.UpdateElement();
      };
    };
    this.GetIsLinked = function () {
      var Result = false;
      Result = !this.FNew;
      return Result;
    };
    this.SetScriptLoaded = function (Value) {
      this.FScriptLoaded = Value;
    };
    this.SetRequiredScripts = function (Value) {
      this.FRequiredScripts.Assign(Value);
    };
    this.SetElementFont = function (Value) {
      if (this.FElementFont !== Value) {
        this.FElementFont = Value;
        this.UpdateElement();
      };
    };
    this.SetElementPosition = function (Value) {
      if (this.FElementPosition !== Value) {
        this.FElementPosition = Value;
        if (this.GetElementHandle() != null) {
          this.UpdateElementSize();
          this.RecreateCanvas();
          this.InternalResize();
        };
      };
    };
    this.SetParentElement = function (Value) {
      if (this.FNew) {
        this.SetElementPosition($mod.TElementPosition.epRelative);
        this.CreateControl();
        this.FParentElement = Value;
        if (this.FParentElement != null) {
          this.FParentElement.appendChild(this.GetContainer());
        };
      } else {
        if (this.FParentElement != null) this.FParentElement.removeChild(this.GetContainer());
        this.FParentElement = Value;
        if (this.FParentElement != null) this.FParentElement.appendChild(this.GetContainer());
      };
      this.UpdateElement();
      this.InitScript();
      this.Invalidate();
    };
    this.SetClipChildren = function (Value) {
      this.FClipChildren = Value;
      this.UpdateElement();
    };
    this.GetClientHeight = function () {
      var Result = 0;
      Result = this.GetHeight();
      return Result;
    };
    this.GetClientWidth = function () {
      var Result = 0;
      Result = this.GetWidth();
      return Result;
    };
    this.SetClientHeight = function (Value) {
      this.SetHeight(Value);
    };
    this.SetClientWidth = function (Value) {
      this.SetWidth(Value);
    };
    this.SetParentElementID = function (Value) {
      var el = null;
      this.FParentElementID = Value;
      el = document.getElementById(this.FParentElementID);
      if (el != null) this.SetParentElement(el);
    };
    this.SetChildOrderEx = function (Value) {
      this.FChildOrder = Value;
    };
    this.GetRole = function () {
      var Result = "";
      Result = this.FRole;
      if (this.GetElementHandle() != null) Result = this.GetElementHandle().getAttribute("role");
      return Result;
    };
    this.SetRole = function (Value) {
      this.FRole = Value;
      if (this.GetElementHandle() != null) {
        if (Value === "") {
          this.GetElementHandle().removeAttribute("role")}
         else this.GetElementHandle().setAttribute("role",Value);
      };
    };
    this.GetContainer = function () {
      var Result = null;
      Result = this.FContainer;
      return Result;
    };
    this.GetChildContainer = function () {
      var Result = null;
      Result = this.FContainer;
      return Result;
    };
    this.SetParentFont = function (Value) {
      if ((Value !== this.FParentFont) && Value && (this.FParent != null)) {
        this.FFont.Assign(this.FParent.FFont);
        this.UpdateElement();
      };
      this.FParentFont = Value;
    };
    this.SetParentColor = function (Value) {
      if ((this.FParentColor !== Value) && Value && (this.FParent != null)) {
        this.SetColor(this.FParent.FColor);
      };
      this.FParentColor = Value;
    };
    this.SetEnabled = function (Value) {
      if (this.FEnabled !== Value) {
        this.FEnabled = Value;
        this.UpdateElement();
      };
    };
    this.RecreateCanvas = function () {
    };
    this.VisibleChanging = function () {
    };
    this.ColorChanging = function () {
    };
    this.GetWidth = function () {
      var Result = 0;
      var cr = null;
      Result = this.FWidth;
      if ((this.GetElementHandle() != null) && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) {
        if (Result === -1) {
          Result = Math.round(this.GetElementHandle().offsetWidth);
        };
        if (this.FWidthStyle !== $mod.TSizeStyle.ssAbsolute) {
          cr = this.GetElementHandle().getBoundingClientRect();
          Result = Math.round(cr.right - cr.left);
        };
      };
      return Result;
    };
    this.GetHeight = function () {
      var Result = 0;
      var cr = null;
      Result = this.FHeight;
      if ((this.GetElementHandle() != null) && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) {
        if (Result === -1) {
          Result = Math.round(this.GetElementHandle().offsetHeight);
        };
        if (this.FHeightStyle !== $mod.TSizeStyle.ssAbsolute) {
          cr = this.GetElementHandle().getBoundingClientRect();
          Result = Math.round(cr.bottom - cr.top);
        };
      };
      return Result;
    };
    this.GetOuterWidth = function () {
      var Result = 0;
      Result = this.FWidth - this.FBorderWidth;
      return Result;
    };
    this.GetOuterHeight = function () {
      var Result = 0;
      Result = this.FHeight - this.FBorderWidth;
      return Result;
    };
    this.GetDesignWidth = function () {
      var Result = 0;
      Result = this.FWidth;
      return Result;
    };
    this.GetDesignHeight = function () {
      var Result = 0;
      Result = this.FHeight;
      return Result;
    };
    this.GetDesignLeft = function () {
      var Result = 0;
      Result = this.FLeft;
      return Result;
    };
    this.GetDesignTop = function () {
      var Result = 0;
      Result = this.FTop;
      return Result;
    };
    this.GetLeft = function () {
      var Result = 0;
      Result = this.FLeft;
      if ((Result === -1) && (this.GetElementHandle() != null) && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) Result = Math.round(this.GetElementHandle().offsetLeft);
      return Result;
    };
    this.GetTop = function () {
      var Result = 0;
      Result = this.FTop;
      if ((Result === -1) && (this.GetElementHandle() != null) && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) Result = Math.round(this.GetElementHandle().offsetTop);
      return Result;
    };
    this.HandleAllocated = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.ContainerElement = function () {
      var Result = null;
      Result = document.body;
      return Result;
    };
    this.IsStructuralElement = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.IsEnabled = function () {
      var Result = false;
      Result = this.FEnabled;
      return Result;
    };
    this.RecreateElement = function () {
      if (this.GetContainer() != null) {
        this.UnbindEvents();
        this.GetContainer().parentNode.removeChild(this.GetContainer());
        this.FElement = null;
        this.CreateControl();
        if ((this.FParent != null) && (this.FParent.GetContainer() != null)) this.FParent.GetChildContainer().appendChild(this.GetContainer());
      };
    };
    this.BindElement = function () {
    };
    this.CreateInitialize = function () {
      this.FRequiredScripts = pas.Classes.TStringList.$create("Create$1");
      this.FOrigRect.$assign(pas.Types.Rect(-1,-1,-1,-1));
      this.FClipChildren = true;
    };
    this.ClearControls = function () {
      this.FControls = rtl.arraySetLength(this.FControls,null,0);
    };
    this.SetControlCursor = function (Value) {
      this.FCursor = Value;
      if ((this.FElementClassName === "") && (this.GetElementHandle() != null)) {
        this.SetElementPointer(this.GetElementHandle(),Value);
      };
    };
    this.GetMouseEventButton = function (Event) {
      var Result = 0;
      Result = $mod.TMouseButton.mbLeft;
      var $tmp1 = Event.button;
      if ($tmp1 === 0) {
        Result = $mod.TMouseButton.mbLeft}
       else if ($tmp1 === 1) {
        Result = $mod.TMouseButton.mbMiddle}
       else if ($tmp1 === 2) Result = $mod.TMouseButton.mbRight;
      return Result;
    };
    this.GetMouseEventShiftState = function (Event) {
      var Result = {};
      Result = {};
      if (Event.shiftKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssShift));
      if (Event.ctrlKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssCtrl));
      if (Event.altKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssAlt));
      if ((Event.buttons & 1) === 1) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssLeft));
      if ((Event.buttons & 2) === 2) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssRight));
      if ((Event.buttons & 4) === 4) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssMIDdle));
      return Result;
    };
    this.GetKeyBoardEventShiftState = function (Event) {
      var Result = {};
      Result = {};
      if (Event.shiftKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssShift));
      if (Event.ctrlKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssCtrl));
      if (Event.altKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssAlt));
      return Result;
    };
    this.GetMouseWheelEventShiftState = function (Event) {
      var Result = {};
      Result = {};
      if (Event.shiftKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssShift));
      if (Event.ctrlKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssCtrl));
      if (Event.altKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssAlt));
      return Result;
    };
    this.GetTouchEventShiftState = function (Event) {
      var Result = {};
      Result = {};
      if (Event.shiftKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssShift));
      if (Event.ctrlKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssCtrl));
      if (Event.altKey) Result = rtl.unionSet(Result,rtl.createSet($mod.TShiftState$a.ssAlt));
      return Result;
    };
    this.HandleDoClick = function (Event) {
      var Result = false;
      this.FElementEvent = Event;
      if ($mod.TElementEvent.eeClick in this.FEventStopPropagation) this.StopPropagation();
      this.Click();
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoWheel = function (Event) {
      var Result = false;
      var ss = {};
      var h = false;
      this.FElementEvent = Event;
      this.StopPropagation();
      ss = rtl.refSet(this.GetMouseWheelEventShiftState(Event));
      h = true;
      this.MouseWheel(rtl.refSet(ss),pas.System.Trunc(-Event.deltaY),{get: function () {
          return h;
        }, set: function (v) {
          h = v;
        }});
      Result = h;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoDblClick = function (Event) {
      var Result = false;
      this.FElementEvent = Event;
      if ($mod.TElementEvent.eeDblClick in this.FEventStopPropagation) this.StopPropagation();
      this.DblClick();
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoMouseDown = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var ss = {};
      var mb = 0;
      this.FElementEvent = Event;
      if ($mod.TElementEvent.eeMouseDown in this.FEventStopPropagation) this.StopPropagation();
      if (!this.CanFocus()) this.PreventDefault();
      this.XYToClient(Event.clientX,Event.clientY,{get: function () {
          return l;
        }, set: function (v) {
          l = v;
        }},{get: function () {
          return t;
        }, set: function (v) {
          t = v;
        }});
      ss = rtl.refSet(this.GetMouseEventShiftState(Event));
      mb = this.GetMouseEventButton(Event);
      this.MouseDown(mb,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoMouseUp = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var ss = {};
      var mb = 0;
      this.FElementEvent = Event;
      if ($mod.TElementEvent.eeMouseUp in this.FEventStopPropagation) this.StopPropagation();
      this.XYToClient(Event.clientX,Event.clientY,{get: function () {
          return l;
        }, set: function (v) {
          l = v;
        }},{get: function () {
          return t;
        }, set: function (v) {
          t = v;
        }});
      ss = rtl.refSet(this.GetMouseEventShiftState(Event));
      mb = this.GetMouseEventButton(Event);
      this.MouseUp(mb,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoMouseMove = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var ss = {};
      this.FElementEvent = Event;
      if ($mod.TElementEvent.eeMouseMove in this.FEventStopPropagation) this.StopPropagation();
      this.XYToClient(Event.clientX,Event.clientY,{get: function () {
          return l;
        }, set: function (v) {
          l = v;
        }},{get: function () {
          return t;
        }, set: function (v) {
          t = v;
        }});
      ss = rtl.refSet(this.GetMouseEventShiftState(Event));
      this.MouseMove(rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoMouseLeave = function (Event) {
      var Result = false;
      if (this.Captured()) return Result;
      Event.stopPropagation();
      this.DoMouseLeave();
      Result = true;
      return Result;
    };
    this.LayerHandleDoMouseEnter = function (Event) {
      var Result = false;
      if ((Event.buttons === 0) && this.Captured() && !this.FMouseInsideLayer) {
        this.ReleaseCapture();
        this.HandleDoMouseUp(Event);
        this.HandleDoMouseLeave(Event);
      };
      this.FMouseInsideLayer = true;
      Result = true;
      return Result;
    };
    this.LayerHandleDoMouseLeave = function (Event) {
      var Result = false;
      this.FMouseInsideLayer = false;
      Result = true;
      return Result;
    };
    this.HandleDoMouseEnter = function (Event) {
      var Result = false;
      if (this.Captured()) return Result;
      Event.stopPropagation();
      this.DoMouseEnter();
      Result = true;
      return Result;
    };
    this.HandleDoKeyDown = function (Event) {
      var Result = false;
      var k = 0;
      var ss = {};
      var undef = false;
      this.FElementEvent = Event;
      if ($mod.TElementEvent.eeKeyDown in this.FEventStopPropagation) this.StopPropagation();
      undef = (Event.key == undefined);
      if (!undef) {
        k = this.GetKeyCode(Event.key,true);
        ss = rtl.refSet(this.GetKeyBoardEventShiftState(Event));
        this.KeyDown({get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }},rtl.refSet(ss));
      };
      Result = true;
      if (k === 0) this.PreventDefault();
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoKeyUp = function (Event) {
      var Result = false;
      var k = 0;
      var ss = {};
      var c = "";
      var undef = false;
      this.FElementEvent = Event;
      if ($mod.TElementEvent.eeKeyUp in this.FEventStopPropagation) this.StopPropagation();
      undef = (Event.key == undefined);
      if (!undef) {
        k = this.GetKeyCode(Event.key,true);
        ss = rtl.refSet(this.GetKeyBoardEventShiftState(Event));
        if (k === 27) {
          c = "\x1B";
          this.KeyPress({get: function () {
              return c;
            }, set: function (v) {
              c = v;
            }});
        };
        this.KeyUp({get: function () {
            return k;
          }, set: function (v) {
            k = v;
          }},rtl.refSet(ss));
      };
      Result = true;
      if (k === 0) this.PreventDefault();
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoKeyPress = function (Event) {
      var Result = false;
      var c = "";
      this.FElementEvent = Event;
      if ($mod.TElementEvent.eeKeyPress in this.FEventStopPropagation) this.StopPropagation();
      if (this.IsKeyCharacter(Event.key)) {
        c = String.fromCharCode(this.GetKeyCode(Event.key,false));
        this.KeyPress({get: function () {
            return c;
          }, set: function (v) {
            c = v;
          }});
      };
      Result = true;
      if (c === "\x00") this.PreventDefault();
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoInput = function (Event) {
      var Result = false;
      var c = "";
      var stemp = "";
      if ($impl.IsAndroid()) {
        if ($mod.TElementEvent.eeKeyPress in this.FEventStopPropagation) this.StopPropagation();
        c = "\x00";
        if ((Event.data != null) && (Event.data.toString() !== "")) {
          stemp = Event.data.toString();
          c = stemp.charAt(stemp.length - 1);
          this.KeyPress({get: function () {
              return c;
            }, set: function (v) {
              c = v;
            }});
        };
        Result = true;
        if (c === "\x00") this.PreventDefault();
        this.FElementEvent = null;
      };
      return Result;
    };
    this.HandleDoExit = function (Event) {
      var Result = false;
      this.DoExit();
      Result = true;
      return Result;
    };
    this.HandleDoEnter = function (Event) {
      var Result = false;
      this.FElementEvent = Event;
      this.StopPropagation();
      this.DoEnter();
      Result = true;
      this.FElementEvent = null;
      this.FGotFocus = true;
      return Result;
    };
    this.HandleDoTouchStart = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var touch = null;
      var ss = {};
      this.FElementEvent = Event;
      this.FLastElementEvent = Event;
      this.StopPropagation();
      if (!this.FAllowTouch) this.PreventDefault();
      if (Event.touches.length > 0) {
        touch = Event.touches.item(0);
        this.XYToClient(touch.clientX,touch.clientY,{get: function () {
            return l;
          }, set: function (v) {
            l = v;
          }},{get: function () {
            return t;
          }, set: function (v) {
            t = v;
          }});
        ss = rtl.refSet(this.GetTouchEventShiftState(Event));
        if (this.FLinkTouchEvents) {
          this.MouseDown($mod.TMouseButton.mbLeft,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
        };
        this.TouchStart(pas.System.Trunc(l),pas.System.Trunc(t));
      };
      Result = true;
      this.FElementEvent = null;
      return Result;
    };
    this.HandleDoTouchMove = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var touch = null;
      var ss = {};
      this.FElementEvent = Event;
      this.FLastElementEvent = Event;
      this.StopPropagation();
      if (!this.FAllowTouch) this.PreventDefault();
      if (this.Captured()) this.PreventDefault();
      if (Event.touches.length > 0) {
        touch = Event.touches.item(0);
        this.XYToClient(touch.clientX,touch.clientY,{get: function () {
            return l;
          }, set: function (v) {
            l = v;
          }},{get: function () {
            return t;
          }, set: function (v) {
            t = v;
          }});
        ss = rtl.refSet(this.GetTouchEventShiftState(Event));
        if (this.FLinkTouchEvents) this.MouseMove(rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
        this.TouchMove(pas.System.Trunc(l),pas.System.Trunc(t));
      };
      this.FElementEvent = null;
      Result = true;
      return Result;
    };
    this.HandleDoTouchEnd = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var touch = null;
      var ss = {};
      this.FElementEvent = Event;
      if (!this.FAllowTouch) this.PreventDefault();
      this.ReleaseCapture();
      this.StopPropagation();
      if ((this.FLastElementEvent != null) && (this.FLastElementEvent.touches.length > 0)) {
        touch = this.FLastElementEvent.touches.item(0);
        this.XYToClient(touch.clientX,touch.clientY,{get: function () {
            return l;
          }, set: function (v) {
            l = v;
          }},{get: function () {
            return t;
          }, set: function (v) {
            t = v;
          }});
        ss = rtl.refSet(this.GetTouchEventShiftState(Event));
        if (this.FLinkTouchEvents) {
          this.MouseUp($mod.TMouseButton.mbLeft,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
        };
        this.TouchEnd(pas.System.Trunc(l),pas.System.Trunc(t));
      };
      this.FElementEvent = null;
      Result = true;
      return Result;
    };
    this.HandleDoTouchCancel = function (Event) {
      var Result = false;
      var l = 0.0;
      var t = 0.0;
      var touch = null;
      var ss = {};
      this.FElementEvent = Event;
      this.ReleaseCapture();
      this.StopPropagation();
      if (Event.touches.length > 0) {
        touch = Event.touches.item(0);
        this.XYToClient(touch.clientX,touch.clientY,{get: function () {
            return l;
          }, set: function (v) {
            l = v;
          }},{get: function () {
            return t;
          }, set: function (v) {
            t = v;
          }});
        ss = rtl.refSet(this.GetTouchEventShiftState(Event));
        if (this.FLinkTouchEvents) {
          this.MouseUp($mod.TMouseButton.mbLeft,rtl.refSet(ss),pas.System.Trunc(l),pas.System.Trunc(t));
        };
        this.TouchCancel(pas.System.Trunc(l),pas.System.Trunc(t));
      };
      this.FElementEvent = null;
      Result = true;
      return Result;
    };
    this.HandleFontChanged = function (Sender) {
      if (this.FUpdateCount === 0) {
        this.SetParentFont(false);
        this.ParentFontChanged();
      };
      this.FontChanged();
    };
    this.ParentFontChanged = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.GetControls(i).FParentFont) {
          this.GetControls(i).FFont.Assign(this.FFont);
          this.GetControls(i).FontChanged();
          this.GetControls(i).ParentFontChanged();
        };
      };
    };
    this.DoExit = function () {
      if (this.FOnExit != null) this.FOnExit(this);
    };
    this.DoEnter = function () {
      if (this.FOnEnter != null) this.FOnEnter(this);
    };
    this.Click = function () {
      if ((this.FOnClick != null) && this.IsEnabled()) this.FOnClick(this);
    };
    this.UpdateElement = function () {
      if (this.FBlockUpdateElement || (this.FUpdateCount > 0)) return;
      if ((this.GetElementHandle() != null) && (this.GetElementHandle() !== this.ContainerElement()) && !this.IsUpdating()) {
        this.UpdateElementData();
        if (!this.GetIsLinked()) {
          this.UpdateElementVisual();
        };
      };
    };
    this.UpdateElementSize = function () {
      var eh = null;
      var offsLeft = 0;
      var offsTop = 0;
      var ow = 0;
      var ctrl = null;
      var cr = null;
      if (this.FBlockUpdateElement || (this.FUpdateCount > 0)) return;
      if (this.GetIsLinked()) return;
      if ((this.GetElementHandle() != null) && (this.GetElementHandle() !== this.ContainerElement())) {
        eh = this.GetElementHandle();
        offsLeft = 0;
        offsTop = 0;
        ctrl = this.FParent;
        while ((ctrl != null) && (ctrl.FElementPosition !== $mod.TElementPosition.epAbsolute)) {
          if (ctrl.GetIsLinked() && (ctrl.GetElementHandle() != null) && (ctrl.GetElementHandle().getAttribute("position") !== "absolute")) {
            cr = ctrl.GetElementHandle().getBoundingClientRect();
            offsLeft = Math.round(cr.left);
            offsTop = Math.round(cr.top);
            break;
          };
          ctrl = ctrl.FParent;
        };
        if ((this.FParent != null) && this.FParent.IsStructuralElement()) {
          offsLeft = this.FParent.GetLeft();
          offsTop = this.FParent.GetTop();
        };
        if (this.FElementPosition === $mod.TElementPosition.epAbsolute) {
          if (this.FTop !== -1) {
            eh.style.setProperty("top",pas.SysUtils.IntToStr(this.FTop + offsTop) + "px")}
           else eh.style.setProperty("top","");
          if (this.FLeft !== -1) {
            eh.style.setProperty("left",pas.SysUtils.IntToStr(this.FLeft + offsLeft) + "px")}
           else eh.style.setProperty("left","");
        } else {
          eh.style.removeProperty("top");
          eh.style.removeProperty("left");
        };
        if (this.FWidthStyle === $mod.TSizeStyle.ssAbsolute) {
          ow = this.GetOuterWidth();
          if (this.FWidth !== -1) {
            eh.style.setProperty("width",pas.SysUtils.IntToStr(ow) + "px")}
           else eh.style.removeProperty("width");
        };
        if (this.FWidthStyle === $mod.TSizeStyle.ssAuto) {
          eh.style.removeProperty("width");
        };
        if (this.FHeightStyle === $mod.TSizeStyle.ssAbsolute) {
          if (this.FHeight !== -1) {
            eh.style.setProperty("height",pas.SysUtils.IntToStr(this.GetOuterHeight()) + "px")}
           else eh.style.removeProperty("height");
        };
        if (this.FHeightStyle === $mod.TSizeStyle.ssAuto) {
          eh.style.removeProperty("height");
        };
        if (this.FWidthStyle === $mod.TSizeStyle.ssPercent) {
          if (this.FWidth !== -1) {
            eh.style.setProperty("width",pas.SysUtils.IntToStr(this.FWidthPercent) + "%")}
           else eh.style.removeProperty("width");
        };
        if (this.FHeightStyle === $mod.TSizeStyle.ssPercent) {
          if (this.FHeight !== -1) {
            eh.style.setProperty("height",pas.SysUtils.IntToStr(this.FHeightPercent) + "%")}
           else eh.style.removeProperty("height");
        };
        if (this.FElementPosition === $mod.TElementPosition.epAbsolute) {
          eh.style.setProperty("position","absolute")}
         else if (this.FElementPosition === $mod.TElementPosition.epRelative) {
          eh.style.setProperty("position","relative")}
         else eh.style.removeProperty("position");
      };
    };
    this.UpdateElementVisual = function () {
      var eh = null;
      var useCSS = false;
      eh = this.GetElementHandle();
      if (!(eh != null)) return;
      if (this.IsUpdating()) return;
      if (this.FParentFont && (this.FParent != null)) {
        this.FFont.Assign(this.FParent.FFont);
      };
      if (this.FElementClassName === "") {
        if (this.FClipChildren) {
          eh.style.setProperty("overflow","hidden")}
         else eh.style.setProperty("overflow","");
      };
      if (this.FElementClassName === "") {
        this.SetElementPointer(eh,this.FCursor);
      };
      if (this.Captured()) this.FLayer.style.setProperty("cursor",eh.style.getPropertyValue("cursor"));
      if ((this.FElementClassName !== "") || this.CanShowFocus()) {
        eh.style.setProperty("outline","")}
       else eh.style.setProperty("outline","none");
      this.UpdateElementSize();
      var $tmp1 = this.FTextDirection;
      if ($tmp1 === $mod.TTextDirection.tdDefault) {
        eh.style.removeProperty("direction")}
       else if ($tmp1 === $mod.TTextDirection.tdRightToLeft) {
        eh.style.setProperty("direction","rtl")}
       else if ($tmp1 === $mod.TTextDirection.tdLeftToRight) {
        eh.style.setProperty("direction","ltr")}
       else if ($tmp1 === $mod.TTextDirection.tdInherit) eh.style.setProperty("direction","inherit");
      if (this.FElementClassName === "") {
        eh.style.setProperty("webkit-user-select","none");
        eh.style.setProperty("moz-user-select","none");
        eh.style.setProperty("khtml-user-select","none");
        eh.style.setProperty("ms-user-select","none");
        eh.style.setProperty("user-select","none");
        eh.style.setProperty("-webkit-tap-highlight-color","transparent");
      };
      $mod.SetHTMLElementColor(eh,this.FColor,!((this.FElementClassName === "") && !this.GetIsLinked()));
      useCSS = !((this.FElementClassName === "") && (this.FElementFont === $mod.TElementFont.efProperty) && !this.GetIsLinked());
      $mod.SetHTMLElementFont(eh,this.FFont,useCSS);
      if (!useCSS) {
        if (this.IsEnabled()) eh.style.setProperty("color",pas["WEBLib.Graphics"].ColorToHTML(this.FFont.FColor));
      } else {
        eh.style.removeProperty("color");
      };
    };
    this.UpdateElementData = function () {
      var eh = null;
      eh = this.GetElementHandle();
      if (eh != null) {
        if (!(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) {
          if (this.FVisible) {
            eh.style.setProperty("display","")}
           else eh.style.setProperty("display","none");
        };
        this.EnableTab();
        if (this.IsEnabled()) {
          this.FContainer.removeAttribute("disabled")}
         else this.FContainer.setAttribute("disabled","");
        if (this.GetIsLinked() && (this.FHint === "")) return;
        if (this.GetRole() !== "") this.FContainer.setAttribute("role",this.FRole);
        if (this.FShowHint && (this.FHint !== "")) {
          this.FContainer.setAttribute("title",this.FHint)}
         else this.FContainer.removeAttribute("title");
        if (!this.IsEnabled()) eh.style.removeProperty("color");
      };
    };
    this.UpdateParent = function () {
      this.InternalUpdateParent();
      if ((pas.Classes.TComponentStateItem.csLoading in this.FComponentState) && (this.FParent != null) && !(pas.Classes.TComponentStateItem.csLoading in this.FParent.FComponentState)) this.Loaded();
      this.UpdateChildren(this.FPrevParent);
      this.UpdateChildren(this.FParent);
    };
    this.UpdateControlSize = function (AWidth, AHeight) {
      this.FWidth = AWidth;
      this.FHeight = AHeight;
    };
    this.InternalUpdateParent = function () {
      var p = null;
      p = this.FPrevParent;
      if (this.FNew) {
        this.CreateControl();
        if (this.GetContainer() != null) {
          if ((this.FParent != null) && !(this.FParent.GetContainer() != null)) this.FParent.CreateControl();
          if ((this.FParent !== p) && (p != null) && (p.GetContainer() != null)) p.GetChildContainer().removeChild(this.GetContainer());
          if ((this.FParent != null) && (this.FParent.GetContainer() != null)) {
            this.FParent.GetChildContainer().appendChild(this.GetContainer());
          };
        };
      };
    };
    this.UpdateChildren = function (AControl) {
      var I = 0;
      var c = null;
      if (AControl != null) {
        AControl.DoRealign();
        if ($mod.TCustomControl.isPrototypeOf(AControl)) {
          rtl.as(AControl,$mod.TCustomControl).RecreateCanvas();
          rtl.as(AControl,$mod.TCustomControl).Invalidate();
        };
        for (var $l1 = 0, $end2 = AControl.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          c = AControl.GetControls(I);
          this.UpdateChildren(c);
        };
      };
    };
    this.PersistinHTML = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).PersistinHTML();
      };
    };
    this.InitFromHTML = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).InitFromHTML();
      };
    };
    this.DisableTab = function () {
      var i = 0;
      if (!(this.FTabStop && this.CanFocus())) {
        if (this.GetContainer() != null) this.GetContainer().setAttribute("tabindex","-1");
      };
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).DisableTab();
      };
    };
    this.EnableTab = function () {
      var i = 0;
      if (this.FContainer != null) {
        if (this.FTabStop && this.CanFocus()) {
          this.FContainer.setAttribute("tabindex",pas.SysUtils.IntToStr(this.FTabOrder + 1));
        } else {
          this.FContainer.setAttribute("tabindex","-1");
        };
      };
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).EnableTab();
      };
    };
    this.SetElementClassName = function (AValue) {
      if (this.FElementClassName !== AValue) {
        this.FElementClassName = AValue;
        if (this.FContainer != null) this.FContainer.setAttribute("class",AValue);
        this.UpdateElement();
      };
    };
    this.SetColor = function (AValue) {
      this.FColor = AValue;
      this.UpdateElement();
      this.ColorChanging();
    };
    this.SetFont = function (AValue) {
      this.FFont.SetName(AValue.FName);
      this.FFont.SetSize(AValue.FSize);
      this.FFont.SetStyle(rtl.refSet(AValue.FStyle));
      this.FFont.SetColor(AValue.FColor);
    };
    this.SetParent = function (AValue) {
      if (this.FParent !== AValue) {
        if (this.FParent != null) this.FParent.UnRegisterParent(this);
        this.FPrevParent = this.FParent;
        this.FParent = AValue;
        this.FGotFocus = false;
        this.UpdateParent();
        this.UpdateElement();
        this.InitScript();
        if (this.FParent != null) this.FParent.RegisterParent(this);
        this.Realign();
      };
    };
    this.RegisterParent = function (AValue) {
      this.FControls = rtl.arraySetLength(this.FControls,null,rtl.length(this.FControls) + 1);
      this.FControls[rtl.length(this.FControls) - 1] = AValue;
    };
    this.UnRegisterParent = function (AValue) {
      var i = 0;
      var flg = false;
      flg = false;
      for (var $l1 = 0, $end2 = rtl.length(this.FControls) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.FControls[i] === AValue) {
          flg = true;
        };
        if (flg && (i < (rtl.length(this.FControls) - 1))) this.FControls[i] = this.FControls[i + 1];
      };
      if (flg) this.FControls = rtl.arraySetLength(this.FControls,null,rtl.length(this.FControls) - 1);
    };
    this.SetLeft = function (AValue) {
      if (this.FLeft !== AValue) {
        this.FLeft = AValue;
        this.ResetAnchoring();
        if (!this.FUpdateTopLeft) this.FOrigLeft = AValue;
        this.UpdateElementSize();
        this.RecreateCanvas();
        this.InternalResize();
        if (!(pas.Classes.TComponentStateItem.csLoading in this.FComponentState) && (this.FAlign !== $mod.TAlign.alNone) && (this.FParent != null)) {
          this.DoRealign();
        };
      };
    };
    this.SetTop = function (AValue) {
      if (this.FTop !== AValue) {
        this.FTop = AValue;
        this.ResetAnchoring();
        if (!this.FUpdateTopLeft) this.FOrigTop = AValue;
        this.UpdateElementSize();
        this.RecreateCanvas();
        this.InternalResize();
        if (!(pas.Classes.TComponentStateItem.csLoading in this.FComponentState) && (this.FAlign !== $mod.TAlign.alNone) && (this.FParent != null)) {
          this.DoRealign();
        };
      };
    };
    this.MouseUp = function (Button, Shift, X, Y) {
      if (this.FOnMouseUp != null) this.FOnMouseUp(this,Button,rtl.refSet(Shift),X,Y);
    };
    this.MouseDown = function (Button, Shift, X, Y) {
      if (this.FOnMouseDown != null) this.FOnMouseDown(this,Button,rtl.refSet(Shift),X,Y);
    };
    this.MouseMove = function (Shift, X, Y) {
      if (this.FOnMouseMove != null) this.FOnMouseMove(this,rtl.refSet(Shift),X,Y);
    };
    this.TouchStart = function (X, Y) {
      if (this.FOnTouchStart != null) this.FOnTouchStart(this,X,Y);
    };
    this.TouchMove = function (X, Y) {
      if (this.FOnTouchMove != null) this.FOnTouchMove(this,X,Y);
    };
    this.TouchEnd = function (X, Y) {
      if (this.FOnTouchEnd != null) this.FOnTouchEnd(this,X,Y);
    };
    this.TouchCancel = function (X, Y) {
      if (this.FOnTouchCancel != null) this.FOnTouchCancel(this,X,Y);
    };
    this.DoMouseEnter = function () {
      if (this.FOnMouseEnter != null) this.FOnMouseEnter(this);
    };
    this.DoMouseLeave = function () {
      if (this.FOnMouseLeave != null) this.FOnMouseLeave(this);
    };
    this.MouseWheel = function (Shift, WheelDelta, Handled) {
      if (this.FOnMouseWheel != null) this.FOnMouseWheel(this,rtl.refSet(Shift),WheelDelta,pas.Types.TPoint.$clone(pas.Types.Point(0,0)),Handled);
    };
    this.DblClick = function () {
      if (this.FOnDblClick != null) this.FOnDblClick(this);
    };
    this.KeyDown = function (Key, Shift) {
      if (this.FOnKeyDown != null) this.FOnKeyDown(this,Key,rtl.refSet(Shift));
    };
    this.KeyPress = function (Key) {
      if (this.FOnKeyPress != null) this.FOnKeyPress(this,Key);
    };
    this.KeyUp = function (Key, Shift) {
      if (this.FOnKeyUp != null) this.FOnKeyUp(this,Key,rtl.refSet(Shift));
    };
    this.SetFocus = function () {
      var e = null;
      if (!this.CanFocus()) return;
      if (this.GetElementHandle() != null) {
        e = this.GetElementHandle();
        if (this.FGotFocus) {
          e.focus();
        } else {
          setTimeout(function() {e.focus();}, 1);
        };
      };
    };
    this.DoMarginsChanged = function (Sender) {
      this.DoRealign();
    };
    this.DoRealign = function () {
      if ((this.FParent != null) && !this.FParent.IsUpdating()) {
        this.FParent.AlignControl(this.FParent);
      };
    };
    this.DoBoundsChange = function () {
      var b = false;
      var frm = null;
      this.UpdateElementSize();
      this.RecreateCanvas();
      if (this.FIsResizing) return;
      this.FIsResizing = true;
      this.InternalResize();
      this.DoRealign();
      b = false;
      frm = pas["WEBLib.Forms"].GetParentForm(this);
      if (frm != null) {
        b = frm.FIsResizing$1;
        b = b || (frm.FUpdateCount > 0);
      };
      b = b || (this.FUpdateCount > 0);
      b = b || this.FIsAligning;
      if (!b) this.UpdateChildAnchoring();
      this.FIsResizing = false;
    };
    this.DoEndDrag = function (Target, X, Y) {
      if (this.FonEndDrag != null) this.FonEndDrag(this,Target,X,Y);
    };
    this.DoStartDrag = function (DragObject) {
      if (this.FOnStartDrag != null) this.FOnStartDrag(this,DragObject);
    };
    this.DragOver = function (Source, X, Y, State, Accept) {
      if (this.FOnDragOver != null) this.FOnDragOver(this,Source,X,Y,State,Accept);
    };
    this.IsFocused = function () {
      var Result = false;
      Result = this.FContainer === document.activeElement;
      return Result;
    };
    this.Focused = function () {
      var Result = false;
      Result = this.FContainer === document.activeElement;
      return Result;
    };
    this.GetID = function () {
      var Result = "";
      Result = this.FID;
      return Result;
    };
    this.GetElementHandle = function () {
      var Result = null;
      Result = null;
      if ((this.FContainer != null) && this.FControlCreated) Result = this.FContainer;
      return Result;
    };
    this.GetElementBindHandle = function () {
      var Result = null;
      Result = this.GetElementHandle();
      return Result;
    };
    this.GetElement = function () {
      var Result = null;
      Result = document.getElementById(this.GetID());
      return Result;
    };
    this.GetKeyCode = function (AValue, IgnoreCase) {
      var Result = 0;
      var i = 0;
      i = -1;
      var $tmp1 = AValue;
      if ($tmp1 === "Up") {
        i = 38}
       else if ($tmp1 === "Down") {
        i = 40}
       else if ($tmp1 === "Left") {
        i = 37}
       else if ($tmp1 === "Right") {
        i = 39}
       else if ($tmp1 === pas.Web.TJSKeyNames.BackSpace) {
        i = 8}
       else if ($tmp1 === pas.Web.TJSKeyNames.Tab) {
        i = 9}
       else if ($tmp1 === pas.Web.TJSKeyNames.Enter) {
        i = 13}
       else if ($tmp1 === pas.Web.TJSKeyNames.Shift) {
        i = 16}
       else if ($tmp1 === pas.Web.TJSKeyNames.Control) {
        i = 17}
       else if ($tmp1 === pas.Web.TJSKeyNames.Alt) {
        i = 18}
       else if ($tmp1 === pas.Web.TJSKeyNames.Pause) {
        i = 19}
       else if ($tmp1 === pas.Web.TJSKeyNames.CapsLock) {
        i = 20}
       else if ($tmp1 === pas.Web.TJSKeyNames.Escape) {
        i = 27}
       else if ($tmp1 === pas.Web.TJSKeyNames.PageUp) {
        i = 33}
       else if ($tmp1 === pas.Web.TJSKeyNames.PageDown) {
        i = 34}
       else if ($tmp1 === pas.Web.TJSKeyNames._End) {
        i = 35}
       else if ($tmp1 === pas.Web.TJSKeyNames.Home) {
        i = 36}
       else if ($tmp1 === pas.Web.TJSKeyNames.ArrowLeft) {
        i = 37}
       else if ($tmp1 === pas.Web.TJSKeyNames.ArrowUp) {
        i = 38}
       else if ($tmp1 === pas.Web.TJSKeyNames.ArrowRight) {
        i = 39}
       else if ($tmp1 === pas.Web.TJSKeyNames.ArrowDown) {
        i = 40}
       else if ($tmp1 === pas.Web.TJSKeyNames.Insert) {
        i = 45}
       else if ($tmp1 === pas.Web.TJSKeyNames.Delete) {
        i = 46}
       else if ($tmp1 === pas.Web.TJSKeyNames.F1) {
        i = 112}
       else if ($tmp1 === pas.Web.TJSKeyNames.F2) {
        i = 113}
       else if ($tmp1 === pas.Web.TJSKeyNames.F3) {
        i = 114}
       else if ($tmp1 === pas.Web.TJSKeyNames.F4) {
        i = 115}
       else if ($tmp1 === pas.Web.TJSKeyNames.F5) {
        i = 116}
       else if ($tmp1 === pas.Web.TJSKeyNames.F6) {
        i = 117}
       else if ($tmp1 === pas.Web.TJSKeyNames.F7) {
        i = 118}
       else if ($tmp1 === pas.Web.TJSKeyNames.F8) {
        i = 119}
       else if ($tmp1 === pas.Web.TJSKeyNames.F9) {
        i = 120}
       else if ($tmp1 === pas.Web.TJSKeyNames.F10) {
        i = 121}
       else if ($tmp1 === pas.Web.TJSKeyNames.F11) {
        i = 122}
       else if ($tmp1 === pas.Web.TJSKeyNames.F12) {
        i = 123}
       else if ($tmp1 === pas.Web.TJSKeyNames.F13) {
        i = 124}
       else if ($tmp1 === pas.Web.TJSKeyNames.F14) {
        i = 125}
       else if ($tmp1 === pas.Web.TJSKeyNames.F15) {
        i = 126}
       else if ($tmp1 === pas.Web.TJSKeyNames.F16) {
        i = 127}
       else if ($tmp1 === pas.Web.TJSKeyNames.F17) {
        i = 128}
       else if ($tmp1 === pas.Web.TJSKeyNames.F18) {
        i = 129}
       else if ($tmp1 === pas.Web.TJSKeyNames.F19) {
        i = 130}
       else if ($tmp1 === pas.Web.TJSKeyNames.F20) {
        i = 131}
       else {
        if (pas.System.Assigned(AValue) && (AValue.length > 0)) {
          i = AValue.charCodeAt(1 - 1);
          if (IgnoreCase && (i >= 97) && (i <= 122)) i = i & 0xDF;
        };
      };
      Result = i;
      return Result;
    };
    this.IsKeyCharacter = function (AValue) {
      var Result = false;
      var $tmp1 = AValue;
      if (($tmp1 === "Up") || ($tmp1 === "Down") || ($tmp1 === "Left") || ($tmp1 === "Right") || ($tmp1 === pas.Web.TJSKeyNames.Shift) || ($tmp1 === pas.Web.TJSKeyNames.Control) || ($tmp1 === pas.Web.TJSKeyNames.Alt) || ($tmp1 === pas.Web.TJSKeyNames.Pause) || ($tmp1 === pas.Web.TJSKeyNames.CapsLock) || ($tmp1 === pas.Web.TJSKeyNames.PageUp) || ($tmp1 === pas.Web.TJSKeyNames.PageDown) || ($tmp1 === pas.Web.TJSKeyNames._End) || ($tmp1 === pas.Web.TJSKeyNames.Home) || ($tmp1 === pas.Web.TJSKeyNames.ArrowLeft) || ($tmp1 === pas.Web.TJSKeyNames.ArrowUp) || ($tmp1 === pas.Web.TJSKeyNames.ArrowRight) || ($tmp1 === pas.Web.TJSKeyNames.ArrowDown) || ($tmp1 === pas.Web.TJSKeyNames.Insert) || ($tmp1 === pas.Web.TJSKeyNames.Delete) || ($tmp1 === pas.Web.TJSKeyNames.F1) || ($tmp1 === pas.Web.TJSKeyNames.F2) || ($tmp1 === pas.Web.TJSKeyNames.F3) || ($tmp1 === pas.Web.TJSKeyNames.F4) || ($tmp1 === pas.Web.TJSKeyNames.F5) || ($tmp1 === pas.Web.TJSKeyNames.F6) || ($tmp1 === pas.Web.TJSKeyNames.F7) || ($tmp1 === pas.Web.TJSKeyNames.F8) || ($tmp1 === pas.Web.TJSKeyNames.F9) || ($tmp1 === pas.Web.TJSKeyNames.F10) || ($tmp1 === pas.Web.TJSKeyNames.F11) || ($tmp1 === pas.Web.TJSKeyNames.F12) || ($tmp1 === pas.Web.TJSKeyNames.F13) || ($tmp1 === pas.Web.TJSKeyNames.F14) || ($tmp1 === pas.Web.TJSKeyNames.F15) || ($tmp1 === pas.Web.TJSKeyNames.F16) || ($tmp1 === pas.Web.TJSKeyNames.F17) || ($tmp1 === pas.Web.TJSKeyNames.F18) || ($tmp1 === pas.Web.TJSKeyNames.F19) || ($tmp1 === pas.Web.TJSKeyNames.F20)) {
        Result = false}
       else {
        Result = true;
      };
      return Result;
    };
    this.GetClientRect = function () {
      var Result = pas.Types.TRect.$new();
      Result.$assign(pas.Types.Rect(0,0,this.GetWidth(),this.GetHeight()));
      return Result;
    };
    this.CreateControl = function () {
      if (!(this.FElement != null)) {
        this.FElement = this.CreateElement();
        if (this.FElement != null) {
          this.FControlCreated = true;
          this.FContainer = this.FElement;
          if (!(this.GetID() === "body")) this.GetContainer().setAttribute("id",this.GetID());
          this.GetContainer().setAttribute("zindex","0");
          if (this.FElementClassName !== "") this.GetContainer().setAttribute("class",this.FElementClassName);
          this.BindEvents();
          this.UpdateElement();
        };
      };
    };
    this.ClearMethodPointers = function () {
      this.FWheelPtr = null;
      this.FClickPtr = null;
      this.FDblClickPtr = null;
      this.FMouseDownPtr = null;
      this.FMouseUpPtr = null;
      this.FMouseMovePtr = null;
      this.FMouseLeavePtr = null;
      this.FMouseEnterPtr = null;
      this.FKeyDownPtr = null;
      this.FKeyUpPtr = null;
      this.FKeyPressPtr = null;
      this.FInputPtr = null;
      this.FEnterPtr = null;
      this.FExitPtr = null;
      this.FTouchStartPtr = null;
      this.FTouchEndPtr = null;
      this.FTouchMovePtr = null;
      this.FTouchCancelPtr = null;
      this.FLayerMouseLeavePtr = null;
      this.FLayerMouseEnterPtr = null;
      this.FScriptLoadedPtr = null;
    };
    this.GetMethodPointers = function () {
      if (this.FWheelPtr === null) {
        this.FWheelPtr = rtl.createCallback(this,"HandleDoWheel");
        this.FClickPtr = rtl.createCallback(this,"HandleDoClick");
        this.FDblClickPtr = rtl.createCallback(this,"HandleDoDblClick");
        this.FMouseDownPtr = rtl.createCallback(this,"HandleDoMouseDown");
        this.FMouseUpPtr = rtl.createCallback(this,"HandleDoMouseUp");
        this.FMouseMovePtr = rtl.createCallback(this,"HandleDoMouseMove");
        this.FMouseLeavePtr = rtl.createCallback(this,"HandleDoMouseLeave");
        this.FMouseEnterPtr = rtl.createCallback(this,"HandleDoMouseEnter");
        this.FKeyDownPtr = rtl.createCallback(this,"HandleDoKeyDown");
        this.FKeyUpPtr = rtl.createCallback(this,"HandleDoKeyUp");
        this.FKeyPressPtr = rtl.createCallback(this,"HandleDoKeyPress");
        this.FInputPtr = rtl.createCallback(this,"HandleDoInput");
        this.FEnterPtr = rtl.createCallback(this,"HandleDoEnter");
        this.FExitPtr = rtl.createCallback(this,"HandleDoExit");
        this.FTouchStartPtr = rtl.createCallback(this,"HandleDoTouchStart");
        this.FTouchEndPtr = rtl.createCallback(this,"HandleDoTouchEnd");
        this.FTouchMovePtr = rtl.createCallback(this,"HandleDoTouchMove");
        this.FTouchCancelPtr = rtl.createCallback(this,"HandleDoTouchCancel");
        this.FLayerMouseLeavePtr = rtl.createCallback(this,"LayerHandleDoMouseLeave");
        this.FLayerMouseEnterPtr = rtl.createCallback(this,"LayerHandleDoMouseEnter");
        this.FScriptLoadedPtr = rtl.createCallback(this,"RequiredScriptLoaded");
      };
    };
    this.EventsBound = function () {
      var Result = false;
      Result = this.FWheelPtr != null;
      return Result;
    };
    this.BindEvents = function () {
      var eh = null;
      if (this.GetElementBindHandle() != null) {
        this.GetMethodPointers();
        eh = this.GetElementBindHandle();
        eh.addEventListener("wheel",this.FWheelPtr);
        eh.addEventListener("click",this.FClickPtr);
        eh.addEventListener("dblclick",this.FDblClickPtr);
        eh.addEventListener("mousedown",this.FMouseDownPtr);
        eh.addEventListener("mouseup",this.FMouseUpPtr);
        eh.addEventListener("mousemove",this.FMouseMovePtr);
        eh.addEventListener("mouseleave",this.FMouseLeavePtr);
        eh.addEventListener("mouseenter",this.FMouseEnterPtr);
        eh.addEventListener("keydown",this.FKeyDownPtr);
        eh.addEventListener("keyup",this.FKeyUpPtr);
        eh.addEventListener("keypress",this.FKeyPressPtr);
        eh.addEventListener("input",this.FInputPtr);
        eh.addEventListener("focus",this.FEnterPtr);
        eh.addEventListener("blur",this.FExitPtr);
        eh.addEventListener("touchstart",this.FTouchStartPtr);
        eh.addEventListener("touchmove",this.FTouchMovePtr);
        eh.addEventListener("touchend",this.FTouchEndPtr);
        eh.addEventListener("touchcancel",this.FTouchCancelPtr);
      };
    };
    this.UnbindEvents = function () {
      var eh = null;
      if (this.GetElementBindHandle() != null) {
        eh = this.GetElementBindHandle();
        eh.removeEventListener("wheel",this.FWheelPtr);
        eh.removeEventListener("click",this.FClickPtr);
        eh.removeEventListener("dblclick",this.FDblClickPtr);
        eh.removeEventListener("mousedown",this.FMouseDownPtr);
        eh.removeEventListener("mouseup",this.FMouseUpPtr);
        eh.removeEventListener("mousemove",this.FMouseMovePtr);
        eh.removeEventListener("mouseleave",this.FMouseLeavePtr);
        eh.removeEventListener("mouseenter",this.FMouseEnterPtr);
        eh.removeEventListener("keydown",this.FKeyDownPtr);
        eh.removeEventListener("keyup",this.FKeyUpPtr);
        eh.removeEventListener("keypress",this.FKeyPressPtr);
        eh.removeEventListener("focus",this.FEnterPtr);
        eh.removeEventListener("blur",this.FExitPtr);
        eh.removeEventListener("touchstart",this.FTouchStartPtr);
        eh.removeEventListener("touchmove",this.FTouchMovePtr);
        eh.removeEventListener("touchend",this.FTouchEndPtr);
        eh.removeEventListener("touchcancel",this.FTouchEndPtr);
      };
    };
    this.AlignControls = function (AControl, ARect) {
      var $Self = this;
      var j = 0;
      function DoPosition(Control, AAlign) {
        var dl = 0;
        var dt = 0;
        var dr = 0;
        var db = 0;
        if (!Control.AnchoringInitialized()) $Self.InitAnchoring();
        Control.FUpdateTopLeft = true;
        if (Control.FAlignWithMargins) {
          dl = Control.FMargins.FLeft;
          dt = Control.FMargins.FTop;
          db = Control.FMargins.FBottom;
          dr = Control.FMargins.FRight;
        } else {
          dl = 0;
          dt = 0;
          db = 0;
          dr = 0;
        };
        var $tmp1 = AAlign;
        if ($tmp1 === $mod.TAlign.alTop) {
          Control.SetBoundsInt(ARect.Left + dl,ARect.Top + dt,ARect.Right - ARect.Left - dl - dr,Control.GetHeight());
          ARect.Top = ARect.Top + Control.GetHeight() + dt + db;
        } else if ($tmp1 === $mod.TAlign.alBottom) {
          Control.SetBoundsInt(ARect.Left + dl,ARect.Bottom - Control.GetHeight() - db - 1,ARect.Right - ARect.Left - dl - dr - 1,Control.GetHeight());
          ARect.Bottom = ARect.Bottom - Control.GetHeight() - dt - db;
        } else if ($tmp1 === $mod.TAlign.alLeft) {
          Control.SetBoundsInt(ARect.Left + dl,ARect.Top + dt,Control.GetWidth(),ARect.Bottom - ARect.Top - dt - db);
          ARect.Left = ARect.Left + Control.GetWidth() + dl + dr;
        } else if ($tmp1 === $mod.TAlign.alRight) {
          Control.SetBoundsInt(ARect.Right - Control.GetWidth() - dr,ARect.Top + dt,Control.GetWidth(),ARect.Bottom - ARect.Top - db - dt);
          ARect.Right = ARect.Right - Control.GetWidth() - dr - dl;
        } else if ($tmp1 === $mod.TAlign.alClient) {
          Control.SetBoundsInt(ARect.Left + dl,ARect.Top + dt,ARect.Right - ARect.Left - dl - dr,ARect.Bottom - ARect.Top - db - dt);
          ARect.Left = 0;
          ARect.Top = 0;
          ARect.Right = 0;
          ARect.Bottom = 0;
        };
        Control.FUpdateTopLeft = false;
      };
      function DoAlign(AAlign) {
        var i = 0;
        var j = 0;
        var ins = 0;
        var il = null;
        il = pas.Classes.TList.$create("Create$1");
        for (var $l1 = 0, $end2 = $Self.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (($Self.GetControls(i).FAlign === AAlign) && $Self.GetControls(i).FVisible) {
            ins = il.GetCount();
            for (var $l3 = il.GetCount() - 1; $l3 >= 0; $l3--) {
              j = $l3;
              var $tmp4 = AAlign;
              if ($tmp4 === $mod.TAlign.alTop) {
                if ($Self.GetControls(i).FOrigTop < rtl.getObject(il.Get(j)).FOrigTop) ins = j}
               else if ($tmp4 === $mod.TAlign.alLeft) {
                if ($Self.GetControls(i).FOrigLeft < rtl.getObject(il.Get(j)).FOrigLeft) ins = j}
               else if ($tmp4 === $mod.TAlign.alRight) {
                if (($Self.GetControls(i).FOrigLeft + $Self.GetControls(i).GetWidth()) > (rtl.getObject(il.Get(j)).FOrigLeft + rtl.getObject(il.Get(j)).GetWidth())) ins = j}
               else if ($tmp4 === $mod.TAlign.alBottom) if (($Self.GetControls(i).FOrigTop + $Self.GetControls(i).GetHeight()) > (rtl.getObject(il.Get(j)).FOrigTop + rtl.getObject(il.Get(j)).GetHeight())) ins = j;
            };
            il.Insert(ins,$Self.GetControls(i));
          };
        };
        for (var $l5 = 0, $end6 = il.GetCount() - 1; $l5 <= $end6; $l5++) {
          i = $l5;
          DoPosition(rtl.getObject(il.Get(i)),AAlign);
        };
        il = rtl.freeLoc(il);
      };
      DoAlign($mod.TAlign.alTop);
      DoAlign($mod.TAlign.alBottom);
      DoAlign($mod.TAlign.alLeft);
      DoAlign($mod.TAlign.alRight);
      DoAlign($mod.TAlign.alClient);
      DoAlign($mod.TAlign.alCustom);
      for (var $l1 = 0, $end2 = $Self.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        $Self.GetControls(j).AlignControl($Self.GetControls(j));
      };
    };
    this.AlignControl = function (AControl) {
      var r = pas.Types.TRect.$new();
      var cr = null;
      var ovf = "";
      var ovfx = "";
      var ovfy = "";
      var eh = null;
      var el = null;
      var frm = null;
      var ctop = 0;
      var vscrl = 0;
      if (this.FIsAligning) return;
      if (this.IsUpdating()) return;
      frm = pas["WEBLib.Forms"].GetParentForm(this);
      if ((frm != null) && frm.IsUpdating()) return;
      ctop = 0;
      if ((frm != null) && (frm.FFormContainer !== "") && pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(AControl)) {
        el = document.getElementById(frm.FFormContainer);
        if (el != null) {
          cr = el.getBoundingClientRect();
          ctop = Math.round(cr.top);
        };
      };
      this.FIsAligning = true;
      if (!(AControl != null)) return;
      eh = AControl.GetElementHandle();
      if (eh != null) {
        ovf = eh.style.getPropertyValue("overflow");
        ovfx = eh.style.getPropertyValue("overflow-x");
        ovfy = eh.style.getPropertyValue("overflow-y");
        if (this.FClipChildren) {
          eh.style.setProperty("overflow","hidden")}
         else eh.style.setProperty("overflow","");
      };
      r.$assign(this.GetClientRect());
      if ((r.Bottom + ctop) > window.innerHeight) {
        if ((this.FParent != null) && pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(this.FParent)) r.Bottom = window.innerHeight - ctop;
      };
      if ((eh != null) && (eh.tagName === "BODY")) {
        vscrl = 0;
        if (document.body.scrollHeight > document.body.clientHeight) vscrl = 16;
        if (frm.FFormContainer !== "") {
          r.Bottom = Math.round(Math.min(r.Bottom - 2,window.innerHeight - 2));
          r.Right = Math.round(Math.min(r.Right - 2 - vscrl,window.innerWidth - 2));
        } else {
          r.Bottom = frm.GetHeight();
          r.Right = frm.GetWidth();
        };
      };
      if (pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(AControl)) {
        if (r.Bottom > window.innerHeight) r.Bottom = window.innerHeight;
        if (r.Right > window.innerWidth) r.Right = window.innerWidth;
      };
      if (AControl.IsStructuralElement()) r.$assign(this.FParent.GetClientRect());
      this.AlignControls(AControl,r);
      if (eh != null) {
        eh.style.setProperty("overflow",ovf);
        eh.style.setProperty("overflow-x",ovfx);
        eh.style.setProperty("overflow-y",ovfy);
      };
      this.FIsAligning = false;
    };
    this.InitAnchoring = function () {
      var i = 0;
      if (this.AnchoringInitialized()) return;
      if (pas["WEBLib.Forms"].TForm.isPrototypeOf(this)) {
        this.FOrigRect.$assign(pas.Types.Rect(0,0,this.GetDesignWidth(),this.GetDesignHeight()))}
       else this.FOrigRect.$assign(pas.Types.Rect(this.GetDesignLeft(),this.GetDesignTop(),this.GetDesignLeft() + this.GetDesignWidth(),this.GetDesignTop() + this.GetDesignHeight()));
      if (this.FParent != null) {
        if (pas["WEBLib.Forms"].TForm.isPrototypeOf(this.FParent)) {
          this.FOrigParentRect.$assign(pas.Types.Rect(0,0,this.FParent.GetDesignWidth(),this.FParent.GetDesignHeight()))}
         else {
          if (!this.FParent.AnchoringInitialized()) this.FParent.InitAnchoring();
          this.FOrigParentRect.$assign(pas.Types.Rect(this.FParent.GetDesignLeft(),this.FParent.GetDesignTop(),this.FParent.GetDesignLeft() + this.FParent.GetDesignWidth(),this.FParent.GetDesignTop() + this.FParent.GetDesignHeight()));
        };
      };
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).InitAnchoring();
      };
    };
    this.AnchoringInitialized = function () {
      var Result = false;
      Result = (this.FOrigRect.Left !== -1) || (this.FOrigRect.Top !== -1);
      return Result;
    };
    this.InitScript = function () {
    };
    this.Realign = function () {
      this.AlignControl(this);
    };
    this.Loaded = function () {
      var i = 0;
      pas.Classes.TComponent.Loaded.call(this);
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if ((this.GetControls(i).FElementPosition in rtl.createSet($mod.TElementPosition.epRelative,$mod.TElementPosition.epIgnore)) && !this.GetControls(i).GetIsLinked() && (this.GetControls(i).FChildOrder >= 0)) {
          if (this.GetControls(i).FChildOrder < this.GetChildContainer().childNodes.length) {
            this.GetChildContainer().insertBefore(this.GetControls(i).GetContainer(),this.GetChildContainer().childNodes.item(this.GetControls(i).FChildOrder));
          };
        };
        this.GetControls(i).Loaded();
      };
      for (var $l3 = 0, $end4 = this.GetComponentCount() - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        if (pas.Classes.TComponentStateItem.csLoading in this.GetComponent(i).FComponentState) this.GetComponent(i).Loaded();
      };
      var $tmp5 = this.FAlign;
      if ($tmp5 === $mod.TAlign.alClient) {
        if (this.FParent != null) this.SetBoundsInt(0,0,this.FParent.FWidth,this.FParent.FHeight);
      };
      this.Resize();
      this.UpdateElement();
    };
    this.InternalResize = function () {
      if (pas.Classes.TComponentStateItem.csLoading in this.FComponentState) return;
      this.Resize();
    };
    this.FontChanged = function () {
      this.UpdateElement();
    };
    this.DisposeOf = function () {
      var t = null;
      t = this;
      t = rtl.freeLoc(t);
    };
    this.HookElement = function () {
      var el = null;
      var i = 0;
      el = document.getElementById(this.FID);
      this.FContainer = el;
      this.BindElement();
      this.BindEvents();
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).HookElement();
      };
    };
    this.CreateWithID = function (AID) {
      var el = null;
      this.ClearMethodPointers();
      this.FUpdateCount = 0;
      this.FControlCreated = false;
      this.FLinkTouchEvents = true;
      this.FIsResizing = false;
      if (((this.FOwner != null) && (pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState)) || !(this.FOwner != null)) {
        this.Loading();
      };
      this.FElementPosition = $mod.TElementPosition.epAbsolute;
      this.FWidthStyle = $mod.TSizeStyle.ssAbsolute;
      this.FHeightStyle = $mod.TSizeStyle.ssAbsolute;
      el = document.getElementById(AID);
      this.FNew = !(el != null);
      if (this.FNew) {
        this.FContainer = null;
      } else {
        this.FContainer = el;
        this.FControlCreated = true;
        this.FElementPosition = $mod.TElementPosition.epRelative;
        this.BindElement();
        this.BindEvents();
      };
      this.FID = AID;
      this.FFont = pas["WEBLib.Graphics"].TFont.$create("Create$1");
      this.FFont.FOnChange = rtl.createCallback(this,"HandleFontChanged");
      this.FEnabled = true;
      this.FVisible = true;
      this.FLeft = 0;
      this.FTop = 0;
      this.FAlign = $mod.TAlign.alNone;
      this.FAlignWithMargins = false;
      this.FIsAligning = false;
      this.FParentFont = true;
      this.FParentColor = false;
      this.FAnchors = rtl.createSet($mod.TAnchorKind.akLeft,$mod.TAnchorKind.akTop);
      this.FShowFocus = false;
      this.FBorderWidth = 0;
      this.FEnablePropagation = false;
      this.FColor = -1;
      this.FMargins = $mod.TMargins.$create("Create$1");
      this.FMargins.FOnChange = rtl.createCallback(this,"DoMarginsChanged");
      this.FParent = null;
      this.FPrevParent = null;
      this.ClearControls();
      this.CreateInitialize();
    };
    this.AddInstanceStyle = function (css) {
      var cssname = "";
      cssname = this.FName + "_style";
      function writeStylesOnce(styleName, cssText) {
          var styleElement = document.getElementById(styleName);
          if (styleElement) {
            styleElement.innerHTML = cssText;
            return;
            }
          styleElement = document.createElement('style');
          styleElement.type = 'text/css';
          styleElement.id = styleName;
          styleElement.innerHTML = cssText;
          document.getElementsByTagName('head')[0].appendChild(styleElement);
      }
      writeStylesOnce(cssname,css);
    };
    this.AddControlStyle = function (css) {
      var cssname = "";
      cssname = this.$classname;
      function writeStylesOnce(styleName, cssText) {
          var styleElement = document.getElementById(styleName);
          if (styleElement) {
               styleElement.innerHTML = cssText;
            return;
            }
          styleElement = document.createElement('style');
          styleElement.type = 'text/css';
          styleElement.id = styleName;
          styleElement.innerHTML = cssText;
          document.getElementsByTagName('head')[0].appendChild(styleElement);
      }
      writeStylesOnce(cssname,css);
    };
    this.AddControlLink = function (linkid, link) {
      function writeLinkOnce(linkName, linkText) {
          var linkElement = document.getElementById(linkName);
          if (linkElement)
            return;
          linkElement = document.createElement('link');
          linkElement.id = linkName;
          linkElement.setAttribute('rel', 'stylesheet');
          linkElement.setAttribute('type', 'text/css');
          linkElement.setAttribute('href', linkText);
          document.getElementsByTagName('head')[0].appendChild(linkElement);
      }
      writeLinkOnce(linkid,link);
    };
    this.AddControlScriptLink = function (link) {
      var id = "";
      var script = null;
      id = this.$classname;
      if (!(document.getElementById(id) != null)) {
        script = document.createElement("script");
        script.id = id;
        script.src = link;
        script.type = "text\/javascript";
        document.head.appendChild(script);
      };
    };
    this.AddControlScriptSource = function (source) {
      var id = "";
      var script = null;
      id = this.$classname;
      if (!(document.getElementById(id) != null)) {
        script = document.createElement("script");
        script.id = id;
        script.innerHTML = source;
        script.type = "text\/javascript";
        document.head.appendChild(script);
      };
    };
    this.AddRequiredScripts = function () {
      var Result = false;
      var i = 0;
      var j = 0;
      var el = null;
      var scr = null;
      var found = false;
      var loading = false;
      this.FControlScriptCount = 0;
      for (var $l1 = 0, $end2 = this.FRequiredScripts.GetCount() - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        found = false;
        loading = false;
        for (var $l3 = 0, $end4 = document.head.children.length - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          el = document.head.children.item(i);
          if (el.tagName === "SCRIPT") {
            scr = el;
            if (pas.System.Pos(this.FRequiredScripts.Get(j),scr.src) > 0) {
              found = true;
              if (scr.title === "tmswebloading") {
                loading = true;
                if (!(this.FScriptLoadedPtr != null)) this.FScriptLoadedPtr = rtl.createCallback(this,"RequiredScriptLoaded");
                scr.addEventListener("load",this.FScriptLoadedPtr);
              };
              break;
            };
          };
        };
        if (!found) {
          this.FControlScriptCount += 1;
          this.AddRequiredScript(this.RequiredBaseURL() + this.FRequiredScripts.Get(j));
        };
        if (found && loading) this.FControlScriptCount += 1;
      };
      Result = this.FControlScriptCount > 0;
      return Result;
    };
    this.AddRequiredScript = function (link) {
      var id = "";
      var script = null;
      script = document.createElement("script");
      script.src = link;
      script.type = "text\/javascript";
      script.title = "tmswebloading";
      if (!(this.FScriptLoadedPtr != null)) this.FScriptLoadedPtr = rtl.createCallback(this,"RequiredScriptLoaded");
      script.addEventListener("load",this.FScriptLoadedPtr);
      document.head.appendChild(script);
    };
    this.ResetAnchoring = function () {
      this.FOrigRect.$assign(pas.Types.Rect(-1,-1,-1,-1));
      this.InitAnchoring();
    };
    this.UpdateAnchoring = function () {
      var dxr = 0;
      var dyr = 0;
      var dxo = 0;
      var dyo = 0;
      var dxw = 0;
      var dyw = 0;
      var br = pas.Types.TRect.$new();
      var r = pas.Types.TRect.$new();
      if (pas.Classes.TComponentStateItem.csLoading in this.FComponentState) return;
      if (!this.FControlCreated) return;
      if ((this.FOrigRect.Left === -1) && (this.FOrigRect.Top === -1)) this.InitAnchoring();
      if ((this.FParent != null) && !this.FParent.AnchoringInitialized()) return;
      if (this.FAlign !== $mod.TAlign.alClient) {
        if ((this.FParent != null) && !pas["WEBLib.Forms"].TForm.isPrototypeOf(this)) {
          r.$assign(this.FParent.GetBoundsRect());
          dxr = r.Right - r.Left - (this.FOrigParentRect.Right - this.FOrigParentRect.Left);
          dyr = r.Bottom - r.Top - (this.FOrigParentRect.Bottom - this.FOrigParentRect.Top);
          br.$assign(this.FOrigRect);
          dxo = 0;
          dyo = 0;
          dxw = 0;
          dyw = 0;
          if ($mod.TAnchorKind.akRight in this.FAnchors) {
            if ($mod.TAnchorKind.akLeft in this.FAnchors) {
              dxw = dxr}
             else dxo = dxr;
          };
          if ($mod.TAnchorKind.akBottom in this.FAnchors) {
            if ($mod.TAnchorKind.akTop in this.FAnchors) {
              dyw = dyr}
             else dyo = dyr;
          };
          if (($mod.TAnchorKind.akBottom in this.FAnchors) || ($mod.TAnchorKind.akRight in this.FAnchors)) {
            this.SetBoundsInt(br.Left + dxo,br.Top + dyo,(br.Right - br.Left) + dxw,(br.Bottom - br.Top) + dyw);
          };
        };
      };
      this.UpdateChildAnchoring();
    };
    this.UpdateChildAnchoring = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetControls(i).UpdateAnchoring();
      };
    };
    this.SetElementPointer = function (AElement, ACursor) {
      AElement.style.setProperty("cursor",$mod.GetHTMLCursorName(ACursor));
    };
    this.GetWebClassName = function () {
      var Result = "";
      Result = this.$classname;
      pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},1,1);
      Result = "TWeb" + Result;
      return Result;
    };
    this.GetCSSManager = function () {
      var Result = null;
      var frm = null;
      var i = 0;
      Result = null;
      frm = pas["WEBLib.Forms"].GetParentForm(this);
      if (frm != null) {
        for (var $l1 = 0, $end2 = frm.GetComponentCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if ($mod.TCSSCodeManager.isPrototypeOf(frm.GetComponent(i))) {
            Result = rtl.as(frm.GetComponent(i),$mod.TCSSCodeManager);
          };
        };
      };
      return Result;
    };
    this.IsUpdating = function () {
      var Result = false;
      Result = this.FUpdateCount > 0;
      return Result;
    };
    this.CanShowFocus = function () {
      var Result = false;
      Result = this.FShowFocus;
      return Result;
    };
    this.RequiredScriptLoaded = function (Event) {
      rtl.asExt(Event.target,HTMLScriptElement).title = "tmswebloaded";
      this.FControlScriptCountLoaded += 1;
    };
    this.InjectCSS = function () {
      var cssname = "";
      var css = "";
      var cssmgr = null;
      cssname = this.GetWebClassName();
      css = "";
      cssmgr = this.GetCSSManager();
      if (cssmgr != null) css = cssmgr.GetClassCSS(cssname);
      if (css !== "") this.AddControlStyle(css);
    };
    this.StartCapture = function () {
      var eh = null;
      if (!this.FCaptureDown) return;
      if (this.Captured()) this.ReleaseCapture();
      this.FMouseInsideLayer = true;
      this.FLayer = document.createElement("SPAN");
      document.body.appendChild(this.FLayer);
      eh = this.FLayer;
      eh.addEventListener("mouseenter",this.FLayerMouseEnterPtr);
      eh.addEventListener("mouseleave",this.FLayerMouseLeavePtr);
      eh.addEventListener("mousedown",this.FMouseDownPtr);
      eh.addEventListener("mouseup",this.FMouseUpPtr);
      eh.addEventListener("mousemove",this.FMouseMovePtr);
      eh.addEventListener("touchstart",this.FTouchStartPtr);
      eh.addEventListener("touchmove",this.FTouchMovePtr);
      eh.addEventListener("touchend",this.FTouchEndPtr);
      eh.addEventListener("touchcancel",this.FTouchCancelPtr);
      eh.style.setProperty("top","0");
      eh.style.setProperty("left","0");
      eh.style.setProperty("right","0");
      eh.style.setProperty("bottom","0");
      eh.style.setProperty("webkit-user-select","none");
      eh.style.setProperty("moz-user-select","none");
      eh.style.setProperty("khtml-user-select","none");
      eh.style.setProperty("ms-user-select","none");
      eh.style.setProperty("user-select","none");
      eh.style.setProperty("position","absolute");
      eh.style.setProperty($mod.CSSZIndex,"999999");
      this.FCaptured = true;
      this.UpdateElement();
    };
    this.RequiredBaseURL = function () {
      var Result = "";
      Result = "";
      return Result;
    };
    this.SetBoundsInt = function (X, Y, AWidth, AHeight) {
      if ((X !== this.GetLeft()) || (Y !== this.GetTop()) || (AWidth !== this.GetWidth()) || (AHeight !== this.GetHeight())) {
        this.FBlockUpdateElement = true;
        this.FLeft = X;
        this.FTop = Y;
        this.FWidth = AWidth;
        this.FHeight = AHeight;
        this.FBlockUpdateElement = false;
        this.UpdateElementSize();
        if (this.FAlign !== $mod.TAlign.alNone) {
          this.DoRealign()}
         else this.Realign();
        this.RecreateCanvas();
        this.DoBoundsChange();
        this.Invalidate();
        this.UpdateChildAnchoring();
      };
    };
    this.Create$2 = function (ID) {
      this.FGotFocus = false;
      this.FTabStop = true;
      this.FAllowTouch = true;
      this.CreateWithID(ID);
      return this;
    };
    this.Create$1 = function (AOwner) {
      var s = "";
      var lPrefix = "";
      var lName = "";
      var frm = null;
      this.FGotFocus = false;
      this.FTabStop = true;
      this.FAllowTouch = true;
      this.ClearMethodPointers();
      pas.Classes.TComponent.Create$1.call(this,AOwner);
      this.FScriptLoaded = false;
      this.FElementFont = $mod.TElementFont.efProperty;
      this.FElementPosition = $mod.TElementPosition.epAbsolute;
      this.FParentElement = null;
      this.FTextDirection = $mod.TTextDirection.tdDefault;
      s = this.$classname;
      pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,1);
      lPrefix = "";
      frm = pas["WEBLib.Forms"].GetParentForm(this);
      if (frm != null) lPrefix = frm.$classname;
      lName = lPrefix + "_" + $mod.FindUniqueName(s);
      this.CreateWithID(lName);
      if ((AOwner != null) && !(pas.Classes.TComponentStateItem.csDesigning in AOwner.FComponentState)) this.SetName(lName);
      this.FEventStopPropagation = rtl.createSet($mod.TElementEvent.eeClick,$mod.TElementEvent.eeDblClick,$mod.TElementEvent.eeMouseUp,$mod.TElementEvent.eeMouseMove,$mod.TElementEvent.eeMouseDown,$mod.TElementEvent.eeKeyPress,$mod.TElementEvent.eeKeyDown,$mod.TElementEvent.eeKeyUp);
      return this;
    };
    this.Destroy = function () {
      var i = 0;
      var ctrl = null;
      this.UnbindEvents();
      for (var $l1 = this.GetControlsCount() - 1; $l1 >= 0; $l1--) {
        i = $l1;
        ctrl = this.GetControls(i);
        ctrl = rtl.freeLoc(ctrl);
      };
      if ((this.GetContainer() != null) && (this.FParent != null) && (this.FParent.GetChildContainer() != null)) {
        if (this.FParent.GetChildContainer() === this.GetContainer().parentNode) {
          this.FParent.GetChildContainer().removeChild(this.GetContainer());
        };
        this.FContainer = null;
        this.SetParent(null);
        this.FControlCreated = false;
      };
      rtl.free(this,"FRequiredScripts");
      rtl.free(this,"FMargins");
      rtl.free(this,"FFont");
      pas.Classes.TComponent.Destroy.call(this);
    };
    this.Assign = function (Source) {
    };
    this.DragDrop = function (Source, X, Y) {
      if (this.FOnDragDrop != null) this.FOnDragDrop(this,Source,X,Y);
    };
    this.Resize = function () {
      if (this.FOnResize != null) this.FOnResize(this);
    };
    this.Capture = function () {
      this.FCaptureDown = true;
      window.setTimeout(rtl.createCallback(this,"StartCapture"),100);
    };
    this.ApplyName = function () {
      var s = "";
      var prefix = "";
      var frm = null;
      s = this.$classname;
      pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,1);
      prefix = "";
      frm = pas["WEBLib.Forms"].GetParentForm(this);
      if (frm != null) prefix = frm.$classname;
      this.SetID(prefix + "_" + $mod.FindUniqueName(s));
    };
    this.ReleaseCapture = function () {
      var eh = null;
      this.FCaptureDown = false;
      if (this.FCaptured && (this.FLayer != null)) {
        eh = this.FLayer;
        eh.removeEventListener("mouseenter",this.FLayerMouseEnterPtr);
        eh.removeEventListener("mouseleave",this.FLayerMouseLeavePtr);
        eh.removeEventListener("mousedown",this.FMouseDownPtr);
        eh.removeEventListener("mouseup",this.FMouseUpPtr);
        eh.removeEventListener("mousemove",this.FMouseMovePtr);
        eh.removeEventListener("touchstart",this.FTouchStartPtr);
        eh.removeEventListener("touchmove",this.FTouchMovePtr);
        eh.removeEventListener("touchend",this.FTouchEndPtr);
        eh.removeEventListener("touchcancel",this.FTouchEndPtr);
        document.body.removeChild(eh);
        this.FCaptured = false;
        this.FLayer = null;
        this.UpdateElement();
      };
    };
    this.BringToFront = function () {
      if (this.GetElementHandle() != null) {
        if (((this.FElementPosition !== $mod.TElementPosition.epAbsolute) || this.GetIsLinked()) && (this.GetElementHandle().parentElement != null)) {
          this.GetElementHandle().parentElement.appendChild(this.GetElementHandle());
        } else this.GetElementHandle().style.setProperty($mod.CSSZIndex,"999998");
      };
    };
    this.SendToBack = function () {
      if (this.GetElementHandle() != null) {
        if (((this.FElementPosition !== $mod.TElementPosition.epAbsolute) || this.GetIsLinked()) && (this.GetElementHandle().parentElement != null)) {
          this.GetElementHandle().parentElement.insertBefore(this.GetElementHandle(),this.GetElementHandle().parentElement.firstElementChild);
        } else this.GetElementHandle().style.setProperty($mod.CSSZIndex,"0");
      };
    };
    this.PreventDefault = function () {
      if (this.GetElementEvent() != null) this.GetElementEvent().preventDefault();
    };
    this.StopPropagation = function () {
      if ((this.GetElementEvent() != null) && !this.FEnablePropagation) this.GetElementEvent().stopPropagation();
    };
    this.BeginUpdate = function () {
      this.FUpdateCount += 1;
    };
    this.EndUpdate = function () {
      if (this.FUpdateCount > 0) {
        this.FUpdateCount -= 1;
        if (this.FUpdateCount === 0) this.UpdateElement();
      };
    };
    this.Invalidate = function () {
    };
    this.SetParentComponent = function (Value) {
      if ((this.FParent !== Value) && $mod.TControl.isPrototypeOf(Value)) this.SetParent(Value);
    };
    this.SetBounds = function (X, Y, AWidth, AHeight) {
      this.SetBoundsInt(X,Y,AWidth,AHeight);
      this.FWidth = AWidth;
      this.FHeight = AHeight;
      this.ResetAnchoring();
    };
    this.XYToClient = function (X, Y, AClientX, AClientY) {
      var p = null;
      var cr = null;
      if (this.FElementPosition === $mod.TElementPosition.epAbsolute) {
        AClientX.set((X - this.GetLeft()) + document.body.scrollLeft + document.documentElement.scrollLeft);
        AClientY.set((Y - this.GetTop()) + document.body.scrollTop + document.documentElement.scrollTop);
      } else {
        AClientX.set(X + document.body.scrollLeft + document.documentElement.scrollLeft);
        AClientY.set(Y + document.body.scrollTop + document.documentElement.scrollTop);
      };
      p = this.FParent;
      while (p != null) {
        if (p.GetIsLinked()) {
          if (pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(p)) {
            cr = p.GetContainer().getBoundingClientRect()}
           else cr = p.GetElementHandle().getBoundingClientRect();
          AClientX.set(AClientX.get() - cr.left);
          AClientY.set(AClientY.get() - cr.top);
        };
        if (pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(p)) {
          if ((rtl.as(p,pas["WEBLib.Forms"].TCustomForm).GetContainer() != null) && (rtl.as(p,pas["WEBLib.Forms"].TCustomForm).FFormContainer === "") && (rtl.as(p,pas["WEBLib.Forms"].TCustomForm).FFormFileName !== "") && rtl.as(p,pas["WEBLib.Forms"].TCustomForm).FPopup) {
            cr = rtl.as(p,pas["WEBLib.Forms"].TCustomForm).GetContainer().getBoundingClientRect();
            AClientX.set(AClientX.get() - cr.left);
            AClientY.set(AClientY.get() - cr.top);
          };
        };
        if (p.FElementPosition === $mod.TElementPosition.epAbsolute) {
          AClientX.set(AClientX.get() - p.GetLeft());
          AClientY.set(AClientY.get() - p.GetTop());
        };
        p = p.FParent;
      };
    };
    this.ClientToXY = function (AClientX, AClientY, X, Y) {
      var p = null;
      var cr = null;
      X.set((AClientX + this.GetLeft()) - document.body.scrollLeft - document.documentElement.scrollLeft);
      Y.set((AClientY + this.GetTop()) - document.body.scrollTop - document.documentElement.scrollTop);
      p = this.FParent;
      while (p != null) {
        if (p.GetIsLinked()) {
          if (pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(p)) {
            cr = p.GetContainer().getBoundingClientRect()}
           else cr = p.GetElementHandle().getBoundingClientRect();
          X.set(X.get() + cr.left);
          Y.set(Y.get() + cr.top);
        };
        if (pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(p)) {
          if ((rtl.as(p,pas["WEBLib.Forms"].TCustomForm).GetContainer() != null) && (rtl.as(p,pas["WEBLib.Forms"].TCustomForm).FFormContainer === "") && (rtl.as(p,pas["WEBLib.Forms"].TCustomForm).FFormFileName !== "") && rtl.as(p,pas["WEBLib.Forms"].TCustomForm).FPopup) {
            cr = rtl.as(p,pas["WEBLib.Forms"].TCustomForm).GetContainer().getBoundingClientRect();
            X.set(X.get() + cr.left);
            Y.set(Y.get() + cr.top);
          };
        };
        if (p.FElementPosition === $mod.TElementPosition.epAbsolute) {
          X.set(X.get() + p.GetLeft());
          Y.set(Y.get() + p.GetTop());
        };
        p = p.FParent;
      };
    };
    this.GetChildren = function (Proc, Root) {
      var i = 0;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        Proc(this.GetControls(i));
      };
    };
    this.Captured = function () {
      var Result = false;
      Result = this.FCaptured && (this.FLayer != null);
      return Result;
    };
    this.MakeScreenshot = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.ClientToScreen = function (Point) {
      var Result = pas.Types.TPoint.$new();
      var Origin = pas.Types.TPoint.$new();
      Origin.$assign(this.GetClientOrigin());
      Result.x = Point.x + Origin.x;
      Result.y = Point.y + Origin.y;
      return Result;
    };
    this.ScreenToClient = function (Point) {
      var Result = pas.Types.TPoint.$new();
      var Origin = pas.Types.TPoint.$new();
      Origin.$assign(this.GetClientOrigin());
      Result.x = Point.x - Origin.x;
      Result.y = Point.y - Origin.y;
      return Result;
    };
    this.CanFocus = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TWinControl",$mod.TControl,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Cursor",2,$mod.$rtti["TCursor"],"FCursor","SetControlCursor",{Default: 0});
    $r.addProperty("ElementClassName",2,$mod.$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("Tag",0,rtl.longint,"FTag$1","FTag$1",{Default: 0});
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("OnMouseDown",0,$mod.$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,$mod.$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,$mod.$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseEnter",0,$mod.$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnMouseLeave",0,$mod.$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnKeyUp",0,$mod.$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnKeyDown",0,$mod.$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,$mod.$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnEnter",0,$mod.$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,$mod.$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TCustomControl",$mod.TWinControl,function () {
    this.$init = function () {
      $mod.TWinControl.$init.call(this);
      this.FCaption = "";
      this.FPixelRatio = 0.0;
      this.FPainting = false;
      this.FCanvas = null;
      this.FElementCanvas = null;
      this.FBorderStyle = 0;
      this.FBorderColor = 0;
      this.FCustomBorder = false;
    };
    this.$final = function () {
      this.FCanvas = undefined;
      this.FElementCanvas = undefined;
      $mod.TWinControl.$final.call(this);
    };
    this.GetCanvas = function () {
      var Result = null;
      if (!(this.FCanvas != null)) {
        this.CreateControl();
      };
      Result = this.FCanvas;
      return Result;
    };
    this.RenderDesigning = function (ACaption, AElement, AControl, ADisplay) {
      var LContainer = null;
      var LLabel = null;
      var LHasLabel = false;
      LContainer = AElement;
      LLabel = LContainer.firstChild;
      LHasLabel = (LLabel != null) && (LLabel.getAttribute("data-design") === "1");
      if ((pas.Classes.TComponentStateItem.csDesigning in AControl.FComponentState) && ADisplay && (this.FElementClassName === "")) {
        if (LHasLabel) return;
        LContainer.innerHTML = "";
        LLabel = document.createElement("DIV");
        LLabel.setAttribute("data-design","1");
        LLabel.innerHTML = ACaption;
        LLabel.style.setProperty("position","relative");
        LLabel.style.setProperty("top","50%");
        LLabel.style.setProperty("left","50%");
        LLabel.style.setProperty("transform","translateY(-50%)");
        LLabel.style.setProperty("transform","translateX(-50%)");
        LLabel.style.setProperty("display","inline-block");
        LContainer.style.setProperty("border","1px solid gray");
        LContainer.style.setProperty("background-color","silver");
        this.FCustomBorder = true;
        LContainer.appendChild(LLabel);
      } else {
        if (LHasLabel) {
          LContainer.removeChild(LContainer.firstChild);
          LContainer.style.removeProperty("border");
          LContainer.style.removeProperty("background-color");
        };
      };
    };
    this.GetPixelRatio = function () {
      var Result = 0.0;
      var res = 0.0;
      var ctx = document.createElement("canvas").getContext("2d"),
          dpr = window.devicePixelRatio || 1,
          bsr = ctx.webkitBackingStorePixelRatio ||
                ctx.mozBackingStorePixelRatio ||
                ctx.msBackingStorePixelRatio ||
                ctx.oBackingStorePixelRatio ||
                ctx.backingStorePixelRatio || 1;
      res = dpr / bsr;
      Result = res;
      return Result;
    };
    this.RecreateCanvas = function () {
      var px = 0.0;
      var el = null;
      var h = 0;
      var w = 0;
      if (this.FElementCanvas != null) {
        if (!this.FPainting) {
          el = document.getElementById(this.GetID() + "_Canvas");
          if (el != null) {
            this.FElementCanvas = el;
            rtl.free(this,"FCanvas");
            this.FCanvas = null;
          };
          px = this.GetPixelRatio();
          h = this.GetHeight() - this.GetCanvasHeightOffset();
          w = this.GetWidth() - this.GetCanvasWidthOffset();
          if (this.FElementPosition === $mod.TElementPosition.epRelative) {
            this.FElementCanvas.style.setProperty("position","relative")}
           else this.FElementCanvas.style.setProperty("position","absolute");
          this.FElementCanvas.style.setProperty("height",pas.SysUtils.IntToStr(h) + "px");
          this.FElementCanvas.style.setProperty("width",pas.SysUtils.IntToStr(w) + "px");
          this.FElementCanvas.height = Math.round(h * px);
          this.FElementCanvas.width = Math.round(w * px);
        };
        if (!(this.FCanvas != null)) this.FCanvas = pas["WEBLib.Graphics"].TCanvas.$create("Create$1",[this.FElementCanvas]);
        this.FCanvas.FApplyPixelRatio = true;
        this.FCanvas.SetTransform(1,0,0,1,0,0);
      };
    };
    this.SetBorderStyle = function (AValue) {
      if (this.FBorderStyle !== AValue) {
        this.FBorderStyle = AValue;
        this.UpdateElement();
      };
    };
    this.SetBorderColor = function (AValue) {
      if (this.FBorderColor !== AValue) {
        this.FBorderColor = AValue;
        this.UpdateElement();
      };
    };
    this.SetName = function (NewName) {
      var cs = {};
      var ownername = "";
      ownername = "";
      if (pas["WEBLib.Forms"].TFrame.isPrototypeOf(this)) {
        ownername = "F" + $mod.FindUniqueName(this.FName) + "_";
      };
      pas.Classes.TComponent.SetName.call(this,ownername + NewName);
      if (($mod.TControlStyleValue.csSetCaption in this.FControlStyle) && (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) {
        if ((this.FOwner != null) && (pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState)) return;
        cs = rtl.refSet(this.FControlStyle);
        this.SetCaption(NewName);
        this.FControlStyle = rtl.refSet(cs);
      };
    };
    this.SetCaption = function (AValue) {
      this.FCaption = AValue;
      this.FControlStyle = rtl.diffSet(this.FControlStyle,rtl.createSet($mod.TControlStyleValue.csSetCaption));
    };
    this.CreateControl = function () {
      $mod.TControl.CreateControl.call(this);
      this.RecreateCanvas();
    };
    this.Loaded = function () {
      $mod.TControl.Loaded.call(this);
      this.Invalidate();
    };
    this.UpdateElementVisual = function () {
      $mod.TControl.UpdateElementVisual.call(this);
      if (this.GetElementHandle() != null) {
        if (!this.GetIsLinked() && (this.FElementClassName === "")) {
          if (this.FBorderStyle === $mod.TBorderStyle.bsSingle) {
            if (this.FCustomBorder) {
              this.GetElementHandle().style.setProperty("border-style","solid");
              this.GetElementHandle().style.setProperty("border-width","1px");
              this.GetElementHandle().style.setProperty("border-color",pas["WEBLib.Graphics"].ColorToHTML(this.FBorderColor));
            } else this.GetElementHandle().style.setProperty("border-style","");
          } else this.GetElementHandle().style.setProperty("border-style","none");
        };
        if (this.FElementClassName !== "") {
          this.GetElementHandle().style.removeProperty("border-style");
          this.GetElementHandle().style.removeProperty("border-width");
          this.GetElementHandle().style.removeProperty("border-color");
        };
      };
    };
    this.CreateElement = function () {
      var Result = null;
      this.FElementCanvas = document.createElement("CANVAS");
      if ($mod.TControlStyleValue.csAcceptsControls in this.FControlStyle) {
        Result = document.createElement("SPAN");
        Result.appendChild(this.FElementCanvas);
        this.FElementCanvas.setAttribute("id",this.GetID() + "_Canvas");
        this.FElementCanvas.setAttribute("zindex","-1");
      } else Result = this.FElementCanvas;
      return Result;
    };
    this.GetCanvasHeightOffset = function () {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.GetCanvasWidthOffset = function () {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.BindElement = function () {
      if ((this.GetContainer().tagName !== "CANVAS") && !this.FControlCreated) {
        this.FElementCanvas = document.createElement("CANVAS");
        this.GetContainer().appendChild(this.FElementCanvas);
      };
    };
    this.BindEvents = function () {
      $mod.TControl.BindEvents.call(this);
    };
    this.Paint = function () {
    };
    this.CreateInitialize = function () {
      $mod.TControl.CreateInitialize.call(this);
      this.FCaption = "";
      this.FControlStyle = rtl.unionSet(this.FControlStyle,rtl.createSet($mod.TControlStyleValue.csSetCaption));
      this.FBorderStyle = $mod.TBorderStyle.bsSingle;
      this.FBorderColor = 12632256;
      this.FPainting = false;
      this.FWidth = 100;
      this.FHeight = 25;
      this.FWidthPercent = 100;
      this.FHeightPercent = 100;
      this.FCustomBorder = false;
    };
    this.Destroy = function () {
      if (this.FCanvas != null) rtl.free(this,"FCanvas");
      $mod.TControl.Destroy.call(this);
    };
    this.MakeScreenshot = function () {
      var Result = null;
      Result = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
      Result.LoadFromCanvas(this.GetCanvas());
      return Result;
    };
    this.Resize = function () {
      $mod.TControl.Resize.call(this);
      this.Invalidate();
    };
    this.Invalidate = function () {
      var px = 0.0;
      var frm = null;
      $mod.TControl.Invalidate.call(this);
      if ((this.FParent === null) || (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) return;
      frm = pas["WEBLib.Forms"].GetParentForm(this);
      if (frm != null) if (frm.IsUpdating()) return;
      px = this.GetPixelRatio();
      if (px !== this.FPixelRatio) this.RecreateCanvas();
      this.FPixelRatio = this.GetPixelRatio();
      this.FPainting = true;
      if (this.FCanvas != null) this.FCanvas.Clear();
      this.Paint();
      this.FPainting = false;
    };
    this.SetFocus = function () {
      $mod.TControl.SetFocus.call(this);
    };
    this.Focused = function () {
      var Result = false;
      Result = $mod.TControl.Focused.call(this);
      return Result;
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TjQueryCustomControl",$mod.TWinControl,function () {
    this.$init = function () {
      $mod.TWinControl.$init.call(this);
      this.FIsInitialized = false;
    };
    this.InitJQueryOnce = function () {
      if (this.IsUpdating()) return;
      if (this.FIsInitialized) return;
      this.FIsInitialized = true;
      this.InitJQuery();
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("DIV");
      return Result;
    };
    this.Loaded = function () {
      $mod.TControl.Loaded.call(this);
      this.InitJQueryOnce();
    };
    this.SetParent = function (AValue) {
      $mod.TControl.SetParent.apply(this,arguments);
      this.InitJQueryOnce();
    };
    this.GetJQID = function () {
      var Result = "";
      Result = "#" + this.GetID();
      return Result;
    };
    this.InitJQuery = function () {
    };
    this.CreateInitialize = function () {
      $mod.TControl.CreateInitialize.call(this);
      this.FIsInitialized = false;
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("ElementPosition",2,$mod.$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: $mod.TElementPosition.epAbsolute});
  });
  rtl.createClass($mod,"TGraphicControl",$mod.TCustomControl,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TScrollingGraphicControl",$mod.TCustomControl,function () {
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("DIV");
      return Result;
    };
    this.UpdateElement = function () {
      $mod.TControl.UpdateElement.call(this);
      if (this.GetElementHandle() != null) this.GetElementHandle().style.setProperty("overflow","auto");
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TCustomHTMLDiv",$mod.TCustomControl,function () {
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("DIV");
      return Result;
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TControlManager",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FInstanceCount = 0;
    };
    this.Create$1 = function (AOwner) {
      pas.Classes.TComponent.Create$1.apply(this,arguments);
      this.FInstanceCount = 0;
      return this;
    };
    this.GetInstanceNumber = function () {
      var Result = 0;
      this.FInstanceCount += 1;
      Result = this.FInstanceCount;
      return Result;
    };
    this.Reset = function () {
      this.FInstanceCount = 0;
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TCSSCodeFragment",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FControlClassname = "";
      this.FCSS = null;
    };
    this.$final = function () {
      this.FCSS = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.SetCSS = function (Value) {
      this.FCSS.Assign(Value);
    };
    this.Create$1 = function (Collection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      this.FCSS = pas.Classes.TStringList.$create("Create$1");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FCSS");
      pas.Classes.TCollectionItem.Destroy.call(this);
    };
    var $r = this.$rtti;
    $r.addProperty("ControlClassname",0,rtl.string,"FControlClassname","FControlClassname");
    $r.addProperty("CSS",2,pas.Classes.$rtti["TStringList"],"FCSS","SetCSS");
  });
  rtl.createClass($mod,"TCSSCodeFragments",pas.Classes.TOwnedCollection,function () {
    this.GetItemEx = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItemEx = function (Index, Value) {
      this.SetItem(Index,Value);
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,$mod.TCSSCodeFragment);
      return this;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
    this.Insert$1 = function (Index) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,Index);
      return Result;
    };
  });
  rtl.createClass($mod,"TCSSCodeManager",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FCSSFragments = null;
    };
    this.$final = function () {
      this.FCSSFragments = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.SetCSSFragments = function (Value) {
      this.FCSSFragments.Assign(Value);
    };
    this.Create$1 = function (AOwner) {
      pas.Classes.TComponent.Create$1.apply(this,arguments);
      this.FCSSFragments = $mod.TCSSCodeFragments.$create("Create$3",[this]);
      this.FCSSFragments.FPropName = "CSSFragments";
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FCSSFragments");
      pas.Classes.TComponent.Destroy.call(this);
    };
    this.GetClassFragment = function (AClassname) {
      var Result = null;
      var i = 0;
      Result = null;
      for (var $l1 = 0, $end2 = this.FCSSFragments.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.FCSSFragments.GetItemEx(i).FControlClassname === AClassname) Result = this.FCSSFragments.GetItemEx(i);
      };
      return Result;
    };
    this.GetClassCSS = function (AClassname) {
      var Result = "";
      var CSSCodeFragment = null;
      Result = "";
      CSSCodeFragment = this.GetClassFragment(AClassname);
      if (CSSCodeFragment != null) Result = CSSCodeFragment.FCSS.GetTextStr();
      return Result;
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("CSSFragments",2,$mod.$rtti["TCSSCodeFragments"],"FCSSFragments","SetCSSFragments");
  });
  rtl.createHelper($mod,"TCollectionItemHelper",null,function () {
    this.SetEvent = function (ALookupRoot, APropName, AMethodName) {
      pas.Classes.TPersistent.SetEvent.call(this,this,ALookupRoot,APropName,AMethodName);
    };
  });
  this.FindGlobalComponent = function (Name) {
    var Result = null;
    Result = null;
    return Result;
  };
  this.GetMousePos = function () {
    var Result = pas.Types.TPoint.$new();
    Result.$assign(pas.Types.Point($impl.FMouseX,$impl.FMouseY));
    return Result;
  };
  this.FindUniqueName = function (Name) {
    var Result = "";
    Result = Name + pas.SysUtils.IntToStr($impl.ControlManager.GetInstanceNumber());
    return Result;
  };
  this.GetScrollBarHeight = function () {
    var Result = 0;
    var res = 0;
    res = $impl.ScrollBH;
    if (res === 0) {
      var outer = document.createElement("div");
            outer.style.visibility = "hidden";
            outer.style.height = "100px";
            outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
      
            document.body.appendChild(outer);
      
            var HeightNoScroll = outer.offsetHeight;
            // force scrollbars
            outer.style.overflow = "scroll";
      
            // add innerdiv
            var inner = document.createElement("div");
            inner.style.height = "100%";
            outer.appendChild(inner);
      
            var HeightWithScroll = inner.offsetHeight;
      
            // remove divs
            outer.parentNode.removeChild(outer);
      
            res = HeightNoScroll - HeightWithScroll;
      
            res = 0;
      $impl.ScrollBH = res;
    };
    Result = res;
    return Result;
  };
  this.GetScrollBarWidth = function () {
    var Result = 0;
    var res = 0;
    res = $impl.ScrollBW;
    if (res === 0) {
      var outer = document.createElement("div");
            outer.style.visibility = "hidden";
            outer.style.width = "100px";
            outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
      
            document.body.appendChild(outer);
      
            var widthNoScroll = outer.offsetWidth;
            // force scrollbars
            outer.style.overflow = "scroll";
      
            // add innerdiv
            var inner = document.createElement("div");
            inner.style.width = "100%";
            outer.appendChild(inner);
      
            var widthWithScroll = inner.offsetWidth;
      
            // remove divs
            outer.parentNode.removeChild(outer);
      
            res = widthNoScroll - widthWithScroll;
      $impl.ScrollBW = res;
    };
    Result = res;
    return Result;
  };
  this.SetHTMLElementFont = function (AElement, AFont, UseCSS) {
    var s = "";
    if (UseCSS) {
      AElement.style.removeProperty("font-family");
      AElement.style.removeProperty("font-style");
      AElement.style.removeProperty("font-weight");
      AElement.style.removeProperty("font-size");
      AElement.style.removeProperty("text-decoration");
    } else {
      AElement.style.setProperty("font-family",AFont.FName);
      AElement.style.setProperty("font-style","normal");
      if (pas["WEBLib.Graphics"].TFontStyle.fsBold in AFont.FStyle) {
        AElement.style.setProperty("font-weight","bold")}
       else AElement.style.setProperty("font-weight","");
      if (pas["WEBLib.Graphics"].TFontStyle.fsItalic in AFont.FStyle) AElement.style.setProperty("font-style","italic");
      s = "";
      if (pas["WEBLib.Graphics"].TFontStyle.fsUnderline in AFont.FStyle) s = "underline";
      if (pas["WEBLib.Graphics"].TFontStyle.fsStrikeOut in AFont.FStyle) {
        if (s !== "") s = s + " ";
        s = s + "line-through";
      };
      if (s !== "") AElement.style.setProperty("text-decoration",s);
      AElement.style.setProperty("font-size",pas.SysUtils.IntToStr(AFont.FSize) + "pt");
    };
  };
  this.SetHTMLElementColor = function (AElement, AColor, UseCSS) {
    if (UseCSS || (AColor === -1)) {
      AElement.style.removeProperty($impl.cStyleBkgColor)}
     else AElement.style.setProperty($impl.cStyleBkgColor,pas["WEBLib.Graphics"].ColorToHTML(AColor));
  };
  this.GetHTMLCursorName = function (ACursor) {
    var Result = "";
    Result = "default";
    var $tmp1 = ACursor;
    if ($tmp1 === 0) {
      Result = "default"}
     else if ($tmp1 === 2) {
      Result = "auto"}
     else if ($tmp1 === 1) {
      Result = "none"}
     else if ($tmp1 === 3) {
      Result = "crosshair"}
     else if ($tmp1 === 4) {
      Result = "text"}
     else if ($tmp1 === 6) {
      Result = "nesw-resize"}
     else if ($tmp1 === 7) {
      Result = "ns-resize"}
     else if ($tmp1 === 8) {
      Result = "nwse-resize"}
     else if ($tmp1 === 9) {
      Result = "ew-resize"}
     else if ($tmp1 === 10) {
      Result = "n-resize"}
     else if ($tmp1 === 11) {
      Result = "wait"}
     else if ($tmp1 === 12) {
      Result = "copy"}
     else if ($tmp1 === 13) {
      Result = "no-drop"}
     else if ($tmp1 === 14) {
      Result = "col-resize"}
     else if ($tmp1 === 15) {
      Result = "row-resize"}
     else if ($tmp1 === 16) {
      Result = "copy"}
     else if ($tmp1 === 17) {
      Result = "progress"}
     else if ($tmp1 === 18) {
      Result = "not-allowed"}
     else if ($tmp1 === 19) {
      Result = "progress"}
     else if ($tmp1 === 20) {
      Result = "help"}
     else if ($tmp1 === 21) {
      Result = "pointer"}
     else if (($tmp1 === 22) || ($tmp1 === 5)) Result = "move";
    return Result;
  };
  this.CursorToString = function (ACursor) {
    var Result = "";
    Result = "crDefault";
    var $tmp1 = ACursor;
    if ($tmp1 === 0) {
      Result = "crDefault"}
     else if ($tmp1 === 2) {
      Result = "crArrow"}
     else if ($tmp1 === 1) {
      Result = "crNone"}
     else if ($tmp1 === 3) {
      Result = "crCross"}
     else if ($tmp1 === 5) {
      Result = "ctSize"}
     else if ($tmp1 === 4) {
      Result = "crIBeam"}
     else if ($tmp1 === 6) {
      Result = "crSizeNESW"}
     else if ($tmp1 === 7) {
      Result = "crSizeNS"}
     else if ($tmp1 === 8) {
      Result = "crSizeNWSE"}
     else if ($tmp1 === 9) {
      Result = "crSizeWE"}
     else if ($tmp1 === 10) {
      Result = "crUpArrow"}
     else if ($tmp1 === 11) {
      Result = "crHourGlass"}
     else if ($tmp1 === 12) {
      Result = "crDrag"}
     else if ($tmp1 === 13) {
      Result = "crNoDrop"}
     else if ($tmp1 === 14) {
      Result = "crHSplit"}
     else if ($tmp1 === 15) {
      Result = "crVSplit"}
     else if ($tmp1 === 16) {
      Result = "crMultiDrag"}
     else if ($tmp1 === 17) {
      Result = "crSQLWait"}
     else if ($tmp1 === 18) {
      Result = "crNo"}
     else if ($tmp1 === 19) {
      Result = "crAppStart"}
     else if ($tmp1 === 20) {
      Result = "crHelp"}
     else if ($tmp1 === 21) {
      Result = "crHandpoint"}
     else if ($tmp1 === 22) Result = "crSizeAll";
    return Result;
  };
  this.StringToCursor = function (S) {
    var Result = 0;
    var us = "";
    Result = 0;
    us = pas.SysUtils.UpperCase(S);
    if (us === "CRDEFAULT") {
      Result = 0}
     else if (us === "CRARROW") {
      Result = 2}
     else if (us === "CRNONE") {
      Result = 1}
     else if (us === "CRCROSS") {
      Result = 3}
     else if (us === "CRSIZE") {
      Result = 5}
     else if (us === "CRIBEAM") {
      Result = 4}
     else if (us === "CRSIZENESW") {
      Result = 6}
     else if (us === "CRSIZENS") {
      Result = 7}
     else if (us === "CRSIZENWSE") {
      Result = 8}
     else if (us === "CRSIZEWE") {
      Result = 9}
     else if (us === "CRUPARROW") {
      Result = 10}
     else if (us === "CRHOURGLASS") {
      Result = 11}
     else if (us === "CRDRAG") {
      Result = 12}
     else if (us === "CRNODROP") {
      Result = 13}
     else if (us === "CRHSPLIT") {
      Result = 14}
     else if (us === "CRVSPLIT") {
      Result = 15}
     else if (us === "CRMULTIDRAG") {
      Result = 16}
     else if (us === "CRSQLWAIT") {
      Result = 17}
     else if (us === "CRNO") {
      Result = 18}
     else if (us === "CRAPPSTART") {
      Result = 19}
     else if (us === "CRHELP") {
      Result = 20}
     else if (us === "CRHANDPOINT") {
      Result = 21}
     else if (us === "CRSIZEALL") Result = 22;
    return Result;
  };
  $mod.$init = function () {
    $impl.ScrollBW = 0;
    $impl.ScrollBH = 0;
    $impl.ControlManager = $mod.TControlManager.$create("Create$1",[null]);
  };
},["WEBLib.Forms","Math","TypInfo"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.ControlManager = null;
  $impl.FMouseX = 0;
  $impl.FMouseY = 0;
  $impl.ScrollBW = 0;
  $impl.ScrollBH = 0;
  $impl.cStyleBkgColor = "background-color";
  $impl.IsAndroid = function () {
    var Result = false;
    var sagent = "";
    sagent = navigator.userAgent;
    Result = pas.System.Pos("Android",sagent) > 0;
    return Result;
  };
});
rtl.module("WEBLib.Modules",["System","Classes"],function () {
  "use strict";
  var $mod = this;
  $mod.$rtti.$Class("TDataModule");
  $mod.$rtti.$ClassRef("TDataModuleClass",{instancetype: $mod.$rtti["TDataModule"]});
  rtl.createClass($mod,"TDataModule",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FHeight = 0;
      this.FOldCreateOrder = false;
      this.FOnCreate = null;
      this.FOnDestroy = null;
      this.FWidth = 0;
    };
    this.$final = function () {
      this.FOnCreate = undefined;
      this.FOnDestroy = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.DoCreate = function () {
      this.LoadDFMValues();
      if (this.FOnCreate != null) this.FOnCreate(this);
    };
    this.DoDestroy = function () {
      if (this.FOnDestroy != null) this.FOnDestroy(this);
    };
    this.LoadDFMValues = function () {
    };
    this.CreateNew = function (AOwner, Dummy) {
      pas.Classes.TComponent.Create$1.call(this,AOwner);
      return this;
    };
    this.AfterConstruction = function () {
      pas.Classes.TInterfacedPersistent.AfterConstruction.call(this);
      if (!this.FOldCreateOrder) this.DoCreate();
    };
    this.BeforeDestruction = function () {
      pas.Classes.TComponent.BeforeDestruction.call(this);
      if (!this.FOldCreateOrder) this.DoDestroy();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("OnCreate",0,pas.Classes.$rtti["TNotifyEvent"],"FOnCreate","FOnCreate");
    $r.addProperty("OnDestroy",0,pas.Classes.$rtti["TNotifyEvent"],"FOnDestroy","FOnDestroy");
  });
});
rtl.module("WEBLib.Lang",["System"],function () {
  "use strict";
  var $mod = this;
  this.TUILanguage = {"0": "lNone", lNone: 0, "1": "lAfar", lAfar: 1, "2": "lAbkhazian", lAbkhazian: 2, "3": "lAvestan", lAvestan: 3, "4": "lAfrikaans", lAfrikaans: 4, "5": "lAkan", lAkan: 5, "6": "lAmharic", lAmharic: 6, "7": "lAragonese", lAragonese: 7, "8": "lArabic", lArabic: 8, "9": "lAssamese", lAssamese: 9, "10": "lAvaric", lAvaric: 10, "11": "lAymara", lAymara: 11, "12": "lAzerbaijani", lAzerbaijani: 12, "13": "lBashkir", lBashkir: 13, "14": "lBelarusian", lBelarusian: 14, "15": "lBulgarian", lBulgarian: 15, "16": "lBihari", lBihari: 16, "17": "lBislama", lBislama: 17, "18": "lBambara", lBambara: 18, "19": "lBengali", lBengali: 19, "20": "lTibetan", lTibetan: 20, "21": "lBreton", lBreton: 21, "22": "lBosnian", lBosnian: 22, "23": "lCatalan", lCatalan: 23, "24": "lChechen", lChechen: 24, "25": "lChamorro", lChamorro: 25, "26": "lCorsican", lCorsican: 26, "27": "lCree", lCree: 27, "28": "lCzech", lCzech: 28, "29": "lOldSlavic", lOldSlavic: 29, "30": "lChuvash", lChuvash: 30, "31": "lWelsh", lWelsh: 31, "32": "lDanish", lDanish: 32, "33": "lGerman", lGerman: 33, "34": "lDivehi", lDivehi: 34, "35": "lDzongkha", lDzongkha: 35, "36": "lEwe", lEwe: 36, "37": "lEnglish", lEnglish: 37, "38": "lEsperanto", lEsperanto: 38, "39": "lSpanish", lSpanish: 39, "40": "lEstonian", lEstonian: 40, "41": "lBasque", lBasque: 41, "42": "lPersian", lPersian: 42, "43": "lFulah", lFulah: 43, "44": "lFinnish", lFinnish: 44, "45": "lFijian", lFijian: 45, "46": "lFaroese", lFaroese: 46, "47": "lFrench", lFrench: 47, "48": "lWesternFrisian", lWesternFrisian: 48, "49": "lIrish", lIrish: 49, "50": "lGaelic", lGaelic: 50, "51": "lGalician", lGalician: 51, "52": "lGuarani", lGuarani: 52, "53": "lGujarati", lGujarati: 53, "54": "lManx", lManx: 54, "55": "lHausa", lHausa: 55, "56": "lHebrew", lHebrew: 56, "57": "lHindi", lHindi: 57, "58": "lHiriMotu", lHiriMotu: 58, "59": "lCroatian", lCroatian: 59, "60": "lHaitian", lHaitian: 60, "61": "lHungarian", lHungarian: 61, "62": "lArmenian", lArmenian: 62, "63": "lHerero", lHerero: 63, "64": "lInterlingua", lInterlingua: 64, "65": "lIndonesian", lIndonesian: 65, "66": "lInterlingue", lInterlingue: 66, "67": "lIgbo", lIgbo: 67, "68": "lSichuanYi", lSichuanYi: 68, "69": "lInupiaq", lInupiaq: 69, "70": "lIdo", lIdo: 70, "71": "lIcelandic", lIcelandic: 71, "72": "lItalian", lItalian: 72, "73": "lInuktitut", lInuktitut: 73, "74": "lJapanese", lJapanese: 74, "75": "lJavanese", lJavanese: 75, "76": "lGeorgian", lGeorgian: 76, "77": "lKongo", lKongo: 77, "78": "lKikuyu", lKikuyu: 78, "79": "lKuanyama", lKuanyama: 79, "80": "lKazakh", lKazakh: 80, "81": "lKalaallisut", lKalaallisut: 81, "82": "lCentralKhmer", lCentralKhmer: 82, "83": "lKannada", lKannada: 83, "84": "lKorean", lKorean: 84, "85": "lKanuri", lKanuri: 85, "86": "lKashmiri", lKashmiri: 86, "87": "lKurdish", lKurdish: 87, "88": "lKomi", lKomi: 88, "89": "lCornish", lCornish: 89, "90": "lKirghiz", lKirghiz: 90, "91": "lLatin", lLatin: 91, "92": "lLuxembourgish", lLuxembourgish: 92, "93": "lGanda", lGanda: 93, "94": "lLimburgan", lLimburgan: 94, "95": "lLingala", lLingala: 95, "96": "lLao", lLao: 96, "97": "lLithuanian", lLithuanian: 97, "98": "lLubaKatanga", lLubaKatanga: 98, "99": "lLatvian", lLatvian: 99, "100": "lMalagasy", lMalagasy: 100, "101": "lMarshallese", lMarshallese: 101, "102": "lMaori", lMaori: 102, "103": "lMacedonian", lMacedonian: 103, "104": "lMalayalam", lMalayalam: 104, "105": "lMongolian", lMongolian: 105, "106": "lMarathi", lMarathi: 106, "107": "lMalay", lMalay: 107, "108": "lMaltese", lMaltese: 108, "109": "lBurmese", lBurmese: 109, "110": "lNauru", lNauru: 110, "111": "lNdebele", lNdebele: 111, "112": "lNepali", lNepali: 112, "113": "lNdonga", lNdonga: 113, "114": "lDutch", lDutch: 114, "115": "lNorwegian", lNorwegian: 115, "116": "lNavajo", lNavajo: 116, "117": "lChichewa", lChichewa: 117, "118": "lOccitan", lOccitan: 118, "119": "lOjibwa", lOjibwa: 119, "120": "lOromo", lOromo: 120, "121": "lOriya", lOriya: 121, "122": "lOssetian", lOssetian: 122, "123": "lPanjabi", lPanjabi: 123, "124": "lPali", lPali: 124, "125": "lPolish", lPolish: 125, "126": "lPushto", lPushto: 126, "127": "lPortuguese", lPortuguese: 127, "128": "lQuechua", lQuechua: 128, "129": "lRomansh", lRomansh: 129, "130": "lRundi", lRundi: 130, "131": "lRomanian", lRomanian: 131, "132": "lRussian", lRussian: 132, "133": "lKinyarwanda", lKinyarwanda: 133, "134": "lSanskrit", lSanskrit: 134, "135": "lSardinian", lSardinian: 135, "136": "lSindhi", lSindhi: 136, "137": "lNorthernSami", lNorthernSami: 137, "138": "lSango", lSango: 138, "139": "lSinhala", lSinhala: 139, "140": "lSlovak", lSlovak: 140, "141": "lSlovenian", lSlovenian: 141, "142": "lSamoan", lSamoan: 142, "143": "lShona", lShona: 143, "144": "lSomali", lSomali: 144, "145": "lAlbanian", lAlbanian: 145, "146": "lSerbian", lSerbian: 146, "147": "lSwati", lSwati: 147, "148": "lSotho", lSotho: 148, "149": "lSundanese", lSundanese: 149, "150": "lSwedish", lSwedish: 150, "151": "lSwahili", lSwahili: 151, "152": "lTamil", lTamil: 152, "153": "lTelugu", lTelugu: 153, "154": "lTajik", lTajik: 154, "155": "lThai", lThai: 155, "156": "lTigrinya", lTigrinya: 156, "157": "lTurkmen", lTurkmen: 157, "158": "lTagalog", lTagalog: 158, "159": "lTswana", lTswana: 159, "160": "lTonga", lTonga: 160, "161": "lTurkish", lTurkish: 161, "162": "lTsonga", lTsonga: 162, "163": "lTatar", lTatar: 163, "164": "lTwi", lTwi: 164, "165": "lTahitian", lTahitian: 165, "166": "lUighur", lUighur: 166, "167": "lUkrainian", lUkrainian: 167, "168": "lUrdu", lUrdu: 168, "169": "lUzbek", lUzbek: 169, "170": "lVenda", lVenda: 170, "171": "lVietnamese", lVietnamese: 171, "172": "lWalloon", lWalloon: 172, "173": "lWolof", lWolof: 173, "174": "lXhosa", lXhosa: 174, "175": "lYiddish", lYiddish: 175, "176": "lYoruba", lYoruba: 176, "177": "lZhuang", lZhuang: 177, "178": "lChinese", lChinese: 178, "179": "lZulu", lZulu: 179};
  $mod.$rtti.$Enum("TUILanguage",{minvalue: 0, maxvalue: 179, ordtype: 1, enumtype: this.TUILanguage});
  this.GetLanguageISO639_1Code = function (ALang) {
    var Result = "";
    var $tmp1 = ALang;
    if ($tmp1 === $mod.TUILanguage.lNone) {
      Result = ""}
     else if ($tmp1 === $mod.TUILanguage.lAfar) {
      Result = "aa"}
     else if ($tmp1 === $mod.TUILanguage.lAbkhazian) {
      Result = "ab"}
     else if ($tmp1 === $mod.TUILanguage.lAvestan) {
      Result = "ae"}
     else if ($tmp1 === $mod.TUILanguage.lAfrikaans) {
      Result = "af"}
     else if ($tmp1 === $mod.TUILanguage.lAkan) {
      Result = "ak"}
     else if ($tmp1 === $mod.TUILanguage.lAmharic) {
      Result = "am"}
     else if ($tmp1 === $mod.TUILanguage.lAragonese) {
      Result = "an"}
     else if ($tmp1 === $mod.TUILanguage.lArabic) {
      Result = "ar"}
     else if ($tmp1 === $mod.TUILanguage.lAssamese) {
      Result = "as"}
     else if ($tmp1 === $mod.TUILanguage.lAvaric) {
      Result = "av"}
     else if ($tmp1 === $mod.TUILanguage.lAymara) {
      Result = "ay"}
     else if ($tmp1 === $mod.TUILanguage.lAzerbaijani) {
      Result = "az"}
     else if ($tmp1 === $mod.TUILanguage.lBashkir) {
      Result = "ba"}
     else if ($tmp1 === $mod.TUILanguage.lBelarusian) {
      Result = "be"}
     else if ($tmp1 === $mod.TUILanguage.lBulgarian) {
      Result = "bg"}
     else if ($tmp1 === $mod.TUILanguage.lBihari) {
      Result = "bh"}
     else if ($tmp1 === $mod.TUILanguage.lBislama) {
      Result = "bi"}
     else if ($tmp1 === $mod.TUILanguage.lBambara) {
      Result = "bm"}
     else if ($tmp1 === $mod.TUILanguage.lBengali) {
      Result = "bn"}
     else if ($tmp1 === $mod.TUILanguage.lTibetan) {
      Result = "bo"}
     else if ($tmp1 === $mod.TUILanguage.lBreton) {
      Result = "br"}
     else if ($tmp1 === $mod.TUILanguage.lBosnian) {
      Result = "bd"}
     else if ($tmp1 === $mod.TUILanguage.lCatalan) {
      Result = "ca"}
     else if ($tmp1 === $mod.TUILanguage.lChechen) {
      Result = "ce"}
     else if ($tmp1 === $mod.TUILanguage.lChamorro) {
      Result = "ch"}
     else if ($tmp1 === $mod.TUILanguage.lCorsican) {
      Result = "co"}
     else if ($tmp1 === $mod.TUILanguage.lCree) {
      Result = "cr"}
     else if ($tmp1 === $mod.TUILanguage.lCzech) {
      Result = "cs"}
     else if ($tmp1 === $mod.TUILanguage.lOldSlavic) {
      Result = "cu"}
     else if ($tmp1 === $mod.TUILanguage.lChuvash) {
      Result = "cv"}
     else if ($tmp1 === $mod.TUILanguage.lWelsh) {
      Result = "cy"}
     else if ($tmp1 === $mod.TUILanguage.lDanish) {
      Result = "da"}
     else if ($tmp1 === $mod.TUILanguage.lGerman) {
      Result = "de"}
     else if ($tmp1 === $mod.TUILanguage.lDivehi) {
      Result = "dv"}
     else if ($tmp1 === $mod.TUILanguage.lDzongkha) {
      Result = "dz"}
     else if ($tmp1 === $mod.TUILanguage.lEwe) {
      Result = "ee"}
     else if ($tmp1 === $mod.TUILanguage.lEnglish) {
      Result = "en"}
     else if ($tmp1 === $mod.TUILanguage.lEsperanto) {
      Result = "eo"}
     else if ($tmp1 === $mod.TUILanguage.lSpanish) {
      Result = "es"}
     else if ($tmp1 === $mod.TUILanguage.lEstonian) {
      Result = "et"}
     else if ($tmp1 === $mod.TUILanguage.lBasque) {
      Result = "eu"}
     else if ($tmp1 === $mod.TUILanguage.lPersian) {
      Result = "fa"}
     else if ($tmp1 === $mod.TUILanguage.lFulah) {
      Result = "ff"}
     else if ($tmp1 === $mod.TUILanguage.lFinnish) {
      Result = "fi"}
     else if ($tmp1 === $mod.TUILanguage.lFijian) {
      Result = "fj"}
     else if ($tmp1 === $mod.TUILanguage.lFaroese) {
      Result = "fo"}
     else if ($tmp1 === $mod.TUILanguage.lFrench) {
      Result = "fr"}
     else if ($tmp1 === $mod.TUILanguage.lWesternFrisian) {
      Result = "fy"}
     else if ($tmp1 === $mod.TUILanguage.lIrish) {
      Result = "ga"}
     else if ($tmp1 === $mod.TUILanguage.lGaelic) {
      Result = "gd"}
     else if ($tmp1 === $mod.TUILanguage.lGalician) {
      Result = "gl"}
     else if ($tmp1 === $mod.TUILanguage.lGuarani) {
      Result = "gn"}
     else if ($tmp1 === $mod.TUILanguage.lGujarati) {
      Result = "gu"}
     else if ($tmp1 === $mod.TUILanguage.lManx) {
      Result = "gv"}
     else if ($tmp1 === $mod.TUILanguage.lHausa) {
      Result = "ha"}
     else if ($tmp1 === $mod.TUILanguage.lHebrew) {
      Result = "he"}
     else if ($tmp1 === $mod.TUILanguage.lHindi) {
      Result = "hi"}
     else if ($tmp1 === $mod.TUILanguage.lHiriMotu) {
      Result = "ho"}
     else if ($tmp1 === $mod.TUILanguage.lCroatian) {
      Result = "hr"}
     else if ($tmp1 === $mod.TUILanguage.lHaitian) {
      Result = "ht"}
     else if ($tmp1 === $mod.TUILanguage.lHungarian) {
      Result = "hu"}
     else if ($tmp1 === $mod.TUILanguage.lArmenian) {
      Result = "hy"}
     else if ($tmp1 === $mod.TUILanguage.lHerero) {
      Result = "hz"}
     else if ($tmp1 === $mod.TUILanguage.lInterlingua) {
      Result = "ia"}
     else if ($tmp1 === $mod.TUILanguage.lIndonesian) {
      Result = "id"}
     else if ($tmp1 === $mod.TUILanguage.lInterlingue) {
      Result = "ie"}
     else if ($tmp1 === $mod.TUILanguage.lIgbo) {
      Result = "ig"}
     else if ($tmp1 === $mod.TUILanguage.lSichuanYi) {
      Result = "ii"}
     else if ($tmp1 === $mod.TUILanguage.lInupiaq) {
      Result = "ik"}
     else if ($tmp1 === $mod.TUILanguage.lIdo) {
      Result = "id"}
     else if ($tmp1 === $mod.TUILanguage.lIcelandic) {
      Result = "is"}
     else if ($tmp1 === $mod.TUILanguage.lItalian) {
      Result = "it"}
     else if ($tmp1 === $mod.TUILanguage.lInuktitut) {
      Result = "iu"}
     else if ($tmp1 === $mod.TUILanguage.lJapanese) {
      Result = "ja"}
     else if ($tmp1 === $mod.TUILanguage.lJavanese) {
      Result = "jv"}
     else if ($tmp1 === $mod.TUILanguage.lGeorgian) {
      Result = "ka"}
     else if ($tmp1 === $mod.TUILanguage.lKongo) {
      Result = "kg"}
     else if ($tmp1 === $mod.TUILanguage.lKikuyu) {
      Result = "ki"}
     else if ($tmp1 === $mod.TUILanguage.lKuanyama) {
      Result = "kj"}
     else if ($tmp1 === $mod.TUILanguage.lKazakh) {
      Result = "kk"}
     else if ($tmp1 === $mod.TUILanguage.lKalaallisut) {
      Result = "kl"}
     else if ($tmp1 === $mod.TUILanguage.lCentralKhmer) {
      Result = "km"}
     else if ($tmp1 === $mod.TUILanguage.lKannada) {
      Result = "kn"}
     else if ($tmp1 === $mod.TUILanguage.lKorean) {
      Result = "ko"}
     else if ($tmp1 === $mod.TUILanguage.lKanuri) {
      Result = "kr"}
     else if ($tmp1 === $mod.TUILanguage.lKashmiri) {
      Result = "ks"}
     else if ($tmp1 === $mod.TUILanguage.lKurdish) {
      Result = "ku"}
     else if ($tmp1 === $mod.TUILanguage.lKomi) {
      Result = "kv"}
     else if ($tmp1 === $mod.TUILanguage.lCornish) {
      Result = "kw"}
     else if ($tmp1 === $mod.TUILanguage.lKirghiz) {
      Result = "ky"}
     else if ($tmp1 === $mod.TUILanguage.lLatin) {
      Result = "la"}
     else if ($tmp1 === $mod.TUILanguage.lLuxembourgish) {
      Result = "lb"}
     else if ($tmp1 === $mod.TUILanguage.lGanda) {
      Result = "lg"}
     else if ($tmp1 === $mod.TUILanguage.lLimburgan) {
      Result = "li"}
     else if ($tmp1 === $mod.TUILanguage.lLingala) {
      Result = "ln"}
     else if ($tmp1 === $mod.TUILanguage.lLao) {
      Result = "lo"}
     else if ($tmp1 === $mod.TUILanguage.lLithuanian) {
      Result = "lt"}
     else if ($tmp1 === $mod.TUILanguage.lLubaKatanga) {
      Result = "lu"}
     else if ($tmp1 === $mod.TUILanguage.lLatvian) {
      Result = "lv"}
     else if ($tmp1 === $mod.TUILanguage.lMalagasy) {
      Result = "mg"}
     else if ($tmp1 === $mod.TUILanguage.lMarshallese) {
      Result = "mh"}
     else if ($tmp1 === $mod.TUILanguage.lMaori) {
      Result = "mi"}
     else if ($tmp1 === $mod.TUILanguage.lMacedonian) {
      Result = "mk"}
     else if ($tmp1 === $mod.TUILanguage.lMalayalam) {
      Result = "ml"}
     else if ($tmp1 === $mod.TUILanguage.lMongolian) {
      Result = "mn"}
     else if ($tmp1 === $mod.TUILanguage.lMarathi) {
      Result = "mr"}
     else if ($tmp1 === $mod.TUILanguage.lMalay) {
      Result = "ms"}
     else if ($tmp1 === $mod.TUILanguage.lMaltese) {
      Result = "mt"}
     else if ($tmp1 === $mod.TUILanguage.lBurmese) {
      Result = "my"}
     else if ($tmp1 === $mod.TUILanguage.lNauru) {
      Result = "na"}
     else if ($tmp1 === $mod.TUILanguage.lNdebele) {
      Result = "nb"}
     else if ($tmp1 === $mod.TUILanguage.lNepali) {
      Result = "nd"}
     else if ($tmp1 === $mod.TUILanguage.lNdonga) {
      Result = "ng"}
     else if ($tmp1 === $mod.TUILanguage.lDutch) {
      Result = "nl"}
     else if ($tmp1 === $mod.TUILanguage.lNorwegian) {
      Result = "no"}
     else if ($tmp1 === $mod.TUILanguage.lNavajo) {
      Result = "nv"}
     else if ($tmp1 === $mod.TUILanguage.lChichewa) {
      Result = "ny"}
     else if ($tmp1 === $mod.TUILanguage.lOccitan) {
      Result = "oc"}
     else if ($tmp1 === $mod.TUILanguage.lOjibwa) {
      Result = "oj"}
     else if ($tmp1 === $mod.TUILanguage.lOromo) {
      Result = "om"}
     else if ($tmp1 === $mod.TUILanguage.lOriya) {
      Result = "or"}
     else if ($tmp1 === $mod.TUILanguage.lOssetian) {
      Result = "os"}
     else if ($tmp1 === $mod.TUILanguage.lPanjabi) {
      Result = "pa"}
     else if ($tmp1 === $mod.TUILanguage.lPali) {
      Result = "pi"}
     else if ($tmp1 === $mod.TUILanguage.lPolish) {
      Result = "pl"}
     else if ($tmp1 === $mod.TUILanguage.lPushto) {
      Result = "ps"}
     else if ($tmp1 === $mod.TUILanguage.lPortuguese) {
      Result = "pt"}
     else if ($tmp1 === $mod.TUILanguage.lQuechua) {
      Result = "qu"}
     else if ($tmp1 === $mod.TUILanguage.lRomansh) {
      Result = "rm"}
     else if ($tmp1 === $mod.TUILanguage.lRundi) {
      Result = "rn"}
     else if ($tmp1 === $mod.TUILanguage.lRomanian) {
      Result = "ro"}
     else if ($tmp1 === $mod.TUILanguage.lRussian) {
      Result = "ru"}
     else if ($tmp1 === $mod.TUILanguage.lKinyarwanda) {
      Result = "rw"}
     else if ($tmp1 === $mod.TUILanguage.lSanskrit) {
      Result = "sa"}
     else if ($tmp1 === $mod.TUILanguage.lSardinian) {
      Result = "sc"}
     else if ($tmp1 === $mod.TUILanguage.lSindhi) {
      Result = "sd"}
     else if ($tmp1 === $mod.TUILanguage.lNorthernSami) {
      Result = "se"}
     else if ($tmp1 === $mod.TUILanguage.lSango) {
      Result = "sg"}
     else if ($tmp1 === $mod.TUILanguage.lSinhala) {
      Result = "si"}
     else if ($tmp1 === $mod.TUILanguage.lSlovak) {
      Result = "sk"}
     else if ($tmp1 === $mod.TUILanguage.lSlovenian) {
      Result = "sl"}
     else if ($tmp1 === $mod.TUILanguage.lSamoan) {
      Result = "sm"}
     else if ($tmp1 === $mod.TUILanguage.lShona) {
      Result = "sn"}
     else if ($tmp1 === $mod.TUILanguage.lSomali) {
      Result = "so"}
     else if ($tmp1 === $mod.TUILanguage.lAlbanian) {
      Result = "sq"}
     else if ($tmp1 === $mod.TUILanguage.lSerbian) {
      Result = "sr"}
     else if ($tmp1 === $mod.TUILanguage.lSwati) {
      Result = "ss"}
     else if ($tmp1 === $mod.TUILanguage.lSotho) {
      Result = "st"}
     else if ($tmp1 === $mod.TUILanguage.lSundanese) {
      Result = "su"}
     else if ($tmp1 === $mod.TUILanguage.lSwedish) {
      Result = "sv"}
     else if ($tmp1 === $mod.TUILanguage.lSwahili) {
      Result = "sw"}
     else if ($tmp1 === $mod.TUILanguage.lTamil) {
      Result = "ta"}
     else if ($tmp1 === $mod.TUILanguage.lTelugu) {
      Result = "te"}
     else if ($tmp1 === $mod.TUILanguage.lTajik) {
      Result = "tg"}
     else if ($tmp1 === $mod.TUILanguage.lThai) {
      Result = "th"}
     else if ($tmp1 === $mod.TUILanguage.lTigrinya) {
      Result = "ti"}
     else if ($tmp1 === $mod.TUILanguage.lTurkmen) {
      Result = "tk"}
     else if ($tmp1 === $mod.TUILanguage.lTagalog) {
      Result = "tl"}
     else if ($tmp1 === $mod.TUILanguage.lTswana) {
      Result = "tn"}
     else if ($tmp1 === $mod.TUILanguage.lTonga) {
      Result = "to"}
     else if ($tmp1 === $mod.TUILanguage.lTurkish) {
      Result = "tr"}
     else if ($tmp1 === $mod.TUILanguage.lTsonga) {
      Result = "ts"}
     else if ($tmp1 === $mod.TUILanguage.lTatar) {
      Result = "tt"}
     else if ($tmp1 === $mod.TUILanguage.lTwi) {
      Result = "tw"}
     else if ($tmp1 === $mod.TUILanguage.lTahitian) {
      Result = "ty"}
     else if ($tmp1 === $mod.TUILanguage.lUighur) {
      Result = "ug"}
     else if ($tmp1 === $mod.TUILanguage.lUkrainian) {
      Result = "uk"}
     else if ($tmp1 === $mod.TUILanguage.lUrdu) {
      Result = "ur"}
     else if ($tmp1 === $mod.TUILanguage.lUzbek) {
      Result = "uz"}
     else if ($tmp1 === $mod.TUILanguage.lVenda) {
      Result = "ve"}
     else if ($tmp1 === $mod.TUILanguage.lVietnamese) {
      Result = "vi"}
     else if ($tmp1 === $mod.TUILanguage.lWalloon) {
      Result = "wa"}
     else if ($tmp1 === $mod.TUILanguage.lWolof) {
      Result = "wo"}
     else if ($tmp1 === $mod.TUILanguage.lXhosa) {
      Result = "xh"}
     else if ($tmp1 === $mod.TUILanguage.lYiddish) {
      Result = "yi"}
     else if ($tmp1 === $mod.TUILanguage.lYoruba) {
      Result = "yo"}
     else if ($tmp1 === $mod.TUILanguage.lZhuang) {
      Result = "za"}
     else if ($tmp1 === $mod.TUILanguage.lChinese) {
      Result = "zh"}
     else if ($tmp1 === $mod.TUILanguage.lZulu) Result = "zu";
    return Result;
  };
});
rtl.module("WEBLib.JSON",["System","Classes","Web","JS","SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$Class("TJSONObject");
  $mod.$rtti.$Class("TJSONString");
  rtl.createClass($mod,"TJSONAncestor",pas.System.TObject,function () {
    this.GetStrValue = function () {
      var Result = "";
      Result = "";
      return Result;
    };
    this.SetStrValue = function (Value) {
    };
  });
  rtl.createClass($mod,"TJSONValue",$mod.TJSONAncestor,function () {
    this.$init = function () {
      $mod.TJSONAncestor.$init.call(this);
      this.fjv = undefined;
    };
    this.Create$1 = function (AJSValue) {
      pas.System.TObject.Create.call(this);
      this.fjv = AJSValue;
      return this;
    };
    this.ToString = function () {
      var Result = "";
      Result = JSON.stringify(this.fjv);
      return Result;
    };
  });
  rtl.createClass($mod,"TJSONPair",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.fjv = null;
      this.fjs = null;
    };
    this.$final = function () {
      this.fjv = undefined;
      this.fjs = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.fjs = $mod.TJSONString.$create("Create");
      return this;
    };
    this.Create$2 = function (Str, Value) {
      pas.System.TObject.Create.call(this);
      this.fjs = $mod.TJSONString.$create("Create$2",[Str]);
      this.fjv = Value;
      return this;
    };
    this.Create$3 = function (Str, Value) {
      pas.System.TObject.Create.call(this);
      this.fjs = $mod.TJSONString.$create("Create$2",[Str]);
      this.fjv = $mod.TJSONString.$create("Create$2",[Value]);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"fjs");
      pas.System.TObject.Destroy.call(this);
    };
    this.ToString = function () {
      var Result = "";
      if ($mod.TJSONObject.isPrototypeOf(this.fjv)) {
        Result = '"' + this.fjs.GetStrValue() + '":' + rtl.as(this.fjv,$mod.TJSONObject).ToJSON()}
       else {
        if ((this.fjs !== null) && (this.fjv !== null)) {
          Result = '"' + this.fjs.GetStrValue() + '":' + this.fjv.ToString()}
         else Result = "";
      };
      return Result;
    };
  });
  rtl.createClass($mod,"TJSONPairList",pas.Classes.TList,function () {
  });
  rtl.createClass($mod,"TJSONObject",$mod.TJSONValue,function () {
    this.$init = function () {
      $mod.TJSONValue.$init.call(this);
      this.fjo = null;
      this.FMembers = null;
    };
    this.$final = function () {
      this.fjo = undefined;
      this.FMembers = undefined;
      $mod.TJSONValue.$final.call(this);
    };
    this.GetPair = function (I) {
      var Result = null;
      if ((I >= 0) && (I < this.FMembers.GetCount())) {
        Result = rtl.getObject(this.FMembers.Get(I))}
       else Result = null;
      return Result;
    };
    this.GetCount = function () {
      var Result = 0;
      Result = rtl.length(Object.keys(this.fjo));
      return Result;
    };
    this.GetItem = function (Index) {
      var Result = null;
      var jv = undefined;
      jv = this.fjo[Object.keys(this.fjo)[Index]];
      Result = this.JSONValueFromJS(jv);
      return Result;
    };
    this.AddDescendant = function (Descendent) {
      this.FMembers.Add(Descendent);
    };
    this.JSONValueFromJS = function (AJSValue) {
      var Result = null;
      Result = null;
      if (rtl.isArray(AJSValue)) {
        Result = $mod.TJSONArray.$create("Create$2");
        rtl.as(Result,$mod.TJSONArray).fja = rtl.getObject(AJSValue);
      } else if (rtl.isObject(AJSValue)) {
        Result = $mod.TJSONObject.$create("Create$2");
        rtl.as(Result,$mod.TJSONObject).fjo = rtl.getObject(AJSValue);
      } else if (rtl.isString(AJSValue)) {
        Result = $mod.TJSONString.$create("Create");
        rtl.as(Result,$mod.TJSONString).SetStrValue("" + AJSValue);
      } else if (rtl.isNumber(AJSValue)) {
        Result = $mod.TJSONNumber.$create("Create");
        rtl.as(Result,$mod.TJSONNumber).SetStrValue("" + AJSValue);
        rtl.as(Result,$mod.TJSONNumber).FInt = Math.floor(AJSValue);
        rtl.as(Result,$mod.TJSONNumber).FDouble = rtl.getNumber(AJSValue);
      } else if (pas.JS.isBoolean(AJSValue)) {
        if (pas.JS.toBoolean(AJSValue)) {
          Result = $mod.TJSONTrue.$create("Create")}
         else Result = $mod.TJSONFalse.$create("Create");
      };
      if (Result != null) Result.fjv = AJSValue;
      return Result;
    };
    this.Create$2 = function () {
      pas.System.TObject.Create.call(this);
      this.FMembers = $mod.TJSONPairList.$create("Create$1");
      this.fjo = null;
      return this;
    };
    this.Create$3 = function (AObject) {
      pas.System.TObject.Create.call(this);
      this.FMembers = $mod.TJSONPairList.$create("Create$1");
      this.fjo = AObject;
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FMembers");
      pas.System.TObject.Destroy.call(this);
    };
    this.ParseJSONValue = function (data) {
      var Result = null;
      var O = null;
      O = JSON.parse(data);
      if (rtl.isArray(O)) {
        Result = $mod.TJSONArray.$create("Create$2");
        rtl.as(Result,$mod.TJSONArray).fja = O;
      } else if (pas.JS.isNull(O)) {
        Result = $mod.TJSONNull.$create("Create")}
       else {
        Result = $mod.TJSONObject.$create("Create$2");
        rtl.as(Result,$mod.TJSONObject).fjo = O;
      };
      return Result;
    };
    this.GetJSONValue = function (Name) {
      var Result = "";
      var jv = undefined;
      jv = this.fjo[Name];
      Result = $impl.JSONObjectToString(jv);
      return Result;
    };
    this.Get = function (Name) {
      var Result = null;
      var jv = undefined;
      var jsv = null;
      Result = null;
      jv = this.fjo[Name];
      if (pas.System.Assigned(jv)) {
        Result = $mod.TJSONPair.$create("Create$1");
        jsv = this.JSONValueFromJS(jv);
        Result.fjs.SetStrValue(Name);
        Result.fjv = jsv;
      };
      return Result;
    };
    this.Get$1 = function (Index) {
      var Result = null;
      Result = this.Get(Object.keys(this.fjo)[Index]);
      return Result;
    };
    this.GetValue = function (Name) {
      var Result = null;
      var jp = null;
      Result = null;
      jp = this.Get(Name);
      if (jp != null) Result = jp.fjv;
      return Result;
    };
    this.AddPair = function (Pair) {
      var Result = null;
      var LObj = null;
      if (Pair != null) {
        this.AddDescendant(Pair);
        LObj = this.$class.ParseJSONValue(this.ToJSON());
      };
      Result = LObj;
      return Result;
    };
    this.AddPair$1 = function (Str, Val) {
      var Result = null;
      this.AddPair($mod.TJSONPair.$create("Create$2",[Str,Val]));
      Result = this;
      return Result;
    };
    this.AddPair$2 = function (Str, Val) {
      var Result = null;
      this.AddPair($mod.TJSONPair.$create("Create$3",[Str,Val]));
      Result = this;
      return Result;
    };
    this.AddPair$3 = function (Str, Val) {
      var Result = null;
      this.AddPair($mod.TJSONPair.$create("Create$2",[Str,$mod.TJSONNumber.$create("Create$3",[Val])]));
      Result = this;
      return Result;
    };
    this.ToJSON = function () {
      var Result = "";
      var s = "";
      var Size = 0;
      var I = 0;
      var jp = null;
      if (this.fjo != null) {
        Size = this.GetCount()}
       else Size = this.FMembers.GetCount();
      if ($mod.TJSONArray.isPrototypeOf(this)) {
        Result = rtl.as(this,$mod.TJSONArray).ToString();
      } else {
        s = "{";
        if (Size > 0) {
          if (this.fjo != null) {
            jp = this.Get$1(0);
            if (jp != null) s = s + jp.ToString();
          } else s = s + rtl.getObject(this.FMembers.Get(0)).ToString();
        };
        for (var $l1 = 1, $end2 = Size - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          s = s + ",";
          if (this.fjo != null) {
            jp = this.Get$1(I);
            if (jp != null) s = s + jp.ToString();
          } else s = s + rtl.getObject(this.FMembers.Get(I)).ToString();
        };
        s = s + "}";
        Result = s;
      };
      return Result;
    };
    this.ToString = function () {
      var Result = "";
      Result = this.ToJSON();
      return Result;
    };
  });
  rtl.createClass($mod,"TJSONString",$mod.TJSONValue,function () {
    this.$init = function () {
      $mod.TJSONValue.$init.call(this);
      this.FValue = "";
    };
    this.GetStrValue = function () {
      var Result = "";
      Result = this.FValue;
      return Result;
    };
    this.SetStrValue = function (Value) {
      this.FValue = Value;
    };
    this.Create$2 = function (AString) {
      pas.System.TObject.Create.call(this);
      this.fjv = AString;
      this.FValue = AString;
      return this;
    };
  });
  rtl.createClass($mod,"TJSONNumber",$mod.TJSONString,function () {
    this.$init = function () {
      $mod.TJSONString.$init.call(this);
      this.FInt = 0;
      this.FDouble = 0.0;
    };
    this.GetStrValue = function () {
      var Result = "";
      Result = pas.SysUtils.FloatToStr(this.FDouble);
      return Result;
    };
    this.SetStrValue = function (Value) {
      this.FInt = pas.SysUtils.StrToInt(Value);
      this.FDouble = pas.SysUtils.StrToFloat(Value);
    };
    this.Create$3 = function (ANumber) {
      pas.System.TObject.Create.call(this);
      this.fjv = ANumber;
      return this;
    };
    this.Create$4 = function (ANumber) {
      pas.System.TObject.Create.call(this);
      this.fjv = ANumber;
      return this;
    };
  });
  rtl.createClass($mod,"TJSONTrue",$mod.TJSONValue,function () {
    this.GetStrValue = function () {
      var Result = "";
      Result = "true";
      return Result;
    };
    this.ToString = function () {
      var Result = "";
      Result = this.GetStrValue();
      return Result;
    };
  });
  rtl.createClass($mod,"TJSONFalse",$mod.TJSONValue,function () {
    this.GetStrValue = function () {
      var Result = "";
      Result = "false";
      return Result;
    };
    this.ToString = function () {
      var Result = "";
      Result = this.GetStrValue();
      return Result;
    };
  });
  rtl.createClass($mod,"TJSONNull",$mod.TJSONValue,function () {
    this.GetStrValue = function () {
      var Result = "";
      Result = "null";
      return Result;
    };
    this.ToString = function () {
      var Result = "";
      Result = this.GetStrValue();
      return Result;
    };
  });
  rtl.createClass($mod,"TJSONArray",$mod.TJSONObject,function () {
    this.$init = function () {
      $mod.TJSONObject.$init.call(this);
      this.fja = null;
    };
    this.$final = function () {
      this.fja = undefined;
      $mod.TJSONObject.$final.call(this);
    };
    this.GetItem$1 = function (index) {
      var Result = null;
      var jv = undefined;
      jv = this.GetJA()[index];
      if (rtl.isExt(jv,$mod.TJSONObject,1) || rtl.isExt(jv,$mod.TJSONArray,1)) {
        Result = rtl.getObject(jv)}
       else Result = this.JSONValueFromJS(jv);
      return Result;
    };
    this.SetItem = function (index, Value) {
      if ($mod.TJSONObject.isPrototypeOf(Value)) this.GetJA()[index] = Value.fjo;
    };
    this.GetCount$1 = function () {
      var Result = 0;
      Result = this.GetJA().length;
      return Result;
    };
    this.GetJA = function () {
      var Result = null;
      if (!(this.fja != null)) this.fja = new Array();
      Result = this.fja;
      return Result;
    };
    this.Create$4 = function (AArray) {
      $mod.TJSONObject.Create$2.call(this);
      this.fja = AArray;
      return this;
    };
    this.Add = function (Element) {
      this.GetJA().push(Element);
    };
    this.Add$1 = function (Element) {
      this.GetJA().push(Element);
    };
    this.Add$2 = function (Element) {
      this.GetJA().push(Element);
    };
    this.Add$3 = function (Element) {
      this.GetJA().push(Element);
    };
    this.Add$4 = function (Element) {
      this.GetJA().push(Element);
    };
    this.Add$5 = function (Element) {
      this.GetJA().push(Element);
    };
    this.ToString = function () {
      var Result = "";
      var i = 0;
      var jv = null;
      var comma = "";
      Result = "[";
      comma = "";
      for (var $l1 = 0, $end2 = this.GetCount$1() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        jv = this.GetItem$1(i);
        if (jv != null) {
          if ($mod.TJSONObject.isPrototypeOf(jv)) {
            Result = Result + comma + rtl.as(jv,$mod.TJSONObject).ToString();
          } else Result = Result + comma + jv.ToString();
          comma = ",";
        };
      };
      Result = Result + "]";
      return Result;
    };
  });
  rtl.createClass($mod,"TJSON",pas.System.TObject,function () {
    this.Parse = function (s) {
      var Result = null;
      var O = null;
      O = JSON.parse(s);
      if (rtl.isArray(O)) {
        Result = $mod.TJSONArray.$create("Create$4",[O]);
      } else {
        Result = $mod.TJSONObject.$create("Create$3",[O]);
      };
      return Result;
    };
  });
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.JSONObjectToString = function (v) {
    return v+"";
  };
});
rtl.module("WEBLib.Consts",["System"],function () {
  "use strict";
  var $mod = this;
  $mod.$resourcestrings = {SWarning: {org: "Warning"}, SError: {org: "Error"}, SInformation: {org: "Information"}, SConfirm: {org: "Confirm"}, SOK: {org: "OK"}, SCancel: {org: "Cancel"}, SYes: {org: "Yes"}, SNo: {org: "No"}, SAbort: {org: "Abort"}, SRetry: {org: "Retry"}, SIgnore: {org: "Ignore"}, SHelp: {org: "Help"}, SClose: {org: "Close"}, SAll: {org: "All"}, SYesToAll: {org: "Yes to all"}, SNoToAll: {org: "No to all"}, SReadError: {org: "Stream read error"}, SWriteError: {org: "Stream write error"}, SCannotGetFile: {org: "Cannot get the file from the URL %s because of the error %d!"}, SErrorLoadFromFile: {org: "There was an error during the download of the file %s!"}, SLoadFromFileAborted: {org: "The download of the file %s was abroted!"}};
});
rtl.module("WEBLib.Utils",["System","Types","Web","SysUtils","Math","Classes","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$Class("TInterfaceList");
  $mod.$rtti.$RefToProcVar("TProc",{procsig: rtl.newTIProcSig(null)});
  $mod.$rtti.$RefToProcVar("TProcBoolean",{procsig: rtl.newTIProcSig([["AValue",rtl.boolean]])});
  $mod.$rtti.$RefToProcVar("TProcInteger",{procsig: rtl.newTIProcSig([["AValue",rtl.longint]])});
  $mod.$rtti.$RefToProcVar("TProcString",{procsig: rtl.newTIProcSig([["AValue",rtl.string]])});
  rtl.createClass($mod,"EConvertError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EEncodingError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EStreamError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EStringStreamError",$mod.EStreamError,function () {
  });
  rtl.createClass($mod,"EFilerError",$mod.EStreamError,function () {
  });
  rtl.createClass($mod,"EReadError",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EWriteError",$mod.EFilerError,function () {
  });
  rtl.createHelper($mod,"TBytesHelper",null,function () {
    this.get_Length = function () {
      var Result = 0;
      Result = rtl.length(this.get());
      return Result;
    };
    this.set_Length = function (AValue) {
      this.set(rtl.arraySetLength(this.get(),0,AValue));
    };
    this.Compare = function (ARight) {
      var Result = 0;
      var lCount = 0;
      if ($mod.TBytesHelper.get_Length.call(this) > $mod.TBytesHelper.get_Length.call({get: function () {
          return ARight;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }})) return 1;
      if ($mod.TBytesHelper.get_Length.call(this) < $mod.TBytesHelper.get_Length.call({get: function () {
          return ARight;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }})) return -1;
      Result = 0;
      for (var $l1 = $mod.TBytesHelper.Low.call(this), $end2 = $mod.TBytesHelper.High.call(this); $l1 <= $end2; $l1++) {
        lCount = $l1;
        if (this.get()[lCount] > ARight[lCount]) return 1;
        if (this.get()[lCount] < ARight[lCount]) return -1;
      };
      return Result;
    };
    this.High = function () {
      var Result = 0;
      Result = rtl.length(this.get()) - 1;
      return Result;
    };
    this.Low = function () {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.SubBytes = function (AStartIndex) {
      var Result = [];
      Result = rtl.arrayCopy(0,this.get(),AStartIndex,$mod.TBytesHelper.get_Length.call(this));
      return Result;
    };
    this.SubBytes$1 = function (AStartIndex, ALength) {
      var Result = [];
      Result = rtl.arrayCopy(0,this.get(),AStartIndex,ALength);
      return Result;
    };
  });
  $mod.$rtti.$DynArray("TWords",{eltype: rtl.word});
  rtl.createHelper($mod,"TWordsHelper",null,function () {
    this.get_Length = function () {
      var Result = 0;
      Result = rtl.length(this.get());
      return Result;
    };
    this.set_Length = function (AValue) {
      this.set(rtl.arraySetLength(this.get(),0,AValue));
    };
    var cBytesPerWord = 2;
    this.FromBytes = function (ABytes) {
      var Result = [];
      var lCount = 0;
      var lLow = 0;
      var lHigh = 0;
      lCount = $mod.TBytesHelper.get_Length.call({get: function () {
          return ABytes;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }});
      if (pas.System.Odd(lCount)) lCount += 1;
      $mod.TWordsHelper.set_Length.call({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},Math.floor(lCount / 2));
      lCount = $mod.TBytesHelper.Low.call({get: function () {
          return ABytes;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }});
      while (lCount <= $mod.TBytesHelper.High.call({get: function () {
          return ABytes;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }})) {
        lLow = ABytes[lCount];
        if ((lCount + 1) <= $mod.TBytesHelper.High.call({get: function () {
            return ABytes;
          }, set: function (v) {
            rtl.raiseE("EPropReadOnly");
          }})) {
          lHigh = ABytes[lCount + 1]}
         else lHigh = 0;
        Result[Math.floor(lCount / 2)] = $mod.TWordHelper.FromBytes(lLow,lHigh);
        lCount += 2;
      };
      return Result;
    };
    this.High = function () {
      var Result = 0;
      Result = rtl.length(this.get()) - 1;
      return Result;
    };
    this.Low = function () {
      var Result = 0;
      Result = 0;
      return Result;
    };
    var cBytesPerWord$1 = 2;
    this.ToBytes = function () {
      var Result = [];
      var lLow = 0;
      var lHigh = 0;
      var lCount = 0;
      var lNewIndex = 0;
      $mod.TBytesHelper.set_Length.call({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},$mod.TWordsHelper.get_Length.call(this) * 2);
      for (var $l1 = $mod.TWordsHelper.Low.call(this), $end2 = $mod.TWordsHelper.High.call(this); $l1 <= $end2; $l1++) {
        lCount = $l1;
        $mod.TWordHelper.ToBytes.call({a: lCount, p: this.get(), get: function () {
            return this.p[this.a];
          }, set: function (v) {
            this.p[this.a] = v;
          }},{get: function () {
            return lLow;
          }, set: function (v) {
            lLow = v;
          }},{get: function () {
            return lHigh;
          }, set: function (v) {
            lHigh = v;
          }});
        lNewIndex = lCount * 2;
        Result[lNewIndex] = lLow;
        Result[lNewIndex + 1] = lHigh;
      };
      return Result;
    };
  });
  rtl.createHelper($mod,"TCharHelper",null,function () {
    this.Length = 1;
    this.Size = 2;
    this.ToOrd = function () {
      var Result = 0;
      Result = this.get().charCodeAt();
      return Result;
    };
    this.ToUpper = function () {
      var Result = "";
      Result = $mod.TCharHelper.ToUpper$1(this.get());
      return Result;
    };
    this.ToUpper$1 = function (AValue) {
      return AValue.toUpperCase();
    };
  });
  rtl.createHelper($mod,"TIntegerHelper",null,function () {
    this.Equals = function (AValue) {
      var Result = false;
      Result = this.get() === AValue;
      return Result;
    };
    this.NotEquals = function (AValue) {
      var Result = false;
      Result = !$mod.TIntegerHelper.Equals.call(this,AValue);
      return Result;
    };
    this.Parse = function (AValue) {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(AValue);
      return Result;
    };
    this.ToString = function () {
      var Result = "";
      Result = $mod.TIntegerHelper.ToString$1(this.get());
      return Result;
    };
    this.ToString$1 = function (AValue) {
      return AValue.toString();
    };
    this.TryParse = function (AString, AValue) {
      var Result = false;
      Result = pas.SysUtils.TryStrToInt(AString,AValue);
      return Result;
    };
  });
  rtl.createHelper($mod,"TLongIntHelper",null,function () {
    this.Equals = function (AValue) {
      var Result = false;
      Result = this.get() === AValue;
      return Result;
    };
    this.NotEquals = function (AValue) {
      var Result = false;
      Result = !$mod.TLongIntHelper.Equals.call(this,AValue);
      return Result;
    };
    this.Parse = function (AValue) {
      var Result = 0;
      Result = pas.SysUtils.StrToInt(AValue);
      return Result;
    };
    this.ToString = function () {
      var Result = "";
      Result = $mod.TLongIntHelper.ToString$1(this.get());
      return Result;
    };
    this.ToString$1 = function (AValue) {
      return AValue.toString();
    };
    this.TryParse = function (AString, AValue) {
      var Result = false;
      Result = pas.SysUtils.TryStrToInt(AString,AValue);
      return Result;
    };
  });
  rtl.createHelper($mod,"TWordHelper",null,function () {
    var cMask = 0xFF;
    var cBitPerByte = 8;
    this.FromBytes = function (ALow, AHigh) {
      var Result = 0;
      Result = ALow + (AHigh & (cMask << 8));
      return Result;
    };
    var cMask = 0xFF;
    var cBitPerByte$1 = 8;
    this.ToBytes = function (ALow, AHigh) {
      ALow.set(this.get() & cMask);
      AHigh.set(this.get() & (cMask << 8));
    };
  });
  rtl.createHelper($mod,"TStringHelper",null,function () {
    this.Empty = "";
    this.get_Chars = function (AIndex) {
      var Result = "";
      Result = this.get().charAt((AIndex + 1) - 1);
      return Result;
    };
    this.get_Length = function () {
      var Result = 0;
      Result = this.get().length;
      return Result;
    };
    this.Pos = function (ASubStr, AStr, AOffset) {
      return AStr.indexOf(ASubStr, AOffset - 1) + 1;
    };
    this.Reverse = function () {
      var Result = "";
      var lCount = 0;
      Result = $mod.TStringHelper.Empty;
      $mod.TStringHelper.set_Length.call({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},$mod.TStringHelper.get_Length.call(this));
      for (var $l1 = 0, $end2 = $mod.TStringHelper.get_Length.call(this) - 1; $l1 <= $end2; $l1++) {
        lCount = $l1;
        $mod.TStringHelper.set_Chars.call({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},$mod.TStringHelper.get_Length.call(this) - lCount - 1,$mod.TStringHelper.get_Chars.call(this,lCount));
      };
      return Result;
    };
    this.set_Chars = function (AIndex, AValue) {
      this.set(rtl.setCharAt(this.get(),(AIndex + 1) - 1,AValue));
    };
    this.set_Length = function (AValue) {
      this.set(rtl.strSetLength(this.get(),AValue));
    };
    this.CompareTo = function (AValue) {
      var Result = 0;
      Result = $mod.TStringHelper.CompareTo$1(this.get(),AValue);
      return Result;
    };
    this.CompareTo$1 = function (ALeft, ARight) {
      return ALeft.localeCompare(ARight);
    };
    this.Equals = function (AValue) {
      var Result = false;
      Result = this.get() === AValue;
      return Result;
    };
    this.FirstChar = function () {
      var Result = "";
      if ($mod.TStringHelper.NotIsEmpty.call(this)) {
        Result = $mod.TStringHelper.get_Chars.call(this,0)}
       else Result = "\x00";
      return Result;
    };
    this.Format = function (AArgs) {
      var Result = "";
      Result = pas.SysUtils.Format(this.get(),AArgs);
      return Result;
    };
    this.Format$1 = function (AValue, AArgs) {
      var Result = "";
      Result = pas.SysUtils.Format(AValue,AArgs);
      return Result;
    };
    this.High = function () {
      var Result = 0;
      Result = $mod.TStringHelper.get_Length.call(this) - 1;
      return Result;
    };
    this.IndexOf = function (AValue) {
      var Result = 0;
      Result = $mod.TStringHelper.Pos.call(this,AValue,this.get(),1) - 1;
      return Result;
    };
    this.IndexOf$1 = function (AValue, AStartIndex, ACount) {
      var Result = 0;
      Result = $mod.TStringHelper.Pos.call(this,AValue,this.get(),AStartIndex + 1) - 1;
      if ((Result + $mod.TStringHelper.get_Length.call({get: function () {
          return AValue;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }})) > (AStartIndex + ACount)) Result = -1;
      return Result;
    };
    this.IsEmpty = function () {
      var Result = false;
      Result = this.get() === $mod.TStringHelper.Empty;
      return Result;
    };
    var cNumbers = rtl.createSet(null,48,57);
    this.IsNumber = function () {
      var Result = false;
      var lCount = 0;
      if ($mod.TStringHelper.IsEmpty.call(this)) return false;
      for (var $l1 = 0, $end2 = $mod.TStringHelper.get_Length.call(this) - 1; $l1 <= $end2; $l1++) {
        lCount = $l1;
        if (!($mod.TStringHelper.get_Chars.call(this,lCount).charCodeAt() in cNumbers)) return false;
      };
      Result = true;
      return Result;
    };
    this.LastIndexOf = function (AValue) {
      var Result = 0;
      Result = $mod.TStringHelper.IndexOf.call({a: $mod.TStringHelper.Reverse.call(this), get: function () {
          return this.a;
        }, set: function (v) {
          this.a = v;
        }},AValue);
      if (Result >= 0) Result = $mod.TStringHelper.get_Length.call(this) - Result - 1;
      return Result;
    };
    this.Low = function () {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.NotEquals = function (AValue) {
      var Result = false;
      Result = !$mod.TStringHelper.Equals.call(this,AValue);
      return Result;
    };
    this.NotIsEmpty = function () {
      var Result = false;
      Result = this.get() !== $mod.TStringHelper.Empty;
      return Result;
    };
    var cDefPadChar = " ";
    this.PadLeft = function (ATotalWidth) {
      var Result = "";
      Result = $mod.TStringHelper.PadLeft$1.call(this,ATotalWidth,cDefPadChar);
      return Result;
    };
    this.PadLeft$1 = function (ATotalWidth, APaddingChar) {
      var Result = "";
      ATotalWidth = ATotalWidth - $mod.TStringHelper.get_Length.call(this);
      if (ATotalWidth > 0) {
        Result = pas.System.StringOfChar(APaddingChar,ATotalWidth) + this.get()}
       else Result = this.get();
      return Result;
    };
    this.Remove = function (AStartIndex) {
      var Result = "";
      Result = $mod.TStringHelper.Remove$1.call(this,AStartIndex,1);
      return Result;
    };
    this.Remove$1 = function (AStartIndex, ACount) {
      var Result = "";
      Result = $mod.TStringHelper.Substring$1.call(this,0,AStartIndex - 1) + $mod.TStringHelper.Substring.call(this,AStartIndex + ACount);
      return Result;
    };
    this.Substring = function (AStartIndex) {
      var Result = "";
      Result = pas.System.Copy(this.get(),AStartIndex + 1,$mod.TStringHelper.get_Length.call(this));
      return Result;
    };
    this.Substring$1 = function (AStartIndex, ALength) {
      var Result = "";
      Result = pas.System.Copy(this.get(),AStartIndex + 1,ALength);
      return Result;
    };
    this.ToLower = function () {
      var Result = "";
      var lValue = "";
      lValue = this.get();
      lValue = lValue.toLowerCase();
      Result = lValue;
      return Result;
    };
    this.ToUpper = function () {
      var Result = "";
      var lValue = "";
      lValue = this.get();
      lValue = lValue.toUpperCase();
      Result = lValue;
      return Result;
    };
  });
  rtl.createHelper($mod,"TDateTimeHelper",null,function () {
    this.Equals = function (AValue) {
      var Result = false;
      Result = pas.Math.SameValue(this.get(),AValue,0.0);
      return Result;
    };
    this.NotEquals = function (AValue) {
      var Result = false;
      Result = !pas.Math.SameValue(this.get(),AValue,0.0);
      return Result;
    };
  });
  $mod.$rtti.$StaticArray("TMonthNameArray",{dims: [12], eltype: rtl.string});
  $mod.$rtti.$StaticArray("TDayNames",{dims: [7], eltype: rtl.string});
  rtl.recNewT($mod,"TFormatSettings",function () {
    this.CurrencyDecimals = 0;
    this.CurrencyFormat = 0;
    this.CurrencyString = "";
    this.DateSeparator = "";
    this.DecimalSeparator = "";
    this.LongDateFormat = "";
    this.LongTimeFormat = "";
    this.NegCurrFormat = 0;
    this.ShortDateFormat = "";
    this.ShortTimeFormat = "";
    this.ThousandSeparator = "";
    this.TimeAMString = "";
    this.TimePMString = "";
    this.TimeSeparator = "";
    this.TwoDigitYearCenturyWindow = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.DateTimeToStrFormat = rtl.arraySetLength(null,"",2);
      r.LongDayNames = rtl.arraySetLength(null,"",7);
      r.LongMonthNames = rtl.arraySetLength(null,"",12);
      r.ShortDayNames = rtl.arraySetLength(null,"",7);
      r.ShortMonthNames = rtl.arraySetLength(null,"",12);
      return r;
    };
    this.$eq = function (b) {
      return (this.CurrencyDecimals === b.CurrencyDecimals) && (this.CurrencyFormat === b.CurrencyFormat) && (this.CurrencyString === b.CurrencyString) && (this.DateSeparator === b.DateSeparator) && rtl.arrayEq(this.DateTimeToStrFormat,b.DateTimeToStrFormat) && (this.DecimalSeparator === b.DecimalSeparator) && (this.LongDateFormat === b.LongDateFormat) && rtl.arrayEq(this.LongDayNames,b.LongDayNames) && rtl.arrayEq(this.LongMonthNames,b.LongMonthNames) && (this.LongTimeFormat === b.LongTimeFormat) && (this.NegCurrFormat === b.NegCurrFormat) && (this.ShortDateFormat === b.ShortDateFormat) && rtl.arrayEq(this.ShortDayNames,b.ShortDayNames) && rtl.arrayEq(this.ShortMonthNames,b.ShortMonthNames) && (this.ShortTimeFormat === b.ShortTimeFormat) && (this.ThousandSeparator === b.ThousandSeparator) && (this.TimeAMString === b.TimeAMString) && (this.TimePMString === b.TimePMString) && (this.TimeSeparator === b.TimeSeparator) && (this.TwoDigitYearCenturyWindow === b.TwoDigitYearCenturyWindow);
    };
    this.$assign = function (s) {
      this.CurrencyDecimals = s.CurrencyDecimals;
      this.CurrencyFormat = s.CurrencyFormat;
      this.CurrencyString = s.CurrencyString;
      this.DateSeparator = s.DateSeparator;
      this.DateTimeToStrFormat = s.DateTimeToStrFormat.slice(0);
      this.DecimalSeparator = s.DecimalSeparator;
      this.LongDateFormat = s.LongDateFormat;
      this.LongDayNames = s.LongDayNames.slice(0);
      this.LongMonthNames = s.LongMonthNames.slice(0);
      this.LongTimeFormat = s.LongTimeFormat;
      this.NegCurrFormat = s.NegCurrFormat;
      this.ShortDateFormat = s.ShortDateFormat;
      this.ShortDayNames = s.ShortDayNames.slice(0);
      this.ShortMonthNames = s.ShortMonthNames.slice(0);
      this.ShortTimeFormat = s.ShortTimeFormat;
      this.ThousandSeparator = s.ThousandSeparator;
      this.TimeAMString = s.TimeAMString;
      this.TimePMString = s.TimePMString;
      this.TimeSeparator = s.TimeSeparator;
      this.TwoDigitYearCenturyWindow = s.TwoDigitYearCenturyWindow;
      return this;
    };
    this.GetBrowserLocale = function () {
      return navigator.language;
    };
    this.GetLocaleShortDayName = function (ADayOfWeek, ALocale) {
      var lBaseDate = new Date(2017, 0, 1); // Sunday
        lBaseDate.setDate(lBaseDate.getDate() + ADayOfWeek - 1);
      
        var lLoc = "";
        if (ALocale == '')
          lLoc = navigator.language
        else
          lLoc = ALocale;
      
        return lBaseDate.toLocaleDateString(lLoc, { weekday: 'short' });
    };
    this.GetLocaleDecimalSeparator = function (ALocale) {
      var lNumber = 1.1;
      lNumber = lNumber.toLocaleString(ALocale).substring(1, 2);
      return lNumber;
    };
    this.GetLocaleLongMonthName = function (AMonth, ALocale) {
      var lBaseDate = new Date(2017, AMonth - 1, 1);
      return lBaseDate.toLocaleDateString(ALocale, { AMonth: 'long' });
    };
    this.GetLocaleLongDayName = function (ADayOfWeek, ALocale) {
      var lBaseDate = new Date(2017, 0, 1); // Sunday
      lBaseDate.setDate(lBaseDate.getDate() + ADayOfWeek - 1);
      return lBaseDate.toLocaleDateString(ALocale, { weekday: 'long' });
    };
    this.GetLocaleShortMonthName = function (AMonth, ALocale) {
      var lBaseDate = new Date(2017, AMonth - 1, 1);
      var lLoc = "";
      if (ALocale == '')
        lLoc = navigator.language
      else
        lLoc = ALocale;
      return lBaseDate.toLocaleDateString(lLoc, { AMonth: 'short' });
    };
    var cDeli = "-";
    var cShortLength = 2;
    this.GetLocaleShortDateFormat = function (ALocale) {
      var Result = "";
      var lIndex = 0;
      Result = $mod.TStringHelper.Empty;
      ALocale = $mod.TStringHelper.ToLower.call({get: function () {
          return ALocale;
        }, set: function (v) {
          ALocale = v;
        }});
      lIndex = $mod.TStringHelper.IndexOf.call({get: function () {
          return ALocale;
        }, set: function (v) {
          ALocale = v;
        }},cDeli);
      if (lIndex >= 0) {
        ALocale = $mod.TStringHelper.Substring$1.call({get: function () {
            return ALocale;
          }, set: function (v) {
            ALocale = v;
          }},0,lIndex) + $mod.TStringHelper.ToUpper.call({a: $mod.TStringHelper.Substring.call({get: function () {
              return ALocale;
            }, set: function (v) {
              ALocale = v;
            }},lIndex), get: function () {
            return this.a;
          }, set: function (v) {
            this.a = v;
          }})}
       else {
        if ($mod.TStringHelper.get_Length.call({get: function () {
            return ALocale;
          }, set: function (v) {
            ALocale = v;
          }}) === 2) ALocale = ALocale + cDeli + $mod.TStringHelper.ToUpper.call({get: function () {
            return ALocale;
          }, set: function (v) {
            ALocale = v;
          }});
      };
      var lFormats = {
        "ar-SA" : "dd/MM/yy",
        "bg-BG" : "dd.M.yyyy",
        "ca-ES" : "dd/MM/yyyy",
        "zh-TW" : "yyyy/M/d",
        "cs-CZ" : "d.M.yyyy",
        "da-DK" : "dd-MM-yyyy",
        "de-DE" : "dd.MM.yyyy",
        "el-GR" : "d/M/yyyy",
        "en-US" : "M/d/yyyy",
        "fi-FI" : "d.M.yyyy",
        "fr-FR" : "dd/MM/yyyy",
        "he-IL" : "dd/MM/yyyy",
        "hu-HU" : "yyyy. MM. dd.",
        "is-IS" : "d.M.yyyy",
        "it-IT" : "dd/MM/yyyy",
        "ja-JP" : "yyyy/MM/dd",
        "ko-KR" : "yyyy-MM-dd",
        "nl-NL" : "d-M-yyyy",
        "nb-NO" : "dd.MM.yyyy",
        "pl-PL" : "yyyy-MM-dd",
        "pt-BR" : "d/M/yyyy",
        "ro-RO" : "dd.MM.yyyy",
        "ru-RU" : "dd.MM.yyyy",
        "hr-HR" : "d.M.yyyy",
        "sk-SK" : "d. M. yyyy",
        "sq-AL" : "yyyy-MM-dd",
        "sv-SE" : "yyyy-MM-dd",
        "th-TH" : "d/M/yyyy",
        "tr-TR" : "dd.MM.yyyy",
        "ur-PK" : "dd/MM/yyyy",
        "id-ID" : "dd/MM/yyyy",
        "uk-UA" : "dd.MM.yyyy",
        "be-BY" : "dd.MM.yyyy",
        "sl-SI" : "d.M.yyyy",
        "et-EE" : "d.MM.yyyy",
        "lv-LV" : "yyyy.MM.dd.",
        "lt-LT" : "yyyy.MM.dd",
        "fa-IR" : "MM/dd/yyyy",
        "vi-VN" : "dd/MM/yyyy",
        "hy-AM" : "dd.MM.yyyy",
        "az-Latn-AZ" : "dd.MM.yyyy",
        "eu-ES" : "yyyy/MM/dd",
        "mk-MK" : "dd.MM.yyyy",
        "af-ZA" : "yyyy/MM/dd",
        "ka-GE" : "dd.MM.yyyy",
        "fo-FO" : "dd-MM-yyyy",
        "hi-IN" : "dd-MM-yyyy",
        "ms-MY" : "dd/MM/yyyy",
        "kk-KZ" : "dd.MM.yyyy",
        "ky-KG" : "dd.MM.yy",
        "sw-KE" : "M/d/yyyy",
        "uz-Latn-UZ" : "dd/MM yyyy",
        "tt-RU" : "dd.MM.yyyy",
        "pa-IN" : "dd-MM-yy",
        "gu-IN" : "dd-MM-yy",
        "ta-IN" : "dd-MM-yyyy",
        "te-IN" : "dd-MM-yy",
        "kn-IN" : "dd-MM-yy",
        "mr-IN" : "dd-MM-yyyy",
        "sa-IN" : "dd-MM-yyyy",
        "mn-MN" : "yy.MM.dd",
        "gl-ES" : "dd/MM/yy",
        "kok-IN" : "dd-MM-yyyy",
        "syr-SY" : "dd/MM/yyyy",
        "dv-MV" : "dd/MM/yy",
        "ar-IQ" : "dd/MM/yyyy",
        "zh-CN" : "yyyy/M/d",
        "de-CH" : "dd.MM.yyyy",
        "en-GB" : "dd/MM/yyyy",
        "es-MX" : "dd/MM/yyyy",
        "fr-BE" : "d/MM/yyyy",
        "it-CH" : "dd.MM.yyyy",
        "nl-BE" : "d/MM/yyyy",
        "nn-NO" : "dd.MM.yyyy",
        "pt-PT" : "dd-MM-yyyy",
        "sr-Latn-CS" : "d.M.yyyy",
        "sv-FI" : "d.M.yyyy",
        "az-Cyrl-AZ" : "dd.MM.yyyy",
        "ms-BN" : "dd/MM/yyyy",
        "uz-Cyrl-UZ" : "dd.MM.yyyy",
        "ar-EG" : "dd/MM/yyyy",
        "zh-HK" : "d/M/yyyy",
        "de-AT" : "dd.MM.yyyy",
        "en-AU" : "d/MM/yyyy",
        "es-ES" : "dd/MM/yyyy",
        "fr-CA" : "yyyy-MM-dd",
        "sr-Cyrl-CS" : "d.M.yyyy",
        "ar-LY" : "dd/MM/yyyy",
        "zh-SG" : "d/M/yyyy",
        "de-LU" : "dd.MM.yyyy",
        "en-CA" : "dd/MM/yyyy",
        "es-GT" : "dd/MM/yyyy",
        "fr-CH" : "dd.MM.yyyy",
        "ar-DZ" : "dd-MM-yyyy",
        "zh-MO" : "d/M/yyyy",
        "de-LI" : "dd.MM.yyyy",
        "en-NZ" : "d/MM/yyyy",
        "es-CR" : "dd/MM/yyyy",
        "fr-LU" : "dd/MM/yyyy",
        "ar-MA" : "dd-MM-yyyy",
        "en-IE" : "dd/MM/yyyy",
        "es-PA" : "MM/dd/yyyy",
        "fr-MC" : "dd/MM/yyyy",
        "ar-TN" : "dd-MM-yyyy",
        "en-ZA" : "yyyy/MM/dd",
        "es-DO" : "dd/MM/yyyy",
        "ar-OM" : "dd/MM/yyyy",
        "en-JM" : "dd/MM/yyyy",
        "es-VE" : "dd/MM/yyyy",
        "ar-YE" : "dd/MM/yyyy",
        "en-029" : "MM/dd/yyyy",
        "es-CO" : "dd/MM/yyyy",
        "ar-SY" : "dd/MM/yyyy",
        "en-BZ" : "dd/MM/yyyy",
        "es-PE" : "dd/MM/yyyy",
        "ar-JO" : "dd/MM/yyyy",
        "en-TT" : "dd/MM/yyyy",
        "es-AR" : "dd/MM/yyyy",
        "ar-LB" : "dd/MM/yyyy",
        "en-ZW" : "M/d/yyyy",
        "es-EC" : "dd/MM/yyyy",
        "ar-KW" : "dd/MM/yyyy",
        "en-PH" : "M/d/yyyy",
        "es-CL" : "dd-MM-yyyy",
        "ar-AE" : "dd/MM/yyyy",
        "es-UY" : "dd/MM/yyyy",
        "ar-BH" : "dd/MM/yyyy",
        "es-PY" : "dd/MM/yyyy",
        "ar-QA" : "dd/MM/yyyy",
        "es-BO" : "dd/MM/yyyy",
        "es-SV" : "dd/MM/yyyy",
        "es-HN" : "dd/MM/yyyy",
        "es-NI" : "dd/MM/yyyy",
        "es-PR" : "dd/MM/yyyy",
        "am-ET" : "d/M/yyyy",
        "tzm-Latn-DZ" : "dd-MM-yyyy",
        "iu-Latn-CA" : "d/MM/yyyy",
        "sma-NO" : "dd.MM.yyyy",
        "mn-Mong-CN" : "yyyy/M/d",
        "gd-GB" : "dd/MM/yyyy",
        "en-MY" : "d/M/yyyy",
        "prs-AF" : "dd/MM/yy",
        "bn-BD" : "dd-MM-yy",
        "wo-SN" : "dd/MM/yyyy",
        "rw-RW" : "M/d/yyyy",
        "qut-GT" : "dd/MM/yyyy",
        "sah-RU" : "MM.dd.yyyy",
        "gsw-FR" : "dd/MM/yyyy",
        "co-FR" : "dd/MM/yyyy",
        "oc-FR" : "dd/MM/yyyy",
        "mi-NZ" : "dd/MM/yyyy",
        "ga-IE" : "dd/MM/yyyy",
        "se-SE" : "yyyy-MM-dd",
        "br-FR" : "dd/MM/yyyy",
        "smn-FI" : "d.M.yyyy",
        "moh-CA" : "M/d/yyyy",
        "arn-CL" : "dd-MM-yyyy",
        "ii-CN" : "yyyy/M/d",
        "dsb-DE" : "d. M. yyyy",
        "ig-NG" : "d/M/yyyy",
        "kl-GL" : "dd-MM-yyyy",
        "lb-LU" : "dd/MM/yyyy",
        "ba-RU" : "dd.MM.yy",
        "nso-ZA" : "yyyy/MM/dd",
        "quz-BO" : "dd/MM/yyyy",
        "yo-NG" : "d/M/yyyy",
        "ha-Latn-NG" : "d/M/yyyy",
        "fil-PH" : "M/d/yyyy",
        "ps-AF" : "dd/MM/yy",
        "fy-NL" : "d-M-yyyy",
        "ne-NP" : "M/d/yyyy",
        "se-NO" : "dd.MM.yyyy",
        "iu-Cans-CA" : "d/M/yyyy",
        "sr-Latn-RS" : "d.M.yyyy",
        "si-LK" : "yyyy-MM-dd",
        "sr-Cyrl-RS" : "d.M.yyyy",
        "lo-LA" : "dd/MM/yyyy",
        "km-KH" : "yyyy-MM-dd",
        "cy-GB" : "dd/MM/yyyy",
        "bo-CN" : "yyyy/M/d",
        "sms-FI" : "d.M.yyyy",
        "as-IN" : "dd-MM-yyyy",
        "ml-IN" : "dd-MM-yy",
        "en-IN" : "dd-MM-yyyy",
        "or-IN" : "dd-MM-yy",
        "bn-IN" : "dd-MM-yy",
        "tk-TM" : "dd.MM.yy",
        "bs-Latn-BA" : "d.M.yyyy",
        "mt-MT" : "dd/MM/yyyy",
        "sr-Cyrl-ME" : "d.M.yyyy",
        "se-FI" : "d.M.yyyy",
        "zu-ZA" : "yyyy/MM/dd",
        "xh-ZA" : "yyyy/MM/dd",
        "tn-ZA" : "yyyy/MM/dd",
        "hsb-DE" : "d. M. yyyy",
        "bs-Cyrl-BA" : "d.M.yyyy",
        "tg-Cyrl-TJ" : "dd.MM.yy",
        "sr-Latn-BA" : "d.M.yyyy",
        "smj-NO" : "dd.MM.yyyy",
        "rm-CH" : "dd/MM/yyyy",
        "smj-SE" : "yyyy-MM-dd",
        "quz-EC" : "dd/MM/yyyy",
        "quz-PE" : "dd/MM/yyyy",
        "hr-BA" : "d.M.yyyy.",
        "sr-Latn-ME" : "d.M.yyyy",
        "sma-SE" : "yyyy-MM-dd",
        "en-SG" : "d/M/yyyy",
        "ug-CN" : "yyyy-M-d",
        "sr-Cyrl-BA" : "d.M.yyyy",
        "es-US" : "M/d/yyyy"};
      return lFormats[ALocale] || 'dd/MM/yyyy';
      return Result;
    };
    this.Create = function () {
      var Result = $mod.TFormatSettings.$new();
      Result.$assign(this.Create$1(this.GetBrowserLocale()));
      return Result;
    };
    var cDateSeps = ["\/",".","-"];
    var cTimeSeps = [":",".","-"];
    var cDecSeps = [",","."];
    var cThousandSeps = [".",","];
    this.Create$1 = function (ALocale) {
      var Result = $mod.TFormatSettings.$new();
      var lTimeStr = "";
      var lCount = 0;
      Result.LongDayNames[0] = "Sunday";
      Result.LongDayNames[1] = "Monday";
      Result.LongDayNames[2] = "Tuesday";
      Result.LongDayNames[3] = "Wednesday";
      Result.LongDayNames[4] = "Thursday";
      Result.LongDayNames[5] = "Friday";
      Result.LongDayNames[6] = "Saturday";
      Result.ShortDayNames[0] = "Sun";
      Result.ShortDayNames[1] = "Mon";
      Result.ShortDayNames[2] = "Tue";
      Result.ShortDayNames[3] = "Wed";
      Result.ShortDayNames[4] = "Thu";
      Result.ShortDayNames[5] = "Fri";
      Result.ShortDayNames[6] = "Sat";
      Result.ShortMonthNames[0] = "Jan";
      Result.ShortMonthNames[1] = "Feb";
      Result.ShortMonthNames[2] = "Mar";
      Result.ShortMonthNames[3] = "Apr";
      Result.ShortMonthNames[4] = "May";
      Result.ShortMonthNames[5] = "Jun";
      Result.ShortMonthNames[6] = "Jul";
      Result.ShortMonthNames[7] = "Aug";
      Result.ShortMonthNames[8] = "Sep";
      Result.ShortMonthNames[9] = "Oct";
      Result.ShortMonthNames[10] = "Nov";
      Result.ShortMonthNames[11] = "Dec";
      Result.LongMonthNames[0] = "January";
      Result.LongMonthNames[1] = "February";
      Result.LongMonthNames[2] = "March";
      Result.LongMonthNames[3] = "April";
      Result.LongMonthNames[4] = "May";
      Result.LongMonthNames[5] = "June";
      Result.LongMonthNames[6] = "July";
      Result.LongMonthNames[7] = "August";
      Result.LongMonthNames[8] = "September";
      Result.LongMonthNames[9] = "October";
      Result.LongMonthNames[10] = "November";
      Result.LongMonthNames[11] = "December";
      Result.DateTimeToStrFormat[0] = "c";
      Result.DateTimeToStrFormat[1] = "f";
      Result.DateSeparator = "-";
      Result.TimeSeparator = ":";
      Result.ShortDateFormat = "yyyy-mm-dd";
      Result.LongDateFormat = "ddd, yyyy-mm-dd";
      Result.ShortTimeFormat = "hh:nn";
      Result.LongTimeFormat = "hh:nn:ss";
      Result.DecimalSeparator = ".";
      Result.ThousandSeparator = ",";
      Result.TimeAMString = "AM";
      Result.TimePMString = "PM";
      Result.TwoDigitYearCenturyWindow = 50;
      Result.ShortDateFormat = this.GetLocaleShortDateFormat(ALocale);
      for (var $l1 = 0, $end2 = rtl.length(cDateSeps) - 1; $l1 <= $end2; $l1++) {
        lCount = $l1;
        if ($mod.TStringHelper.IndexOf.call({p: Result, get: function () {
            return this.p.ShortDateFormat;
          }, set: function (v) {
            this.p.ShortDateFormat = v;
          }},cDateSeps[lCount]) >= 0) Result.DateSeparator = cDateSeps[lCount];
      };
      var lEvent = new Date('Jan 1, 1980 06:07:08 GMT+00:00');
      var lLoc = "";
      if (ALocale == "")
        lLoc = navigator.language;
      else
        lLoc = ALocale;
      lTimeStr = lEvent.toLocaleTimeString(lLoc);
      for (var $l3 = 0, $end4 = rtl.length(cTimeSeps) - 1; $l3 <= $end4; $l3++) {
        lCount = $l3;
        if ($mod.TStringHelper.IndexOf.call({get: function () {
            return lTimeStr;
          }, set: function (v) {
            lTimeStr = v;
          }},cTimeSeps[lCount]) >= 0) Result.TimeSeparator = cTimeSeps[lCount];
      };
      for (lCount = 1; lCount <= 7; lCount++) Result.ShortDayNames[lCount - 1] = this.GetLocaleShortDayName(lCount,ALocale);
      for (lCount = 1; lCount <= 7; lCount++) Result.LongDayNames[lCount - 1] = this.GetLocaleLongDayName(lCount,ALocale);
      for (lCount = 1; lCount <= 12; lCount++) Result.ShortMonthNames[lCount - 1] = this.GetLocaleShortMonthName(lCount,ALocale);
      for (lCount = 1; lCount <= 12; lCount++) Result.LongMonthNames[lCount - 1] = this.GetLocaleLongMonthName(lCount,ALocale);
      Result.DecimalSeparator = this.GetLocaleDecimalSeparator(ALocale);
      for (var $l5 = 0, $end6 = rtl.length(cDecSeps) - 1; $l5 <= $end6; $l5++) {
        lCount = $l5;
        if (Result.DecimalSeparator === cDecSeps[lCount]) {
          Result.ThousandSeparator = cThousandSeps[lCount];
          break;
        };
      };
      return Result;
    };
    var $r = $mod.$rtti.$Record("TFormatSettings",{});
    $r.addField("CurrencyDecimals",rtl.byte);
    $r.addField("CurrencyFormat",rtl.byte);
    $r.addField("CurrencyString",rtl.string);
    $r.addField("DateSeparator",rtl.char);
    $mod.$rtti.$StaticArray("TFormatSettings.DateTimeToStrFormat$a",{dims: [2], eltype: rtl.string});
    $r.addField("DateTimeToStrFormat",$mod.$rtti["TFormatSettings.DateTimeToStrFormat$a"]);
    $r.addField("DecimalSeparator",rtl.string);
    $r.addField("LongDateFormat",rtl.string);
    $r.addField("LongDayNames",$mod.$rtti["TDayNames"]);
    $r.addField("LongMonthNames",$mod.$rtti["TMonthNameArray"]);
    $r.addField("LongTimeFormat",rtl.string);
    $r.addField("NegCurrFormat",rtl.byte);
    $r.addField("ShortDateFormat",rtl.string);
    $r.addField("ShortDayNames",$mod.$rtti["TDayNames"]);
    $r.addField("ShortMonthNames",$mod.$rtti["TMonthNameArray"]);
    $r.addField("ShortTimeFormat",rtl.string);
    $r.addField("ThousandSeparator",rtl.string);
    $r.addField("TimeAMString",rtl.string);
    $r.addField("TimePMString",rtl.string);
    $r.addField("TimeSeparator",rtl.char);
    $r.addField("TwoDigitYearCenturyWindow",rtl.word);
    $r.addMethod("Create",5,null,$r,{flags: 1});
    $r.addMethod("Create$1",5,[["ALocale",rtl.string,2]],$r,{flags: 1});
  },true);
  rtl.createClass($mod,"TEncoding",pas.System.TObject,function () {
    this.FANSI = null;
    this.FUnicode = null;
    this.get_ANSI = function () {
      var Result = null;
      if (this.FANSI === null) $mod.TEncoding.FANSI = $mod.TANSIEncoding.$create("Create");
      Result = this.FANSI;
      return Result;
    };
    this.get_Default = function () {
      var Result = null;
      Result = this.get_ANSI();
      return Result;
    };
    this.get_Unicode = function () {
      var Result = null;
      if (this.FUnicode === null) $mod.TEncoding.FUnicode = $mod.TUnicodeEncoding.$create("Create");
      Result = this.FUnicode;
      return Result;
    };
    this.GetByteCount$1 = function (AChars, ACharCount) {
      var Result = 0;
      Result = this.GetByteCount($mod.TStringHelper.Substring$1.call({get: function () {
          return AChars;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }},0,ACharCount));
      return Result;
    };
    this.GetByteCount$2 = function (AChars, ACharIndex, ACharCount) {
      var Result = 0;
      Result = this.GetByteCount($mod.TStringHelper.Substring$1.call({get: function () {
          return AChars;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }},ACharIndex,ACharCount));
      return Result;
    };
    this.GetBytes$1 = function (AChars, ACharCount) {
      var Result = [];
      Result = this.GetBytes($mod.TStringHelper.Substring$1.call({get: function () {
          return AChars;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }},0,ACharCount));
      return Result;
    };
    this.GetBytes$2 = function (AChars, ACharIndex, ACharCount) {
      var Result = [];
      Result = this.GetBytes($mod.TStringHelper.Substring$1.call({get: function () {
          return AChars;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }},ACharIndex,ACharCount));
      return Result;
    };
    this.GetString$1 = function (ABytes, ACharCount) {
      var Result = "";
      Result = this.GetString($mod.TBytesHelper.SubBytes$1.call({get: function () {
          return ABytes;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }},0,ACharCount));
      return Result;
    };
    this.GetString$2 = function (ABytes, ACharIndex, ACharCount) {
      var Result = "";
      Result = this.GetString($mod.TBytesHelper.SubBytes$1.call({get: function () {
          return ABytes;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }},ACharIndex,ACharCount));
      return Result;
    };
    this.IsStandardEncoding = function (AEncoding) {
      var Result = false;
      Result = (AEncoding !== null) && ((AEncoding === this.FANSI) || (AEncoding === this.FUnicode));
      return Result;
    };
  });
  rtl.createClass($mod,"TANSIEncoding",$mod.TEncoding,function () {
    this.GetByteCount = function (AChars) {
      var Result = 0;
      Result = $mod.TStringHelper.get_Length.call({get: function () {
          return AChars;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }});
      return Result;
    };
    this.GetBytes = function (AChars) {
      var Result = [];
      Result = pas.SysUtils.BytesOf(AChars);
      return Result;
    };
    this.GetString = function (ABytes) {
      var Result = "";
      Result = pas.SysUtils.StringOf(ABytes);
      return Result;
    };
  });
  rtl.createClass($mod,"TUnicodeEncoding",$mod.TEncoding,function () {
    this.InternalGetBytes = function (AChars, ABytes) {
      var lWords = [];
      lWords = [];
      for (var lCount = 0; lCount < AChars.length; lCount++)
      lWords.push(AChars.charCodeAt(lCount));
      ABytes.set($mod.TWordsHelper.ToBytes.call({get: function () {
          return lWords;
        }, set: function (v) {
          lWords = v;
        }}));
    };
    this.GetByteCount = function (AChars) {
      var Result = 0;
      Result = 2 * $mod.TStringHelper.get_Length.call({get: function () {
          return AChars;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }});
      return Result;
    };
    this.GetBytes = function (AChars) {
      var Result = [];
      this.InternalGetBytes(AChars,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.GetString = function (ABytes) {
      var Result = "";
      var lWords = [];
      var lBuffer = "";
      lBuffer = $mod.TStringHelper.Empty;
      lWords = $mod.TWordsHelper.FromBytes(ABytes);
      if (rtl.length(lWords) > 0) {
        for (var lCount = 0; lCount < lWords.length; lCount++)
        lBuffer += String.fromCharCode(lWords[lCount]);
      };
      Result = lBuffer;
      return Result;
    };
  });
  rtl.createClass($mod,"TStream",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FPosition = 0;
      this.FSize = 0;
    };
    this.set_Size = function (ANewSize) {
    };
    var MaxBufSize = 0xF000;
    this.CopyFrom = function (ASource, ACount) {
      var Result = 0;
      var lBufSize = 0;
      var lCount = 0;
      var lBuffer = [];
      if (ACount <= 0) {
        ASource.FPosition = 0;
        ACount = ASource.FSize;
      };
      Result = ACount;
      if (ACount > 61440) {
        lBufSize = 61440}
       else lBufSize = ACount;
      $mod.TBytesHelper.set_Length.call({get: function () {
          return lBuffer;
        }, set: function (v) {
          lBuffer = v;
        }},lBufSize);
      try {
        while (ACount !== 0) {
          if (ACount > lBufSize) {
            lCount = lBufSize}
           else lCount = ACount;
          ASource.ReadBuffer({get: function () {
              return lBuffer;
            }, set: function (v) {
              lBuffer = v;
            }},lCount);
          this.WriteBuffer(lBuffer,lCount);
          ACount -= lCount;
        };
      } finally {
        $mod.TBytesHelper.set_Length.call({get: function () {
            return lBuffer;
          }, set: function (v) {
            lBuffer = v;
          }},0);
      };
      return Result;
    };
    this.Read = function (ABuffer, ACount) {
      var Result = 0;
      Result = this.Read$1(ABuffer,0,ACount);
      return Result;
    };
    this.Read$1 = function (ABuffer, AOffset, ACount) {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.ReadBuffer = function (ABuffer, ACount) {
      this.ReadBuffer$1(ABuffer,0,ACount);
    };
    this.ReadBuffer$1 = function (Buffer, AOffset, ACount) {
      var lTotalCount = 0;
      var lReadCount = 0;
      lTotalCount = this.Read$1(Buffer,AOffset,ACount);
      if (lTotalCount < 0) throw $mod.EReadError.$create("Create$1",[rtl.getResStr(pas["WEBLib.Consts"],"SReadError")]);
      while (lTotalCount < ACount) {
        lReadCount = this.Read$1(Buffer,AOffset + lTotalCount,ACount - lTotalCount);
        if (lReadCount <= 0) {
          throw $mod.EReadError.$create("Create$1",[rtl.getResStr(pas["WEBLib.Consts"],"SReadError")])}
         else lTotalCount += lReadCount;
      };
    };
    this.Write = function (ABuffer, ACount) {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.Write$1 = function (ABuffer, AOffset, ACount) {
      var Result = 0;
      var lBytes = [];
      var lCount = 0;
      Result = 0;
      if (($mod.TBytesHelper.get_Length.call({get: function () {
          return ABuffer;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }}) - AOffset) > 0) {
        $mod.TBytesHelper.set_Length.call({get: function () {
            return lBytes;
          }, set: function (v) {
            lBytes = v;
          }},$mod.TBytesHelper.get_Length.call({get: function () {
            return ABuffer;
          }, set: function (v) {
            rtl.raiseE("EPropReadOnly");
          }}) - AOffset);
        for (var $l1 = AOffset, $end2 = $mod.TBytesHelper.get_Length.call({get: function () {
            return ABuffer;
          }, set: function (v) {
            rtl.raiseE("EPropReadOnly");
          }}) - 1; $l1 <= $end2; $l1++) {
          lCount = $l1;
          lBytes[lCount - AOffset] = ABuffer[lCount];
        };
        Result = this.Write(lBytes,ACount);
      };
      return Result;
    };
    this.WriteBuffer = function (ABuffer, ACount) {
      this.WriteBuffer$1(ABuffer,0,ACount);
    };
    this.WriteBuffer$1 = function (Buffer, Offset, Count) {
      var lTotalCount = 0;
      var lWrittenCount = 0;
      lTotalCount = this.Write$1(Buffer,Offset,Count);
      if (lTotalCount < 0) throw $mod.EWriteError.$create("Create$1",[rtl.getResStr(pas["WEBLib.Consts"],"SWriteError")]);
      while (lTotalCount < Count) {
        lWrittenCount = this.Write$1(Buffer,Offset + lTotalCount,Count - lTotalCount);
        if (lWrittenCount <= 0) {
          throw $mod.EWriteError.$create("Create$1",[rtl.getResStr(pas["WEBLib.Consts"],"SWriteError")])}
         else lTotalCount += lWrittenCount;
      };
    };
  });
  rtl.createClass($mod,"TCustomMemoryStream",$mod.TStream,function () {
    this.$init = function () {
      $mod.TStream.$init.call(this);
      this.FBytes = [];
      this.FCapacity = 0;
    };
    this.$final = function () {
      this.FBytes = undefined;
      $mod.TStream.$final.call(this);
    };
    this.set_Capacity = function (ANewCapacity) {
      $mod.TBytesHelper.set_Length.call({p: this, get: function () {
          return this.p.FBytes;
        }, set: function (v) {
          this.p.FBytes = v;
        }},ANewCapacity);
      this.FCapacity = ANewCapacity;
    };
    this.set_Size = function (ANewSize) {
      var lOldPosition = 0;
      lOldPosition = this.FPosition;
      this.set_Capacity(ANewSize);
      this.FSize = ANewSize;
      if (lOldPosition > ANewSize) this.FPosition = ANewSize;
    };
    this.Clear = function () {
      $mod.TBytesHelper.set_Length.call({p: this, get: function () {
          return this.p.FBytes;
        }, set: function (v) {
          this.p.FBytes = v;
        }},0);
      this.FCapacity = 0;
      this.FPosition = 0;
    };
    this.LoadFromStream = function (AStream) {
      var lCount = 0;
      AStream.FPosition = 0;
      lCount = AStream.FSize;
      this.set_Size(lCount);
      if (lCount !== 0) AStream.ReadBuffer({p: this, get: function () {
          return this.p.FBytes;
        }, set: function (v) {
          this.p.FBytes = v;
        }},lCount);
    };
    this.Read$1 = function (ABuffer, AOffset, ACount) {
      var Result = 0;
      var lCount = 0;
      if ((this.FPosition >= 0) && (ACount >= 0)) {
        if (this.FSize > this.FPosition) {
          if (this.FSize > (ACount + this.FPosition)) {
            Result = ACount}
           else Result = this.FSize - this.FPosition;
          $mod.TBytesHelper.set_Length.call(ABuffer,Math.min(this.FSize,ACount));
          for (var $l1 = AOffset + this.FPosition, $end2 = Math.min(this.FSize - 1,(AOffset + this.FPosition + ACount) - 1); $l1 <= $end2; $l1++) {
            lCount = $l1;
            ABuffer.get()[lCount - AOffset - this.FPosition] = this.FBytes[lCount];
          };
          this.FPosition += Result;
          return Result;
        };
      };
      Result = 0;
      return Result;
    };
    this.SaveToStream = function (AStream) {
      if (this.FSize > 0) AStream.WriteBuffer(this.FBytes,this.FSize);
    };
    this.Write = function (ABuffer, ACount) {
      var Result = 0;
      var lPos = 0;
      var lCount = 0;
      if ((this.FPosition >= 0) && (ACount >= 0)) {
        lPos = this.FPosition + ACount;
        if (lPos > 0) {
          if (lPos > this.FSize) {
            if (lPos > this.FCapacity) this.set_Capacity(lPos);
            this.FSize = lPos;
          };
          for (var $l1 = 0, $end2 = $mod.TBytesHelper.get_Length.call({get: function () {
              return ABuffer;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }}) - 1; $l1 <= $end2; $l1++) {
            lCount = $l1;
            this.FBytes[this.FPosition + lCount] = ABuffer[lCount];
          };
          this.FPosition = lPos;
          Result = ACount;
          return Result;
        };
      };
      Result = 0;
      return Result;
    };
  });
  rtl.createClass($mod,"TMemoryStream",$mod.TCustomMemoryStream,function () {
  });
  rtl.createClass($mod,"TBytesStream",$mod.TMemoryStream,function () {
  });
  rtl.createClass($mod,"TStringStream",$mod.TBytesStream,function () {
    this.$init = function () {
      $mod.TBytesStream.$init.call(this);
      this.FEncoding = null;
      this.FFileName = "";
      this.FOwnsEncoding = false;
      this.FError = null;
      this.FLoaded = null;
      this.FRequest = null;
    };
    this.$final = function () {
      this.FEncoding = undefined;
      this.FError = undefined;
      this.FLoaded = undefined;
      this.FRequest = undefined;
      $mod.TBytesStream.$final.call(this);
    };
    this.GetDataString = function () {
      var Result = "";
      Result = this.FEncoding.GetString(this.FBytes);
      return Result;
    };
    this.OnAbort = function (AEvent) {
      var Result = false;
      Result = true;
      if (this.FError != null) this.FError(pas.SysUtils.Format(rtl.getResStr(pas["WEBLib.Consts"],"SLoadFromFileAborted"),[this.FFileName]));
      return Result;
    };
    this.OnError = function (AEvent) {
      var Result = false;
      Result = true;
      if (this.FError != null) this.FError(pas.SysUtils.Format(rtl.getResStr(pas["WEBLib.Consts"],"SErrorLoadFromFile"),[this.FFileName]));
      return Result;
    };
    var cStatusOK$1 = 200;
    var cStatusLastOK = 208;
    this.OnLoad = function (AEvent) {
      var Result = false;
      var lReq = null;
      lReq = AEvent.target;
      if ((lReq.status < 200) || (lReq.status > 208)) {
        if (this.FError != null) {
          this.FError(pas.SysUtils.Format(rtl.getResStr(pas["WEBLib.Consts"],"SCannotGetFile"),[this.FFileName,this.FRequest.status]))}
         else throw $mod.EStringStreamError.$create("CreateFmt",[rtl.getResStr(pas["WEBLib.Consts"],"SCannotGetFile"),[this.FFileName,lReq.status]]);
      };
      this.WriteString(lReq.responseText);
      Result = true;
      if (this.FLoaded != null) this.FLoaded();
      return Result;
    };
    this.Create$1 = function () {
      this.Create$3($mod.TStringHelper.Empty,$mod.TEncoding.get_Default(),false);
      return this;
    };
    this.Create$2 = function (AString) {
      this.Create$3(AString,$mod.TEncoding.get_Default(),false);
      return this;
    };
    this.Create$3 = function (AString, AEncoding, AOwnsEncoding) {
      pas.System.TObject.Create.call(this);
      this.FEncoding = AEncoding;
      this.FOwnsEncoding = AOwnsEncoding && !$mod.TEncoding.IsStandardEncoding(AEncoding);
      this.FBytes = this.FEncoding.GetBytes(AString);
      this.FSize = $mod.TBytesHelper.get_Length.call({p: this, get: function () {
          return this.p.FBytes;
        }, set: function (v) {
          this.p.FBytes = v;
        }});
      this.FCapacity = this.FSize;
      return this;
    };
    this.Destroy = function () {
      if (this.FOwnsEncoding) rtl.free(this,"FEncoding");
      pas.System.TObject.Destroy.call(this);
    };
    var cStatusOK = 200;
    this.LoadFromFile = function (AFileName) {
      var lStatus = 0;
      var lResponse = "";
      lResponse = $mod.TStringHelper.Empty;
      lStatus = 200;
      var lRequest = new XMLHttpRequest();
          lRequest.open("GET", AFileName, false);
          lRequest.send();
      
          if (lRequest.status == cStatusOK)
            lResponse = lRequest.responseText
          else
            lStatus = lRequest.status;
      if (lStatus !== 200) throw $mod.EStringStreamError.$create("CreateFmt",[rtl.getResStr(pas["WEBLib.Consts"],"SCannotGetFile"),[AFileName,lStatus]]);
      this.WriteString(lResponse);
    };
    this.LoadFromFile$1 = function (AFileName, ALoaded) {
      this.LoadFromFile$2(AFileName,ALoaded,null);
    };
    var cAbortMethod = "abort";
    var cErrorMethod = "error";
    var cGetMethod = "GET";
    var cLoadMethod = "load";
    this.LoadFromFile$2 = function (AFileName, ALoaded, AError) {
      this.FLoaded = ALoaded;
      this.FError = AError;
      this.FFileName = AFileName;
      this.FRequest = new XMLHttpRequest();
      this.FRequest.addEventListener(cAbortMethod,rtl.createCallback(this,"OnAbort"));
      this.FRequest.addEventListener(cErrorMethod,rtl.createCallback(this,"OnError"));
      this.FRequest.addEventListener(cLoadMethod,rtl.createCallback(this,"OnLoad"));
      try {
        this.FRequest.open(cGetMethod,AFileName,true);
        this.FRequest.send();
      } catch ($e) {
        if (pas.SysUtils.Exception.isPrototypeOf($e)) {
          var E = $e;
          if (AError != null) {
            AError(E.fMessage)}
           else throw $e;
        } else throw $e
      };
    };
    this.ReadString = function (ACount) {
      var Result = "";
      var lBytes = [];
      var lCount = 0;
      if (ACount > (this.FSize - this.FPosition)) ACount = this.FSize - this.FPosition;
      $mod.TBytesHelper.set_Length.call({get: function () {
          return lBytes;
        }, set: function (v) {
          lBytes = v;
        }},ACount);
      for (var $l1 = this.FPosition, $end2 = (ACount + this.FPosition) - 1; $l1 <= $end2; $l1++) {
        lCount = $l1;
        lBytes[lCount - this.FPosition] = this.FBytes[lCount];
      };
      Result = this.FEncoding.GetString(lBytes);
      this.FPosition = this.FPosition + ACount;
      return Result;
    };
    this.WriteString = function (AString) {
      var lBytes = [];
      lBytes = this.FEncoding.GetBytes(AString);
      this.Write(lBytes,$mod.TBytesHelper.get_Length.call({get: function () {
          return lBytes;
        }, set: function (v) {
          lBytes = v;
        }}));
    };
  });
  rtl.createInterface($mod,"IInterfaceList","{285DEA8A-B865-11D1-AAA7-00C04FB17A72}",["Add","Clear","Delete","Exchange","Expand","First","get_Capacity","get_Count","get_Items","IndexOf","IndexOfItem","Insert","Last","Lock","Remove","RemoveItem","set_Capacity","set_Count","set_Items","Unlock"],pas.System.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("Add",1,[["AItem",pas.System.$rtti["IUnknown"],2]],rtl.longint);
    $r.addMethod("Clear",0,null);
    $r.addMethod("Delete",0,[["AIndex",rtl.longint,2]]);
    $r.addMethod("Exchange",0,[["AIndex1",rtl.longint,2],["AIndex2",rtl.longint,2]]);
    $r.addMethod("Expand",1,null,$mod.$rtti["TInterfaceList"]);
    $r.addMethod("First",1,null,pas.System.$rtti["IUnknown"]);
    $r.addMethod("get_Capacity",1,null,rtl.longint);
    $r.addMethod("get_Count",1,null,rtl.longint);
    $r.addMethod("get_Items",1,[["AIndex",rtl.longint,2]],pas.System.$rtti["IUnknown"]);
    $r.addMethod("IndexOf",1,[["AItem",pas.System.$rtti["IUnknown"],2]],rtl.longint);
    $r.addMethod("IndexOfItem",1,[["AItem",pas.System.$rtti["IUnknown"],2],["ADirection",pas.Types.$rtti["TDirection"],2]],rtl.longint);
    $r.addMethod("Insert",0,[["AIndex",rtl.longint,2],["AItem",pas.System.$rtti["IUnknown"],2]]);
    $r.addMethod("Last",1,null,pas.System.$rtti["IUnknown"]);
    $r.addMethod("Lock",0,null);
    $r.addMethod("Remove",1,[["AItem",pas.System.$rtti["IUnknown"],2]],rtl.longint);
    $r.addMethod("RemoveItem",1,[["AItem",pas.System.$rtti["IUnknown"],2],["ADirection",pas.Types.$rtti["TDirection"],2]],rtl.longint);
    $r.addMethod("set_Capacity",0,[["AValue",rtl.longint,2]]);
    $r.addMethod("set_Count",0,[["AValue",rtl.longint,2]]);
    $r.addMethod("set_Items",0,[["AIndex",rtl.longint,2],["AItem",pas.System.$rtti["IUnknown"],2]]);
    $r.addMethod("Unlock",0,null);
    $r.addProperty("Count",3,rtl.longint,"get_Count","set_Count");
    $r.addProperty("Items",3,pas.System.$rtti["IUnknown"],"get_Items","set_Items");
  });
  rtl.createClass($mod,"TInterfaceListEnumerator",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FIndex = 0;
      this.FInterfaceList = null;
    };
    this.$final = function () {
      this.FInterfaceList = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.get_Current = function () {
      var Result = null;
      var $ok = false;
      try {
        Result = rtl.setIntfL(Result,this.FInterfaceList.get_Items(this.FIndex),true);
        $ok = true;
      } finally {
        if (!$ok) rtl._Release(Result);
      };
      return Result;
    };
    this.Create$1 = function (AInterfaceList) {
      pas.System.TObject.Create.call(this);
      this.FIndex = -1;
      this.FInterfaceList = AInterfaceList;
      return this;
    };
    this.MoveNext = function () {
      var Result = false;
      Result = this.FIndex < (this.FInterfaceList.get_Count() - 1);
      if (Result) this.FIndex += 1;
      return Result;
    };
  });
  rtl.createInterface($mod,"IInterfaceListEx","{FDB39D70-65B9-4995-9436-6084ACA05DB3}",["GetEnumerator"],$mod.IInterfaceList,function () {
    var $r = this.$rtti;
    $r.addMethod("GetEnumerator",1,null,$mod.$rtti["TInterfaceListEnumerator"]);
  });
  $mod.$rtti.$RefToProcVar("TCompareItems",{procsig: rtl.newTIProcSig([["ALeft",pas.System.$rtti["IUnknown"],2],["ARight",pas.System.$rtti["IUnknown"],2]],pas.Math.$rtti["TValueRelationship"])});
  rtl.createInterface($mod,"IInterfaceListEx2","{4FE71218-0F8F-4027-B050-5E84E2202604}",["Sort"],$mod.IInterfaceList,function () {
    var $r = this.$rtti;
    $r.addMethod("Sort",0,[["ACompare",$mod.$rtti["TCompareItems"],2]]);
  });
  rtl.createClass($mod,"TInterfaceList",pas.System.TInterfacedObject,function () {
    this.$init = function () {
      pas.System.TInterfacedObject.$init.call(this);
      this.FList = null;
    };
    this.$final = function () {
      this.FList = undefined;
      pas.System.TInterfacedObject.$final.call(this);
    };
    this.Add = function (AItem) {
      var Result = 0;
      Result = this.FList.Add(null);
      this.set_Items(Result,AItem);
      return Result;
    };
    this.Clear = function () {
      var lCount = 0;
      for (var $l1 = 0, $end2 = this.FList.FCount - 1; $l1 <= $end2; $l1++) {
        lCount = $l1;
        this.set_Items(lCount,null);
      };
      this.FList.Clear();
    };
    this.Delete = function (AIndex) {
      this.set_Items(AIndex,null);
      this.FList.Delete(AIndex);
    };
    this.Exchange = function (AIndex1, AIndex2) {
      this.FList.Exchange(AIndex1,AIndex2);
    };
    this.Expand = function () {
      var Result = null;
      this.FList.Expand();
      Result = this;
      return Result;
    };
    this.First = function () {
      var Result = null;
      var $ok = false;
      try {
        Result = rtl.setIntfL(Result,this.get_Items(0),true);
        $ok = true;
      } finally {
        if (!$ok) rtl._Release(Result);
      };
      return Result;
    };
    this.GetEnumerator = function () {
      var Result = null;
      Result = $mod.TInterfaceListEnumerator.$create("Create$1",[this]);
      return Result;
    };
    this.get_Capacity = function () {
      var Result = 0;
      Result = this.FList.FCapacity;
      return Result;
    };
    this.get_Count = function () {
      var Result = 0;
      Result = this.FList.FCount;
      return Result;
    };
    this.get_Items = function (AIndex) {
      var Result = null;
      var $ok = false;
      try {
        Result = rtl.setIntfL(Result,rtl.getObject(this.FList.Get(AIndex)));
        $ok = true;
      } finally {
        if (!$ok) rtl._Release(Result);
      };
      return Result;
    };
    this.IndexOf = function (AItem) {
      var Result = 0;
      Result = this.IndexOfItem(AItem,pas.Types.TDirection.FromBeginning);
      return Result;
    };
    this.IndexOfItem = function (AItem, ADirection) {
      var Result = 0;
      Result = this.FList.IndexOfItem(AItem,ADirection);
      return Result;
    };
    this.Insert = function (AIndex, AItem) {
      this.FList.Insert(AIndex,null);
      this.set_Items(AIndex,AItem);
    };
    this.Last = function () {
      var Result = null;
      var $ok = false;
      try {
        Result = rtl.setIntfL(Result,this.get_Items(this.get_Count() - 1),true);
        $ok = true;
      } finally {
        if (!$ok) rtl._Release(Result);
      };
      return Result;
    };
    this.Lock = function () {
    };
    this.Remove = function (AItem) {
      var Result = 0;
      Result = this.RemoveItem(AItem,pas.Types.TDirection.FromBeginning);
      return Result;
    };
    this.RemoveItem = function (AItem, ADirection) {
      var Result = 0;
      Result = this.FList.IndexOfItem(AItem,ADirection);
      if (Result > -1) this.Delete(Result);
      return Result;
    };
    this.set_Capacity = function (AValue) {
      this.FList.SetCapacity(AValue);
    };
    this.set_Count = function (AValue) {
      this.FList.SetCount(AValue);
    };
    this.set_Items = function (AIndex, AItem) {
      if (this.FList.Get(AIndex) != null) rtl.getObject(this.FList.Get(AIndex))._Release();
      this.FList.Put(AIndex,AItem);
      if (AItem !== null) AItem._AddRef();
    };
    this.Sort = function (ACompare) {
      $impl.FCompare = ACompare;
      try {
        this.FList.Sort($impl.InternalCompare);
      } finally {
        $impl.FCompare = null;
      };
    };
    this.Unlock = function () {
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FList = pas.Classes.TFPList.$create("Create");
      return this;
    };
    this.Destroy = function () {
      this.Clear();
      rtl.free(this,"FList");
      pas.System.TObject.Destroy.call(this);
    };
    rtl.addIntf(this,$mod.IInterfaceList);
    rtl.addIntf(this,$mod.IInterfaceListEx);
    rtl.addIntf(this,$mod.IInterfaceListEx2);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.recNewT($mod,"TPath",function () {
    this.$eq = function (b) {
      return true;
    };
    this.$assign = function (s) {
      return this;
    };
    this.Combine = function (APath1, APath2) {
      var Result = "";
      if ($mod.TStringHelper.NotIsEmpty.call({get: function () {
          return APath1;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }}) && ($mod.TStringHelper.get_Chars.call({get: function () {
          return APath1;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }},$mod.TStringHelper.get_Length.call({get: function () {
          return APath1;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }}) - 1) !== pas.System.PathDelim)) {
        Result = APath1 + pas.System.PathDelim + APath2}
       else Result = APath1 + APath2;
      return Result;
    };
    this.GetDirectoryName = function (AFileName) {
      var Result = "";
      var lIndex = 0;
      lIndex = $mod.TStringHelper.LastIndexOf.call({get: function () {
          return AFileName;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }},pas.System.PathDelim);
      if (lIndex >= 0) {
        Result = $mod.TStringHelper.Substring$1.call({get: function () {
            return AFileName;
          }, set: function (v) {
            rtl.raiseE("EPropReadOnly");
          }},0,lIndex)}
       else Result = AFileName;
      return Result;
    };
    var $r = $mod.$rtti.$Record("TPath",{});
    $r.addMethod("Combine",5,[["APath1",rtl.string,2],["APath2",rtl.string,2]],rtl.string,{flags: 1});
    $r.addMethod("GetDirectoryName",5,[["AFileName",rtl.string,2]],rtl.string,{flags: 1});
  },true);
  rtl.recNewT($mod,"TDirectory",function () {
    this.$eq = function (b) {
      return true;
    };
    this.$assign = function (s) {
      return this;
    };
    this.GetCurrentDirectory = function () {
      var Result = "";
      Result = $mod.TPath.GetDirectoryName(window.document.location.href);
      return Result;
    };
    var $r = $mod.$rtti.$Record("TDirectory",{});
    $r.addMethod("GetCurrentDirectory",5,null,rtl.string,{flags: 1});
  },true);
  this.DateTimeToStr = function (ADateTime, AFormatSettings, AForceTimeIfZero) {
    var Result = "";
    Result = $mod.FormatDateTime(AFormatSettings.DateTimeToStrFormat[+AForceTimeIfZero],AFormatSettings,ADateTime);
    return Result;
  };
  this.FormatDateTime = function (AFormatStr, AFormatSettings, ADateTime) {
    var Result = "";
    Result = $impl.TFormatDateTimeHelper.FormatDateTime(AFormatStr,AFormatSettings,ADateTime);
    return Result;
  };
  this.UseVariable = function (AValue) {
  };
  this.UseVariable$1 = function (AValue) {
  };
  this.UseVariable$2 = function (AValue) {
  };
  this.FormatSettings = $mod.TFormatSettings.$new();
  $mod.$init = function () {
    $mod.FormatSettings.$assign($mod.TFormatSettings.Create());
  };
},["WEBLib.Consts"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.FCompare = null;
  rtl.recNewT($impl,"TFormatDateTimeHelper",function () {
    this.$eq = function (b) {
      return true;
    };
    this.$assign = function (s) {
      return this;
    };
    var cAMPMFormat1 = "A\/P";
    var cAMPMFormat2 = "AMPM";
    var cAMPMFormat3 = "AM\/PM";
    this.StoreFormat = function (AResult, AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond, ADayOfWeek, AFormatStr, AFormatSettings, ADateTime, ANesting, ATimeFlag) {
      var lToken = "";
      var lLastFormatToken = "";
      var lPrevLastToken = "";
      var lCount = 0;
      var lClock12 = false;
      var lBuffer = 0;
      var lIsInterval = false;
      var lTemp = 0;
      var lFormatCurrent = 0;
      var lFormatEnd = 0;
      if (ANesting > 1) return;
      lFormatCurrent = 1;
      lFormatEnd = $mod.TStringHelper.get_Length.call({get: function () {
          return AFormatStr;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }});
      lClock12 = false;
      lIsInterval = false;
      lTemp = 1;
      while (lTemp <= lFormatEnd) {
        lToken = AFormatStr.charAt(lTemp - 1);
        var $tmp1 = lToken;
        if (($tmp1 === "'") || ($tmp1 === '"')) {
          lTemp += 1;
          while ((lTemp < lFormatEnd) && (AFormatStr.charAt(lTemp - 1) !== lToken)) lTemp += 1;
        } else if (($tmp1 === "A") || ($tmp1 === "a")) {
          if ($mod.TStringHelper.Equals.call({get: function () {
              return cAMPMFormat1;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},$mod.TStringHelper.Substring$1.call({get: function () {
              return AFormatStr;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},lTemp - 1,$mod.TStringHelper.get_Length.call({get: function () {
              return cAMPMFormat1;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }}))) || $mod.TStringHelper.Equals.call({get: function () {
              return cAMPMFormat2;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},$mod.TStringHelper.Substring$1.call({get: function () {
              return AFormatStr;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},lTemp - 1,$mod.TStringHelper.get_Length.call({get: function () {
              return cAMPMFormat2;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }}))) || $mod.TStringHelper.Equals.call({get: function () {
              return cAMPMFormat3;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},$mod.TStringHelper.Substring$1.call({get: function () {
              return AFormatStr;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},lTemp - 1,$mod.TStringHelper.get_Length.call({get: function () {
              return cAMPMFormat3;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }})))) {
            lClock12 = true;
            break;
          };
        };
        lTemp += 1;
      };
      lToken = "ÿ";
      lLastFormatToken = " ";
      lPrevLastToken = "H";
      while (lFormatCurrent <= lFormatEnd) {
        lToken = AFormatStr.charAt(lFormatCurrent - 1);
        lToken = $mod.TCharHelper.ToUpper.call({get: function () {
            return lToken;
          }, set: function (v) {
            lToken = v;
          }});
        lCount = 1;
        lTemp = lFormatCurrent + 1;
        var $tmp2 = lToken;
        if (($tmp2 === "'") || ($tmp2 === '"')) {
          while ((lTemp < lFormatEnd) && (AFormatStr.charAt(lTemp - 1) !== lToken)) lTemp += 1;
          lTemp += 1;
          lCount = lTemp - lFormatCurrent;
          this.StoreStr(AResult,AFormatStr,lFormatCurrent + 1,lCount - 2);
        } else if ($tmp2 === "A") {
          if ($mod.TStringHelper.Equals.call({get: function () {
              return cAMPMFormat2;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},$mod.TStringHelper.Substring$1.call({get: function () {
              return AFormatStr;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},lFormatCurrent - 1,$mod.TStringHelper.get_Length.call({get: function () {
              return cAMPMFormat2;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }})))) {
            lCount = 4;
            if (AHour.get() < 12) {
              this.StoreString(AResult,AFormatSettings.TimeAMString)}
             else this.StoreString(AResult,AFormatSettings.TimePMString);
          } else if ($mod.TStringHelper.Equals.call({get: function () {
              return cAMPMFormat3;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},$mod.TStringHelper.Substring$1.call({get: function () {
              return AFormatStr;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},lFormatCurrent - 1,$mod.TStringHelper.get_Length.call({get: function () {
              return cAMPMFormat3;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }})))) {
            lCount = 5;
            if (AHour.get() < 12) {
              this.StoreStr(AResult,AFormatStr,lFormatCurrent,2)}
             else this.StoreStr(AResult,AFormatStr,lFormatCurrent + 3,2);
          } else if ($mod.TStringHelper.Equals.call({get: function () {
              return cAMPMFormat1;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},$mod.TStringHelper.Substring$1.call({get: function () {
              return AFormatStr;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }},lFormatCurrent - 1,$mod.TStringHelper.get_Length.call({get: function () {
              return cAMPMFormat1;
            }, set: function (v) {
              rtl.raiseE("EPropReadOnly");
            }})))) {
            lCount = 3;
            if (AHour.get() < 12) {
              this.StoreStr(AResult,AFormatStr,lFormatCurrent,1)}
             else this.StoreStr(AResult,AFormatStr,lFormatCurrent + 2,1);
          } else throw $mod.EConvertError.$create("Create$1",["Illegal character in format string"]);
        } else if ($tmp2 === "\/") {
          this.StoreString(AResult,AFormatSettings.DateSeparator);
        } else if ($tmp2 === ":") {
          this.StoreString(AResult,AFormatSettings.TimeSeparator)}
         else if (($tmp2 === " ") || ($tmp2 === "C") || ($tmp2 === "D") || ($tmp2 === "H") || ($tmp2 === "M") || ($tmp2 === "N") || ($tmp2 === "S") || ($tmp2 === "T") || ($tmp2 === "Y") || ($tmp2 === "Z") || ($tmp2 === "F")) {
          while ((lTemp <= lFormatEnd) && ($mod.TCharHelper.ToUpper.call({p: $mod.TStringHelper.get_Chars.call({get: function () {
                return AFormatStr;
              }, set: function (v) {
                rtl.raiseE("EPropReadOnly");
              }},lTemp - 1), get: function () {
              return this.p;
            }, set: function (v) {
              this.p = v;
            }}) === lToken)) lTemp += 1;
          lCount = lTemp - lFormatCurrent;
          var $tmp3 = lToken;
          if ($tmp3 === " ") {
            this.StoreStr(AResult,AFormatStr,lFormatCurrent,lCount)}
           else if ($tmp3 === "Y") {
            if (lCount > 2) {
              this.StoreInt(AResult,AYear.get(),4)}
             else this.StoreInt(AResult,AYear.get() % 100,2);
          } else if ($tmp3 === "M") {
            if (lIsInterval && ((lPrevLastToken === "H") || ATimeFlag)) {
              this.StoreInt(AResult,AMinute.get() + ((AHour.get() + (pas.System.Trunc(Math.abs(ADateTime)) * 24)) * 60),0)}
             else if ((lLastFormatToken === "H") || ATimeFlag) {
              if (lCount === 1) {
                this.StoreInt(AResult,AMinute.get(),0)}
               else this.StoreInt(AResult,AMinute.get(),2);
            } else {
              var $tmp4 = lCount;
              if ($tmp4 === 1) {
                this.StoreInt(AResult,AMonth.get(),0)}
               else if ($tmp4 === 2) {
                this.StoreInt(AResult,AMonth.get(),2)}
               else if ($tmp4 === 3) {
                this.StoreString(AResult,AFormatSettings.ShortMonthNames[AMonth.get() - 1])}
               else {
                this.StoreString(AResult,AFormatSettings.LongMonthNames[AMonth.get() - 1]);
              };
            };
          } else if ($tmp3 === "D") {
            var $tmp5 = lCount;
            if ($tmp5 === 1) {
              this.StoreInt(AResult,ADay.get(),0)}
             else if ($tmp5 === 2) {
              this.StoreInt(AResult,ADay.get(),2)}
             else if ($tmp5 === 3) {
              this.StoreString(AResult,AFormatSettings.ShortDayNames[ADayOfWeek.get() - 1])}
             else if ($tmp5 === 4) {
              this.StoreString(AResult,AFormatSettings.LongDayNames[ADayOfWeek.get() - 1])}
             else if ($tmp5 === 5) {
              this.StoreFormat(AResult,AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,ADayOfWeek,AFormatSettings.ShortDateFormat,AFormatSettings,ADateTime,ANesting + 1,false)}
             else {
              this.StoreFormat(AResult,AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,ADayOfWeek,AFormatSettings.LongDateFormat,AFormatSettings,ADateTime,ANesting + 1,false);
            };
          } else if ($tmp3 === "H") {
            if (lIsInterval) {
              this.StoreInt(AResult,AHour.get() + (pas.System.Trunc(Math.abs(ADateTime)) * 24),0)}
             else if (lClock12) {
              lBuffer = AHour.get() % 12;
              if (lBuffer === 0) lBuffer = 12;
              if (lCount === 1) {
                this.StoreInt(AResult,lBuffer,0)}
               else this.StoreInt(AResult,lBuffer,2);
            } else {
              if (lCount === 1) {
                this.StoreInt(AResult,AHour.get(),0)}
               else this.StoreInt(AResult,AHour.get(),2);
            }}
           else if ($tmp3 === "N") {
            if (lIsInterval) {
              this.StoreInt(AResult,AMinute.get() + ((AHour.get() + (pas.System.Trunc(Math.abs(ADateTime)) * 24)) * 60),0)}
             else if (lCount === 1) {
              this.StoreInt(AResult,AMinute.get(),0)}
             else this.StoreInt(AResult,AMinute.get(),2)}
           else if ($tmp3 === "S") {
            if (lIsInterval) {
              this.StoreInt(AResult,ASecond.get() + ((AMinute.get() + ((AHour.get() + (pas.System.Trunc(Math.abs(ADateTime)) * 24)) * 60)) * 60),0)}
             else if (lCount === 1) {
              this.StoreInt(AResult,ASecond.get(),0)}
             else this.StoreInt(AResult,ASecond.get(),2)}
           else if ($tmp3 === "Z") {
            if (lCount === 1) {
              this.StoreInt(AResult,AMilliSecond.get(),0)}
             else this.StoreInt(AResult,AMilliSecond.get(),3)}
           else if ($tmp3 === "T") {
            if (lCount === 1) {
              this.StoreFormat(AResult,AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,ADayOfWeek,AFormatSettings.ShortTimeFormat,AFormatSettings,ADateTime,ANesting + 1,true)}
             else this.StoreFormat(AResult,AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,ADayOfWeek,AFormatSettings.LongTimeFormat,AFormatSettings,ADateTime,ANesting + 1,true)}
           else if ($tmp3 === "C") {
            this.StoreFormat(AResult,AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,ADayOfWeek,AFormatSettings.ShortDateFormat,AFormatSettings,ADateTime,ANesting + 1,false);
            if ((AHour.get() !== 0) || (AMinute.get() !== 0) || (ASecond.get() !== 0)) {
              this.StoreString(AResult," ");
              this.StoreFormat(AResult,AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,ADayOfWeek,AFormatSettings.LongTimeFormat,AFormatSettings,ADateTime,ANesting + 1,true);
            };
          } else if ($tmp3 === "F") {
            this.StoreFormat(AResult,AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,ADayOfWeek,AFormatSettings.ShortDateFormat,AFormatSettings,ADateTime,ANesting + 1,false);
            this.StoreString(AResult," ");
            this.StoreFormat(AResult,AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,ADayOfWeek,AFormatSettings.LongTimeFormat,AFormatSettings,ADateTime,ANesting + 1,true);
          };
          lPrevLastToken = lLastFormatToken;
          lLastFormatToken = lToken;
        } else {
          this.StoreString(AResult,lToken);
        };
        lFormatCurrent += lCount;
      };
    };
    var cFillChar = "0";
    this.StoreInt = function (AResult, AValue, ADigits) {
      var lBuffer = "";
      lBuffer = $mod.TLongIntHelper.ToString.call({get: function () {
          return AValue;
        }, set: function (v) {
          rtl.raiseE("EPropReadOnly");
        }});
      while ($mod.TStringHelper.get_Length.call({get: function () {
          return lBuffer;
        }, set: function (v) {
          lBuffer = v;
        }}) < ADigits) lBuffer = cFillChar + lBuffer;
      this.StoreString(AResult,lBuffer);
    };
    this.StoreStr = function (AResult, AFormatStr, APos, ALength) {
      AResult.set(AResult.get() + pas.System.Copy(AFormatStr,APos,ALength));
    };
    this.StoreString = function (AResult, AString) {
      AResult.set(AResult.get() + AString);
    };
    this.FormatDateTime = function (AFormatStr, AFormatSettings, ADateTime) {
      var Result = "";
      var lYear = 0;
      var lMonth = 0;
      var lDay = 0;
      var lDayOfWeek = 0;
      var lHour = 0;
      var lMinute = 0;
      var lSecond = 0;
      var lMilliSecond = 0;
      Result = "";
      pas.SysUtils.DecodeDateFully(ADateTime,{get: function () {
          return lYear;
        }, set: function (v) {
          lYear = v;
        }},{get: function () {
          return lMonth;
        }, set: function (v) {
          lMonth = v;
        }},{get: function () {
          return lDay;
        }, set: function (v) {
          lDay = v;
        }},{get: function () {
          return lDayOfWeek;
        }, set: function (v) {
          lDayOfWeek = v;
        }});
      pas.SysUtils.DecodeTime(ADateTime,{get: function () {
          return lHour;
        }, set: function (v) {
          lHour = v;
        }},{get: function () {
          return lMinute;
        }, set: function (v) {
          lMinute = v;
        }},{get: function () {
          return lSecond;
        }, set: function (v) {
          lSecond = v;
        }},{get: function () {
          return lMilliSecond;
        }, set: function (v) {
          lMilliSecond = v;
        }});
      if (AFormatStr !== "") {
        this.StoreFormat({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},{get: function () {
            return lYear;
          }, set: function (v) {
            lYear = v;
          }},{get: function () {
            return lMonth;
          }, set: function (v) {
            lMonth = v;
          }},{get: function () {
            return lDay;
          }, set: function (v) {
            lDay = v;
          }},{get: function () {
            return lHour;
          }, set: function (v) {
            lHour = v;
          }},{get: function () {
            return lMinute;
          }, set: function (v) {
            lMinute = v;
          }},{get: function () {
            return lSecond;
          }, set: function (v) {
            lSecond = v;
          }},{get: function () {
            return lMilliSecond;
          }, set: function (v) {
            lMilliSecond = v;
          }},{get: function () {
            return lDayOfWeek;
          }, set: function (v) {
            lDayOfWeek = v;
          }},AFormatStr,AFormatSettings,ADateTime,0,false)}
       else this.StoreFormat({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},{get: function () {
          return lYear;
        }, set: function (v) {
          lYear = v;
        }},{get: function () {
          return lMonth;
        }, set: function (v) {
          lMonth = v;
        }},{get: function () {
          return lDay;
        }, set: function (v) {
          lDay = v;
        }},{get: function () {
          return lHour;
        }, set: function (v) {
          lHour = v;
        }},{get: function () {
          return lMinute;
        }, set: function (v) {
          lMinute = v;
        }},{get: function () {
          return lSecond;
        }, set: function (v) {
          lSecond = v;
        }},{get: function () {
          return lMilliSecond;
        }, set: function (v) {
          lMilliSecond = v;
        }},{get: function () {
          return lDayOfWeek;
        }, set: function (v) {
          lDayOfWeek = v;
        }},"C",AFormatSettings,ADateTime,0,false);
      return Result;
    };
    var $r = $mod.$rtti.$Record("TFormatDateTimeHelper",{});
    $r.addMethod("FormatDateTime",5,[["AFormatStr",rtl.string,2],["AFormatSettings",$mod.$rtti["TFormatSettings"],2],["ADateTime",pas.System.$rtti["TDateTime"],2]],rtl.string,{flags: 1});
  },true);
  $impl.InternalCompare = function (AItem1, AItem2) {
    var Result = 0;
    Result = $impl.FCompare(rtl.getObject(AItem1),rtl.getObject(AItem2));
    return Result;
  };
});
rtl.module("WEBLib.WebTools",["System","Classes","Web","JS"],function () {
  "use strict";
  var $mod = this;
  this.DoubleToHTML = function (d) {
    var Result = "";
    Result = pas.SysUtils.Format("%g",[d]);
    Result = pas.SysUtils.StringReplace(Result,",",".",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    return Result;
  };
  this.MessageBeep = function (AType) {
    var snd = new Audio("data:audio/wav;base64,//uQRAAAAWMSLwUIYAAsYkXgoQwAEaYLWfkWgAI0wWs/ItAAAGDgYtAgAyN+QWaAAihwMWm4G8QQRDiMcCBcH3Cc+CDv/7xA4Tvh9Rz/y8QADBwMWgQAZG/ILNAARQ4GLTcDeI"+
        "IIhxGOBAuD7hOfBB3/94gcJ3w+o5/5eIAIAAAVwWgQAVQ2ORaIQwEMAJiDg95G4nQL7mQVWI6GwRcfsZAcsKkJvxgxEjzFUgfHoSQ9Qq7KNwqHwuB13MA4a1q/DmBrHgPcmjiGoh//EwC5nGPEmS4RcfkVK"+
    "OhJf+WOgoxJclFz3kgn//dBA+ya1GhurNn8zb//9NNutNuhz31f////9vt///z+IdAEAAAK4LQIAKobHItEIYCGAExBwe8jcToF9zIKrEdDYIuP2MgOWFSE34wYiR5iqQPj0JIeoVdlG4VD4XA67mAcNa1f"+
    "hzA1jwHuTRxDUQ//iYBczjHiTJcIuPyKlHQkv/LHQUYkuSi57yQT//uggfZNajQ3Vmz+Zt//+mm3Wm3Q576v////+32///5/EOgAAADVghQAAAAA//uQZAUAB1WI0PZugAAAAAoQwAAAEk3nRd2qAAAAACi"+
    "DgAAAAAAABCqEEQRLCgwpBGMlJkIz8jKhGvj4k6jzRnqasNKIeoh5gI7BJaC1A1AoNBjJgbyApVS4IDlZgDU5WUAxEKDNmmALHzZp0Fkz1FMTmGFl1FMEyodIavcCAUHDWrKAIA4aa2oCgILEBupZgHvAhE"+
    "BcZ6joQBxS76AgccrFlczBvKLC0QI2cBoCFvfTDAo7eoOQInqDPBtvrDEZBNYN5xwNwxQRfw8ZQ5wQVLvO8OYU+mHvFLlDh05Mdg7BT6YrRPpCBznMB2r//xKJjyyOh+cImr2/4doscwD6neZjuZR4AgAABY"+
    "AAAABy1xcdQtxYBYYZdifkUDgzzXaXn98Z0oi9ILU5mBjFANmRwlVJ3/6jYDAmxaiDG3/6xjQQCCKkRb/6kg/wW+kSJ5//rLobkLSiKmqP/0ikJuDaSaSf/6JiLYLEYnW/+kXg1WRVJL/9EmQ1YZIsv/6Qzw"+
    "y5qk7/+tEU0nkls3/zIUMPKNX/6yZLf+kFgAfgGyLFAUwY//uQZAUABcd5UiNPVXAAAApAAAAAE0VZQKw9ISAAACgAAAAAVQIygIElVrFkBS+Jhi+EAuu+lKAkYUEIsmEAEoMeDmCETMvfSHTGkF5RWH7kz/"+
    "ESHWPAq/kcCRhqBtMdokPdM7vil7RG98A2sc7zO6ZvTdM7pmOUAZTnJW+NXxqmd41dqJ6mLTXxrPpnV8avaIf5SvL7pndPvPpndJR9Kuu8fePvuiuhorgWjp7Mf/PRjxcFCPDkW31srioCExivv9lcwKEaHs"+
    "f/7ow2Fl1T/9RkXgEhYElAoCLFtMArxwivDJJ+bR1HTKJdlEoTELCIqgEwVGSQ+hIm0NbK8WXcTEI0UPoa2NbG4y2K00JEWbZavJXkYaqo9CRHS55FcZTjKEk3NKoCYUnSQ0rWxrZbFKbKIhOKPZe1cJKzZS"+
    "aQrIyULHDZmV5K4xySsDRKWOruanGtjLJXFEmwaIbDLX0hIPBUQPVFVkQkDoUNfSoDgQGKPekoxeGzA4DUvnn4bxzcZrtJyipKfPNy5w+9lnXwgqsiyHNeSVpemw4bWb9psYeq//uQZBoABQt4yMVxYAIAAA"+
    "kQoAAAHvYpL5m6AAgAACXDAAAAD59jblTirQe9upFsmZbpMudy7Lz1X1DYsxOOSWpfPqNX2WqktK0DMvuGwlbNj44TleLPQ+Gsfb+GOWOKJoIrWb3cIMeeON6lz2umTqMXV8Mj30yWPpjoSa9ujK8SyeJP5y5"+
    "mOW1D6hvLepeveEAEDo0mgCRClOEgANv3B9a6fikgUSu/DmAMATrGx7nng5p5iimPNZsfQLYB2sDLIkzRKZOHGAaUyDcpFBSLG9MCQALgAIgQs2YunOszLSAyQYPVC2YdGGeHD2dTdJk1pAHGAWDjnkcLKFym"+
    "S3RQZTInzySoBwMG0QueC3gMsCEYxUqlrcxK6k1LQQcsmyYeQPdC2YfuGPASCBkcVMQQqpVJshui1tkXQJQV0OXGAZMXSOEEBRirXbVRQW7ugq7IM7rPWSZyDlM3IuNEkxzCOJ0ny2ThNkyRai1b6ev//3dzN"+
    "GzNb//4uAvHT5sURcZCFcuKLhOFs8mLAAEAt4UWAAIABAAAAAB4qbHo0tIjVkUU//uQZAwABfSFz3ZqQAAAAAngwAAAE1HjMp2qAAAAACZDgAAAD5UkTE1UgZEUExqYynN1qZvqIOREEFmBcJQkwdxiFtw0q"+
    "EOkGYfRDifBui9MQg4QAHAqWtAWHoCxu1Yf4VfWLPIM2mHDFsbQEVGwyqQoQcwnfHeIkNt9YnkiaS1oizycqJrx4KOQjahZxWbcZgztj2c49nKmkId44S71j0c8eV9yDK6uPRzx5X18eDvjvQ6yKo9ZSS6l/"+
    "/8elePK/Lf//IInrOF/FvDoADYAGBMGb7FtErm5MXMlmPAJQVgWta7Zx2go+8xJ0UiCb8LHHdftWyLJE0QIAIsI+UbXu67dZMjmgDGCGl1H+vpF4NSDckSIkk7Vd+sxEhBQMRU8j/12UIRhzSaUdQ+rQU5kG"+
    "eFxm+hb1oh6pWWmv3uvmReDl0UnvtapVaIzo1jZbf/pD6ElLqSX+rUmOQNpJFa/r+sa4e/pBlAABoAAAAA3CUgShLdGIxsY7AUABPRrgCABdDuQ5GC7DqPQCgbbJUAoRSUj+NIEig0YfyWUho1VBBBA//uQZ"+
    "B4ABZx5zfMakeAAAAmwAAAAF5F3P0w9GtAAACfAAAAAwLhMDmAYWMgVEG1U0FIGCBgXBXAtfMH10000EEEEEECUBYln03TTTdNBDZopopYvrTTdNa325mImNg3TTPV9q3pmY0xoO6bv3r00y+IDGid/9aaaZ"+
    "TGMuj9mpu9Mpio1dXrr5HERTZSmqU36A3CumzN/9Robv/Xx4v9ijkSRSNLQhAWumap82WRSBUqXStV/YcS+XVLnSS+WLDroqArFkMEsAS+eWmrUzrO0oEmE40RlMZ5+ODIkAyKAGUwZ3mVKmcamcJnMW26MRP"+
    "gUw6j+LkhyHGVGYjSUUKNpuJUQoOIAyDvEyG8S5yfK6dhZc0Tx1KI/gviKL6qvvFs1+bWtaz58uUNnryq6kt5RzOCkPWlVqVX2a/EEBUdU1KrXLf40GoiiFXK///qpoiDXrOgqDR38JB0bw7SoL+ZB9o1RCk"+
    "QjQ2CBYZKd/+VJxZRRZlqSkKiws0WFxUyCwsKiMy7hUVFhIaCrNQsKkTIsLivwKKigsj8XYlwt/WKi2N4d//uQRCSAAjURNIHpMZBGYiaQPSYyAAABLAAAAAAAACWAAAAApUF/Mg+0aohSIRobBAsMlO//Kk"+
    "4soosy1JSFRYWaLC4qZBYWFRGZdwqKiwkNBVmoWFSJkWFxX4FFRQWR+LsS4W/rFRb////////////////////////////////////////////////////////////////////////////////////////////"+
    "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"+
    "////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////"+
    "/////////////VEFHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAU291bmRib3kuZGUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMjAwNGh0dHA6Ly93d3cuc291bmRib3kuZGUAAAAAAAAAACU=");
    snd.play();
  };
  this.OutputDebugString = function (s) {
    console.log(s);
  };
  this.GetTickCount = function () {
    var Result = 0;
    var n = 0;
    var d = new Date();
    n = d.getTime();
    Result = n;
    return Result;
  };
  this.GetQueryParam = function (AName) {
    var Result = "";
    var res = "";
    $mod.HasQueryParam(AName,{get: function () {
        return res;
      }, set: function (v) {
        res = v;
      }});
    Result = res;
    return Result;
  };
  this.HasQueryParam = function (AName, AValue) {
    var Result = false;
    var found = false;
    var s = "";
    s = "";
    var query = window.location.search.substring(1);
    var res = "";
    found = false;
    var vars = query.split('&');
    for (var i = 0; i < vars.length; i++) {
       var pair = vars[i].split('=');
      if (decodeURIComponent(pair[0]) == AName) {
          res = decodeURIComponent(pair[1]);
          found = true;
       }
    }
    s = res;
    AValue.set(s);
    Result = found;
    return Result;
  };
  this.EscapeHTML = function (AValue) {
    var Result = "";
    var s = "";
    s = AValue;
    function escapeHTML(AString) {
      return AString.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
    }
    s = escapeHTML(s);
    Result = s;
    return Result;
  };
  this.GetLocaleShortDateFormat = function (ALocale) {
    var Result = "";
    Result = pas["WEBLib.Utils"].TFormatSettings.Create$1(ALocale).ShortDateFormat;
    return Result;
  };
  this.GetLocaleLongDayName = function (DayOfWeek, ALocale) {
    var Result = "";
    var res = "";
    var baseDate = new Date(2017, 0, 1); // Sunday
        baseDate.setDate(baseDate.getDate() + DayOfWeek - 1);
    
        var loc = "";
        if (ALocale == '') { loc = navigator.language; }
        else { loc = ALocale; }
    
        res = baseDate.toLocaleDateString(loc, { weekday: 'long' });
    Result = res;
    return Result;
  };
  this.GetLocaleShortDayName = function (DayOfWeek, ALocale) {
    var Result = "";
    var res = "";
    var baseDate = new Date(2017, 0, 1); // Sunday
        baseDate.setDate(baseDate.getDate() + DayOfWeek - 1);
    
        var loc = "";
        if (ALocale == '') { loc = navigator.language; }
        else { loc = ALocale; }
    
        res = baseDate.toLocaleDateString(loc, { weekday: 'short' });
    Result = res;
    return Result;
  };
  this.GetLocaleLongMonthName = function (Month, ALocale) {
    var Result = "";
    var res = "";
    var baseDate = new Date(2017, Month - 1, 1);
    
        var loc = "";
        if (ALocale == '') { loc = navigator.language; }
        else { loc = ALocale; }
    
        res = baseDate.toLocaleDateString(loc, { month: 'long' });
    Result = res;
    return Result;
  };
  this.GetLocaleShortMonthName = function (Month, ALocale) {
    var Result = "";
    var res = "";
    var baseDate = new Date(2017, Month - 1, 1);
    
        var loc = "";
        if (ALocale == '') { loc = navigator.language; }
        else { loc = ALocale; }
    
        res = baseDate.toLocaleDateString(loc, { month: 'short' });
    Result = res;
    return Result;
  };
  this.GetLocaleDecimalSeparator = function (ALocale) {
    var Result = "";
    var res = "";
    var n = 1.1;
        var loc = "";
        if (ALocale == '') { loc = navigator.language; }
        else { loc = ALocale; }
    
        n = n.toLocaleString(loc).substring(1, 2);
        res = n;
    Result = res;
    return Result;
  };
  this.GetLocaleThousandSeparator = function (ALocale) {
    var Result = "";
    var res = "";
    var n = 1000.1;
    var loc = "";
    if (ALocale == '') { loc = navigator.language; }
    else { loc = ALocale; }
    n = n.toLocaleString(loc).substring(1, 2);
    res = n;
    Result = res;
    return Result;
  };
  this.LocaleFormatCurrency = function (Value, ACurrency, ALocale) {
    var Result = "";
    var res = "";
    var loc = "";
    if (ALocale == '') { loc = navigator.language; }
    else { loc = ALocale; }
    var number = Value;
    res = number.toLocaleString(loc, { style: 'currency', currency: ACurrency });
    Result = res;
    return Result;
  };
  this.GetLocaleCurrency = function (ALocale) {
    var Result = "";
    var res = "";
    var curr =
          {"BD": "BDT", "BE": "EUR", "BF": "XOF", "BG": "BGN", "BA": "BAM", "BB": "BBD", "WF": "XPF",
           "BL": "EUR", "BM": "BMD", "BN": "BND", "BO": "BOB", "BH": "BHD", "BI": "BIF", "BJ": "XOF",
           "BT": "BTN", "JM": "JMD", "BV": "NOK", "BW": "BWP", "WS": "WST", "BQ": "USD", "BR": "BRL",
           "BS": "BSD", "JE": "GBP", "BY": "BYR", "BZ": "BZD", "RU": "RUB", "RW": "RWF", "RS": "RSD",
           "TL": "USD", "RE": "EUR", "TM": "TMT", "TJ": "TJS", "RO": "RON", "TK": "NZD", "GW": "XOF",
           "GU": "USD", "GT": "GTQ", "GS": "GBP", "GR": "EUR", "GQ": "XAF", "GP": "EUR", "JP": "JPY",
           "GY": "GYD", "GG": "GBP", "GF": "EUR", "GE": "GEL", "GD": "XCD", "GB": "GBP", "GA": "XAF",
           "SV": "USD", "GN": "GNF", "GM": "GMD", "GL": "DKK", "GI": "GIP", "GH": "GHS", "OM": "OMR",
           "TN": "TND", "JO": "JOD", "HR": "HRK", "HT": "HTG", "HU": "HUF", "HK": "HKD", "HN": "HNL",
           "HM": "AUD", "VE": "VEF", "PR": "USD", "PS": "ILS", "PW": "USD", "PT": "EUR", "SJ": "NOK",
           "PY": "PYG", "IQ": "IQD", "PA": "PAB", "PF": "XPF", "PG": "PGK", "PE": "PEN", "PK": "PKR",
           "PH": "PHP", "PN": "NZD", "PL": "PLN", "PM": "EUR", "ZM": "ZMK", "EH": "MAD", "EE": "EUR",
           "EG": "EGP", "ZA": "ZAR", "EC": "USD", "IT": "EUR", "VN": "VND", "SB": "SBD", "ET": "ETB",
           "SO": "SOS", "ZW": "ZWL", "SA": "SAR", "ES": "EUR", "ER": "ERN", "ME": "EUR", "MD": "MDL",
           "MG": "MGA", "MF": "EUR", "MA": "MAD", "MC": "EUR", "UZ": "UZS", "MM": "MMK", "ML": "XOF",
           "MO": "MOP", "MN": "MNT", "MH": "USD", "MK": "MKD", "MU": "MUR", "MT": "EUR", "MW": "MWK",
           "MV": "MVR", "MQ": "EUR", "MP": "USD", "MS": "XCD", "MR": "MRO", "IM": "GBP", "UG": "UGX",
           "TZ": "TZS", "MY": "MYR", "MX": "MXN", "IL": "ILS", "FR": "EUR", "IO": "USD", "SH": "SHP",
           "FI": "EUR", "FJ": "FJD", "FK": "FKP", "FM": "USD", "FO": "DKK", "NI": "NIO", "NL": "EUR",
           "NO": "NOK", "NA": "NAD", "VU": "VUV", "NC": "XPF", "NE": "XOF", "NF": "AUD", "NG": "NGN",
           "NZ": "NZD", "NP": "NPR", "NR": "AUD", "NU": "NZD", "CK": "NZD", "XK": "EUR", "CI": "XOF",
           "CH": "CHF", "CO": "COP", "CN": "CNY", "CM": "XAF", "CL": "CLP", "CC": "AUD", "CA": "CAD",
           "CG": "XAF", "CF": "XAF", "CD": "CDF", "CZ": "CZK", "CY": "EUR", "CX": "AUD", "CR": "CRC",
           "CW": "ANG", "CV": "CVE", "CU": "CUP", "SZ": "SZL", "SY": "SYP", "SX": "ANG", "KG": "KGS",
           "KE": "KES", "SS": "SSP", "SR": "SRD", "KI": "AUD", "KH": "KHR", "KN": "XCD", "KM": "KMF",
           "ST": "STD", "SK": "EUR", "KR": "KRW", "SI": "EUR", "KP": "KPW", "KW": "KWD", "SN": "XOF",
           "SM": "EUR", "SL": "SLL", "SC": "SCR", "KZ": "KZT", "KY": "KYD", "SG": "SGD", "SE": "SEK",
           "SD": "SDG", "DO": "DOP", "DM": "XCD", "DJ": "DJF", "DK": "DKK", "VG": "USD", "DE": "EUR",
           "YE": "YER", "DZ": "DZD", "US": "USD", "UY": "UYU", "YT": "EUR", "UM": "USD", "LB": "LBP",
           "LC": "XCD", "LA": "LAK", "TV": "AUD", "TW": "TWD", "TT": "TTD", "TR": "TRY", "LK": "LKR",
           "LI": "CHF", "LV": "EUR", "TO": "TOP", "LT": "LTL", "LU": "EUR", "LR": "LRD", "LS": "LSL",
           "TH": "THB", "TF": "EUR", "TG": "XOF", "TD": "XAF", "TC": "USD", "LY": "LYD", "VA": "EUR",
           "VC": "XCD", "AE": "AED", "AD": "EUR", "AG": "XCD", "AF": "AFN", "AI": "XCD", "VI": "USD",
           "IS": "ISK", "IR": "IRR", "AM": "AMD", "AL": "ALL", "AO": "AOA", "AQ": "", "AS": "USD",
           "AR": "ARS", "AU": "AUD", "AT": "EUR", "AW": "AWG", "IN": "INR", "AX": "EUR", "AZ": "AZN",
           "IE": "EUR", "ID": "IDR", "UA": "UAH", "QA": "QAR", "MZ": "MZN"}
    
        var loc = "";
        if (ALocale == '') { loc = navigator.language; }
        else { loc = ALocale; }
        loc = loc.substring(3,5);
        loc = loc.toUpperCase();
        res = curr[loc] || '';
    Result = res;
    return Result;
  };
  this.GetBrowserLocale = function () {
    var Result = "";
    var res = "";
    res = navigator.language;
    Result = res;
    return Result;
  };
  this.ProcessAccelerator = function (AValue, Accelerator) {
    var Result = "";
    var i = 0;
    var l = 0;
    var res = "";
    l = AValue.length;
    Accelerator.set("");
    res = "";
    i = 1;
    while (i <= l) {
      if (AValue.charAt(i - 1) === "&") {
        if (((i + 1) <= l) && (AValue.charAt((i + 1) - 1) !== "&")) {
          res = res + "<u>" + AValue.charAt((i + 1) - 1) + "<\/u>";
          Accelerator.set(AValue.charAt((i + 1) - 1));
        } else if (((i + 1) <= l) && (AValue.charAt((i + 1) - 1) === "&")) res = res + "&";
        i += 2;
      } else {
        res = res + AValue.charAt(i - 1);
        i += 1;
      };
    };
    Result = res;
    return Result;
  };
  this.GetBase64Image = function (AImage, AWidth, AHeight) {
    var Result = "";
    var s = "";
    var m = null;
    s = "";
    m = AImage;
    function getBase64Image(img) {
      var canvas = document.createElement("canvas");
      if (AWidth == 0) {
        canvas.width = img.width; }
        else {
        canvas.width = AWidth; }
      if (AHeight == 0) {
      canvas.height = img.height; }
      else {
        canvas.height = AHeight; }
      var ctx = canvas.getContext("2d");
      if ((AWidth == 0) || (AHeight == 0)) {
         ctx.drawImage(img, 0, 0); }
      else {
         ctx.drawImage(img, 0, 0, AWidth, AHeight); }
      var dataURL = canvas.toDataURL("image/png");
      return dataURL.replace(/^data:image\/(png|jpg);base64,/, "");
    }
    s = getBase64Image(m);
    Result = s;
    return Result;
  };
  this.DebugBreak = function () {
    debugger;
  };
  this.HexImageDecode = function (s) {
    var Result = null;
    var i = 0;
    var j = 0;
    var l = 0;
    var res = null;
    var c1 = 0;
    var c2 = 0;
    var hdr = 0;
    l = Math.floor(s.length / 2);
    j = 0;
    c1 = s.charCodeAt(1 - 1) - 48;
    if (c1 >= 10) c1 = c1 - 7;
    c2 = s.charCodeAt(2 - 1) - 48;
    if (c2 >= 10) c2 = c2 - 7;
    hdr = 1 + (c2 + (c1 << 4));
    i = pas.System.Pos("4A5045474",s);
    if ((i > 1) && (i < 10)) hdr += 4;
    i = pas.System.Pos("4269746D6",s);
    if ((i > 1) && (i < 10)) hdr += 4;
    res = new Uint8Array(l - hdr);
    for (var $l1 = hdr + 1, $end2 = l; $l1 <= $end2; $l1++) {
      i = $l1;
      c1 = s.charCodeAt((i * 2) - 1 - 1) - 48;
      if (c1 >= 10) c1 = c1 - 7;
      c2 = s.charCodeAt((i * 2) - 1) - 48;
      if (c2 >= 10) c2 = c2 - 7;
      c2 = c2 + (c1 << 4);
      res[j] = c2;
      j += 1;
    };
    Result = res;
    return Result;
  };
  this.HexImageEncodeFromBase64 = function (s) {
    var Result = "";
    var ja = null;
    s = s.replace(/^data:image\/\S+;base64,/, "");
    //ja = Uint8Array.from(atob(s), c => c.charCodeAt(0))
    ja = Uint8Array.from(atob(s), function(c) { return c.charCodeAt(0);} );
    Result = $mod.HexImageEncode(ja);
    return Result;
  };
  this.HexImageEncode = function (a) {
    var Result = "";
    var i = 0;
    var l = 0;
    var b = 0;
    var s = "";
    var ls = "";
    Result = "";
    l = a.length;
    if (l === 0) return Result;
    l = ((l & 0xFF) << 24) + ((l & 0xFF00) << 8) + ((l & 0xFF0000) >>> 8) + ((l & 0xFF000000) >>> 24);
    ls = "";
    if ((a[0] === 137) && (a[1] === 80)) {
      s = "TPngImage";
      b = s.length;
    };
    if ((a[0] === 0xFF) && (a[1] === 0xD8)) {
      s = "TJPEGImage";
      b = s.length;
      ls = pas.SysUtils.IntToHex(l,8);
    };
    if ((a[0] === 66) && (a[1] === 77)) {
      s = "TBitmap";
      b = s.length;
      ls = pas.SysUtils.IntToHex(l,8);
    };
    if ((a[0] === 71) && (a[1] === 73)) {
      s = "TGIFImage";
      b = s.length;
    };
    Result = pas.SysUtils.IntToHex(b,2);
    for (var $l1 = 1, $end2 = s.length; $l1 <= $end2; $l1++) {
      i = $l1;
      b = s.charCodeAt(i - 1);
      Result = Result + pas.SysUtils.IntToHex(b,2);
    };
    Result = Result + ls;
    for (var $l3 = 0, $end4 = a.length - 1; $l3 <= $end4; $l3++) {
      i = $l3;
      b = a[i];
      Result = Result + pas.SysUtils.IntToHex(b,2);
    };
    return Result;
  };
  this.HexImageDecodeAsBase64 = function (s) {
    var Result = "";
    var ja = null;
    ja = $mod.HexImageDecode(s);
    s = btoa(new Uint8Array(ja).reduce(function (data, byte) {
    return data + String.fromCharCode(byte);
    }, ''));
    Result = s;
    return Result;
  };
  this.EmptyImage = function () {
    var Result = "";
    Result = "data:image\/gif;base64,R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==";
    return Result;
  };
},["SysUtils","WEBLib.Utils"]);
rtl.module("WEBLib.WebCtrls",["System","Classes","WEBLib.Controls","WEBLib.Graphics","SysUtils","Web","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TBrowserSandboxType = {"0": "stAllowForms", stAllowForms: 0, "1": "stAllowModals", stAllowModals: 1, "2": "stAllowOrientationLock", stAllowOrientationLock: 2, "3": "stAllowPointerLock", stAllowPointerLock: 3, "4": "stAllowPopups", stAllowPopups: 4, "5": "stAllowPopupsToEscapeSandbox", stAllowPopupsToEscapeSandbox: 5, "6": "stAllowPresentation", stAllowPresentation: 6, "7": "stAllowSameOrigin", stAllowSameOrigin: 7, "8": "stAllowScripts", stAllowScripts: 8, "9": "stAllowTopNavigation", stAllowTopNavigation: 9, "10": "stAllowTopNavigationByUserActivation", stAllowTopNavigationByUserActivation: 10};
  $mod.$rtti.$Enum("TBrowserSandboxType",{minvalue: 0, maxvalue: 10, ordtype: 1, enumtype: this.TBrowserSandboxType});
  $mod.$rtti.$Set("TBrowserSandboxTypes",{comptype: $mod.$rtti["TBrowserSandboxType"]});
  this.TBrowserReferrerPolicy = {"0": "rfNone", rfNone: 0, "1": "rfNoReferrer", rfNoReferrer: 1, "2": "rfNoReferrerWhenDowngrade", rfNoReferrerWhenDowngrade: 2, "3": "rfOrigin", rfOrigin: 3, "4": "rfOriginWhenCrossOrigin", rfOriginWhenCrossOrigin: 4, "5": "rfUnsafeUrl", rfUnsafeUrl: 5};
  $mod.$rtti.$Enum("TBrowserReferrerPolicy",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TBrowserReferrerPolicy});
  rtl.createClass($mod,"TBrowserControl",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FURL = "";
      this.FSandbox = {};
      this.FReferrerPolicy = 0;
    };
    this.$final = function () {
      this.FSandbox = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetURL = function (Value) {
      var el = null;
      this.FURL = Value;
      el = this.GetElementHandle();
      el.setAttribute("src",Value);
    };
    this.SetSandbox = function (Value) {
      this.FSandbox = rtl.refSet(Value);
      this.UpdateElementVisual();
    };
    this.SetReferrerPolicy = function (Value) {
      this.FReferrerPolicy = Value;
      this.UpdateElementVisual();
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("IFRAME");
      return Result;
    };
    this.UpdateElementVisual = function () {
      var $Self = this;
      var SandboxStr = "";
      function AppendStr(s, appstr) {
        if (s.get() === "") {
          s.set(appstr)}
         else s.set(s.get() + " " + appstr);
      };
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call($Self);
      if ($Self.FBorderStyle === pas["WEBLib.Controls"].TBorderStyle.bsSingle) {
        $Self.GetElementHandle().style.setProperty("border","1px solid silver")}
       else $Self.GetElementHandle().style.setProperty("border","0px");
      SandboxStr = "";
      if ($mod.TBrowserSandboxType.stAllowForms in $Self.FSandbox) AppendStr({get: function () {
          return SandboxStr;
        }, set: function (v) {
          SandboxStr = v;
        }},"allow-forms");
      if ($mod.TBrowserSandboxType.stAllowModals in $Self.FSandbox) AppendStr({get: function () {
          return SandboxStr;
        }, set: function (v) {
          SandboxStr = v;
        }},"allow-modals");
      if ($mod.TBrowserSandboxType.stAllowOrientationLock in $Self.FSandbox) AppendStr({get: function () {
          return SandboxStr;
        }, set: function (v) {
          SandboxStr = v;
        }},"allow-orientation-lock");
      if ($mod.TBrowserSandboxType.stAllowPointerLock in $Self.FSandbox) AppendStr({get: function () {
          return SandboxStr;
        }, set: function (v) {
          SandboxStr = v;
        }},"allow-pointer-lock");
      if ($mod.TBrowserSandboxType.stAllowPopups in $Self.FSandbox) AppendStr({get: function () {
          return SandboxStr;
        }, set: function (v) {
          SandboxStr = v;
        }},"allow-popups");
      if ($mod.TBrowserSandboxType.stAllowPopupsToEscapeSandbox in $Self.FSandbox) AppendStr({get: function () {
          return SandboxStr;
        }, set: function (v) {
          SandboxStr = v;
        }},"allow-popups-to-escape-sandbox");
      if ($mod.TBrowserSandboxType.stAllowPresentation in $Self.FSandbox) AppendStr({get: function () {
          return SandboxStr;
        }, set: function (v) {
          SandboxStr = v;
        }},"allow-presentation");
      if ($mod.TBrowserSandboxType.stAllowSameOrigin in $Self.FSandbox) AppendStr({get: function () {
          return SandboxStr;
        }, set: function (v) {
          SandboxStr = v;
        }},"allow-same-origin");
      if ($mod.TBrowserSandboxType.stAllowScripts in $Self.FSandbox) AppendStr({get: function () {
          return SandboxStr;
        }, set: function (v) {
          SandboxStr = v;
        }},"allow-scripts");
      if ($mod.TBrowserSandboxType.stAllowTopNavigation in $Self.FSandbox) AppendStr({get: function () {
          return SandboxStr;
        }, set: function (v) {
          SandboxStr = v;
        }},"allow-top-navigation");
      if ($mod.TBrowserSandboxType.stAllowTopNavigationByUserActivation in $Self.FSandbox) AppendStr({get: function () {
          return SandboxStr;
        }, set: function (v) {
          SandboxStr = v;
        }},"allow-top-navigation-by-user-activation");
      if (SandboxStr !== "") {
        $Self.GetElementHandle().setAttribute("sandbox",SandboxStr);
      };
      var $tmp1 = $Self.FReferrerPolicy;
      if ($tmp1 === $mod.TBrowserReferrerPolicy.rfNoReferrer) {
        $Self.GetElementHandle().setAttribute("referrerpolicy","no-referrer")}
       else if ($tmp1 === $mod.TBrowserReferrerPolicy.rfNoReferrerWhenDowngrade) {
        $Self.GetElementHandle().setAttribute("referrerpolicy","no-referrer-when-downgrade")}
       else if ($tmp1 === $mod.TBrowserReferrerPolicy.rfOrigin) {
        $Self.GetElementHandle().setAttribute("referrerpolicy","origin")}
       else if ($tmp1 === $mod.TBrowserReferrerPolicy.rfOriginWhenCrossOrigin) {
        $Self.GetElementHandle().setAttribute("referrerpolicy","origin-when-cross-origin")}
       else if ($tmp1 === $mod.TBrowserReferrerPolicy.rfUnsafeUrl) $Self.GetElementHandle().setAttribute("referrerpolicy","unsafe-url");
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.SetWidth(400);
      this.SetHeight(300);
    };
    this.Navigate = function (AURL) {
      this.SetURL(AURL);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("ReferrerPolicy",2,$mod.$rtti["TBrowserReferrerPolicy"],"FReferrerPolicy","SetReferrerPolicy");
    $r.addProperty("Sandbox",2,$mod.$rtti["TBrowserSandboxTypes"],"FSandbox","SetSandbox");
    $r.addProperty("URL",2,rtl.string,"FURL","SetURL");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
  });
  rtl.createClass($mod,"TWebBrowserControl",$mod.TBrowserControl,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TYoutube",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FVideoID = "";
      this.FAllowFullScreen = false;
      this.FAutoPlay = false;
    };
    this.SetAllowFullScreen = function (Value) {
      this.FAllowFullScreen = Value;
      this.UpdateElement();
    };
    this.SetVideoID = function (Value) {
      this.FVideoID = Value;
      this.UpdateElement();
    };
    this.CreateElement = function () {
      var Result = null;
      var LLabel = null;
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        Result = document.createElement("DIV");
        LLabel = document.createElement("DIV");
        LLabel.innerHTML = "TWebYouTube";
        this.SetBorderStyle(pas["WEBLib.Controls"].TBorderStyle.bsSingle);
        LLabel.setAttribute("align","center");
        LLabel.style.setProperty("border","1px solid gray");
        LLabel.style.setProperty("vertical-align","middle");
        LLabel.style.setProperty("display","table-cell");
        Result.appendChild(LLabel);
      } else {
        Result = document.createElement("IFRAME");
        Result.setAttribute("id",this.GetID());
        Result.setAttribute("frameborder","0");
      };
      return Result;
    };
    this.UpdateElement = function () {
      var FURL = "";
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if (this.IsUpdating()) return;
      if ((pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && (this.FVideoID === "")) {
        if (this.GetElementHandle() != null) {
          this.GetElementHandle().style.setProperty("display","table");
          this.GetElementHandle().style.setProperty("background-color","silver");
        };
      };
      if (this.GetContainer() != null) {
        if (this.FVideoID !== "") {
          FURL = "https:\/\/www.youtube.com\/embed\/" + this.FVideoID;
          if (this.FAutoPlay) FURL = FURL + "?autoplay=1";
          this.GetContainer().setAttribute("src",FURL);
        };
        if (this.FAllowFullScreen) {
          this.GetContainer().setAttribute("allowfullscreen","allowfullscreen")}
         else this.GetContainer().removeAttribute("allowfullscreen");
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.SetWidth(400);
      this.SetHeight(300);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AllowFullScreen",2,rtl.boolean,"FAllowFullScreen","SetAllowFullScreen");
    $r.addProperty("AutoPlay",0,rtl.boolean,"FAutoPlay","FAutoPlay");
    $r.addProperty("VideoID",2,rtl.string,"FVideoID","SetVideoID");
  });
  rtl.createClass($mod,"TWebYoutube",$mod.TYoutube,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$MethodVar("TMapClickEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Lon",rtl.double],["Lat",rtl.double]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMapZoomEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ZoomLevel",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMapMarkerClickEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AIndex",rtl.longint],["AMarker",pas.JS.$rtti["TJSObject"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMapPolygonClickEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AIndex",rtl.longint],["APolygon",pas.JS.$rtti["TJSObject"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMapPolylineClickEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AIndex",rtl.longint],["APolyline",pas.JS.$rtti["TJSObject"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMapCircleClickEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AIndex",rtl.longint],["ACircle",pas.JS.$rtti["TJSObject"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMapRectangleClickEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AIndex",rtl.longint],["ARectangle",pas.JS.$rtti["TJSObject"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMapKMLClickEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AIndex",rtl.longint],["AKML",pas.JS.$rtti["TJSObject"]]]), methodkind: 0});
  this.TGoogleMarkerColor = {"0": "mcDefault", mcDefault: 0, "1": "mcRed", mcRed: 1, "2": "mcBlue", mcBlue: 2, "3": "mcGreen", mcGreen: 3, "4": "mcPurple", mcPurple: 4, "5": "mcYellow", mcYellow: 5};
  $mod.$rtti.$Enum("TGoogleMarkerColor",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TGoogleMarkerColor});
  this.TGoogleMarkerShape = {"0": "msPin", msPin: 0, "1": "msPinDot", msPinDot: 1, "2": "msFlag", msFlag: 2, "3": "msBookmark", msBookmark: 3, "4": "msFlagSmall", msFlagSmall: 4, "5": "msHome", msHome: 5, "6": "msFavorite", msFavorite: 6, "7": "msStar", msStar: 7, "8": "msCustom", msCustom: 8};
  $mod.$rtti.$Enum("TGoogleMarkerShape",{minvalue: 0, maxvalue: 8, ordtype: 1, enumtype: this.TGoogleMarkerShape});
  this.TGoogleTravelMode = {"0": "tmDriving", tmDriving: 0, "1": "tmWalking", tmWalking: 1, "2": "tmBicycling", tmBicycling: 2, "3": "tmTransit", tmTransit: 3};
  $mod.$rtti.$Enum("TGoogleTravelMode",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TGoogleTravelMode});
  this.TGoogleMapType = {"0": "mtDefault", mtDefault: 0, "1": "mtSatellite", mtSatellite: 1, "2": "mtHybrid", mtHybrid: 2, "3": "mtTerrain", mtTerrain: 3};
  $mod.$rtti.$Enum("TGoogleMapType",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TGoogleMapType});
  this.TGoogleMapStyle = {"0": "mstDefault", mstDefault: 0, "1": "mstNightMode", mstNightMode: 1, "2": "mstCustom", mstCustom: 2};
  $mod.$rtti.$Enum("TGoogleMapStyle",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TGoogleMapStyle});
  $mod.$rtti.$Class("TGoogleMaps");
  rtl.createClass($mod,"TGoogleMapsOptions",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FCustomStyle = null;
      this.FMapStyle = 0;
      this.FDefaultLongitude = 0.0;
      this.FDefaultLatitude = 0.0;
      this.FDefaultZoomLevel = 0;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FCustomStyle = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetCustomStyle = function (Value) {
      this.FCustomStyle.Assign(Value);
    };
    this.SetMapStyle = function (Value) {
      var map = null;
      var cstyle = "";
      var ostyle = null;
      this.FMapStyle = Value;
      map = this.FOwner.GetMap();
      if (!(map != null)) return;
      if (this.FMapStyle === $mod.TGoogleMapStyle.mstNightMode) {
        var myStyle =
              [
                {
                  "elementType": "geometry",
                  "stylers": [
                    {
                      "color": "#242f3e"
                    }
                  ]
                },
                {
                  "elementType": "labels.text.fill",
                  "stylers": [
                    {
                      "color": "#746855"
                    }
                  ]
                },
                {
                  "elementType": "labels.text.stroke",
                  "stylers": [
                    {
                      "color": "#242f3e"
                    }
                  ]
                },
                {
                  "featureType": "administrative.locality",
                  "elementType": "labels.text.fill",
                  "stylers": [
                    {
                      "color": "#d59563"
                    }
                  ]
                },
                {
                  "featureType": "poi",
                  "elementType": "labels.text.fill",
                  "stylers": [
                    {
                      "color": "#d59563"
                    }
                  ]
                },
                {
                  "featureType": "poi.park",
                  "elementType": "geometry",
                  "stylers": [
                    {
                      "color": "#263c3f"
                    }
                  ]
                },
                {
                  "featureType": "poi.park",
                  "elementType": "labels.text.fill",
                  "stylers": [
                    {
                      "color": "#6b9a76"
                    }
                  ]
                },
                {
                  "featureType": "road",
                  "elementType": "geometry",
                  "stylers": [
                    {
                      "color": "#38414e"
                    }
                  ]
                },
                {
                  "featureType": "road",
                  "elementType": "geometry.stroke",
                  "stylers": [
                    {
                      "color": "#212a37"
                    }
                  ]
                },
                {
                  "featureType": "road",
                  "elementType": "labels.text.fill",
                  "stylers": [
                    {
                      "color": "#9ca5b3"
                    }
                  ]
                },
                {
                  "featureType": "road.highway",
                  "elementType": "geometry",
                  "stylers": [
                    {
                      "color": "#746855"
                    }
                  ]
                },
                {
                  "featureType": "road.highway",
                  "elementType": "geometry.stroke",
                  "stylers": [
                    {
                      "color": "#1f2835"
                    }
                  ]
                },
                {
                  "featureType": "road.highway",
                  "elementType": "labels.text.fill",
                  "stylers": [
                    {
                      "color": "#f3d19c"
                    }
                  ]
                },
                {
                  "featureType": "transit",
                  "elementType": "geometry",
                  "stylers": [
                    {
                      "color": "#2f3948"
                    }
                  ]
                },
                {
                  "featureType": "transit.station",
                  "elementType": "labels.text.fill",
                  "stylers": [
                    {
                      "color": "#d59563"
                    }
                  ]
                },
                {
                  "featureType": "water",
                  "elementType": "geometry",
                  "stylers": [
                    {
                      "color": "#17263c"
                    }
                  ]
                },
                {
                  "featureType": "water",
                  "elementType": "labels.text.fill",
                  "stylers": [
                    {
                      "color": "#515c6d"
                    }
                  ]
                },
                {
                  "featureType": "water",
                  "elementType": "labels.text.stroke",
                  "stylers": [
                    {
                      "color": "#17263c"
                    }
                  ]
                }
              ];
        
              map.setOptions({styles: myStyle});
      } else if ((this.FMapStyle === $mod.TGoogleMapStyle.mstCustom) && (this.FCustomStyle.GetTextStr() !== "")) {
        cstyle = this.FCustomStyle.GetTextStr();
        ostyle = rtl.getObject(JSON.parse(cstyle));
        map.setOptions({styles: ostyle});
      } else {
        map.setOptions({styles: []});
      };
    };
    this.SetDefaultLatitude = function (Value) {
      if (this.FDefaultLatitude !== Value) {
        this.FDefaultLatitude = Value;
        this.FOwner.UpdateElement();
        this.FOwner.PanTo(this.FDefaultLatitude,this.FDefaultLongitude);
      };
    };
    this.SetDefaultLongitude = function (Value) {
      if (this.FDefaultLongitude !== Value) {
        this.FDefaultLongitude = Value;
        this.FOwner.UpdateElement();
        this.FOwner.PanTo(this.FDefaultLatitude,this.FDefaultLongitude);
      };
    };
    this.SetDefaultZoomLevel = function (Value) {
      if ((this.FDefaultZoomLevel !== Value) && (Value >= 0) && (Value <= 21)) {
        this.FDefaultZoomLevel = Value;
        this.FOwner.UpdateElement();
        this.FOwner.SetZoom(Value);
      };
    };
    this.Create$1 = function (AGoogleMaps) {
      pas.System.TObject.Create.call(this);
      this.FCustomStyle = pas.Classes.TStringList.$create("Create$1");
      this.FMapStyle = $mod.TGoogleMapStyle.mstDefault;
      this.FDefaultLatitude = -34.397;
      this.FDefaultLongitude = 150.644;
      this.FDefaultZoomLevel = 8;
      this.FOwner = AGoogleMaps;
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FCustomStyle");
      pas.System.TObject.Destroy.call(this);
    };
    this.Assign = function (Source) {
      pas.Classes.TPersistent.Assign.apply(this,arguments);
      this.FCustomStyle = rtl.as(Source,$mod.TGoogleMapsOptions).FCustomStyle;
      this.FMapStyle = rtl.as(Source,$mod.TGoogleMapsOptions).FMapStyle;
      this.FDefaultLatitude = rtl.as(Source,$mod.TGoogleMapsOptions).FDefaultLatitude;
      this.FDefaultLongitude = rtl.as(Source,$mod.TGoogleMapsOptions).FDefaultLongitude;
      this.FDefaultZoomLevel = rtl.as(Source,$mod.TGoogleMapsOptions).FDefaultZoomLevel;
    };
    var $r = this.$rtti;
    $r.addProperty("CustomStyle",2,pas.Classes.$rtti["TStringList"],"FCustomStyle","SetCustomStyle");
    $r.addProperty("MapStyle",2,$mod.$rtti["TGoogleMapStyle"],"FMapStyle","SetMapStyle",{Default: $mod.TGoogleMapStyle.mstDefault});
    $r.addProperty("DefaultLatitude",2,rtl.double,"FDefaultLatitude","SetDefaultLatitude",{Default: -34.397});
    $r.addProperty("DefaultLongitude",2,rtl.double,"FDefaultLongitude","SetDefaultLongitude",{Default: 150.644});
    $r.addProperty("DefaultZoomLevel",2,rtl.longint,"FDefaultZoomLevel","SetDefaultZoomLevel",{Default: 8});
  });
  rtl.createClass($mod,"TGoogleMaps",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FUpdateCount$1 = 0;
      this.FReq = null;
      this.FAPIKey = "";
      this.FMap = null;
      this.FDirectionsService = null;
      this.FDirectionsDisplay = null;
      this.FCode = false;
      this.FBound = false;
      this.FOnMapClick = null;
      this.FOnMapDblClick = null;
      this.FOnMapZoom = null;
      this.FOnMapPan = null;
      this.FOnGeoCoded = null;
      this.FOnMapIdle = null;
      this.FOnMapLoaded = null;
      this.FOnMarkerClick = null;
      this.FOnPolygonClick = null;
      this.FOnPolylineClick = null;
      this.FOnCircleClick = null;
      this.FOnRectangleClick = null;
      this.FOnKMLClick = null;
      this.FOptions = null;
    };
    this.$final = function () {
      this.FReq = undefined;
      this.FMap = undefined;
      this.FDirectionsService = undefined;
      this.FDirectionsDisplay = undefined;
      this.FOnMapClick = undefined;
      this.FOnMapDblClick = undefined;
      this.FOnMapZoom = undefined;
      this.FOnMapPan = undefined;
      this.FOnGeoCoded = undefined;
      this.FOnMapIdle = undefined;
      this.FOnMapLoaded = undefined;
      this.FOnMarkerClick = undefined;
      this.FOnPolygonClick = undefined;
      this.FOnPolylineClick = undefined;
      this.FOnCircleClick = undefined;
      this.FOnRectangleClick = undefined;
      this.FOnKMLClick = undefined;
      this.FOptions = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetAPIKey = function (Value) {
      if (this.FAPIKey !== Value) {
        this.FAPIKey = Value;
        this.UpdateElement();
      };
    };
    this.GetMarker = function (AIndex) {
      var Result = null;
      var res = null;
      res = this.FMarkers[AIndex];
      Result = res;
      return Result;
    };
    this.GetCircle = function (AIndex) {
      var Result = null;
      var res = null;
      res = this.FCircles[AIndex];
      Result = res;
      return Result;
    };
    this.GetRectangle = function (AIndex) {
      var Result = null;
      var res = null;
      res = this.FGetRectangle[AIndex];
      Result = res;
      return Result;
    };
    this.GetPolygon = function (AIndex) {
      var Result = null;
      var res = null;
      res = this.FPolygon[AIndex];
      Result = res;
      return Result;
    };
    this.GetPolyline = function (AIndex) {
      var Result = null;
      var res = null;
      res = this.FPolyline[AIndex];
      Result = res;
      return Result;
    };
    this.GetMap = function () {
      var Result = null;
      var map = null;
      var id = "";
      if (this.FMap != null) {
        Result = this.FMap}
       else {
        map = null;
        id = this.GetID();
        var el = document.getElementById(id);
        if (el != null) {
          map = el.gMap;
        };
        Result = map;
        if (map != null) this.FMap = Result;
      };
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      this.FDirectionsService = null;
      this.FDirectionsDisplay = null;
      Result = document.createElement("DIV");
      Result.setAttribute("id",this.GetID());
      this.FMap = null;
      return Result;
    };
    this.UpdateElement = function () {
      var map = null;
      var id = "";
      var srcurl = "";
      var scriptsrc = "";
      var scr = null;
      var sp = null;
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if (this.IsUpdating()) return;
      if (this.FUpdateCount$1 > 0) return;
      if (!this.FCode && (this.FAPIKey !== "")) {
        this.FCode = true;
        id = this.GetID();
        srcurl = "https:\/\/maps.googleapis.com\/maps\/api\/js?key=" + this.FAPIKey + "&callback=initMap" + id;
        scriptsrc = "function initMap" + id + "() { " + "\r\n" + 'var el = document.getElementById("' + id + '");' + "\r\n" + 'if (el == null) { alert("Google Maps DIV element not found!"); }' + "\r\n" + "map = new google.maps.Map(el, {" + "\r\n" + "center: {lat: " + pas.SysUtils.StringReplace(pas.SysUtils.FloatToStr(this.FOptions.FDefaultLatitude),",",".",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)) + ", lng: " + pas.SysUtils.StringReplace(pas.SysUtils.FloatToStr(this.FOptions.FDefaultLongitude),",",".",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)) + "}," + "\r\n" + "zoom: " + pas.SysUtils.IntToStr(this.FOptions.FDefaultZoomLevel) + "});" + "\r\n" + "el.gMap = map;" + "\r\n" + "}";
        scr = document.createElement("script");
        scr.addEventListener("load",rtl.createCallback(this,"DoLoaded"));
        scr.defer = true;
        scr.async = true;
        scr.src = srcurl;
        scr.type = 'text/javascript';
        document.head.appendChild(scr);
        var script = document.createElement('script');
        script.innerHTML = scriptsrc;
        document.head.appendChild(script);
      } else if (this.GetElementHandle() != null) {
        this.GetElementHandle().style.setProperty("border","1px solid gray");
        this.GetElementHandle().style.setProperty("background-color","#eee");
        if (this.GetElementHandle().childElementCount === 0) {
          sp = document.createElement("SPAN");
          srcurl = "<br>Set the Google Maps JavaScript API key via WebGoogleMaps.APIKey in order to see the map.<br>" + 'Request the key via <a href="https:\/\/developers.google.com\/maps\/documentation\/javascript\/get-api-key">this page<\/a>';
          sp.innerHTML = srcurl;
          this.GetElementHandle().appendChild(sp);
        };
      };
    };
    this.SetControlCursor = function (Value) {
      var map = null;
      var s = "";
      pas["WEBLib.Controls"].TControl.SetControlCursor.apply(this,arguments);
      map = this.GetMap();
      if (Value === 0) {
        s = "''"}
       else s = pas["WEBLib.Controls"].GetHTMLCursorName(Value);
      if (map != null) {
        map.setOptions({draggableCursor: s});
      };
    };
    this.BindEvents = function () {
      var map = null;
      var ptr1 = null;
      var ptr2 = null;
      var ptr3 = null;
      var ptr4 = null;
      var ptr5 = null;
      var dirsvc = null;
      var dirdispl = null;
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.IsUpdating()) return;
      map = this.GetMap();
      if ((map != null) && !this.FBound && !(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) {
        ptr1 = rtl.createCallback(this,"HandleMapClick");
        ptr2 = rtl.createCallback(this,"HandleMapDblClick");
        ptr3 = rtl.createCallback(this,"HandleMapPan");
        ptr4 = rtl.createCallback(this,"HandleMapZoom");
        ptr5 = rtl.createCallback(this,"HandleMapIdle");
        this.FMarkers = [];
        this.FPolygons = [];
        this.FPolylines = [];
        this.FCircles = [];
        this.FRectangles = [];
        this.FKMLs = [];
        dirsvc = new google.maps.DirectionsService;
        dirdispl = new google.maps.DirectionsRenderer;
        dirdispl.setMap(map);
        map.addListener('click', ptr1);
        map.addListener('dblclick', ptr2);
        map.addListener('center_changed',ptr3);
        map.addListener('zoom_changed',ptr4);
        map.addListener('tilesloaded',ptr5);
        this.FDirectionsService = dirsvc;
        this.FDirectionsDisplay = dirdispl;
        this.FBound = true;
      };
    };
    this.HandleMapClick = function (e) {
      var lon = 0.0;
      var lat = 0.0;
      lon = e.latLng.lng();
      lat = e.latLng.lat();
      if (this.FOnMapClick != null) this.FOnMapClick(this,lon,lat);
    };
    this.HandleMapDblClick = function (e) {
      var lon = 0.0;
      var lat = 0.0;
      lon = e.latLng.lng();
      lat = e.latLng.lat();
      if (this.FOnMapDblClick != null) this.FOnMapDblClick(this,lon,lat);
    };
    this.HandleMapPan = function (e) {
      var lon = 0.0;
      var lat = 0.0;
      var c = map.getCenter();
      lon = c.lng();
      lat = c.lat();
      if (this.FOnMapPan != null) this.FOnMapPan(this,lon,lat);
    };
    this.HandleMapZoom = function (e) {
      var map = null;
      var zoom = 0;
      map = this.GetMap();
      zoom = map.getZoom();
      if (this.FOnMapZoom != null) this.FOnMapZoom(this,zoom);
    };
    this.HandleMapIdle = function (e) {
      if (this.FOnMapIdle != null) this.FOnMapIdle(this);
    };
    this.HandleMarkerClick = function (e) {
      var idx = 0;
      idx = e.idx;
      if (this.FOnMarkerClick != null) this.FOnMarkerClick(this,idx,e);
    };
    this.HandlePolygonClick = function (e) {
      var idx = 0;
      idx = e.idx;
      if (this.FOnPolygonClick != null) this.FOnPolygonClick(this,idx,e);
    };
    this.HandlePolylineClick = function (e) {
      var idx = 0;
      idx = e.idx;
      if (this.FOnPolylineClick != null) this.FOnPolylineClick(this,idx,e);
    };
    this.HandleCircleClick = function (e) {
      var idx = 0;
      idx = e.idx;
      if (this.FOnCircleClick != null) this.FOnCircleClick(this,idx,e);
    };
    this.HandleRectangleClick = function (e) {
      var idx = 0;
      idx = e.idx;
      if (this.FOnRectangleClick != null) this.FOnRectangleClick(this,idx,e);
    };
    this.HandleKMLClick = function (e) {
      var idx = 0;
      idx = e.idx;
      if (this.FOnKMLClick != null) this.FOnKMLClick(this,idx,e);
    };
    this.HandleResponse = function (Event) {
      var Result = false;
      var fnd = false;
      var reslat = 0.0;
      var reslon = 0.0;
      Result = true;
      fnd = false;
      var s = Event.target.responseText;
      var js = JSON.parse(s);
      if (js.status == "OK") {
        fnd = true;
        var lat = js.results[0].geometry.location.lat;
        var lng = js.results[0].geometry.location.lng;
        reslon = lng;
        reslat = lat;
      };
      if (fnd && (this.FOnGeoCoded != null)) {
        this.FOnGeoCoded(this,reslon,reslat);
      };
      return Result;
    };
    this.HandleAbort = function (Event) {
      var Result = false;
      Result = true;
      return Result;
    };
    this.TravelModeStr = function (ATravelMode) {
      var Result = "";
      Result = "DRIVING";
      var $tmp1 = ATravelMode;
      if ($tmp1 === $mod.TGoogleTravelMode.tmDriving) {
        Result = "DRIVING"}
       else if ($tmp1 === $mod.TGoogleTravelMode.tmWalking) {
        Result = "WALKING"}
       else if ($tmp1 === $mod.TGoogleTravelMode.tmBicycling) {
        Result = "BICYCLING"}
       else if ($tmp1 === $mod.TGoogleTravelMode.tmTransit) Result = "TRANSIT";
      return Result;
    };
    this.DoLoaded = function (Event) {
      var Result = false;
      this.BindEvents();
      Result = true;
      this.FOptions.SetMapStyle(this.FOptions.FMapStyle);
      if (this.FCursor !== 0) this.SetControlCursor(this.FCursor);
      if (this.FOnMapLoaded != null) this.FOnMapLoaded(this);
      return Result;
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FOptions = $mod.TGoogleMapsOptions.$create("Create$1",[this]);
      this.SetWidth(400);
      this.SetHeight(300);
    };
    this.SetCenter = function (Lat, Lon) {
      var map = null;
      map = this.GetMap();
      map.setCenter(new google.maps.LatLng(Lat, Lon));
    };
    this.GetCenter = function (Lat, Lon) {
      var Result = false;
      var sLon = "";
      var sLat = "";
      Result = false;
      Lon.set(-1);
      Lat.set(-1);
      sLon = map.getCenter().lng().toString();
      sLat = map.getCenter().lat().toString();
      if ((sLon !== "") && (sLat !== "")) {
        Lon.set(pas.SysUtils.StrToFloat(sLon));
        Lat.set(pas.SysUtils.StrToFloat(sLat));
        Result = true;
      };
      return Result;
    };
    this.GetBounds = function (NorthEastLat, NorthEastLon, SouthWestLat, SouthWestLon) {
      var Result = false;
      var neLon = "";
      var neLat = "";
      var swLon = "";
      var swLat = "";
      Result = false;
      NorthEastLon.set(-1);
      NorthEastLat.set(-1);
      SouthWestLon.set(-1);
      SouthWestLat.set(-1);
      neLon = map.getBounds().getNorthEast().lng().toString();
      neLat = map.getBounds().getNorthEast().lat().toString();
      swLon = map.getBounds().getSouthWest().lng().toString();
      swLat = map.getBounds().getSouthWest().lat().toString();
      if ((neLon !== "") && (neLat !== "") && (swLon !== "") && (swLat !== "")) {
        NorthEastLon.set(pas.SysUtils.StrToFloat(swLon));
        NorthEastLat.set(pas.SysUtils.StrToFloat(swLat));
        SouthWestLon.set(pas.SysUtils.StrToFloat(swLon));
        SouthWestLat.set(pas.SysUtils.StrToFloat(swLat));
        Result = true;
      };
      return Result;
    };
    this.SetDoubleClickZoom = function (AValue) {
      var map = null;
      map = this.GetMap();
      map.setOptions( {disableDoubleClickZoom:!AValue} );
    };
    this.SetDraggable = function (AValue) {
      var map = null;
      map = this.GetMap();
      map.setOptions( {draggable:AValue} );
    };
    this.SetScrollWheel = function (AValue) {
      var map = null;
      map = this.GetMap();
      map.setOptions( {scrollWheel:AValue} );
    };
    this.SetMapType = function (AMapType) {
      var map = null;
      var smt = "";
      map = this.GetMap();
      var $tmp1 = AMapType;
      if ($tmp1 === $mod.TGoogleMapType.mtDefault) {
        smt = "roadmap"}
       else if ($tmp1 === $mod.TGoogleMapType.mtSatellite) {
        smt = "satellite"}
       else if ($tmp1 === $mod.TGoogleMapType.mtHybrid) {
        smt = "hybrid"}
       else if ($tmp1 === $mod.TGoogleMapType.mtTerrain) smt = "terrain";
      map.setMapTypeId(smt);
    };
    this.SetZoom = function (Zoom) {
      var map = null;
      map = this.GetMap();
      if (map != null) {
        map.setZoom(Zoom);
      };
    };
    this.PanTo = function (Lat, Lon) {
      var map = null;
      map = this.GetMap();
      if (map != null) {
        map.panTo(new google.maps.LatLng(Lat, Lon));
      };
    };
    this.AddGPX = function (AGPX, AColor, AWidth, AOpacity) {
      var Points = null;
      var LatMax = 0.0;
      var LonMax = 0.0;
      var LatMin = 0.0;
      var LonMin = 0.0;
      Points = new Array();
      var parser = new DOMParser();
          var doc = parser.parseFromString(AGPX, 'text/xml');
          var trk = doc.getElementsByTagName("trk")[0];
          var name = trk.getElementsByTagName("name")[0];
          var trkseg = doc.getElementsByTagName("trkseg")[0];
          var i = trkseg.getElementsByTagName("trkpt").length;
          var trkpt;
          var j;
          var lat;
          var lon;
          var bounds = new google.maps.LatLngBounds ();
      
          for (j= 0; j < i; j++)
          {
            trkpt = trkseg.getElementsByTagName("trkpt")[j];
            lat = trkpt.getAttribute('lat');
            lon = trkpt.getAttribute('lon');
      
            var p = new google.maps.LatLng(lat, lon);
            Points.push(p);
            bounds.extend(p);
          }
          LatMax = bounds.getNorthEast().lat();
          LonMax = bounds.getNorthEast().lng();
      
          LatMin = bounds.getSouthWest().lat();
          LonMin = bounds.getSouthWest().lng();
      this.AddPolyLine(Points,AColor,AWidth,AOpacity);
      this.FitBounds(LatMin,LonMin,LatMax,LonMax);
    };
    this.AddKML = function (Url, ZoomToBounds) {
      var map = null;
      var clr = "";
      var ptr = null;
      ptr = rtl.createCallback(this,"HandleKMLClick");
      map = this.GetMap();
      var kml = new google.maps.KmlLayer(Url, {
            map: map,
            clickable: true,
            preserveViewport: !ZoomToBounds
          });
      
          kml.idx = this.FKMLs.length;
          kml.addListener('click', function() { ptr(kml); } );
          this.FKMLs.push(kml);
    };
    this.AddPolyLine = function (Points, AColor, AWidth, AOpacity) {
      var map = null;
      var clr = "";
      var ptr = null;
      ptr = rtl.createCallback(this,"HandlePolylineClick");
      map = this.GetMap();
      clr = pas["WEBLib.Graphics"].ColorToHTML(AColor);
      var poly = new google.maps.Polyline({
            map: map,
            path: Points,
              strokeColor: clr,
            strokeOpacity: AOpacity,
            strokeWeight: AWidth
          });
      
          poly.idx = this.FPolylines.length;
          poly.addListener('click', function() { ptr(poly); } );
          this.FPolylines.push(poly);
    };
    this.AddPolygon = function (Points, AFillColor, AStrokeColor, AWidth, AOpacity) {
      var map = null;
      var clrF = "";
      var clrS = "";
      var ptr = null;
      ptr = rtl.createCallback(this,"HandlePolygonClick");
      map = this.GetMap();
      clrF = pas["WEBLib.Graphics"].ColorToHTML(AFillColor);
      clrS = pas["WEBLib.Graphics"].ColorToHTML(AStrokeColor);
      var poly = new google.maps.Polygon({
            map: map,
            paths: Points,
            fillColor: clrF,
            fillOpacity: AOpacity,
              strokeColor: clrS,
            strokeOpacity: AOpacity,
            strokeWeight: AWidth
          });
      
          poly.idx = this.FPolygons.length;
          poly.addListener('click', function() { ptr(poly); } );
          this.FPolygons.push(poly);
    };
    this.AddCircle = function (Lat, Lon, Radius, AFillColor, AStrokeColor, AWidth, AOpacity) {
      var map = null;
      var clrF = "";
      var clrS = "";
      var ptr = null;
      ptr = rtl.createCallback(this,"HandleCircleClick");
      map = this.GetMap();
      clrF = pas["WEBLib.Graphics"].ColorToHTML(AFillColor);
      clrS = pas["WEBLib.Graphics"].ColorToHTML(AStrokeColor);
      var myLatLng = {lat: Lat, lng: Lon};
          var circle = new google.maps.Circle({
            map: map,
            center: myLatLng,
            radius: Radius,
            fillColor: clrF,
            fillOpacity: AOpacity,
              strokeColor: clrS,
            strokeOpacity: AOpacity,
            strokeWeight: AWidth
          });
      
          circle.idx = this.FCircles.length;
          circle.addListener('click', function() { ptr(circle); } );
          this.FCircles.push(circle);
    };
    this.AddRectangle = function (NorthEastLat, NorthEastLon, SouthWestLat, SouthWestLon, AFillColor, AStrokeColor, AWidth, AOpacity) {
      var map = null;
      var clrF = "";
      var clrS = "";
      var ptr = null;
      ptr = rtl.createCallback(this,"HandleRectangleClick");
      map = this.GetMap();
      clrF = pas["WEBLib.Graphics"].ColorToHTML(AFillColor);
      clrS = pas["WEBLib.Graphics"].ColorToHTML(AStrokeColor);
      var NELatLng = {lat: NorthEastLat, lng: NorthEastLon};
          var SWLatLng = {lat: SouthWestLat, lng: SouthWestLon};
          var rect = new google.maps.Rectangle({
            map: map,
            bounds: new google.maps.LatLngBounds(NELatLng, SWLatLng),
            fillColor: clrF,
            fillOpacity: AOpacity,
              strokeColor: clrS,
            strokeOpacity: AOpacity,
            strokeWeight: AWidth
          });
      
          rect.idx = this.FRectangles.length;
          rect.addListener('click', function() { ptr(rect); } );
          this.FRectangles.push(rect);
    };
    this.AddMarker = function (Lat, Lon, Title) {
      var map = null;
      var ptr = null;
      ptr = rtl.createCallback(this,"HandleMarkerClick");
      map = this.GetMap();
      var myLatLng = {lat: Lat, lng: Lon};
      var marker = new google.maps.Marker({
            position: myLatLng,
            map: map,
            title: Title
          });
      marker.idx = this.FMarkers.length;
      marker.addListener('click', function() { ptr(marker); } );
      this.FMarkers.push(marker);
    };
    this.AddMarker$1 = function (Lat, Lon, Color, Title) {
      var map = null;
      var clr = "";
      var ptr = null;
      ptr = rtl.createCallback(this,"HandleMarkerClick");
      var $tmp1 = Color;
      if ($tmp1 === $mod.TGoogleMarkerColor.mcDefault) {
        clr = ""}
       else if ($tmp1 === $mod.TGoogleMarkerColor.mcRed) {
        clr = "red-dot.png"}
       else if ($tmp1 === $mod.TGoogleMarkerColor.mcGreen) {
        clr = "green-dot.png"}
       else if ($tmp1 === $mod.TGoogleMarkerColor.mcYellow) {
        clr = "yellow-dot.png"}
       else if ($tmp1 === $mod.TGoogleMarkerColor.mcPurple) {
        clr = "purple-dot.png"}
       else if ($tmp1 === $mod.TGoogleMarkerColor.mcBlue) clr = "blue-dot.png";
      map = this.GetMap();
      var myLatLng = {lat: Lat, lng: Lon};
      
          var marker = new google.maps.Marker({
                position: myLatLng,
                map: map,
                title: Title
              });
      
          if (clr != "") {
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/' + clr);
          }
          marker.idx = this.FMarkers.length;
          marker.addListener('click', function() { ptr(marker); } );
      
          this.FMarkers.push(marker);
    };
    this.AddMarker$2 = function (Lat, Lon, Color, PinLetter, Title) {
      var map = null;
      var clr = "";
      var url = "";
      var ch = "";
      var ptr = null;
      ptr = rtl.createCallback(this,"HandleMarkerClick");
      clr = pas["WEBLib.Graphics"].ColorToHTML(Color);
      pas.System.Delete({get: function () {
          return clr;
        }, set: function (v) {
          clr = v;
        }},1,1);
      map = this.GetMap();
      var myLatLng = {lat: Lat, lng: Lon};
      
          url = "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld="+ PinLetter + "|" + clr;
      
          var pinImage = new google.maps.MarkerImage(url);
      
          var marker = new google.maps.Marker({
                position: myLatLng,
                map: map,
                title: Title,
                icon: pinImage
              });
          marker.idx = this.FMarkers.length;
          marker.addListener('click', function() { ptr(marker); } );
      
          this.FMarkers.push(marker);
    };
    this.AddMarker$3 = function (Lat, Lon, PinIcon, Title) {
      var map = null;
      var ptr = null;
      ptr = rtl.createCallback(this,"HandleMarkerClick");
      map = this.GetMap();
      var pinImage = new google.maps.MarkerImage(PinIcon);
          var myLatLng = {lat: Lat, lng: Lon};
          var marker = new google.maps.Marker({
                position: myLatLng,
                map: map,
                title: Title,
                icon: pinImage
              });
          marker.idx = this.FMarkers.length;
          marker.addListener('click', function() { ptr(marker); } );
      
          this.FMarkers.push(marker);
    };
    this.AddMarker$4 = function (Lat, Lon, Shape, Color, Title) {
      this.AddMarker$5(Lat,Lon,Shape,Color,0,1,Title,"");
    };
    this.AddMarker$5 = function (Lat, Lon, Shape, Color, BorderColor, Scale, CustomShape, Title) {
      var map = null;
      var clr = "";
      var bclr = "";
      var pth = "";
      var scl = "";
      var ptr = null;
      ptr = rtl.createCallback(this,"HandleMarkerClick");
      map = this.GetMap();
      clr = pas["WEBLib.Graphics"].ColorToHTML(Color);
      bclr = pas["WEBLib.Graphics"].ColorToHTML(BorderColor);
      scl = pas.SysUtils.StringReplace(pas.SysUtils.FloatToStr(Scale),",",".",{});
      var $tmp1 = Shape;
      if ($tmp1 === $mod.TGoogleMarkerShape.msPin) {
        pth = "M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z"}
       else if ($tmp1 === $mod.TGoogleMarkerShape.msPinDot) {
        pth = "M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z M -2,-30 a 2,2 0 1,1 4,0 2,2 0 1,1 -4,0"}
       else if ($tmp1 === $mod.TGoogleMarkerShape.msFlag) {
        pth = "M 0,0 -1,-2 V -43 H 1 V -2 z M 1,-40 H 30 V -20 H 1 z"}
       else if ($tmp1 === $mod.TGoogleMarkerShape.msBookmark) {
        pth = "M17 3h-10c-1.1 0-1.99.9-1.99 2l-.01 16 7-3 7 3v-16c0-1.1-.9-2-2-2z"}
       else if ($tmp1 === $mod.TGoogleMarkerShape.msFlagSmall) {
        pth = "M14.4 6l-.4-2h-9v17h2v-7h5.6l.4 2h7v-10z"}
       else if ($tmp1 === $mod.TGoogleMarkerShape.msHome) {
        pth = "M10 20v-6h4v6h5v-8h3l-10-9-10 9h3v8z"}
       else if ($tmp1 === $mod.TGoogleMarkerShape.msFavorite) {
        pth = "M12 21.35l-1.45-1.32c-5.15-4.67-8.55-7.75-8.55-11.53 0-3.08 2.42-5.5 5.5-5.5 1.74 0 3.41.81 4.5 2.09 1.09-1.28 2.76-2.09 4.5-2.09 3.08 0 5.5 2.42 5.5 5.5 0 3.78-3.4 6.86-8.55 11.54l-1.45 1.31z"}
       else if ($tmp1 === $mod.TGoogleMarkerShape.msStar) {
        pth = "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"}
       else if ($tmp1 === $mod.TGoogleMarkerShape.msCustom) pth = CustomShape;
      function pinSymbol(color, bcolor, scale) {
          return {
              path: pth,
              fillColor: color,
              fillOpacity: 1,
              strokeColor: bcolor,
              strokeWeight: 1,
              scale: parseFloat(scale),
              };
          }
          var myLatLng = {lat: Lat, lng: Lon};
          var marker = new google.maps.Marker({
                position: myLatLng,
                map: map,
                title: Title,
                icon: pinSymbol(clr, bclr, scl)
              });
          marker.idx = this.FMarkers.length;
          marker.addListener('click', function() { ptr(marker); } );
      
          this.FMarkers.push(marker);
    };
    this.SetMarkerTitle = function (AIndex, ATitle) {
      if (AIndex < this.FMarkers.length)
      {
        this.FMarkers[AIndex].setTitle(ATitle);
      };
    };
    this.SetMarkerLocation = function (AIndex, Lat, Lon) {
      if (AIndex < this.FMarkers.length)
      {
        this.FMarkers[AIndex].setPosition(new google.maps.LatLng(Lat, Lon));
      };
    };
    this.SetMarkerIcon = function (AIndex, Url) {
      if (AIndex < this.FMarkers.length)
      {
        this.FMarkers[AIndex].setIcon(Url);
      };
    };
    this.SetCircleCenter = function (AIndex, Lat, Lon) {
      if (AIndex < this.FCircles.length)
      {
        this.FCircles[AIndex].setCenter(new google.maps.LatLng(Lat, Lon));
      };
    };
    this.SetCircleRadius = function (AIndex, Radius) {
      if (AIndex < this.FCircles.length)
      {
        this.FCircles[AIndex].setRadius(Radius);
      };
    };
    this.SetCircleColors = function (AIndex, AFillColor, AStrokeColor) {
      var clrF = "";
      var clrS = "";
      clrF = pas["WEBLib.Graphics"].ColorToHTML(AFillColor);
      clrS = pas["WEBLib.Graphics"].ColorToHTML(AStrokeColor);
      if (AIndex < this.FCircles.length)
      {
        this.FCircles[AIndex].setOptions({ fillColor: clrF, strokeColor: clrS });
      };
    };
    this.SetRectangleLocation = function (AIndex, NorthEastLat, NorthEastLon, SouthWestLat, SouthWestLon) {
      if (AIndex < this.FRectangles.length)
      {
        var NELatLng = {lat: NorthEastLat, lng: NorthEastLon};
        var SWLatLng = {lat: SouthWestLat, lng: SouthWestLon};
        this.FRectangles[AIndex].setOptions({ bounds: new google.maps.LatLngBounds(NELatLng, SWLatLng) });
      };
    };
    this.SetRectangleColors = function (AIndex, AFillColor, AStrokeColor) {
      var clrF = "";
      var clrS = "";
      clrF = pas["WEBLib.Graphics"].ColorToHTML(AFillColor);
      clrS = pas["WEBLib.Graphics"].ColorToHTML(AStrokeColor);
      if (AIndex < this.FRectangles.length)
      {
        this.FRectangles[AIndex].setOptions({ fillColor: clrF, strokeColor: clrS });
      };
    };
    this.SetPolylineColor = function (AIndex, AColor) {
      var clr = "";
      clr = pas["WEBLib.Graphics"].ColorToHTML(AColor);
      if (AIndex < this.FPolylines.length)
      {
        this.FPolylines[AIndex].setOptions({ strokeColor: clr });
      };
    };
    this.SetPolylinePoints = function (AIndex, Points) {
      if (AIndex < this.FPolylines.length)
      {
        this.FPolylines[AIndex].setOptions({ path: Points });
      };
    };
    this.SetPolygonColors = function (AIndex, AFillColor, AStrokeColor) {
      var clrF = "";
      var clrS = "";
      clrF = pas["WEBLib.Graphics"].ColorToHTML(AFillColor);
      clrS = pas["WEBLib.Graphics"].ColorToHTML(AStrokeColor);
      if (AIndex < this.FPolygons.length)
      {
        this.FPolygons[AIndex].setOptions({ fillColor: clrF, strokeColor: clrS });
      };
    };
    this.SetPolygonPoints = function (AIndex, Points) {
      if (AIndex < this.FPolygons.length)
      {
        this.FPolygons[AIndex].setOptions({ path: Points });
      };
    };
    this.FitBounds = function (LatMin, LonMin, LatMax, LonMax) {
      var map = null;
      map = this.GetMap();
      var ne = new google.maps.LatLng(LatMax, LonMax);
      var sw = new google.maps.LatLng(LatMin, LonMin);
      var bounds = new google.maps.LatLngBounds(sw,ne);
      map.fitBounds(bounds);
    };
    this.ClearMarkers = function () {
      for (var i = 0; i < this.FMarkers.length; i++) {
            this.FMarkers[i].setMap(null);
            }
      this.FMarkers = [];
    };
    this.ClearKMLs = function () {
      for (var i = 0; i < this.FKMLs.length; i++) {
            this.FKMLs[i].setMap(null);
            }
      this.FKMLs = [];
    };
    this.ClearPolylines = function () {
      for (var i = 0; i < this.FPolylines.length; i++) {
            this.FPolylines[i].setMap(null);
            }
      this.FPolyLines = [];
    };
    this.ClearPolygons = function () {
      for (var i = 0; i < this.FPolygons.length; i++) {
            this.FPolygons[i].setMap(null);
            }
      this.FPolyLines = [];
    };
    this.ClearCircles = function () {
      for (var i = 0; i < this.FCircles.length; i++) {
            this.FCircles[i].setMap(null);
            }
      this.FMarkers = [];
    };
    this.ClearRectangles = function () {
      for (var i = 0; i < this.FRectangles.length; i++) {
            this.FRectangles[i].setMap(null);
            }
      this.FRectangles = [];
    };
    this.ShowDirections = function (Source, Destination, ATravelMode, WayPoints, OptimizeWayPoints, AvoidHighways, AvoidTolls) {
      var dirsvc = null;
      var dirdispl = null;
      var map = null;
      var tm = "";
      var wp = null;
      var I = 0;
      if (!(this.FDirectionsDisplay != null)) this.BindEvents();
      dirsvc = this.FDirectionsService;
      dirdispl = this.FDirectionsDisplay;
      map = this.GetMap();
      tm = this.TravelModeStr(ATravelMode);
      wp = new Array();
      if (WayPoints !== null) {
        for (var $l1 = 0, $end2 = WayPoints.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          wp.push(pas.JS.New(["location",WayPoints.Get(I)]));
        };
      };
      dirdispl.setMap(map);
      
          dirsvc.route({
                origin: Source,
                destination: Destination,
                waypoints: wp,
                optimizeWaypoints: OptimizeWayPoints,
                avoidHighways: AvoidHighways,
                avoidTolls: AvoidTolls,
                travelMode: tm
              }, function(response, status) {
                if (status === 'OK') {
                  dirdispl.setDirections(response);
                } else {
                  window.alert('Directions request failed due to ' + status);
                }
              });
    };
    this.ShowDirections$1 = function (SourceLon, SourceLat, DestLon, DestLat, ATravelMode, WayPoints, OptimizeWayPoints, AvoidHighways, AvoidTolls) {
      var dirsvc = null;
      var dirdispl = null;
      var map = null;
      var tm = "";
      var wp = null;
      var I = 0;
      if (!(this.FDirectionsDisplay != null)) this.BindEvents();
      dirsvc = this.FDirectionsService;
      dirdispl = this.FDirectionsDisplay;
      map = this.GetMap();
      tm = this.TravelModeStr(ATravelMode);
      wp = new Array();
      if (WayPoints !== null) {
        for (var $l1 = 0, $end2 = WayPoints.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          wp.push(pas.JS.New(["location",WayPoints.Get(I)]));
        };
      };
      var sourcelatlon = new google.maps.LatLng(SourceLat, SourceLon);
          var destlatlon = new google.maps.LatLng(DestLat, DestLon);
      
          dirdispl.setMap(map);
          dirsvc.route({
                origin: sourcelatlon,
                destination: destlatlon,
                waypoints: wp,
                optimizeWaypoints: OptimizeWayPoints,
                avoidHighways: AvoidHighways,
                avoidTolls: AvoidTolls,
                travelMode: tm
              }, function(response, status) {
                if (status === 'OK') {
                  dirdispl.setDirections(response);
                } else {
                  window.alert('Directions request failed due to ' + status);
                }
              });
    };
    this.ShowStreetView = function (Lat, Lon, Heading, Zoom, Pitch) {
      var map = null;
      var mapid = "";
      map = this.GetMap();
      mapid = this.GetID();
      var LatLng = {lat: Lat, lng: Lon};
      var panorama = new google.maps.StreetViewPanorama(
          document.getElementById(mapid), {
            position: LatLng,
            pov: {
              heading: Heading,
              zoom: Zoom,
              pitch: Pitch
            }
          });
      map.setStreetView(panorama);
    };
    this.HideStreetView = function () {
      var map = null;
      map = this.GetMap();
      map.streetView.setVisible(false);
    };
    this.RemoveDirections = function () {
      var dirdispl = null;
      if (!(this.FDirectionsDisplay != null)) this.BindEvents();
      dirdispl = this.FDirectionsDisplay;
      dirdispl.setMap(null);
    };
    this.RemoveMarker = function (AIndex) {
      if (AIndex < this.FMarkers.length)
      {
        this.FMarkers[AIndex].setMap(null);
        this.FMarkers.splice(AIndex, 1);
      };
    };
    this.RemovePolygon = function (AIndex) {
      if (AIndex < this.FPolygons.length)
      {
        this.FPolygons[AIndex].setMap(null);
        this.FPolygons.splice(AIndex, 1);
      };
    };
    this.RemovePolyline = function (AIndex) {
      if (AIndex < this.FPolylines.length)
      {
        this.FPolylines[AIndex].setMap(null);
        this.FPolylines.splice(AIndex, 1);
      };
    };
    this.RemoveCircle = function (AIndex) {
      if (AIndex < this.FPolygons.length)
      {
        this.FCircles[AIndex].setMap(null);
        this.FCircles.splice(AIndex, 1);
      };
    };
    this.RemoveRectangle = function (AIndex) {
      if (AIndex < this.FPolygons.length)
      {
        this.FRectangles[AIndex].setMap(null);
        this.FRectangles.splice(AIndex, 1);
      };
    };
    this.GeoCode = function (Address) {
      var FURL = "";
      this.FReq = new XMLHttpRequest();
      this.FReq.addEventListener("load",rtl.createCallback(this,"HandleResponse"));
      this.FReq.addEventListener("abort",rtl.createCallback(this,"HandleAbort"));
      FURL = "https:\/\/maps.googleapis.com\/maps\/api\/geocode\/json?address=" + encodeURIComponent(Address) + "&key=" + this.FAPIKey;
      this.FReq.open("GET",FURL);
      this.FReq.send();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("Options",0,$mod.$rtti["TGoogleMapsOptions"],"FOptions","FOptions");
    $r.addProperty("APIKey",2,rtl.string,"FAPIKey","SetAPIKey");
    $r.addProperty("OnGeoCoded",0,$mod.$rtti["TMapClickEvent"],"FOnGeoCoded","FOnGeoCoded");
    $r.addProperty("OnMapClick",0,$mod.$rtti["TMapClickEvent"],"FOnMapClick","FOnMapClick");
    $r.addProperty("OnMapDblClick",0,$mod.$rtti["TMapClickEvent"],"FOnMapDblClick","FOnMapDblClick");
    $r.addProperty("OnMapIdle",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMapIdle","FOnMapIdle");
    $r.addProperty("OnMapPan",0,$mod.$rtti["TMapClickEvent"],"FOnMapPan","FOnMapPan");
    $r.addProperty("OnMapLoaded",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMapLoaded","FOnMapLoaded");
    $r.addProperty("OnMapZoom",0,$mod.$rtti["TMapZoomEvent"],"FOnMapZoom","FOnMapZoom");
    $r.addProperty("OnMarkerClick",0,$mod.$rtti["TMapMarkerClickEvent"],"FOnMarkerClick","FOnMarkerClick");
    $r.addProperty("OnPolygonClick",0,$mod.$rtti["TMapPolygonClickEvent"],"FOnPolygonClick","FOnPolygonClick");
    $r.addProperty("OnPolylineClick",0,$mod.$rtti["TMapPolylineClickEvent"],"FOnPolylineClick","FOnPolylineClick");
    $r.addProperty("OnCircleClick",0,$mod.$rtti["TMapCircleClickEvent"],"FOnCircleClick","FOnCircleClick");
    $r.addProperty("OnRectangleClick",0,$mod.$rtti["TMapRectangleClickEvent"],"FOnRectangleClick","FOnRectangleClick");
    $r.addProperty("OnKMLClick",0,$mod.$rtti["TMapKMLClickEvent"],"FOnKMLClick","FOnKMLClick");
  });
  rtl.createClass($mod,"TWebGoogleMaps",$mod.TGoogleMaps,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.TDriveView = {"0": "dvList", dvList: 0, "1": "dvGrid", dvGrid: 1};
  $mod.$rtti.$Enum("TDriveView",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TDriveView});
  rtl.createClass($mod,"TGoogleDrive",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FView = 0;
      this.FFolderID = "";
    };
    this.SetFolderID = function (Value) {
      if (this.FFolderID !== Value) {
        this.FFolderID = Value;
        this.UpdateElement();
      };
    };
    this.SetView = function (Value) {
      if (this.FView !== Value) {
        this.FView = Value;
        this.UpdateElement();
      };
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("IFRAME");
      Result.setAttribute("frameborder","0");
      return Result;
    };
    this.UpdateElement = function () {
      var vs = "";
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      var $tmp1 = this.FView;
      if ($tmp1 === $mod.TDriveView.dvList) {
        vs = "list"}
       else if ($tmp1 === $mod.TDriveView.dvGrid) vs = "grid";
      if (this.GetElementHandle() != null) {
        if (this.FFolderID !== "") {
          this.GetElementHandle().setAttribute("src","https:\/\/drive.google.com\/embeddedfolderview?id=" + this.FFolderID + "&embedded=true#" + vs);
          this.GetElementHandle().style.setProperty("border","0");
        } else if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) this.RenderDesigning(this.$classname,this.GetContainer(),this,true);
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.SetWidth(400);
      this.SetHeight(300);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("FolderID",2,rtl.string,"FFolderID","SetFolderID");
    $r.addProperty("View",2,$mod.$rtti["TDriveView"],"FView","SetView");
  });
  rtl.createClass($mod,"TWebGoogleDrive",$mod.TGoogleDrive,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTwitterFeed",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FUpdatedFeed = false;
      this.FFeed = "";
      this.FFeedLinkText = "";
    };
    this.SetFeed = function (Value) {
      this.FFeed = Value;
      this.FUpdatedFeed = false;
      this.UpdateElement();
    };
    this.SetFeedLinkText = function (Value) {
      this.FFeedLinkText = Value;
      this.UpdateElement();
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      return Result;
    };
    this.UpdateElement = function () {
      var srcurl = "";
      var script = null;
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if ((this.GetElementHandle() != null) && !this.IsUpdating()) {
        srcurl = "https:\/\/platform.twitter.com\/widgets.js";
        script = document.getElementById($impl.TWITTERSCRIPTID);
        if (!(script != null)) {
          script = document.createElement("script");
          script.setAttribute("id",$impl.TWITTERSCRIPTID);
          script.async = true;
          script.setAttribute("type","text\/javascript");
          script.setAttribute("charset","utf-8");
          script.setAttribute("src",srcurl);
          document.head.appendChild(script);
        };
      };
      if ((this.GetElementHandle() != null) && !this.IsUpdating() && !this.FUpdatedFeed) {
        if (this.FFeed !== "") {
          srcurl = '<a class="twitter-timeline" href="https:\/\/twitter.com\/' + this.FFeed + '" data-chrome="nofooter noborders">' + this.FFeedLinkText + "<\/a>";
          this.SetBorderStyle(pas["WEBLib.Controls"].TBorderStyle.bsNone);
          this.GetElementHandle().innerHTML = srcurl;
          if (typeof twttr !== 'undefined') {
          twttr.widgets.load() };
        } else {
          if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) this.RenderDesigning(this.$classname,this.GetContainer(),this,true);
        };
        this.FUpdatedFeed = true;
      };
      if (this.GetElementHandle() != null) this.GetElementHandle().style.setProperty("overflow-y","auto");
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.SetWidth(400);
      this.SetHeight(300);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Feed",2,rtl.string,"FFeed","SetFeed");
    $r.addProperty("FeedLinkText",2,rtl.string,"FFeedLinkText","SetFeedLinkText");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
  });
  rtl.createClass($mod,"TWebTwitterFeed",$mod.TTwitterFeed,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$MethodVar("TFilesDroppedEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AFileList",pas.Classes.$rtti["TStringList"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TFileAsTextEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AFileIndex",rtl.longint],["AText",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TFileAsBase64Event",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AFileIndex",rtl.longint],["ABase64",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TFileAsDataURLEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AFileIndex",rtl.longint],["AURL",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TFileAsArrayBufferEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AFileIndex",rtl.longint],["ABuffer",pas.JS.$rtti["TJSArrayBuffer"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TFileUploadEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AFileIndex",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TFileUploadErrorEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AFileIndex",rtl.longint],["AError",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TFileUploadProgressEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AFileIndex",rtl.longint],["APosition",rtl.longint],["ATotalSize",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TFileGetAsBase64",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ABase64",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TFileGetAsText",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AText",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TFileGetAsURL",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AURL",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TFileGetAsArrayBuffer",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ABuffer",pas.JS.$rtti["TJSArrayBuffer"]]]), methodkind: 0});
  $mod.$rtti.$RefToProcVar("TGetAsStringProc",{procsig: rtl.newTIProcSig([["AValue",rtl.string]])});
  $mod.$rtti.$RefToProcVar("TGetAsArrayBufferProc",{procsig: rtl.newTIProcSig([["AValue",pas.JS.$rtti["TJSArrayBuffer"]]])});
  rtl.createClass($mod,"TFile",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FModified = 0.0;
      this.FName = "";
      this.FMimeType = "";
      this.FSize = 0;
      this.FFileObject = null;
      this.FTag = 0;
      this.FObject = null;
      this.FOnGetFileAsBase64 = null;
      this.FOnGetFileAsArrayBuffer = null;
      this.FOnGetFileAsText = null;
      this.FOnGetFileAsURL = null;
      this.FGetAsString = null;
      this.FGetAsArrayBuffer = null;
    };
    this.$final = function () {
      this.FFileObject = undefined;
      this.FObject = undefined;
      this.FOnGetFileAsBase64 = undefined;
      this.FOnGetFileAsArrayBuffer = undefined;
      this.FOnGetFileAsText = undefined;
      this.FOnGetFileAsURL = undefined;
      this.FGetAsString = undefined;
      this.FGetAsArrayBuffer = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.HandleFileLoadAsText = function (Event) {
      var Result = false;
      var s = "";
      var ctrl = null;
      Result = true;
      s = event.target.result;
      if (this.FGetAsString != null) this.FGetAsString(s);
      this.FGetAsString = null;
      if (this.FOnGetFileAsText != null) this.FOnGetFileAsText(this,s);
      ctrl = this.GetControl();
      if (ctrl != null) {
        if ($mod.TFilePicker.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFilePicker).FOnFileAsText != null)) rtl.as(ctrl,$mod.TFilePicker).FOnFileAsText(ctrl,this.GetIndex(),s);
        if ($mod.TFileUpload.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFileUpload).FOnFileAsText != null)) rtl.as(ctrl,$mod.TFileUpload).FOnFileAsText(ctrl,this.GetIndex(),s);
      };
      return Result;
    };
    this.HandleFileLoadAsBase64 = function (Event) {
      var Result = false;
      var s = "";
      var ctrl = null;
      Result = true;
      function _arrayBufferToBase64( buffer ) {
      var binary = '';
      var bytes = new Uint8Array( buffer );
      var len = bytes.byteLength;
      for (var i = 0; i < len; i++) {
          binary += String.fromCharCode( bytes[ i ] );
      }
      return window.btoa( binary );
      }
      s = _arrayBufferToBase64(event.target.result);
      if (this.FGetAsString != null) this.FGetAsString(s);
      this.FGetAsString = null;
      if (this.FOnGetFileAsBase64 != null) this.FOnGetFileAsBase64(this,s);
      ctrl = this.GetControl();
      if (ctrl != null) {
        if ($mod.TFilePicker.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFilePicker).FOnFileAsBase64 != null)) rtl.as(ctrl,$mod.TFilePicker).FOnFileAsBase64(ctrl,this.GetIndex(),s);
        if ($mod.TFileUpload.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFileUpload).FOnFileAsBase64 != null)) rtl.as(ctrl,$mod.TFileUpload).FOnFileAsBase64(ctrl,this.GetIndex(),s);
      };
      return Result;
    };
    this.HandleFileLoadAsArrayBuffer = function (Event) {
      var Result = false;
      var ja = null;
      var ctrl = null;
      Result = true;
      ja = event.target.result;
      if (this.FGetAsArrayBuffer != null) this.FGetAsArrayBuffer(ja);
      this.FGetAsArrayBuffer = null;
      if (this.FOnGetFileAsArrayBuffer != null) this.FOnGetFileAsArrayBuffer(this,ja);
      ctrl = this.GetControl();
      if (ctrl != null) {
        if ($mod.TFilePicker.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFilePicker).FOnGetFileAsArrayBuffer != null)) rtl.as(ctrl,$mod.TFilePicker).FOnGetFileAsArrayBuffer(ctrl,this.GetIndex(),ja);
        if ($mod.TFileUpload.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFileUpload).FOnGetFileAsArrayBuffer != null)) rtl.as(ctrl,$mod.TFileUpload).FOnGetFileAsArrayBuffer(ctrl,this.GetIndex(),ja);
      };
      return Result;
    };
    this.HandleFileLoadAsDataURL = function (Event) {
      var Result = false;
      var s = "";
      var ctrl = null;
      Result = true;
      s = event.target.result;
      if (this.FGetAsString != null) this.FGetAsString(s);
      this.FGetAsString = null;
      if (this.FOnGetFileAsURL != null) this.FOnGetFileAsURL(this,s);
      ctrl = this.GetControl();
      if (ctrl != null) {
        if ($mod.TFilePicker.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFilePicker).FOnFileAsDataURL != null)) rtl.as(ctrl,$mod.TFilePicker).FOnFileAsDataURL(ctrl,this.GetIndex(),s);
        if ($mod.TFileUpload.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFileUpload).FOnFileAsDataURL != null)) rtl.as(ctrl,$mod.TFileUpload).FOnFileAsDataURL(ctrl,this.GetIndex(),s);
      };
      return Result;
    };
    this.HandleFileUploadProgress = function (Event) {
      var Result = false;
      var Lloaded = 0;
      var Ltotal = 0;
      var ctrl = null;
      Lloaded = 0;
      Ltotal = 0;
      if (Event.lengthComputable) {
         Lloaded = Event.loaded;
         Ltotal = Event.total;
         //console.log(Event.loaded + " bytes of " + Event.total); } else { console.log('no calc');
      };
      ctrl = this.GetControl();
      if (ctrl != null) {
        if ($mod.TFilePicker.isPrototypeOf(ctrl) && (rtl.as(this.GetControl(),$mod.TFilePicker).FOnUploadFileProgress != null)) rtl.as(ctrl,$mod.TFilePicker).FOnUploadFileProgress(ctrl,this.GetIndex(),Lloaded,Ltotal);
        if ($mod.TFileUpload.isPrototypeOf(ctrl) && (rtl.as(this.GetControl(),$mod.TFileUpload).FOnUploadFileProgress != null)) rtl.as(ctrl,$mod.TFileUpload).FOnUploadFileProgress(ctrl,this.GetIndex(),Lloaded,Ltotal);
      };
      Result = true;
      return Result;
    };
    this.HandleFileUploadComplete = function (Event) {
      var Result = false;
      var ctrl = null;
      Result = true;
      ctrl = this.GetControl();
      if (ctrl != null) {
        if ($mod.TFilePicker.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFilePicker).FOnUploadFileComplete != null)) rtl.as(ctrl,$mod.TFilePicker).FOnUploadFileComplete(ctrl,this.GetIndex());
        if ($mod.TFileUpload.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFileUpload).FOnUploadFileComplete != null)) rtl.as(ctrl,$mod.TFileUpload).FOnUploadFileComplete(ctrl,this.GetIndex());
      };
      return Result;
    };
    this.HandleFileUploadError = function (Event) {
      var Result = false;
      var err = "";
      var ctrl = null;
      err = Event.target.status;
      Result = true;
      ctrl = this.GetControl();
      if (ctrl != null) {
        if ($mod.TFilePicker.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFilePicker).FOnUploadFileError != null)) rtl.as(ctrl,$mod.TFilePicker).FOnUploadFileError(ctrl,this.GetIndex(),err);
        if ($mod.TFileUpload.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFileUpload).FOnUploadFileError != null)) rtl.as(ctrl,$mod.TFileUpload).FOnUploadFileError(ctrl,this.GetIndex(),err);
      };
      return Result;
    };
    this.HandleFileUploadAbort = function (Event) {
      var Result = false;
      var ctrl = null;
      Result = true;
      ctrl = this.GetControl();
      if (ctrl != null) {
        if ($mod.TFilePicker.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFilePicker).FOnUploadFileAbort != null)) rtl.as(ctrl,$mod.TFilePicker).FOnUploadFileAbort(ctrl,this.GetIndex());
        if ($mod.TFileUpload.isPrototypeOf(ctrl) && (rtl.as(ctrl,$mod.TFileUpload).FOnUploadFileAbort != null)) rtl.as(ctrl,$mod.TFileUpload).FOnUploadFileAbort(ctrl,this.GetIndex());
      };
      return Result;
    };
    this.GetControl = function () {
      var Result = null;
      Result = null;
      if ((this.FCollection != null) && (rtl.as(this.FCollection,$mod.TFiles).Owner$1() != null)) {
        if (pas["WEBLib.Controls"].TCustomControl.isPrototypeOf(rtl.as(this.FCollection,$mod.TFiles).Owner$1())) Result = rtl.as(rtl.as(this.FCollection,$mod.TFiles).Owner$1(),pas["WEBLib.Controls"].TCustomControl);
      };
      return Result;
    };
    this.GetFileAsText = function () {
      var ptr = null;
      var f = null;
      ptr = rtl.createCallback(this,"HandleFileLoadAsText");
      f = this.FFileObject;
      var reader = new FileReader();
      reader.addEventListener('load',ptr);
      reader.readAsText(f);
    };
    this.GetFileAsText$1 = function (GetAsString) {
      this.FGetAsString = GetAsString;
      this.GetFileAsText();
    };
    this.GetFileAsBase64 = function () {
      var ptr = null;
      var f = null;
      ptr = rtl.createCallback(this,"HandleFileLoadAsBase64");
      f = this.FFileObject;
      var reader = new FileReader();
      reader.addEventListener('load',ptr);
      reader.readAsArrayBuffer(f);
    };
    this.GetFileAsBase64$1 = function (GetAsString) {
      this.FGetAsString = GetAsString;
      this.GetFileAsBase64();
    };
    this.GetFileAsArrayBuffer = function () {
      var ptr = null;
      var f = null;
      ptr = rtl.createCallback(this,"HandleFileLoadAsArrayBuffer");
      f = this.FFileObject;
      var reader = new FileReader();
      reader.addEventListener('load',ptr);
      reader.readAsArrayBuffer(f);
    };
    this.GetFileAsArrayBuffer$1 = function (GetAsArrayBuffer) {
      this.FGetAsArrayBuffer = GetAsArrayBuffer;
      this.GetFileAsArrayBuffer();
    };
    this.GetFileAsDataURL = function () {
      var ptr = null;
      var f = null;
      ptr = rtl.createCallback(this,"HandleFileLoadAsDataURL");
      f = this.FFileObject;
      var reader = new FileReader();
      reader.addEventListener('load',ptr);
      reader.readAsDataURL(f);
    };
    this.GetFileAsDataURL$1 = function (GetAsString) {
      this.FGetAsString = GetAsString;
      this.GetFileAsDataURL();
    };
    this.Upload = function (AAction) {
      var f = null;
      var fd = null;
      var req = null;
      var ptrProgress = null;
      var ptrComplete = null;
      var ptrError = null;
      var ptrAbort = null;
      f = this.FFileObject;
      fd = new FormData();
      fd.append("file1",f);
      req = new XMLHttpRequest();
      ptrProgress = rtl.createCallback(this,"HandleFileUploadProgress");
      ptrComplete = rtl.createCallback(this,"HandleFileUploadComplete");
      ptrError = rtl.createCallback(this,"HandleFileUploadError");
      ptrAbort = rtl.createCallback(this,"HandleFileUploadAbort");
      req.addEventListener("load",ptrComplete);
      req.addEventListener("error",ptrError);
      req.addEventListener("abort",ptrAbort);
      req.upload.addEventListener("progress",ptrProgress);
      req.open("POST",AAction,true);
      req.send(fd);
    };
  });
  $mod.$rtti.$Class("TFilePicker");
  rtl.createClass($mod,"TFiles",pas.Classes.TCollection,function () {
    this.$init = function () {
      pas.Classes.TCollection.$init.call(this);
      this.FOwner = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      pas.Classes.TCollection.$final.call(this);
    };
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItem$1 = function (Index, Value) {
      this.SetItem(Index,Value);
    };
    this.Create$2 = function (AOwner) {
      pas.Classes.TCollection.Create$1.call(this,$mod.TFile);
      this.FOwner = AOwner;
      return this;
    };
    this.Owner$1 = function () {
      var Result = null;
      Result = this.FOwner;
      return Result;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
    this.Insert$1 = function (Index) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,Index);
      return Result;
    };
    this.Clear$1 = function () {
      var fc = 0;
      fc = this.GetCount();
      pas.Classes.TCollection.Clear.call(this);
      if (fc > 0) {
        if ($mod.TFilePicker.isPrototypeOf(this.FOwner)) rtl.as(this.FOwner,$mod.TFilePicker).Clear();
        if ($mod.TFileUpload.isPrototypeOf(this.FOwner)) rtl.as(this.FOwner,$mod.TFileUpload).Clear();
      };
    };
  });
  rtl.createClass($mod,"TFileUpload",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FAccept = "";
      this.FCreateRef = "";
      this.FEventInit = false;
      this.FFiles = null;
      this.FFileList = null;
      this.FOnDroppedFiles = null;
      this.FMultiFile = false;
      this.FShowFiles = false;
      this.FDragCaption = "";
      this.FOnGetFileAsArrayBuffer = null;
      this.FOnFileAsText = null;
      this.FOnFileAsBase64 = null;
      this.FOnFileAsDataURL = null;
      this.FOnUploadFileAbort = null;
      this.FOnUploadFileComplete = null;
      this.FOnUploadFileProgress = null;
      this.FOnUploadFileError = null;
    };
    this.$final = function () {
      this.FFiles = undefined;
      this.FFileList = undefined;
      this.FOnDroppedFiles = undefined;
      this.FOnGetFileAsArrayBuffer = undefined;
      this.FOnFileAsText = undefined;
      this.FOnFileAsBase64 = undefined;
      this.FOnFileAsDataURL = undefined;
      this.FOnUploadFileAbort = undefined;
      this.FOnUploadFileComplete = undefined;
      this.FOnUploadFileProgress = undefined;
      this.FOnUploadFileError = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetDragCaption = function (Value) {
      this.FDragCaption = Value;
      this.UpdateElement();
    };
    this.SetAccept = function (Value) {
      if (this.FAccept !== Value) {
        this.FAccept = Value;
        this.UpdateElement();
      };
    };
    this.SetCaption = function (AValue) {
      if (this.FCaption !== AValue) {
        pas["WEBLib.Controls"].TCustomControl.SetCaption.call(this,AValue);
        this.UpdateElement();
      };
    };
    this.HandleFiles = function (files) {
      var Result = "";
      var i = 0;
      var sz = 0;
      var afile = null;
      var szFiles = "";
      var m = "";
      var d = null;
      szFiles = "";
      while (this.FFiles.GetCount() > 0) this.FFiles.Delete(0);
      while (this.FFileList.GetCount() > 0) this.FFileList.Delete(0);
      for (var $l1 = 0, $end2 = files.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        afile = files.item(i);
        d = new Date(afile.lastModified);
        m = afile.type;
        sz = afile.size;
        var $with3 = this.FFiles.Add$1();
        $with3.FFileObject = afile;
        $with3.FName = afile.name;
        $with3.FMimeType = m;
        $with3.FSize = sz;
        $with3.FModified = pas.SysUtils.EncodeDate(d.getYear() + 1900,d.getMonth() + 1,d.getDate()) + pas.SysUtils.EncodeTime(d.getHours(),d.getMinutes(),d.getSeconds(),d.getMilliseconds());
        if (this.FFileList != null) this.FFileList.Add(afile.name);
        if (this.FShowFiles) {
          if (i > 0) szFiles = szFiles + "<br>";
          szFiles = szFiles + afile.name;
        };
        if (!this.FMultiFile) break;
      };
      Result = szFiles;
      if (this.FOnDroppedFiles != null) this.FOnDroppedFiles(this,this.FFileList);
      return Result;
    };
    this.DoHandleChange = function (e) {
      var Result = false;
      var el = null;
      var curfiles = null;
      Result = true;
      if (this.GetElementHandle() != null) {
        el = e.target;
        if (el != null) {
          curfiles = el.files;
          this.HandleFiles(curfiles);
        };
      };
      return Result;
    };
    this.HandleDroppedFiles = function (Event) {
      var Result = false;
      var droppedfiles = null;
      var span = null;
      var szFiles = "";
      Result = true;
      Event.preventDefault();
      Event.stopPropagation();
      droppedfiles = Event.dataTransfer.files;
      szFiles = this.HandleFiles(droppedfiles);
      if (this.FShowFiles) {
        span = document.getElementById(this.GetID() + "fileslist");
        span.innerHTML = szFiles;
      };
      this.GetContainer().setAttribute("class","box has-advanced-upload");
      return Result;
    };
    this.HandleDragOver = function (Event) {
      var Result = false;
      Result = true;
      Event.preventDefault();
      Event.stopPropagation();
      this.GetContainer().setAttribute("class","box has-advanced-upload is-dragover");
      return Result;
    };
    this.HandleDragEnd = function (Event) {
      var Result = false;
      Result = true;
      Event.preventDefault();
      Event.stopPropagation();
      this.GetContainer().setAttribute("class","box has-advanced-upload");
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      this.FCreateRef = this.FName;
      Result = document.createElement("FORM");
      Result.setAttribute("method","post");
      Result.setAttribute("class","box");
      Result.setAttribute("enctype","multipart\/form-data");
      Result.innerHTML = '<div class="box__input" style="text-align: center;">' + '<svg class="box__icon" xmlns="http:\/\/www.w3.org\/2000\/svg" width="50" height="43" viewBox="0 0 50 43">' + '<path d="M48.4 26.5c-.9 0-1.7.7-1.7 1.7v11.6h-43.3v-11.6c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v13.2c0 .9.7 1.7 1.7 1.7h46.7c.9 0 1.7-.7 1.7-1.7v-13.2c0-1-.7-1.7-1.7-1.7zm-24.5 6.1c.3.3.8.5 1.2.5.4 0 .9-.2 1.2-.5l10-11.6c.7-.7.7-1.7 0-2.4s-1.7-.7-2.4 0l-7.1 8.3v-25.3c0-.9-.7-1.7-1.7-1.7s-1.7.7-1.7 1.7v25.3l-7.1-8.3c-.7-.7-1.7-.7-2.4 0s-.7 1.7 0 2.4l10 11.6z"\/><\/svg>' + '<input class="box__file" type="file" name="files[]" id="FP' + this.FName + '" data-multiple-caption="{count} files selected" multiple\/>' + '<label for="FP' + this.FName + '"><strong id="' + this.FName + 'lbl">' + this.FCaption + '<\/strong>&nbsp;<span class="box__dragndrop" id="' + this.FName + 'drag">' + this.FDragCaption + "<\/span>.<\/label>" + '<button class="box__button" type="submit">Upload<\/button>' + '<br><span style="display:inline-block;" id="' + this.FName + 'fileslist"><\/span>' + '<\/div><div class="box__uploading">Uploading&hellip;<\/div>';
      Result.addEventListener("drop",rtl.createCallback(this,"HandleDroppedFiles"));
      Result.addEventListener("dragenter",rtl.createCallback(this,"HandleDragOver"));
      Result.addEventListener("dragover",rtl.createCallback(this,"HandleDragOver"));
      Result.addEventListener("dragend",rtl.createCallback(this,"HandleDragEnd"));
      Result.addEventListener("dragleave",rtl.createCallback(this,"HandleDragEnd"));
      if ($impl.isAdvancedUpload()) Result.classList.add("has-advanced-upload");
      return Result;
    };
    this.UpdateElement = function () {
      var el = null;
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if (this.GetElementHandle() != null) {
        el = document.getElementById("FP" + this.FCreateRef);
        if (el != null) {
          if (!this.FEventInit) {
            this.FEventInit = true;
            el.addEventListener("change",rtl.createCallback(this,"DoHandleChange"));
          };
          if (this.FMultiFile) {
            el.setAttribute("multiple","")}
           else el.removeAttribute("multiple");
          if (this.FAccept !== "") {
            el.setAttribute("accept",this.FAccept)}
           else el.removeAttribute("accept");
        };
        el = document.getElementById(this.FCreateRef + "lbl");
        if (el != null) {
          el.innerHTML = this.FCaption;
        };
        el = document.getElementById(this.FCreateRef + "drag");
        if (el != null) {
          el.innerHTML = this.FDragCaption;
        };
      };
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      this.SetCaption("Choose a file");
      this.FDragCaption = "or drag it here";
      this.FFiles = $mod.TFiles.$create("Create$2",[this]);
      this.FFileList = pas.Classes.TStringList.$create("Create$1");
      this.AddControlStyle("  \t.box" + "\t\t\t{" + "\t\t\t\tfont-size: 1.25rem; \/* 20 *\/" + "\t\t\t\tbackground-color: #c8dadf;" + " \t\t\tposition: relative;" + "\t    \tpadding: 2px 2px;" + "\t\t}" + "\t\t.box.has-advanced-upload" + "\t\t{" + "\t\t\toutline: 2px dashed #92b0b3;" + "\t\t\toutline-offset: -10px;" + "\t\t\t-webkit-transition: outline-offset .15s ease-in-out, background-color .15s linear;" + "\t\t\ttransition: outline-offset .15s ease-in-out, background-color .15s linear;" + "\t\t}" + "\t\t.box.is-dragover" + "\t\t{" + "\t\t\toutline-offset: -20px;" + "\t\t\toutline-color: #c8dadf;" + "\t\t\tbackground-color: #fff;" + "\t\t}" + "\t\t\t.box__dragndrop," + "\t\t\t.box__icon" + "\t\t\t{" + "\t\t\t\tdisplay: none;" + "\t\t\t}" + "\t\t\t.box.has-advanced-upload .box__dragndrop" + "\t\t\t{" + "\t\t\t\tdisplay: inline;" + "\t\t\t}" + "\t\t\t.box.has-advanced-upload .box__icon" + "\t\t\t{" + "\t\t\t\twidth: 100%;" + "\t\t\t\theight: 80px;" + "\t\t\t\tfill: #92b0b3;" + "\t\t\t\tdisplay: block;" + "\t\t\t\tmargin-bottom: 40px;" + "\t\t\t}" + "\t\t\t.box.is-uploading .box__input," + "\t\t\t.box.is-success .box__input," + "\t\t\t.box.is-error .box__input" + "\t\t\t{" + "\t\t\t\tvisibility: hidden;" + "\t\t\t}" + "\t\t\t.box__uploading," + "\t\t\t.box__success," + "\t\t\t.box__error" + "\t\t\t{" + "\t\t\tdisplay: none;" + "\t\t\t}" + "\t\t\t.box.is-uploading .box__uploading," + "\t\t\t.box.is-success .box__success," + "\t\t\t.box.is-error .box__error" + "\t\t\t{" + "\t\t\t\tdisplay: block;" + "\t\t\t\tposition: absolute;" + "\t\t\t\ttop: 50%;" + "       right: 0;" + "\t\t\t\tleft: 0;" + "\t   \t\t-webkit-transform: translateY( -50% );" + "\t\t\t\t\ttransform: translateY( -50% );" + "\t\t\t\t}" + "\t\t\t\t.box__uploading" + "\t\t\t\t{" + "\t\t\t\t\tfont-style: italic;" + "\t\t\t\t}" + "\t\t\t\t.box__success" + "\t\t\t\t{" + "\t\t\t\t\t-webkit-animation: appear-from-inside .25s ease-in-out;" + "\t\t\t\t\tanimation: appear-from-inside .25s ease-in-out;" + "\t\t\t\t}" + "\t\t\t\t\t@-webkit-keyframes appear-from-inside" + "\t\t\t\t\t{" + "\t\t\t\t\t\tfrom\t{ -webkit-transform: translateY( -50% ) scale( 0 ); }" + "\t\t\t\t\t\t75%\t\t{ -webkit-transform: translateY( -50% ) scale( 1.1 ); }" + "\t\t\t\t\t\tto\t\t{ -webkit-transform: translateY( -50% ) scale( 1 ); }" + "\t\t\t\t\t}" + "\t\t\t\t\t@keyframes appear-from-inside" + "\t\t\t\t\t{" + "\t\t\t\t\t\tfrom\t{ transform: translateY( -50% ) scale( 0 ); }" + "\t\t\t\t\t\t75%\t\t{ transform: translateY( -50% ) scale( 1.1 ); }" + "\t\t\t\t\t\tto\t\t{ transform: translateY( -50% ) scale( 1 ); }" + "\t\t\t\t\t}" + "\t\t\t\t.box__restart" + "\t\t\t\t{" + "\t\t\t\t\tfont-weight: 700;" + "\t\t\t\t}" + "\t\t\t\t.box__restart:focus," + "\t\t\t\t.box__restart:hover" + "\t\t\t\t{" + "\t\t\t\t\tcolor: #39bfd3;" + "\t\t\t\t}" + "\t\t\t\t.box__file" + "\t\t\t\t{" + "\t\t\t\t\twidth: 0.1px;" + "\t\t\t\t\theight: 0.1px;" + "\t\t\t\t\topacity: 0;" + "\t\t\t\t\toverflow: hidden;" + "\t\t\t\t\tposition: absolute;" + "\t\t\t\t\tz-index: -1;" + "\t\t\t\t}" + "\t\t\t\t.box__file + label" + "\t\t\t\t{" + "\t\t\t\t\tmax-width: 80%;" + "\t\t\t\t\ttext-overflow: ellipsis;" + "\t\t\t\t\twhite-space: nowrap;" + "\t\t\t\t\tcursor: pointer;" + "\t\t\t\t\tdisplay: inline-block;" + "\t\t\t\t\toverflow: hidden;" + "\t\t\t\t}" + "\t\t\t\t.box__file + label:hover strong," + "\t\t\t\t.box__file:focus + label strong," + "\t\t\t\t.box__file.has-focus + label strong" + "\t\t\t\t{" + "\t\t\t\t\tcolor: #39bfd3;" + "\t\t\t\t}" + "\t\t\t\t.box__file:focus + label," + "\t\t\t\t.box__file.has-focus + label" + "\t\t\t\t{" + " \t\t\t\t\toutline: 1px dotted #000;" + "\t\t\t\t\toutline: -webkit-focus-ring-color auto 5px;" + "\t\t\t\t}" + "\t\t\t\t\t.box__file + label *" + "\t\t\t\t\t{" + "\t\t\t\t\t\t\/* pointer-events: none; *\/ \/* in case of FastClick lib use *\/" + "\t\t\t\t\t}" + "\t\t\t\t.box__button" + "\t\t\t\t{" + "\t\t\t\t\tfont-weight: 700;" + "\t\t\t\t\tcolor: #e5edf1;" + "\t\t\t\t\tbackground-color: #39bfd3;" + "\t\t\t\t\tdisplay: none;" + "\t\t\t\t\tpadding: 8px 16px;" + "\t\t\t\t\tmargin: 10px auto 0;" + "\t\t\t\t}" + "\t\t\t\t\t.box__button:hover," + "\t\t\t\t\t.box__button:focus" + "\t\t\t\t\t{" + "\t\t\t\t\t\tbackground-color: #0f3c4b;" + "\t\t\t\t\t}");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FFiles");
      rtl.free(this,"FFileList");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FMultiFile = false;
      this.FShowFiles = false;
      this.FEventInit = false;
      this.SetWidth(170);
      this.SetHeight(190);
    };
    this.Clear = function () {
      var el = null;
      el = document.getElementById("FP" + this.GetID());
      if (el != null) {
        el.setAttribute("type","");
        el.setAttribute("type","file");
      };
      el = document.getElementById(this.GetID() + "fileslist");
      if (el != null) {
        el.innerHTML = "";
      };
      while (this.FFiles.GetCount() > 0) this.FFiles.Delete(0);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Accept",2,rtl.string,"FAccept","SetAccept");
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("DragCaption",2,rtl.string,"FDragCaption","SetDragCaption");
    $r.addProperty("Multifile",0,rtl.boolean,"FMultiFile","FMultiFile",{Default: false});
    $r.addProperty("ShowFiles",0,rtl.boolean,"FShowFiles","FShowFiles",{Default: false});
    $r.addProperty("OnDroppedFiles",0,$mod.$rtti["TFilesDroppedEvent"],"FOnDroppedFiles","FOnDroppedFiles");
    $r.addProperty("OnGetFileAsText",0,$mod.$rtti["TFileAsTextEvent"],"FOnFileAsText","FOnFileAsText");
    $r.addProperty("OnGetFileAsArrayBuffer",0,$mod.$rtti["TFileAsArrayBufferEvent"],"FOnGetFileAsArrayBuffer","FOnGetFileAsArrayBuffer");
    $r.addProperty("OnGetFileAsBase64",0,$mod.$rtti["TFileAsBase64Event"],"FOnFileAsBase64","FOnFileAsBase64");
    $r.addProperty("OnGetFileAsDataURL",0,$mod.$rtti["TFileAsDataURLEvent"],"FOnFileAsDataURL","FOnFileAsDataURL");
    $r.addProperty("OnUploadFileComplete",0,$mod.$rtti["TFileUploadEvent"],"FOnUploadFileComplete","FOnUploadFileComplete");
    $r.addProperty("OnUploadFileAbort",0,$mod.$rtti["TFileUploadEvent"],"FOnUploadFileAbort","FOnUploadFileAbort");
    $r.addProperty("OnUploadFileError",0,$mod.$rtti["TFileUploadErrorEvent"],"FOnUploadFileError","FOnUploadFileError");
    $r.addProperty("OnUploadFileProgress",0,$mod.$rtti["TFileUploadProgressEvent"],"FOnUploadFileProgress","FOnUploadFileProgress");
  });
  rtl.createClass($mod,"TWebFileUpload",$mod.TFileUpload,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TFilePicker",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FOnChange = null;
      this.FMultiFile = false;
      this.FFiles = null;
      this.FOnFileAsText = null;
      this.FOnGetFileAsArrayBuffer = null;
      this.FAccept = "";
      this.FOnFileAsBase64 = null;
      this.FChangePtr = null;
      this.FOnFileAsDataURL = null;
      this.FOnUploadFileAbort = null;
      this.FOnUploadFileComplete = null;
      this.FOnUploadFileProgress = null;
      this.FOnUploadFileError = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      this.FFiles = undefined;
      this.FOnFileAsText = undefined;
      this.FOnGetFileAsArrayBuffer = undefined;
      this.FOnFileAsBase64 = undefined;
      this.FOnFileAsDataURL = undefined;
      this.FOnUploadFileAbort = undefined;
      this.FOnUploadFileComplete = undefined;
      this.FOnUploadFileProgress = undefined;
      this.FOnUploadFileError = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetMultiFile = function (Value) {
      if (this.FMultiFile !== Value) {
        this.FMultiFile = Value;
        this.UpdateElement();
      };
    };
    this.DoHandleChange = function (e) {
      var Result = false;
      var i = 0;
      var l = 0;
      var sz = 0;
      var eh = null;
      var s = "";
      var m = "";
      var f = null;
      var d = null;
      var jsfile = null;
      Result = true;
      while (this.FFiles.GetCount() > 0) this.FFiles.Delete(0);
      eh = this.GetElementHandle();
      var curFiles = eh.files;
      l = curFiles.length;
      for (var $l1 = 0, $end2 = l - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        f = this.FFiles.Add$1();
        jsfile = curFiles[i];
        s = curFiles[i].name;
        m = curFiles[i].type;
        sz = curFiles[i].size;
        d = new Date(curFiles[i].lastModified);
        f.FFileObject = jsfile;
        f.FName = s;
        f.FMimeType = m;
        f.FSize = sz;
        f.FModified = pas.SysUtils.EncodeDate(d.getYear() + 1900,d.getMonth() + 1,d.getDate()) + pas.SysUtils.EncodeTime(d.getHours(),d.getMinutes(),d.getSeconds(),d.getMilliseconds());
      };
      if (this.FOnChange != null) this.FOnChange(this);
      return Result;
    };
    this.SetAccept = function (Value) {
      if (this.FAccept !== Value) {
        this.FAccept = Value;
        this.UpdateElement();
      };
    };
    this.UpdateElement = function () {
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if (this.GetElementHandle() != null) {
        if (this.FMultiFile) {
          this.GetElementHandle().setAttribute("multiple","")}
         else this.GetElementHandle().removeAttribute("multiple");
        if (this.FAccept !== "") {
          this.GetElementHandle().setAttribute("accept",this.FAccept)}
         else this.GetElementHandle().removeAttribute("accept");
      };
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("INPUT");
      Result.setAttribute("type","file");
      return Result;
    };
    this.GetMethodPointers = function () {
      if (this.FChangePtr === null) {
        this.FChangePtr = rtl.createCallback(this,"DoHandleChange");
        pas["WEBLib.Controls"].TControl.GetMethodPointers.call(this);
      };
    };
    this.BindEvents = function () {
      var eh = null;
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetElementBindHandle() != null) {
        eh = this.GetElementBindHandle();
        eh.addEventListener("change",rtl.createCallback(this,"DoHandleChange"));
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FFiles = $mod.TFiles.$create("Create$2",[this]);
    };
    this.Destroy = function () {
      rtl.free(this,"FFiles");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.Clear = function () {
      this.GetElementHandle().setAttribute("type","");
      this.GetElementHandle().setAttribute("type","file");
      while (this.FFiles.GetCount() > 0) this.FFiles.Delete(0);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Accept",2,rtl.string,"FAccept","SetAccept");
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Multifile",2,rtl.boolean,"FMultiFile","SetMultiFile");
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnGetFileAsText",0,$mod.$rtti["TFileAsTextEvent"],"FOnFileAsText","FOnFileAsText");
    $r.addProperty("OnGetFileAsArrayBuffer",0,$mod.$rtti["TFileAsArrayBufferEvent"],"FOnGetFileAsArrayBuffer","FOnGetFileAsArrayBuffer");
    $r.addProperty("OnGetFileAsBase64",0,$mod.$rtti["TFileAsBase64Event"],"FOnFileAsBase64","FOnFileAsBase64");
    $r.addProperty("OnGetFileAsDataURL",0,$mod.$rtti["TFileAsDataURLEvent"],"FOnFileAsDataURL","FOnFileAsDataURL");
    $r.addProperty("OnUploadFileComplete",0,$mod.$rtti["TFileUploadEvent"],"FOnUploadFileComplete","FOnUploadFileComplete");
    $r.addProperty("OnUploadFileAbort",0,$mod.$rtti["TFileUploadEvent"],"FOnUploadFileAbort","FOnUploadFileAbort");
    $r.addProperty("OnUploadFileError",0,$mod.$rtti["TFileUploadErrorEvent"],"FOnUploadFileError","FOnUploadFileError");
    $r.addProperty("OnUploadFileProgress",0,$mod.$rtti["TFileUploadProgressEvent"],"FOnUploadFileProgress","FOnUploadFileProgress");
  });
  rtl.createClass($mod,"TWebFilePicker",$mod.TFilePicker,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"THTMLDiv",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FHTML = null;
    };
    this.$final = function () {
      this.FHTML = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetHTML = function (Value) {
      this.FHTML.Assign(Value);
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if ((this.GetElementHandle() != null) && (this.FHTML.GetTextStr() !== "")) {
        this.GetElementHandle().innerHTML = this.FHTML.GetTextStr()}
       else {
        if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) this.RenderDesigning(this.$classname,this.GetContainer(),this,true);
      };
    };
    this.HTMLChanged = function (Sender) {
      this.UpdateElementData();
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("DIV");
      return Result;
    };
    this.CreateInitialize = function () {
      this.FHTML = pas.Classes.TStringList.$create("Create$1");
      rtl.as(this.FHTML,pas.Classes.TStringList).FOnChange = rtl.createCallback(this,"HTMLChanged");
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FControlStyle = rtl.unionSet(this.FControlStyle,rtl.createSet(pas["WEBLib.Controls"].TControlStyleValue.csAcceptsControls));
      this.SetClipChildren(false);
      this.SetTabStop(false);
    };
    this.Destroy = function () {
      rtl.free(this,"FHTML");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("HTML",2,pas.Classes.$rtti["TStrings"],"FHTML","SetHTML");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnTouchStart",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchStart","FOnTouchStart");
    $r.addProperty("OnTouchEnd",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchEnd","FOnTouchEnd");
    $r.addProperty("OnTouchMove",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchMove","FOnTouchMove");
    $r.addProperty("OnTouchCancel",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchCancel","FOnTouchCancel");
  });
  rtl.createClass($mod,"TWebHTMLDiv",$mod.THTMLDiv,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"THTMLSpan",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FHTML = null;
    };
    this.$final = function () {
      this.FHTML = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetHTML = function (Value) {
      this.FHTML.Assign(Value);
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if ((this.GetElementHandle() != null) && (this.FHTML.GetTextStr() !== "")) {
        this.GetElementHandle().innerHTML = this.FHTML.GetTextStr()}
       else {
        if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) this.RenderDesigning(this.$classname,this.GetContainer(),this,true);
      };
    };
    this.HTMLChanged = function (Sender) {
      this.UpdateElementData();
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      return Result;
    };
    this.CreateInitialize = function () {
      this.FHTML = pas.Classes.TStringList.$create("Create$1");
      rtl.as(this.FHTML,pas.Classes.TStringList).FOnChange = rtl.createCallback(this,"HTMLChanged");
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FControlStyle = rtl.unionSet(this.FControlStyle,rtl.createSet(pas["WEBLib.Controls"].TControlStyleValue.csAcceptsControls));
      this.SetTabStop(false);
      this.SetClipChildren(false);
    };
    this.Destroy = function () {
      rtl.free(this,"FHTML");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("HTML",2,pas.Classes.$rtti["TStrings"],"FHTML","SetHTML");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnTouchStart",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchStart","FOnTouchStart");
    $r.addProperty("OnTouchEnd",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchEnd","FOnTouchEnd");
    $r.addProperty("OnTouchMove",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchMove","FOnTouchMove");
    $r.addProperty("OnTouchCancel",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchCancel","FOnTouchCancel");
  });
  rtl.createClass($mod,"TWebHTMLSpan",$mod.THTMLSpan,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"THTMLAnchor",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FHref = "";
      this.FTarget = "";
    };
    this.SetHref = function (Value) {
      this.FHref = Value;
      this.UpdateElementData();
    };
    this.SetTarget = function (Value) {
      this.FTarget = Value;
      this.UpdateElementData();
    };
    this.SetCaption = function (Value) {
      pas["WEBLib.Controls"].TCustomControl.SetCaption.call(this,Value);
      this.UpdateElementData();
    };
    this.HandleDoClick = function (Event) {
      var Result = false;
      if (this.FOnClick != null) {
        Event.preventDefault();
        this.StopPropagation();
        Result = false;
        this.FOnClick(this);
      } else Result = pas["WEBLib.Controls"].TControl.HandleDoClick.apply(this,arguments);
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("A");
      return Result;
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if (this.GetElementHandle() != null) {
        if (this.FCaption !== "") this.GetElementHandle().innerHTML = this.FCaption;
        this.GetElementHandle().setAttribute("href",this.FHref);
        this.GetElementHandle().setAttribute("target",this.FTarget);
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.SetCaption("WebHTMLAnchor");
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("HRef",2,rtl.string,"FHref","SetHref");
    $r.addProperty("Target",2,rtl.string,"FTarget","SetTarget");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
  });
  rtl.createClass($mod,"TWebHTMLAnchor",$mod.THTMLAnchor,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$MethodVar("TURLValidatorEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["IsValid",rtl.boolean]]), methodkind: 0});
  rtl.createClass($mod,"TURLValidator",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FURL = "";
      this.FOnValidated = null;
    };
    this.$final = function () {
      this.FOnValidated = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.HandleResult = function (IsValid) {
      if (this.FOnValidated != null) this.FOnValidated(this,IsValid);
    };
    this.Validate = function () {
      var s = "";
      var ptr = null;
      s = this.FURL;
      ptr = rtl.createCallback(this,"HandleResult");
      var request = new XMLHttpRequest();
      request.open('GET', s, true);
      request.onreadystatechange = function(){
         if (request.readyState === 4){
             ptr(request.status === 200);
             }
      };
      request.send();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("URL",0,rtl.string,"FURL","FURL");
    $r.addProperty("OnValidated",0,$mod.$rtti["TURLValidatorEvent"],"FOnValidated","FOnValidated");
  });
  rtl.createClass($mod,"TWebURLValidator",$mod.TURLValidator,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
},null,function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.TWITTERSCRIPTID = "twitterscriptid";
  $impl.isAdvancedUpload = function () {
    var div = document.createElement('div');
    return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div)) && 'FormData' in window && 'FileReader' in window;
  };
});
rtl.module("WEBLib.Dialogs",["System","Classes","WEBLib.Controls","Web","SysUtils","WEBLib.WebTools","WEBLib.WebCtrls","WEBLib.Graphics"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TMsgDlgType = {"0": "mtWarning", mtWarning: 0, "1": "mtError", mtError: 1, "2": "mtInformation", mtInformation: 2, "3": "mtConfirmation", mtConfirmation: 3, "4": "mtCustom", mtCustom: 4};
  $mod.$rtti.$Enum("TMsgDlgType",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TMsgDlgType});
  this.TMsgDlgBtn = {"0": "mbYes", mbYes: 0, "1": "mbNo", mbNo: 1, "2": "mbOK", mbOK: 2, "3": "mbCancel", mbCancel: 3, "4": "mbAbort", mbAbort: 4, "5": "mbRetry", mbRetry: 5, "6": "mbIgnore", mbIgnore: 6, "7": "mbAll", mbAll: 7, "8": "mbNoToAll", mbNoToAll: 8, "9": "mbYesToAll", mbYesToAll: 9, "10": "mbHelp", mbHelp: 10, "11": "mbClose", mbClose: 11};
  $mod.$rtti.$Enum("TMsgDlgBtn",{minvalue: 0, maxvalue: 11, ordtype: 1, enumtype: this.TMsgDlgBtn});
  $mod.$rtti.$Set("TMsgDlgButtons",{comptype: $mod.$rtti["TMsgDlgBtn"]});
  $mod.$rtti.$RefToProcVar("TDialogResultProc",{procsig: rtl.newTIProcSig([["AValue",rtl.longint]])});
  rtl.createClass($mod,"TCustomDialogButton",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FCaption = "";
      this.FTag = 0;
      this.FElementClassName = "";
    };
    var $r = this.$rtti;
    $r.addProperty("Caption",0,rtl.string,"FCaption","FCaption");
    $r.addProperty("ElementClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","FElementClassName");
    $r.addProperty("Tag",0,rtl.longint,"FTag","FTag",{Default: 0});
  });
  rtl.createClass($mod,"TCustomDialogButtons",pas.Classes.TOwnedCollection,function () {
    this.GetItem$1 = function (AIndex) {
      var Result = null;
      Result = this.GetItem(AIndex);
      return Result;
    };
    this.SetItem$1 = function (AIndex, Value) {
      this.SetItem(AIndex,Value);
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
    this.Insert$1 = function (AIndex) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,AIndex);
      return Result;
    };
  });
  rtl.createClass($mod,"TMessageDlg",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FOpacity = 0.0;
      this.FLayer$1 = null;
      this.FDlg = null;
      this.FCancel = null;
      this.FMessage = "";
      this.FTitle = "";
      this.FMsgDlgType = 0;
      this.FOnButtonClick = null;
      this.FOnClose = null;
      this.FButtons = {};
      this.FDialogProc = null;
      this.FDialogResult = 0;
      this.FMdx = 0;
      this.FMdy = 0;
      this.FDlgX = 0;
      this.FDlgY = 0;
      this.FCaptured$1 = false;
      this.FDown = false;
      this.FElementTitleClassName = "";
      this.FElementButtonClassName = "";
      this.FElementContentClassName = "";
      this.FDialogText = null;
      this.FCustomButtons = null;
      this.FElementDialogClassName = "";
    };
    this.$final = function () {
      this.FLayer$1 = undefined;
      this.FDlg = undefined;
      this.FCancel = undefined;
      this.FOnButtonClick = undefined;
      this.FOnClose = undefined;
      this.FButtons = undefined;
      this.FDialogProc = undefined;
      this.FDialogText = undefined;
      this.FCustomButtons = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetDialogText = function (Value) {
      this.FDialogText.Assign(Value);
    };
    this.SetCustomButtons = function (Value) {
      this.FCustomButtons.Assign(Value);
    };
    this.CreateElement = function () {
      var Result = null;
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        Result = null}
       else pas["WEBLib.Controls"].TCustomControl.CreateElement.call(this);
      return Result;
    };
    this.GetDialogText = function (Index) {
      var Result = "";
      Result = "Undefined";
      if (Index < this.FDialogText.GetCount()) Result = this.FDialogText.Get(Index);
      return Result;
    };
    this.BindEvents = function () {
    };
    this.SetDialogResult = function (Value) {
      this.FDialogResult = Value;
      if (this.FDialogResult !== 0) this.Close();
    };
    this.CreateButton = function (Caption, DoFocus, AClass) {
      var Result = null;
      Result = document.createElement("BUTTON");
      Result.innerHTML = Caption;
      if (pas["WEBLib.Forms"].Application.FMainForm.FCSSLibrary === pas["WEBLib.Forms"].TCSSLibrary.cssBootstrap) {
        Result.setAttribute("type","BUTTON");
        Result.setAttribute("class","btn " + AClass);
        Result.setAttribute("data-dismiss","modal-dialog");
      } else {
        Result.style.setProperty("width","100px");
        Result.style.setProperty("margin-left","5px");
        if (this.FElementButtonClassName !== "") {
          Result.setAttribute("class",this.FElementButtonClassName + " " + AClass)}
         else if (pas["WEBLib.Forms"].Application.FThemeButtonClassName !== "") Result.setAttribute("class",pas["WEBLib.Forms"].Application.FThemeButtonClassName + " " + AClass);
      };
      Result.id = Caption;
      Result.addEventListener("click",rtl.createCallback(this,"HandleButtonClick"));
      Result.addEventListener("keydown",rtl.createCallback(this,"HandleKeyDown"));
      if (DoFocus.get()) {
        setTimeout(function() {Result.focus();}, 1);
        DoFocus.set(false);
      };
      return Result;
    };
    this.HandleDocMouseMove = function (Event) {
      var Result = false;
      var deltax = 0.0;
      var deltay = 0.0;
      var el = null;
      if (this.FDown) {
        deltax = Event.screenX - this.FMdx;
        deltay = Event.screenY - this.FMdy;
        el = this.FDlg;
        el.style.setProperty("transform","");
        el.style.setProperty("position","absolute");
        el.style.setProperty("left",pas.SysUtils.IntToStr(Math.round(this.FDlgX + deltax)) + "px");
        el.style.setProperty("top",pas.SysUtils.IntToStr(Math.round(this.FDlgY + deltay)) + "px");
        el = this.FCancel;
        el.style.setProperty("position","absolute");
        el.style.setProperty("top","0");
        el.style.setProperty("right","0");
      };
      Result = true;
      return Result;
    };
    this.HandleDocMouseUp = function (Event) {
      var Result = false;
      this.FDown = false;
      document.body.removeEventListener("mousemove",rtl.createCallback(this,"HandleDocMouseMove"));
      document.body.removeEventListener("mouseup",rtl.createCallback(this,"HandleDocMouseUp"));
      Result = true;
      return Result;
    };
    this.HandleMouseDown = function (Event) {
      var Result = false;
      var r = null;
      this.FMdx = Math.round(Event.screenX);
      this.FMdy = Math.round(Event.screenY);
      r = this.FDlg.getBoundingClientRect();
      this.FDlgX = Math.round(pas.System.Int(r.left));
      this.FDlgY = Math.round(pas.System.Int(r.top));
      this.FDown = true;
      if (!this.FCaptured$1) {
        this.FCaptured$1 = true;
        document.body.addEventListener("mousemove",rtl.createCallback(this,"HandleDocMouseMove"));
        document.body.addEventListener("mouseup",rtl.createCallback(this,"HandleDocMouseUp"));
      };
      Result = true;
      return Result;
    };
    this.HandleButtonClick = function (Event) {
      var Result = false;
      var id = "";
      var i = 0;
      this.SetDialogResult(0);
      id = Event.target.getAttribute("id");
      if (id === this.GetDialogText(7)) {
        this.SetDialogResult(6)}
       else if (id === this.GetDialogText(8)) {
        this.SetDialogResult(7)}
       else if (id === this.GetDialogText(5)) {
        this.SetDialogResult(1)}
       else if (id === this.GetDialogText(6)) {
        this.SetDialogResult(2)}
       else if (id === this.GetDialogText(9)) {
        this.SetDialogResult(3)}
       else if (id === this.GetDialogText(10)) {
        this.SetDialogResult(4)}
       else if (id === this.GetDialogText(11)) {
        this.SetDialogResult(5)}
       else if (id === this.GetDialogText(12)) {
        this.SetDialogResult(12)}
       else if (id === this.GetDialogText(13)) {
        this.SetDialogResult(13)}
       else if (id === this.GetDialogText(14)) {
        this.SetDialogResult(14)}
       else if (id === this.GetDialogText(15)) {
        this.SetDialogResult(9)}
       else if (id === this.GetDialogText(16)) this.SetDialogResult(8);
      if ((this.FDialogResult === 0) && (this.FCustomButtons.GetCount() > 0)) {
        for (var $l1 = 0, $end2 = this.FCustomButtons.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (id === this.FCustomButtons.GetItem$1(i).FCaption) {
            this.SetDialogResult(100 + i);
            break;
          };
        };
      };
      if (this.FOnButtonClick != null) this.FOnButtonClick(this);
      Result = true;
      return Result;
    };
    this.HandleKeyDown = function (Event) {
      var Result = false;
      var k = 0;
      k = this.GetKeyCode(Event.key,true);
      if (!pas.System.Assigned(k)) return Result;
      if (k === 27) this.SetDialogResult(2);
      Result = true;
      return Result;
    };
    this.InitBootstrapStyle = function () {
      this.FElementButtonClassName = "btn";
      this.FElementContentClassName = "text-body";
      this.FElementTitleClassName = "text-body";
      this.FElementDialogClassName = "shadow-lg p-3 mb-5 bg-white rounded";
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FOpacity = 0.2;
      this.FMessage = "";
      this.FMsgDlgType = $mod.TMsgDlgType.mtInformation;
      this.FDialogText = pas.Classes.TStringList.$create("Create$1");
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SWarning"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SError"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SInformation"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SConfirm"));
      this.FDialogText.Add("Custom");
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SOK"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SCancel"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SYes"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SNo"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SAbort"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SRetry"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SIgnore"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SAll"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SYesToAll"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SNoToAll"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SHelp"));
      this.FDialogText.Add(rtl.getResStr(pas["WEBLib.Consts"],"SClose"));
      this.FMsgDlgType = $mod.TMsgDlgType.mtCustom;
      this.FCustomButtons = $mod.TCustomDialogButtons.$create("Create$2",[this,$mod.TCustomDialogButton]);
      this.FCustomButtons.FPropName = "CustomButtons";
    };
    this.Destroy = function () {
      rtl.free(this,"FDialogText");
      rtl.free(this,"FCustomButtons");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.Close = function () {
      pas["WEBLib.Forms"].Application.UnLockForm(pas["WEBLib.Forms"].Application.FMainForm);
      document.body.removeChild(this.FLayer$1);
      document.body.removeChild(this.FDlg);
      this.FDown = false;
      this.FCaptured$1 = false;
      if (this.FOnClose != null) this.FOnClose(this);
      if (this.FDialogProc != null) this.FDialogProc(this.FDialogResult);
    };
    this.Show = function () {
      var title = null;
      var msg = null;
      var icon = null;
      var content = null;
      var contentdiv = null;
      var bar = null;
      var edlg = null;
      var eh = null;
      var cancel = null;
      var adiv = null;
      var ldiv = null;
      var cdiv = null;
      var MsgSymbol = "";
      var MsgColor = "";
      var MsgTitle = "";
      var BorderColor = "";
      var BarBGColor = "";
      var BarHeight = "";
      var Padding = "";
      var btnFocus = false;
      var i = 0;
      if ((pas["WEBLib.Forms"].Application === null) || (pas["WEBLib.Forms"].Application.FMainForm === null)) return;
      pas["WEBLib.Forms"].Application.LockForm(pas["WEBLib.Forms"].Application.FMainForm);
      this.FLayer$1 = document.createElement("SPAN");
      document.body.appendChild(this.FLayer$1);
      this.FLayer$1.setAttribute("tabindex","0");
      this.FLayer$1.addEventListener("keydown",rtl.createCallback(this,"HandleKeyDown"));
      btnFocus = true;
      MsgTitle = this.FTitle;
      this.FMessage = $impl.StringToHTML(this.FMessage);
      var $tmp1 = this.FMsgDlgType;
      if ($tmp1 === $mod.TMsgDlgType.mtWarning) {
        MsgSymbol = "warning";
        MsgColor = "orange";
        MsgTitle = this.GetDialogText(0);
      } else if ($tmp1 === $mod.TMsgDlgType.mtError) {
        MsgSymbol = "cancel";
        MsgColor = "red";
        MsgTitle = this.GetDialogText(1);
      } else if ($tmp1 === $mod.TMsgDlgType.mtInformation) {
        MsgSymbol = "info";
        MsgColor = "blue";
        MsgTitle = this.GetDialogText(2);
      } else if ($tmp1 === $mod.TMsgDlgType.mtConfirmation) {
        MsgSymbol = "help";
        MsgColor = "blue";
        MsgTitle = this.GetDialogText(3);
      } else if ($tmp1 === $mod.TMsgDlgType.mtCustom) {
        MsgSymbol = "";
        MsgColor = "";
        MsgTitle = this.GetDialogText(4);
      };
      if (pas["WEBLib.Forms"].Application.FMainForm.FCSSLibrary === pas["WEBLib.Forms"].TCSSLibrary.cssBootstrap) {
        this.FDlg = document.createElement("DIV");
        this.FDlg.setAttribute("class","modal-dialog");
        this.FDlg.setAttribute("role","document");
        this.FDlg.style.setProperty("z-index","1999998");
        eh = document.createElement("SPAN");
        eh.style.setProperty("position","absolute");
        eh.style.setProperty("top","0");
        eh.style.setProperty("left","0");
        eh.style.setProperty("right","0");
        eh.style.setProperty("bottom","0");
        eh.style.setProperty("z-index","1999997");
        document.body.appendChild(eh);
        eh.appendChild(this.FDlg);
        ldiv = this.FDlg;
        adiv = document.createElement("DIV");
        adiv.setAttribute("class","modal-content " + this.FElementDialogClassName);
        ldiv.appendChild(adiv);
        cdiv = adiv;
        ldiv = adiv;
        adiv = document.createElement("DIV");
        adiv.setAttribute("class","modal-header");
        cdiv.appendChild(adiv);
        ldiv = adiv;
        adiv = document.createElement("H5");
        adiv.setAttribute("class","modal-title");
        adiv.innerHTML = MsgTitle;
        ldiv.appendChild(adiv);
        if ($mod.TMsgDlgBtn.mbCancel in this.FButtons) {
          adiv = document.createElement("BUTTON");
          adiv.setAttribute("type","button");
          adiv.setAttribute("class","close");
          adiv.setAttribute("data-dismiss","modal-dialog");
          adiv.setAttribute("aria-label","Close");
          adiv.setAttribute("id",this.GetDialogText(6));
          adiv.addEventListener("click",rtl.createCallback(this,"HandleButtonClick"));
          ldiv.appendChild(adiv);
          ldiv = adiv;
          adiv = document.createElement("SPAN");
          adiv.setAttribute("aria-hidden","true");
          adiv.innerHTML = "&times;";
          ldiv.appendChild(adiv);
        };
        adiv = document.createElement("DIV");
        adiv.setAttribute("class","modal-body");
        cdiv.appendChild(adiv);
        ldiv = adiv;
        if (this.FMsgDlgType !== $mod.TMsgDlgType.mtCustom) {
          icon = document.createElement("SPAN");
          icon.innerHTML = '<i class="material-icons" style="color:' + MsgColor + '!important;font-size:48px!important">' + MsgSymbol + "<\/i>";
          icon.style.setProperty("display","inline-block");
          icon.style.setProperty("float","left");
          icon.style.setProperty("padding-right","15px");
          ldiv.appendChild(icon);
        };
        adiv = document.createElement("P");
        adiv.innerHTML = this.FMessage;
        ldiv.appendChild(adiv);
        adiv = document.createElement("DIV");
        adiv.setAttribute("class","modal-footer");
        cdiv.appendChild(adiv);
        ldiv = adiv;
        bar = ldiv;
        this.FDlg = eh;
      } else {
        Padding = "5";
        BarHeight = "26";
        BarBGColor = "#f1f1f1";
        BorderColor = "#ababab";
        this.FDlg = document.createElement("DIV");
        document.body.appendChild(this.FDlg);
        edlg = this.FDlg;
        if (this.FElementDialogClassName !== "") edlg.setAttribute("class",this.FElementDialogClassName);
        edlg.style.setProperty("background-color","white");
        edlg.style.setProperty("cursor","default");
        edlg.style.setProperty("border","1px solid " + BorderColor);
        edlg.style.setProperty("position","fixed");
        edlg.style.setProperty("font-family","Arial");
        edlg.style.setProperty("font-size","10pt");
        edlg.style.setProperty("min-width","300px");
        edlg.style.setProperty("min-height","125px");
        edlg.style.setProperty("max-width","100%");
        edlg.style.setProperty("max-height","100%");
        edlg.style.setProperty("top","50%");
        edlg.style.setProperty("left","50%");
        edlg.style.setProperty("transform","translate(-50%, -50%)");
        edlg.style.setProperty("z-index","1999998");
        edlg.style.setProperty("box-shadow","5px 5px 5px gray");
        cancel = document.createElement("DIV");
        this.FCancel = cancel;
        cancel.innerHTML = '<i id="Cancel" class="material-icons" style="font-size:16px!important">clear<\/i>';
        cancel.id = "Cancel";
        cancel.style.setProperty("color",pas["WEBLib.Graphics"].ColorToHTML(pas["WEBLib.Forms"].Application.FThemeTextColor));
        cancel.style.setProperty("position","fixed");
        cancel.style.setProperty("top","0");
        cancel.style.setProperty("right","0");
        cancel.style.setProperty("padding",Padding + "px");
        cancel.style.setProperty("height",BarHeight + "px");
        cancel.style.setProperty("line-height",BarHeight + "px");
        cancel.addEventListener("click",rtl.createCallback(this,"HandleButtonClick"));
        edlg.appendChild(cancel);
        title = document.createElement("DIV");
        title.innerHTML = MsgTitle;
        if (this.FElementTitleClassName !== "") {
          title.setAttribute("class",this.FElementTitleClassName);
        } else {
          title.style.setProperty("background-color",pas["WEBLib.Graphics"].ColorToHTML(pas["WEBLib.Forms"].Application.FThemeColor));
          title.style.setProperty("color",pas["WEBLib.Graphics"].ColorToHTML(pas["WEBLib.Forms"].Application.FThemeTextColor));
        };
        title.style.setProperty("cursor","move");
        title.style.setProperty("padding-left",Padding + "px");
        title.style.setProperty("height",BarHeight + "px");
        title.style.setProperty("vertical-align","middle");
        title.style.setProperty("line-height",BarHeight + "px");
        title.style.setProperty("border-bottom","1px solid " + BorderColor);
        title.style.setProperty("-moz-user-select","none");
        title.style.setProperty("-webkit-user-select","none");
        title.style.setProperty("-ms-user-select","none");
        title.style.setProperty("user-select","none");
        title.style.setProperty("-o-user-select","none");
        title.addEventListener("mousedown",rtl.createCallback(this,"HandleMouseDown"));
        edlg.appendChild(title);
        msg = document.createElement("DIV");
        msg.style.setProperty("padding",Padding + "px");
        msg.style.setProperty("height","auto");
        msg.style.setProperty("min-height","50px");
        msg.style.setProperty("border-bottom","1px solid " + BorderColor);
        if (this.FMsgDlgType !== $mod.TMsgDlgType.mtCustom) {
          icon = document.createElement("DIV");
          icon.innerHTML = '<i class="material-icons" style="color:' + MsgColor + '!important;font-size:48px!important">' + MsgSymbol + "<\/i>";
          icon.style.setProperty("display","inline-block");
          icon.style.setProperty("float","left");
          icon.style.setProperty("padding-right","15px");
          msg.appendChild(icon);
        };
        this.FMessage = pas.SysUtils.StringReplace(this.FMessage,pas.System.sLineBreak,"<BR>",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
        contentdiv = document.createElement("DIV");
        contentdiv.innerHTML = this.FMessage;
        contentdiv.style.setProperty("height","auto");
        contentdiv.style.setProperty("min-height","50px");
        contentdiv.style.setProperty("white-space","pre-wrap");
        content = document.createElement("LABEL");
        content.innerHTML = this.FMessage;
        if (this.FElementTitleClassName !== "") {
          content.setAttribute("class",this.FElementContentClassName);
        };
        contentdiv.appendChild(content);
        msg.appendChild(content);
        edlg.appendChild(msg);
        bar = document.createElement("DIV");
        bar.style.setProperty("background-color",BarBGColor);
        bar.style.setProperty("padding",Padding + "px");
        bar.style.setProperty("min-height",BarHeight + "px");
        bar.style.setProperty("height","auto");
        bar.style.setProperty("line-height",BarHeight + "px");
        bar.style.setProperty("text-align","right");
        edlg.appendChild(bar);
      };
      if (rtl.eqSet(this.FButtons,{}) && (this.FCustomButtons.GetCount() === 0)) {
        bar.appendChild(this.CreateButton(this.GetDialogText(5),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""))}
       else {
        if ($mod.TMsgDlgBtn.mbYes in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(7),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
        if ($mod.TMsgDlgBtn.mbNo in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(8),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
        if ($mod.TMsgDlgBtn.mbOK in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(5),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
        if ($mod.TMsgDlgBtn.mbCancel in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(6),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
        if ($mod.TMsgDlgBtn.mbAbort in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(9),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
        if ($mod.TMsgDlgBtn.mbRetry in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(10),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
        if ($mod.TMsgDlgBtn.mbIgnore in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(11),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
        if ($mod.TMsgDlgBtn.mbAll in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(12),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
        if ($mod.TMsgDlgBtn.mbNoToAll in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(13),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
        if ($mod.TMsgDlgBtn.mbYesToAll in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(14),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
        if ($mod.TMsgDlgBtn.mbHelp in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(15),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
        if ($mod.TMsgDlgBtn.mbClose in this.FButtons) bar.appendChild(this.CreateButton(this.GetDialogText(16),{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},""));
      };
      for (var $l2 = 0, $end3 = this.FCustomButtons.GetCount() - 1; $l2 <= $end3; $l2++) {
        i = $l2;
        bar.appendChild(this.CreateButton(this.FCustomButtons.GetItem$1(i).FCaption,{get: function () {
            return btnFocus;
          }, set: function (v) {
            btnFocus = v;
          }},this.FCustomButtons.GetItem$1(i).FElementClassName));
      };
      eh = this.FLayer$1;
      eh.style.setProperty("background-color","black");
      eh.style.setProperty("opacity",pas["WEBLib.WebTools"].DoubleToHTML(this.FOpacity));
      eh.style.setProperty("top","0");
      eh.style.setProperty("left","0");
      eh.style.setProperty("right","0");
      eh.style.setProperty("bottom","0");
      eh.style.setProperty("z-index","19990");
      eh.style.setProperty("webkit-user-select","none");
      eh.style.setProperty("moz-user-select","none");
      eh.style.setProperty("khtml-user-select","none");
      eh.style.setProperty("ms-user-select","none");
      eh.style.setProperty("user-select","none");
      eh.style.setProperty("position","fixed");
    };
    this.ShowDialog = function () {
      var Result = 0;
      Result = 0;
      this.Show();
      return Result;
    };
    this.ShowDialog$1 = function (Msg, DlgType, Buttons, AProc) {
      var Result = 0;
      Result = 0;
      this.FButtons = rtl.refSet(Buttons);
      this.FMessage = Msg;
      this.FMsgDlgType = DlgType;
      this.FDialogProc = AProc;
      this.SetDialogResult(0);
      this.Show();
      return Result;
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Buttons",0,$mod.$rtti["TMsgDlgButtons"],"FButtons","FButtons",{Default: {}});
    $r.addProperty("CustomButtons",2,$mod.$rtti["TCustomDialogButtons"],"FCustomButtons","SetCustomButtons");
    $r.addProperty("DialogText",2,pas.Classes.$rtti["TStringList"],"FDialogText","SetDialogText");
    $r.addProperty("DialogType",0,$mod.$rtti["TMsgDlgType"],"FMsgDlgType","FMsgDlgType",{Default: $mod.TMsgDlgType.mtCustom});
    $r.addProperty("Message",0,rtl.string,"FMessage","FMessage");
    $r.addProperty("Opacity",0,rtl.double,"FOpacity","FOpacity");
    $r.addProperty("ElementButtonClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementButtonClassName","FElementButtonClassName");
    $r.addProperty("ElementDialogClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementDialogClassName","FElementDialogClassName");
    $r.addProperty("ElementTitleClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementTitleClassName","FElementTitleClassName");
    $r.addProperty("ElementContentClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementContentClassName","FElementContentClassName");
    $r.addProperty("Title",0,rtl.string,"FTitle","FTitle");
    $r.addProperty("OnButtonClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnButtonClick","FOnButtonClick");
    $r.addProperty("OnClose",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClose","FOnClose");
  });
  rtl.createClass($mod,"TWebMessageDlg",$mod.TMessageDlg,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TWaitMessage",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FLayer$1 = null;
      this.FPicture = null;
      this.FOpacity = 0.0;
      this.FOnShow = null;
      this.FIsWaiting = false;
    };
    this.$final = function () {
      this.FLayer$1 = undefined;
      this.FPicture = undefined;
      this.FOnShow = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetPicture = function (Value) {
      this.FPicture.Assign(Value);
    };
    this.WaitDisplayed = function () {
      if (this.FOnShow != null) this.FOnShow(this);
    };
    this.CreateElement = function () {
      var Result = null;
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        Result = null}
       else pas["WEBLib.Controls"].TCustomControl.CreateElement.call(this);
      return Result;
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FOpacity = 0.2;
      this.FPicture = pas["WEBLib.Graphics"].TURLPicture.$create("Create");
      this.FIsWaiting = false;
    };
    this.Destroy = function () {
      rtl.free(this,"FPicture");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.Show = function () {
      var eh = null;
      var img = null;
      var dv = null;
      var el = null;
      this.FLayer$1 = document.createElement("SPAN");
      eh = this.FLayer$1;
      eh.style.setProperty("background-color","black");
      eh.style.setProperty("opacity",pas["WEBLib.WebTools"].DoubleToHTML(this.FOpacity));
      eh.style.setProperty("top","0");
      eh.style.setProperty("left","0");
      eh.style.setProperty("right","0");
      eh.style.setProperty("bottom","0");
      eh.style.setProperty("z-index","19999");
      eh.style.setProperty("webkit-user-select","none");
      eh.style.setProperty("moz-user-select","none");
      eh.style.setProperty("khtml-user-select","none");
      eh.style.setProperty("ms-user-select","none");
      eh.style.setProperty("user-select","none");
      eh.style.setProperty("position","fixed");
      document.body.appendChild(this.FLayer$1);
      this.FLayer$1.setAttribute("tabindex","0");
      el = document.createElement("DIV");
      dv = el;
      this.FLayer$1.appendChild(el);
      dv.style.setProperty("position","relative");
      dv.style.setProperty("width","100%");
      dv.style.setProperty("height","100%");
      el = document.createElement("IMG");
      img = el;
      dv.appendChild(img);
      img.setAttribute("src",this.FPicture.FFilename);
      img.style.setProperty("position","absolute");
      img.style.setProperty("top","0");
      img.style.setProperty("left","0");
      img.style.setProperty("right","0");
      img.style.setProperty("bottom","0");
      img.style.setProperty("margin","auto");
      this.FIsWaiting = true;
      if (this.FOnShow != null) {
        window.setTimeout(rtl.createCallback(this,"WaitDisplayed"),100);
      };
    };
    this.Hide = function () {
      if (this.FIsWaiting) document.body.removeChild(this.FLayer$1);
      this.FIsWaiting = false;
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Opacity",0,rtl.double,"FOpacity","FOpacity");
    $r.addProperty("Picture",2,pas["WEBLib.Graphics"].$rtti["TURLPicture"],"FPicture","SetPicture");
    $r.addProperty("OnShow",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnShow","FOnShow");
  });
  rtl.createClass($mod,"TWebWaitMessage",$mod.TWaitMessage,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$RefToProcVar("TOpenDialogProc",{procsig: rtl.newTIProcSig([["AFileName",rtl.string]])});
  rtl.createClass($mod,"TOpenDialog",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FFiles = null;
      this.FOnChange = null;
      this.FFileName = "";
      this.FMultiFile = false;
      this.FAccept = "";
      this.FOpenDialogProc = null;
    };
    this.$final = function () {
      this.FFiles = undefined;
      this.FOnChange = undefined;
      this.FOpenDialogProc = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.HandleInputChange = function (Event) {
      var i = 0;
      var l = 0;
      var sz = 0;
      var s = "";
      var m = "";
      var f = null;
      var d = null;
      var jsfile = null;
      while (this.FFiles.GetCount() > 0) this.FFiles.Delete(0);
      var curFiles = Event.target.files;
      l = curFiles.length;
      for (var $l1 = 0, $end2 = l - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        f = this.FFiles.Add$1();
        jsfile = curFiles[i];
        s = curFiles[i].name;
        m = curFiles[i].type;
        sz = curFiles[i].size;
        d = new Date(curFiles[i].lastModified);
        if (i === 0) this.FFileName = s;
        f.FFileObject = jsfile;
        f.FName = s;
        f.FMimeType = m;
        f.FSize = sz;
        f.FModified = pas.SysUtils.EncodeDate(d.getYear() + 1900,d.getMonth() + 1,d.getDate()) + pas.SysUtils.EncodeTime(d.getHours(),d.getMinutes(),d.getSeconds(),d.getMilliseconds());
      };
      if (this.FOpenDialogProc != null) this.FOpenDialogProc(this.FFileName);
      this.FOpenDialogProc = null;
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$1 = function (AOwner) {
      pas.Classes.TComponent.Create$1.call(this,AOwner);
      this.FFiles = pas["WEBLib.WebCtrls"].TFiles.$create("Create$2",[this]);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FFiles");
      pas.Classes.TComponent.Destroy.call(this);
    };
    this.Execute = function () {
      var ic = null;
      var fp = null;
      ic = rtl.createCallback(this,"HandleInputChange");
      fp = document.createElement("input");
      fp.setAttribute("type","file");
      if (this.FMultiFile) fp.setAttribute("multiple","");
      if (this.FAccept !== "") fp.setAttribute("accept",this.FAccept);
      fp.addEventListener("change",ic);
      fp.click();
    };
    this.Execute$1 = function (AProc) {
      this.FOpenDialogProc = AProc;
      this.Execute();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Accept",0,rtl.string,"FAccept","FAccept");
    $r.addProperty("MultiFile",0,rtl.boolean,"FMultiFile","FMultiFile",{Default: false});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
  });
  rtl.createClass($mod,"TWebOpenDialog",$mod.TOpenDialog,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.MessageDlg = function (Msg, DlgType, Buttons, AResultProc) {
    if (!($impl.WebLibDlg != null)) {
      $impl.WebLibDlg = $mod.TMessageDlg.$create("Create$1",[null]);
      if (pas["WEBLib.Forms"].Application.FMainForm.FCSSLibrary === pas["WEBLib.Forms"].TCSSLibrary.cssBootstrap) {
        $impl.WebLibDlg.InitBootstrapStyle();
      };
    };
    $impl.WebLibDlg.ShowDialog$1(Msg,DlgType,rtl.refSet(Buttons),AResultProc);
  };
  this.ShowMessage = function (AMsg) {
    if ((pas["WEBLib.Forms"].Application !== null) && (pas["WEBLib.Forms"].Application.FMainForm !== null) && (pas["WEBLib.Forms"].Application.FMainForm.FCSSLibrary === pas["WEBLib.Forms"].TCSSLibrary.cssBootstrap)) {
      $mod.MessageDlg(AMsg,$mod.TMsgDlgType.mtInformation,rtl.createSet($mod.TMsgDlgBtn.mbOK),null);
    } else {
      alert(AMsg);
    };
  };
  this.InputBox = function (ACaption, APrompt, ADefault) {
    var Result = "";
    var retvalue = "";
    retvalue = prompt(APrompt, ADefault);
    if (retvalue == null) {
      retvalue = "";
    };
    Result = retvalue;
    return Result;
  };
  this.InputQuery = function (ACaption, APrompt, Value) {
    var Result = false;
    var retvalue = false;
    var s = "";
    retvalue = true;
    s = Value.get();
    var text = s;
    s = prompt(APrompt, text);
    if (s == null) {
      retvalue = false;
    };
    if (retvalue) Value.set(s);
    Result = retvalue;
    return Result;
  };
  this.Confirm = function (Value) {
    var Result = false;
    var res = false;
    res = confirm(Value);
    Result = res;
    return Result;
  };
  $mod.$init = function () {
    $impl.WebLibDlg = null;
  };
},["WEBLib.Forms","WEBLib.Consts","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.WebLibDlg = null;
  $impl.StringToHTML = function (AValue) {
    var Result = "";
    Result = pas.SysUtils.StringReplace(AValue,"\r","<BR>",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    Result = pas.SysUtils.StringReplace(Result,"\n","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    return Result;
  };
});
rtl.module("WEBLib.ClientConnector",["System","Classes","WEBLib.JSON"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TClientConnectorIdentifier = {"0": "ciUnknown", ciUnknown: 0, "1": "ciAndroid", ciAndroid: 1, "2": "ciiOS", ciiOS: 2, "3": "ciWindows", ciWindows: 3, "4": "ciMac", ciMac: 4};
  $mod.$rtti.$Enum("TClientConnectorIdentifier",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TClientConnectorIdentifier});
  $mod.$rtti.$MethodVar("TClientConnectorReceivedMessageEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AJSON",pas["WEBLib.JSON"].$rtti["TJSONObject"]]]), methodkind: 0});
  rtl.createClass($mod,"TClientConnector",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FOnReceivedMessage = null;
    };
    this.$final = function () {
      this.FOnReceivedMessage = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.Create$1 = function (AOwner) {
      pas.Classes.TComponent.Create$1.apply(this,arguments);
      pas["WEBLib.Forms"].Application.FClientConnector = this;
      return this;
    };
    this.Destroy = function () {
      pas["WEBLib.Forms"].Application.FClientConnector = null;
      pas.Classes.TComponent.Destroy.call(this);
    };
    this.Receive = function (AJSON) {
      var js = null;
      var o = null;
      var s = "";
      js = pas["WEBLib.JSON"].TJSON.$create("Create");
      s = decodeURIComponent(AJSON);
      o = js.Parse(s);
      if (this.FOnReceivedMessage != null) this.FOnReceivedMessage(this,o);
      o = rtl.freeLoc(o);
    };
    this.Send = function (AJSON) {
      var s = "";
      s = JSON.stringify(AJSON.fjo);
      this.SendMessage(s);
    };
    var MAXBUFFERCOUNT = 500;
    this.SendMessage = function (AMessage) {
      var $Self = this;
      var s = "";
      var cid = 0;
      var scid = "";
      var sSub = "";
      var sc = 0;
      function InternalSend(m) {
        var $tmp1 = cid;
        if ($tmp1 === $mod.TClientConnectorIdentifier.ciAndroid) {
          injectedObject.Setjsvalue(m);
          injectedObject.performClick();
        } else if (($tmp1 === $mod.TClientConnectorIdentifier.ciiOS) || ($tmp1 === $mod.TClientConnectorIdentifier.ciMac)) {
          window.webkit.messageHandlers.bridge.postMessage(m);
        } else if ($tmp1 === $mod.TClientConnectorIdentifier.ciWindows) {
          window.location = m;
        } else if ($tmp1 === $mod.TClientConnectorIdentifier.ciUnknown) pas["WEBLib.Dialogs"].ShowMessage("Please perform handshake from client first.");
      };
      s = AMessage;
      scid = window.TMSWEBCoreClientIdentifier;
      cid = $mod.TClientConnectorIdentifier.ciUnknown;
      var $tmp1 = pas.SysUtils.LowerCase(scid);
      if ($tmp1 === "android") {
        cid = $mod.TClientConnectorIdentifier.ciAndroid}
       else if ($tmp1 === "ios") {
        cid = $mod.TClientConnectorIdentifier.ciiOS}
       else if ($tmp1 === "windows") {
        cid = $mod.TClientConnectorIdentifier.ciWindows}
       else if (($tmp1 === "mac") || ($tmp1 === "macos")) cid = $mod.TClientConnectorIdentifier.ciMac;
      var $tmp2 = pas.SysUtils.LowerCase(scid);
      if (($tmp2 === "mac") || ($tmp2 === "macos") || ($tmp2 === "ios")) {
        InternalSend($impl.Prefix + encodeURIComponent(s))}
       else if (($tmp2 === "android") || ($tmp2 === "windows")) {
        InternalSend($impl.Prefix + "BUFFERSTART");
        while (s.length > 0) {
          sc = Math.min(s.length & 0xFFFFFFFF,500);
          sSub = pas.System.Copy(s,1,sc);
          pas.System.Delete({get: function () {
              return s;
            }, set: function (v) {
              s = v;
            }},1,sc);
          InternalSend($impl.Prefix + encodeURIComponent(sSub));
        };
        InternalSend($impl.Prefix + "BUFFEREND");
      };
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("OnReceivedMessage",0,$mod.$rtti["TClientConnectorReceivedMessageEvent"],"FOnReceivedMessage","FOnReceivedMessage");
  });
  rtl.createClass($mod,"TWebClientConnector",$mod.TClientConnector,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
},["Math","JS","WEBLib.Forms","SysUtils","WEBLib.Dialogs"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.Prefix = "webclientevent:\/\/";
});
rtl.module("WEBLib.Forms",["System","Classes","Types","SysUtils","WEBLib.Graphics","WEBLib.Controls","WEBLib.Modules","WEBLib.Lang","Web","JS","WEBLib.ClientConnector"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.idOK = 1;
  this.idCancel = 2;
  this.idAbort = 3;
  this.idRetry = 4;
  this.idIgnore = 5;
  this.idYes = 6;
  this.idNo = 7;
  this.idClose = 8;
  this.idHelp = 9;
  this.idTryAgain = 10;
  this.idContinue = 11;
  this.mrNone = 0;
  this.mrOk = 1;
  this.mrCancel = 2;
  this.mrAbort = 3;
  this.mrRetry = 4;
  this.mrIgnore = 5;
  this.mrYes = 6;
  this.mrNo = 7;
  this.mrClose = 8;
  this.mrHelp = 9;
  this.mrTryAgain = 10;
  this.mrContinue = 11;
  this.mrAll = 11 + 1;
  this.mrNoToAll = 12 + 1;
  this.mrYesToAll = 13 + 1;
  this.FORMCAPTIONHEIGHT = 22;
  this.rgiFirst = -1024;
  this.rgiLast = -513;
  this.igiFirst = 256;
  this.igiLast = 511;
  this.clTMSBlue = 0xE39E00;
  this.clTMSWEB = 0x8F8300;
  $mod.$rtti.$Class("TDragDockObject");
  $mod.$rtti.$Class("TCustomForm");
  $mod.$rtti.$Int("TConstraintSize",{minvalue: 0, maxvalue: 2147483647, ordtype: 5});
  this.TCloseAction = {"0": "caNone", caNone: 0, "1": "caHide", caHide: 1, "2": "caFree", caFree: 2, "3": "caMinimize", caMinimize: 3};
  $mod.$rtti.$Enum("TCloseAction",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TCloseAction});
  this.TFormStyle = {"0": "fsNormal", fsNormal: 0, "1": "fsStayOnTop", fsStayOnTop: 1};
  $mod.$rtti.$Enum("TFormStyle",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TFormStyle});
  this.TNavigationTarget = {"0": "ntBlank", ntBlank: 0, "1": "ntPage", ntPage: 1};
  $mod.$rtti.$Enum("TNavigationTarget",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TNavigationTarget});
  this.TBiDiMode = {"0": "bdLeftToRight", bdLeftToRight: 0, "1": "bdRightToLeft", bdRightToLeft: 1, "2": "bdRightToLeftNoAlign", bdRightToLeftNoAlign: 2, "3": "bdRightToLeftReadingOnly", bdRightToLeftReadingOnly: 3};
  $mod.$rtti.$Enum("TBiDiMode",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TBiDiMode});
  $mod.$rtti.$Int("TGestureID",{minvalue: -1024, maxvalue: 511, ordtype: 2});
  this.TInteractiveGestureFlag = {"0": "gfBegin", gfBegin: 0, "1": "gfInertia", gfInertia: 1, "2": "gfEnd", gfEnd: 2};
  $mod.$rtti.$Enum("TInteractiveGestureFlag",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TInteractiveGestureFlag});
  $mod.$rtti.$Set("TInteractiveGestureFlags",{comptype: $mod.$rtti["TInteractiveGestureFlag"]});
  this.TMouseActivate = {"0": "maDefault", maDefault: 0, "1": "maActivate", maActivate: 1, "2": "maActivateAndEat", maActivateAndEat: 2, "3": "maNoActivate", maNoActivate: 3, "4": "maNoActivateAndEat", maNoActivateAndEat: 4};
  $mod.$rtti.$Enum("TMouseActivate",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TMouseActivate});
  this.TScreenOrientation = {"0": "soPortrait", soPortrait: 0, "1": "soLandscape", soLandscape: 1};
  $mod.$rtti.$Enum("TScreenOrientation",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TScreenOrientation});
  rtl.recNewT($mod,"TSmallPoint",function () {
    this.x = 0;
    this.y = 0;
    this.$eq = function (b) {
      return (this.x === b.x) && (this.y === b.y);
    };
    this.$assign = function (s) {
      this.x = s.x;
      this.y = s.y;
      return this;
    };
    var $r = $mod.$rtti.$Record("TSmallPoint",{});
    $r.addField("x",rtl.smallint);
    $r.addField("y",rtl.smallint);
  });
  rtl.recNewT($mod,"TAlignInfo",function () {
    this.AlignList = null;
    this.ControlIndex = 0;
    this.Align = 0;
    this.Scratch = 0;
    this.$eq = function (b) {
      return (this.AlignList === b.AlignList) && (this.ControlIndex === b.ControlIndex) && (this.Align === b.Align) && (this.Scratch === b.Scratch);
    };
    this.$assign = function (s) {
      this.AlignList = s.AlignList;
      this.ControlIndex = s.ControlIndex;
      this.Align = s.Align;
      this.Scratch = s.Scratch;
      return this;
    };
    var $r = $mod.$rtti.$Record("TAlignInfo",{});
    $r.addField("AlignList",pas.Classes.$rtti["TList"]);
    $r.addField("ControlIndex",rtl.longint);
    $r.addField("Align",pas["WEBLib.Controls"].$rtti["TAlign"]);
    $r.addField("Scratch",rtl.longint);
  });
  rtl.recNewT($mod,"TGestureEventInfo",function () {
    this.GestureID = 0;
    this.Angle = 0.0;
    this.Distance = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.Location = pas.Types.TPoint.$new();
      r.Flags = {};
      r.InertiaVector = $mod.TSmallPoint.$new();
      r.TapLocation = $mod.TSmallPoint.$new();
      return r;
    };
    this.$eq = function (b) {
      return (this.GestureID === b.GestureID) && this.Location.$eq(b.Location) && rtl.eqSet(this.Flags,b.Flags) && (this.Angle === b.Angle) && this.InertiaVector.$eq(b.InertiaVector) && (this.Distance === b.Distance) && this.TapLocation.$eq(b.TapLocation);
    };
    this.$assign = function (s) {
      this.GestureID = s.GestureID;
      this.Location.$assign(s.Location);
      this.Flags = rtl.refSet(s.Flags);
      this.Angle = s.Angle;
      this.InertiaVector.$assign(s.InertiaVector);
      this.Distance = s.Distance;
      this.TapLocation.$assign(s.TapLocation);
      return this;
    };
    var $r = $mod.$rtti.$Record("TGestureEventInfo",{});
    $r.addField("GestureID",$mod.$rtti["TGestureID"]);
    $r.addField("Location",pas.Types.$rtti["TPoint"]);
    $r.addField("Flags",$mod.$rtti["TInteractiveGestureFlags"]);
    $r.addField("Angle",rtl.double);
    $r.addField("InertiaVector",$mod.$rtti["TSmallPoint"]);
    $r.addField("Distance",rtl.longint);
    $r.addField("TapLocation",$mod.$rtti["TSmallPoint"]);
  });
  $mod.$rtti.$MethodVar("TCloseEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Action",$mod.$rtti["TCloseAction"],1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TCloseQueryEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["CanClose",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TOrientationChangeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AOrientation",$mod.$rtti["TScreenOrientation"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TBeforeUnloadEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AMessage",rtl.string,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TAlignInsertBeforeEvent",{procsig: rtl.newTIProcSig([["Sender",pas["WEBLib.Controls"].$rtti["TWinControl"]],["C1",pas["WEBLib.Controls"].$rtti["TControl"]],["C2",pas["WEBLib.Controls"].$rtti["TControl"]]],rtl.boolean), methodkind: 1});
  $mod.$rtti.$MethodVar("TAlignPositionEvent",{procsig: rtl.newTIProcSig([["Sender",pas["WEBLib.Controls"].$rtti["TWinControl"]],["Control",pas["WEBLib.Controls"].$rtti["TControl"]],["NewLeft",rtl.longint,1],["NewTop",rtl.longint,1],["NewWidth",rtl.longint,1],["NewHeight",rtl.longint,1],["AlignRect",pas.Types.$rtti["TRect"],1],["AlignInfo",$mod.$rtti["TAlignInfo"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TCanResizeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["NewWidth",rtl.longint,1],["NewHeight",rtl.longint,1],["Resize",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TConstrainedResizeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["MinWidth",rtl.longint,1],["MinHeight",rtl.longint,1],["MaxWidth",rtl.longint,1],["MaxHeight",rtl.longint,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TContextPopupEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["MousePos",pas.Types.$rtti["TPoint"]],["Handled",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TDockDropEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Source",$mod.$rtti["TDragDockObject"]],["X",rtl.longint],["Y",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TDockOverEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Source",$mod.$rtti["TDragDockObject"]],["X",rtl.longint],["Y",rtl.longint],["State",pas["WEBLib.Controls"].$rtti["TDragState"]],["Accept",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TGestureEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["EventInfo",$mod.$rtti["TGestureEventInfo"],2],["Handled",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TGetSiteInfoEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["DockClient",pas["WEBLib.Controls"].$rtti["TControl"]],["InfluenceRect",pas.Types.$rtti["TRect"],1],["MousePos",pas.Types.$rtti["TPoint"]],["CanDock",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMouseActivateEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Button",pas["WEBLib.Controls"].$rtti["TMouseButton"]],["Shift",pas["WEBLib.Controls"].$rtti["TShiftState"]],["X",rtl.longint],["Y",rtl.longint],["HitTest",rtl.longint],["MouseActivate",$mod.$rtti["TMouseActivate"],1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TMouseWheelUpDownEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Shift",pas["WEBLib.Controls"].$rtti["TShiftState"]],["MousePos",pas.Types.$rtti["TPoint"]],["Handled",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TStartDockEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["DragObject",$mod.$rtti["TDragDockObject"],1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TUnDockEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Client",pas["WEBLib.Controls"].$rtti["TControl"]],["NewTarget",pas["WEBLib.Controls"].$rtti["TWinControl"]],["Allow",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$RefToProcVar("TModalResultProc",{procsig: rtl.newTIProcSig([["AValue",rtl.longint]])});
  $mod.$rtti.$RefToProcVar("TFormCreatedProc",{procsig: rtl.newTIProcSig([["AForm",pas.System.$rtti["TObject"]]])});
  this.TWindowState = {"0": "wsNormal", wsNormal: 0, "1": "wsMinimized", wsMinimized: 1, "2": "wsMaximized", wsMaximized: 2};
  $mod.$rtti.$Enum("TWindowState",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TWindowState});
  this.TPopupMode = {"0": "pmNone", pmNone: 0, "1": "pmAuto", pmAuto: 1, "2": "pmExplicit", pmExplicit: 2};
  $mod.$rtti.$Enum("TPopupMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TPopupMode});
  this.TPopupClose = {"0": "pcOnDeactivate", pcOnDeactivate: 0, "1": "pcNever", pcNever: 1};
  $mod.$rtti.$Enum("TPopupClose",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TPopupClose});
  this.TPosition = {"0": "poDesigned", poDesigned: 0, "1": "poDefault", poDefault: 1, "2": "poDefaultPosOnly", poDefaultPosOnly: 2, "3": "poDefaultSizeOnly", poDefaultSizeOnly: 3, "4": "poScreenCenter", poScreenCenter: 4, "5": "poDesktopCenter", poDesktopCenter: 5, "6": "poMainFormCenter", poMainFormCenter: 6, "7": "poOwnerFormCenter", poOwnerFormCenter: 7};
  $mod.$rtti.$Enum("TPosition",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TPosition});
  this.TApplicationErrorType = {"0": "aeSilent", aeSilent: 0, "1": "aeDialog", aeDialog: 1, "2": "aeAlert", aeAlert: 2, "3": "aeFooter", aeFooter: 3};
  $mod.$rtti.$Enum("TApplicationErrorType",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TApplicationErrorType});
  this.TFormBorderStyle = {"0": "fbNone", fbNone: 0, "1": "fbSingle", fbSingle: 1, "2": "fbSizeable", fbSizeable: 2, "3": "fbDialog", fbDialog: 3, "4": "fbDialogSizeable", fbDialogSizeable: 4};
  $mod.$rtti.$Enum("TFormBorderStyle",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TFormBorderStyle});
  $mod.$rtti.$Enum("TFormBorder",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TFormBorderStyle});
  this.TCSSLibrary = {"0": "cssNone", cssNone: 0, "1": "cssBootstrap", cssBootstrap: 1};
  $mod.$rtti.$Enum("TCSSLibrary",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TCSSLibrary});
  rtl.createClass($mod,"TCustomSizeConstraints",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FControl = null;
      this.FMaxHeight = 0;
      this.FMaxWidth = 0;
      this.FMinHeight = 0;
      this.FMinWidth = 0;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FControl = undefined;
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetConstraints = function (AIndex, AValue) {
      var $tmp1 = AIndex;
      if ($tmp1 === 0) {
        if (AValue !== this.FMaxHeight) {
          this.FMaxHeight = AValue;
          if ((AValue > 0) && (AValue < this.FMinHeight)) this.FMinHeight = AValue;
          this.Change();
        }}
       else if ($tmp1 === 1) {
        if (AValue !== this.FMaxWidth) {
          this.FMaxWidth = AValue;
          if ((AValue > 0) && (AValue < this.FMinWidth)) this.FMinWidth = AValue;
          this.Change();
        }}
       else if ($tmp1 === 2) {
        if (AValue !== this.FMinHeight) {
          this.FMinHeight = AValue;
          if ((this.FMaxHeight > 0) && (AValue > this.FMaxHeight)) this.FMaxHeight = AValue;
          this.Change();
        }}
       else if ($tmp1 === 3) if (AValue !== this.FMinWidth) {
        this.FMinWidth = AValue;
        if ((this.FMaxWidth > 0) && (AValue > this.FMaxWidth)) this.FMaxWidth = AValue;
        this.Change();
      };
    };
    this.Change = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.AssignTo = function (ADest) {
      if ($mod.TCustomSizeConstraints.isPrototypeOf(ADest)) {
        ADest.FMinHeight = this.FMinHeight;
        ADest.FMaxHeight = this.FMaxHeight;
        ADest.FMinWidth = this.FMinWidth;
        ADest.FMaxWidth = this.FMaxWidth;
        ADest.Change();
      } else pas.Classes.TPersistent.AssignTo.call(this,ADest);
    };
    this.Create$1 = function (AControl) {
      pas.System.TObject.Create.call(this);
      this.FControl = AControl;
      return this;
    };
  });
  rtl.createClass($mod,"TSizeConstraints",$mod.TCustomSizeConstraints,function () {
    var $r = this.$rtti;
    $r.addProperty("MaxHeight",18,$mod.$rtti["TConstraintSize"],"FMaxHeight","SetConstraints",{index: 0, Default: 0});
    $r.addProperty("MaxWidth",18,$mod.$rtti["TConstraintSize"],"FMaxWidth","SetConstraints",{index: 1, Default: 0});
    $r.addProperty("MinHeight",18,$mod.$rtti["TConstraintSize"],"FMinHeight","SetConstraints",{index: 2, Default: 0});
    $r.addProperty("MinWidth",18,$mod.$rtti["TConstraintSize"],"FMinWidth","SetConstraints",{index: 3, Default: 0});
  });
  rtl.createClass($mod,"TDragDockObject",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FBrush = null;
      this.FDockRect = pas.Types.TRect.$new();
      this.FDropAlign = 0;
      this.FDropOnControl = null;
      this.FEraseDockRect = pas.Types.TRect.$new();
      this.FEraseWhenMoving = false;
      this.FFloating = false;
      this.FFrameWidth = 0;
    };
    this.$final = function () {
      this.FBrush = undefined;
      this.FDockRect = undefined;
      this.FDropOnControl = undefined;
      this.FEraseDockRect = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AControl) {
      pas.System.TObject.Create.call(this);
      this.FBrush = pas["WEBLib.Graphics"].TBrush.$create("Create$1");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FBrush");
      pas.System.TObject.Destroy.call(this);
    };
    this.Assign = function (Source) {
    };
  });
  rtl.createClass($mod,"TCustomForm",pas["WEBLib.Controls"].TWinControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TWinControl.$init.call(this);
      this.FDesignContainer = null;
      this.FLayer$1 = null;
      this.FPopup = false;
      this.FPopupElement = null;
      this.FFormFileName = "";
      this.FFormContent = "";
      this.FFormContainer = "";
      this.FFormElement = "";
      this.FFormStyle = 0;
      this.FOnCreate = null;
      this.FOnResize$1 = null;
      this.FOnShow = null;
      this.FModalResult = 0;
      this.FOnPaint = null;
      this.FOnDeactivate = null;
      this.FOnCloseQuery = null;
      this.FOnClose = null;
      this.FModalProc = null;
      this.FCreatedProc = null;
      this.FWindowState = 0;
      this.FCaption = "";
      this.FIsResizing$1 = false;
      this.FOnScroll = null;
      this.FOnUnload = null;
      this.FOnBeforeUnload = null;
      this.FPopupMode = 0;
      this.FPopupClose = 0;
      this.FPosition = 0;
      this.FActiveControl = null;
      this.FMdx = 0;
      this.FMdy = 0;
      this.FDlgX = 0;
      this.FDlgY = 0;
      this.FCaptured$1 = false;
      this.FDown = false;
      this.FHasCaption = false;
      this.FMoveSpan = null;
      this.FCaptionElement = null;
      this.FBorder = 0;
      this.FShadow = false;
      this.FTimerID = 0;
      this.FOrigWidth = 0;
      this.FOrigHeight = 0;
      this.FOnDestroy = null;
      this.FPopupOpacity = 0.0;
      this.FCreating = false;
      this.FLoadedPtr = null;
      this.FUnloadPtr = null;
      this.FBeforeUnloadPtr = null;
      this.FResizePtr = null;
      this.FScrollPtr = null;
      this.FDocMouseUpPtr = null;
      this.FDocMouseMovePtr = null;
      this.FTitleDownPtr = null;
      this.FDoClickPtr = null;
      this.FKeyDownPtr$1 = null;
      this.FOrientationChangePtr = null;
      this.FCSSLibrary = 0;
      this.FNoHTML = false;
      this.FPrevActiveForm = null;
      this.FElementCaptionClassName = "";
      this.FMenu = null;
      this.FOnOrientationChange = null;
    };
    this.$final = function () {
      this.FDesignContainer = undefined;
      this.FLayer$1 = undefined;
      this.FPopupElement = undefined;
      this.FOnCreate = undefined;
      this.FOnResize$1 = undefined;
      this.FOnShow = undefined;
      this.FOnPaint = undefined;
      this.FOnDeactivate = undefined;
      this.FOnCloseQuery = undefined;
      this.FOnClose = undefined;
      this.FModalProc = undefined;
      this.FCreatedProc = undefined;
      this.FOnScroll = undefined;
      this.FOnUnload = undefined;
      this.FOnBeforeUnload = undefined;
      this.FActiveControl = undefined;
      this.FMoveSpan = undefined;
      this.FCaptionElement = undefined;
      this.FOnDestroy = undefined;
      this.FPrevActiveForm = undefined;
      this.FMenu = undefined;
      this.FOnOrientationChange = undefined;
      pas["WEBLib.Controls"].TWinControl.$final.call(this);
    };
    this.SetModalResult = function (Value) {
      this.FModalResult = Value;
      if (this.FModalResult !== 0) this.Close();
    };
    this.GetFormStyle = function () {
      var Result = 0;
      Result = this.FFormStyle;
      return Result;
    };
    this.SetFormStyle = function (Value) {
      this.FFormStyle = Value;
    };
    this.GetCanvas = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.SetCaption = function (AValue) {
      if (this.FCaption !== AValue) {
        this.FCaption = AValue;
        this.UpdateElement();
      };
    };
    this.SetActiveControl = function (Value) {
      this.FActiveControl = Value;
      if (this.FActiveControl != null) this.FActiveControl.SetFocus();
    };
    this.SetShadow = function (Value) {
      this.FShadow = Value;
      this.UpdateElement();
    };
    this.SetBorder = function (Value) {
      if (this.FBorder !== Value) {
        this.FBorder = Value;
        if (this.GetContainer() != null) this.AlignControl(this);
      };
    };
    this.SetFormContainer = function (Value) {
      var el = null;
      this.FFormContainer = Value;
      el = document.getElementById(Value);
      if (el != null) this.FContainer = el;
    };
    this.GetActiveControl = function () {
      var Result = null;
      var i = 0;
      Result = this.FActiveControl;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.GetControls(i).GetElementHandle() === document.activeElement) {
          Result = this.GetControls(i);
          break;
        };
      };
      return Result;
    };
    this.SetWidth = function (AValue) {
      var eh = null;
      pas["WEBLib.Controls"].TControl.SetWidth.apply(this,arguments);
      if (this.FPopup) {
        eh = this.FPopupElement;
        if (eh != null) eh.style.setProperty("width",pas.SysUtils.IntToStr(AValue) + "px");
      };
    };
    this.SetHeight = function (AValue) {
      var eh = null;
      pas["WEBLib.Controls"].TControl.SetHeight.apply(this,arguments);
      if (this.FPopup) {
        eh = this.FPopupElement;
        if (eh != null) eh.style.setProperty("height",pas.SysUtils.IntToStr(AValue) + "px");
      };
    };
    this.HandleLoaded = function (Event) {
      var Result = false;
      this.Resize$1();
      this.InitAnchoring();
      Result = true;
      return Result;
    };
    this.HandleScroll = function (Event) {
      var Result = false;
      if (this.FOnScroll != null) this.FOnScroll(this);
      Result = true;
      return Result;
    };
    this.HandleUnload = function (Event) {
      var Result = false;
      if (this.FOnUnload != null) this.FOnUnload(this);
      Result = true;
      return Result;
    };
    this.HandleBeforeUnload = function (Event) {
      var Result = false;
      var msg = "";
      msg = "";
      if (this.FOnBeforeUnload != null) this.FOnBeforeUnload(this,{get: function () {
          return msg;
        }, set: function (v) {
          msg = v;
        }});
      if (msg !== "") {
        Event.returnValue = msg;
        return msg;
      };
      Result = true;
      return Result;
    };
    this.HandleObserver = function () {
      var Result = false;
      this.Resize$1();
      Result = true;
      return Result;
    };
    this.HandleResize = function (Event) {
      var Result = false;
      if (this.FVisible) {
        if (!(this.GetContainer() != null)) this.CreateControl();
        this.Resize$1();
      };
      if (1 < 0) {
        this.HandleObserver();
      };
      Result = true;
      return Result;
    };
    this.HandleDocMouseMove = function (Event) {
      var Result = false;
      var deltax = 0.0;
      var deltay = 0.0;
      var el = null;
      var l = 0;
      var t = 0;
      if (this.FDown) {
        deltax = Event.screenX - this.FMdx;
        deltay = Event.screenY - this.FMdy;
        if (this.FHasCaption) {
          el = this.GetContainer().parentNode}
         else el = this.GetContainer();
        el.style.setProperty("transform","");
        el.style.setProperty("position","absolute");
        l = Math.round(this.FDlgX + deltax);
        t = Math.round(this.FDlgY + deltay);
        el.style.setProperty("left",pas.SysUtils.IntToStr(l) + "px");
        el.style.setProperty("top",pas.SysUtils.IntToStr(t) + "px");
        this.FLeft = l;
        this.FTop = t;
      };
      Result = true;
      return Result;
    };
    this.HandleDocMouseUp = function (Event) {
      var Result = false;
      if (this.FDown) {
        this.FCaptured$1 = false;
        this.FDown = false;
        document.body.removeEventListener("mousemove",this.FDocMouseMovePtr);
        document.body.removeEventListener("mouseup",this.FDocMouseUpPtr);
        if (this.FMoveSpan != null) document.body.removeChild(this.FMoveSpan);
        this.FMoveSpan = null;
      };
      Result = true;
      return Result;
    };
    this.HandleTitleDown = function (Event) {
      var Result = false;
      var r = null;
      Event.stopPropagation();
      Event.preventDefault();
      this.FPopupClose = $mod.TPopupClose.pcNever;
      this.FMdx = Math.round(Event.screenX);
      this.FMdy = Math.round(Event.screenY);
      if (this.FHasCaption) {
        r = this.GetContainer().parentNode.getBoundingClientRect()}
       else r = this.GetContainer().getBoundingClientRect();
      this.FDlgX = Math.round(pas.System.Int(r.left));
      this.FDlgY = Math.round(pas.System.Int(r.top));
      this.FDown = true;
      if (!this.FCaptured$1) {
        this.FCaptured$1 = true;
        this.FMoveSpan = document.createElement("SPAN");
        this.FMoveSpan.style.setProperty("top","0");
        this.FMoveSpan.style.setProperty("left","0");
        this.FMoveSpan.style.setProperty("right","0");
        this.FMoveSpan.style.setProperty("bottom","0");
        this.FMoveSpan.style.setProperty("position","absolute");
        document.body.appendChild(this.FMoveSpan);
        document.body.addEventListener("mousemove",this.FDocMouseMovePtr);
        document.body.addEventListener("mouseup",this.FDocMouseUpPtr);
      };
      Result = true;
      return Result;
    };
    this.SetLeft = function (AValue) {
      var eh = null;
      pas["WEBLib.Controls"].TControl.SetLeft.apply(this,arguments);
      if (this.FPopup) {
        eh = this.FPopupElement;
        if (eh != null) eh.style.setProperty("left",pas.SysUtils.IntToStr(AValue) + "px");
      };
    };
    this.SetTop = function (AValue) {
      var eh = null;
      pas["WEBLib.Controls"].TControl.SetTop.apply(this,arguments);
      if (this.FPopup) {
        eh = this.FPopupElement;
        if (eh != null) eh.style.setProperty("top",pas.SysUtils.IntToStr(AValue) + "px");
      };
    };
    this.ClearMethodPointers = function () {
      pas["WEBLib.Controls"].TControl.ClearMethodPointers.call(this);
      this.FLoadedPtr = null;
      this.FUnloadPtr = null;
      this.FBeforeUnloadPtr = null;
      this.FResizePtr = null;
      this.FScrollPtr = null;
      this.FDocMouseUpPtr = null;
      this.FDocMouseMovePtr = null;
      this.FTitleDownPtr = null;
      this.FDoClickPtr = null;
      this.FKeyDownPtr$1 = null;
      this.FOrientationChangePtr = null;
    };
    this.GetMethodPointers = function () {
      pas["WEBLib.Controls"].TControl.GetMethodPointers.call(this);
      if (this.FLoadedPtr === null) {
        this.FLoadedPtr = rtl.createCallback(this,"HandleLoaded");
        this.FUnloadPtr = rtl.createCallback(this,"HandleUnload");
        this.FBeforeUnloadPtr = rtl.createCallback(this,"HandleBeforeUnload");
        this.FResizePtr = rtl.createCallback(this,"HandleResize");
        this.FScrollPtr = rtl.createCallback(this,"HandleScroll");
        this.FDocMouseUpPtr = rtl.createCallback(this,"HandleDocMouseUp");
        this.FDocMouseMovePtr = rtl.createCallback(this,"HandleDocMouseMove");
        this.FTitleDownPtr = rtl.createCallback(this,"HandleTitleDown");
        this.FDoClickPtr = rtl.createCallback(this,"HandleDoClick$1");
        this.FKeyDownPtr$1 = rtl.createCallback(this,"HandleKeyDown");
        this.FOrientationChangePtr = rtl.createCallback(this,"HandleOrientationChange");
      };
    };
    this.Resize$1 = function () {
      var i = 0;
      var ch = 0;
      var neww = 0;
      var newh = 0;
      var eh = null;
      var dr = null;
      this.FIsResizing$1 = true;
      if (this.FPopup) {
        eh = this.FPopupElement;
        dr = eh.getBoundingClientRect();
        neww = Math.round(dr.right - dr.left - 2);
        if (this.FBorder in rtl.createSet($mod.TFormBorderStyle.fbDialog,$mod.TFormBorderStyle.fbDialogSizeable)) {
          ch = this.GetCaptionHeight();
          newh = Math.round(dr.bottom - dr.top - ch - 2);
        } else newh = Math.round(dr.bottom - dr.top - 2);
      } else {
        neww = window.innerWidth;
        newh = window.innerHeight;
      };
      this.UpdateControlSize(neww,newh);
      this.AlignControl(this);
      this.DoResize();
      this.FIsResizing$1 = false;
      if (!this.IsUpdating()) {
        if ((this.FOrigRect.Left === -1) && (this.FOrigRect.Top === -1)) this.InitAnchoring();
        for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          this.GetControls(i).UpdateAnchoring();
        };
      };
    };
    this.CreateControl = function () {
      if (!this.FVisible && !this.FPopup) return;
      pas["WEBLib.Controls"].TControl.CreateControl.call(this);
    };
    this.DoClose = function (CloseAction) {
      if ((this.FModalProc != null) && (CloseAction.get() !== $mod.TCloseAction.caNone)) {
        this.FModalProc(this.FModalResult);
        this.FModalProc = null;
      };
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TControl.BindEvents.call(this);
      window.addEventListener("resize",this.FResizePtr);
      window.addEventListener("load",this.FLoadedPtr);
      document.addEventListener("scroll",this.FScrollPtr);
      window.addEventListener("unload",this.FUnloadPtr);
      window.addEventListener("beforeunload",this.FBeforeUnloadPtr);
      window.addEventListener("keydown",this.FKeyDownPtr$1);
      window.addEventListener("orientationchange",this.FOrientationChangePtr);
    };
    this.UnbindEvents = function () {
      pas["WEBLib.Controls"].TControl.UnbindEvents.call(this);
      if ((this.FLayer$1 != null) && (this.FPopupClose === $mod.TPopupClose.pcOnDeactivate)) this.FLayer$1.removeEventListener("click",this.FDoClickPtr);
      window.removeEventListener("resize",this.FResizePtr);
      window.removeEventListener("load",this.FLoadedPtr);
      document.removeEventListener("scroll",this.FScrollPtr);
      window.removeEventListener("unload",this.FUnloadPtr);
      window.removeEventListener("beforeunload",this.FBeforeUnloadPtr);
      window.removeEventListener("keywown",this.FKeyDownPtr$1);
      window.removeEventListener("orientationchange",this.FOrientationChangePtr);
    };
    this.DoCreate = function () {
      this.BeginUpdate();
      this.LoadDFMValues();
      this.Loaded();
      if (this.FOnCreate != null) this.FOnCreate(this);
      this.FCreating = false;
      this.EndUpdate();
      this.UpdateChildren(this);
      this.AlignControl(this);
      this.DoResize();
    };
    this.DoResize = function () {
      if (this.FOnResize$1 != null) this.FOnResize$1(this);
    };
    this.DoShow = function () {
      if (this.FOnShow != null) this.FOnShow(this);
    };
    this.Paint = function () {
    };
    this.HandleDoClick$1 = function (Event) {
      var Result = false;
      Event.stopPropagation();
      if (this.FPopupClose === $mod.TPopupClose.pcOnDeactivate) this.Close();
      Result = true;
      return Result;
    };
    this.HandleKeyDown = function (Event) {
      var Result = false;
      var k = 0;
      k = this.GetKeyCode(Event.key,true);
      if (!pas.System.Assigned(k)) return Result;
      if ((k === 27) && !(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) {
        this.Close();
      };
      Result = true;
      return Result;
    };
    this.HandleOrientationChange = function (Event) {
      var Result = false;
      var so = 0;
      var isPortrait = false;
      this.Resize$1();
      this.Realign();
      Result = true;
      if (this.FOnOrientationChange != null) {
        var mql = window.matchMedia("(orientation: portrait)");
        isPortrait = (mql.matches);
        if (isPortrait) {
          so = $mod.TScreenOrientation.soLandscape}
         else so = $mod.TScreenOrientation.soPortrait;
        this.FOnOrientationChange(this,so);
      };
      if (this.FOnResize$1 != null) this.FOnResize$1(this);
      return Result;
    };
    this.HandleDoResize = function () {
      var dr = null;
      var neww = 0;
      var newh = 0;
      dr = this.GetContainer().getBoundingClientRect();
      neww = Math.round(dr.right - dr.left);
      newh = Math.round(dr.bottom - dr.top);
      if ((neww !== this.FOrigWidth) || (newh !== this.FOrigHeight)) {
        this.SetWidth(neww);
        this.SetHeight(newh);
        dr = this.GetContainer().getBoundingClientRect();
        this.FOrigWidth = Math.round(dr.right - dr.left);
        this.FOrigHeight = Math.round(dr.bottom - dr.top);
        this.AlignControl(this);
      };
    };
    this.GetWidth = function () {
      var Result = 0;
      var dr = null;
      var el = null;
      if (this.FFormElement !== "") {
        el = document.getElementById(this.FFormElement);
        if (el != null) {
          dr = el.getBoundingClientRect();
          Result = Math.round(dr.right - dr.left);
          return Result;
        };
      };
      if (this.GetElementHandle() === document.body) {
        Result = window.innerWidth;
      } else {
        if (this.FPopup) {
          Result = pas["WEBLib.Controls"].TControl.GetWidth.call(this)}
         else {
          Result = Math.round(this.GetElementHandle().offsetWidth);
          if (Result === 0) Result = window.innerWidth;
        };
      };
      return Result;
    };
    this.GetHeight = function () {
      var Result = 0;
      var d = 0;
      var s = "";
      var css = null;
      var el = null;
      var dr = null;
      if (this.FFormElement !== "") {
        el = document.getElementById(this.FFormElement);
        if (el != null) {
          dr = el.getBoundingClientRect();
          Result = Math.round(dr.bottom - dr.top);
          return Result;
        };
      };
      if (this.GetElementHandle() === document.body) {
        css = window.getComputedStyle(this.GetElementHandle());
        s = css.getPropertyValue("margin-top");
        s = pas.System.Copy(s,1,s.length - 2);
        d = pas.SysUtils.StrToInt(s) - 2;
        Result = window.innerHeight - Math.max(0,d);
      } else {
        if (this.FPopup) {
          Result = pas["WEBLib.Controls"].TControl.GetHeight.call(this);
        } else {
          Result = Math.round(this.GetElementHandle().offsetHeight);
          if (Result === 0) Result = window.innerHeight;
        };
      };
      return Result;
    };
    this.GetLeft = function () {
      var Result = 0;
      var el = null;
      var dr = null;
      if (this.FPopup) {
        Result = pas["WEBLib.Controls"].TControl.GetLeft.call(this);
      } else {
        if (this.FFormElement !== "") {
          el = document.getElementById(this.FFormElement);
          if (el != null) {
            dr = el.getBoundingClientRect();
            Result = Math.round(dr.left);
          };
        } else {
          el = null;
          if (this.FFormContainer !== "") el = document.getElementById(this.FFormContainer);
          if (!(el != null)) el = this.GetElementHandle();
          Result = Math.round(el.offsetLeft);
        };
      };
      return Result;
    };
    this.GetTop = function () {
      var Result = 0;
      var el = null;
      var dr = null;
      if (this.FPopup) {
        Result = pas["WEBLib.Controls"].TControl.GetTop.call(this)}
       else {
        if (this.FFormElement !== "") {
          el = document.getElementById(this.FFormElement);
          if (el != null) {
            dr = el.getBoundingClientRect();
            Result = Math.round(dr.top);
          };
        } else {
          el = null;
          if (this.FFormContainer !== "") el = document.getElementById(this.FFormContainer);
          if (!(el != null)) el = this.GetElementHandle();
          Result = Math.round(el.offsetTop);
        };
      };
      return Result;
    };
    this.GetClientRect = function () {
      var Result = pas.Types.TRect.$new();
      var ch = 0;
      Result.$assign(pas["WEBLib.Controls"].TControl.GetClientRect.call(this));
      if (this.FHasCaption) {
        ch = this.GetCaptionHeight() - 2;
        Result.Top = Result.Top + ch;
        Result.Bottom = Result.Bottom + ch;
      };
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      var eh = null;
      var caph = null;
      if (!this.FPopup && (this.FormContainerElement() != null)) {
        Result = this.FormContainerElement();
        return Result;
      };
      Result = document.createElement("DIV");
      this.FLayer$1 = this.CreateLayer();
      document.body.appendChild(this.FLayer$1);
      eh = this.FLayer$1;
      if (this.FPopupClose === $mod.TPopupClose.pcOnDeactivate) {
        this.GetMethodPointers();
        eh.addEventListener("click",this.FDoClickPtr);
      };
      eh.style.setProperty("z-index","999999");
      if (this.FBorder === $mod.TFormBorderStyle.fbSizeable) {
        Result.style.setProperty("resize","both");
        Result.style.setProperty("overflow","auto");
      };
      this.FHasCaption = false;
      if (this.FBorder in rtl.createSet($mod.TFormBorderStyle.fbSizeable,$mod.TFormBorderStyle.fbDialog,$mod.TFormBorderStyle.fbDialogSizeable)) {
        caph = this.CreateCaption();
        Result.appendChild(caph);
      };
      return Result;
    };
    this.UpdateElement = function () {
      var clr = "";
      if (this.FCreating) return;
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if (this.IsUpdating()) return;
      if (this.GetElementHandle() != null) {
        if (this.FCaption !== "") {
          if (!this.FPopup) {
            window.document.title = this.FCaption}
           else {
            if (this.FCaptionElement != null) {
              this.FCaptionElement.innerHTML = this.FCaption;
              pas["WEBLib.Controls"].SetHTMLElementFont(this.FCaptionElement,this.FFont,!((this.FElementCaptionClassName === "") && (this.FElementFont === pas["WEBLib.Controls"].TElementFont.efProperty)));
            };
          };
        };
        clr = pas["WEBLib.Graphics"].ColorToHTML(this.FColor);
        if (this.GetContainer() != null) {
          if ((this.FColor !== -1) && (this.FElementClassName === "")) this.GetContainer().style.setProperty(pas["WEBLib.Controls"].CSSBackground,clr);
          if (this.FElementClassName !== "") this.GetContainer().style.removeProperty(pas["WEBLib.Controls"].CSSBackground);
          if ((this.FElementClassName === "") && !this.FPopup) {
            document.documentElement.style.setProperty('height','100%');
          };
          pas["WEBLib.Controls"].SetHTMLElementFont(this.GetContainer(),this.FFont,!((this.FElementClassName === "") && (this.FElementFont === pas["WEBLib.Controls"].TElementFont.efProperty)));
        };
        if (this.FPopup && !(this.FormContainerElement() != null)) {
          if (this.FShadow) {
            this.GetElementHandle().style.setProperty("box-shadow","5px 5px 5px gray");
          } else this.GetElementHandle().style.setProperty("box-shadow","");
          this.GetElementHandle().style.setProperty("border","1px solid gray");
        } else {
          this.GetElementHandle().style.setProperty("box-shadow","");
        };
      };
    };
    this.ContainerElement = function () {
      var Result = null;
      Result = this.FormContainerElement();
      return Result;
    };
    this.FormContainerElement = function () {
      var Result = null;
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        if (this.FDesignContainer != null) {
          Result = this.FDesignContainer}
         else Result = document.body;
        return Result;
      };
      if (this.FFormContainer !== "") {
        Result = document.getElementById(this.FFormContainer);
        if (!(Result != null)) Result = document.body;
      } else {
        Result = document.body;
      };
      return Result;
    };
    this.GetElementBindHandle = function () {
      var Result = null;
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        Result = window;
        return Result;
      };
      if (this.FFormContainer !== "") {
        Result = window;
      } else {
        if (!this.FPopup) {
          Result = window;
        } else Result = pas["WEBLib.Controls"].TControl.GetElementBindHandle.call(this);
      };
      return Result;
    };
    this.GetElementHandle = function () {
      var Result = null;
      if (this.FPopup) {
        Result = pas["WEBLib.Controls"].TControl.GetElementHandle.call(this)}
       else Result = this.FormContainerElement();
      return Result;
    };
    this.SetElementClassName = function (AValue) {
      pas["WEBLib.Controls"].TControl.SetElementClassName.apply(this,arguments);
      if (this.FPopup && (this.FPopupElement != null)) {
        this.FPopupElement.setAttribute("class",AValue);
      };
    };
    this.CloseQuery = function () {
      var Result = false;
      Result = true;
      if (this.FOnCloseQuery != null) this.FOnCloseQuery(this,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.LoadDFMValues = function () {
    };
    this.Init = function () {
    };
    this.IsFocused = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.GetUniqueComponentName = function (AComponent) {
      var Result = "";
      Result = this.$classname + "_" + pas["WEBLib.Controls"].FindUniqueName(AComponent.$classname);
      return Result;
    };
    this.CreateLayer = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      Result.style.setProperty("top","0");
      Result.style.setProperty("left","0");
      Result.style.setProperty("right","0");
      Result.style.setProperty("bottom","0");
      Result.style.setProperty("webkit-user-select","none");
      Result.style.setProperty("moz-user-select","none");
      Result.style.setProperty("khtml-user-select","none");
      Result.style.setProperty("ms-user-select","none");
      Result.style.setProperty("user-select","none");
      Result.style.setProperty("position","absolute");
      return Result;
    };
    this.CreateCaption = function () {
      var Result = null;
      var BarHeight = "";
      BarHeight = "22";
      this.FCaptionElement = document.createElement("DIV");
      this.FCaptionElement.innerHTML = this.FCaption;
      this.FCaptionElement.style.setProperty(pas["WEBLib.Controls"].CSSBackground,pas["WEBLib.Graphics"].ColorToHTML($mod.Application.FThemeColor));
      this.FCaptionElement.style.setProperty("color",pas["WEBLib.Graphics"].ColorToHTML($mod.Application.FThemeTextColor));
      this.FCaptionElement.style.setProperty("cursor","move");
      this.FCaptionElement.style.setProperty("height",BarHeight + "px");
      this.FCaptionElement.style.setProperty("line-height",BarHeight + "px");
      this.FCaptionElement.style.setProperty("border-bottom","1px solid black");
      this.FCaptionElement.style.setProperty("padding-left","4px");
      this.FCaptionElement.style.setProperty("-moz-user-select","none");
      this.FCaptionElement.style.setProperty("-webkit-user-select","none");
      this.FCaptionElement.style.setProperty("-ms-user-select","none");
      this.FCaptionElement.style.setProperty("user-select","none");
      this.FCaptionElement.style.setProperty("-o-user-select","none");
      if (this.FElementCaptionClassName !== "") this.FCaptionElement.setAttribute("class",this.FElementCaptionClassName);
      pas["WEBLib.Controls"].SetHTMLElementFont(this.FCaptionElement,this.FFont,!((this.FElementCaptionClassName === "") && (this.FElementFont === pas["WEBLib.Controls"].TElementFont.efProperty)));
      this.FCaptionElement.innerHTML = this.FCaption;
      this.FCaptionElement.addEventListener("mousedown",this.FTitleDownPtr);
      this.FHasCaption = true;
      Result = this.FCaptionElement;
      return Result;
    };
    this.GetCaptionHeight = function () {
      var Result = 0;
      var r = null;
      Result = 0;
      if ((this.FCaptionElement != null) && (this.FBorder in rtl.createSet($mod.TFormBorderStyle.fbDialog,$mod.TFormBorderStyle.fbDialogSizeable))) {
        r = this.FCaptionElement.getBoundingClientRect();
        Result = Math.round(r.bottom - r.top);
      };
      return Result;
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TControl.CreateInitialize.call(this);
      this.FAllowTouch = true;
      this.FModalResult = 0;
      this.FFormStyle = $mod.TFormStyle.fsNormal;
      this.FBorder = $mod.TFormBorderStyle.fbSizeable;
      this.FShadow = true;
      this.FTimerID = -1;
      this.FCaptionElement = null;
      this.SetColor(16777215);
      window.addEventListener("load",this.FLoadedPtr);
    };
    this.Create$2 = function (id) {
      this.FNoHTML = false;
      this.FCreating = true;
      this.FFormContainer = id;
      pas["WEBLib.Controls"].TControl.Create$2.call(this,id);
      this.FFormElement = "";
      this.FModalResult = 0;
      this.FFormStyle = $mod.TFormStyle.fsNormal;
      this.DoCreate();
      return this;
    };
    this.Create$5 = function (id, AReference) {
      this.FCreating = true;
      this.FFormContainer = id;
      pas["WEBLib.Controls"].TControl.Create$2.call(this,id);
      AReference.set(this);
      this.FFormElement = "";
      this.FModalResult = 0;
      this.FFormStyle = $mod.TFormStyle.fsNormal;
      this.DoCreate();
      return this;
    };
    this.Create$1 = function (AOwner) {
      this.FNoHTML = false;
      this.FCreating = true;
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      this.FFormFileName = "";
      this.FPopupMode = $mod.TPopupMode.pmNone;
      this.FPopupClose = $mod.TPopupClose.pcOnDeactivate;
      this.FPopup = true;
      this.FPopupOpacity = 1.0;
      return this;
    };
    this.CreateNew = function (AOwner, Dummy) {
      this.Create$1(AOwner);
      return this;
    };
    this.CreateNew$1 = function (AFileName) {
      this.FCreating = true;
      pas["WEBLib.Controls"].TControl.Create$2.call(this,$impl.cBodyTag);
      this.FFormFileName = AFileName;
      $mod.Application.LoadForm(this,AFileName);
      return this;
    };
    this.CreateNew$2 = function () {
      var AFileName = "";
      this.FCreating = true;
      AFileName = this.$class.ClassType().$module.$name + $impl.cHTMLExt;
      pas["WEBLib.Controls"].TControl.Create$2.call(this,$impl.cBodyTag);
      this.FFormFileName = AFileName;
      $mod.Application.LoadForm(this,AFileName);
      return this;
    };
    this.CreateNew$3 = function (AProc) {
      this.FCreatedProc = AProc;
      this.CreateNew$2();
      return this;
    };
    this.CreateNew$4 = function (AElementID, AProc) {
      var AFileName = "";
      this.FCreating = true;
      pas["WEBLib.Controls"].TControl.Create$2.call(this,AElementID);
      this.FCreatedProc = AProc;
      this.FFormElement = AElementID;
      AFileName = this.$class.ClassType().$module.$name + $impl.cHTMLExt;
      $mod.Application.LoadForm(this,AFileName);
      return this;
    };
    this.CreateDialog = function (ACaption) {
      var AFileName = "";
      this.FCreating = true;
      AFileName = this.$class.ClassType().$module.$name + $impl.cHTMLExt;
      pas["WEBLib.Controls"].TControl.Create$2.call(this,$impl.cBodyTag);
      this.SetCaption(ACaption);
      this.FPopup = true;
      this.SetBorder($mod.TFormBorderStyle.fbDialog);
      this.FFormFileName = AFileName;
      $mod.Application.LoadForm(this,AFileName);
      return this;
    };
    this.CreateDialogNew = function (ACaption) {
      var AFileName = "";
      this.FNoHTML = true;
      this.FCreating = true;
      AFileName = this.$class.ClassType().$module.$name + $impl.cHTMLExt;
      pas["WEBLib.Controls"].TControl.Create$2.call(this,$impl.cBodyTag);
      this.SetCaption(ACaption);
      this.FPopup = true;
      this.SetBorder($mod.TFormBorderStyle.fbDialog);
      this.FFormFileName = AFileName;
      return this;
    };
    this.Destroy = function () {
      if (this.FVisible) this.Close();
      if (this.FOnDestroy != null) this.FOnDestroy(this);
      pas["WEBLib.Controls"].TControl.Destroy.call(this);
      if (this.FLayer$1 != null) {
        if (this.FormContainerElement() === this.FLayer$1.parentNode) this.FormContainerElement().removeChild(this.FLayer$1);
        this.FLayer$1 = null;
      };
    };
    this.Close = function () {
      var lAction = 0;
      var el = null;
      if (this.CloseQuery()) {
        this.UnbindEvents();
        this.ClearControls();
        lAction = $mod.TCloseAction.caHide;
        if (this.FTimerID !== -1) {
          window.clearInterval(this.FTimerID);
          this.FTimerID = -1;
        };
        if (this.FOnClose != null) this.FOnClose(this,{get: function () {
            return lAction;
          }, set: function (v) {
            lAction = v;
          }});
        if (lAction !== $mod.TCloseAction.caNone) {
          if (this.FLayer$1 != null) {
            if (this.GetContainer().parentNode === this.FLayer$1) {
              this.FLayer$1.removeChild(this.GetContainer());
            } else {
              if (this.GetContainer().parentNode.parentNode === this.FLayer$1) this.FLayer$1.removeChild(this.GetContainer().parentNode);
            };
            this.FContainer = null;
            if (this.FormContainerElement() === this.FLayer$1.parentNode) {
              this.FormContainerElement().removeChild(this.FLayer$1);
            };
            this.FLayer$1 = null;
          };
          if (this.FFormFileName === "") {
            if ((this.FFormElement !== "") && (this.GetContainer() != null)) {
              this.GetContainer().innerHTML = "";
              this.FContainer = null;
            } else if (this.GetContainer() != null) {
              if (this.FormContainerElement() === this.GetContainer().parentNode) this.FormContainerElement().removeChild(this.GetContainer());
              this.FContainer = null;
            };
          } else {
            if (this.FFormElement !== "") {
              this.GetContainer().innerHTML = "";
              this.FContainer = null;
            };
          };
          if ((this.FFormElement !== this.FFormContainer) && (this.FFormElement !== "")) {
            el = document.getElementById(this.FFormElement);
            if (el != null) el.innerHTML = "";
          };
          this.DoClose({get: function () {
              return lAction;
            }, set: function (v) {
              lAction = v;
            }});
          if ((lAction === $mod.TCloseAction.caFree) && !(pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) {
            $impl.ReleaseForm(this);
            if ($mod.Application.FMainForm === this) $mod.Application.FMainForm = null;
          };
          $mod.Application.FActiveForm = this.FPrevActiveForm;
          this.SetVisible(false);
        };
      };
    };
    this.PreventDefault$1 = function () {
      this.GetElementEvent().preventDefault();
    };
    this.SetBounds = function (X, Y, AWidth, AHeight) {
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        this.Resize$1();
        this.SetBoundsInt(X,Y,AWidth,AHeight);
      } else pas["WEBLib.Controls"].TControl.SetBounds.call(this,X,Y,AWidth,AHeight);
    };
    this.SelectFirst = function () {
      if (this.GetControlsCount() > 0) this.GetControls(0).SetFocus();
    };
    this.SelectNext = function (CurControl, GoForward, CheckTabStop) {
      var i = 0;
      if (this.GetControlsCount() > 0) {
        for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (this.GetControls(i) === CurControl) {
            if (GoForward) {
              if ((i + 1) <= (this.GetControlsCount() - 1)) {
                this.GetControls(i + 1).SetFocus()}
               else this.GetControls(0).SetFocus();
            } else {
              if ((i - 1) >= 0) {
                this.GetControls(i - 1).SetFocus()}
               else this.GetControls(this.GetControlsCount() - 1).SetFocus();
            };
            break;
          };
        };
      };
    };
    this.Show = function () {
      var l = 0;
      var t = 0;
      var i = 0;
      var dr = null;
      if (this.FCreating && this.FPopup) {
        this.FCreating = false;
        this.UpdateElement();
      };
      if (this.FFormFileName === "") {
        if (!(this.GetContainer() != null)) {
          if (this.FPopup) {
            this.FContainer = this.CreateElement();
            this.FLayer$1.appendChild(this.GetContainer());
            this.FLayer$1.style.setProperty(pas["WEBLib.Controls"].CSSBackground,"silver");
          } else {
            this.FContainer = this.CreateLayer();
            document.body.appendChild(this.GetContainer());
          };
        } else {
          if (this.FPopup) {
            if (this.FPosition === $mod.TPosition.poScreenCenter) {
              l = Math.round((window.innerWidth - this.GetWidth()) / 2);
              t = Math.round((window.innerHeight - this.GetHeight()) / 2);
              this.FLeft = l;
              this.FTop = t;
            };
            this.GetContainer().style.setProperty("left",pas.SysUtils.IntToStr(this.GetLeft()) + "px");
            this.GetContainer().style.setProperty("top",pas.SysUtils.IntToStr(this.GetTop()) + "px");
            this.FLayer$1.appendChild(this.GetContainer());
          } else {
            if (this.FLayer$1 != null) {
              this.FLayer$1.appendChild(this.GetContainer());
            } else {
              document.body.appendChild(this.GetContainer());
            };
          };
        };
        if (this.FPopup) {
          if (this.FBorder === $mod.TFormBorderStyle.fbSizeable) {
            dr = this.GetContainer().getBoundingClientRect();
            this.FOrigWidth = Math.round(dr.right - dr.left);
            this.FOrigHeight = Math.round(dr.bottom - dr.top);
            this.FTimerID = window.setInterval(rtl.createCallback(this,"HandleDoResize"),100);
          } else {
            this.GetContainer().style.setProperty("resize","");
            this.GetContainer().style.setProperty("overflow","");
          };
        };
      };
      this.SetVisible(true);
      this.DoShow();
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if ((this.GetControls(i).FTabOrder === 0) && this.GetControls(i).FTabStop) this.GetControls(i).SetFocus();
      };
    };
    this.ShowModal = function () {
      var Result = 0;
      Result = this.ShowModal$1(null);
      return Result;
    };
    this.ShowModal$1 = function (AProc) {
      var Result = 0;
      if (this.FNoHTML) {
        this.FPrevActiveForm = $mod.Application.FActiveForm;
        $mod.Application.FActiveForm = this;
        $mod.Application.CreateNewForm(this,"");
      };
      Result = 0;
      this.FNoHTML = false;
      this.FModalProc = AProc;
      this.SetModalResult(0);
      this.Show();
      return Result;
    };
    this.AddCSS = function (id, css) {
      function writeStylesOnce(styleName, cssText) {
          var styleElement = document.getElementById(styleName);
          if (styleElement) {
               styleElement.innerHTML = cssText;
            return;
            }
          styleElement = document.createElement('style');
          styleElement.type = 'text/css';
          styleElement.id = styleName;
          styleElement.innerHTML = cssText;
          document.getElementsByTagName('head')[0].appendChild(styleElement);
      }
      writeStylesOnce(id,css);
    };
    this.RemoveCSS = function (id) {
      var el = null;
      el = document.getElementById(id);
      if (el != null) document.head.removeChild(el);
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$Class("TForm");
  $mod.$rtti.$ClassRef("TFormClass",{instancetype: $mod.$rtti["TForm"]});
  rtl.createClass($mod,"TForm",$mod.TCustomForm,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("CSSLibrary",0,$mod.$rtti["TCSSLibrary"],"FCSSLibrary","FCSSLibrary");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("FormContainer",2,rtl.string,"FFormContainer","SetFormContainer");
    $r.addProperty("FormStyle",3,$mod.$rtti["TFormStyle"],"GetFormStyle","SetFormStyle");
    $r.addProperty("Menu",0,pas["WEBLib.Controls"].$rtti["TCustomControl"],"FMenu","FMenu");
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnClose",0,$mod.$rtti["TCloseEvent"],"FOnClose","FOnClose");
    $r.addProperty("OnCloseQuery",0,$mod.$rtti["TCloseQueryEvent"],"FOnCloseQuery","FOnCloseQuery");
    $r.addProperty("OnCreate",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnCreate","FOnCreate");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnDeactivate",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDeactivate","FOnDeactivate");
    $r.addProperty("OnDestroy",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDestroy","FOnDestroy");
    $r.addProperty("OnResize",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnResize$1","FOnResize$1");
    $r.addProperty("OnShow",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnShow","FOnShow");
    $r.addProperty("OnScroll",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnScroll","FOnScroll");
    $r.addProperty("OnOrientationChange",0,$mod.$rtti["TOrientationChangeEvent"],"FOnOrientationChange","FOnOrientationChange");
    $r.addProperty("OnPaint",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnPaint","FOnPaint");
    $r.addProperty("OnTouchStart",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchStart","FOnTouchStart");
    $r.addProperty("OnTouchMove",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchMove","FOnTouchMove");
    $r.addProperty("OnTouchEnd",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchEnd","FOnTouchEnd");
    $r.addProperty("OnUnload",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnUnload","FOnUnload");
  });
  rtl.createClass($mod,"TPopupMenu",pas.Classes.TComponent,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTouchManager",pas.Classes.TComponent,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TCustomFrame",pas["WEBLib.Controls"].TCustomHTMLDiv,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomHTMLDiv.$init.call(this);
      this.FAlign$1 = 0;
      this.FAutoScroll = false;
      this.FAutoSize = false;
      this.FBiDiMode = 0;
      this.FConstraints = null;
      this.FCtl3D = false;
      this.FDockSite = false;
      this.FDragCursor = 0;
      this.FDragKind = 0;
      this.FDragMode = 0;
      this.FOnAlignInsertBefore = null;
      this.FOnAlignPosition = null;
      this.FOnCanResize = null;
      this.FOnConstrainedResize = null;
      this.FOnContextPopup = null;
      this.FOnDockDrop = null;
      this.FOnDockOver = null;
      this.FOnEndDock = null;
      this.FOnGesture = null;
      this.FOnGetSiteInfo = null;
      this.FOnMouseActivate = null;
      this.FOnMouseWheelDown = null;
      this.FOnMouseWheelUp = null;
      this.FOnStartDock = null;
      this.FOnUnDock = null;
      this.FPadding = null;
      this.FParentBackground = false;
      this.FParentBiDiMode = false;
      this.FParentCtl3D = false;
      this.FPopupMenu = null;
      this.FTouch = null;
      this.FTouchManager = null;
    };
    this.$final = function () {
      this.FConstraints = undefined;
      this.FOnAlignInsertBefore = undefined;
      this.FOnAlignPosition = undefined;
      this.FOnCanResize = undefined;
      this.FOnConstrainedResize = undefined;
      this.FOnContextPopup = undefined;
      this.FOnDockDrop = undefined;
      this.FOnDockOver = undefined;
      this.FOnEndDock = undefined;
      this.FOnGesture = undefined;
      this.FOnGetSiteInfo = undefined;
      this.FOnMouseActivate = undefined;
      this.FOnMouseWheelDown = undefined;
      this.FOnMouseWheelUp = undefined;
      this.FOnStartDock = undefined;
      this.FOnUnDock = undefined;
      this.FPadding = undefined;
      this.FPopupMenu = undefined;
      this.FTouch = undefined;
      this.FTouchManager = undefined;
      pas["WEBLib.Controls"].TCustomHTMLDiv.$final.call(this);
    };
    this.setConstraints = function (AValue) {
      this.FConstraints.Assign(AValue);
    };
    this.SetPopupMenu = function (AValue) {
      this.FPopupMenu.Assign(AValue);
    };
    this.SetTouchManager = function (AValue) {
      this.FTouchManager.Assign(AValue);
    };
    this.LoadDFMValues = function () {
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.call(this,AOwner);
      this.FConstraints = $mod.TSizeConstraints.$create("Create$1",[this]);
      this.FPopupMenu = $mod.TPopupMenu.$create("Create$1",[this]);
      this.FTouchManager = $mod.TTouchManager.$create("Create$1",[this]);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FConstraints");
      rtl.free(this,"FPopupMenu");
      rtl.free(this,"FTouchManager");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.LoadFromForm = function () {
      this.LoadDFMValues();
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TFrame",$mod.TCustomFrame,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",0,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign$1","FAlign$1",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("AutoScroll",0,rtl.boolean,"FAutoScroll","FAutoScroll",{Default: false});
    $r.addProperty("AutoSize",0,rtl.boolean,"FAutoSize","FAutoSize",{Default: false});
    $r.addProperty("BiDiMode",4,$mod.$rtti["TBiDiMode"],"FBiDiMode","FBiDiMode");
    $r.addProperty("Constraints",2,$mod.$rtti["TSizeConstraints"],"FConstraints","setConstraints");
    $r.addProperty("DockSite",0,rtl.boolean,"FDockSite","FDockSite",{Default: false});
    $r.addProperty("DoubleBuffered",0,rtl.boolean,"FDoubleBuffered","FDoubleBuffered",{Default: false});
    $r.addProperty("DragCursor",0,pas["WEBLib.Controls"].$rtti["TCursor"],"FDragCursor","FDragCursor",{Default: 12});
    $r.addProperty("DragKind",0,pas["WEBLib.Controls"].$rtti["TDragKind"],"FDragKind","FDragKind",{Default: pas["WEBLib.Controls"].TDragKind.dkDrag});
    $r.addProperty("DragMode",0,pas["WEBLib.Controls"].$rtti["TDragMode"],"FDragMode","FDragMode",{Default: pas["WEBLib.Controls"].TDragMode.dmManual});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("Ctl3D",4,rtl.boolean,"FCtl3D","FCtl3D");
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Padding",0,pas["WEBLib.Controls"].$rtti["TPadding"],"FPadding","FPadding");
    $r.addProperty("ParentBackground",0,rtl.boolean,"FParentBackground","FParentBackground",{Default: true});
    $r.addProperty("ParentBiDiMode",0,rtl.boolean,"FParentBiDiMode","FParentBiDiMode",{Default: true});
    $r.addProperty("ParentColor",2,rtl.boolean,"FParentColor","SetParentColor",{Default: false});
    $r.addProperty("ParentCtl3D",0,rtl.boolean,"FParentCtl3D","FParentCtl3D",{Default: true});
    $r.addProperty("ParentDoubleBuffered",0,rtl.boolean,"FParentDoubleBuffered","FParentDoubleBuffered",{Default: true});
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("ParentShowHint",0,rtl.boolean,"FParentShowHint","FParentShowHint");
    $r.addProperty("PopupMenu",2,$mod.$rtti["TPopupMenu"],"FPopupMenu","SetPopupMenu");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("Touch",2,$mod.$rtti["TTouchManager"],"FTouch","SetTouchManager");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("OnAlignInsertBefore",0,$mod.$rtti["TAlignInsertBeforeEvent"],"FOnAlignInsertBefore","FOnAlignInsertBefore");
    $r.addProperty("OnAlignPosition",0,$mod.$rtti["TAlignPositionEvent"],"FOnAlignPosition","FOnAlignPosition");
    $r.addProperty("OnCanResize",0,$mod.$rtti["TCanResizeEvent"],"FOnCanResize","FOnCanResize");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnConstrainedResize",0,$mod.$rtti["TConstrainedResizeEvent"],"FOnConstrainedResize","FOnConstrainedResize");
    $r.addProperty("OnContextPopup",0,$mod.$rtti["TContextPopupEvent"],"FOnContextPopup","FOnContextPopup");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnDockDrop",0,$mod.$rtti["TDockDropEvent"],"FOnDockDrop","FOnDockDrop");
    $r.addProperty("OnDockOver",0,$mod.$rtti["TDockOverEvent"],"FOnDockOver","FOnDockOver");
    $r.addProperty("OnDragDrop",0,pas["WEBLib.Controls"].$rtti["TDragDropEvent"],"FOnDragDrop","FOnDragDrop");
    $r.addProperty("OnDragOver",0,pas["WEBLib.Controls"].$rtti["TDragOverEvent"],"FOnDragOver","FOnDragOver");
    $r.addProperty("OnEndDock",0,pas["WEBLib.Controls"].$rtti["TEndDragEvent"],"FOnEndDock","FOnEndDock");
    $r.addProperty("OnEndDrag",0,pas["WEBLib.Controls"].$rtti["TEndDragEvent"],"FonEndDrag","FonEndDrag");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
    $r.addProperty("OnGesture",0,$mod.$rtti["TGestureEvent"],"FOnGesture","FOnGesture");
    $r.addProperty("OnGetSiteInfo",0,$mod.$rtti["TGetSiteInfoEvent"],"FOnGetSiteInfo","FOnGetSiteInfo");
    $r.addProperty("OnMouseActivate",0,$mod.$rtti["TMouseActivateEvent"],"FOnMouseActivate","FOnMouseActivate");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseWheel",0,pas["WEBLib.Controls"].$rtti["TMouseWheelEvent"],"FOnMouseWheel","FOnMouseWheel");
    $r.addProperty("OnMouseWheelDown",0,$mod.$rtti["TMouseWheelUpDownEvent"],"FOnMouseWheelDown","FOnMouseWheelDown");
    $r.addProperty("OnMouseWheelUp",0,$mod.$rtti["TMouseWheelUpDownEvent"],"FOnMouseWheelUp","FOnMouseWheelUp");
    $r.addProperty("OnResize",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnResize","FOnResize");
    $r.addProperty("OnStartDock",0,$mod.$rtti["TStartDockEvent"],"FOnStartDock","FOnStartDock");
    $r.addProperty("OnStartDrag",0,pas["WEBLib.Controls"].$rtti["TStartDragEvent"],"FOnStartDrag","FOnStartDrag");
    $r.addProperty("OnUnDock",0,$mod.$rtti["TUnDockEvent"],"FOnUnDock","FOnUnDock");
  });
  rtl.recNewT($mod,"TAppplicationError",function () {
    this.AMessage = "";
    this.AFile = "";
    this.ALineNumber = 0;
    this.AColNumber = 0;
    this.AStack = "";
    this.AError = null;
    this.$eq = function (b) {
      return (this.AMessage === b.AMessage) && (this.AFile === b.AFile) && (this.ALineNumber === b.ALineNumber) && (this.AColNumber === b.AColNumber) && (this.AStack === b.AStack) && (this.AError === b.AError);
    };
    this.$assign = function (s) {
      this.AMessage = s.AMessage;
      this.AFile = s.AFile;
      this.ALineNumber = s.ALineNumber;
      this.AColNumber = s.AColNumber;
      this.AStack = s.AStack;
      this.AError = s.AError;
      return this;
    };
    var $r = $mod.$rtti.$Record("TAppplicationError",{});
    $r.addField("AMessage",rtl.string);
    $r.addField("AFile",rtl.string);
    $r.addField("ALineNumber",rtl.longint);
    $r.addField("AColNumber",rtl.longint);
    $r.addField("AStack",rtl.string);
    $r.addField("AError",pas.JS.$rtti["TJSObject"]);
  });
  this.TOnlineStatus = {"0": "osOnline", osOnline: 0, "1": "osOffline", osOffline: 1};
  $mod.$rtti.$Enum("TOnlineStatus",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TOnlineStatus});
  $mod.$rtti.$MethodVar("TAppplicationErrorEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AError",$mod.$rtti["TAppplicationError"]],["Handled",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TApplicationHashChangeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AHash",rtl.string],["Handled",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TApplicationOnlineChangeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AStatus",$mod.$rtti["TOnlineStatus"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TApplicationCallBackEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AQuery",rtl.string]]), methodkind: 0});
  rtl.createClass($mod,"TApplication",pas["WEBLib.Controls"].TControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TControl.$init.call(this);
      this.FMainFormOnTaskBar = false;
      this.FCanCreateForm = false;
      this.FAppInitializing = false;
      this.FLastReq = null;
      this.FActiveForm = null;
      this.FMainForm = null;
      this.FInitFormClassName = "";
      this.FFormStack = null;
      this.FParameters = null;
      this.FIsRedirect = false;
      this.FLanguage = 0;
      this.FOnImageCacheReady = null;
      this.FOnError = null;
      this.FOnHashChange = null;
      this.FAutoFormRoute = false;
      this.FErrorType = 0;
      this.FClientConnector = null;
      this.FOnOnlineChange = null;
      this.FThemeTextColor = 0;
      this.FThemeColor = 0;
      this.FThemeButtonClassName = "";
      this.FOnOAuthToken = null;
      this.FOnOAuthCallBack = null;
      this.FOnFontCacheReady = null;
    };
    this.$final = function () {
      this.FLastReq = undefined;
      this.FActiveForm = undefined;
      this.FMainForm = undefined;
      this.FFormStack = undefined;
      this.FParameters = undefined;
      this.FOnImageCacheReady = undefined;
      this.FOnError = undefined;
      this.FOnHashChange = undefined;
      this.FClientConnector = undefined;
      this.FOnOnlineChange = undefined;
      this.FOnOAuthToken = undefined;
      this.FOnOAuthCallBack = undefined;
      this.FOnFontCacheReady = undefined;
      pas["WEBLib.Controls"].TControl.$final.call(this);
    };
    this.DoFormLoad = function (Event) {
      var Result = false;
      var LResponse = "";
      LResponse = Event.target.responseText;
      this.CreateNewForm(this.FActiveForm,LResponse);
      Result = true;
      return Result;
    };
    this.DoFormAbort = function (Event) {
      var Result = false;
      pas["WEBLib.Dialogs"].ShowMessage("Failed to load form HTML template file");
      Result = true;
      return Result;
    };
    this.DoHandleError = function (Event) {
      var Result = false;
      var err = $mod.TAppplicationError.$new();
      var el = null;
      var sp = null;
      var x = null;
      var msg = "";
      var s = "";
      err.AMessage = Event.message;
      err.AFile = Event.filename;
      err.ALineNumber = Event.lineno;
      err.AColNumber = Event.colno;
      err.AError = Event.error;
      err.AStack = "";
      s = "";
      if (Event.error != null) {
        if (Event.error.stack) {
          err.AStack = Event.error.stack;
        }
        if (Event.error.fMessage) {
          err.AMessage = Event.error.fMessage;
        };
        function objToString (obj) {
        var str = '';
        for (var p in obj) {
            if (obj.hasOwnProperty(p)) {
                str += p + '::' + obj[p] + '\n';
            }
        }
        return str;
        }
        s = objToString(Event.error);
      };
      Result = false;
      msg = "ERROR<br>" + err.AMessage + " | " + s + err.AStack + "<BR> at " + err.AFile + " [" + pas.SysUtils.IntToStr(err.ALineNumber) + ":" + pas.SysUtils.IntToStr(err.AColNumber) + "]";
      var $tmp1 = this.FErrorType;
      if ($tmp1 === $mod.TApplicationErrorType.aeFooter) {
        el = document.getElementById("tmserrormessage");
        if (el != null) {
          rtl.asExt(el.firstChild,HTMLElement).innerHTML = msg;
        } else {
          el = document.createElement("DIV");
          el.setAttribute("id","tmserrormessage");
          el.style.setProperty("position","absolute");
          el.style.setProperty("font-family","Courier");
          el.style.setProperty("font-size","8pt");
          el.style.setProperty("bottom","0");
          el.style.setProperty("width","100%");
          el.style.setProperty("height","100px");
          el.style.setProperty("background","#ff0000");
          el.style.setProperty("color","#ffffff");
          document.body.style.setProperty("padding","0");
          document.body.style.setProperty("margin","0");
          sp = document.createElement("SPAN");
          sp.style.setProperty("margin-left","4px");
          sp.style.setProperty("float","left");
          sp.style.setProperty("overflow","hidden");
          sp.style.setProperty("display","block");
          sp.innerHTML = msg;
          el.appendChild(sp);
          x = document.createElement("SPAN");
          x.style.setProperty("font-family","Courier");
          x.style.setProperty("font-size","8pt");
          x.style.setProperty("font-weight","bold");
          x.style.setProperty("position","absolute");
          x.style.setProperty("width","20px");
          x.style.setProperty("vertical-align","top");
          x.style.setProperty("cursor","pointer");
          x.style.setProperty("text-align","right");
          x.style.setProperty("right","4px");
          x.style.setProperty("display","block");
          x.innerHTML = "X";
          x.onclick = rtl.createCallback(this,"DoErrorClose");
          el.appendChild(x);
          document.body.appendChild(el);
        };
      } else if ($tmp1 === $mod.TApplicationErrorType.aeAlert) {
        window.alert(msg)}
       else if ($tmp1 === $mod.TApplicationErrorType.aeDialog) {
        this.AddControlLink("googlematerial","https:\/\/fonts.googleapis.com\/icon?family=Material+Icons");
        pas["WEBLib.Dialogs"].MessageDlg(msg,pas["WEBLib.Dialogs"].TMsgDlgType.mtError,rtl.createSet(pas["WEBLib.Dialogs"].TMsgDlgBtn.mbOK),null);
      };
      if (this.FOnError != null) this.FOnError(this,$mod.TAppplicationError.$clone(err),{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.DoHashChange = function (Event) {
      var Result = false;
      var s = "";
      var fc = null;
      var frm = null;
      var bdy = null;
      var Handled = false;
      Result = true;
      if (!this.FAutoFormRoute) return Result;
      s  = location.hash;
      pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,1);
      Handled = false;
      if (this.FOnHashChange != null) this.FOnHashChange(this,s,{get: function () {
          return Handled;
        }, set: function (v) {
          Handled = v;
        }});
      if (Handled) return Result;
      if (s === "") s = this.FInitFormClassName;
      if (s !== "") {
        if (this.FInitFormClassName === "") this.FInitFormClassName = this.FActiveForm.$classname;
        fc = pas.Classes.GetClass(s);
        if (fc != null) {
          bdy = document.body;
          this.CreateForm$4(fc,bdy,{get: function () {
              return frm;
            }, set: function (v) {
              frm = v;
            }});
        };
      };
      return Result;
    };
    this.DoErrorClose = function (Event) {
      var Result = false;
      document.body.removeChild(Event.target.parentElement);
      Result = true;
      return Result;
    };
    this.DoUpdateOnlineStatus = function (Event) {
      var Result = false;
      Result = true;
      if (this.FOnOnlineChange != null) {
        if (window.navigator.onLine) {
          this.FOnOnlineChange(this,$mod.TOnlineStatus.osOnline)}
         else this.FOnOnlineChange(this,$mod.TOnlineStatus.osOffline);
      };
      return Result;
    };
    this.SetLanguage = function (Value) {
      this.FLanguage = Value;
      this.ReloadForm();
    };
    this.GetIsOnline = function () {
      var Result = false;
      Result = window.navigator.onLine;
      return Result;
    };
    this.GetIsMobile = function () {
      var Result = false;
      var mob = false;
      function TestMobile() {
            var check = false;
           (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
           return check;
           };
      
          mob = TestMobile();
      Result = mob;
      return Result;
    };
    this.CreateNewForm = function (AForm, HTML) {
      var eh = null;
      var op = null;
      var span = null;
      var childspan = null;
      var formspan = null;
      var l = 0;
      var t = 0;
      var w = 0;
      var h = 0;
      var LCreatedProc = null;
      var LCaptionDiv = null;
      var LCaptionHeight = 0;
      if (this.FMainForm === null) this.FMainForm = AForm;
      span = null;
      formspan = null;
      LCaptionHeight = 0;
      if (!this.FActiveForm.FPopup && (this.FActiveForm.FFormElement !== "")) {
        this.FActiveForm.FLayer$1 = null;
        eh = document.getElementById(this.FActiveForm.FFormElement);
        if (eh != null) {
          eh.innerHTML = HTML;
          if (this.FActiveForm.FElementClassName === "") eh.style.setProperty(pas["WEBLib.Controls"].CSSBackground,pas["WEBLib.Graphics"].ColorToHTML(this.FActiveForm.FColor));
        };
      } else {
        this.FActiveForm.ClearControls();
        this.FActiveForm.FLayer$1 = this.FActiveForm.CreateLayer();
        document.body.appendChild(this.FActiveForm.FLayer$1);
        eh = this.FActiveForm.FLayer$1;
        if (this.FActiveForm.FPopup && (this.FActiveForm.FPopupOpacity < 1)) {
          op = this.FActiveForm.CreateLayer();
          op.style.setProperty(pas["WEBLib.Controls"].CSSBackground,"black");
          op.style.setProperty("opacity",pas["WEBLib.WebTools"].DoubleToHTML(this.FActiveForm.FPopupOpacity));
          op.style.setProperty(pas["WEBLib.Controls"].CSSZIndex,"999998");
          eh.appendChild(op);
        };
        span = document.createElement("DIV");
        span.style.setProperty(pas["WEBLib.Controls"].CSSZIndex,"999999");
        this.FActiveForm.FPopupElement = span;
        if (this.FActiveForm.FBorder === $mod.TFormBorderStyle.fbDialogSizeable) {
          span.style.setProperty("resize","both");
          span.style.setProperty("overflow","auto");
          try
          {
          var frm = this.FActiveForm;
          const ro = new ResizeObserver( function(entries)  {
             entries.forEach( function(entry) {
               frm.HandleObserver();
               } );
          });
            // Observe the scrollingElement for when the window gets resized
            ro.observe(span);
          }
          catch(err)
          {
            span.style.removeProperty('resize');
            span.style.removeProperty('overflow');
          };
        };
        if (this.FActiveForm.FElementClassName !== "") span.setAttribute("class",this.FActiveForm.FElementClassName);
        if (this.FActiveForm.FShadow && this.FActiveForm.FPopup) span.style.setProperty("box-shadow","3px 3px 3px silver");
        eh.appendChild(span);
        if (this.FActiveForm.FBorder in rtl.createSet($mod.TFormBorderStyle.fbDialog,$mod.TFormBorderStyle.fbDialogSizeable)) {
          this.FActiveForm.GetMethodPointers();
          LCaptionDiv = this.FActiveForm.CreateCaption();
          span.appendChild(LCaptionDiv);
          childspan = document.createElement("SPAN");
          childspan.setAttribute("id","childspan");
          span.appendChild(childspan);
          formspan = childspan;
          LCaptionHeight = 22;
        } else {
          formspan = span;
        };
        formspan.innerHTML = HTML;
        this.FActiveForm.FContainer = formspan;
      };
      this.FActiveForm.Init();
      this.FActiveForm.LoadDFMValues();
      if (this.FActiveForm.FLayer$1 != null) {
        if (!this.FActiveForm.FPopup) {
          if (this.FActiveForm.FElementClassName === "") {
            if (this.FActiveForm.FColor !== -1) {
              eh.style.setProperty(pas["WEBLib.Controls"].CSSBackground,pas["WEBLib.Graphics"].ColorToHTML(this.FActiveForm.FColor))}
             else eh.style.setProperty(pas["WEBLib.Controls"].CSSBackground,"white");
          } else eh.setAttribute("class",this.FActiveForm.FElementClassName);
        };
      };
      if ((span != null) && (this.FActiveForm.FFormContainer === "") && this.FActiveForm.FPopup) {
        span.style.setProperty("position","absolute");
        l = Math.round((window.innerWidth - this.FActiveForm.GetWidth()) / 2);
        t = Math.round((window.innerHeight - this.FActiveForm.GetHeight()) / 2);
        w = this.FActiveForm.GetWidth();
        h = this.FActiveForm.GetHeight() + LCaptionHeight;
        if (this.FActiveForm.FElementClassName === "") {
          span.style.setProperty(pas["WEBLib.Controls"].CSSBackground,pas["WEBLib.Graphics"].ColorToHTML(this.FActiveForm.FColor));
          span.style.setProperty("border","1px Black solid");
        };
        span.style.setProperty("top",pas.SysUtils.IntToStr(t) + "px");
        span.style.setProperty("left",pas.SysUtils.IntToStr(l) + "px");
        span.style.setProperty("width",pas.SysUtils.IntToStr(w) + "px");
        span.style.setProperty("height",pas.SysUtils.IntToStr(h) + "px");
      };
      if (formspan != null) this.ActivateChildScripts(formspan);
      if (this.FActiveForm.FCreatedProc != null) {
        LCreatedProc = this.FActiveForm.FCreatedProc;
        this.FActiveForm.FCreatedProc = null;
        LCreatedProc(this.FActiveForm);
      };
      if (this.FActiveForm.FOnCreate != null) this.FActiveForm.FOnCreate(this.FActiveForm);
      this.FActiveForm.Realign();
      this.FActiveForm.Loaded();
      this.FActiveForm.InitAnchoring();
      this.FActiveForm.UpdateChildAnchoring();
      this.FActiveForm.FCreating = false;
      this.FActiveForm.UpdateElement();
      if (!this.FActiveForm.EventsBound()) this.FActiveForm.BindEvents();
      this.FActiveForm.Resize$1();
      this.FActiveForm.DoShow();
    };
    this.GetFormExtension = function () {
      var Result = "";
      if (this.FLanguage !== pas["WEBLib.Lang"].TUILanguage.lNone) {
        Result = "_" + pas["WEBLib.Lang"].GetLanguageISO639_1Code(this.FLanguage) + $impl.cHTMLExt}
       else Result = $impl.cHTMLExt;
      return Result;
    };
    var sExternalBrowserAuthorizationOK = '<div class="text2">Application succesfully authorized<\/div>You can close this browser window';
    var sExternalBrowserAuthorizationFailed = '<div class="text2">Application authorization failed<\/div><br\/>Please try again.';
    var LB = "\r\n";
    var ImageFail = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeA" + "AAACXBIWXMAAA7DAAAOwwHHb6hkAAABtElEQVR4nO2bUY7CMAxEhz0NB+EgrDjXCg6yB+E4+9NKCAiN" + "7XHcjf1+ED+Z6ahNHScFiqIoBNwvp+v9crpG+3hG6+sgFQFwXv7ejj+\/31JBDyy+ugN4ElkJD8Hqqyu" + "AhohYjA3D12YAGyIiMSYsXx8D6BTpFmPB9NUMQCjSJcaA7ettAEqRTTErHr5eAjCKfBSz4OXryzhgiz" + "OzWCJd\/Fs8HoFHzHeCtxf2JNgt3MMID8zXoMpAtDarEDIbidJklMJUQ6MDty6GNDSNRdxtluWwhReDU" + "fONKADAx2jkZCsOAOAaXn4pY2let6oAAN\/qTIG61lAHAOwmBFO1aQoACA\/BXGqbAwDCQqCsOCkBAMND" + "oC23aQEAw0Kg9hqoAQDuIdAbLfQAALcQXFptLgEA9BDc+oxeLbF\/Qz0C7AFTT4KpX4OpC6HUpXDqxVD" + "q5fBOLn5lbEMkdUssdVM0dVs89cZI6q2x1JujqbfHUx+Q2MPFj\/LidUqsKajB05NXS4y6Zl\/GurHGe6" + "QOSpLF5jgqqxSb67C0UGzO4\/KdYnN\/MLEhluOTmYZY+MWvDPU122dzRVHk5g+X6Lw5aVkK9AAAAABJRU5ErkJggg==";
    var ImageSuccess = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaX" + "HeAAAACXBIWXMAAA7DAAAOwwHHb6hkAAACC0lEQVR4nO2Zv3GDMBSHv+QyQEbICM4EOW+Q9BS4o2QTU" + "9LZBQNkg6zgETyCR0iRkOMIAv3Xk0+\/zsiI931nI3iCkpKSkpKSkpKSkpJ7SDN0x2bo3nW\/\/xCymNhp" + "hu4E1MAN2PdVe9k6524ETODHXIHXvmpva+c9BqwpWhbgAV6Ar61zsxeggB+z+x1XJmsBG\/Bj6mboWtV" + "gtvcATfhpPvqq\/ZwfzFKABTwoVobsBFjCj7kyWxmyugc4wsPCypCNAA\/wY\/L7C3iEP\/dVe5geEC8gJD" + "wIFxAaHgQLiAEPQgXEggeBAmLCgzABseFBkIAU8CBEQCp4ECAgJTwYChibCzYXWpmv9jCVFTwYCJgVa" + "31BxXwucapFS4CiWOsLS4EHDQEbxRoXIAkeNgRoFqtdiDR4WBFgWOxmQRLhQdEQsSi2bobuqBqUCg8L" + "vwDHYg991Z49zjeNd3iYCfBU7J8E6fAAT7PPOw9znpqhA3hDODz8F7Dnp2vqKmJ1O8ogQeFh+R7wjB8" + "JrgkOD4plUICEKPCw\/hyQSkI0eNh+EowtISo86L0LxJIQHR703wZDS0gCD2b9gFASksGDeUfIt4Sk8G" + "DRE\/QoITk8WDZFPUgQAQ8OXWEHCWLgwbEtbiFBFDx42BcwkCAOHjxtjGhIEAkPHneGViSIhQfPW2MLE" + "kTDQ4C9wYmEi3T4kpKSkm+5ax+YhPsUTQAAAABJRU5ErkJggg==";
    var PlaceHolderImage = "#PLACEHOLDERIMAGE#";
    var PlaceHolderText = "#PLACEHOLDERTEXT#";
    var PlaceHolderColor = "#PLACEHOLDERCOLOR#";
    var AuthHTMLTemplate = "<!doctype html>" + LB + '<html lang="en">' + LB + "<head>" + LB + "  <title>Authentication Result<\/title>" + LB + '  <meta name="viewport" content="width=device-width, initial-scale=1">' + LB + "<\/head>" + LB + "<body>" + LB + "<style>" + LB + "  hr" + LB + "  {" + LB + "    border: none;" + LB + "    height: 1px;" + LB + "    background-color: rgb(171, 171, 171);" + LB + "  }" + LB + "  div.container" + LB + "  {" + LB + "    position: fixed;" + LB + "    font-family: Arial;" + LB + "    font-size: 12pt;" + LB + "    max-width: 100%;" + LB + "    max-height: 100%;" + LB + "    top: 50%;" + LB + "    left: 50%;" + LB + "    transform: translate(-50%, -50%);" + LB + "  }" + LB + "  div.section" + LB + "  {" + LB + "    display: inline-block;" + LB + "    margin: 15px;" + LB + "    padding: 5px;" + LB + "    float: left;" + LB + "  }" + LB + "  div.image img" + LB + "  {" + LB + "    height: 100%;" + LB + "  }" + LB + "  div.text" + LB + "  {" + LB + "    padding-top: 15px;" + LB + "  }" + LB + "  div.text2" + LB + "  {" + LB + "    font-size: 18pt;" + LB + "    color: #PLACEHOLDERCOLOR#;" + LB + "  }" + LB + "  span.title" + LB + "  {" + LB + "    font-size: 26px;" + LB + "  }" + LB + "<\/style>" + LB + '  <div class="container">' + LB + '  <div class="section image">' + LB + '    <img src="#PLACEHOLDERIMAGE#">' + LB + "  <\/div>" + LB + '  <div class="section text">' + LB + "  #PLACEHOLDERTEXT#" + LB + "  <\/div>" + LB + "  <\/div>" + LB + " <\/body>" + LB + "<\/html>";
    this.GetAuthorizationPageHTML = function (AAuthorizationSuccess) {
      var $Self = this;
      var Result = "";
      function ReplacePlaceHolders(APlaceHolders, APlaceHolderValues) {
        var Result = "";
        var I = 0;
        var s = "";
        s = AuthHTMLTemplate;
        for (var $l1 = 0, $end2 = rtl.length(APlaceHolders) - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          s = pas.SysUtils.StringReplace(s,APlaceHolders[I],APlaceHolderValues[I],rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
        };
        Result = s;
        return Result;
      };
      if (AAuthorizationSuccess) {
        Result = ReplacePlaceHolders([PlaceHolderImage,PlaceHolderText,PlaceHolderColor],[ImageSuccess,sExternalBrowserAuthorizationOK,"rgb(104, 164, 144)"])}
       else Result = ReplacePlaceHolders([PlaceHolderImage,PlaceHolderText,PlaceHolderColor],[ImageFail,sExternalBrowserAuthorizationFailed,"rgb(216, 99, 68)"]);
      return Result;
    };
    this.ReloadForm = function () {
      var $Self = this;
      var lFileName = "";
      function DoStatusCreate(Event) {
        var Result = false;
        var i = 0;
        var ctl = null;
        var s = "";
        var sl = null;
        var response = "";
        response = Event.target.responseText;
        sl = pas.Classes.TStringList.$create("Create$1");
        for (var $l1 = $Self.FActiveForm.GetControlsCount() - 1; $l1 >= 0; $l1--) {
          i = $l1;
          ctl = $Self.FActiveForm.GetControls(i);
          ctl.PersistinHTML();
          ctl.GetElementHandle().id = ctl.FName;
          s = ctl.FName + "=" + ctl.GetElementHandle().outerHTML;
          sl.Add(s);
        };
        for (var $l2 = $Self.FActiveForm.GetControlsCount() - 1; $l2 >= 0; $l2--) {
          i = $l2;
          ctl = $Self.FActiveForm.GetControls(i);
          $Self.FActiveForm.RemoveComponent(ctl);
          ctl = rtl.freeLoc(ctl);
        };
        $Self.FActiveForm.ClearControls();
        $Self.FActiveForm.UnbindEvents();
        document.body.innerHTML = response;
        $Self.FActiveForm.CreateControl();
        $Self.FActiveForm.DoCreate();
        $Self.FActiveForm.Init();
        for (var $l3 = $Self.FActiveForm.GetControlsCount() - 1; $l3 >= 0; $l3--) {
          i = $l3;
          ctl = $Self.FActiveForm.GetControls(i);
          s = sl.GetValue(ctl.FName);
          ctl.GetElementHandle().outerHTML = s;
          ctl.FContainer = document.getElementById(ctl.FName);
          ctl.BindEvents();
        };
        sl = rtl.freeLoc(sl);
        $Self.FActiveForm.DoShow();
        Result = true;
        return Result;
      };
      lFileName = $Self.FActiveForm.$module.$name + $Self.GetFormExtension();
      $Self.FLastReq = new XMLHttpRequest();
      $Self.FLastReq.addEventListener("load",DoStatusCreate);
      $Self.FLastReq.open("GET",lFileName);
      $Self.FLastReq.setRequestHeader("Cache-Control","no-cache");
      $Self.FLastReq.send();
    };
    this.ActivateChildScripts = function (AElement) {
      function nodeScriptReplace(node) {
                  if ( nodeScriptIs(node) === true ) {
                          node.parentNode.replaceChild( nodeScriptClone(node) , node );
                  }
                  else {
                          var i        = 0;
                          var children = node.childNodes;
                          while ( i < children.length ) {
                                  nodeScriptReplace( children[i++] );
                          }
                  }
      
                  return node;
          }
          function nodeScriptIs(node) {
                  return node.tagName === 'SCRIPT';
          }
          function nodeScriptClone(node){
                  var script  = document.createElement("script");
                  script.text = node.innerHTML;
                  for( var i = node.attributes.length-1; i >= 0; i-- ) {
                          script.setAttribute( node.attributes[i].name, node.attributes[i].value );
                  }
                  return script;
          }
          nodeScriptReplace(AElement);
    };
    this.PushForm = function (AForm) {
      var i = 0;
      for (var $l1 = 0, $end2 = AForm.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        AForm.GetControls(i).PersistinHTML();
      };
      AForm.FFormContent = document.body.innerHTML;
      for (var $l3 = 0, $end4 = AForm.GetControlsCount() - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        AForm.GetControls(i).DisableTab();
      };
      this.FFormStack.Add(AForm);
    };
    this.PopForm = function () {
      var Result = null;
      var i = 0;
      var frm = "";
      if (this.FFormStack.GetCount() > 0) {
        Result = rtl.getObject(this.FFormStack.Get(this.FFormStack.GetCount() - 1));
        frm = Result.FFormContent;
        this.FFormStack.Delete(this.FFormStack.GetCount() - 1);
        document.body.innerHTML = frm;
        Result.InitFromHTML();
        Result.BindEvents();
        for (var $l1 = 0, $end2 = Result.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          Result.GetControls(i).HookElement();
        };
        for (var $l3 = 0, $end4 = Result.GetControlsCount() - 1; $l3 <= $end4; $l3++) {
          i = $l3;
          Result.GetControls(i).RecreateCanvas();
          Result.GetControls(i).InternalResize();
        };
        $mod.Application.FActiveForm = Result;
      };
      return Result;
    };
    this.LockForm = function (AForm) {
      var i = 0;
      for (var $l1 = 0, $end2 = AForm.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        AForm.GetControls(i).DisableTab();
      };
    };
    this.UnLockForm = function (AForm) {
      var i = 0;
      for (var $l1 = 0, $end2 = AForm.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        AForm.GetControls(i).EnableTab();
      };
    };
    this.Create$1 = function (AOwner) {
      this.FFormStack = pas.Classes.TList.$create("Create$1");
      this.FParameters = pas.Classes.TStringList.$create("Create$1");
      this.FMainForm = null;
      this.FActiveForm = null;
      this.FInitFormClassName = "";
      this.FIsRedirect = false;
      this.FAutoFormRoute = false;
      this.FThemeColor = 14917120;
      this.FThemeTextColor = 16777215;
      window.addEventListener("error",rtl.createCallback(this,"DoHandleError"));
      this.FErrorType = $mod.TApplicationErrorType.aeSilent;
      this.FErrorType = $mod.TApplicationErrorType.aeFooter;
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FFormStack");
      rtl.free(this,"FParameters");
      pas["WEBLib.Controls"].TControl.Destroy.call(this);
    };
    this.CreateNewForm$1 = function (AInstanceClass) {
      var Result = null;
      Result = AInstanceClass.$create("Create$2",[$impl.cBodyTag]);
      return Result;
    };
    this.CreateNewForm$2 = function (AInstanceClass, AElementID) {
      var Result = null;
      var el = null;
      var AForm = null;
      el = document.getElementById(AElementID);
      AForm = AInstanceClass.$create("Create$2",[AElementID]);
      AForm.FDesignContainer = el;
      AForm.SetFormContainer(AElementID);
      AForm.FFormElement = AElementID;
      AForm.CreateControl();
      AForm.FContainer = el;
      AForm.Init();
      Result = AForm;
      return Result;
    };
    this.CreateForm = function (AInstanceClass, AReference) {
      this.CreateForm$2(AInstanceClass,$impl.cBodyTag,AReference,null);
    };
    this.CreateForm$1 = function (AInstanceClass, AElementID, AReference) {
      this.CreateForm$2(AInstanceClass,AElementID,AReference,null);
    };
    this.CreateForm$2 = function (AInstanceClass, AElementID, AReference, AProc) {
      var $Self = this;
      var LFileName = "";
      function DoStatusCreate(Event) {
        var Result = false;
        var LElem = null;
        var LForm = null;
        var LResponse = "";
        var LIsBody = false;
        LResponse = Event.target.responseText;
        LIsBody = AElementID === $impl.cBodyTag;
        if (LIsBody) {
          LElem = document.body}
         else LElem = document.getElementById(AElementID);
        LElem.innerHTML = LResponse;
        LForm = AInstanceClass.$create("Create$5",[AElementID,AReference]);
        LForm.FFormFileName = LFileName;
        if (LForm.FFormContainer === "") LForm.SetFormContainer(AElementID);
        if (!LIsBody) {
          LForm.FFormElement = AElementID;
          LForm.FContainer = LElem;
        };
        LForm.CreateControl();
        LForm.Init();
        LForm.FPrevActiveForm = $Self.FActiveForm;
        $Self.FActiveForm = LForm;
        if ($Self.FMainForm === null) $Self.FMainForm = LForm;
        if (AProc != null) AProc(LForm);
        Result = true;
        $Self.ActivateChildScripts(LElem);
        $Self.FActiveForm.DoShow();
        $Self.FActiveForm.Resize$1();
        return Result;
      };
      if ($Self.FIsRedirect) return;
      if ($Self.FAppInitializing) {
        if ($Self.FCanCreateForm) {
          $Self.FCanCreateForm = false}
         else return;
      };
      LFileName = AInstanceClass.$module.$name + $Self.GetFormExtension();
      $Self.FLastReq = new XMLHttpRequest();
      $Self.FLastReq.addEventListener("load",DoStatusCreate);
      $Self.FLastReq.open("GET",LFileName);
      $Self.FLastReq.setRequestHeader("Cache-Control","no-cache");
      $Self.FLastReq.send();
    };
    this.CreateForm$3 = function (AInstanceClass, AReference) {
      var lModule = null;
      lModule = AInstanceClass.$create("Create$1",[this]);
      AReference.set(lModule);
    };
    this.CreateForm$4 = function (AInstanceClass, AElement, AReference) {
      this.CreateForm$2(AInstanceClass,AElement.id,AReference,null);
    };
    this.LoadForm = function (AForm, AFormFile) {
      AForm.FPrevActiveForm = this.FActiveForm;
      this.FActiveForm = AForm;
      if (this.FMainForm === null) this.FMainForm = AForm;
      this.FLastReq = new XMLHttpRequest();
      this.FLastReq.addEventListener("load",rtl.createCallback(this,"DoFormLoad"));
      this.FLastReq.addEventListener("abort",rtl.createCallback(this,"DoFormAbort"));
      this.FLastReq.open("GET",AFormFile);
      this.FLastReq.send();
    };
    this.ChangeCSS = function (id, href) {
      var styleElement = document.getElementById(id);
      if (styleElement) {
        styleElement.href = href;
        return;
      };
    };
    this.InsertCSS = function (id, href) {
      var styleElement = null;
      styleElement = document.getElementById(id);
      if (styleElement != null) {
        styleElement.href = href;
        return;
      };
      styleElement = document.createElement("link");
      styleElement.id = id;
      styleElement.rel = 'stylesheet';
      styleElement.href = href;
      document.getElementsByTagName("head").item(0).appendChild(styleElement);
    };
    this.RemoveCSS = function (id) {
      var styleElement = null;
      styleElement = document.getElementById(id);
      if (styleElement != null) {
        styleElement.parentNode.removeChild(styleElement);
      };
    };
    this.Initialize = function () {
      var query = "";
      var token = "";
      var p = 0;
      var b = false;
      this.FCanCreateForm = true;
      this.FAppInitializing = true;
      this.FParameters.Clear();
      query = window.location.href;
      this.InitFormatSettings(pas["WEBLib.WebTools"].GetBrowserLocale());
      this.FParameters.SetDelimiter("&");
      this.FParameters.FStrictDelimiter = true;
      p = pas.System.Pos("?",query);
      if (p > 0) query = pas.System.Copy(query,p + 1,query.length);
      this.FParameters.SetDelimitedText(query);
      b = (window.name == "Authentication");
      if ((this.FParameters.IndexOfName("oauthcallback") !== -1) || b) {
        if (this.FOnOAuthCallBack != null) this.FOnOAuthCallBack(this,query);
        this.FIsRedirect = true;
        document.body.innerHTML = this.GetAuthorizationPageHTML(true);
        return;
      };
      if (this.FParameters.IndexOfName("code") !== -1) {
        if (this.FOnOAuthToken != null) this.FOnOAuthToken(this,query);
        this.FIsRedirect = true;
        token = this.FParameters.GetValue("code");
        if (window.opener && window.opener.processAuthData){
          window.opener.processAuthData(token);
          window.close();
        };
      };
      window.addEventListener("hashchange",rtl.createCallback(this,"DoHashChange"));
      window.addEventListener("online",rtl.createCallback(this,"DoUpdateOnlineStatus"));
      window.addEventListener("offline",rtl.createCallback(this,"DoUpdateOnlineStatus"));
      if (this.FParameters.IndexOfName("access_token") !== -1) {
        this.FIsRedirect = true;
        token = this.FParameters.GetValue("access_token");
        window.opener.processAuthData(token);
        window.close();
      };
    };
    this.InitFormatSettings = function (BrowserLocale) {
      var timestr = "";
      var i = 0;
      var locale = "";
      locale = BrowserLocale;
      pas.SysUtils.FormatSettings.SetShortDateFormat(pas["WEBLib.WebTools"].GetLocaleShortDateFormat(locale));
      if (pas.System.Pos("\/",pas.SysUtils.FormatSettings.GetShortDateFormat()) > 0) pas.SysUtils.FormatSettings.SetDateSeparator("\/");
      if (pas.System.Pos(".",pas.SysUtils.FormatSettings.GetShortDateFormat()) > 0) pas.SysUtils.FormatSettings.SetDateSeparator(".");
      if (pas.System.Pos("-",pas.SysUtils.FormatSettings.GetShortDateFormat()) > 0) pas.SysUtils.FormatSettings.SetDateSeparator("-");
      var event = new Date('Jan 1, 1980 06:07:08 GMT+00:00');
      var loc = "";
      if (locale == "") { loc = navigator.language; } else
      { loc = locale; }
      timestr = event.toLocaleTimeString(loc);
      if (pas.System.Pos(":",timestr) > 0) pas.SysUtils.FormatSettings.SetTimeSeparator(":");
      if (pas.System.Pos(".",timestr) > 0) pas.SysUtils.FormatSettings.SetTimeSeparator(".");
      if (pas.System.Pos("-",timestr) > 0) pas.SysUtils.FormatSettings.SetTimeSeparator("-");
      for (i = 1; i <= 7; i++) {
        pas.SysUtils.ShortDayNames[i - 1] = pas["WEBLib.WebTools"].GetLocaleShortDayName(i,locale);
        pas.SysUtils.LongDayNames[i - 1] = pas["WEBLib.WebTools"].GetLocaleLongDayName(i,locale);
      };
      for (i = 1; i <= 12; i++) {
        pas.SysUtils.ShortMonthNames[i - 1] = pas["WEBLib.WebTools"].GetLocaleShortMonthName(i,locale);
        pas.SysUtils.LongMonthNames[i - 1] = pas["WEBLib.WebTools"].GetLocaleLongMonthName(i,locale);
      };
      pas.SysUtils.FormatSettings.SetDecimalSeparator(pas["WEBLib.WebTools"].GetLocaleDecimalSeparator(""));
      if (pas.SysUtils.FormatSettings.GetDecimalSeparator() === ".") {
        pas.SysUtils.FormatSettings.SetThousandSeparator(",")}
       else pas.SysUtils.FormatSettings.SetThousandSeparator(".");
    };
    this.ReceiveMessageFromClient = function (AMessage) {
      if (this.FClientConnector != null) this.FClientConnector.Receive(AMessage);
    };
    this.RouteForm = function (AParameter) {
      var frm = null;
      var fc = null;
      fc = pas.Classes.GetClass(AParameter);
      $mod.Application.CreateForm(fc,{get: function () {
          return frm;
        }, set: function (v) {
          frm = v;
        }});
    };
    this.Run = function () {
      this.FCanCreateForm = true;
      this.FAppInitializing = false;
    };
    this.RunScript = function (Source) {
      eval(Source);
    };
    this.Navigate = function (AURL, ATarget) {
      if (ATarget === $mod.TNavigationTarget.ntBlank) {
        window.open(AURL,"_blank")}
       else window.location.href = AURL;
    };
    this.Download = function (AURL) {
      window.location.href = AURL;
    };
    this.DownloadTextFile = function (AText, AFileName) {
      var element = document.createElement('a');
      element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(AText));
      if (AFileName != ''){
        element.setAttribute('download', AFileName);
      }
      element.style.display = 'none';
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    };
    this.DownloadBinaryFile = function (Data, AFileName) {
      var element = document.createElement('a');
      var blob = new Blob([Data], {type: "octet/stream"})
      var url = window.URL.createObjectURL(blob);
      element.href = url;
      if (AFileName != ''){
        element.setAttribute('download', AFileName);
      }
      element.style.display = 'none';
      document.body.appendChild(element);
      element.click();
      document.body.removeChild(element);
    };
    this.EXEName = function () {
      var Result = "";
      Result = window.document.location.href;
      return Result;
    };
    this.IDETheme = function () {
      var Result = "";
      var s = "";
      Result = "";
      if (!($mod.VSIDE != null)) return Result;
      s = pas["WEBLib.Forms"].VSIDE.theme;
      Result = s;
      return Result;
    };
    this.IDECSS = function () {
      var Result = "";
      Result = "";
      if (this.IDETheme() === "vscode-light") {
        Result = ".IDECaption { background-color: #F0F0F0 !important; color: #555555 !important; border: 1px solid #DDDDDD !important}" + "\r\n" + ".IDEBkg { background-color: white !important; color: #555555 !important; border: 1px solid #DDDDDD !important}" + "\r\n" + ".IDEButton { background-color: #FAFAFA !important; color: #555555 !important; border: 1px solid #DDDDDD !important}" + "\r\n" + ".IDEButton:hover {background-color:#F0F0F0 !important}";
      };
      if (this.IDETheme() === "vscode") {
        Result = ".IDECaption,.IDEButton { background-color: #3F3E43 !important; color: #FFFFFF !important; border: 1px solid #35353A !important}" + "\r\n" + ".IDEBkg { background-color: #2A2A2C !important; color: #A9ACB4 !important; border: 1px solid #35353A !important}" + "\r\n" + ".IDEButton:hover {background-color:#434857 !important}";
      };
      return Result;
    };
    this.NeedsFormRouting = function () {
      var Result = false;
      var s = "";
      Result = pas["WEBLib.WebTools"].HasQueryParam("form",{get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }});
      if (Result) this.RouteForm(s);
      return Result;
    };
    this.ObjectURL = function (AFile) {
      var Result = "";
      var res = "";
      res = URL.createObjectURL(AFile);
      Result = res;
      return Result;
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.GetParentForm = function (AControl) {
    var Result = null;
    var FOwner = null;
    Result = null;
    FOwner = AControl;
    while ((FOwner != null) && !$mod.TCustomForm.isPrototypeOf(FOwner)) {
      FOwner = FOwner.FOwner;
    };
    if ((FOwner != null) && $mod.TCustomForm.isPrototypeOf(FOwner)) Result = rtl.as(FOwner,$mod.TCustomForm);
    return Result;
  };
  this.Log = function (v) {
    console.log(v);
  };
  this.Log$1 = function (arr) {
    var i = 0;
    var s = "";
    var su = "";
    s = "[";
    for (var $l1 = 0, $end2 = rtl.length(arr) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      function isPrimitive(test) {
              return (test !== Object(test));
            };
      
            if (isPrimitive(arr[i])) {
               var su = arr[i].toString();
               if (s != "[") { s = s + ","; }
               s = s + su;
               }
            else
            {
              console.log(arr[i]);
               if (s != "[") { s = s + ","; }
               s = s + "#object";
            };
    };
    s = s + "]";
    $mod.Log(s);
  };
  this.Application = null;
  this.HandShakeScript = null;
  this.VSIDE = null;
  $mod.$init = function () {
    $mod.HandShakeScript = document.createElement("script");
    $mod.HandShakeScript.id = "HandShakeScript";
    $mod.HandShakeScript.type = "text\/javascript";
    $mod.HandShakeScript.innerHTML = "var IDE = null;" + "\r\n" + 'var TMSWEBCoreClientIdentifier = "unknown";' + "\r\n" + 'var TMSWEBCoreOAuthCallback = "unknown";' + "\r\n" + "function HandShake(cid){" + "\r\n" + "  TMSWEBCoreClientIdentifier = cid;" + "\r\n" + "}";
    document.body.appendChild($mod.HandShakeScript);
    $mod.Application = $mod.TApplication.$create("Create$1",[null]);
  };
},["WEBLib.Dialogs","WEBLib.WebTools","WEBLib.JSON","Math"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.cBodyTag = "body";
  $impl.cHTMLExt = ".html";
  $impl.ReleaseForm = function (AForm) {
    AForm = rtl.freeLoc(AForm);
    AForm = null;
  };
});
rtl.module("WEBLib.StdCtrls",["System","Classes","WEBLib.Controls","SysUtils","Web","WEBLib.Graphics","Types","WEBLib.WebTools","WEBLib.Forms"],function () {
  "use strict";
  var $mod = this;
  this.TEditCharCase = {"0": "wecLowerCase", wecLowerCase: 0, "1": "wecNormal", wecNormal: 1, "2": "wecMixedCase", wecMixedCase: 2, "3": "wecUpperCase", wecUpperCase: 3};
  $mod.$rtti.$Enum("TEditCharCase",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TEditCharCase});
  this.TCheckBoxState = {"0": "cbChecked", cbChecked: 0, "1": "cbGrayed", cbGrayed: 1, "2": "cbUnchecked", cbUnchecked: 2};
  $mod.$rtti.$Enum("TCheckBoxState",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TCheckBoxState});
  this.TDateTimeKind = {"0": "dtkDate", dtkDate: 0, "1": "dtkTime", dtkTime: 1};
  $mod.$rtti.$Enum("TDateTimeKind",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TDateTimeKind});
  this.TEllipsisPosition = {"0": "epEndEllipsis", epEndEllipsis: 0, "1": "epNone", epNone: 1};
  $mod.$rtti.$Enum("TEllipsisPosition",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TEllipsisPosition});
  this.TTextLayout = {"0": "tlTop", tlTop: 0, "1": "tlCenter", tlCenter: 1, "2": "tlBottom", tlBottom: 2};
  $mod.$rtti.$Enum("TTextLayout",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTextLayout});
  this.TSysLinkType = {"0": "sltID", sltID: 0, "1": "sltURL", sltURL: 1};
  $mod.$rtti.$Enum("TSysLinkType",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TSysLinkType});
  this.TAutoCompletion = {"0": "acOff", acOff: 0, "1": "acHonorificPrefix", acHonorificPrefix: 1, "2": "aGivenName", aGivenName: 2, "3": "acAdditionalName", acAdditionalName: 3, "4": "acFamilyName", acFamilyName: 4, "5": "acHonorificSuffix", acHonorificSuffix: 5, "6": "acNickName", acNickName: 6, "7": "acEmail", acEmail: 7, "8": "acUserName", acUserName: 8, "9": "acNewPassword", acNewPassword: 9, "10": "acCurrentPassword", acCurrentPassword: 10, "11": "acOrganizationTitle", acOrganizationTitle: 11, "12": "acOrganization", acOrganization: 12, "13": "acStreetAddress", acStreetAddress: 13, "14": "acAddressLine1", acAddressLine1: 14, "15": "acAddressLine2", acAddressLine2: 15, "16": "acAddressLine3", acAddressLine3: 16, "17": "acAddressLevel1", acAddressLevel1: 17, "18": "acAddressLevel2", acAddressLevel2: 18, "19": "acAddressLevel3", acAddressLevel3: 19, "20": "acAddressLevel4", acAddressLevel4: 20, "21": "acCountry", acCountry: 21, "22": "acCountryName", acCountryName: 22, "23": "acPostalCode", acPostalCode: 23, "24": "acCCName", acCCName: 24, "25": "acCCGivenName", acCCGivenName: 25, "26": "acCCAdditionalName", acCCAdditionalName: 26, "27": "acCCFamilyName", acCCFamilyName: 27, "28": "acCCNumber", acCCNumber: 28, "29": "acExpiry", acExpiry: 29, "30": "acExpiryMonth", acExpiryMonth: 30, "31": "acExpiryYear", acExpiryYear: 31, "32": "ccCSC", ccCSC: 32, "33": "acType", acType: 33, "34": "acTransactionCurrency", acTransactionCurrency: 34, "35": "acTransactionAmount", acTransactionAmount: 35, "36": "acLanguage", acLanguage: 36, "37": "acBirthday", acBirthday: 37, "38": "acBirthdayDay", acBirthdayDay: 38, "39": "acBirthDayMonth", acBirthDayMonth: 39, "40": "acBirthDayYear", acBirthDayYear: 40, "41": "acSex", acSex: 41, "42": "acTelephone", acTelephone: 42, "43": "acTelephoneCountryCode", acTelephoneCountryCode: 43, "44": "acTelephoneNational", acTelephoneNational: 44, "45": "acTelephoneAreaCode", acTelephoneAreaCode: 45, "46": "acTelephoneLocal", acTelephoneLocal: 46, "47": "acTelephoneExtension", acTelephoneExtension: 47, "48": "acIMPP", acIMPP: 48, "49": "acURL", acURL: 49, "50": "acPhoto", acPhoto: 50};
  $mod.$rtti.$Enum("TAutoCompletion",{minvalue: 0, maxvalue: 50, ordtype: 1, enumtype: this.TAutoCompletion});
  this.TEditType = {"0": "weString", weString: 0, "1": "weFloat", weFloat: 1, "2": "weHex", weHex: 2, "3": "weNumeric", weNumeric: 3, "4": "weSignedFloat", weSignedFloat: 4, "5": "weSignedNumeric", weSignedNumeric: 5, "6": "weSearch", weSearch: 6};
  $mod.$rtti.$Enum("TEditType",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TEditType});
  this.THTMLType = {"0": "tLABELTAG", tLABELTAG: 0, "1": "tSPAN", tSPAN: 1, "2": "tDIV", tDIV: 2, "3": "tH1", tH1: 3, "4": "tH2", tH2: 4, "5": "tH3", tH3: 5, "6": "tH4", tH4: 6, "7": "tH5", tH5: 7, "8": "tH6", tH6: 8, "9": "tP", tP: 9};
  $mod.$rtti.$Enum("THTMLType",{minvalue: 0, maxvalue: 9, ordtype: 1, enumtype: this.THTMLType});
  $mod.$rtti.$MethodVar("TLinkClickEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Link",rtl.string],["LinkType",$mod.$rtti["TSysLinkType"]]]), methodkind: 0});
  rtl.createClass($mod,"TCustomLabel",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FContent = null;
      this.FAutoSize = false;
      this.FEllipsisPosition = 0;
      this.FWordWrap = false;
      this.FAlignment = 0;
      this.FLayout = 0;
      this.FTransparent = false;
      this.FHTMLType = 0;
      this.FFocusControl = null;
      this.FShowAccelChar = false;
      this.FColor$1 = 0;
      this.FElementLabelClassName = "";
    };
    this.$final = function () {
      this.FContent = undefined;
      this.FFocusControl = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetLayout = function (Value) {
      if (this.FLayout !== Value) {
        this.FLayout = Value;
        this.UpdateElementVisual();
      };
    };
    this.SetAlignment = function (Value) {
      if (this.FAlignment !== Value) {
        this.FAlignment = Value;
        this.UpdateElementVisual();
      };
    };
    this.GetContentHandle = function () {
      var Result = null;
      Result = this.FContent;
      return Result;
    };
    this.SetTransparent = function (Value) {
      if (this.FTransparent !== Value) {
        this.FTransparent = Value;
        this.UpdateElementVisual();
      };
    };
    this.SetHTMLType = function (Value) {
      if (this.FHTMLType !== Value) {
        this.FHTMLType = Value;
        if (this.FHTMLType in rtl.createSet(null,$mod.THTMLType.tH1,$mod.THTMLType.tH6)) this.SetElementFont(pas["WEBLib.Controls"].TElementFont.efCSS);
        if ((this.GetElementHandle() != null) && (this.FContent != null)) {
          this.GetElementHandle().removeChild(this.FContent);
          this.FContent = this.CreateLabelElement();
          this.GetElementHandle().appendChild(this.FContent);
          this.UpdateElement();
        };
      };
    };
    this.SetColorEx = function (Value) {
      this.FColor$1 = Value;
      if ((pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && (this.FColor$1 !== 16777215)) this.SetTransparent(false);
      this.UpdateElement();
    };
    this.SetElementLabelClassName = function (Value) {
      if (this.FElementLabelClassName !== Value) {
        this.FElementLabelClassName = Value;
        this.UpdateElement();
      };
    };
    this.GetOuterWidth = function () {
      var Result = 0;
      Result = this.GetWidth();
      return Result;
    };
    this.GetOuterHeight = function () {
      var Result = 0;
      Result = this.GetHeight();
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("DIV");
      this.FContent = this.CreateLabelElement();
      Result.appendChild(this.FContent);
      return Result;
    };
    this.CreateLabelElement = function () {
      var Result = null;
      Result = null;
      var $tmp1 = this.FHTMLType;
      if ($tmp1 === $mod.THTMLType.tSPAN) {
        Result = document.createElement("SPAN")}
       else if ($tmp1 === $mod.THTMLType.tDIV) {
        Result = document.createElement("DIV")}
       else if ($tmp1 === $mod.THTMLType.tH1) {
        Result = document.createElement("H1")}
       else if ($tmp1 === $mod.THTMLType.tH2) {
        Result = document.createElement("H2")}
       else if ($tmp1 === $mod.THTMLType.tH3) {
        Result = document.createElement("H3")}
       else if ($tmp1 === $mod.THTMLType.tH4) {
        Result = document.createElement("H4")}
       else if ($tmp1 === $mod.THTMLType.tH5) {
        Result = document.createElement("H5")}
       else if ($tmp1 === $mod.THTMLType.tH6) {
        Result = document.createElement("H6")}
       else if ($tmp1 === $mod.THTMLType.tLABELTAG) {
        Result = document.createElement("LABEL")}
       else if ($tmp1 === $mod.THTMLType.tP) Result = document.createElement("P");
      return Result;
    };
    this.GetDisplayText = function () {
      var Result = "";
      Result = this.FCaption;
      return Result;
    };
    this.CanShowFocus = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.BindElement = function () {
      this.FContent = this.GetContainer().firstElementChild;
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
      if (this.FShowAccelChar && (this.FFocusControl != null)) this.UpdateElementData();
    };
    this.UpdateAutoSize = function () {
      if (this.FAutoSize) {
        if ((this.GetElementHandle() != null) && (this.FAlign === pas["WEBLib.Controls"].TAlign.alNone)) {
          this.SetWidth(-1);
          this.SetHeight(-1);
        };
        this.FEllipsisPosition = $mod.TEllipsisPosition.epNone;
      };
    };
    this.UpdateElementData = function () {
      var lTxt = "";
      var acc = "";
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      acc = "";
      if (this.FShowAccelChar) {
        lTxt = pas["WEBLib.WebTools"].ProcessAccelerator(this.GetDisplayText(),{get: function () {
            return acc;
          }, set: function (v) {
            acc = v;
          }})}
       else lTxt = this.GetDisplayText();
      if (this.GetIsLinked() && (lTxt === "")) return;
      if (this.GetContentHandle() != null) {
        this.GetContentHandle().innerHTML = lTxt}
       else this.GetElementHandle().innerHTML = lTxt;
      if ((acc !== "") && (this.FFocusControl != null)) {
        this.GetContentHandle().setAttribute("accesskey",acc);
        this.GetContentHandle().setAttribute("for",this.FFocusControl.GetID());
      };
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if (this.IsUpdating()) return;
      if (this.GetElementHandle() != null) {
        if (this.FVisible && !this.FAutoSize) this.GetElementHandle().style.setProperty("display","table");
        this.GetElementHandle().setAttribute("zindex","1");
        if (this.FAutoSize && (this.FAlign === pas["WEBLib.Controls"].TAlign.alNone) && !(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) {
          this.GetElementHandle().style.setProperty("overflow","")}
         else this.GetElementHandle().style.setProperty("overflow","hidden");
      };
      if (this.GetContentHandle() != null) {
        var $tmp1 = this.FLayout;
        if ($tmp1 === $mod.TTextLayout.tlTop) {
          this.GetContentHandle().style.setProperty("vertical-align","top")}
         else if ($tmp1 === $mod.TTextLayout.tlCenter) {
          this.GetContentHandle().style.setProperty("vertical-align","middle")}
         else if ($tmp1 === $mod.TTextLayout.tlBottom) this.GetContentHandle().style.setProperty("vertical-align","bottom");
        var $tmp2 = this.FAlignment;
        if ($tmp2 === pas.Classes.TAlignment.taCenter) {
          this.GetContentHandle().style.setProperty("text-align","center")}
         else if ($tmp2 === pas.Classes.TAlignment.taRightJustify) this.GetContentHandle().style.setProperty("text-align","right");
        pas["WEBLib.Controls"].SetHTMLElementColor(this.GetElementHandle(),this.FColor$1,this.FTransparent && ((this.FColor$1 === 16777215) || (this.FColor$1 === -1)));
        pas["WEBLib.Controls"].SetHTMLElementColor(this.GetContentHandle(),this.FColor$1,this.FTransparent && ((this.FColor$1 === 16777215) || (this.FColor$1 === -1)));
        this.GetContentHandle().style.setProperty("display","table-cell");
        if (this.FElementClassName === "") {
          if (this.FEnabled && (this.FElementFont === pas["WEBLib.Controls"].TElementFont.efProperty) && !this.GetIsLinked()) {
            this.GetContentHandle().style.setProperty("color",pas["WEBLib.Graphics"].ColorToHTML(this.FFont.FColor))}
           else this.GetContentHandle().style.removeProperty("color");
          this.SetElementPointer(this.GetContentHandle(),this.FCursor);
          pas["WEBLib.Controls"].SetHTMLElementFont(this.GetContentHandle(),this.FFont,!((this.FElementFont === pas["WEBLib.Controls"].TElementFont.efProperty) && !this.GetIsLinked()));
        };
        if (this.FElementLabelClassName !== "") {
          this.GetContentHandle().setAttribute("class",this.FElementLabelClassName)}
         else this.GetContentHandle().removeAttribute("class");
        if ((this.FElementPosition === pas["WEBLib.Controls"].TElementPosition.epAbsolute) || (this.FWidthStyle === pas["WEBLib.Controls"].TSizeStyle.ssAbsolute)) {
          if (this.FEllipsisPosition === $mod.TEllipsisPosition.epNone) {
            this.GetContentHandle().style.setProperty("text-overflow","clip")}
           else this.GetContentHandle().style.setProperty("text-overflow","ellipsis");
        } else this.GetContentHandle().style.removeProperty("text-overflow");
        if (this.FWordWrap) {
          this.GetContentHandle().style.setProperty("white-space","normal")}
         else this.GetContentHandle().style.setProperty("white-space","nowrap");
        this.GetElementHandle().style.setProperty("user-select","");
        if (this.FCursor === 0) this.GetElementHandle().style.setProperty("cursor","");
        if (this.FAutoSize && (this.FAlign === pas["WEBLib.Controls"].TAlign.alNone) && !(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) {
          this.GetElementHandle().style.removeProperty("width");
          this.GetElementHandle().style.removeProperty("height");
        };
      };
    };
    this.UpdateElementSize = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementSize.call(this);
      if (this.FAutoSize && (this.GetElementHandle() != null)) {
        if (!(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) {
          this.GetElementHandle().style.removeProperty("width");
          this.GetElementHandle().style.removeProperty("height");
        };
      };
    };
    this.SetAutoSize = function (AValue) {
      if (this.FAutoSize !== AValue) {
        this.FAutoSize = AValue;
        this.UpdateAutoSize();
        this.UpdateElement();
      };
    };
    this.SetCaption = function (AValue) {
      if (this.FCaption !== AValue) {
        pas["WEBLib.Controls"].TCustomControl.SetCaption.call(this,AValue);
        this.UpdateAutoSize();
        this.UpdateElement();
      };
    };
    this.SetEllipsisPosition = function (AValue) {
      if (this.FEllipsisPosition !== AValue) {
        this.FEllipsisPosition = AValue;
        if (this.FEllipsisPosition !== $mod.TEllipsisPosition.epNone) this.FAutoSize = false;
        this.UpdateElement();
      };
    };
    this.GetWidth = function () {
      var Result = 0;
      if (this.FAutoSize && (this.GetElementHandle() != null) && (this.FParent != null) && !(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) {
        Result = Math.round(this.GetElementHandle().offsetWidth);
        if (Result === 0) Result = pas["WEBLib.Controls"].TControl.GetWidth.call(this);
      } else Result = pas["WEBLib.Controls"].TControl.GetWidth.call(this);
      return Result;
    };
    this.GetHeight = function () {
      var Result = 0;
      if (this.FAutoSize && (this.GetElementHandle() != null) && (this.FParent != null) && !(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) {
        Result = Math.round(this.GetElementHandle().offsetHeight);
        if (Result === 0) Result = pas["WEBLib.Controls"].TControl.GetHeight.call(this);
      } else Result = pas["WEBLib.Controls"].TControl.GetHeight.call(this);
      return Result;
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FAutoSize = true;
      this.FLayout = $mod.TTextLayout.tlTop;
      this.FEllipsisPosition = $mod.TEllipsisPosition.epNone;
      this.FColor$1 = 16777215;
      this.FTransparent = true;
      this.FAlignment = pas.Classes.TAlignment.taLeftJustify;
      this.SetTabStop(false);
      this.FShowAccelChar = true;
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TLabel",$mod.TCustomLabel,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("Alignment",2,pas.Classes.$rtti["TAlignment"],"FAlignment","SetAlignment",{Default: pas.Classes.TAlignment.taLeftJustify});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAutoSize",{Default: true});
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor$1","SetColorEx",{Default: 16777215});
    $r.addProperty("EllipsisPosition",2,$mod.$rtti["TEllipsisPosition"],"FEllipsisPosition","SetEllipsisPosition",{Default: $mod.TEllipsisPosition.epNone});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementLabelClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementLabelClassName","SetElementLabelClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("FocusControl",0,pas["WEBLib.Controls"].$rtti["TWinControl"],"FFocusControl","FFocusControl");
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("HTMLType",2,$mod.$rtti["THTMLType"],"FHTMLType","SetHTMLType",{Default: $mod.THTMLType.tLABELTAG});
    $r.addProperty("Layout",2,$mod.$rtti["TTextLayout"],"FLayout","SetLayout",{Default: $mod.TTextLayout.tlTop});
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("ShowAccelChar",0,rtl.boolean,"FShowAccelChar","FShowAccelChar",{Default: true});
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TextDirection",0,pas["WEBLib.Controls"].$rtti["TTextDirection"],"FTextDirection","FTextDirection");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Transparent",2,rtl.boolean,"FTransparent","SetTransparent",{Default: true});
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("WordWrap",0,rtl.boolean,"FWordWrap","FWordWrap",{Default: false});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnTouchStart",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchStart","FOnTouchStart");
    $r.addProperty("OnTouchEnd",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchEnd","FOnTouchEnd");
    $r.addProperty("OnTouchMove",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchMove","FOnTouchMove");
    $r.addProperty("OnTouchCancel",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchCancel","FOnTouchCancel");
  });
  rtl.createClass($mod,"TWebLabel",$mod.TLabel,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TCustomInput",pas["WEBLib.Controls"].TCustomControl,function () {
    this.GetInputType = function () {
      var Result = "";
      Result = "EDIT";
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("INPUT");
      Result.setAttribute("type",this.GetInputType());
      return Result;
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if ((this.GetContainer() != null) && !this.GetIsLinked()) {
        this.GetContainer().style.setProperty("-moz-box-sizing","border-box");
        this.GetContainer().style.setProperty("-webkit-box-sizing","border-box");
        this.GetContainer().style.setProperty("box-sizing","border-box");
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.SetShowFocus(true);
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TCustomEdit",$mod.TCustomInput,function () {
    this.$init = function () {
      $mod.TCustomInput.$init.call(this);
      this.FCharCase = 0;
      this.FMaxLength = 0;
      this.FReadOnly = false;
      this.FText = "";
      this.FTextHint = "";
      this.FSelStart = 0;
      this.FAlignment = 0;
      this.FHideSelection = false;
      this.FPasswordChar = "";
      this.FOnChange = null;
      this.FAutoSize = false;
      this.FAutoSelect = false;
      this.FSelLength = 0;
      this.FNumeric = false;
      this.FAutoCompletion = 0;
      this.FEditType = 0;
      this.FRequired = false;
      this.FAutoFocus = false;
      this.FPattern = "";
      this.FHandlePastePtr = null;
      this.FHandleCutPtr = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      $mod.TCustomInput.$final.call(this);
    };
    this.SetAlignment = function (Value) {
      this.FAlignment = Value;
      this.UpdateElement();
    };
    this.SetHideSelection = function (Value) {
      if (this.FHideSelection !== Value) {
        this.FHideSelection = Value;
        this.UpdateElement();
      };
    };
    this.SetAutoSelect = function (Value) {
      if (this.FAutoSelect !== Value) {
        this.FAutoSelect = Value;
        this.UpdateElement();
      };
    };
    this.SetAutoSize = function (Value) {
      if (this.FAutoSize !== Value) {
        this.FAutoSize = Value;
        this.UpdateElement();
      };
    };
    this.GetElementInputHandle = function () {
      var Result = null;
      Result = this.GetContainer();
      return Result;
    };
    this.SetSelLength = function (Value) {
      this.FSelLength = Value;
      this.UpdateElement();
    };
    this.SetSelStart = function (Value) {
      this.FSelStart = Value;
      this.UpdateElement();
    };
    this.SetPasswordChar = function (Value) {
      this.FPasswordChar = Value;
      this.UpdateElement();
    };
    this.SetNumeric = function (Value) {
      this.FNumeric = Value;
      this.UpdateElement();
    };
    this.SetAutoCompletion = function (Value) {
      if (this.FAutoCompletion !== Value) {
        this.FAutoCompletion = Value;
        this.UpdateElement();
      };
    };
    this.SetAutoFocus = function (Value) {
      if (this.FAutoFocus !== Value) {
        this.FAutoFocus = Value;
        this.UpdateElement();
      };
    };
    this.SetRequired = function (Value) {
      this.FRequired = Value;
      this.UpdateElement();
    };
    this.SetPattern = function (Value) {
      if (this.FPattern !== Value) {
        this.FPattern = Value;
        this.UpdateElement();
      };
    };
    this.GetSelLength = function () {
      var Result = 0;
      Result = this.GetElementInputHandle().selectionEnd - this.GetElementInputHandle().selectionStart;
      return Result;
    };
    this.GetSelStart = function () {
      var Result = 0;
      Result = this.GetElementInputHandle().selectionStart;
      return Result;
    };
    this.SetEditType = function (Value) {
      if (this.FEditType !== Value) {
        this.FEditType = Value;
        this.UpdateElement();
      };
    };
    this.DoHandlePaste = function (Event) {
      var Result = false;
      var s = "";
      var clipboardData = Event.clipboardData || window.clipboardData;
      s = clipboardData.getData('Text');
      if (!this.CanPaste(s) || !this.Validate(s)) {
        Event.preventDefault();
        Event.stopPropagation();
      };
      Result = false;
      return Result;
    };
    this.DoHandleCut = function (Event) {
      var Result = false;
      if (!this.CanCut()) {
        Event.preventDefault();
        Event.stopPropagation();
      };
      Result = false;
      return Result;
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Change();
      Result = true;
      return Result;
    };
    this.IsCustomEditor = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.KeyPress = function (Key) {
      var isValid = false;
      pas["WEBLib.Controls"].TControl.KeyPress.call(this,Key);
      isValid = true;
      var $tmp1 = this.FEditType;
      if ($tmp1 === $mod.TEditType.weNumeric) {
        isValid = Key.get().charCodeAt() in rtl.createSet(null,48,57)}
       else if ($tmp1 === $mod.TEditType.weSignedNumeric) {
        isValid = Key.get().charCodeAt() in rtl.createSet(null,48,57,43,45)}
       else if ($tmp1 === $mod.TEditType.weFloat) {
        isValid = Key.get().charCodeAt() in rtl.createSet(null,48,57,44,46)}
       else if ($tmp1 === $mod.TEditType.weSignedFloat) {
        isValid = Key.get().charCodeAt() in rtl.createSet(null,48,57,44,46,43,45)}
       else if ($tmp1 === $mod.TEditType.weHex) isValid = Key.get().charCodeAt() in rtl.createSet(null,48,57,null,65,70);
      if (!isValid) Key.set("\x00");
    };
    this.GetInputType = function () {
      var Result = "";
      if (this.FPasswordChar !== "\x00") {
        Result = "PASSWORD"}
       else if (this.FNumeric) {
        Result = "NUMBER"}
       else if (this.FEditType in rtl.createSet($mod.TEditType.weFloat,$mod.TEditType.weNumeric)) {
        Result = "TEL"}
       else if (this.FEditType === $mod.TEditType.weSearch) {
        Result = "SEARCH"}
       else Result = "TEXT";
      return Result;
    };
    this.PersistinHTML = function () {
      this.GetElementInputHandle().setAttribute("value",this.GetText());
    };
    this.GetText = function () {
      var Result = "";
      Result = this.FText;
      if (this.GetElementInputHandle() != null) Result = this.GetElementInputHandle().value;
      if (this.FCharCase === $mod.TEditCharCase.wecUpperCase) Result = pas.SysUtils.UpperCase(Result);
      if (this.FCharCase === $mod.TEditCharCase.wecLowerCase) Result = pas.SysUtils.LowerCase(Result);
      return Result;
    };
    this.GetDisplayText = function () {
      var Result = "";
      Result = this.FText;
      return Result;
    };
    this.IsReadOnly = function () {
      var Result = false;
      Result = this.FReadOnly;
      return Result;
    };
    this.Validate = function (AValue) {
      var Result = false;
      var i = 0;
      var Key = "";
      var isvalid = false;
      Result = true;
      for (var $l1 = 1, $end2 = AValue.length; $l1 <= $end2; $l1++) {
        i = $l1;
        Key = AValue.charAt(i - 1);
        isvalid = true;
        var $tmp3 = this.FEditType;
        if ($tmp3 === $mod.TEditType.weNumeric) {
          isvalid = Key.charCodeAt() in rtl.createSet(null,48,57)}
         else if ($tmp3 === $mod.TEditType.weSignedNumeric) {
          isvalid = Key.charCodeAt() in rtl.createSet(null,48,57,43,45)}
         else if ($tmp3 === $mod.TEditType.weFloat) {
          isvalid = Key.charCodeAt() in rtl.createSet(null,48,57,44,46)}
         else if ($tmp3 === $mod.TEditType.weSignedFloat) {
          isvalid = Key.charCodeAt() in rtl.createSet(null,48,57,44,46,43,45)}
         else if ($tmp3 === $mod.TEditType.weHex) isvalid = Key.charCodeAt() in rtl.createSet(null,48,57,null,65,70);
        if (!isvalid) {
          Result = false;
          break;
        };
      };
      return Result;
    };
    this.ClearMethodPointers = function () {
      pas["WEBLib.Controls"].TControl.ClearMethodPointers.call(this);
      this.FHandlePastePtr = null;
      this.FHandleCutPtr = null;
    };
    this.GetMethodPointers = function () {
      pas["WEBLib.Controls"].TControl.GetMethodPointers.call(this);
      this.FHandlePastePtr = rtl.createCallback(this,"DoHandlePaste");
      this.FHandleCutPtr = rtl.createCallback(this,"DoHandleCut");
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetElementInputHandle() != null) {
        this.GetElementInputHandle().oninput = rtl.createCallback(this,"DoHandleChange");
        this.GetElementInputHandle().addEventListener("paste",this.FHandlePastePtr);
        this.GetElementInputHandle().addEventListener("cut",this.FHandleCutPtr);
      };
    };
    this.UpdateElementData = function () {
      var e = null;
      var ss = 0;
      var sl = 0;
      var isNum = false;
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if (this.GetElementInputHandle() != null) {
        if (!this.GetIsLinked()) {
          var $tmp1 = this.FCharCase;
          if ($tmp1 === $mod.TEditCharCase.wecUpperCase) {
            this.GetElementInputHandle().style.setProperty("text-transform","uppercase")}
           else if ($tmp1 === $mod.TEditCharCase.wecLowerCase) {
            this.GetElementInputHandle().style.setProperty("text-transform","lowercase")}
           else if ($tmp1 === $mod.TEditCharCase.wecMixedCase) {
            this.GetElementInputHandle().style.setProperty("text-transform","capitalize")}
           else if ($tmp1 === $mod.TEditCharCase.wecNormal) this.GetElementInputHandle().style.setProperty("text-transform","initial");
        };
        this.GetElementInputHandle().readOnly = this.IsReadOnly();
        if (this.FTextHint !== "") this.GetElementInputHandle().placeholder = this.FTextHint;
        if (!this.GetIsLinked()) {
          this.GetElementInputHandle().setAttribute("type",this.GetInputType());
          this.GetElementInputHandle().setAttribute("role","textbox");
          if (this.FAutoCompletion !== $mod.TAutoCompletion.acOff) {
            this.GetElementInputHandle().setAttribute("autocomplete","on");
            this.GetElementInputHandle().setAttribute("name",$mod.GetAutoCompletionName(this.FAutoCompletion));
          } else {
            this.GetElementInputHandle().removeAttribute("autocomplete");
            this.GetElementInputHandle().removeAttribute("name");
          };
          var $tmp2 = this.FAlignment;
          if ($tmp2 === pas.Classes.TAlignment.taLeftJustify) {
            this.GetElementInputHandle().style.removeProperty("text-align")}
           else if ($tmp2 === pas.Classes.TAlignment.taCenter) {
            this.GetElementInputHandle().style.setProperty("text-align","center")}
           else if ($tmp2 === pas.Classes.TAlignment.taRightJustify) this.GetElementInputHandle().style.setProperty("text-align","right");
        };
        if (this.FAutoFocus) {
          this.GetElementInputHandle().setAttribute("autofocus","")}
         else this.GetElementInputHandle().removeAttribute("autofocus");
        if (this.FRequired) {
          this.GetElementInputHandle().setAttribute("required","")}
         else this.GetElementInputHandle().removeAttribute("required");
        if (this.FPattern !== "") {
          this.GetElementInputHandle().setAttribute("pattern",this.FPattern)}
         else this.GetElementInputHandle().removeAttribute("pattern");
        if (this.FMaxLength <= 0) {
          this.GetElementInputHandle().removeAttribute("maxLength")}
         else this.GetElementInputHandle().maxLength = this.FMaxLength;
        this.GetElementInputHandle().value = this.GetDisplayText();
        isNum = pas.SysUtils.UpperCase(this.GetInputType()) === "NUMBER";
        if (!isNum && !this.GetIsLinked() && !this.IsCustomEditor()) {
          ss = this.FSelStart;
          sl = this.FSelStart + this.FSelLength;
          e = this.GetElementInputHandle();
          setTimeout(function() {
            e.setSelectionRange(ss, sl);
          }, 1);
        };
      };
    };
    this.SetCharCase = function (AValue) {
      if (this.FCharCase !== AValue) {
        this.FCharCase = AValue;
        this.UpdateElement();
      };
    };
    this.SetMaxLength = function (AValue) {
      if (this.FMaxLength !== AValue) {
        this.FMaxLength = AValue;
        this.UpdateElementData();
      };
    };
    this.SetReadOnly = function (AValue) {
      this.FReadOnly = AValue;
      this.UpdateElement();
    };
    this.SetText = function (AValue) {
      this.FText = AValue;
      if (this.GetElementInputHandle() != null) {
        this.GetElementInputHandle().value = this.GetDisplayText();
        this.GetElementInputHandle().readOnly = this.IsReadOnly();
      };
    };
    this.SetTextHint = function (AValue) {
      this.FTextHint = AValue;
      this.UpdateElement();
    };
    this.CanPaste = function (AValue) {
      var Result = false;
      Result = true;
      return Result;
    };
    this.CanCut = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.CreateInitialize = function () {
      $mod.TCustomInput.CreateInitialize.call(this);
      this.FEditType = $mod.TEditType.weString;
      this.FText = "";
      this.FCharCase = $mod.TEditCharCase.wecNormal;
      this.FMaxLength = 0;
      this.FReadOnly = false;
      this.FTextHint = "";
      this.FPasswordChar = "\x00";
      this.SetHeight(25);
    };
    this.Clear = function () {
      this.SetText("");
    };
    this.ClearSelection = function () {
      var s = "";
      s = this.GetText();
      this.SetText(pas.System.Copy(s,1,this.GetSelStart()) + pas.System.Copy(s,this.GetSelStart() + this.GetSelLength(),s.length));
    };
    this.Change = function () {
      if (this.GetElementHandle() != null) this.FText = this.GetElementInputHandle().value;
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.SelectAll = function () {
      if (this.GetElementInputHandle() != null) this.GetElementInputHandle().select();
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TEdit",$mod.TCustomEdit,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Alignment",2,pas.Classes.$rtti["TAlignment"],"FAlignment","SetAlignment");
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("AutoCompletion",2,$mod.$rtti["TAutoCompletion"],"FAutoCompletion","SetAutoCompletion");
    $r.addProperty("AutoFocus",2,rtl.boolean,"FAutoFocus","SetAutoFocus");
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAutoSize");
    $r.addProperty("AutoSelect",2,rtl.boolean,"FAutoSelect","SetAutoSelect");
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("CharCase",2,$mod.$rtti["TEditCharCase"],"FCharCase","SetCharCase");
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("HideSelection",2,rtl.boolean,"FHideSelection","SetHideSelection");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("PasswordChar",2,rtl.char,"FPasswordChar","SetPasswordChar",{Default: "\x00"});
    $r.addProperty("Pattern",2,rtl.string,"FPattern","SetPattern");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("MaxLength",2,rtl.longint,"FMaxLength","SetMaxLength");
    $r.addProperty("ReadOnly",2,rtl.boolean,"FReadOnly","SetReadOnly",{Default: false});
    $r.addProperty("Required",2,rtl.boolean,"FRequired","SetRequired");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("TextDirection",0,pas["WEBLib.Controls"].$rtti["TTextDirection"],"FTextDirection","FTextDirection");
    $r.addProperty("TextHint",2,rtl.string,"FTextHint","SetTextHint");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TWebEdit",$mod.TEdit,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TSpinEdit",$mod.TCustomInput,function () {
    this.$init = function () {
      $mod.TCustomInput.$init.call(this);
      this.FIncrement = 0;
      this.FMaxValue = 0;
      this.FMinValue = 0;
      this.FValue = 0;
      this.FAutoSize = false;
      this.FOnChange = null;
      this.FReadOnly = false;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      $mod.TCustomInput.$final.call(this);
    };
    this.GetText = function () {
      var Result = "";
      Result = "";
      return Result;
    };
    this.SetText = function (Value) {
    };
    this.GetElementInputHandle = function () {
      var Result = null;
      Result = this.GetContainer();
      return Result;
    };
    this.SetReadOnly = function (Value) {
      if (this.FReadOnly !== Value) {
        this.FReadOnly = Value;
        this.UpdateElement();
      };
    };
    this.KeyPress = function (Key) {
      if (!(Key.get().charCodeAt() in rtl.createSet(null,48,57))) {
        Key.set("\x00");
        this.PreventDefault();
        this.StopPropagation();
      };
      pas["WEBLib.Controls"].TControl.KeyPress.apply(this,arguments);
    };
    this.PersistinHTML = function () {
      this.GetElementInputHandle().setAttribute("value",pas.SysUtils.IntToStr(this.GetValue()));
    };
    this.GetInputType = function () {
      var Result = "";
      Result = "NUMBER";
      return Result;
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if (this.GetContainer() != null) {
        this.GetContainer().setAttribute("inputmode","numeric");
        this.GetContainer().setAttribute("pattern","[0-9]*");
        this.GetContainer().value = this.GetDisplayText();
        this.GetElementInputHandle().readOnly = this.IsReadOnly();
      };
    };
    this.GetValue = function () {
      var Result = 0;
      var s = "";
      Result = this.FValue;
      if (!(this.GetContainer() != null)) return Result;
      s = this.GetContainer().value;
      if (s !== "") Result = pas.SysUtils.StrToInt(s);
      return Result;
    };
    this.SetIncrement = function (AValue) {
      this.FIncrement = AValue;
      if (this.GetContainer() != null) this.GetContainer().setAttribute("step",pas.SysUtils.IntToStr(AValue));
    };
    this.SetMaxValue = function (AValue) {
      this.FMaxValue = AValue;
      if (this.GetContainer() != null) this.GetContainer().setAttribute("max",pas.SysUtils.IntToStr(AValue));
    };
    this.SetMinValue = function (AValue) {
      this.FMinValue = AValue;
      if (this.GetContainer() != null) this.GetContainer().setAttribute("min",pas.SysUtils.IntToStr(AValue));
    };
    this.SetValue = function (AValue) {
      this.FValue = AValue;
      this.UpdateElement();
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Change();
      Result = true;
      return Result;
    };
    this.IsReadOnly = function () {
      var Result = false;
      Result = this.FReadOnly;
      return Result;
    };
    this.GetDisplayText = function () {
      var Result = "";
      Result = pas.SysUtils.IntToStr(this.FValue);
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetElementInputHandle() != null) {
        this.GetElementInputHandle().oninput = rtl.createCallback(this,"DoHandleChange");
      };
    };
    this.Change = function () {
      this.FValue = this.GetValue();
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.CreateInitialize = function () {
      $mod.TCustomInput.CreateInitialize.call(this);
      this.FIncrement = 1;
      this.FMaxValue = 100;
      this.FMinValue = 0;
      this.SetShowFocus(true);
      this.SetHeight(25);
      this.AddControlStyle('input[type="number"]::-webkit-inner-spin-button { opacity: 1 !important; }');
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("AutoSize",0,rtl.boolean,"FAutoSize","FAutoSize");
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Increment",2,rtl.longint,"FIncrement","SetIncrement");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("MaxValue",2,rtl.longint,"FMaxValue","SetMaxValue",{Default: 100});
    $r.addProperty("MinValue",2,rtl.longint,"FMinValue","SetMinValue",{Default: 0});
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("ReadOnly",2,rtl.boolean,"FReadOnly","SetReadOnly",{Default: false});
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TextDirection",0,pas["WEBLib.Controls"].$rtti["TTextDirection"],"FTextDirection","FTextDirection");
    $r.addProperty("Value",3,rtl.longint,"GetValue","SetValue");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TWebSpinEdit",$mod.TSpinEdit,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TDateTimePicker",$mod.TCustomInput,function () {
    this.$init = function () {
      $mod.TCustomInput.$init.call(this);
      this.FDate = 0.0;
      this.FKind = 0;
      this.FTime = 0.0;
      this.FOnChange = null;
      this.FReadOnly = false;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      $mod.TCustomInput.$final.call(this);
    };
    this.SetDate = function (AValue) {
      if (this.FDate !== AValue) {
        this.FDate = AValue;
        this.UpdateElement();
      };
    };
    this.GetDate = function () {
      var Result = 0.0;
      var str = "";
      var ye = "";
      var mo = "";
      var da = "";
      var yei = 0;
      var moi = 0;
      var dai = 0;
      var e = 0;
      Result = this.FTime;
      if (!(this.GetContainer() != null)) return Result;
      str = this.GetContainer().value;
      if (this.FKind === $mod.TDateTimeKind.dtkDate) {
        ye = pas.System.Copy(str,1,4);
        mo = pas.System.Copy(str,6,2);
        da = pas.System.Copy(str,9,2);
        pas.System.val$5(ye,{get: function () {
            return yei;
          }, set: function (v) {
            yei = v;
          }},{get: function () {
            return e;
          }, set: function (v) {
            e = v;
          }});
        pas.System.val$5(mo,{get: function () {
            return moi;
          }, set: function (v) {
            moi = v;
          }},{get: function () {
            return e;
          }, set: function (v) {
            e = v;
          }});
        pas.System.val$5(da,{get: function () {
            return dai;
          }, set: function (v) {
            dai = v;
          }},{get: function () {
            return e;
          }, set: function (v) {
            e = v;
          }});
        if ((yei !== 0) && (moi !== 0) && (dai !== 0)) {
          Result = pas.SysUtils.EncodeDate(yei,moi,dai)}
         else Result = 0;
      } else Result = 0;
      return Result;
    };
    this.SetTime = function (AValue) {
      if (this.FTime !== AValue) {
        this.FTime = AValue;
        this.UpdateElement();
      };
    };
    this.GetTime = function () {
      var Result = 0.0;
      var str = "";
      var d = 0.0;
      Result = this.FTime;
      if (!(this.GetContainer() != null)) return Result;
      str = this.GetContainer().value;
      if (pas.SysUtils.TryStrToTime(str,{get: function () {
          return d;
        }, set: function (v) {
          d = v;
        }})) Result = d;
      return Result;
    };
    this.SetKind = function (AValue) {
      this.FKind = AValue;
      if (this.GetContainer() != null) {
        if (AValue === $mod.TDateTimeKind.dtkDate) {
          this.GetContainer().setAttribute("type","DATE")}
         else this.GetContainer().setAttribute("type","TIME");
      };
    };
    this.SetText = function (Value) {
      if (!(this.GetContainer() != null)) return;
    };
    this.GetText = function () {
      var Result = "";
      Result = "";
      if (!(this.GetContainer() != null)) return Result;
      Result = this.GetContainer().value;
      return Result;
    };
    this.SetReadOnly = function (Value) {
      this.FReadOnly = Value;
      this.UpdateElement();
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Change();
      Result = true;
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetContainer() != null) {
        this.GetContainer().oninput = rtl.createCallback(this,"DoHandleChange");
      };
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if (this.GetContainer() != null) {
        this.GetContainer().setAttribute("step","1");
        var $tmp1 = this.FKind;
        if ($tmp1 === $mod.TDateTimeKind.dtkTime) {
          this.GetContainer().value = pas.SysUtils.FormatDateTime(pas.SysUtils.LongTimeFormat,this.FTime)}
         else if ($tmp1 === $mod.TDateTimeKind.dtkDate) this.GetContainer().value = pas.SysUtils.FormatDateTime("yyyy-MM-dd",this.FDate);
        this.GetContainer().readOnly = this.IsReadOnly();
      };
    };
    this.CreateElement = function () {
      var Result = null;
      Result = $mod.TCustomInput.CreateElement.call(this);
      return Result;
    };
    this.GetInputType = function () {
      var Result = "";
      if (this.FKind === $mod.TDateTimeKind.dtkDate) {
        Result = "DATE"}
       else Result = "TIME";
      return Result;
    };
    this.Change = function () {
      this.FTime = this.GetTime();
      this.FDate = this.GetDate();
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.IsReadOnly = function () {
      var Result = false;
      Result = this.FReadOnly;
      return Result;
    };
    this.CreateInitialize = function () {
      $mod.TCustomInput.CreateInitialize.call(this);
      this.SetDate(pas.SysUtils.Now());
      this.SetShowFocus(true);
      this.SetWidth(170);
      this.SetHeight(25);
      this.FReadOnly = false;
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("Date",3,pas.System.$rtti["TDateTime"],"GetDate","SetDate");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Kind",2,$mod.$rtti["TDateTimeKind"],"FKind","SetKind");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("ReadOnly",2,rtl.boolean,"FReadOnly","SetReadOnly",{Default: false});
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("TextDirection",0,pas["WEBLib.Controls"].$rtti["TTextDirection"],"FTextDirection","FTextDirection");
    $r.addProperty("Time",3,pas.System.$rtti["TDateTime"],"GetTime","SetTime");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TWebDateTimePicker",$mod.TDateTimePicker,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TButton",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FModalResult = 0;
      this.FDefault = false;
      this.FCancel = false;
      this.FButtonType = "";
    };
    this.SetButtonType = function (Value) {
      this.FButtonType = Value;
      this.UpdateElementData();
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("BUTTON");
      Result.setAttribute("type","BUTTON");
      return Result;
    };
    this.SetCaption = function (AValue) {
      if (this.FCaption !== AValue) {
        pas["WEBLib.Controls"].TCustomControl.SetCaption.call(this,AValue);
        this.UpdateElementData();
      };
    };
    this.UpdateElementData = function () {
      var acc = "";
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if (this.GetIsLinked() && (this.FCaption === "")) return;
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().innerHTML = pas["WEBLib.WebTools"].ProcessAccelerator(this.FCaption,{get: function () {
            return acc;
          }, set: function (v) {
            acc = v;
          }});
        if (acc !== "") this.GetElementHandle().setAttribute("accesskey",acc);
        this.GetElementHandle().setAttribute("role","button");
        this.GetElementHandle().setAttribute("aria-label",this.FCaption);
        if (this.FButtonType !== "") {
          this.GetElementHandle().setAttribute("type",this.FButtonType)}
         else this.GetElementHandle().setAttribute("type","BUTTON");
      };
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().style.removeProperty("outline");
        this.GetElementHandle().style.removeProperty("user-select");
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) this.SetCaption(this.FName);
      this.SetColor(-1);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("ButtonType",2,rtl.string,"FButtonType","SetButtonType");
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("TextDirection",0,pas["WEBLib.Controls"].$rtti["TTextDirection"],"FTextDirection","FTextDirection");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TWebButton",$mod.TButton,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TCheckBox",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FChecked = false;
      this.FState = 0;
      this.FElementButtonClassName = "";
      this.FElementLabelClassName = "";
    };
    this.Loaded = function () {
      var lbl = null;
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
      if (this.GetContainer() != null) {
        if (!this.GetIsLinked()) {
          lbl = this.GetContainer().children.item(1);
          lbl.onclick = rtl.createCallback(this,"HandleLabelClick");
        };
      };
    };
    this.UpdateElementData = function () {
      var chk = null;
      var btn = null;
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if (this.GetContainer() != null) {
        chk = this.GetCheckElement();
        chk.disabled = !this.FEnabled;
        chk.checked = this.FChecked;
        chk.indeterminate = this.GetState() === $mod.TCheckBoxState.cbGrayed;
        if (!this.GetIsLinked()) {
          if (this.FCaption !== "") this.GetContainer().lastElementChild.innerHTML = this.FCaption;
          this.GetElementHandle().setAttribute("tabindex","-1");
          btn = this.GetElementHandle().firstChild;
          btn.setAttribute("tabindex","-1");
        };
        if (this.FTabStop) this.GetContainer().setAttribute("tabindex",pas.SysUtils.IntToStr(this.FTabOrder));
      };
    };
    this.UpdateElementSize = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementSize.call(this);
      if ((this.GetContainer() != null) && !this.GetIsLinked()) {
        this.GetContainer().firstElementChild.style.setProperty("height","100%");
      };
    };
    this.UpdateElementVisual = function () {
      var btn = null;
      var lbl = null;
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if (this.GetElementHandle() != null) {
        btn = this.GetElementHandle().firstChild;
        if (btn != null) {
          if (this.FElementButtonClassName !== "") {
            btn.setAttribute("class",this.FElementButtonClassName)}
           else btn.removeAttribute("class");
        };
        lbl = this.GetElementHandle().lastElementChild;
        if (lbl != null) {
          if (this.FElementLabelClassName !== "") {
            lbl.setAttribute("class",this.FElementLabelClassName)}
           else lbl.removeAttribute("class");
        };
        if (!this.GetIsLinked()) {
          this.GetElementHandle().style.setProperty("user-select","none");
          if (this.FElementPosition === pas["WEBLib.Controls"].TElementPosition.epAbsolute) {
            if (this.FElementButtonClassName === "") {
              btn.style.setProperty("float","left");
              btn.style.setProperty("height","100%");
              btn.style.setProperty("vertical-align","middle");
            };
            if (this.FElementLabelClassName === "") {
              lbl = this.GetContainer().lastElementChild;
              lbl.style.setProperty("vertical-align","middle");
              lbl.style.setProperty("min-height","100%");
              lbl.style.setProperty("height","100%");
              lbl.style.setProperty("position","absolute");
              lbl.style.setProperty("overflow","hidden");
              lbl.style.setProperty("display","inline-flex");
              lbl.style.setProperty("align-items","center");
            };
          };
        };
      };
    };
    this.PersistinHTML = function () {
      var cb = null;
      if (!(this.GetContainer() != null)) return;
      cb = this.GetCheckElement();
      if (cb.checked) {
        cb.setAttribute("checked","checked")}
       else cb.removeAttribute("checked");
    };
    this.CreateElement = function () {
      var Result = null;
      var btn = null;
      var lbl = null;
      Result = document.createElement("SPAN");
      btn = document.createElement("INPUT");
      lbl = document.createElement("SPAN");
      btn.setAttribute("TYPE","CHECKBOX");
      btn.setAttribute("id",this.GetID());
      btn.setAttribute("role","checkbox");
      lbl.setAttribute("id",this.GetID() + "lbl");
      lbl.setAttribute("value",this.GetID());
      Result.appendChild(btn);
      Result.appendChild(lbl);
      return Result;
    };
    this.SetChecked = function (AValue) {
      this.FChecked = AValue;
      this.UpdateElement();
    };
    this.GetChecked = function () {
      var Result = false;
      if (this.GetContainer() != null) this.FChecked = this.GetCheckElement().checked;
      Result = this.FChecked;
      return Result;
    };
    this.SetState = function (AValue) {
      this.FState = AValue;
      this.FChecked = this.FState === $mod.TCheckBoxState.cbChecked;
      this.UpdateElement();
    };
    this.GetState = function () {
      var Result = 0;
      Result = this.FState;
      return Result;
    };
    this.SetCaption = function (AValue) {
      if (this.FCaption !== AValue) {
        pas["WEBLib.Controls"].TCustomControl.SetCaption.call(this,AValue);
        if ((this.GetContainer() != null) && !this.GetIsLinked()) this.GetContainer().lastElementChild.innerHTML = AValue;
      };
    };
    this.SetEnabled = function (Value) {
      pas["WEBLib.Controls"].TControl.SetEnabled.apply(this,arguments);
      if (this.GetContainer() != null) this.GetCheckElement().disabled = !Value;
    };
    this.HandleLabelClick = function (Event) {
      var Result = false;
      var chk = null;
      if (this.GetContainer() != null) {
        chk = this.GetCheckElement();
        chk.checked = !chk.checked;
      };
      Result = true;
      return Result;
    };
    this.Click = function () {
      pas["WEBLib.Controls"].TControl.Click.call(this);
      this.FChecked = this.GetChecked();
      this.SetFocus();
    };
    this.GetCheckElement = function () {
      var Result = null;
      if (this.GetIsLinked()) {
        Result = this.GetElementHandle()}
       else Result = this.GetContainer().firstElementChild;
      return Result;
    };
    this.KeyPress = function (ch) {
      var chk = null;
      pas["WEBLib.Controls"].TControl.KeyPress.apply(this,arguments);
      if (ch.get() === " ") {
        if (this.GetContainer() != null) {
          chk = this.GetCheckElement();
          chk.checked = !chk.checked;
        };
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.SetColor(-1);
      this.FChecked = false;
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) this.SetCaption(this.FName);
      this.SetShowFocus(true);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("Checked",3,rtl.boolean,"GetChecked","SetChecked",{Default: false});
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor",{Default: -1});
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementButtonClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementButtonClassName","FElementButtonClassName");
    $r.addProperty("ElementLabelClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementLabelClassName","FElementLabelClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("State",3,$mod.$rtti["TCheckBoxState"],"GetState","SetState");
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TWebCheckBox",$mod.TCheckBox,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TRadioButton",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FChecked = false;
      this.FGroupName = "";
      this.FElementButtonClassName = "";
      this.FElementLabelClassName = "";
    };
    this.PersistinHTML = function () {
      var rb = null;
      if (!(this.GetContainer() != null)) return;
      rb = this.GetRadioElement();
      if (rb.checked) {
        rb.setAttribute("checked","checked")}
       else rb.removeAttribute("checked");
    };
    this.CreateElement = function () {
      var Result = null;
      var btn = null;
      var lbl = null;
      Result = document.createElement("SPAN");
      btn = document.createElement("INPUT");
      lbl = document.createElement("SPAN");
      Result.addEventListener("click",rtl.createCallback(this,"HandleLabelClick"));
      btn.setAttribute("TYPE","RADIO");
      btn.setAttribute("id",this.GetID() + "rd");
      btn.setAttribute("name",this.FGroupName);
      btn.setAttribute("role","radio");
      btn.setAttribute("tabindex","-1");
      btn.addEventListener("click",rtl.createCallback(this,"HandleRadioClick"));
      lbl.setAttribute("id",this.GetID() + "lbl");
      lbl.setAttribute("value",this.GetID());
      Result.appendChild(btn);
      Result.appendChild(lbl);
      return Result;
    };
    this.SetChecked = function (AValue) {
      this.FChecked = AValue;
      if (this.GetContainer() != null) this.GetRadioElement().checked = AValue;
    };
    this.GetChecked = function () {
      var Result = false;
      Result = this.FChecked;
      if (this.GetContainer() != null) Result = this.GetRadioElement().checked;
      return Result;
    };
    this.SetEnabled = function (Value) {
      pas["WEBLib.Controls"].TControl.SetEnabled.apply(this,arguments);
      if (this.GetContainer() != null) this.GetRadioElement().disabled = !Value;
    };
    this.SetCaption = function (AValue) {
      if (this.FCaption !== AValue) {
        pas["WEBLib.Controls"].TCustomControl.SetCaption.call(this,AValue);
        if ((this.GetContainer() != null) && !this.GetIsLinked()) this.GetContainer().lastElementChild.innerHTML = AValue;
      };
    };
    this.SetGroupName = function (AValue) {
      this.FGroupName = AValue;
      this.UpdateElementData();
    };
    this.HandleLabelClick = function (Event) {
      var Result = false;
      var rb = null;
      if (this.GetContainer() != null) {
        rb = this.GetRadioElement();
        rb.checked = true;
      };
      Result = true;
      return Result;
    };
    this.HandleRadioClick = function (Event) {
      var Result = false;
      this.SetFocus();
      Result = true;
      return Result;
    };
    this.UpdateElementSize = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementSize.call(this);
      if ((this.GetContainer() != null) && !this.GetIsLinked()) {
        this.GetContainer().firstElementChild.style.setProperty("height","100%");
      };
    };
    this.UpdateElementData = function () {
      var btn = null;
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if (this.GetContainer() != null) {
        this.GetContainer().firstElementChild.setAttribute("name",this.FGroupName);
        btn = this.GetElementHandle().firstChild;
        btn.disabled = !this.FEnabled;
        if (!this.GetIsLinked()) {
          if (this.FCaption !== "") this.GetContainer().lastElementChild.innerHTML = this.FCaption;
          this.GetElementHandle().setAttribute("tabindex","-1");
          if (this.FTabStop && (btn != null)) btn.setAttribute("tabindex","-1");
        };
        if (this.FTabStop) this.GetContainer().setAttribute("tabindex",pas.SysUtils.IntToStr(this.FTabOrder));
      };
    };
    this.UpdateElementVisual = function () {
      var btn = null;
      var lbl = null;
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if (this.GetElementHandle() != null) {
        btn = this.GetElementHandle().firstChild;
        if (btn != null) {
          if (this.FElementButtonClassName !== "") {
            btn.setAttribute("class",this.FElementButtonClassName)}
           else btn.removeAttribute("class");
        };
        lbl = this.GetElementHandle().lastElementChild;
        if (lbl != null) {
          if (this.FElementLabelClassName !== "") {
            lbl.setAttribute("class",this.FElementLabelClassName)}
           else lbl.removeAttribute("class");
        };
        if (!this.GetIsLinked()) {
          this.GetElementHandle().style.setProperty("user-select","none");
          if (this.FElementPosition === pas["WEBLib.Controls"].TElementPosition.epAbsolute) {
            if (this.FElementButtonClassName === "") {
              btn.style.setProperty("float","left");
              btn.style.setProperty("height","100%");
              btn.style.setProperty("vertical-align","middle");
            };
            if (this.FElementLabelClassName === "") {
              lbl = this.GetContainer().lastElementChild;
              lbl.style.setProperty("vertical-align","middle");
              lbl.style.setProperty("min-height","100%");
              lbl.style.setProperty("height","100%");
              lbl.style.setProperty("position","absolute");
              lbl.style.setProperty("overflow","hidden");
              lbl.style.setProperty("display","inline-flex");
              lbl.style.setProperty("align-items","center");
            };
          };
        };
      };
    };
    this.GetRadioElement = function () {
      var Result = null;
      if (this.GetIsLinked()) {
        Result = this.GetElementHandle()}
       else Result = this.GetContainer().firstElementChild;
      return Result;
    };
    this.KeyPress = function (ch) {
      var rb = null;
      pas["WEBLib.Controls"].TControl.KeyPress.apply(this,arguments);
      if (ch.get() === " ") {
        rb = this.GetRadioElement();
        rb.checked = true;
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.SetColor(-1);
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) this.SetCaption(this.FName);
      this.FGroupName = "";
      this.SetShowFocus(true);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("Checked",3,rtl.boolean,"GetChecked","SetChecked",{Default: false});
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor",{Default: -1});
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementButtonClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementButtonClassName","FElementButtonClassName");
    $r.addProperty("ElementLabelClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementLabelClassName","FElementLabelClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("GroupName",2,rtl.string,"FGroupName","SetGroupName");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TWebRadioButton",$mod.TRadioButton,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TListBox",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FItems = null;
      this.FItemIndex = 0;
      this.FMultiSelect = false;
      this.FSelected = null;
      this.FItemHeight = 0;
      this.FSorted = false;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FItems = undefined;
      this.FSelected = undefined;
      this.FOnChange = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetItemHeight = function (Value) {
      this.FItemHeight = Value;
    };
    this.SetSorted = function (Value) {
      this.FSorted = Value;
      this.FItems.Sort();
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FItems.GetCount();
      return Result;
    };
    this.GetElementSelectHandle = function () {
      var Result = null;
      Result = this.GetContainer();
      return Result;
    };
    this.GetSelCount = function () {
      var Result = 0;
      var i = 0;
      Result = 0;
      if (this.GetContainer() != null) {
        for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (this.GetContainer().options.item(i).selected) Result += 1;
        };
      };
      return Result;
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Change();
      Result = true;
      return Result;
    };
    this.DoItemsChange = function (Sender) {
      this.DoUpdateList();
    };
    this.DoUpdateList = function () {
      var i = 0;
      var opt = null;
      if (!(this.GetContainer() != null)) return;
      if (this.IsUpdating()) return;
      for (var $l1 = this.GetContainer().options.length - 1; $l1 >= 0; $l1--) {
        i = $l1;
        this.GetContainer().remove(i);
      };
      for (var $l2 = 0, $end3 = this.FItems.GetCount() - 1; $l2 <= $end3; $l2++) {
        i = $l2;
        opt = new Option(this.FItems.Get(i));
        opt.setAttribute("role","listitem");
        this.GetContainer().add(opt);
        this.SetSelected(i,false);
      };
      this.UpdateElementData();
    };
    this.PersistinHTML = function () {
      var i = 0;
      if (!(this.GetContainer() != null)) return;
      for (var $l1 = 0, $end2 = this.GetContainer().options.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.GetContainer().options.item(i).selected) {
          this.GetContainer().options.item(i).setAttribute("selected","selected")}
         else this.GetContainer().options.item(i).removeAttribute("selected");
      };
    };
    this.GetItemIndex = function () {
      var Result = 0;
      Result = this.FItemIndex;
      if (this.GetContainer() != null) Result = this.GetContainer().selectedIndex;
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SELECT");
      Result.setAttribute("Size","2");
      return Result;
    };
    this.GetSelected = function (AIndex) {
      var Result = false;
      if (AIndex < this.FSelected.GetCount()) {
        Result = !(this.FSelected.Get(AIndex) == false)}
       else Result = false;
      if ((this.GetContainer() != null) && (AIndex < this.GetContainer().options.length)) Result = this.GetContainer().options.item(AIndex).selected;
      return Result;
    };
    this.SetSelected = function (AIndex, AValue) {
      while (AIndex >= this.FSelected.GetCount()) this.FSelected.Add(false);
      this.FSelected.Put(AIndex,AValue);
      if (this.GetContainer() != null) this.GetContainer().options.item(AIndex).selected = AValue;
    };
    this.SetItems = function (AItems) {
      this.FItems.Assign(AItems);
    };
    this.SetItemIndex = function (AIndex) {
      if (this.FItemIndex !== AIndex) {
        this.FItemIndex = AIndex;
        this.UpdateElement();
      };
    };
    this.SetMultiSelect = function (AValue) {
      this.FMultiSelect = AValue;
      if (this.GetContainer() != null) this.GetContainer().multiple = AValue;
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
      this.DoUpdateList();
      this.UpdateElement();
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if (this.GetElementSelectHandle() != null) {
        this.GetElementSelectHandle().style.setProperty("overflow","auto");
        this.GetElementSelectHandle().selectedIndex = this.FItemIndex;
      };
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if (this.GetElementSelectHandle() != null) {
        this.GetElementSelectHandle().style.setProperty("overflow","auto");
        this.GetElementSelectHandle().setAttribute("role","listbox");
        this.GetElementSelectHandle().setAttribute("aria-busy","true");
      };
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().onchange = rtl.createCallback(this,"DoHandleChange");
      };
    };
    this.Change = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FItems = pas.Classes.TStringList.$create("Create$1");
      this.FItems.FOnChange = rtl.createCallback(this,"DoItemsChange");
      this.FMultiSelect = false;
      this.FSelected = pas.Classes.TList.$create("Create$1");
      this.FItemIndex = -1;
      this.SetShowFocus(true);
      this.SetWidth(160);
      this.SetHeight(180);
    };
    this.Destroy = function () {
      rtl.free(this,"FItems");
      rtl.free(this,"FSelected");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.EndUpdate = function () {
      pas["WEBLib.Controls"].TControl.EndUpdate.call(this);
      this.DoUpdateList();
    };
    this.ClearSelection = function () {
      var i = 0;
      this.SetItemIndex(-1);
      if (!(this.GetContainer() != null)) return;
      for (var $l1 = 0, $end2 = this.GetContainer().options.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.GetContainer().options.item(i).selected = false;
      };
    };
    this.SelectAll = function () {
      var i = 0;
      if (!(this.GetContainer() != null)) return;
      for (var $l1 = 0, $end2 = this.GetContainer().options.length - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        this.SetSelected(i,true);
        this.GetContainer().options.item(i).selected = true;
      };
    };
    this.AddItem = function (Item, AObject) {
      this.FItems.AddObject(Item,AObject);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("ItemHeight",2,rtl.longint,"FItemHeight","SetItemHeight");
    $r.addProperty("ItemIndex",3,rtl.longint,"GetItemIndex","SetItemIndex",{Default: -1});
    $r.addProperty("Items",2,pas.Classes.$rtti["TStrings"],"FItems","SetItems");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("MultiSelect",2,rtl.boolean,"FMultiSelect","SetMultiSelect");
    $r.addProperty("ParentColor",2,rtl.boolean,"FParentColor","SetParentColor",{Default: false});
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("TextDirection",0,pas["WEBLib.Controls"].$rtti["TTextDirection"],"FTextDirection","FTextDirection");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnMouseWheel",0,pas["WEBLib.Controls"].$rtti["TMouseWheelEvent"],"FOnMouseWheel","FOnMouseWheel");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TWebListBox",$mod.TListBox,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.TComboBoxStyle = {"0": "csDropDown", csDropDown: 0, "1": "csSimple", csSimple: 1, "2": "csDropDownList", csDropDownList: 2, "3": "csOwnerDrawFixed", csOwnerDrawFixed: 3, "4": "csOwnerDrawVariable", csOwnerDrawVariable: 4};
  $mod.$rtti.$Enum("TComboBoxStyle",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TComboBoxStyle});
  rtl.createClass($mod,"TCustomComboBox",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FItems = null;
      this.FItemIndex = 0;
      this.FStyle = 0;
      this.FDroppedDown = false;
      this.FOnChange = null;
      this.FTextHint = "";
    };
    this.$final = function () {
      this.FItems = undefined;
      this.FOnChange = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.GetText = function () {
      var Result = "";
      if (this.GetItemIndex() >= 0) {
        Result = this.FItems.Get(this.GetItemIndex())}
       else Result = "";
      return Result;
    };
    this.SetText = function (Value) {
      var I = 0;
      for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (Value === this.FItems.Get(I)) this.SetItemIndex(I);
      };
    };
    this.SetStyle = function (Value) {
      this.FStyle = Value;
    };
    this.SetDroppedDown = function (Value) {
      this.FDroppedDown = Value;
    };
    this.GetElementSelectHandle = function () {
      var Result = null;
      Result = this.GetContainer();
      return Result;
    };
    this.SetTextHint = function (Value) {
      if (this.FTextHint !== Value) {
        this.FTextHint = Value;
        window.console.log("do update for hint");
        this.DoUpdateList();
      };
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Change();
      Result = true;
      return Result;
    };
    this.DoItemsChange = function (Sender) {
      this.DoUpdateList();
    };
    this.AddTextHint = function () {
      var opt = null;
      if (this.FTextHint !== "") {
        opt = document.createElement("OPTION");
        opt.setAttribute("value","");
        opt.setAttribute("disabled","true");
        opt.setAttribute("selected","true");
        opt.setAttribute("hidden","true");
        opt.innerHTML = this.FTextHint;
        this.GetContainer().appendChild(opt);
      };
    };
    this.DoUpdateList = function () {
      var i = 0;
      var s = "";
      var opt = null;
      if (!(this.GetContainer() != null)) return;
      for (var $l1 = this.GetContainer().options.length - 1; $l1 >= 0; $l1--) {
        i = $l1;
        this.GetContainer().remove(i);
      };
      this.AddTextHint();
      for (var $l2 = 0, $end3 = this.FItems.GetCount() - 1; $l2 <= $end3; $l2++) {
        i = $l2;
        s = this.FItems.Get(i);
        opt = document.createElement("OPTION");
        opt.setAttribute("value",s);
        opt.innerHTML = s;
        this.GetContainer().appendChild(opt);
      };
      this.UpdateElement();
    };
    this.GetItemIndex = function () {
      var Result = 0;
      Result = this.FItemIndex;
      if (this.GetContainer() != null) {
        Result = this.GetContainer().selectedIndex;
        if (this.FTextHint !== "") Result = Result - 1;
      };
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SELECT");
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().onchange = rtl.createCallback(this,"DoHandleChange");
      };
    };
    this.UpdateElementData = function () {
      var d = 0;
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if (this.GetElementSelectHandle() != null) {
        d = 0;
        if (this.FTextHint !== "") d = 1;
        this.GetElementSelectHandle().selectedIndex = this.FItemIndex + d;
        this.GetElementSelectHandle().setAttribute("role","combobox");
      };
    };
    this.SetItems = function (AItems) {
      this.FItems.Assign(AItems);
    };
    this.SetItemIndex = function (AIndex) {
      if (this.FItemIndex !== AIndex) {
        this.FItemIndex = AIndex;
        this.UpdateElement();
      };
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
      this.DoUpdateList();
    };
    this.Change = function () {
      this.FItemIndex = this.GetItemIndex();
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.PersistinHTML = function () {
      var sel = null;
      pas["WEBLib.Controls"].TControl.PersistinHTML.call(this);
      sel = this.GetElementHandle().children.item(this.GetItemIndex());
      if (sel != null) sel.setAttribute("selected","selected");
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FItems = pas.Classes.TStringList.$create("Create$1");
      this.FItems.FOnChange = rtl.createCallback(this,"DoItemsChange");
      this.FItemIndex = -1;
      this.SetShowFocus(true);
      this.SetHeight(25);
    };
    this.Destroy = function () {
      rtl.free(this,"FItems");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.Clear = function () {
      this.FItems.Clear();
    };
    this.AddItem = function (Item, AObject) {
      this.FItems.AddObject(Item,AObject);
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TComboBox",$mod.TCustomComboBox,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("ItemIndex",3,rtl.longint,"GetItemIndex","SetItemIndex",{Default: -1});
    $r.addProperty("Items",2,pas.Classes.$rtti["TStrings"],"FItems","SetItems");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("TextDirection",0,pas["WEBLib.Controls"].$rtti["TTextDirection"],"FTextDirection","FTextDirection");
    $r.addProperty("TextHint",2,rtl.string,"FTextHint","SetTextHint");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TWebComboBox",$mod.TComboBox,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TFontPicker",$mod.TCustomComboBox,function () {
    this.CreateInitialize = function () {
      var $Self = this;
      var tst = false;
      function Add(s) {
        tst = d.detect(s);
        if (tst) $Self.FItems.Add(s);
      };
      $mod.TCustomComboBox.CreateInitialize.call($Self);
      var Detector = function() {
          // a font will be compared against all the three default fonts.
          // and if it doesn't match all 3 then that font is not available.
          var baseFonts = ['monospace', 'sans-serif', 'serif'];
      
          //we use m or w because these two characters take up the maximum width.
          // And we use a LLi so that the same matching fonts can get separated
          var testString = "mmmmmmmmmmlli";
      
          //we test using 72px font size, we may use any size. I guess larger the better.
          var testSize = '72px';
      
          var h = document.getElementsByTagName("body")[0];
      
          // create a SPAN in the document to get the width of the text we use to test
          var s = document.createElement("span");
          s.style.fontSize = testSize;
          s.innerHTML = testString;
          var defaultWidth = {};
          var defaultHeight = {};
          for (var index in baseFonts) {
              //get the default width for the three base fonts
              s.style.fontFamily = baseFonts[index];
              h.appendChild(s);
              defaultWidth[baseFonts[index]] = s.offsetWidth; //width for the default font
              defaultHeight[baseFonts[index]] = s.offsetHeight; //height for the defualt font
              h.removeChild(s);
          }
      
          function detect(font) {
              var detected = false;
              for (var index in baseFonts) {
                  s.style.fontFamily = font + ',' + baseFonts[index]; // name of the font along with the base font for fallback.
                  h.appendChild(s);
                  var matched = (s.offsetWidth != defaultWidth[baseFonts[index]] || s.offsetHeight != defaultHeight[baseFonts[index]]);
                  h.removeChild(s);
                  detected = detected || matched;
              }
              return detected;
          }
      
          this.detect = detect;
          };
      
          var d = new Detector();
          //tst = d.detect("Arial");
      Add("Arial");
      Add("Arial Black");
      Add("Arial Narrow");
      Add("Courier");
      Add("Courier New");
      Add("Georgia");
      Add("Lucida Console");
      Add("Modena");
      Add("Monotype Corsiva");
      Add("Papyrus");
      Add("Tahoma");
      Add("Times");
      Add("Times New Roman");
      Add("Trebuchet MS");
      Add("Verdana");
      Add("Verona");
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("ItemIndex",3,rtl.longint,"GetItemIndex","SetItemIndex",{Default: -1});
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TWebFontPicker",$mod.TFontPicker,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.TFontSizePickerMode = {"0": "fmPointSize", fmPointSize: 0, "1": "fmRelativeSize", fmRelativeSize: 1};
  $mod.$rtti.$Enum("TFontSizePickerMode",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TFontSizePickerMode});
  rtl.createClass($mod,"TFontSizePicker",$mod.TCustomComboBox,function () {
    this.$init = function () {
      $mod.TCustomComboBox.$init.call(this);
      this.FPickerMode = 0;
    };
    this.SetPickerMode = function (AValue) {
      this.FPickerMode = AValue;
      this.Init();
    };
    this.Init = function () {
      this.FItems.Clear();
      var $tmp1 = this.FPickerMode;
      if ($tmp1 === $mod.TFontSizePickerMode.fmPointSize) {
        this.FItems.Add("8");
        this.FItems.Add("9");
        this.FItems.Add("10");
        this.FItems.Add("11");
        this.FItems.Add("12");
        this.FItems.Add("14");
        this.FItems.Add("16");
        this.FItems.Add("18");
        this.FItems.Add("20");
        this.FItems.Add("22");
        this.FItems.Add("24");
        this.FItems.Add("26");
        this.FItems.Add("28");
        this.FItems.Add("36");
        this.FItems.Add("48");
        this.FItems.Add("72");
      } else if ($tmp1 === $mod.TFontSizePickerMode.fmRelativeSize) {
        this.FItems.Add("8");
        this.FItems.Add("9");
        this.FItems.Add("10");
        this.FItems.Add("14");
        this.FItems.Add("18");
        this.FItems.Add("24");
        this.FItems.Add("36");
      };
    };
    this.CreateInitialize = function () {
      $mod.TCustomComboBox.CreateInitialize.call(this);
      this.SetPickerMode($mod.TFontSizePickerMode.fmPointSize);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("ItemIndex",3,rtl.longint,"GetItemIndex","SetItemIndex",{Default: -1});
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("PickerMode",2,$mod.$rtti["TFontSizePickerMode"],"FPickerMode","SetPickerMode");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TWebFontSizePicker",$mod.TFontSizePicker,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TCustomMemo",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FWordWrap = false;
      this.FBlockChange = false;
      this.FLines = null;
      this.FSelStart = 0;
      this.FSelLength = 0;
      this.FCaretPosition = pas.Types.TPoint.$new();
      this.FAutoSize = false;
      this.FOnChange = null;
      this.FReadOnly = false;
      this.FTextHint = "";
      this.FHandlePastePtr = null;
      this.FHandleCutPtr = null;
      this.FWantTabs = false;
    };
    this.$final = function () {
      this.FLines = undefined;
      this.FCaretPosition = undefined;
      this.FOnChange = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.GetText = function () {
      var Result = "";
      if (this.GetElementInputHandle() != null) {
        this.FBlockChange = true;
        this.FLines.SetTextStr(this.GetElementInputHandle().value);
        this.FBlockChange = false;
      };
      Result = this.FLines.GetTextStr();
      return Result;
    };
    this.SetText = function (Value) {
      this.FLines.SetTextStr(Value);
    };
    this.SetSelLength = function (Value) {
      if (this.FSelLength !== Value) {
        this.FSelLength = Value;
        this.UpdateElement();
      };
    };
    this.SetSelStart = function (Value) {
      if (this.FSelStart !== Value) {
        this.FSelStart = Value;
        this.UpdateElement();
      };
    };
    this.SetAutoSize = function (Value) {
      if (this.FAutoSize !== Value) {
        this.FAutoSize = Value;
        this.UpdateElement();
      };
    };
    this.GetElementInputHandle = function () {
      var Result = null;
      Result = this.GetContainer();
      return Result;
    };
    this.SetReadOnly = function (Value) {
      if (this.FReadOnly !== Value) {
        this.FReadOnly = Value;
        this.UpdateElement();
      };
    };
    this.GetSelLength = function () {
      var Result = 0;
      Result = this.GetElementInputHandle().selectionEnd - this.GetElementInputHandle().selectionStart;
      return Result;
    };
    this.GetSelStart = function () {
      var Result = 0;
      Result = this.GetElementInputHandle().selectionStart;
      return Result;
    };
    this.SetTextHint = function (Value) {
      if (this.FTextHint !== Value) {
        this.FTextHint = Value;
        this.UpdateElement();
      };
    };
    this.HandleDoKeyDown = function (Event) {
      var Result = false;
      var eh = null;
      if ((this.GetKeyCode(Event.key,true) === 9) && this.FWantTabs) {
        eh = this.GetElementInputHandle();
        var sstart = eh.selectionStart;
              var send = eh.selectionEnd;
        
              eh.value = eh.value.substring(0, sstart) + "\t" +eh.value.substring(send);
              // put caret at right position again
              eh.selectionStart = eh.selectionEnd = sstart + 1;
        
              Event.stopPropagation();
              Event.preventDefault();
      } else pas["WEBLib.Controls"].TControl.HandleDoKeyDown.apply(this,arguments);
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("TEXTAREA");
      return Result;
    };
    this.DoHandlePaste = function (Event) {
      var Result = false;
      var s = "";
      var clipboardData = Event.clipboardData || window.clipboardData;
      s = clipboardData.getData('Text');
      if (!this.CanPaste(s)) {
        Event.preventDefault();
        Event.stopPropagation();
      };
      Result = false;
      return Result;
    };
    this.DoHandleCut = function (Event) {
      var Result = false;
      if (!this.CanCut()) {
        Event.preventDefault();
        Event.stopPropagation();
      };
      Result = false;
      return Result;
    };
    this.DoHandleInput = function (Event) {
      var Result = false;
      this.GetText();
      this.Change();
      Result = true;
      return Result;
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Change();
      Result = true;
      return Result;
    };
    this.IsReadOnly = function () {
      var Result = false;
      Result = this.FReadOnly;
      return Result;
    };
    this.PersistinHTML = function () {
      this.GetElementInputHandle().innerHTML = this.FLines.GetTextStr();
    };
    this.GetDisplayText = function () {
      var Result = "";
      Result = this.FLines.GetTextStr();
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetElementInputHandle() != null) {
        this.GetElementInputHandle().oninput = rtl.createCallback(this,"DoHandleInput");
        this.GetElementInputHandle().onchange = rtl.createCallback(this,"DoHandleChange");
        this.GetElementInputHandle().addEventListener("paste",this.FHandlePastePtr);
        this.GetElementInputHandle().addEventListener("cut",this.FHandleCutPtr);
      };
    };
    this.UpdateElementData = function () {
      var ss = 0;
      var sl = 0;
      var e = null;
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if ((this.GetElementInputHandle() != null) && !this.FBlockChange) {
        this.GetElementInputHandle().value = this.GetDisplayText();
        this.GetElementInputHandle().setSelectionRange(this.GetSelStart(),this.GetSelStart() + this.GetSelLength());
        if (!this.GetIsLinked()) this.GetElementInputHandle().style.setProperty("resize","none");
        this.GetElementInputHandle().readOnly = this.IsReadOnly();
        if (this.FTextHint !== "") this.GetElementInputHandle().placeholder = this.FTextHint;
        if (!this.GetIsLinked()) {
          ss = this.FSelStart;
          sl = this.FSelStart + this.FSelLength;
          e = this.GetElementInputHandle();
          setTimeout(function() {
            e.setSelectionRange(ss, sl);
          }, 1);
        };
      };
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if ((this.GetElementInputHandle() != null) && !this.FBlockChange && !this.GetIsLinked()) {
        this.GetElementInputHandle().style.setProperty("overflow","auto");
        this.GetElementInputHandle().style.setProperty("margin","0");
        this.GetElementInputHandle().style.setProperty("padding","0");
        if (this.FColor !== -1) {
          this.GetElementInputHandle().style.setProperty("background-color",pas["WEBLib.Graphics"].ColorToHTML(this.FColor))}
         else this.GetElementInputHandle().style.removeProperty("background-color");
      };
    };
    this.SetLines = function (ALines) {
      this.FLines.Assign(ALines);
    };
    this.ClearMethodPointers = function () {
      pas["WEBLib.Controls"].TControl.ClearMethodPointers.call(this);
      this.FHandlePastePtr = null;
      this.FHandleCutPtr = null;
    };
    this.GetMethodPointers = function () {
      pas["WEBLib.Controls"].TControl.GetMethodPointers.call(this);
      this.FHandlePastePtr = rtl.createCallback(this,"DoHandlePaste");
      this.FHandleCutPtr = rtl.createCallback(this,"DoHandleCut");
    };
    this.DoLinesChange = function (Sender) {
      if ((this.GetElementInputHandle() != null) && !this.FBlockChange) {
        this.GetElementInputHandle().value = this.GetDisplayText();
        this.GetElementInputHandle().readOnly = this.IsReadOnly();
      };
    };
    this.CanPaste = function (AValue) {
      var Result = false;
      Result = true;
      return Result;
    };
    this.CanCut = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.Change = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FLines = pas.Classes.TStringList.$create("Create$1");
      this.FLines.FOnChange = rtl.createCallback(this,"DoLinesChange");
      this.SetWidth(400);
      this.SetHeight(300);
      this.SetShowFocus(true);
      this.SetClipChildren(false);
      this.FWantTabs = false;
      this.FWordWrap = true;
    };
    this.Destroy = function () {
      rtl.free(this,"FLines");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.Clear = function () {
      this.FLines.Clear();
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TMemo",$mod.TCustomMemo,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAutoSize");
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Lines",2,pas.Classes.$rtti["TStrings"],"FLines","SetLines");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ParentColor",2,rtl.boolean,"FParentColor","SetParentColor",{Default: false});
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("ReadOnly",2,rtl.boolean,"FReadOnly","SetReadOnly");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("SelStart",3,rtl.longint,"GetSelStart","SetSelStart");
    $r.addProperty("SelLength",3,rtl.longint,"GetSelLength","SetSelLength");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("TextDirection",0,pas["WEBLib.Controls"].$rtti["TTextDirection"],"FTextDirection","FTextDirection");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnMouseWheel",0,pas["WEBLib.Controls"].$rtti["TMouseWheelEvent"],"FOnMouseWheel","FOnMouseWheel");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TWebMemo",$mod.TMemo,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TControlGroup",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FControls$1 = null;
      this.FOldCount = 0;
      this.FColumns = 0;
      this.FItems = null;
      this.FOnChange = null;
      this.FElementButtonClassName = "";
      this.FElementLabelClassName = "";
      this.FElementGroupClassName = "";
    };
    this.$final = function () {
      this.FControls$1 = undefined;
      this.FItems = undefined;
      this.FOnChange = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.CreateElement = function () {
      var Result = null;
      var legend = null;
      Result = document.createElement("FIELDSET");
      legend = document.createElement("LEGEND");
      Result.appendChild(legend);
      legend.innerHTML = this.FCaption;
      if (this.FCaption === "") {
        legend.style.setProperty("display","none")}
       else legend.style.setProperty("display","");
      Result.style.setProperty("display","inline-block");
      Result.style.setProperty("-webkit-padding-before","0px");
      Result.style.setProperty("-webkit-padding-after","0px");
      Result.style.setProperty("-webkit-padding-end","0px");
      Result.style.setProperty("-webkit-padding-start","0px");
      Result.style.setProperty("border","1px");
      return Result;
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Change();
      Result = true;
      return Result;
    };
    this.DoHandleClick = function (AControl) {
      this.Change();
    };
    this.DoItemsChange = function (Sender) {
      this.DoUpdateList();
    };
    this.DoControlClick = function (Sender) {
      this.DoHandleClick(rtl.as(Sender,pas["WEBLib.Controls"].TCustomControl));
    };
    this.SetCaption = function (AValue) {
      pas["WEBLib.Controls"].TCustomControl.SetCaption.call(this,AValue);
      if (!(this.GetContainer() != null)) return;
      this.GetContainer().firstElementChild.innerHTML = AValue;
      if (AValue === "") {
        this.GetContainer().firstElementChild.style.setProperty("display","none")}
       else this.GetContainer().firstElementChild.style.setProperty("display","");
    };
    this.SetColumns = function (AValue) {
      if ((this.FColumns > 0) && (this.FColumns !== AValue)) {
        this.FColumns = AValue;
        this.DoUpdateList();
      };
    };
    this.SetItems = function (AItems) {
      this.FItems.Assign(AItems);
      this.DoUpdateList();
    };
    this.DoUpdateList = function () {
      var i = 0;
      var s = "";
      var rd = null;
      var dx = 0;
      var dy = 0;
      var dc = 0;
      var col = 0;
      var row = 0;
      var legend = null;
      if (!(this.GetContainer() != null)) return;
      if (this.FItems.GetCount() === 0) return;
      dy = this.FFont.FSize * 3;
      dx = Math.floor(this.GetWidth() / this.FColumns);
      if (this.FCaption !== "") {
        dc = dy}
       else dc = 4;
      col = 0;
      row = 0;
      for (var $l1 = 0, $end2 = this.FOldCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        rd = rtl.getObject(this.FControls$1.Get(i));
        rd = rtl.freeLoc(rd);
      };
      this.FControls$1.Clear();
      while (this.GetContainer().childElementCount > 0) this.GetContainer().removeChild(this.GetContainer().firstChild);
      if (this.FCaption !== "") {
        legend = document.createElement("LEGEND");
        this.GetElementHandle().appendChild(legend);
        legend.innerHTML = this.FCaption;
      };
      if (this.FElementGroupClassName !== "") {
        this.GetElementHandle().setAttribute("class",this.FElementGroupClassName)}
       else this.GetElementHandle().removeAttribute("class");
      this.GetContainer().style.setProperty("margin","0px");
      for (var $l3 = 0, $end4 = this.FItems.GetCount() - 1; $l3 <= $end4; $l3++) {
        i = $l3;
        s = this.FItems.Get(i);
        rd = this.CreateGroupControl(4 + (col * dx),dc + (row * dy),i,s,this.GetGroupControlState(i),true);
        this.FControls$1.Add(rd);
        if (!this.GetIsLinked()) {
          rd.GetContainer().style.setProperty("float","left");
          rd.GetContainer().style.setProperty("width",pas.SysUtils.IntToStr(pas.System.Trunc(100 / this.FColumns)) + "%");
        };
        if ((i % this.FColumns) === 0) rd.GetContainer().style.setProperty("clear","left");
        this.GetElementHandle().appendChild(rd.GetContainer());
        if (col < (this.FColumns - 1)) {
          col += 1}
         else {
          col = 0;
          row += 1;
        };
      };
      this.FOldCount = this.FItems.GetCount();
    };
    this.Change = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
      this.DoUpdateList();
    };
    this.CreateGroupControl = function (ALeft, ATop, AIndex, ACaption, AState, AEnabled) {
      var Result = null;
      Result = null;
      return Result;
    };
    this.GetGroupControlState = function (AIndex) {
      var Result = false;
      Result = false;
      return Result;
    };
    this.GetGroupControl = function (AIndex) {
      var Result = null;
      Result = rtl.getObject(this.FControls$1.Get(AIndex));
      return Result;
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FColumns = 1;
      this.FControls$1 = pas.Classes.TList.$create("Create$1");
      this.FItems = pas.Classes.TStringList.$create("Create$1");
      this.FItems.FOnChange = rtl.createCallback(this,"DoItemsChange");
      this.SetBorderWidth(2);
      this.FOldCount = -1;
      this.SetWidth(200);
      this.SetHeight(200);
    };
    this.Destroy = function () {
      rtl.free(this,"FControls$1");
      rtl.free(this,"FItems");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.EndUpdate = function () {
      pas["WEBLib.Controls"].TControl.EndUpdate.call(this);
      this.DoUpdateList();
    };
    this.SetHeight = function (AValue) {
      pas["WEBLib.Controls"].TControl.SetHeight.apply(this,arguments);
      this.DoUpdateList();
    };
    this.SetWidth = function (AValue) {
      pas["WEBLib.Controls"].TControl.SetWidth.apply(this,arguments);
      this.DoUpdateList();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Columns",2,rtl.longint,"FColumns","SetColumns");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementButtonClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementButtonClassName","FElementButtonClassName");
    $r.addProperty("ElementGroupClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementGroupClassName","FElementGroupClassName");
    $r.addProperty("ElementLabelClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementLabelClassName","FElementLabelClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Items",2,pas.Classes.$rtti["TStrings"],"FItems","SetItems");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
  });
  rtl.createClass($mod,"TRadioGroup",$mod.TControlGroup,function () {
    this.$init = function () {
      $mod.TControlGroup.$init.call(this);
      this.FItemIndex = 0;
      this.FOldItemIndex = 0;
    };
    this.DoHandleClick = function (AControl) {
      if (this.GetItemIndex() === this.FOldItemIndex) return;
      this.Change();
      this.FOldItemIndex = this.GetItemIndex();
    };
    this.GetItemIndex = function () {
      var Result = 0;
      var el = null;
      var i = 0;
      Result = this.FItemIndex;
      for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        el = document.getElementById(this.GetID() + pas.SysUtils.IntToStr(i) + "rd");
        if (el != null) {
          if (el.checked) Result = i;
        };
      };
      return Result;
    };
    this.SetItemIndex = function (AIndex) {
      var el = null;
      if ((AIndex === -1) && (this.FItemIndex >= 0)) {
        el = document.getElementById(this.GetID() + pas.SysUtils.IntToStr(this.FItemIndex) + "rd");
        if (el != null) el.checked = false;
      } else {
        this.FItemIndex = AIndex;
        if ((AIndex >= 0) && (AIndex < this.FItems.GetCount())) {
          el = document.getElementById(this.GetID() + pas.SysUtils.IntToStr(AIndex) + "rd");
          if (el != null) el.checked = true;
        };
      };
    };
    this.CreateGroupControl = function (ALeft, ATop, AIndex, ACaption, AState, AEnabled) {
      var Result = null;
      var rd = null;
      rd = $mod.TRadioButton.$create("Create$2",[this.GetID() + pas.SysUtils.IntToStr(AIndex)]);
      rd.SetElementPosition(this.FElementPosition);
      rd.SetElementFont(this.FElementFont);
      rd.SetElementClassName(this.FElementClassName);
      rd.FElementButtonClassName = this.FElementButtonClassName;
      rd.FElementLabelClassName = this.FElementLabelClassName;
      rd.SetParentFont(false);
      rd.FFont.Assign(this.FFont);
      rd.SetParent(this);
      rd.SetCaption(ACaption);
      rd.SetGroupName(this.GetID());
      rd.SetTop(ATop);
      rd.SetLeft(ALeft);
      rd.SetWidthStyle(pas["WEBLib.Controls"].TSizeStyle.ssAuto);
      rd.SetWidthPercent(100);
      rd.FOnClick = rtl.createCallback(this,"DoControlClick");
      rd.SetChecked(AState);
      rd.SetEnabled(AEnabled);
      rd.FTag$1 = AIndex;
      rd.SetTabStop(true);
      Result = rd;
      return Result;
    };
    this.GetGroupControlState = function (AIndex) {
      var Result = false;
      Result = AIndex === this.FItemIndex;
      return Result;
    };
    this.CreateInitialize = function () {
      $mod.TControlGroup.CreateInitialize.call(this);
      this.FItemIndex = -1;
      this.FOldItemIndex = -2;
    };
    this.SetFocus = function () {
      var idx = 0;
      var rd = null;
      idx = this.GetItemIndex();
      if (idx < 0) idx = 0;
      rd = this.GetGroupControl(idx);
      if (rd != null) rd.SetFocus();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("ItemIndex",3,rtl.longint,"GetItemIndex","SetItemIndex");
  });
  rtl.createClass($mod,"TWebRadioGroup",$mod.TRadioGroup,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$MethodVar("TCheckClickEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AIndex",rtl.longint]]), methodkind: 0});
  rtl.createClass($mod,"TCheckGroup",$mod.TControlGroup,function () {
    this.$init = function () {
      $mod.TControlGroup.$init.call(this);
      this.FOnCheckClick = null;
    };
    this.$final = function () {
      this.FOnCheckClick = undefined;
      $mod.TControlGroup.$final.call(this);
    };
    this.GetChecked = function (AIndex) {
      var Result = false;
      Result = rtl.as(this.GetGroupControl(AIndex),$mod.TCheckBox).GetChecked();
      return Result;
    };
    this.SetChecked = function (AIndex, Value) {
      rtl.as(this.GetGroupControl(AIndex),$mod.TCheckBox).SetChecked(Value);
    };
    this.DoHandleClick = function (AControl) {
      $mod.TControlGroup.DoHandleClick.apply(this,arguments);
      if (this.FOnCheckClick != null) this.FOnCheckClick(this,AControl.FTag$1);
    };
    this.CreateGroupControl = function (ALeft, ATop, AIndex, ACaption, AState, AEnabled) {
      var Result = null;
      var cb = null;
      cb = $mod.TCheckBox.$create("Create$2",[this.GetID() + pas.SysUtils.IntToStr(AIndex)]);
      cb.SetCaption(ACaption);
      cb.SetElementPosition(this.FElementPosition);
      cb.SetElementFont(this.FElementFont);
      cb.SetElementClassName(this.FElementClassName);
      cb.FElementButtonClassName = this.FElementButtonClassName;
      cb.FElementLabelClassName = this.FElementLabelClassName;
      cb.SetParentFont(false);
      cb.FFont.Assign(this.FFont);
      cb.SetParent(this);
      cb.SetTop(ATop);
      cb.SetLeft(ALeft);
      cb.SetWidthStyle(pas["WEBLib.Controls"].TSizeStyle.ssPercent);
      cb.SetWidthPercent(100);
      cb.FOnClick = rtl.createCallback(this,"DoControlClick");
      cb.SetChecked(AState);
      cb.SetEnabled(AEnabled);
      cb.FTag$1 = AIndex;
      cb.SetTabStop(true);
      Result = cb;
      return Result;
    };
    this.GetGroupControlState = function (AIndex) {
      var Result = false;
      Result = false;
      return Result;
    };
    this.CreateInitialize = function () {
      $mod.TControlGroup.CreateInitialize.call(this);
    };
    this.SetFocus = function () {
      var cb = null;
      if (this.FItems.GetCount() > 0) {
        cb = this.GetGroupControl(0);
        if (cb != null) cb.SetFocus();
      };
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("OnCheckClick",0,$mod.$rtti["TCheckClickEvent"],"FOnCheckClick","FOnCheckClick");
  });
  rtl.createClass($mod,"TWebCheckGroup",$mod.TCheckGroup,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TColorPicker",$mod.TCustomInput,function () {
    this.$init = function () {
      $mod.TCustomInput.$init.call(this);
      this.FColor$1 = 0;
      this.FOnSelect = null;
    };
    this.$final = function () {
      this.FOnSelect = undefined;
      $mod.TCustomInput.$final.call(this);
    };
    this.GetElementInputHandle = function () {
      var Result = null;
      Result = this.GetContainer();
      return Result;
    };
    this.UpdateElementVisual = function () {
      $mod.TCustomInput.UpdateElementVisual.call(this);
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().style.setProperty("padding","0px");
        this.GetElementHandle().style.setProperty("width",pas.SysUtils.IntToStr(this.GetWidth() - 2) + "px");
        this.GetElementHandle().style.setProperty("height",pas.SysUtils.IntToStr(this.GetHeight() - 2) + "px");
      };
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      this.Select();
      Result = true;
      return Result;
    };
    this.GetInputType = function () {
      var Result = "";
      Result = "COLOR";
      return Result;
    };
    this.GetColor = function () {
      var Result = 0;
      Result = this.FColor$1;
      if (this.GetContainer() != null) Result = pas["WEBLib.Graphics"].HexToColor(this.GetContainer().value);
      return Result;
    };
    this.SetColor$1 = function (AValue) {
      this.FColor$1 = AValue;
      if (this.GetContainer() != null) this.GetContainer().value = pas["WEBLib.Graphics"].ColorToHTML(AValue);
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetElementInputHandle() != null) {
        this.GetElementInputHandle().oninput = rtl.createCallback(this,"DoHandleChange");
      };
    };
    this.Select = function () {
      if (this.FOnSelect != null) this.FOnSelect(this);
    };
    this.CreateInitialize = function () {
      $mod.TCustomInput.CreateInitialize.call(this);
      this.FColor$1 = 0;
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Color",3,pas["WEBLib.Graphics"].$rtti["TColor"],"GetColor","SetColor$1");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnSelect",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnSelect","FOnSelect");
  });
  rtl.createClass($mod,"TWebColorPicker",$mod.TColorPicker,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TScrollBarContent",pas["WEBLib.Controls"].TCustomControl,function () {
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      return Result;
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.TScrollBarKind = {"0": "sbHorizontal", sbHorizontal: 0, "1": "sbVertical", sbVertical: 1};
  $mod.$rtti.$Enum("TScrollBarKind",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TScrollBarKind});
  rtl.createClass($mod,"TScrollBar",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FScrolling = false;
      this.FContent = null;
      this.FKind = 0;
      this.FPosition = 0;
      this.FSmallChange = 0;
      this.FMax = 0;
      this.FMin = 0;
      this.FLargeChange = 0;
      this.FPageSize = 0;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FContent = undefined;
      this.FOnChange = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetKind = function (Value) {
      if (this.FKind !== Value) {
        this.FKind = Value;
        var $tmp1 = this.FKind;
        if ($tmp1 === $mod.TScrollBarKind.sbHorizontal) {
          this.SetBounds(this.GetLeft(),this.GetTop(),this.GetHeight(),17);
        } else if ($tmp1 === $mod.TScrollBarKind.sbVertical) {
          this.SetBounds(this.GetLeft(),this.GetTop(),17,this.GetWidth());
        };
        this.UpdateElement();
        this.UpdateContent();
      };
    };
    this.SetPosition = function (Value) {
      if (this.FPosition !== Value) {
        this.FPosition = Value;
        this.UpdateContent();
      };
    };
    this.SetMax = function (Value) {
      if (this.FMax !== Value) {
        this.FMax = Value;
        this.UpdateContent();
      };
    };
    this.SetMin = function (Value) {
      if (this.FMin !== Value) {
        this.FMin = Value;
        this.UpdateContent();
      };
    };
    this.SetPageSize = function (Value) {
      if (this.FPageSize !== Value) {
        this.FPageSize = Value;
        this.UpdateContent();
      };
    };
    this.GetPosition = function () {
      var Result = 0;
      Result = 0;
      if (this.GetElement() != null) {
        var $tmp1 = this.FKind;
        if ($tmp1 === $mod.TScrollBarKind.sbHorizontal) {
          Result = Math.round(this.GetValue(this.GetElement().scrollLeft))}
         else if ($tmp1 === $mod.TScrollBarKind.sbVertical) Result = Math.round(this.GetValue(this.GetElement().scrollTop));
      };
      return Result;
    };
    this.GetPageSize = function () {
      var Result = 0;
      Result = this.FPageSize;
      if (Result === 0) Result = 25;
      return Result;
    };
    this.GetValue = function (XYPos) {
      var Result = 0.0;
      Result = 0;
      if (this.FContent != null) {
        var $tmp1 = this.FKind;
        if ($tmp1 === $mod.TScrollBarKind.sbHorizontal) {
          Result = (XYPos / this.FContent.GetWidth()) * (this.FMax - this.FMin)}
         else if ($tmp1 === $mod.TScrollBarKind.sbVertical) Result = (XYPos / this.FContent.GetHeight()) * (this.FMax - this.FMin);
      };
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      return Result;
    };
    this.DoScroll = function (Event) {
      var Result = false;
      this.FScrolling = true;
      if (this.FOnChange != null) this.FOnChange(this);
      this.FScrolling = false;
      Result = true;
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetElementHandle() != null) this.GetElementHandle().onscroll = rtl.createCallback(this,"DoScroll");
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().style.setProperty("overflow","auto");
        var $tmp1 = this.FKind;
        if ($tmp1 === $mod.TScrollBarKind.sbHorizontal) {
          this.GetElementHandle().style.setProperty("overflow-y","hidden");
          this.GetElementHandle().style.setProperty("overflow-x","");
        } else if ($tmp1 === $mod.TScrollBarKind.sbVertical) {
          this.GetElementHandle().style.setProperty("overflow-y","");
          this.GetElementHandle().style.setProperty("overflow-x","hidden");
        };
      };
    };
    this.UpdateContent = function () {
      var x = 0;
      var y = 0;
      var w = 0;
      var h = 0;
      var ps = 0;
      var v = 0.0;
      if (!(this.FContent != null) || !(this.GetElementHandle() != null) || this.FScrolling) return;
      ps = this.GetPageSize();
      v = (this.FMax - this.FMin) / ps;
      var $tmp1 = this.FKind;
      if ($tmp1 === $mod.TScrollBarKind.sbHorizontal) {
        y = 0;
        h = this.GetHeight();
        w = Math.round(v * this.GetWidth());
        x = Math.round(((this.FPosition - this.FMin) / (this.FMax - this.FMin)) * w);
      } else if ($tmp1 === $mod.TScrollBarKind.sbVertical) {
        x = 0;
        w = this.GetWidth();
        h = Math.round(v * this.GetHeight());
        y = Math.round(((this.FPosition - this.FMin) / (this.FMax - this.FMin)) * h);
      };
      this.FContent.SetBounds(0,0,w,h);
      this.GetElementHandle().scrollLeft = x;
      this.GetElementHandle().scrollTop = y;
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
      this.UpdateContent();
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.SetTabStop(true);
      this.FKind = $mod.TScrollBarKind.sbHorizontal;
      this.FPosition = 0;
      this.FMin = 0;
      this.FMax = 100;
      this.FSmallChange = 1;
      this.FLargeChange = 1;
      this.FContent = $mod.TScrollBarContent.$create("Create$1",[this]);
      this.FContent.SetParent(this);
      this.FContent.SetWidth(121);
      this.FContent.SetHeight(17);
      this.SetWidth(121);
      this.SetHeight(17);
      this.UpdateContent();
    };
    this.Destroy = function () {
      rtl.free(this,"FContent");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.SetBounds = function (X, Y, AWidth, AHeight) {
      pas["WEBLib.Controls"].TControl.SetBounds.apply(this,arguments);
      this.UpdateContent();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Kind",2,$mod.$rtti["TScrollBarKind"],"FKind","SetKind");
    $r.addProperty("Position",3,rtl.longint,"GetPosition","SetPosition");
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("SmallChange",0,rtl.longint,"FSmallChange","FSmallChange");
    $r.addProperty("LargeChange",0,rtl.longint,"FLargeChange","FLargeChange");
    $r.addProperty("Max",2,rtl.longint,"FMax","SetMax");
    $r.addProperty("Min",2,rtl.longint,"FMin","SetMin");
    $r.addProperty("PageSize",3,rtl.longint,"GetPageSize","SetPageSize");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
  });
  rtl.createClass($mod,"TWebScrollBar",$mod.TScrollBar,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.GetAutoCompletionName = function (aAutoCompletion) {
    var Result = "";
    var $tmp1 = aAutoCompletion;
    if ($tmp1 === $mod.TAutoCompletion.acOff) {
      Result = ""}
     else if ($tmp1 === $mod.TAutoCompletion.acHonorificPrefix) {
      Result = "honorific-prefix"}
     else if ($tmp1 === $mod.TAutoCompletion.aGivenName) {
      Result = "given-name"}
     else if ($tmp1 === $mod.TAutoCompletion.acAdditionalName) {
      Result = "additional-name"}
     else if ($tmp1 === $mod.TAutoCompletion.acFamilyName) {
      Result = "family-name"}
     else if ($tmp1 === $mod.TAutoCompletion.acHonorificSuffix) {
      Result = "honorific-suffix"}
     else if ($tmp1 === $mod.TAutoCompletion.acNickName) {
      Result = "nickname"}
     else if ($tmp1 === $mod.TAutoCompletion.acEmail) {
      Result = "email"}
     else if ($tmp1 === $mod.TAutoCompletion.acUserName) {
      Result = "username"}
     else if ($tmp1 === $mod.TAutoCompletion.acNewPassword) {
      Result = "new-password"}
     else if ($tmp1 === $mod.TAutoCompletion.acCurrentPassword) {
      Result = "current-password"}
     else if ($tmp1 === $mod.TAutoCompletion.acOrganizationTitle) {
      Result = "organization-title"}
     else if ($tmp1 === $mod.TAutoCompletion.acOrganization) {
      Result = "organization"}
     else if ($tmp1 === $mod.TAutoCompletion.acStreetAddress) {
      Result = "street-address"}
     else if ($tmp1 === $mod.TAutoCompletion.acAddressLine1) {
      Result = "address-line1"}
     else if ($tmp1 === $mod.TAutoCompletion.acAddressLine2) {
      Result = "address-line2"}
     else if ($tmp1 === $mod.TAutoCompletion.acAddressLine3) {
      Result = "address-line3"}
     else if ($tmp1 === $mod.TAutoCompletion.acAddressLevel1) {
      Result = "address-level1"}
     else if ($tmp1 === $mod.TAutoCompletion.acAddressLevel2) {
      Result = "address-level2"}
     else if ($tmp1 === $mod.TAutoCompletion.acAddressLevel3) {
      Result = "address-level3"}
     else if ($tmp1 === $mod.TAutoCompletion.acAddressLevel4) {
      Result = "address-level4"}
     else if ($tmp1 === $mod.TAutoCompletion.acCountry) {
      Result = "country"}
     else if ($tmp1 === $mod.TAutoCompletion.acCountryName) {
      Result = "country-name"}
     else if ($tmp1 === $mod.TAutoCompletion.acPostalCode) {
      Result = "postal-code"}
     else if ($tmp1 === $mod.TAutoCompletion.acCCName) {
      Result = "cc-name"}
     else if ($tmp1 === $mod.TAutoCompletion.acCCGivenName) {
      Result = "cc-given-name"}
     else if ($tmp1 === $mod.TAutoCompletion.acCCAdditionalName) {
      Result = "cc-additional-name"}
     else if ($tmp1 === $mod.TAutoCompletion.acCCFamilyName) {
      Result = "cc-family-name"}
     else if ($tmp1 === $mod.TAutoCompletion.acCCNumber) {
      Result = "cc-number"}
     else if ($tmp1 === $mod.TAutoCompletion.acExpiry) {
      Result = "cc-exp"}
     else if ($tmp1 === $mod.TAutoCompletion.acExpiryMonth) {
      Result = "cc-exp-month"}
     else if ($tmp1 === $mod.TAutoCompletion.acExpiryYear) {
      Result = "cc-exp-year"}
     else if ($tmp1 === $mod.TAutoCompletion.ccCSC) {
      Result = "cc-csc"}
     else if ($tmp1 === $mod.TAutoCompletion.acType) {
      Result = "cc-type"}
     else if ($tmp1 === $mod.TAutoCompletion.acTransactionCurrency) {
      Result = "transaction-currency"}
     else if ($tmp1 === $mod.TAutoCompletion.acTransactionAmount) {
      Result = "transaction-amount"}
     else if ($tmp1 === $mod.TAutoCompletion.acLanguage) {
      Result = "language"}
     else if ($tmp1 === $mod.TAutoCompletion.acBirthday) {
      Result = "bday"}
     else if ($tmp1 === $mod.TAutoCompletion.acBirthdayDay) {
      Result = "bday-day"}
     else if ($tmp1 === $mod.TAutoCompletion.acBirthDayMonth) {
      Result = "bday-month"}
     else if ($tmp1 === $mod.TAutoCompletion.acBirthDayYear) {
      Result = "bday-year"}
     else if ($tmp1 === $mod.TAutoCompletion.acSex) {
      Result = "sex"}
     else if ($tmp1 === $mod.TAutoCompletion.acTelephone) {
      Result = "tel"}
     else if ($tmp1 === $mod.TAutoCompletion.acTelephoneCountryCode) {
      Result = "tel-country-code"}
     else if ($tmp1 === $mod.TAutoCompletion.acTelephoneNational) {
      Result = "tel-national"}
     else if ($tmp1 === $mod.TAutoCompletion.acTelephoneAreaCode) {
      Result = "tel-area-code"}
     else if ($tmp1 === $mod.TAutoCompletion.acTelephoneLocal) {
      Result = "tel-local"}
     else if ($tmp1 === $mod.TAutoCompletion.acTelephoneExtension) {
      Result = "tel-extension"}
     else if ($tmp1 === $mod.TAutoCompletion.acIMPP) {
      Result = "impp"}
     else if ($tmp1 === $mod.TAutoCompletion.acURL) {
      Result = "url"}
     else if ($tmp1 === $mod.TAutoCompletion.acPhoto) Result = "photo";
    return Result;
  };
});
rtl.module("WEBLib.ExtCtrls",["System","Classes","SysUtils","Types","WEBLib.Controls","WEBLib.StdCtrls","WEBLib.Graphics","Web","WEBLib.WebTools"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TCustomLinkLabel",pas["WEBLib.StdCtrls"].TCustomLabel,function () {
    this.$init = function () {
      pas["WEBLib.StdCtrls"].TCustomLabel.$init.call(this);
      this.FDisplText = "";
      this.FOnLinkClick = null;
      this.FWidthStyle$1 = 0;
      this.FHeightPercent$1 = 0;
      this.FHeightStyle$1 = 0;
      this.FWidthPercent$1 = 0;
    };
    this.$final = function () {
      this.FOnLinkClick = undefined;
      pas["WEBLib.StdCtrls"].TCustomLabel.$final.call(this);
    };
    this.SetHeightPercent$1 = function (Value) {
      this.FHeightPercent$1 = Value;
    };
    this.SetHeightStyle$1 = function (Value) {
      this.FHeightStyle$1 = Value;
    };
    this.SetWidthPercent$1 = function (Value) {
      this.FWidthPercent$1 = Value;
    };
    this.SetWidthStyle$1 = function (Value) {
      this.FWidthStyle$1 = Value;
    };
    this.GetOuterWidth = function () {
      var Result = 0;
      Result = this.GetWidth();
      if (this.FAutoSize) Result = Result + 4;
      return Result;
    };
    this.GetOuterHeight = function () {
      var Result = 0;
      Result = this.GetHeight();
      if (this.FAutoSize) Result = Result + 4;
      return Result;
    };
    this.GetDisplayText = function () {
      var Result = "";
      Result = this.FDisplText;
      return Result;
    };
    this.SetCaption = function (AValue) {
      var iopen = 0;
      var iopena = 0;
      var iopeni = 0;
      var iopenend = 0;
      var iopenendt = 0;
      var iclose = 0;
      var scaption = "";
      var shref = "";
      var stext = "";
      var sanchor = "";
      var sid = "";
      var stype = "";
      var anchor = null;
      var span = null;
      var contentelement = null;
      pas["WEBLib.StdCtrls"].TCustomLabel.SetCaption.call(this,AValue);
      if (!(this.GetContainer() != null)) return;
      contentelement = this.GetContentHandle();
      if (this.GetID() !== "") contentelement = document.getElementById(this.GetID());
      contentelement.innerHTML = "";
      scaption = this.FCaption;
      sanchor = '<a href="';
      sid = '<a id="';
      if ((this.FOnLinkClick != null) && ((pas.System.Pos(sanchor,scaption) > 0) || (pas.System.Pos(sid,scaption) > 0))) {
        while ((pas.System.Pos(sanchor,scaption) > 0) || (pas.System.Pos(sid,scaption) > 0)) {
          iopena = pas.System.Pos(sanchor,scaption);
          iopeni = pas.System.Pos(sid,scaption);
          if (((iopena < iopeni) || (iopeni <= 0)) && (iopena > 0)) {
            stype = "#url#";
            iopen = iopena + sanchor.length;
          } else {
            stype = "#id#";
            iopen = iopeni + sid.length;
          };
          iopenend = pas.System.Pos('">',scaption);
          iopenendt = pas.System.Pos('" ',scaption);
          if ((iopenendt > 0) && (iopenendt < iopenend)) iopenend = iopenendt;
          iclose = pas.System.Pos("<\/a>",scaption);
          shref = pas.System.Copy(scaption,iopen,iopenend - iopen);
          iopenend = pas.System.Pos('">',scaption);
          iclose = pas.System.Pos("<\/a>",scaption);
          stext = pas.System.Copy(scaption,iopenend + 2,iclose - (iopenend + 2));
          span = document.createElement("SPAN");
          span.innerHTML = pas.System.Copy(scaption,0,iopen);
          contentelement.appendChild(span);
          anchor = document.createElement("A");
          anchor.setAttribute("href","#");
          anchor.setAttribute("id",stype + shref);
          anchor.innerHTML = stext;
          anchor.onclick = rtl.createCallback(this,"DoLinkClick");
          contentelement.appendChild(anchor);
          pas.System.Delete({get: function () {
              return scaption;
            }, set: function (v) {
              scaption = v;
            }},1,pas.System.Pos("<\/a>",scaption) + 3);
        };
        span = document.createElement("SPAN");
        span.innerHTML = scaption;
        contentelement.appendChild(span);
        this.FDisplText = scaption;
      } else {
        this.FDisplText = pas.SysUtils.StringReplace(AValue,"> <",">&nbsp;<",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
        contentelement.innerHTML = this.FDisplText;
      };
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
    };
    this.DoLinkClick = function (Event) {
      var Result = false;
      var slink = "";
      var stype = "";
      var svalue = "";
      var ltype = 0;
      svalue = Event.target.getAttribute("id");
      stype = "#url#";
      ltype = pas["WEBLib.StdCtrls"].TSysLinkType.sltURL;
      if (!(pas.System.Pos(stype,svalue) > 0)) {
        stype = "#id#";
        ltype = pas["WEBLib.StdCtrls"].TSysLinkType.sltID;
      };
      slink = pas.SysUtils.StringReplace(svalue,stype,"",{});
      if (this.FOnLinkClick != null) this.FOnLinkClick(this,slink,ltype);
      Result = true;
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      this.FWidthStyle$1 = pas["WEBLib.Controls"].TSizeStyle.ssAbsolute;
      this.FWidthPercent$1 = 100;
      this.FHeightStyle$1 = pas["WEBLib.Controls"].TSizeStyle.ssAbsolute;
      this.FHeightPercent$1 = 100;
      this.SetTransparent(false);
      return this;
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("Alignment",2,pas.Classes.$rtti["TAlignment"],"FAlignment","SetAlignment",{Default: pas.Classes.TAlignment.taLeftJustify});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAutoSize",{Default: true});
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor$1","SetColorEx",{Default: 16777215});
    $r.addProperty("EllipsisPosition",2,pas["WEBLib.StdCtrls"].$rtti["TEllipsisPosition"],"FEllipsisPosition","SetEllipsisPosition",{Default: pas["WEBLib.StdCtrls"].TEllipsisPosition.epNone});
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Layout",2,pas["WEBLib.StdCtrls"].$rtti["TTextLayout"],"FLayout","SetLayout",{Default: pas["WEBLib.StdCtrls"].TTextLayout.tlTop});
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WordWrap",0,rtl.boolean,"FWordWrap","FWordWrap",{Default: false});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle$1","SetHeightStyle$1",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle$1","SetWidthStyle$1",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent$1","SetHeightPercent$1",{Default: 100});
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent$1","SetWidthPercent$1",{Default: 100});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnLinkClick",0,pas["WEBLib.StdCtrls"].$rtti["TLinkClickEvent"],"FOnLinkClick","FOnLinkClick");
  });
  rtl.createClass($mod,"TLinkLabel",$mod.TCustomLinkLabel,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
  });
  rtl.createClass($mod,"TWebLinkLabel",$mod.TLinkLabel,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.TTrackBarOrientation = {"0": "trHorizontal", trHorizontal: 0, "1": "trVertical", trVertical: 1};
  $mod.$rtti.$Enum("TTrackBarOrientation",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTrackBarOrientation});
  rtl.createClass($mod,"TTrackBar",pas["WEBLib.StdCtrls"].TCustomInput,function () {
    this.$init = function () {
      pas["WEBLib.StdCtrls"].TCustomInput.$init.call(this);
      this.FMax = 0;
      this.FMin = 0;
      this.FPosition = 0;
      this.FOnChange = null;
      this.FOrientation = 0;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas["WEBLib.StdCtrls"].TCustomInput.$final.call(this);
    };
    this.SetOrientation = function (Value) {
      var ow = 0;
      var oh = 0;
      if (this.FOrientation !== Value) {
        ow = this.GetWidth();
        oh = this.GetHeight();
        this.FOrientation = Value;
        if (!(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) {
          this.SetWidth(oh);
          this.SetHeight(ow);
        };
        this.UpdateElement();
      };
    };
    this.GetElementInputHandle = function () {
      var Result = null;
      Result = this.GetContainer();
      return Result;
    };
    this.GetInputType = function () {
      var Result = "";
      Result = "range";
      return Result;
    };
    this.DoHandleChange = function (Event) {
      var Result = false;
      var el = null;
      el = this.GetElementHandle();
      this.FPosition = el.value;
      this.Change();
      Result = true;
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().oninput = rtl.createCallback(this,"DoHandleChange");
      };
    };
    this.SetMax = function (AValue) {
      if (this.FMax !== AValue) {
        this.FMax = AValue;
        this.DoUpdate();
      };
    };
    this.SetMin = function (AValue) {
      if (this.FMin !== AValue) {
        this.FMin = AValue;
        this.DoUpdate();
      };
    };
    this.SetPosition = function (AValue) {
      if (this.FPosition !== AValue) {
        this.FPosition = AValue;
        this.DoUpdate();
      };
    };
    this.GetPosition = function () {
      var Result = 0;
      var s = "";
      Result = this.FPosition;
      if (!(this.GetContainer() != null)) return Result;
      s = this.GetContainer().value;
      if (s !== "") Result = pas.SysUtils.StrToInt(s);
      return Result;
    };
    this.DoUpdate = function () {
      var el = null;
      if (!(this.GetContainer() != null)) return;
      this.GetContainer().setAttribute("max",pas.SysUtils.IntToStr(this.FMax));
      this.GetContainer().setAttribute("min",pas.SysUtils.IntToStr(this.FMin));
      el = this.GetElementHandle();
      el.value = this.FPosition;
      el.setAttribute('value',this.FPosition);
    };
    this.Change = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.CreateControl = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateControl.call(this);
      this.DoUpdate();
    };
    this.UpdateElementVisual = function () {
      var el = null;
      pas["WEBLib.StdCtrls"].TCustomInput.UpdateElementVisual.call(this);
      el = this.GetElementHandle();
      if (this.FOrientation === $mod.TTrackBarOrientation.trHorizontal) {
        el.removeAttribute("orient");
        el.style.removeProperty("writing-mode");
        el.style.removeProperty("-webkit-appearance");
        el.style.removeProperty("height");
        if (this.FWidthStyle === pas["WEBLib.Controls"].TSizeStyle.ssAbsolute) el.style.setProperty("width",pas.SysUtils.IntToStr(this.GetWidth()));
      } else {
        el.setAttribute("orient","vertical");
        el.style.setProperty("writing-mode","bt-lt");
        el.style.setProperty("-webkit-appearance","slider-vertical");
        el.style.removeProperty("width");
        if (this.FHeightStyle === pas["WEBLib.Controls"].TSizeStyle.ssAbsolute) el.style.setProperty("height",pas.SysUtils.IntToStr(this.GetHeight()));
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.StdCtrls"].TCustomInput.CreateInitialize.call(this);
      this.FMax = 100;
      this.FMin = 0;
      this.FPosition = 0;
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("Max",2,rtl.longint,"FMax","SetMax",{Default: 10});
    $r.addProperty("Min",2,rtl.longint,"FMin","SetMin",{Default: 0});
    $r.addProperty("Orientation",2,$mod.$rtti["TTrackBarOrientation"],"FOrientation","SetOrientation",{Default: $mod.TTrackBarOrientation.trHorizontal});
    $r.addProperty("Position",3,rtl.longint,"GetPosition","SetPosition",{Default: 0});
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
  });
  rtl.createClass($mod,"TWebTrackBar",$mod.TTrackBar,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTimer",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FInterval = 0;
      this.FTimerID = 0;
      this.FOnTimer = null;
      this.FEnabled = false;
    };
    this.$final = function () {
      this.FOnTimer = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.SetEnabled = function (Value) {
      this.FEnabled = Value;
      this.DoUpdateTimer();
    };
    this.SetInterval = function (AValue) {
      this.FInterval = AValue;
      this.DoUpdateTimer();
    };
    this.DoTimer = function () {
      if (this.FOnTimer != null) this.FOnTimer(this);
    };
    this.DoUpdateTimer = function () {
      this.DoClearTimer();
      if (this.FEnabled) this.FTimerID = window.setInterval(rtl.createCallback(this,"DoTimer"),this.FInterval);
    };
    this.DoClearTimer = function () {
      if (this.FTimerID !== -1) {
        window.clearInterval(this.FTimerID);
        this.FTimerID = -1;
      };
    };
    this.Create$1 = function (AOwner) {
      pas.Classes.TComponent.Create$1.apply(this,arguments);
      this.FInterval = 1000;
      this.FTimerID = -1;
      this.SetEnabled(true);
      return this;
    };
    this.Destroy = function () {
      this.DoClearTimer();
      pas.Classes.TComponent.Destroy.call(this);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Interval",2,rtl.longint,"FInterval","SetInterval",{Default: 1000});
    $r.addProperty("OnTimer",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnTimer","FOnTimer");
  });
  rtl.createClass($mod,"TWebTimer",$mod.TTimer,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$MethodVar("TGeolocationEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Lat",rtl.double],["Lon",rtl.double],["Alt",rtl.double]]), methodkind: 0});
  rtl.createClass($mod,"TGeoLocation",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FOnGeolocation = null;
    };
    this.$final = function () {
      this.FOnGeolocation = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.CreateElement = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.DoHandleGeolocation = function (APosition) {
      if (this.FOnGeolocation != null) this.FOnGeolocation(this,APosition.coords.latitude,APosition.coords.longitude,APosition.coords.altitude);
    };
    this.HasGeolocation = function () {
      var Result = false;
      Result = navigator.geolocation != null;
      return Result;
    };
    this.GetGeolocation = function () {
      if (navigator.geolocation != null) {
        navigator.geolocation.getCurrentPosition(rtl.createCallback(this,"DoHandleGeolocation"));
      };
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("OnGeolocation",0,$mod.$rtti["TGeolocationEvent"],"FOnGeolocation","FOnGeolocation");
  });
  rtl.createClass($mod,"TWebGeoLocation",$mod.TGeoLocation,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TPaintBox",pas["WEBLib.Controls"].TGraphicControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TGraphicControl.$init.call(this);
      this.FOnPaint = null;
    };
    this.$final = function () {
      this.FOnPaint = undefined;
      pas["WEBLib.Controls"].TGraphicControl.$final.call(this);
    };
    this.Paint = function () {
      pas["WEBLib.Controls"].TCustomControl.Paint.call(this);
      if (this.FOnPaint != null) this.FOnPaint(this);
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        this.GetElementHandle().style.setProperty("border","1px dotted gray");
      };
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnMouseWheel",0,pas["WEBLib.Controls"].$rtti["TMouseWheelEvent"],"FOnMouseWheel","FOnMouseWheel");
    $r.addProperty("OnPaint",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnPaint","FOnPaint");
    $r.addProperty("OnTouchStart",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchStart","FOnTouchStart");
    $r.addProperty("OnTouchMove",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchMove","FOnTouchMove");
    $r.addProperty("OnTouchEnd",0,pas["WEBLib.Controls"].$rtti["TTouchEvent"],"FOnTouchEnd","FOnTouchEnd");
  });
  rtl.createClass($mod,"TWebPaintBox",$mod.TPaintBox,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TCustomImageControl",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FURL = "";
      this.FPicture = null;
      this.FAutoSize = false;
      this.FOnLoaded = null;
    };
    this.$final = function () {
      this.FPicture = undefined;
      this.FOnLoaded = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetURL = function (AURL) {
      this.FURL = AURL;
      this.SetContainerURL(AURL);
    };
    this.GetBase64Img = function () {
      var Result = "";
      Result = pas["WEBLib.WebTools"].GetBase64Image(this.GetElementHandle(),0,0);
      return Result;
    };
    this.HandleDoDrag = function (aEvent) {
      var Result = false;
      Result = true;
      return Result;
    };
    this.HandleDoDragEnd = function (aEvent) {
      var Result = false;
      var obj = null;
      this.DoEndDrag(obj,0,0);
      Result = true;
      return Result;
    };
    this.HandleDoDragExit = function (aEvent) {
      var Result = false;
      Result = true;
      return Result;
    };
    this.HandleDoDragOver = function (aEvent) {
      var Result = false;
      var allow = false;
      var obj = null;
      aEvent.preventDefault();
      this.DragOver(obj,0,0,pas["WEBLib.Controls"].TDragState.dsDragMove,{get: function () {
          return allow;
        }, set: function (v) {
          allow = v;
        }});
      Result = true;
      return Result;
    };
    this.HandleDoDragStart = function (aEvent) {
      var Result = false;
      var obj = null;
      aEvent.preventDefault();
      aEvent.dataTransfer.effectAllowed = "copy";
      aEvent.dataTransfer.dropEffect = "copy";
      aEvent.dataTransfer.setData("text","dragdrop");
      this.DoStartDrag({get: function () {
          return obj;
        }, set: function (v) {
          obj = v;
        }});
      Result = true;
      return Result;
    };
    this.HandleDoDrop = function (aEvent) {
      var Result = false;
      this.DragDrop(aEvent,aEvent.clientX,aEvent.clientY);
      Result = true;
      return Result;
    };
    this.HandleImageLoad = function (aEvent) {
      var Result = false;
      if (this.FOnLoaded != null) this.FOnLoaded(this);
      Result = true;
      return Result;
    };
    this.SetPicture = function (Value) {
      this.FPicture.Assign(Value);
    };
    this.PictureChanged = function (Sender) {
      this.SetURL(this.FPicture.FFilename);
      this.UpdateElement();
    };
    this.PictureDataChanged = function (Sender) {
      this.SetContainerURL("data:image\/png;base64," + pas["WEBLib.WebTools"].HexImageDecodeAsBase64(this.FPicture.GetData()));
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetElementHandle() != null) {
        this.GetContainer().setAttribute("draggable","true");
        this.GetContainer().setAttribute("droppable","true");
        this.GetElementHandle().ondrag = rtl.createCallback(this,"HandleDoDrag");
        this.GetElementHandle().ondragend = rtl.createCallback(this,"HandleDoDragEnd");
        this.GetElementHandle().ondragexit = rtl.createCallback(this,"HandleDoDragExit");
        this.GetElementHandle().ondragover = rtl.createCallback(this,"HandleDoDragOver");
        this.GetElementHandle().ondragstart = rtl.createCallback(this,"HandleDoDragStart");
        this.GetElementHandle().ondrop = rtl.createCallback(this,"HandleDoDrop");
      };
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("IMG");
      Result.addEventListener("load",rtl.createCallback(this,"HandleImageLoad"));
      if (this.FURL !== "") Result.setAttribute("src",this.FURL);
      return Result;
    };
    this.UpdateElement = function () {
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if (this.FAutoSize && (this.GetElementHandle() != null)) {
        this.GetElementHandle().style.removeProperty("width");
        this.GetElementHandle().style.removeProperty("height");
      };
    };
    this.SetContainerURL = function (AURL) {
      if (this.GetContainer() != null) {
        this.GetContainer().setAttribute("src",AURL);
        this.UpdateElement();
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FPicture = pas["WEBLib.Graphics"].TURLPicture.$create("Create");
      this.FPicture.FOnChange = rtl.createCallback(this,"PictureChanged");
      this.FPicture.FOnDataChange = rtl.createCallback(this,"PictureDataChanged");
      this.SetColor(-1);
      this.SetTabStop(false);
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        this.SetWidth(400);
        this.SetHeight(300);
      };
    };
    this.Destroy = function () {
      rtl.free(this,"FPicture");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.DataURL = function () {
      var Result = "";
      Result = "data:image\/png;base64," + this.GetBase64Img();
      return Result;
    };
    this.DataURL$1 = function (AWidth, AHeight) {
      var Result = "";
      Result = "data:image\/png;base64," + pas["WEBLib.WebTools"].GetBase64Image(this.GetElementHandle(),AWidth,AHeight);
      return Result;
    };
    this.ResizeImage = function () {
      this.ResizeImage$1(this.GetWidth(),this.GetHeight());
    };
    this.ResizeImage$1 = function (AWidth, AHeight) {
      this.SetURL("data:image\/png;base64," + pas["WEBLib.WebTools"].GetBase64Image(this.GetElementHandle(),this.GetWidth(),this.GetHeight()));
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("AutoSize",0,rtl.boolean,"FAutoSize","FAutoSize",{Default: false});
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnLoaded",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnLoaded","FOnLoaded");
  });
  rtl.createClass($mod,"TImageControl",$mod.TCustomImageControl,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Picture",2,pas["WEBLib.Graphics"].$rtti["TURLPicture"],"FPicture","SetPicture");
    $r.addProperty("URL",2,rtl.string,"FURL","SetURL");
  });
  rtl.createClass($mod,"TWebImageControl",$mod.TImageControl,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$Class("TImageZoomControl");
  rtl.createClass($mod,"TImageZoomAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FHeightPercent = 0;
      this.FWidthPercent = 0;
      this.FResponsiveHeightPercent = 0;
      this.FResponsiveWidthPercent = 0;
      this.FResponsiveMaxWidth = 0;
    };
    this.$final = function () {
      this.FOwner = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetHeightPercent = function (Value) {
      if ((this.FHeightPercent !== Value) && (this.FHeightPercent <= 100)) {
        this.FHeightPercent = Value;
        this.FOwner.UpdateElement();
      };
    };
    this.SetWidthPercent = function (Value) {
      if ((this.FWidthPercent !== Value) && (this.FWidthPercent <= 100)) {
        this.FWidthPercent = Value;
        this.FOwner.UpdateElement();
      };
    };
    this.SetResponsiveHeightPercent = function (Value) {
      if ((this.FResponsiveHeightPercent !== Value) && (this.FResponsiveHeightPercent <= 100)) {
        this.FResponsiveHeightPercent = Value;
        this.FOwner.UpdateElement();
      };
    };
    this.SetResponsiveWidthPercent = function (Value) {
      if ((this.FResponsiveWidthPercent !== Value) && (this.FResponsiveWidthPercent <= 100)) {
        this.FResponsiveWidthPercent = Value;
        this.FOwner.UpdateElement();
      };
    };
    this.SetResponsiveMaxWidth = function (Value) {
      if ((this.FResponsiveMaxWidth !== Value) && (this.FResponsiveMaxWidth >= 0)) {
        this.FResponsiveMaxWidth = Value;
        this.FOwner.UpdateElement();
      };
    };
    this.Create$1 = function (AOwner) {
      this.FHeightPercent = 100;
      this.FWidthPercent = 100;
      this.FResponsiveHeightPercent = 100;
      this.FResponsiveWidthPercent = 100;
      this.FResponsiveMaxWidth = 768;
      this.FOwner = AOwner;
      return this;
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.Assign = function (Source) {
      pas.Classes.TPersistent.Assign.apply(this,arguments);
      if ($mod.TImageZoomAppearance.isPrototypeOf(Source)) {
        this.FHeightPercent = rtl.as(Source,$mod.TImageZoomAppearance).FHeightPercent;
        this.FWidthPercent = rtl.as(Source,$mod.TImageZoomAppearance).FWidthPercent;
        this.FResponsiveHeightPercent = rtl.as(Source,$mod.TImageZoomAppearance).FResponsiveHeightPercent;
        this.FResponsiveWidthPercent = rtl.as(Source,$mod.TImageZoomAppearance).FResponsiveWidthPercent;
        this.FResponsiveMaxWidth = rtl.as(Source,$mod.TImageZoomAppearance).FResponsiveMaxWidth;
      };
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner;
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("HeightPercent",2,rtl.longint,"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("WidthPercent",2,rtl.longint,"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("ResponsiveHeightPercent",2,rtl.longint,"FResponsiveHeightPercent","SetResponsiveHeightPercent",{Default: 100});
    $r.addProperty("ResponsiveWidthPercent",2,rtl.longint,"FResponsiveWidthPercent","SetResponsiveWidthPercent",{Default: 100});
    $r.addProperty("ResponsiveMaxWidth",2,rtl.longint,"FResponsiveMaxWidth","SetResponsiveMaxWidth",{Default: 768});
  });
  rtl.createClass($mod,"TImageZoomControl",$mod.TCustomImageControl,function () {
    this.$init = function () {
      $mod.TCustomImageControl.$init.call(this);
      this.FStyle = null;
      this.FOverlay = null;
      this.FPictureZoom = null;
      this.FURLZoom = "";
      this.FPictureZoomDataURL = "";
      this.FAppearance = null;
    };
    this.$final = function () {
      this.FStyle = undefined;
      this.FOverlay = undefined;
      this.FPictureZoom = undefined;
      this.FAppearance = undefined;
      $mod.TCustomImageControl.$final.call(this);
    };
    this.SetPictureZoom = function (Value) {
      this.FPictureZoom.Assign(Value);
    };
    this.SetURLZoom = function (Value) {
      if (this.FURLZoom !== Value) {
        this.FURLZoom = Value;
        this.UpdateElement();
      };
    };
    this.PictureZoomChanged = function (Sender) {
      this.SetURLZoom(this.FPictureZoom.FFilename);
      this.FPictureZoomDataURL = "";
      this.UpdateElement();
    };
    this.PictureZoomDataChanged = function (Sender) {
      this.FPictureZoomDataURL = "data:image\/png;base64," + pas["WEBLib.WebTools"].HexImageDecodeAsBase64(this.FPictureZoom.GetData());
      this.UpdateElement();
    };
    this.UpdateElement = function () {
      var PopupImage = "";
      var Popup = null;
      $mod.TCustomImageControl.UpdateElement.call(this);
      if (!(this.GetElementHandle() != null)) return;
      if (this.FOverlay != null) {
        this.GetElementHandle().setAttribute("onClick",'document.getElementById("' + this.FName + 'myModal").style.display = "block"');
        if (this.FPictureZoomDataURL !== "") {
          PopupImage = this.FPictureZoomDataURL}
         else PopupImage = this.FURLZoom;
        if (PopupImage === "") PopupImage = this.FURL;
        this.FStyle.innerHTML = "." + this.FName + "modal-overlay {\r" + "  display: none;\r" + "  position: fixed;\r" + "  z-index: 9999;\r" + "  width: 100%;\r" + "  height: 100%;\r" + "  overflow: hidden;\r" + "  top: 50%;\r" + "  left: 50%;\r" + "  -ms-transform: translate(-50%, -50%);\r" + "  transform: translate(-50%, -50%);\r" + "  background-color: rgba(0,0,0,0.2);\r" + "}\r" + "." + this.FName + "modal {\r" + "  display: block;\r" + "  position: absolute;\r" + "  z-index: 9999;\r" + "  width: " + pas.SysUtils.IntToStr(this.FAppearance.FWidthPercent) + "%;\r" + "  height: " + pas.SysUtils.IntToStr(this.FAppearance.FHeightPercent) + "%;\r" + "  overflow: hidden;\r" + "  top: 50%;\r" + "  left: 50%;\r" + "  -ms-transform: translate(-50%, -50%);\r" + "  transform: translate(-50%, -50%);\r" + "  background-color: rgba(0,0,0,0.9);\r" + "}\r" + "." + this.FName + "modal-content {\r" + "  display: block;\r" + "  margin: 0;\r" + "  position: absolute;\r" + "  top: 50%;\r" + "  left: 50%;\r" + "  -ms-transform: translate(-50%, -50%);\r" + "  transform: translate(-50%, -50%);\r" + "  max-width: 100%;\r" + "  max-height: 100%;\r" + "}\r" + "." + this.FName + "close {\r" + "  z-index: 9999;\r" + "  position: absolute;\r" + "  top: 15px;\r" + "  right: 35px;\r" + "  color: #f1f1f1;\r" + "  font-size: 40px;\r" + "  font-weight: bold;\r" + "  transition: 0.3s;\r" + "}\r" + "." + this.FName + "close:hover,\r" + "." + this.FName + "close:focus {\r" + "  color: #bbb;\r" + "  text-decoration: none;\r" + "  cursor: pointer;\r" + "}\r" + "@media only screen and (max-width: 769px) {\r" + "\t." + this.FName + "modal {\r" + "  width: " + pas.SysUtils.IntToStr(this.FAppearance.FResponsiveWidthPercent) + "%;\r" + "  height: " + pas.SysUtils.IntToStr(this.FAppearance.FResponsiveHeightPercent) + "%;\r" + "\t}\r" + "}\r";
        this.FOverlay.setAttribute("onClick",'this.style.display = "none";');
        this.FOverlay.setAttribute("id",this.FName + "myModal");
        this.FOverlay.setAttribute("class",this.FName + "modal-overlay");
        while (this.FOverlay.firstChild != null) this.FOverlay.removeChild(this.FOverlay.firstChild);
        Popup = document.createElement("DIV");
        Popup.setAttribute("class",this.FName + "modal");
        Popup.innerHTML = '<span class="' + this.FName + 'close">&times;<\/span>' + '<img class="' + this.FName + 'modal-content" src="' + PopupImage + '">';
        this.FOverlay.innerHTML = "";
        this.FOverlay.appendChild(Popup);
      };
    };
    this.CreateInitialize = function () {
      $mod.TCustomImageControl.CreateInitialize.call(this);
      this.FAppearance = $mod.TImageZoomAppearance.$create("Create$1",[this]);
      this.FPictureZoom = pas["WEBLib.Graphics"].TURLPicture.$create("Create");
      this.FPictureZoom.FOnChange = rtl.createCallback(this,"PictureZoomChanged");
      this.FPictureZoom.FOnDataChange = rtl.createCallback(this,"PictureZoomDataChanged");
      this.FPictureZoomDataURL = "";
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        this.SetWidth(100);
        this.SetHeight(75);
      };
    };
    this.CreateElement = function () {
      var Result = null;
      Result = $mod.TCustomImageControl.CreateElement.call(this);
      this.FStyle = document.createElement("STYLE");
      this.FOverlay = document.createElement("DIV");
      document.body.appendChild(this.FStyle);
      document.body.appendChild(this.FOverlay);
      return Result;
    };
    this.Destroy = function () {
      rtl.free(this,"FAppearance");
      rtl.free(this,"FPictureZoom");
      $mod.TCustomImageControl.Destroy.call(this);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Appearance",0,$mod.$rtti["TImageZoomAppearance"],"FAppearance","FAppearance");
    $r.addProperty("Picture",2,pas["WEBLib.Graphics"].$rtti["TURLPicture"],"FPicture","SetPicture");
    $r.addProperty("URL",2,rtl.string,"FURL","SetURL");
    $r.addProperty("PictureZoom",2,pas["WEBLib.Graphics"].$rtti["TURLPicture"],"FPictureZoom","SetPictureZoom");
    $r.addProperty("URLZoom",2,rtl.string,"FURLZoom","SetURLZoom");
  });
  rtl.createClass($mod,"TWebImageZoomControl",$mod.TImageZoomControl,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TCustomPanel",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FAutoSize = false;
      this.FPadding = null;
      this.FShowCaption = false;
      this.FLabel = null;
      this.FPanelBody = null;
      this.FElementBodyClassName = "";
    };
    this.$final = function () {
      this.FPadding = undefined;
      this.FLabel = undefined;
      this.FPanelBody = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetShowCaption = function (Value) {
      if (this.FShowCaption !== Value) {
        this.FShowCaption = Value;
        this.UpdateElementVisual();
      };
    };
    this.SetPadding = function (Value) {
      this.FPadding.Assign(Value);
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      this.FPanelBody = document.createElement("DIV");
      this.FPanelBody.setAttribute("class","card-body");
      Result.appendChild(this.FPanelBody);
      return Result;
    };
    this.SetCaption = function (AValue) {
      pas["WEBLib.Controls"].TCustomControl.SetCaption.call(this,AValue);
      if ((this.GetElementHandle() != null) && this.FShowCaption) {
        if (!(this.FLabel != null)) {
          this.FLabel = document.createElement("SPAN");
          this.FLabel.innerHTML = this.FCaption;
          if (this.GetChildContainer() != null) {
            this.GetChildContainer().appendChild(this.FLabel)}
           else this.GetElementHandle().appendChild(this.FLabel);
          this.UpdateElementVisual();
        } else {
          this.FLabel.innerHTML = this.FCaption;
        };
      };
    };
    this.SetBorderStyle = function (AValue) {
      pas["WEBLib.Controls"].TCustomControl.SetBorderStyle.apply(this,arguments);
      this.UpdateElement();
    };
    this.SetAutoSize = function (AValue) {
      var i = 0;
      var mx = 0;
      var my = 0;
      var r = null;
      var el = null;
      this.FAutoSize = AValue;
      if (this.FAutoSize && !this.IsUpdating()) {
        if ((this.FWidthStyle === pas["WEBLib.Controls"].TSizeStyle.ssAbsolute) && (this.FHeightStyle === pas["WEBLib.Controls"].TSizeStyle.ssAbsolute)) {
          mx = 0;
          my = 0;
          for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
            i = $l1;
            if (this.GetControls(i).FWidthStyle === pas["WEBLib.Controls"].TSizeStyle.ssAbsolute) {
              if ((this.GetControls(i).GetLeft() + this.GetControls(i).GetWidth()) > mx) mx = this.GetControls(i).GetLeft() + this.GetControls(i).GetWidth();
            } else {
              el = this.GetControls(i).GetElementHandle();
              if (el != null) {
                r = el.getBoundingClientRect();
                if (((r.x - this.GetLeft()) + r.width) > mx) mx = Math.round((r.x - this.GetLeft()) + r.width);
              };
            };
            if (this.GetControls(i).FHeightStyle === pas["WEBLib.Controls"].TSizeStyle.ssAbsolute) {
              if ((this.GetControls(i).GetTop() + this.GetControls(i).GetHeight()) > my) my = this.GetControls(i).GetTop() + this.GetControls(i).GetHeight();
            } else {
              el = this.GetControls(i).GetElementHandle();
              if (el != null) {
                r = el.getBoundingClientRect();
                if (((r.y - this.GetTop()) + r.height) > my) my = Math.round((r.y - this.GetTop()) + r.height);
              };
            };
          };
          this.SetWidth(mx);
          this.SetHeight(my);
        } else {
          this.SetWidth(-1);
          this.SetHeight(-1);
        };
        this.UpdateElement();
      };
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if (this.GetElementHandle() != null) {
        if (!this.GetIsLinked()) {
          if (this.FAutoSize) {
            this.GetElementHandle().style.setProperty("overflow","");
            this.GetElementHandle().style.setProperty("white-space","normal");
            if (this.FVisible) this.GetElementHandle().style.setProperty("display","inline");
          } else {
            this.GetElementHandle().style.setProperty("overflow","hidden");
            this.GetElementHandle().style.setProperty("white-space","nowrap");
            if (this.FVisible) this.GetElementHandle().style.setProperty("display","inline-block");
          };
          this.GetElementHandle().style.setProperty("padding-left",pas.SysUtils.IntToStr(this.FPadding.FLeft) + "px");
          this.GetElementHandle().style.setProperty("padding-right",pas.SysUtils.IntToStr(this.FPadding.FRight) + "px");
          this.GetElementHandle().style.setProperty("padding-top",pas.SysUtils.IntToStr(this.FPadding.FTop) + "px");
          this.GetElementHandle().style.setProperty("padding-bottom",pas.SysUtils.IntToStr(this.FPadding.FBottom) + "px");
          this.GetElementHandle().style.setProperty("box-sizing","border-box");
          if (this.FElementBodyClassName !== "") {
            this.GetChildContainer().setAttribute("class",this.FElementBodyClassName)}
           else this.GetChildContainer().removeAttribute("class");
        };
        if (this.FLabel != null) {
          if (this.FShowCaption) {
            this.FLabel.innerHTML = this.FCaption}
           else this.FLabel.innerHTML = "";
          if (this.FVisible) {
            this.GetElementHandle().style.setProperty("display","flex");
            this.GetElementHandle().style.setProperty("justify-content","center");
            this.GetElementHandle().style.setProperty("align-items","center");
          };
        };
        this.GetElementHandle().style.setProperty("user-select","");
        if (this.FCursor === 0) this.GetElementHandle().style.setProperty("cursor","");
      };
    };
    this.GetOuterWidth = function () {
      var Result = 0;
      Result = pas["WEBLib.Controls"].TControl.GetOuterWidth.call(this);
      return Result;
    };
    this.GetOuterHeight = function () {
      var Result = 0;
      Result = pas["WEBLib.Controls"].TControl.GetOuterHeight.call(this);
      return Result;
    };
    this.GetChildContainer = function () {
      var Result = null;
      if (this.FPanelBody != null) {
        Result = this.FPanelBody}
       else Result = pas["WEBLib.Controls"].TControl.GetChildContainer.call(this);
      return Result;
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FEnablePropagation = true;
      this.FAutoSize = false;
      this.SetColor(15790320);
      this.SetTabStop(false);
      this.FCustomBorder = true;
      this.SetShowCaption(true);
      this.FControlStyle = rtl.unionSet(this.FControlStyle,rtl.createSet(pas["WEBLib.Controls"].TControlStyleValue.csAcceptsControls));
      this.FLabel = null;
      this.FPadding = pas["WEBLib.Controls"].TPadding.$create("Create$1");
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        this.SetWidth(400);
        this.SetHeight(300);
      };
    };
    this.Destroy = function () {
      rtl.free(this,"FPadding");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.EndUpdate = function () {
      pas["WEBLib.Controls"].TControl.EndUpdate.call(this);
      if (this.FAutoSize) this.SetAutoSize(true);
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TPanel",$mod.TCustomPanel,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAutoSize",{Default: false});
    $r.addProperty("BorderColor",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FBorderColor","SetBorderColor",{Default: 12632256});
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ElementBodyClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementBodyClassName","FElementBodyClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("Padding",2,pas["WEBLib.Controls"].$rtti["TPadding"],"FPadding","SetPadding");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ShowCaption",2,rtl.boolean,"FShowCaption","SetShowCaption",{Default: true});
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
  });
  rtl.createClass($mod,"TDivPanel",$mod.TPanel,function () {
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("DIV");
      return Result;
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TWebPanel",$mod.TPanel,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TCustomGroupBox",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FCaption$1 = "";
      this.FCaptionSpan = null;
      this.FControlSpan = null;
    };
    this.$final = function () {
      this.FCaptionSpan = undefined;
      this.FControlSpan = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetCaption = function (Value) {
      if (this.FCaption$1 !== Value) {
        this.FCaption$1 = Value;
        this.UpdateElementData();
      };
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      this.FControlSpan = document.createElement("SPAN");
      this.FCaptionSpan = document.createElement("SPAN");
      Result.appendChild(this.FControlSpan);
      Result.appendChild(this.FCaptionSpan);
      return Result;
    };
    this.UpdateElementData = function () {
      pas["WEBLib.Controls"].TControl.UpdateElementData.call(this);
      if (this.FCaptionSpan != null) {
        this.FCaptionSpan.innerHTML = this.FCaption$1;
      };
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().style.setProperty("overflow","visible");
        this.GetElementHandle().style.setProperty("white-space","nowrap");
        if (this.FVisible) this.GetElementHandle().style.setProperty("display","inline-block");
        this.GetElementHandle().style.setProperty("webkit-user-select","none");
        this.GetElementHandle().style.setProperty("moz-user-select","none");
        this.GetElementHandle().style.setProperty("khtml-user-select","none");
        this.GetElementHandle().style.setProperty("ms-user-select","none");
        this.GetElementHandle().style.setProperty("user-select","none");
        this.GetElementHandle().style.setProperty("border-bottom","1px solid lightgray");
        this.FCaptionSpan.style.setProperty("left","8px");
        this.FCaptionSpan.style.setProperty("top","0px");
        this.FCaptionSpan.style.setProperty("position","absolute");
        pas["WEBLib.Controls"].SetHTMLElementColor(this.FCaptionSpan,this.FColor,!(this.FElementClassName === ""));
        this.FCaptionSpan.style.setProperty("zindex","100");
        this.FControlSpan.style.setProperty("display","inline-block");
        this.FControlSpan.style.setProperty("width","100%");
        this.FControlSpan.style.setProperty("height","98%");
        this.FControlSpan.style.setProperty("margin-top","8px");
        this.FControlSpan.style.setProperty("border-style","solid");
        this.FControlSpan.style.setProperty("border-width","1px");
        this.FControlSpan.style.setProperty("border-color","lightgray");
        pas["WEBLib.Controls"].SetHTMLElementColor(this.FControlSpan,this.FColor,!(this.FElementClassName === ""));
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FEnablePropagation = true;
      this.FControlStyle = rtl.unionSet(this.FControlStyle,rtl.createSet(pas["WEBLib.Controls"].TControlStyleValue.csAcceptsControls));
      this.SetColor(15790320);
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        this.SetWidth(400);
        this.SetHeight(300);
      };
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TGroupBox",$mod.TCustomGroupBox,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("Caption",2,rtl.string,"FCaption$1","SetCaption");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
  });
  rtl.createClass($mod,"TWebGroupBox",$mod.TGroupBox,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TScrollBox",$mod.TCustomPanel,function () {
    this.$init = function () {
      $mod.TCustomPanel.$init.call(this);
      this.FAutoScroll = false;
      this.FScrollBars = 0;
    };
    this.GetScrollLeft = function () {
      var Result = 0;
      Result = this.GetElementHandle().scrollLeft;
      return Result;
    };
    this.GetScrollTop = function () {
      var Result = 0;
      Result = this.GetElementHandle().scrollTop;
      return Result;
    };
    this.SetScrollLeft = function (Value) {
      this.GetElementHandle().scrollLeft = Value;
    };
    this.SetScrollTop = function (Value) {
      this.GetElementHandle().scrollTop = Value;
    };
    this.SetScrollBars = function (Value) {
      if (this.FScrollBars !== Value) {
        this.FScrollBars = Value;
        this.UpdateElement();
      };
    };
    this.UpdateElement = function () {
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if ((this.GetElementHandle() != null) && !this.IsUpdating()) {
        var $tmp1 = this.FScrollBars;
        if ($tmp1 === pas["WEBLib.Controls"].TScrollStyle.ssNone) {
          this.GetElementHandle().style.setProperty("overflow","hidden");
        } else if ($tmp1 === pas["WEBLib.Controls"].TScrollStyle.ssVertical) {
          this.GetElementHandle().style.removeProperty("overflow");
          this.GetElementHandle().style.setProperty("overflow-x","hidden");
          this.GetElementHandle().style.setProperty("overflow-y","auto");
        } else if ($tmp1 === pas["WEBLib.Controls"].TScrollStyle.ssHorizontal) {
          this.GetElementHandle().style.removeProperty("overflow");
          this.GetElementHandle().style.setProperty("overflow-x","auto");
          this.GetElementHandle().style.setProperty("overflow-y","hidden");
        } else if ($tmp1 === pas["WEBLib.Controls"].TScrollStyle.ssBoth) {
          this.GetElementHandle().style.setProperty("overflow","auto");
        };
        if (this.FVisible) this.GetElementHandle().style.setProperty("display","inline-block");
      };
    };
    this.SetAutoScroll = function (AValue) {
      this.FAutoScroll = AValue;
    };
    this.GetClientRect = function () {
      var Result = pas.Types.TRect.$new();
      var dw = 0;
      var dh = 0;
      dw = 0;
      dh = 0;
      if ((this.GetElementHandle().scrollHeight > this.GetElementHandle().clientHeight) && (this.FScrollBars in rtl.createSet(pas["WEBLib.Controls"].TScrollStyle.ssBoth,pas["WEBLib.Controls"].TScrollStyle.ssVertical))) dw = 16;
      if ((this.GetElementHandle().scrollWidth > this.GetElementHandle().clientWidth) && (this.FScrollBars in rtl.createSet(pas["WEBLib.Controls"].TScrollStyle.ssBoth,pas["WEBLib.Controls"].TScrollStyle.ssHorizontal))) dh = 16;
      Result.$assign(pas.Types.Rect(0,0,this.GetElementHandle().clientWidth - dw,this.GetElementHandle().clientHeight - dh));
      return Result;
    };
    this.CreateInitialize = function () {
      $mod.TCustomPanel.CreateInitialize.call(this);
      this.FAutoScroll = true;
      this.FScrollBars = pas["WEBLib.Controls"].TScrollStyle.ssBoth;
    };
    this.EndUpdate = function () {
      $mod.TCustomPanel.EndUpdate.call(this);
      this.AlignControl(this);
      this.AlignControl(this);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("AutoScroll",2,rtl.boolean,"FAutoScroll","SetAutoScroll");
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ScrollBars",2,pas["WEBLib.Controls"].$rtti["TScrollStyle"],"FScrollBars","SetScrollBars");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnResize",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnResize","FOnResize");
  });
  rtl.createClass($mod,"TWebScrollBox",$mod.TScrollBox,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TCustomDragControl",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FText = "";
    };
    this.SetText = function (AValue) {
      if (this.FText !== AValue) {
        this.FText = AValue;
        this.Invalidate();
      };
    };
    this.HandleDoDrag = function (aEvent) {
      var Result = false;
      Result = true;
      return Result;
    };
    this.HandleDoDragEnd = function (aEvent) {
      var Result = false;
      this.DoEndDrag(this,aEvent.clientX,aEvent.clientY);
      Result = true;
      return Result;
    };
    this.HandleDoDragExit = function (aEvent) {
      var Result = false;
      Result = true;
      return Result;
    };
    this.HandleDoDragOver = function (aEvent) {
      var Result = false;
      var Accept = false;
      aEvent.preventDefault();
      Accept = true;
      this.DragOver(this,aEvent.clientX,aEvent.clientY,pas["WEBLib.Controls"].TDragState.dsDragMove,{get: function () {
          return Accept;
        }, set: function (v) {
          Accept = v;
        }});
      Result = true;
      return Result;
    };
    this.HandleDoDragStart = function (aEvent) {
      var Result = false;
      var obj = null;
      aEvent.dataTransfer.setData("text",this.FText);
      this.DoStartDrag({get: function () {
          return obj;
        }, set: function (v) {
          obj = v;
        }});
      Result = true;
      return Result;
    };
    this.HandleDoDrop = function (aEvent) {
      var Result = false;
      aEvent.preventDefault();
      this.SetText(aEvent.dataTransfer.getData("text"));
      this.DragDrop(this,aEvent.clientX,aEvent.clientY);
      Result = true;
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      if (this.GetElementHandle() != null) {
        this.GetContainer().setAttribute("draggable","true");
        this.GetElementHandle().ondragend = rtl.createCallback(this,"HandleDoDragEnd");
        this.GetElementHandle().ondragexit = rtl.createCallback(this,"HandleDoDragExit");
        this.GetElementHandle().ondragover = rtl.createCallback(this,"HandleDoDragOver");
        this.GetElementHandle().ondragstart = rtl.createCallback(this,"HandleDoDragStart");
        this.GetElementHandle().ondrop = rtl.createCallback(this,"HandleDoDrop");
      };
    };
    this.Paint = function () {
      this.GetCanvas().FPen.SetColor(255);
      this.GetCanvas().FPen.FWidth = 1;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psSolid;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsSolid;
      this.GetCanvas().FBrush.FColor = 65535;
      this.GetCanvas().Rectangle$2(this.GetClientRect());
      this.GetCanvas().TextOut(10,10,this.FText);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Text",2,rtl.string,"FText","SetText");
  });
  rtl.createClass($mod,"TSplitter",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FLayer$1 = null;
      this.FFirstMove = false;
      this.FSplitControl = null;
      this.FSizing = false;
      this.FSizingX = 0.0;
      this.FSizingY = 0.0;
      this.FOriginalWidth = 0;
      this.FOriginalHeight = 0;
      this.FGripColor = 0;
      this.FOnMoved = null;
      this.FOnMove = null;
    };
    this.$final = function () {
      this.FLayer$1 = undefined;
      this.FSplitControl = undefined;
      this.FOnMoved = undefined;
      this.FOnMove = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetGripColor = function (Value) {
      if (this.FGripColor !== Value) {
        this.FGripColor = Value;
        this.Invalidate();
      };
    };
    this.ColorChanging = function () {
      pas["WEBLib.Controls"].TControl.ColorChanging.call(this);
      this.Invalidate();
    };
    this.HandleDocDoMouseMove = function (Event) {
      var Result = false;
      var dx = 0;
      var dy = 0;
      if (this.FSizing && (this.FSplitControl != null)) {
        if (this.FFirstMove) {
          this.FSizingX = Event.clientX;
          this.FSizingY = Event.clientY;
          this.FFirstMove = false;
        } else {
          dx = Math.round(Event.clientX - this.FSizingX);
          dy = Math.round(Event.clientY - this.FSizingY);
          if (this.FAlign === pas["WEBLib.Controls"].TAlign.alLeft) this.FSplitControl.SetWidth(this.FOriginalWidth + dx);
          if (this.FAlign === pas["WEBLib.Controls"].TAlign.alRight) this.FSplitControl.SetWidth(this.FOriginalWidth - dx);
          if (this.FAlign === pas["WEBLib.Controls"].TAlign.alTop) this.FSplitControl.SetHeight(this.FOriginalHeight + dy);
          if (this.FAlign === pas["WEBLib.Controls"].TAlign.alBottom) this.FSplitControl.SetHeight(this.FOriginalHeight - dy);
          this.DoRealign();
          if (this.FOnMove != null) this.FOnMove(this);
        };
      };
      Result = true;
      return Result;
    };
    this.HandleDocDoMouseUp = function (Event) {
      var Result = false;
      this.FSizing = false;
      this.FSplitControl = null;
      this.FFirstMove = true;
      this.FLayer$1.parentNode.removeChild(this.FLayer$1);
      Result = true;
      if (this.FOnMoved != null) this.FOnMoved(this);
      return Result;
    };
    this.DoMouseEnter = function () {
      pas["WEBLib.Controls"].TControl.DoMouseEnter.call(this);
      if (this.FAlign in rtl.createSet(pas["WEBLib.Controls"].TAlign.alLeft,pas["WEBLib.Controls"].TAlign.alRight)) this.SetControlCursor(14);
      if (this.FAlign in rtl.createSet(pas["WEBLib.Controls"].TAlign.alTop,pas["WEBLib.Controls"].TAlign.alBottom)) this.SetControlCursor(15);
    };
    this.MouseUp = function (Button, Shift, X, Y) {
      pas["WEBLib.Controls"].TControl.MouseUp.apply(this,arguments);
      this.FSizing = false;
      this.FSplitControl = null;
      this.ReleaseCapture();
    };
    this.MouseDown = function (Button, Shift, X, Y) {
      var r = pas.Types.TRect.$new();
      var rc = pas.Types.TRect.$new();
      var i = 0;
      var c = null;
      var eh = null;
      pas["WEBLib.Controls"].TControl.MouseDown.apply(this,arguments);
      this.FSizing = true;
      r.$assign(pas.Types.Rect(this.GetLeft(),this.GetTop(),this.GetLeft() + this.GetWidth(),this.GetTop() + this.GetHeight()));
      if (this.FParent != null) {
        for (var $l1 = 0, $end2 = this.FParent.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          c = this.FParent.GetControls(i);
          if ((c.FAlign === this.FAlign) && (c !== this)) {
            rc.$assign(pas.Types.Rect(c.GetLeft(),c.GetTop(),c.GetLeft() + c.GetWidth(),c.GetTop() + c.GetHeight()));
            if ((this.FAlign === pas["WEBLib.Controls"].TAlign.alLeft) && ((rc.Right - r.Left) < 4)) {
              this.FSplitControl = c;
              this.FOriginalWidth = this.FSplitControl.GetWidth();
              this.FSizing = true;
              this.FSizingX = X;
              this.FSizingY = Y;
              break;
            };
            if ((this.FAlign === pas["WEBLib.Controls"].TAlign.alRight) && ((rc.Left - r.Right) < 4)) {
              this.FSplitControl = c;
              this.FOriginalWidth = this.FSplitControl.GetWidth();
              this.FSizing = true;
              this.FSizingX = X;
              this.FSizingY = Y;
              break;
            };
            if ((this.FAlign === pas["WEBLib.Controls"].TAlign.alTop) && ((rc.Bottom - r.Top) < 4)) {
              this.FSplitControl = c;
              this.FOriginalHeight = this.FSplitControl.GetHeight();
              this.FSizing = true;
              this.FSizingX = X;
              this.FSizingY = Y;
              break;
            };
            if ((this.FAlign === pas["WEBLib.Controls"].TAlign.alBottom) && ((rc.Top - r.Bottom) < 4)) {
              this.FSplitControl = c;
              this.FOriginalHeight = this.FSplitControl.GetHeight();
              this.FSizing = true;
              this.FSizingX = X;
              this.FSizingY = Y;
              break;
            };
          };
        };
      };
      this.FLayer$1 = document.createElement("SPAN");
      document.body.appendChild(this.FLayer$1);
      eh = this.FLayer$1;
      eh.style.setProperty("top","0");
      eh.style.setProperty("left","0");
      eh.style.setProperty("right","0");
      eh.style.setProperty("bottom","0");
      eh.style.setProperty("z-index","99999999");
      eh.style.setProperty("webkit-user-select","none");
      eh.style.setProperty("moz-user-select","none");
      eh.style.setProperty("khtml-user-select","none");
      eh.style.setProperty("ms-user-select","none");
      eh.style.setProperty("user-select","none");
      eh.style.setProperty("position","absolute");
      if (this.FAlign in rtl.createSet(pas["WEBLib.Controls"].TAlign.alLeft,pas["WEBLib.Controls"].TAlign.alRight)) eh.style.setProperty("cursor","col-resize");
      if (this.FAlign in rtl.createSet(pas["WEBLib.Controls"].TAlign.alTop,pas["WEBLib.Controls"].TAlign.alBottom)) eh.style.setProperty("cursor","row-resize");
      this.FFirstMove = true;
      eh.addEventListener("mousemove",rtl.createCallback(this,"HandleDocDoMouseMove"));
      eh.addEventListener("mouseup",rtl.createCallback(this,"HandleDocDoMouseUp"));
    };
    this.Paint = function () {
      var xofs = 0;
      var dx = 0;
      var yofs = 0;
      var dy = 0;
      var i = 0;
      this.GetCanvas().FBrush.FColor = this.FColor;
      this.GetCanvas().FPen.SetColor(this.FColor);
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsSolid;
      this.GetCanvas().Rectangle$2(this.GetClientRect());
      if (this.FAlign in rtl.createSet(pas["WEBLib.Controls"].TAlign.alLeft,pas["WEBLib.Controls"].TAlign.alRight)) {
        dx = 0;
        dy = 6;
        yofs = Math.floor(this.GetHeight() / 2) - 9;
        xofs = Math.floor(this.GetWidth() / 2);
      };
      if (this.FAlign in rtl.createSet(pas["WEBLib.Controls"].TAlign.alTop,pas["WEBLib.Controls"].TAlign.alBottom)) {
        dx = 6;
        dy = 0;
        xofs = Math.floor(this.GetWidth() / 2) - 9;
        yofs = Math.floor(this.GetHeight() / 2) - 1;
      };
      this.GetCanvas().FBrush.FColor = this.FGripColor;
      this.GetCanvas().FPen.SetColor(this.FGripColor);
      for (i = 0; i <= 2; i++) {
        this.GetCanvas().Rectangle$1(xofs,yofs,xofs + 2,yofs + 2);
        xofs = xofs + dx;
        yofs = yofs + dy;
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.SetControlCursor(14);
      this.SetWidth(6);
      this.SetHeight(100);
      this.SetAlign(pas["WEBLib.Controls"].TAlign.alLeft);
      this.FSplitControl = null;
      this.SetGripColor(16777215);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("GripColor",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FGripColor","SetGripColor",{Default: 16777215});
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnMove",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMove","FOnMove");
    $r.addProperty("OnMoved",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMoved","FOnMoved");
  });
  rtl.createClass($mod,"TWebSplitter",$mod.TSplitter,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.TVerticalAlignment = {"0": "vaTop", vaTop: 0, "1": "vaCenter", vaCenter: 1, "2": "vaBottom", vaBottom: 2};
  $mod.$rtti.$Enum("TVerticalAlignment",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TVerticalAlignment});
  this.TGridPanelExpandStyle = {"0": "esAddRows", esAddRows: 0, "1": "esAddColumns", esAddColumns: 1};
  $mod.$rtti.$Enum("TGridPanelExpandStyle",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TGridPanelExpandStyle});
  rtl.createClass($mod,"TGridPanelRow",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FSizeStyle = 0;
      this.FValue = 0;
      this.FMarginBottom = 0;
      this.FMarginTop = 0;
      this.FAlignment = 0;
      this.FElementClassName = "";
    };
    this.SetMarginBottom = function (Value) {
      if (this.FMarginBottom !== Value) {
        this.FMarginBottom = Value;
        this.FCollection.Update(this);
      };
    };
    this.SetMarginTop = function (Value) {
      if (this.FMarginTop !== Value) {
        this.FMarginTop = Value;
        this.FCollection.Update(this);
      };
    };
    this.SetSizeStyle = function (Value) {
      if (this.FSizeStyle !== Value) {
        this.FSizeStyle = Value;
        this.FCollection.Update(this);
      };
    };
    this.SetValue = function (Value) {
      if (this.FValue !== Value) {
        this.FValue = Value;
        this.FCollection.Update(this);
      };
    };
    this.HeightAttribute = function () {
      var Result = "";
      Result = "";
      var $tmp1 = this.FSizeStyle;
      if ($tmp1 === pas["WEBLib.Controls"].TSizeStyle.ssPercent) {
        Result = pas.SysUtils.IntToStr(this.FValue) + "%"}
       else if ($tmp1 === pas["WEBLib.Controls"].TSizeStyle.ssAbsolute) Result = pas.SysUtils.IntToStr(this.FValue) + "px";
      return Result;
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      this.FSizeStyle = pas["WEBLib.Controls"].TSizeStyle.ssPercent;
      this.FAlignment = $mod.TVerticalAlignment.vaTop;
      this.FMarginTop = 0;
      this.FMarginBottom = 0;
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TGridPanelRow.isPrototypeOf(Source)) {
        this.FAlignment = rtl.as(Source,$mod.TGridPanelRow).FAlignment;
        this.FSizeStyle = rtl.as(Source,$mod.TGridPanelRow).FSizeStyle;
        this.FElementClassName = rtl.as(Source,$mod.TGridPanelRow).FElementClassName;
        this.FValue = rtl.as(Source,$mod.TGridPanelRow).FValue;
        this.FMarginTop = rtl.as(Source,$mod.TGridPanelRow).FMarginTop;
        this.FMarginBottom = rtl.as(Source,$mod.TGridPanelRow).FMarginBottom;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Alignment",0,$mod.$rtti["TVerticalAlignment"],"FAlignment","FAlignment",{Default: $mod.TVerticalAlignment.vaTop});
    $r.addProperty("ElementClassName",0,rtl.string,"FElementClassName","FElementClassName");
    $r.addProperty("MarginTop",2,rtl.longint,"FMarginTop","SetMarginTop");
    $r.addProperty("MarginBottom",2,rtl.longint,"FMarginBottom","SetMarginBottom");
    $r.addProperty("SizeStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FSizeStyle","SetSizeStyle");
    $r.addProperty("Value",2,rtl.longint,"FValue","SetValue");
  });
  rtl.createClass($mod,"TGridPanelRows",pas.Classes.TOwnedCollection,function () {
    this.$init = function () {
      pas.Classes.TOwnedCollection.$init.call(this);
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TOwnedCollection.$final.call(this);
    };
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItem$1 = function (Index, Value) {
      this.SetItem(Index,Value);
    };
    this.Update = function (Item) {
      pas.Classes.TCollection.Update.apply(this,arguments);
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,$mod.TGridPanelRow);
      return this;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
    this.Insert$1 = function (Index) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,Index);
      return Result;
    };
  });
  rtl.createClass($mod,"TGridPanelColumn",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FSizeStyle = 0;
      this.FValue = 0;
      this.FMarginLeft = 0;
      this.FAlignment = 0;
      this.FMarginRight = 0;
      this.FElementClassName = "";
    };
    this.SetMarginLeft = function (Value) {
      if (this.FMarginLeft !== Value) {
        this.FMarginLeft = Value;
        this.FCollection.Update(this);
      };
    };
    this.SetMarginRight = function (Value) {
      if (this.FMarginRight !== Value) {
        this.FMarginRight = Value;
        this.FCollection.Update(this);
      };
    };
    this.SetSizeStyle = function (Value) {
      if (this.FSizeStyle !== Value) {
        this.FSizeStyle = Value;
        this.FCollection.Update(this);
      };
    };
    this.SetValue = function (Value) {
      if (this.FValue !== Value) {
        this.FValue = Value;
        this.FCollection.Update(this);
      };
    };
    this.WidthAttribute = function () {
      var Result = "";
      Result = "";
      var $tmp1 = this.FSizeStyle;
      if ($tmp1 === pas["WEBLib.Controls"].TSizeStyle.ssPercent) {
        Result = pas.SysUtils.IntToStr(this.FValue) + "%"}
       else if ($tmp1 === pas["WEBLib.Controls"].TSizeStyle.ssAbsolute) Result = pas.SysUtils.IntToStr(this.FValue) + "px";
      return Result;
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      this.FSizeStyle = pas["WEBLib.Controls"].TSizeStyle.ssPercent;
      this.FMarginLeft = 0;
      this.FMarginRight = 0;
      this.FAlignment = pas.Classes.TAlignment.taLeftJustify;
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TGridPanelColumn.isPrototypeOf(Source)) {
        this.FAlignment = rtl.as(Source,$mod.TGridPanelColumn).FAlignment;
        this.FSizeStyle = rtl.as(Source,$mod.TGridPanelColumn).FSizeStyle;
        this.FElementClassName = rtl.as(Source,$mod.TGridPanelColumn).FElementClassName;
        this.FValue = rtl.as(Source,$mod.TGridPanelColumn).FValue;
        this.FMarginLeft = rtl.as(Source,$mod.TGridPanelColumn).FMarginLeft;
        this.FMarginRight = rtl.as(Source,$mod.TGridPanelColumn).FMarginRight;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Alignment",0,pas.Classes.$rtti["TAlignment"],"FAlignment","FAlignment",{Default: pas.Classes.TAlignment.taLeftJustify});
    $r.addProperty("ElementClassName",0,rtl.string,"FElementClassName","FElementClassName");
    $r.addProperty("MarginLeft",2,rtl.longint,"FMarginLeft","SetMarginLeft",{Default: 0});
    $r.addProperty("MarginRight",2,rtl.longint,"FMarginRight","SetMarginRight",{Default: 0});
    $r.addProperty("SizeStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FSizeStyle","SetSizeStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssPercent});
    $r.addProperty("Value",2,rtl.longint,"FValue","SetValue");
  });
  rtl.createClass($mod,"TGridPanelColumns",pas.Classes.TOwnedCollection,function () {
    this.$init = function () {
      pas.Classes.TOwnedCollection.$init.call(this);
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TOwnedCollection.$final.call(this);
    };
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItem$1 = function (Index, Value) {
      this.SetItem(Index,Value);
    };
    this.Update = function (Item) {
      pas.Classes.TCollection.Update.apply(this,arguments);
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,$mod.TGridPanelColumn);
      return this;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
    this.Insert$1 = function (Index) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,Index);
      return Result;
    };
  });
  rtl.createClass($mod,"TControlCollectionItem",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FControl = null;
      this.FRow = 0;
      this.FColumn = 0;
    };
    this.$final = function () {
      this.FControl = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.Assign = function (Source) {
      if ($mod.TControlCollectionItem.isPrototypeOf(Source)) {
        this.FColumn = rtl.as(Source,$mod.TControlCollectionItem).FColumn;
        this.FRow = rtl.as(Source,$mod.TControlCollectionItem).FRow;
        this.FControl = rtl.as(Source,$mod.TControlCollectionItem).FControl;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Column",0,rtl.longint,"FColumn","FColumn");
    $r.addProperty("Row",0,rtl.longint,"FRow","FRow");
    $r.addProperty("Control",0,pas["WEBLib.Controls"].$rtti["TWinControl"],"FControl","FControl");
  });
  rtl.createClass($mod,"TControlCollection",pas.Classes.TOwnedCollection,function () {
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItem$1 = function (Index, Value) {
      this.SetItem(Index,Value);
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,$mod.TControlCollectionItem);
      return this;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
    this.Insert$1 = function (Index) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,Index);
      return Result;
    };
  });
  rtl.createClass($mod,"TGridPanel",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FDesignTime = false;
      this.FUpdateTable = false;
      this.FColCount = 0;
      this.FRowCollection = null;
      this.FColumnCollection = null;
      this.FControlCollection = null;
      this.FGridLineWidth = 0;
      this.FGridLineColor = 0;
      this.FExpandStyle = 0;
      this.FTbl = null;
      this.FTblBody = null;
    };
    this.$final = function () {
      this.FRowCollection = undefined;
      this.FColumnCollection = undefined;
      this.FControlCollection = undefined;
      this.FTbl = undefined;
      this.FTblBody = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetColumnCollection = function (Value) {
      this.FColumnCollection.Assign(Value);
    };
    this.SetRowCollection = function (Value) {
      this.FRowCollection.Assign(Value);
    };
    this.SetControlCollection = function (Value) {
      this.FControlCollection.Assign(Value);
    };
    this.CreateTable = function () {
      var Result = null;
      var row = null;
      var j = 0;
      var ps = "";
      this.FTbl = document.createElement("table");
      this.FTbl.setAttribute("width","100%");
      this.FTbl.setAttribute("height","100%");
      if (this.FElementClassName !== "") {
        this.FTbl.setAttribute("class",this.FElementClassName)}
       else {
        if ((this.FGridLineColor !== -1) && (this.FGridLineWidth > 0)) {
          ps = pas.SysUtils.IntToStr(this.FGridLineWidth) + "px solid " + pas["WEBLib.Graphics"].ColorToHTML(this.FGridLineColor)}
         else {
          if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
            ps = "1px dotted gray"}
           else ps = "0px";
        };
        this.FTbl.style.setProperty("border",ps);
        this.FTbl.style.setProperty("border-collapse","collapse");
      };
      pas["WEBLib.Controls"].SetHTMLElementColor(this.FTbl,this.FColor,!((this.FElementClassName === "") && !this.GetIsLinked()));
      this.FTblBody = document.createElement("tbody");
      for (var $l1 = 0, $end2 = this.FRowCollection.GetCount() - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        row = this.CreateRow(j);
        this.FTblBody.appendChild(row);
      };
      this.FTbl.appendChild(this.FTblBody);
      Result = this.FTbl;
      return Result;
    };
    this.CreateRow = function (AIndex) {
      var Result = null;
      var row = null;
      var cell = null;
      var i = 0;
      var ps = "";
      if ((this.FGridLineColor !== -1) && (this.FGridLineWidth > 0)) {
        ps = pas.SysUtils.IntToStr(this.FGridLineWidth) + "px solid " + pas["WEBLib.Graphics"].ColorToHTML(this.FGridLineColor)}
       else {
        if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
          ps = "1px dotted gray"}
         else ps = "0px";
      };
      row = document.createElement("tr");
      if (this.FElementClassName === "") row.style.setProperty("border",ps);
      if (this.FRowCollection.GetItem$1(AIndex).FMarginTop !== 0) row.style.setProperty("margin-top",pas.SysUtils.IntToStr(this.FRowCollection.GetItem$1(AIndex).FMarginTop));
      if (this.FRowCollection.GetItem$1(AIndex).FMarginBottom !== 0) row.style.setProperty("margin-bottom",pas.SysUtils.IntToStr(this.FRowCollection.GetItem$1(AIndex).FMarginBottom));
      if (this.FRowCollection.GetItem$1(AIndex).FElementClassName !== "") {
        row.setAttribute("class",this.FRowCollection.GetItem$1(AIndex).FElementClassName);
      };
      var $tmp1 = this.FRowCollection.GetItem$1(AIndex).FAlignment;
      if ($tmp1 === $mod.TVerticalAlignment.vaCenter) {
        row.setAttribute("valign","middle")}
       else if ($tmp1 === $mod.TVerticalAlignment.vaBottom) row.setAttribute("valign","bottom");
      if (this.FElementClassName === "") row.style.setProperty("border",ps);
      row.setAttribute("height",this.FRowCollection.GetItem$1(AIndex).HeightAttribute());
      for (var $l2 = 0, $end3 = this.FColumnCollection.GetCount() - 1; $l2 <= $end3; $l2++) {
        i = $l2;
        cell = document.createElement("td");
        if (this.FElementClassName === "") cell.style.setProperty("border",ps);
        if (this.FColumnCollection.GetItem$1(i).FMarginLeft !== 0) cell.style.setProperty("margin-left",pas.SysUtils.IntToStr(this.FColumnCollection.GetItem$1(i).FMarginLeft));
        if (this.FColumnCollection.GetItem$1(i).FMarginRight !== 0) cell.style.setProperty("margin-right",pas.SysUtils.IntToStr(this.FColumnCollection.GetItem$1(i).FMarginRight));
        if (this.FColumnCollection.GetItem$1(i).FElementClassName !== "") {
          cell.setAttribute("class",this.FColumnCollection.GetItem$1(i).FElementClassName);
        };
        var $tmp4 = this.FColumnCollection.GetItem$1(i).FAlignment;
        if ($tmp4 === pas.Classes.TAlignment.taCenter) {
          cell.setAttribute("align","center")}
         else if ($tmp4 === pas.Classes.TAlignment.taRightJustify) cell.setAttribute("align","right");
        cell.setAttribute("id",this.FName + "R" + pas.SysUtils.IntToStr(AIndex) + "C" + pas.SysUtils.IntToStr(i));
        if (AIndex === 0) {
          cell.style.setProperty("width",this.FColumnCollection.GetItem$1(i).WidthAttribute());
        };
        row.appendChild(cell);
      };
      Result = row;
      return Result;
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      return Result;
    };
    this.UpdateTable = function () {
      var i = 0;
      var j = 0;
      var k = 0;
      var numrows = 0;
      var fragment = null;
      var ctrlid = "";
      var destid = "";
      var control = null;
      var el = null;
      var row = null;
      var isPercent = false;
      if (!(this.FTblBody != null)) return;
      i = 0;
      j = 0;
      if (this.FTblBody.childNodes.length < this.FRowCollection.GetCount()) {
        isPercent = true;
        for (var $l1 = 0, $end2 = this.FRowCollection.GetCount() - 1; $l1 <= $end2; $l1++) {
          k = $l1;
          if (this.FRowCollection.GetItem$1(k).FSizeStyle !== pas["WEBLib.Controls"].TSizeStyle.ssPercent) {
            isPercent = false;
            break;
          };
        };
        if (isPercent) {
          for (var $l3 = 0, $end4 = this.FRowCollection.GetCount() - 1; $l3 <= $end4; $l3++) {
            k = $l3;
            this.FRowCollection.GetItem$1(k).SetValue(pas.System.Trunc(100 / this.FRowCollection.GetCount()));
          };
        };
      };
      numrows = this.FRowCollection.GetCount();
      if (this.FColCount !== this.FColumnCollection.GetCount()) numrows = 0;
      while (this.FTblBody.childNodes.length > numrows) {
        this.FTblBody.removeChild(this.FTblBody.childNodes.item(this.FTblBody.childNodes.length - 1));
      };
      while (this.FTblBody.childNodes.length < this.FRowCollection.GetCount()) {
        row = this.CreateRow(this.FTblBody.childNodes.length);
        this.FTblBody.appendChild(row);
        row.setAttribute("height",this.FRowCollection.GetItem$1(j).HeightAttribute());
      };
      for (var $l5 = 0, $end6 = this.FControlCollection.GetCount() - 1; $l5 <= $end6; $l5++) {
        k = $l5;
        if (this.FControlCollection.GetItem$1(k).FControl != null) {
          fragment = document.createDocumentFragment();
          control = this.FControlCollection.GetItem$1(k).FControl;
          this.FControlCollection.GetItem$1(k).FColumn = i;
          this.FControlCollection.GetItem$1(k).FRow = j;
          control.SetElementPosition(pas["WEBLib.Controls"].TElementPosition.epRelative);
          control.SetChildOrderEx(-1);
          ctrlid = control.GetID();
          if (control.FAlign === pas["WEBLib.Controls"].TAlign.alLeft) {
            control.SetHeightStyle(pas["WEBLib.Controls"].TSizeStyle.ssPercent);
            control.SetHeight(100);
            if (control.GetElementHandle() != null) control.GetElementHandle().style.setProperty("float","left");
          };
          if (control.FAlign === pas["WEBLib.Controls"].TAlign.alRight) {
            control.SetHeightStyle(pas["WEBLib.Controls"].TSizeStyle.ssPercent);
            control.SetHeight(100);
            if (control.GetElementHandle() != null) control.GetElementHandle().style.setProperty("float","right");
          };
          if (control.FAlign in rtl.createSet(pas["WEBLib.Controls"].TAlign.alTop,pas["WEBLib.Controls"].TAlign.alBottom)) {
            control.SetWidthStyle(pas["WEBLib.Controls"].TSizeStyle.ssPercent);
            control.SetWidth(100);
          };
          if (control.FAlign === pas["WEBLib.Controls"].TAlign.alClient) {
            control.SetWidthStyle(pas["WEBLib.Controls"].TSizeStyle.ssPercent);
            control.SetHeightStyle(pas["WEBLib.Controls"].TSizeStyle.ssPercent);
            control.SetWidth(100);
            control.SetHeight(100);
          };
          row = this.FTblBody.childNodes.item(j);
          if (row != null) {
            row.setAttribute("height",this.FRowCollection.GetItem$1(j).HeightAttribute());
            if (this.FRowCollection.GetItem$1(j).FElementClassName !== "") {
              row.setAttribute("class",this.FRowCollection.GetItem$1(j).FElementClassName)}
             else row.removeAttribute("class");
          };
          fragment.appendChild(document.getElementById(ctrlid));
          destid = this.FName + "R" + pas.SysUtils.IntToStr(j) + "C" + pas.SysUtils.IntToStr(i);
          el = document.getElementById(destid);
          if (!(el != null)) {
            row = this.CreateRow(j);
            this.FTblBody.appendChild(row);
            el = document.getElementById(destid);
            row.setAttribute("height",this.FRowCollection.GetItem$1(j).HeightAttribute());
          } else {
            if (j === 0) {
              if (this.FColumnCollection.GetItem$1(i).FSizeStyle === pas["WEBLib.Controls"].TSizeStyle.ssAbsolute) {
                this.FTbl.removeAttribute("width");
                this.FTbl.removeAttribute("height");
              } else {
                this.FTbl.setAttribute("width","100%");
                this.FTbl.setAttribute("height","100%");
              };
              el.style.setProperty("width",this.FColumnCollection.GetItem$1(i).WidthAttribute());
            };
          };
          el.appendChild(fragment);
          if (control.FAlign === pas["WEBLib.Controls"].TAlign.alTop) el.style.setProperty("vertical-align","top");
          if (control.FAlign === pas["WEBLib.Controls"].TAlign.alBottom) el.style.setProperty("vertical-align","bottom");
          i += 1;
          if (i === this.FColumnCollection.GetCount()) {
            i = 0;
            j += 1;
          };
        };
      };
      this.FColCount = this.FColumnCollection.GetCount();
    };
    this.UpdateElement = function () {
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if ((this.GetElementHandle() != null) && !this.IsUpdating()) {
        this.GetElementHandle().style.setProperty("user-select","");
        if (this.FCursor === 0) this.GetElementHandle().style.setProperty("cursor","");
        if (this.FUpdateTable && (this.GetContainer() != null)) {
          this.GetContainer().appendChild(this.CreateTable());
          this.UpdateTable();
          this.FUpdateTable = false;
        };
      };
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        this.GetElementHandle().style.setProperty("border","1px dotted gray");
      };
    };
    this.RegisterParent = function (AValue) {
      pas["WEBLib.Controls"].TControl.RegisterParent.apply(this,arguments);
      if (!this.IsUpdating() && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) {
        this.FControlCollection.Add$1().FControl = AValue;
        if (this.FControlCollection.GetCount() > (this.FColumnCollection.GetCount() * this.FRowCollection.GetCount())) {
          if (this.FExpandStyle === $mod.TGridPanelExpandStyle.esAddRows) {
            this.FRowCollection.Add$1()}
           else this.FColumnCollection.Add$1();
        };
        this.UpdateTable();
      };
    };
    this.TableChanged = function (Sender) {
      this.UpdateTable();
    };
    this.Notification = function (AComponent, Operation) {
      var i = 0;
      var destid = "";
      var el = null;
      if ((Operation === pas.Classes.TOperation.opRemove) && !(pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) {
        for (var $l1 = this.FControlCollection.GetCount() - 1; $l1 >= 0; $l1--) {
          i = $l1;
          if (this.FControlCollection.GetItem$1(i).FControl === AComponent) {
            destid = this.FName + "R" + pas.SysUtils.IntToStr(this.FControlCollection.GetItem$1(i).FRow) + "C" + pas.SysUtils.IntToStr(this.FControlCollection.GetItem$1(i).FColumn);
            el = document.getElementById(destid);
            el.removeChild(el.firstChild);
            this.FControlCollection.GetItem$1(i).FControl = null;
            this.FControlCollection.Delete(i);
          };
        };
        this.UpdateTable();
      };
      pas.Classes.TComponent.Notification.apply(this,arguments);
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FDesignTime = (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && !((pas.Classes.TComponentStateItem.csReading in this.FOwner.FComponentState) || (pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState));
      this.FEnablePropagation = true;
      this.FControlStyle = rtl.unionSet(this.FControlStyle,rtl.createSet(pas["WEBLib.Controls"].TControlStyleValue.csAcceptsControls));
      this.FUpdateTable = true;
      this.FColCount = -1;
      this.FRowCollection = $mod.TGridPanelRows.$create("Create$3",[this]);
      this.FRowCollection.FPropName = "RowCollection";
      if (this.FDesignTime) {
        this.FRowCollection.Add$1();
        this.FRowCollection.GetItem$1(0).SetValue(100);
        this.FRowCollection.GetItem$1(0).SetSizeStyle(pas["WEBLib.Controls"].TSizeStyle.ssPercent);
        this.FRowCollection.FOnChange = rtl.createCallback(this,"TableChanged");
      };
      this.FColumnCollection = $mod.TGridPanelColumns.$create("Create$3",[this]);
      this.FColumnCollection.FPropName = "ColumnCollection";
      if (this.FDesignTime) {
        this.FColumnCollection.Add$1();
        this.FColumnCollection.Add$1();
        this.FColumnCollection.GetItem$1(0).SetValue(50);
        this.FColumnCollection.GetItem$1(1).SetValue(50);
        this.FColumnCollection.GetItem$1(0).SetSizeStyle(pas["WEBLib.Controls"].TSizeStyle.ssPercent);
        this.FColumnCollection.GetItem$1(1).SetSizeStyle(pas["WEBLib.Controls"].TSizeStyle.ssPercent);
      };
      this.FColumnCollection.FOnChange = rtl.createCallback(this,"TableChanged");
      this.FControlCollection = $mod.TControlCollection.$create("Create$3",[this]);
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        this.SetWidth(400);
        this.SetHeight(300);
      };
    };
    this.Destroy = function () {
      rtl.free(this,"FRowCollection");
      rtl.free(this,"FColumnCollection");
      rtl.free(this,"FControlCollection");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.AddControl = function (AControl) {
      this.FControlCollection.Add$1().FControl = AControl;
      AControl.SetParent(this);
      if (this.FControlCollection.GetCount() > (this.FColumnCollection.GetCount() * this.FRowCollection.GetCount())) {
        if (this.FExpandStyle === $mod.TGridPanelExpandStyle.esAddRows) {
          this.FRowCollection.Add$1()}
         else this.FColumnCollection.Add$1();
      };
    };
    this.RemoveControl = function (AControl) {
      var i = 0;
      var r = 0;
      var c = 0;
      var row = null;
      var d = 0.0;
      for (var $l1 = 0, $end2 = this.FControlCollection.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.FControlCollection.GetItem$1(i).FControl === AControl) {
          r = this.FControlCollection.GetItem$1(i).FRow;
          c = this.FControlCollection.GetItem$1(i).FColumn;
          row = this.FTblBody.childNodes.item(r);
          row.childNodes.item(c).innerHTML = "";
          this.FControlCollection.Delete(i);
          break;
        };
      };
      if (this.FColumnCollection.GetCount() > 0) {
        d = this.FControlCollection.GetCount() / this.FColumnCollection.GetCount();
        if (pas.System.Frac(d) > 0) d = pas.System.Trunc(d + 1);
        while (d < this.FRowCollection.GetCount()) {
          this.FRowCollection.Delete(this.FRowCollection.GetCount() - 1);
        };
      };
    };
    this.EndUpdate = function () {
      pas["WEBLib.Controls"].TControl.EndUpdate.call(this);
      this.UpdateTable();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ControlCollection",2,$mod.$rtti["TControlCollection"],"FControlCollection","SetControlCollection");
    $r.addProperty("ColumnCollection",2,$mod.$rtti["TGridPanelColumns"],"FColumnCollection","SetColumnCollection");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("ExpandStyle",0,$mod.$rtti["TGridPanelExpandStyle"],"FExpandStyle","FExpandStyle",{Default: $mod.TGridPanelExpandStyle.esAddRows});
    $r.addProperty("GridLineWidth",0,rtl.longint,"FGridLineWidth","FGridLineWidth",{Default: 0});
    $r.addProperty("GridLineColor",0,pas["WEBLib.Graphics"].$rtti["TColor"],"FGridLineColor","FGridLineColor",{Default: 0});
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("RowCollection",2,$mod.$rtti["TGridPanelRows"],"FRowCollection","SetRowCollection");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
  });
  rtl.createClass($mod,"TWebGridPanel",$mod.TGridPanel,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.TMultiMediaType = {"0": "mtVideo", mtVideo: 0, "1": "mtAudio", mtAudio: 1};
  $mod.$rtti.$Enum("TMultiMediaType",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TMultiMediaType});
  $mod.$rtti.$Int("TMultiMediaVolume",{minvalue: 0, maxvalue: 100, ordtype: 1});
  rtl.createClass($mod,"TMultimediaPlayer",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FURL = "";
      this.FMultimediaType = 0;
      this.FAutoPlay = false;
      this.FControls$1 = false;
      this.FMuted = false;
      this.FLoop = false;
      this.FVolume = 0;
      this.FPlaybackRate = 0.0;
    };
    this.SetAutoPlay = function (Value) {
      if (this.FAutoPlay !== Value) {
        this.FAutoPlay = Value;
        this.UpdateElement();
      };
    };
    this.SetControls = function (Value) {
      if (this.FControls$1 !== Value) {
        this.FControls$1 = Value;
        this.UpdateElement();
      };
    };
    this.SetMuted = function (Value) {
      if (this.FMuted !== Value) {
        this.FMuted = Value;
        this.UpdateElement();
      };
    };
    this.SetLoop = function (Value) {
      if (this.FLoop !== Value) {
        this.FLoop = Value;
        this.UpdateElement();
      };
    };
    this.SetURL = function (Value) {
      if (this.FURL !== Value) {
        this.FURL = Value;
        this.UpdateElement();
      };
    };
    this.SetVolume = function (Value) {
      if (this.FVolume !== Value) {
        this.FVolume = Value;
        this.UpdateElement();
      };
    };
    this.GetCurrentTime = function () {
      var Result = 0.0;
      var el = null;
      var i = 0.0;
      el = this.GetElementHandle();
      if (el != null) {
        i = el.currentTime;
      };
      Result = i;
      return Result;
    };
    this.SetCurrentTime = function (Value) {
      var el = null;
      el = this.GetElementHandle();
      if (el != null) el.currentTime = Value;
    };
    this.GetDuration = function () {
      var Result = 0.0;
      var el = null;
      var i = 0.0;
      el = this.GetElementHandle();
      if (el != null) {
        i = el.duration;
      };
      Result = i;
      return Result;
    };
    this.GetEnded = function () {
      var Result = false;
      var el = null;
      var e = false;
      el = this.GetElementHandle();
      if (el != null) {
        e = el.ended;
      };
      Result = e;
      return Result;
    };
    this.GetPaused = function () {
      var Result = false;
      var el = null;
      var e = false;
      el = this.GetElementHandle();
      if (el != null) {
        e = el.paused;
      };
      Result = e;
      return Result;
    };
    this.SetPlaybackRate = function (Value) {
      if (this.FPlaybackRate !== Value) {
        this.FPlaybackRate = Value;
        this.UpdateElement();
      };
    };
    this.CreateElement = function () {
      var Result = null;
      var src = null;
      if (this.FMultimediaType === $mod.TMultiMediaType.mtVideo) {
        Result = document.createElement("VIDEO")}
       else Result = document.createElement("AUDIO");
      src = document.createElement("SOURCE");
      Result.appendChild(src);
      return Result;
    };
    this.UpdateElement = function () {
      var $Self = this;
      var el = null;
      var vid = null;
      function booltoattr(b) {
        var Result = "";
        if (b) {
          Result = "true"}
         else Result = "false";
        return Result;
      };
      pas["WEBLib.Controls"].TControl.UpdateElement.call($Self);
      if ($Self.GetElementHandle() != null) {
        vid = $Self.GetElementHandle();
        vid.controls = this.FControls;
        vid.playbackRate = this.FPlaybackRate;
        vid.muted = this.FMuted;
        $Self.GetElementHandle().setAttribute("autoplay",booltoattr($Self.FAutoPlay));
        $Self.GetElementHandle().setAttribute("muted",booltoattr($Self.FMuted));
        $Self.GetElementHandle().setAttribute("volume",pas.SysUtils.Format("%.2f",[$Self.FVolume / 100]));
        $Self.GetElementHandle().setAttribute("src",$Self.FURL);
      };
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FVolume = 100;
      this.FPlaybackRate = 1;
      this.FMuted = false;
      this.FAutoPlay = false;
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        this.SetWidth(400);
        this.SetHeight(300);
      };
    };
    this.Play = function () {
      var el = null;
      el = this.GetElementHandle();
      if (el != null) el.play();
    };
    this.Pause = function () {
      var el = null;
      el = this.GetElementHandle();
      if (el != null) {
        el.pause();
      };
    };
    this.ReLoad = function () {
      var el = null;
      el = this.GetElementHandle();
      if (el != null) el.load();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("AutoPlay",2,rtl.boolean,"FAutoPlay","SetAutoPlay");
    $r.addProperty("Controls",2,rtl.boolean,"FControls$1","SetControls");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Loop",2,rtl.boolean,"FLoop","SetLoop");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("MultimediaType",0,$mod.$rtti["TMultiMediaType"],"FMultimediaType","FMultimediaType");
    $r.addProperty("Muted",2,rtl.boolean,"FMuted","SetMuted");
    $r.addProperty("PlaybackRate",2,rtl.double,"FPlaybackRate","SetPlaybackRate");
    $r.addProperty("URL",2,rtl.string,"FURL","SetURL");
    $r.addProperty("Volume",2,$mod.$rtti["TMultiMediaVolume"],"FVolume","SetVolume");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
  });
  rtl.createClass($mod,"TWebMultiMediaPlayer",$mod.TMultimediaPlayer,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"THTMLContainer",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FHTML = null;
      this.FScrollStyle = 0;
    };
    this.$final = function () {
      this.FHTML = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetHTML = function (Value) {
      this.FHTML.Assign(Value);
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("DIV");
      return Result;
    };
    this.UpdateElement = function () {
      var TextFound = false;
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if (!this.IsUpdating() && (this.GetElementHandle() != null) && (this.GetContainer() != null)) {
        if (this.FElementClassName !== "") {
          this.GetElementHandle().style.removeProperty("border");
          this.GetElementHandle().style.removeProperty("background-color");
        };
        if (this.FHTML != null) {
          TextFound = this.FHTML.GetTextStr() !== "";
          this.GetContainer().innerHTML = this.FHTML.GetTextStr();
        };
        if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) this.RenderDesigning(this.$classname,this.GetContainer(),this,!TextFound);
        var $tmp1 = this.FScrollStyle;
        if ($tmp1 === pas["WEBLib.Controls"].TScrollStyle.ssBoth) {
          this.GetElementHandle().style.setProperty("overflow","auto")}
         else if ($tmp1 === pas["WEBLib.Controls"].TScrollStyle.ssNone) {
          this.GetElementHandle().style.setProperty("overflow","")}
         else if ($tmp1 === pas["WEBLib.Controls"].TScrollStyle.ssVertical) {
          this.GetElementHandle().style.setProperty("overflow-y","auto")}
         else if ($tmp1 === pas["WEBLib.Controls"].TScrollStyle.ssHorizontal) this.GetElementHandle().style.setProperty("overflow-x","auto");
      };
    };
    this.HTMLChanged = function (Sender) {
      this.UpdateElement();
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FHTML = pas.Classes.TStringList.$create("Create$1");
      this.FHTML.FOnChange = rtl.createCallback(this,"HTMLChanged");
      this.FScrollStyle = pas["WEBLib.Controls"].TScrollStyle.ssBoth;
    };
    this.Destroy = function () {
      rtl.free(this,"FHTML");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("HTML",2,pas.Classes.$rtti["TStringList"],"FHTML","SetHTML");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ScrollStyle",0,pas["WEBLib.Controls"].$rtti["TScrollStyle"],"FScrollStyle","FScrollStyle");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
  });
  rtl.createClass($mod,"TWebHTMLContainer",$mod.THTMLContainer,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"THTMLForm",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FOnSubmit = null;
      this.FAction = "";
    };
    this.$final = function () {
      this.FOnSubmit = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetAction = function (Value) {
      this.FAction = Value;
      if (this.GetElementHandle() != null) this.GetElementHandle().setAttribute("action",this.FAction);
    };
    this.UpdateElement = function () {
      var eh = null;
      if (!(this.GetElementHandle() != null)) return;
      if ((pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && !(pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) {
        eh = this.GetElementHandle();
        if (eh != null) {
          eh.style.setProperty("display","table");
          eh.style.setProperty("background-color","silver");
        };
      };
    };
    this.CreateElement = function () {
      var Result = null;
      var LLabel = null;
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        Result = document.createElement("DIV");
        LLabel = document.createElement("DIV");
        LLabel.innerHTML = "TWebHTMLForm";
        this.SetBorderStyle(pas["WEBLib.Controls"].TBorderStyle.bsSingle);
        LLabel.setAttribute("align","center");
        LLabel.style.setProperty("border","1px solid gray");
        LLabel.style.setProperty("vertical-align","middle");
        LLabel.style.setProperty("display","table-cell");
        Result.appendChild(LLabel);
      } else {
        Result = document.createElement("FORM");
      };
      return Result;
    };
    this.IsStructuralElement = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.DoHandleSubmit = function (Event) {
      var Result = false;
      this.FElementEvent = Event;
      if (this.FOnSubmit != null) this.FOnSubmit(this);
      Result = true;
      return Result;
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      this.GetElementHandle().addEventListener("submit",rtl.createCallback(this,"DoHandleSubmit"));
    };
    this.CheckValidity = function () {
      var Result = false;
      var el = null;
      var res = false;
      el = this.GetElementHandle();
      res = el.checkValidity();
      Result = res;
      return Result;
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FEnablePropagation = true;
      this.FControlStyle = rtl.unionSet(this.FControlStyle,rtl.createSet(pas["WEBLib.Controls"].TControlStyleValue.csAcceptsControls));
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Action",2,rtl.string,"FAction","SetAction");
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("OnSubmit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnSubmit","FOnSubmit");
  });
  rtl.createClass($mod,"TWebHTMLForm",$mod.THTMLForm,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TBadge",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FTextColor = 0;
      this.FText = "";
    };
    this.SetTextColor = function (Value) {
      this.FTextColor = Value;
      this.UpdateElement();
    };
    this.SetText = function (Value) {
      this.FText = Value;
      this.UpdateElement();
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("SPAN");
      return Result;
    };
    this.UpdateElement = function () {
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if (this.GetElementHandle() != null) {
        this.GetElementHandle().innerHTML = this.FText;
        if (this.FElementClassName === "") {
          this.GetElementHandle().setAttribute("class","tmsbadge");
          this.GetElementHandle().style.setProperty("color",pas["WEBLib.Graphics"].ColorToHTML(this.FTextColor));
        } else {
          this.GetElementHandle().style.removeProperty("color");
        };
        this.GetElementHandle().style.removeProperty("width");
        this.GetElementHandle().style.removeProperty("height");
      };
    };
    this.SetElementClassName = function (AValue) {
      pas["WEBLib.Controls"].TControl.SetElementClassName.apply(this,arguments);
      this.UpdateElement();
    };
    this.CreateInitialize = function () {
      var css = "";
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.SetColor(255);
      this.FTextColor = 16777215;
      this.FText = "1";
      css = "span.tmsbadge {" + "  background: #FF0000;" + "  border-radius: 0.8em;" + "  -moz-border-radius: 0.8em;" + "  -webkit-border-radius: 0.8em;" + "  color: #ffffff;" + "  display: inline-block;" + "  line-height: 1.6em;" + "  margin-right: 5px;" + "  text-align: center;" + "  width: 1.6em;" + "}";
      this.AddControlStyle(css);
      this.SetWidth(20);
      this.SetHeight(20);
    };
    this.Destroy = function () {
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor",{Default: 255});
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("Text",2,rtl.string,"FText","SetText");
    $r.addProperty("TextColor",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FTextColor","SetTextColor");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
  });
  rtl.createClass($mod,"TWebBadge",$mod.TBadge,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TAccordionSection",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FCaption = "";
      this.FContent = "";
      this.FTag = 0;
      this.FExpanded = false;
    };
    this.SetExpanded = function (Value) {
      if (this.FExpanded !== Value) {
        this.FExpanded = Value;
        if (this.FExpanded) {
          rtl.as(rtl.as(this.FCollection,$mod.TAccordionSections).Owner(),$mod.TAccordion).Expand(this)}
         else rtl.as(rtl.as(this.FCollection,$mod.TAccordionSections).Owner(),$mod.TAccordion).Collapse(this);
      };
    };
    this.SetCaption = function (Value) {
      this.FCaption = Value;
      rtl.as(this.FCollection,$mod.TAccordionSections).Update(this);
    };
    this.SetContent = function (Value) {
      this.FContent = Value;
      rtl.as(this.FCollection,$mod.TAccordionSections).Update(this);
    };
    this.Assign = function (Source) {
      if ($mod.TAccordionSection.isPrototypeOf(Source)) {
        this.FCaption = rtl.as(Source,$mod.TAccordionSection).FCaption;
        this.FContent = rtl.as(Source,$mod.TAccordionSection).FContent;
        this.FTag = rtl.as(Source,$mod.TAccordionSection).FTag;
      };
    };
    this.CaptionElement = function () {
      var Result = null;
      Result = document.getElementById(rtl.as(rtl.as(this.FCollection,$mod.TAccordionSections).Owner(),$mod.TAccordion).FName + "_" + pas.SysUtils.IntToStr(this.GetIndex()));
      return Result;
    };
    this.PanelElement = function () {
      var Result = null;
      var el = null;
      el = this.CaptionElement();
      Result = el.nextElementSibling;
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("Content",2,rtl.string,"FContent","SetContent");
    $r.addProperty("Tag",0,rtl.longint,"FTag","FTag");
  });
  rtl.createClass($mod,"TAccordionSections",pas.Classes.TOwnedCollection,function () {
    this.$init = function () {
      pas.Classes.TOwnedCollection.$init.call(this);
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TOwnedCollection.$final.call(this);
    };
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItem$1 = function (Index, Value) {
      this.SetItem(Index,Value);
    };
    this.Update = function (Item) {
      pas.Classes.TCollection.Update.apply(this,arguments);
      if ((this.FOnChange != null) && (this.FUpdateCount === 0)) this.FOnChange(this);
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,$mod.TAccordionSection);
      return this;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
    this.Insert$1 = function (Index) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,Index);
      return Result;
    };
  });
  $mod.$rtti.$MethodVar("TAccordionSectionEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ASection",$mod.$rtti["TAccordionSection"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TAccordionSectionAllowEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ASection",$mod.$rtti["TAccordionSection"]],["Allow",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TAccordionSectionRenderEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ASection",$mod.$rtti["TAccordionSection"]],["ACaption",pas.Web.$rtti["TJSHTMLElement"]],["APanel",pas.Web.$rtti["TJSHTMLElement"]]]), methodkind: 0});
  rtl.createClass($mod,"TAccordion",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FStyleRendered = false;
      this.FSections = null;
      this.FOnCollapsing = null;
      this.FOnExpanding = null;
      this.FOnCollapsed = null;
      this.FOnExpanded = null;
      this.FOnRenderSection = null;
      this.FElementSectionClassName = "";
      this.FElementContentClassName = "";
    };
    this.$final = function () {
      this.FSections = undefined;
      this.FOnCollapsing = undefined;
      this.FOnExpanding = undefined;
      this.FOnCollapsed = undefined;
      this.FOnExpanded = undefined;
      this.FOnRenderSection = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetSections = function (Value) {
      this.FSections.Assign(Value);
    };
    this.CreateElement = function () {
      var Result = null;
      Result = document.createElement("DIV");
      return Result;
    };
    this.UpdateElement = function () {
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
    };
    this.RenderAccordion = function () {
      var i = 0;
      var sp = null;
      var btn = null;
      var divel = null;
      var p = null;
      if (this.GetElementHandle().childNodes.length > 0) {
        while (this.GetElementHandle().firstChild != null) this.GetElementHandle().removeChild(this.GetElementHandle().firstChild);
        if (this.FElementClassName !== "") {
          this.GetElementHandle().style.removeProperty("border");
          this.GetElementHandle().style.removeProperty("background-color");
        };
      };
      sp = document.createElement("SPAN");
      this.GetElementHandle().appendChild(sp);
      for (var $l1 = 0, $end2 = this.FSections.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        btn = document.createElement("BUTTON");
        btn.innerHTML = this.FSections.GetItem$1(i).FCaption;
        btn.setAttribute("id",this.FName + "_" + pas.SysUtils.IntToStr(i));
        btn.setAttribute("class","accordion_" + this.FName);
        if (this.FElementSectionClassName !== "") btn.classList.add(this.FElementSectionClassName);
        btn.addEventListener("click",rtl.createCallback(this,"DoAccordionClick"));
        divel = document.createElement("DIV");
        divel.setAttribute("class","accordionpanel_" + this.FName);
        p = document.createElement("P");
        p.style.setProperty("user-select","text");
        if (this.FElementContentClassName !== "") p.setAttribute("class",this.FElementContentClassName);
        p.innerHTML = this.FSections.GetItem$1(i).FContent;
        sp.appendChild(btn);
        sp.appendChild(divel);
        divel.appendChild(p);
        if (this.FOnRenderSection != null) this.FOnRenderSection(this,this.FSections.GetItem$1(i),btn,p);
      };
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) this.RenderDesigning(this.$classname,this.GetContainer(),this,this.FSections.GetCount() === 0);
    };
    this.RenderStyle = function () {
      var css = "";
      if (this.FStyleRendered) return;
      this.FStyleRendered = true;
      css = ".accordion_" + this.FName + " {" + "background-color: #eee;" + "color: #444;" + "cursor: pointer;" + "padding: 18px;" + "width: 100%;" + "text-align: left;" + "border: none;" + "outline: none;" + "transition: 0.4s;" + "}" + "\r\n" + ".accordionactive_" + this.FName + ", .accordion_" + this.FName + "::hover {" + "background-color: #ccc;" + "}" + "\r\n" + ".accordionactive_" + this.FName + "::before {" + "transform: rotate(90deg);" + "}" + "\r\n" + ".accordion_" + this.FName + "::before {" + '  content: "\\25B6";' + "  font-size: 13px;" + "  display: inline-block;" + "  margin-right: 5px;" + "}" + "\r\n" + ".accordionpanel_" + this.FName + " {" + "padding: 0 18px;" + "background-color: white;" + "max-height: 0;" + "overflow: hidden;" + "transition: max-height 0.2s ease-out;" + "}";
      this.AddInstanceStyle(css);
    };
    this.SectionsChanged = function (Sender) {
      if (!this.IsUpdating()) {
        this.RenderStyle();
        this.RenderAccordion();
      };
    };
    this.DoAccordionClick = function (Event) {
      var Result = false;
      var el = null;
      var pnl = null;
      var s = "";
      var Allow = false;
      var ASection = null;
      var i = 0;
      var e = 0;
      el = Event.srcElement;
      Allow = true;
      ASection = null;
      if (el.hasAttribute("id")) {
        s = el.getAttribute("id");
        s = pas.System.Copy(s,pas.System.Pos(this.FName,s) + this.FName.length + 1,s.length);
        pas.System.val$6(s,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }},{get: function () {
            return e;
          }, set: function (v) {
            e = v;
          }});
        if ((e === 0) && (i < this.FSections.GetCount())) ASection = this.FSections.GetItem$1(i);
      };
      if (el.classList.contains("accordionactive_" + this.FName)) {
        if (this.FOnCollapsing != null) this.FOnCollapsing(this,ASection,{get: function () {
            return Allow;
          }, set: function (v) {
            Allow = v;
          }});
      } else {
        if (this.FOnExpanding != null) this.FOnExpanding(this,ASection,{get: function () {
            return Allow;
          }, set: function (v) {
            Allow = v;
          }});
      };
      if (!Allow) return Result;
      el.classList.toggle("accordionactive_" + this.FName);
      pnl = el.nextElementSibling;
      s = pnl.style.getPropertyValue("max-height");
      if ((s !== "0px") && (s !== "")) {
        pnl.style.setProperty("max-height","0");
      } else {
        pnl.style.setProperty("max-height",pas.SysUtils.IntToStr(pnl.scrollHeight) + "px");
      };
      if (el.classList.contains("accordionactive_" + this.FName)) {
        ASection.FExpanded = true;
        if (this.FOnExpanded != null) this.FOnExpanded(this,ASection);
      } else {
        ASection.FExpanded = false;
        if (this.FOnCollapsed != null) this.FOnCollapsed(this,ASection);
      };
      Result = true;
      return Result;
    };
    this.UpdateElementVisual = function () {
      pas["WEBLib.Controls"].TCustomControl.UpdateElementVisual.call(this);
      this.GetElementHandle().style.setProperty("overflow-y","auto");
      this.GetElementHandle().style.setProperty("overflow-x","hidden");
    };
    this.Expand = function (ASection) {
      var el = null;
      var pnl = null;
      var LClass = "";
      el = ASection.CaptionElement();
      LClass = "accordionactive_" + this.FName;
      if (el.classList.contains(LClass)) el.classList.add(LClass);
      pnl = el.nextElementSibling;
      pnl.style.setProperty("max-height",pas.SysUtils.IntToStr(pnl.scrollHeight) + "px");
    };
    this.Collapse = function (ASection) {
      var el = null;
      var pnl = null;
      var LClass = "";
      el = ASection.CaptionElement();
      LClass = "accordionactive_" + this.FName;
      if (el.classList.contains(LClass)) el.classList.remove(LClass);
      pnl = el.nextElementSibling;
      pnl.style.setProperty("max-height","0");
    };
    this.SetElementClassName = function (AValue) {
      pas["WEBLib.Controls"].TControl.SetElementClassName.apply(this,arguments);
      if (this.FElementClassName !== "") this.RenderAccordion();
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FSections = $mod.TAccordionSections.$create("Create$3",[this]);
      this.FSections.FOnChange = rtl.createCallback(this,"SectionsChanged");
      this.FSections.FPropName = "Sections";
      this.FStyleRendered = false;
      this.SetWidth(400);
      this.SetHeight(300);
    };
    this.Destroy = function () {
      rtl.free(this,"FSections");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.EndUpdate = function () {
      pas["WEBLib.Controls"].TControl.EndUpdate.call(this);
      this.RenderStyle();
      this.RenderAccordion();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("ElementSectionClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementSectionClassName","FElementSectionClassName");
    $r.addProperty("ElementContentClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementContentClassName","FElementContentClassName");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("Sections",2,$mod.$rtti["TAccordionSections"],"FSections","SetSections");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnCollapsed",0,$mod.$rtti["TAccordionSectionEvent"],"FOnCollapsed","FOnCollapsed");
    $r.addProperty("OnCollapsing",0,$mod.$rtti["TAccordionSectionAllowEvent"],"FOnCollapsing","FOnCollapsing");
    $r.addProperty("OnExpanded",0,$mod.$rtti["TAccordionSectionEvent"],"FOnExpanded","FOnExpanded");
    $r.addProperty("OnExpanding",0,$mod.$rtti["TAccordionSectionAllowEvent"],"FOnExpanding","FOnExpanding");
    $r.addProperty("OnRenderSection",0,$mod.$rtti["TAccordionSectionRenderEvent"],"FOnRenderSection","FOnRenderSection");
  });
  rtl.createClass($mod,"TWebAccordion",$mod.TAccordion,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.TGridStyle = {"0": "gTemplateColumns", gTemplateColumns: 0, "1": "gTemplateRows", gTemplateRows: 1};
  $mod.$rtti.$Enum("TGridStyle",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TGridStyle});
  rtl.createClass($mod,"TResponsiveLayoutItem",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FWidth = 0;
      this.FStyleType = 0;
      this.FStyle = "";
      this.FColumnGap = "";
      this.FRowGap = "";
      this.FTag = 0;
      this.FDescription = "";
      this.FMargins = null;
    };
    this.$final = function () {
      this.FMargins = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.SetMargins = function (Value) {
      this.FMargins.Assign(Value);
    };
    this.Create$1 = function (AOwner) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      this.FMargins = pas["WEBLib.Controls"].TMargins.$create("Create$1");
      this.FMargins.SetLeft(0);
      this.FMargins.SetTop(0);
      this.FMargins.SetRight(0);
      this.FMargins.SetBottom(0);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FMargins");
      pas.Classes.TCollectionItem.Destroy.call(this);
    };
    this.Assign = function (Source) {
      if ($mod.TResponsiveLayoutItem.isPrototypeOf(Source)) {
        this.FColumnGap = rtl.as(Source,$mod.TResponsiveLayoutItem).FColumnGap;
        this.FDescription = rtl.as(Source,$mod.TResponsiveLayoutItem).FDescription;
        this.FRowGap = rtl.as(Source,$mod.TResponsiveLayoutItem).FRowGap;
        this.FWidth = rtl.as(Source,$mod.TResponsiveLayoutItem).FWidth;
        this.FStyle = rtl.as(Source,$mod.TResponsiveLayoutItem).FStyle;
        this.FStyleType = rtl.as(Source,$mod.TResponsiveLayoutItem).FStyleType;
        this.FTag = rtl.as(Source,$mod.TResponsiveLayoutItem).FTag;
        this.FMargins.Assign(rtl.as(Source,$mod.TResponsiveLayoutItem).FMargins);
      };
    };
    var $r = this.$rtti;
    $r.addProperty("ColumnGap",0,rtl.string,"FColumnGap","FColumnGap");
    $r.addProperty("Description",0,rtl.string,"FDescription","FDescription");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("RowGap",0,rtl.string,"FRowGap","FRowGap");
    $r.addProperty("StyleType",0,$mod.$rtti["TGridStyle"],"FStyleType","FStyleType");
    $r.addProperty("Style",0,rtl.string,"FStyle","FStyle");
    $r.addProperty("Tag",0,rtl.longint,"FTag","FTag");
    $r.addProperty("Width",0,rtl.longint,"FWidth","FWidth");
  });
  rtl.createClass($mod,"TResponsiveLayout",pas.Classes.TOwnedCollection,function () {
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItem$1 = function (Index, Value) {
      this.SetItem(Index,Value);
    };
    this.GetLayoutForWidth = function (w) {
      var Result = null;
      var i = 0;
      var d = 0;
      var j = 0;
      var l = 0;
      var mx = 0;
      Result = null;
      if (this.GetCount() === 0) return Result;
      d = 0xFFFF;
      j = -1;
      mx = 0;
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.GetItem$1(i).FWidth > mx) {
          mx = this.GetItem$1(i).FWidth;
          l = i;
        };
        if (w < this.GetItem$1(i).FWidth) {
          if ((this.GetItem$1(i).FWidth - w) < d) {
            d = this.GetItem$1(i).FWidth - w;
            j = i;
          };
        };
      };
      if (j === -1) j = l;
      Result = this.GetItem$1(j);
      return Result;
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,$mod.TResponsiveLayoutItem);
      return this;
    };
    this.Add$1 = function (AWidth, AStyle) {
      var Result = null;
      Result = this.Add$2();
      Result.FWidth = AWidth;
      Result.FStyle = AStyle;
      return Result;
    };
    this.Add$2 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
    this.Insert$1 = function (Index) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,Index);
      return Result;
    };
  });
  $mod.$rtti.$MethodVar("TResponsiveLayoutChangeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ALayout",$mod.$rtti["TResponsiveLayoutItem"]]]), methodkind: 0});
  rtl.createClass($mod,"TResponsiveGridPanel",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FDesignTime = false;
      this.FLabel = null;
      this.FLayout = null;
      this.FActiveLayoutItem = null;
      this.FOldWidth = 0;
      this.FControlCollection = null;
      this.FOnLayoutChange = null;
    };
    this.$final = function () {
      this.FLabel = undefined;
      this.FLayout = undefined;
      this.FActiveLayoutItem = undefined;
      this.FControlCollection = undefined;
      this.FOnLayoutChange = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.SetControlCollection = function (Value) {
      this.FControlCollection.Assign(Value);
    };
    this.HandleResize = function (Event) {
      var Result = false;
      var w = 0;
      if (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState) return Result;
      Result = true;
      w = this.GetWidth();
      if (this.FOldWidth !== w) {
        this.FOldWidth = w;
        this.Resize();
      };
      return Result;
    };
    this.SetResponsiveStyle = function () {
      var li = null;
      var w = 0;
      var lGap = "";
      if (!(this.FLayout != null)) return;
      if (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState) return;
      if (!(this.GetElementHandle() != null)) return;
      w = this.GetWidth();
      li = this.FLayout.GetLayoutForWidth(w);
      if (li != null) {
        if (li.FStyleType === $mod.TGridStyle.gTemplateColumns) {
          this.GetElementHandle().style.setProperty("grid-template-columns",li.FStyle);
          this.GetElementHandle().style.removeProperty("grid-template-rows");
        } else {
          this.GetElementHandle().style.removeProperty("grid-template-columns");
          this.GetElementHandle().style.setProperty("grid-template-rows",li.FStyle);
        };
        lGap = li.FRowGap;
        if (pas["WEBLib.Utils"].TStringHelper.IsNumber.call({get: function () {
            return lGap;
          }, set: function (v) {
            lGap = v;
          }})) lGap = lGap + "px";
        this.GetElementHandle().style.setProperty("grid-row-gap",lGap);
        lGap = li.FColumnGap;
        if (pas["WEBLib.Utils"].TStringHelper.IsNumber.call({get: function () {
            return lGap;
          }, set: function (v) {
            lGap = v;
          }})) lGap = lGap + "px";
        this.GetElementHandle().style.setProperty("grid-column-gap",lGap);
        this.GetElementHandle().style.setProperty("padding-left",pas.SysUtils.IntToStr(li.FMargins.FLeft) + "px");
        this.GetElementHandle().style.setProperty("padding-top",pas.SysUtils.IntToStr(li.FMargins.FTop) + "px");
        this.GetElementHandle().style.setProperty("padding-right",pas.SysUtils.IntToStr(li.FMargins.FRight) + "px");
        this.GetElementHandle().style.setProperty("padding-bottom",pas.SysUtils.IntToStr(li.FMargins.FBottom) + "px");
      };
      if (li !== this.FActiveLayoutItem) {
        this.FActiveLayoutItem = li;
        if (this.FOnLayoutChange != null) this.FOnLayoutChange(this,this.FActiveLayoutItem);
      };
    };
    this.BindEvents = function () {
      pas["WEBLib.Controls"].TCustomControl.BindEvents.call(this);
      document.defaultView.addEventListener("resize",rtl.createCallback(this,"HandleResize"));
    };
    this.UnbindEvents = function () {
      pas["WEBLib.Controls"].TControl.UnbindEvents.call(this);
      document.defaultView.removeEventListener("resize",rtl.createCallback(this,"HandleResize"));
    };
    this.UpdateControls = function () {
      var i = 0;
      var j = 0;
      var k = 0;
      var el = null;
      var fragment = null;
      var control = null;
      var ctrlid = "";
      if (pas.Classes.TComponentStateItem.csLoading in this.FComponentState) return;
      if (this.IsUpdating()) return;
      if ((this.FControlCollection.GetCount() > 0) && (this.FLabel != null)) {
        this.GetElementHandle().removeChild(this.FLabel);
        this.FLabel = null;
        this.GetElementHandle().style.setProperty("display","grid");
      };
      for (var $l1 = 0, $end2 = this.FControlCollection.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.GridElementCount() <= i) {
          el = document.createElement("DIV");
          el.setAttribute("data","grid");
          if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) el.style.setProperty("border","1px silver dotted");
          this.GetElementHandle().appendChild(el);
        } else {
          k = 0;
          for (var $l3 = 0, $end4 = this.GetElementHandle().childElementCount - 1; $l3 <= $end4; $l3++) {
            j = $l3;
            el = this.GetElementHandle().children.item(j);
            if (el.getAttribute("data") === "grid") {
              if (k === i) {
                break}
               else k += 1;
            };
          };
        };
        fragment = document.createDocumentFragment();
        control = this.FControlCollection.GetItem$1(i).FControl;
        if (control != null) {
          control.SetElementPosition(pas["WEBLib.Controls"].TElementPosition.epRelative);
          control.SetChildOrderEx(-1);
          ctrlid = control.GetID();
          fragment.appendChild(document.getElementById(ctrlid));
          el.appendChild(fragment);
        };
      };
      this.UpdateElement();
    };
    this.CreateElement = function () {
      var Result = null;
      if ((pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && (this.FControlCollection.GetCount() === 0)) {
        Result = document.createElement("DIV");
        this.FLabel = document.createElement("DIV");
        this.FLabel.innerHTML = this.$classname;
        this.SetBorderStyle(pas["WEBLib.Controls"].TBorderStyle.bsSingle);
        this.FLabel.setAttribute("align","center");
        this.FLabel.style.setProperty("border","1px solid silver");
        this.FLabel.style.setProperty("vertical-align","middle");
        this.FLabel.style.setProperty("display","table-cell");
        Result.appendChild(this.FLabel);
      } else {
        Result = document.createElement("DIV");
      };
      return Result;
    };
    this.GridElementCount = function () {
      var Result = 0;
      var i = 0;
      var el = null;
      Result = 0;
      for (var $l1 = 0, $end2 = this.GetElementHandle().childElementCount - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        el = this.GetElementHandle().children.item(i);
        if (el.getAttribute("data") === "grid") Result += 1;
      };
      return Result;
    };
    this.UpdateElement = function () {
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if (pas.Classes.TComponentStateItem.csDestroying in this.FComponentState) return;
      if (!(this.GetElementHandle() != null)) return;
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        if (this.FControlCollection.GetCount() === 0) {
          this.GetElementHandle().style.setProperty("display","table");
          if (this.FColor === -1) this.GetElementHandle().style.setProperty("background-color","silver");
        };
      };
      this.GetElementHandle().style.setProperty("display","grid");
      this.SetResponsiveStyle();
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
      this.UpdateControls();
    };
    this.RegisterParent = function (AValue) {
      pas["WEBLib.Controls"].TControl.RegisterParent.apply(this,arguments);
      if (!this.IsUpdating() && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) {
        this.FControlCollection.Add$1().FControl = AValue;
        this.UpdateControls();
      };
    };
    this.Notification = function (AComponent, Operation) {
      var i = 0;
      var upd = false;
      var el = null;
      upd = false;
      if ((Operation === pas.Classes.TOperation.opRemove) && !(pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) {
        for (var $l1 = this.FControlCollection.GetCount() - 1; $l1 >= 0; $l1--) {
          i = $l1;
          if (this.FControlCollection.GetItem$1(i).FControl === AComponent) {
            el = this.GetElementHandle().children.item(i);
            while (el.childElementCount > 0) el.removeChild(el.firstChild);
            this.FControlCollection.GetItem$1(i).FControl = null;
            this.FControlCollection.Delete(i);
            upd = true;
          };
        };
      };
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if (upd) this.UpdateControls();
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FControlCollection");
      rtl.free(this,"FLayout");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.CreateInitialize = function () {
      var li = null;
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FDesignTime = (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && !((pas.Classes.TComponentStateItem.csReading in this.FOwner.FComponentState) || (pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState));
      this.FEnablePropagation = true;
      this.FControlStyle = rtl.unionSet(this.FControlStyle,rtl.createSet(pas["WEBLib.Controls"].TControlStyleValue.csAcceptsControls));
      this.FControlCollection = $mod.TControlCollection.$create("Create$3",[this]);
      this.FControlCollection.FPropName = "ControlCollection";
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        this.SetWidth(400);
        this.SetHeight(300);
      };
      this.FLabel = null;
      this.FActiveLayoutItem = null;
      this.FLayout = $mod.TResponsiveLayout.$create("Create$3",[this]);
      this.FLayout.FPropName = "Layout";
      if (this.FDesignTime) {
        li = this.FLayout.Add$2();
        li.FDescription = "Smartphone";
        li.FWidth = 575;
        li.FStyle = "1fr";
        li = this.FLayout.Add$2();
        li.FDescription = "Tablet";
        li.FWidth = 768;
        li.FStyle = "1fr 1fr";
        li = this.FLayout.Add$2();
        li.FDescription = "Desktop";
        li.FWidth = 991;
        li.FStyle = "1fr 1fr 1fr";
        li = this.FLayout.Add$2();
        li.FDescription = "Large Desktop";
        li.FWidth = 1199;
        li.FStyle = "1fr 1fr 1fr 1fr";
      };
    };
    this.AlignControls = function (AControl, Rect) {
      pas["WEBLib.Controls"].TControl.AlignControls.apply(this,arguments);
      this.Resize();
    };
    this.GetChildren = function (Proc, Root) {
      var i = 0;
      for (var $l1 = 0, $end2 = this.FControlCollection.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.FControlCollection.GetItem$1(i).FControl != null) Proc(this.FControlCollection.GetItem$1(i).FControl);
      };
    };
    this.Resize = function () {
      pas["WEBLib.Controls"].TCustomControl.Resize.call(this);
      this.SetResponsiveStyle();
    };
    this.AddControl = function (AControl) {
      this.FControlCollection.Add$1().FControl = AControl;
      AControl.SetParent(this);
    };
    this.RemoveControl = function (AControl) {
      var i = 0;
      for (var $l1 = 0, $end2 = this.FControlCollection.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.FControlCollection.GetItem$1(i).FControl === AControl) {
          this.FControlCollection.Delete(i);
          break;
        };
      };
    };
    this.EndUpdate = function () {
      pas["WEBLib.Controls"].TControl.EndUpdate.call(this);
      this.UpdateControls();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("ChildOrder",2,rtl.longint,"FChildOrder","SetChildOrderEx");
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ControlCollection",2,$mod.$rtti["TControlCollection"],"FControlCollection","SetControlCollection");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("Layout",0,$mod.$rtti["TResponsiveLayout"],"FLayout","FLayout");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnLayoutChange",0,$mod.$rtti["TResponsiveLayoutChangeEvent"],"FOnLayoutChange","FOnLayoutChange");
  });
  rtl.createClass($mod,"TWebResponsiveGridPanel",$mod.TResponsiveGridPanel,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TLookupValueItem",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FValue = "";
      this.FDisplayText = "";
    };
    var $r = this.$rtti;
    $r.addProperty("Value",0,rtl.string,"FValue","FValue");
    $r.addProperty("DisplayText",0,rtl.string,"FDisplayText","FDisplayText");
  });
  rtl.createClass($mod,"TLookupValues",pas.Classes.TOwnedCollection,function () {
    this.$init = function () {
      pas.Classes.TOwnedCollection.$init.call(this);
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TOwnedCollection.$final.call(this);
    };
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItem$1 = function (Index, Value) {
      this.SetItem(Index,Value);
    };
    this.DoChange = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,$mod.TLookupValueItem);
      return this;
    };
    this.AddPair = function (AValue, ADisplayText) {
      var lv = null;
      lv = pas.Classes.TCollection.Add.call(this);
      lv.FValue = AValue;
      lv.FDisplayText = ADisplayText;
      if (this.FUpdateCount === 0) this.DoChange();
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
    this.Insert$1 = function (Index) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,Index);
      return Result;
    };
  });
  rtl.createClass($mod,"TCustomLookupComboBox",pas["WEBLib.StdCtrls"].TCustomComboBox,function () {
    this.$init = function () {
      pas["WEBLib.StdCtrls"].TCustomComboBox.$init.call(this);
      this.FLookupValues = null;
    };
    this.$final = function () {
      this.FLookupValues = undefined;
      pas["WEBLib.StdCtrls"].TCustomComboBox.$final.call(this);
    };
    this.SetLookupValues = function (Value) {
      this.FLookupValues.Assign(Value);
    };
    this.GetDisplayText = function () {
      var Result = "";
      Result = "";
      if (this.GetItemIndex() >= 0) Result = this.FLookupValues.GetItem$1(this.GetItemIndex()).FDisplayText;
      return Result;
    };
    this.GetValue = function () {
      var Result = "";
      Result = "";
      if (this.GetItemIndex() >= 0) Result = this.FLookupValues.GetItem$1(this.GetItemIndex()).FValue;
      return Result;
    };
    this.SetDisplayText = function (Value) {
      var i = 0;
      var idx = 0;
      idx = -1;
      for (var $l1 = 0, $end2 = this.FLookupValues.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.FLookupValues.GetItem$1(i).FDisplayText === Value) {
          idx = i;
          break;
        };
      };
      this.SetItemIndex(idx);
    };
    this.SetValue = function (Value) {
      var i = 0;
      var idx = 0;
      idx = -1;
      for (var $l1 = 0, $end2 = this.FLookupValues.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (this.FLookupValues.GetItem$1(i).FValue === Value) {
          idx = i;
          break;
        };
      };
      this.SetItemIndex(idx);
    };
    this.ValuesChanged = function (Sender) {
      this.DoUpdateList();
    };
    this.DoUpdateList = function () {
      var i = 0;
      var opt = null;
      if (!(this.GetContainer() != null)) return;
      for (var $l1 = this.GetContainer().options.length - 1; $l1 >= 0; $l1--) {
        i = $l1;
        this.GetContainer().remove(i);
      };
      this.AddTextHint();
      for (var $l2 = 0, $end3 = this.FLookupValues.GetCount() - 1; $l2 <= $end3; $l2++) {
        i = $l2;
        opt = document.createElement("OPTION");
        opt.setAttribute("value",this.FLookupValues.GetItem$1(i).FValue);
        opt.innerHTML = this.FLookupValues.GetItem$1(i).FDisplayText;
        this.GetContainer().appendChild(opt);
      };
      this.UpdateElement();
    };
    this.Destroy = function () {
      rtl.free(this,"FLookupValues");
      pas["WEBLib.StdCtrls"].TCustomComboBox.Destroy.call(this);
    };
    this.CreateInitialize = function () {
      pas["WEBLib.StdCtrls"].TCustomComboBox.CreateInitialize.call(this);
      this.FLookupValues = $mod.TLookupValues.$create("Create$3",[this]);
      this.FLookupValues.FPropName = "LookupValues";
      this.FLookupValues.FOnChange = rtl.createCallback(this,"ValuesChanged");
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("AlignWithMargins",2,rtl.boolean,"FAlignWithMargins","SetAlignWithMargins",{Default: false});
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("ElementClassName",2,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","SetElementClassName");
    $r.addProperty("ElementID",3,pas["WEBLib.Controls"].$rtti["TElementID"],"GetID","SetID");
    $r.addProperty("ElementFont",2,pas["WEBLib.Controls"].$rtti["TElementFont"],"FElementFont","SetElementFont",{Default: pas["WEBLib.Controls"].TElementFont.efProperty});
    $r.addProperty("ElementPosition",2,pas["WEBLib.Controls"].$rtti["TElementPosition"],"FElementPosition","SetElementPosition",{Default: pas["WEBLib.Controls"].TElementPosition.epAbsolute});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("HeightPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FHeightPercent","SetHeightPercent",{Default: 100});
    $r.addProperty("HeightStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FHeightStyle","SetHeightStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("ItemIndex",3,rtl.longint,"GetItemIndex","SetItemIndex",{Default: -1});
    $r.addProperty("Left",3,rtl.longint,"GetLeft","SetLeft");
    $r.addProperty("Margins",2,pas["WEBLib.Controls"].$rtti["TMargins"],"FMargins","SetMargins");
    $r.addProperty("ParentFont",2,rtl.boolean,"FParentFont","SetParentFont",{Default: true});
    $r.addProperty("Role",3,rtl.string,"GetRole","SetRole");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus","SetShowFocus");
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("TextDirection",0,pas["WEBLib.Controls"].$rtti["TTextDirection"],"FTextDirection","FTextDirection");
    $r.addProperty("TextHint",2,rtl.string,"FTextHint","SetTextHint");
    $r.addProperty("Top",3,rtl.longint,"GetTop","SetTop");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("WidthPercent",2,pas["WEBLib.Controls"].$rtti["TPercentSize"],"FWidthPercent","SetWidthPercent",{Default: 100});
    $r.addProperty("WidthStyle",2,pas["WEBLib.Controls"].$rtti["TSizeStyle"],"FWidthStyle","SetWidthStyle",{Default: pas["WEBLib.Controls"].TSizeStyle.ssAbsolute});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
  });
  rtl.createClass($mod,"TLookupComboBox",$mod.TCustomLookupComboBox,function () {
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("LookupValues",2,$mod.$rtti["TLookupValues"],"FLookupValues","SetLookupValues");
  });
  rtl.createClass($mod,"TWebLookupComboBox",$mod.TLookupComboBox,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
},["WEBLib.Utils"]);
rtl.module("forms.baseform",["System","SysUtils","Classes","JS","Web","WEBLib.Graphics","WEBLib.Controls","WEBLib.Forms","WEBLib.Dialogs","WEBLib.ExtCtrls"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TBaseForm",pas["WEBLib.Forms"].TForm,function () {
    this.$init = function () {
      pas["WEBLib.Forms"].TForm.$init.call(this);
      this.BaseCenterPanel = null;
    };
    this.$final = function () {
      this.BaseCenterPanel = undefined;
      pas["WEBLib.Forms"].TForm.$final.call(this);
    };
    this.LoadDFMValues = function () {
      pas["WEBLib.Forms"].TCustomForm.LoadDFMValues.call(this);
      this.BaseCenterPanel = pas["WEBLib.ExtCtrls"].TPanel.$create("Create$1",[this]);
      this.BaseCenterPanel.BeforeLoadDFMValues();
      try {
        this.SetName("BaseForm");
        this.SetLeft(0);
        this.SetTop(0);
        this.SetWidth(640);
        this.SetHeight(480);
        this.FFont.FCharset = 1;
        this.FFont.SetColor(65793);
        this.FFont.SetHeight(-11);
        this.FFont.SetName("Arial");
        this.FFont.SetStyle({});
        this.SetTabOrder(1);
        this.BaseCenterPanel.SetParentComponent(this);
        this.BaseCenterPanel.SetName("BaseCenterPanel");
        this.BaseCenterPanel.SetLeft(32);
        this.BaseCenterPanel.SetTop(36);
        this.BaseCenterPanel.SetWidth(577);
        this.BaseCenterPanel.SetHeight(409);
        this.BaseCenterPanel.SetBorderColor(12632256);
        this.BaseCenterPanel.SetBorderStyle(pas["WEBLib.Controls"].TBorderStyle.bsSingle);
      } finally {
        this.BaseCenterPanel.AfterLoadDFMValues();
      };
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addField("BaseCenterPanel",pas["WEBLib.ExtCtrls"].$rtti["TPanel"]);
  });
  this.BaseForm = null;
});
rtl.module("Variants",["System"],function () {
  "use strict";
  var $mod = this;
});
rtl.module("WEBLib.Imaging.jpeg",["System"],function () {
  "use strict";
  var $mod = this;
  $mod.$init = function () {
  };
});
rtl.module("DateUtils",["System","SysUtils","Math"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.DaysPerWeek = 7;
  this.WeeksPerFortnight = 2;
  this.MonthsPerYear = 12;
  this.YearsPerDecade = 10;
  this.YearsPerCentury = 100;
  this.YearsPerMillennium = 1000;
  this.DayMonday = 1;
  this.DayTuesday = 2;
  this.DayWednesday = 3;
  this.DayThursday = 4;
  this.DayFriday = 5;
  this.DaySaturday = 6;
  this.DaySunday = 7;
  this.OneHour = 1 / 24;
  this.OneMinute = 1 / 1440;
  this.OneSecond = 1 / 86400;
  this.OneMillisecond = 1 / 86400000;
  this.DaysPerYear = [365,366];
  this.RecodeLeaveFieldAsIs = 65535;
  this.ApproxDaysPerMonth = 30.4375;
  this.ApproxDaysPerYear = 365.25;
  this.DateOf = function (AValue) {
    var Result = 0.0;
    Result = pas.System.Trunc(AValue);
    return Result;
  };
  this.TimeOf = function (AValue) {
    var Result = 0.0;
    Result = pas.System.Frac(AValue);
    return Result;
  };
  this.IsInLeapYear = function (AValue) {
    var Result = false;
    Result = pas.SysUtils.IsLeapYear($mod.YearOf(AValue));
    return Result;
  };
  this.IsPM = function (AValue) {
    var Result = false;
    Result = $mod.HourOf(AValue) >= 12;
    return Result;
  };
  this.IsValidDate = function (AYear, AMonth, ADay) {
    var Result = false;
    Result = (AYear !== 0) && (AYear < 10000) && $impl.IsValidMonth(AMonth) && (ADay !== 0) && (ADay <= pas.SysUtils.MonthDays[+pas.SysUtils.IsLeapYear(AYear)][AMonth - 1]);
    return Result;
  };
  this.IsValidTime = function (AHour, AMinute, ASecond, AMilliSecond) {
    var Result = false;
    Result = (AHour === 24) && (AMinute === 0) && (ASecond === 0) && (AMilliSecond === 0);
    Result = Result || ((AHour < 24) && (AMinute < 60) && (ASecond < 60) && (AMilliSecond < 1000));
    return Result;
  };
  this.IsValidDateTime = function (AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond) {
    var Result = false;
    Result = $mod.IsValidDate(AYear,AMonth,ADay) && $mod.IsValidTime(AHour,AMinute,ASecond,AMilliSecond);
    return Result;
  };
  this.IsValidDateDay = function (AYear, ADayOfYear) {
    var Result = false;
    Result = (AYear !== 0) && (ADayOfYear !== 0) && (AYear < 10000) && (ADayOfYear <= $mod.DaysPerYear[+pas.SysUtils.IsLeapYear(AYear)]);
    return Result;
  };
  this.IsValidDateWeek = function (AYear, AWeekOfYear, ADayOfWeek) {
    var Result = false;
    Result = (AYear !== 0) && (AYear < 10000) && $impl.IsValidDayOfWeek(ADayOfWeek) && (AWeekOfYear !== 0) && (AWeekOfYear <= $mod.WeeksInAYear(AYear));
    return Result;
  };
  this.IsValidDateMonthWeek = function (AYear, AMonth, AWeekOfMonth, ADayOfWeek) {
    var Result = false;
    Result = (AYear !== 0) && (AYear < 10000) && $impl.IsValidMonth(AMonth) && $impl.IsValidWeekOfMonth(AWeekOfMonth) && $impl.IsValidDayOfWeek(ADayOfWeek);
    return Result;
  };
  this.WeeksInYear = function (AValue) {
    var Result = 0;
    Result = $mod.WeeksInAYear($mod.YearOf(AValue));
    return Result;
  };
  this.WeeksInAYear = function (AYear) {
    var Result = 0;
    var DOW = 0;
    Result = 52;
    DOW = $mod.DayOfTheWeek($mod.StartOfAYear(AYear));
    if ((DOW === 4) || ((DOW === 3) && pas.SysUtils.IsLeapYear(AYear))) Result += 1;
    return Result;
  };
  this.DaysInYear = function (AValue) {
    var Result = 0;
    Result = $mod.DaysPerYear[+pas.SysUtils.IsLeapYear($mod.YearOf(AValue))];
    return Result;
  };
  this.DaysInAYear = function (AYear) {
    var Result = 0;
    Result = $mod.DaysPerYear[+pas.SysUtils.IsLeapYear(AYear)];
    return Result;
  };
  this.DaysInMonth = function (AValue) {
    var Result = 0;
    var Y = 0;
    var M = 0;
    var D = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    Result = pas.SysUtils.MonthDays[+pas.SysUtils.IsLeapYear(Y)][M - 1];
    return Result;
  };
  this.DaysInAMonth = function (AYear, AMonth) {
    var Result = 0;
    Result = pas.SysUtils.MonthDays[+pas.SysUtils.IsLeapYear(AYear)][AMonth - 1];
    return Result;
  };
  this.Today = function () {
    var Result = 0.0;
    Result = pas.SysUtils.Date();
    return Result;
  };
  this.Yesterday = function () {
    var Result = 0.0;
    Result = pas.SysUtils.Date() - 1;
    return Result;
  };
  this.Tomorrow = function () {
    var Result = 0.0;
    Result = pas.SysUtils.Date() + 1;
    return Result;
  };
  this.IsToday = function (AValue) {
    var Result = false;
    Result = $mod.IsSameDay(AValue,pas.SysUtils.Date());
    return Result;
  };
  this.IsSameDay = function (AValue, ABasis) {
    var Result = false;
    var D = 0.0;
    D = AValue - pas.System.Trunc(ABasis);
    Result = (D >= 0) && (D < 1);
    return Result;
  };
  this.IsSameMonth = function (Avalue, ABasis) {
    var Result = false;
    Result = $mod.YearOf(Avalue) === $mod.YearOf(ABasis);
    Result = Result && ($mod.MonthOf(Avalue) === $mod.MonthOf(ABasis));
    return Result;
  };
  this.PreviousDayOfWeek = function (DayOfWeek) {
    var Result = 0;
    if (!$impl.IsValidDayOfWeek(DayOfWeek)) throw pas.SysUtils.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidDayOfWeek,[DayOfWeek]]);
    Result = $impl.DOWMap[DayOfWeek - 1];
    return Result;
  };
  this.YearOf = function (AValue) {
    var Result = 0;
    var D = 0;
    var M = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }});
    return Result;
  };
  this.MonthOf = function (AValue) {
    var Result = 0;
    var Y = 0;
    var D = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    return Result;
  };
  this.WeekOf = function (AValue) {
    var Result = 0;
    Result = $mod.WeekOfTheYear(AValue);
    return Result;
  };
  this.DayOf = function (AValue) {
    var Result = 0;
    var Y = 0;
    var M = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.HourOf = function (AValue) {
    var Result = 0;
    var N = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    return Result;
  };
  this.MinuteOf = function (AValue) {
    var Result = 0;
    var H = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    return Result;
  };
  this.SecondOf = function (AValue) {
    var Result = 0;
    var H = 0;
    var N = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    return Result;
  };
  this.MilliSecondOf = function (AValue) {
    var Result = 0;
    var H = 0;
    var N = 0;
    var S = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.StartOfTheYear = function (AValue) {
    var Result = 0.0;
    Result = pas.SysUtils.EncodeDate($mod.YearOf(AValue),1,1);
    return Result;
  };
  this.EndOfTheYear = function (AValue) {
    var Result = 0.0;
    Result = $mod.EncodeDateTime($mod.YearOf(AValue),12,31,23,59,59,999);
    return Result;
  };
  this.StartOfAYear = function (AYear) {
    var Result = 0.0;
    Result = pas.SysUtils.EncodeDate(AYear,1,1);
    return Result;
  };
  this.EndOfAYear = function (AYear) {
    var Result = 0.0;
    Result = $mod.EncodeDateTime(AYear,12,31,23,59,59,999);
    return Result;
  };
  this.StartOfTheMonth = function (AValue) {
    var Result = 0.0;
    var Y = 0;
    var M = 0;
    var D = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    Result = pas.SysUtils.EncodeDate(Y,M,1);
    return Result;
  };
  this.EndOfTheMonth = function (AValue) {
    var Result = 0.0;
    var Y = 0;
    var M = 0;
    var D = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    Result = $mod.EncodeDateTime(Y,M,pas.SysUtils.MonthDays[+pas.SysUtils.IsLeapYear(Y)][M - 1],23,59,59,999);
    return Result;
  };
  this.StartOfAMonth = function (AYear, AMonth) {
    var Result = 0.0;
    Result = pas.SysUtils.EncodeDate(AYear,AMonth,1);
    return Result;
  };
  this.EndOfAMonth = function (AYear, AMonth) {
    var Result = 0.0;
    Result = $mod.EncodeDateTime(AYear,AMonth,pas.SysUtils.MonthDays[+pas.SysUtils.IsLeapYear(AYear)][AMonth - 1],23,59,59,999);
    return Result;
  };
  this.StartOfTheWeek = function (AValue) {
    var Result = 0.0;
    Result = (pas.System.Trunc(AValue) - $mod.DayOfTheWeek(AValue)) + 1;
    return Result;
  };
  this.EndOfTheWeek = function (AValue) {
    var Result = 0.0;
    Result = $mod.EndOfTheDay((AValue - $mod.DayOfTheWeek(AValue)) + 7);
    return Result;
  };
  this.StartOfAWeek = function (AYear, AWeekOfYear, ADayOfWeek) {
    var Result = 0.0;
    Result = $mod.EncodeDateWeek(AYear,AWeekOfYear,ADayOfWeek);
    return Result;
  };
  this.StartOfAWeek$1 = function (AYear, AWeekOfYear) {
    var Result = 0.0;
    Result = $mod.StartOfAWeek(AYear,AWeekOfYear,1);
    return Result;
  };
  this.EndOfAWeek = function (AYear, AWeekOfYear, ADayOfWeek) {
    var Result = 0.0;
    Result = $mod.EndOfTheDay($mod.EncodeDateWeek(AYear,AWeekOfYear,ADayOfWeek));
    return Result;
  };
  this.EndOfAWeek$1 = function (AYear, AWeekOfYear) {
    var Result = 0.0;
    Result = $mod.EndOfAWeek(AYear,AWeekOfYear,7);
    return Result;
  };
  this.StartOfTheDay = function (AValue) {
    var Result = 0.0;
    Result = pas.System.Trunc(AValue);
    return Result;
  };
  this.EndOfTheDay = function (AValue) {
    var Result = 0.0;
    var Y = 0;
    var M = 0;
    var D = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    Result = $mod.EncodeDateTime(Y,M,D,23,59,59,999);
    return Result;
  };
  this.StartOfADay = function (AYear, AMonth, ADay) {
    var Result = 0.0;
    Result = pas.SysUtils.EncodeDate(AYear,AMonth,ADay);
    return Result;
  };
  this.StartOfADay$1 = function (AYear, ADayOfYear) {
    var Result = 0.0;
    Result = ($mod.StartOfAYear(AYear) + ADayOfYear) - 1;
    return Result;
  };
  this.EndOfADay = function (AYear, AMonth, ADay) {
    var Result = 0.0;
    Result = $mod.EndOfTheDay(pas.SysUtils.EncodeDate(AYear,AMonth,ADay));
    return Result;
  };
  this.EndOfADay$1 = function (AYear, ADayOfYear) {
    var Result = 0.0;
    Result = (($mod.StartOfAYear(AYear) + ADayOfYear) - 1) + pas.SysUtils.EncodeTime(23,59,59,999);
    return Result;
  };
  this.MonthOfTheYear = function (AValue) {
    var Result = 0;
    Result = $mod.MonthOf(AValue);
    return Result;
  };
  this.WeekOfTheYear = function (AValue) {
    var Result = 0;
    var Y = 0;
    var DOW = 0;
    $mod.DecodeDateWeek(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return DOW;
      }, set: function (v) {
        DOW = v;
      }});
    return Result;
  };
  this.WeekOfTheYear$1 = function (AValue, AYear) {
    var Result = 0;
    var DOW = 0;
    $mod.DecodeDateWeek(AValue,AYear,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return DOW;
      }, set: function (v) {
        DOW = v;
      }});
    return Result;
  };
  this.DayOfTheYear = function (AValue) {
    var Result = 0;
    Result = pas.System.Trunc((AValue - $mod.StartOfTheYear(AValue)) + 1);
    return Result;
  };
  this.HourOfTheYear = function (AValue) {
    var Result = 0;
    var H = 0;
    var M = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = H + (($mod.DayOfTheYear(AValue) - 1) * 24);
    return Result;
  };
  this.MinuteOfTheYear = function (AValue) {
    var Result = 0;
    var H = 0;
    var M = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = M + ((H + (($mod.DayOfTheYear(AValue) - 1) * 24)) * 60);
    return Result;
  };
  this.SecondOfTheYear = function (AValue) {
    var Result = 0;
    var H = 0;
    var M = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = ((M + ((H + (($mod.DayOfTheYear(AValue) - 1) * 24)) * 60)) * 60) + S;
    return Result;
  };
  this.MilliSecondOfTheYear = function (AValue) {
    var Result = 0;
    var H = 0;
    var M = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = ((((M + ((H + (($mod.DayOfTheYear(AValue) - 1) * 24)) * 60)) * 60) + S) * 1000) + MS;
    return Result;
  };
  this.WeekOfTheMonth = function (AValue) {
    var Result = 0;
    var Y = 0;
    var M = 0;
    var DOW = 0;
    $mod.DecodeDateMonthWeek(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return DOW;
      }, set: function (v) {
        DOW = v;
      }});
    return Result;
  };
  this.WeekOfTheMonth$1 = function (AValue, AYear, AMonth) {
    var Result = 0;
    var DOW = 0;
    $mod.DecodeDateMonthWeek(AValue,AYear,AMonth,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return DOW;
      }, set: function (v) {
        DOW = v;
      }});
    return Result;
  };
  this.DayOfTheMonth = function (AValue) {
    var Result = 0;
    var Y = 0;
    var M = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.HourOfTheMonth = function (AValue) {
    var Result = 0;
    var Y = 0;
    var M = 0;
    var D = 0;
    var H = 0;
    var N = 0;
    var S = 0;
    var MS = 0;
    $mod.DecodeDateTime(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = ((D - 1) * 24) + H;
    return Result;
  };
  this.MinuteOfTheMonth = function (AValue) {
    var Result = 0;
    var Y = 0;
    var M = 0;
    var D = 0;
    var H = 0;
    var N = 0;
    var S = 0;
    var MS = 0;
    $mod.DecodeDateTime(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = ((((D - 1) * 24) + H) * 60) + N;
    return Result;
  };
  this.SecondOfTheMonth = function (AValue) {
    var Result = 0;
    var Y = 0;
    var M = 0;
    var D = 0;
    var H = 0;
    var N = 0;
    var S = 0;
    var MS = 0;
    $mod.DecodeDateTime(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = ((((((D - 1) * 24) + H) * 60) + N) * 60) + S;
    return Result;
  };
  this.MilliSecondOfTheMonth = function (AValue) {
    var Result = 0;
    var Y = 0;
    var M = 0;
    var D = 0;
    var H = 0;
    var N = 0;
    var S = 0;
    var MS = 0;
    $mod.DecodeDateTime(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = ((((((((D - 1) * 24) + H) * 60) + N) * 60) + S) * 1000) + MS;
    return Result;
  };
  this.DayOfTheWeek = function (AValue) {
    var Result = 0;
    Result = $impl.DOWMap[pas.SysUtils.DayOfWeek(AValue) - 1];
    return Result;
  };
  this.HourOfTheWeek = function (AValue) {
    var Result = 0;
    var H = 0;
    var M = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = (($mod.DayOfTheWeek(AValue) - 1) * 24) + H;
    return Result;
  };
  this.MinuteOfTheWeek = function (AValue) {
    var Result = 0;
    var H = 0;
    var M = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = (((($mod.DayOfTheWeek(AValue) - 1) * 24) + H) * 60) + M;
    return Result;
  };
  this.SecondOfTheWeek = function (AValue) {
    var Result = 0;
    var H = 0;
    var M = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = (((((($mod.DayOfTheWeek(AValue) - 1) * 24) + H) * 60) + M) * 60) + S;
    return Result;
  };
  this.MilliSecondOfTheWeek = function (AValue) {
    var Result = 0;
    var H = 0;
    var M = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = (((((((($mod.DayOfTheWeek(AValue) - 1) * 24) + H) * 60) + M) * 60) + S) * 1000) + MS;
    return Result;
  };
  this.HourOfTheDay = function (AValue) {
    var Result = 0;
    Result = $mod.HourOf(AValue);
    return Result;
  };
  this.MinuteOfTheDay = function (AValue) {
    var Result = 0;
    var H = 0;
    var M = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = (H * 60) + M;
    return Result;
  };
  this.SecondOfTheDay = function (AValue) {
    var Result = 0;
    var H = 0;
    var M = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = (((H * 60) + M) * 60) + S;
    return Result;
  };
  this.MilliSecondOfTheDay = function (AValue) {
    var Result = 0;
    var H = 0;
    var M = 0;
    var S = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = (((((H * 60) + M) * 60) + S) * 1000) + MS;
    return Result;
  };
  this.MinuteOfTheHour = function (AValue) {
    var Result = 0;
    Result = $mod.MinuteOf(AValue);
    return Result;
  };
  this.SecondOfTheHour = function (AValue) {
    var Result = 0;
    var H = 0;
    var S = 0;
    var M = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = (M * 60) + S;
    return Result;
  };
  this.MilliSecondOfTheHour = function (AValue) {
    var Result = 0;
    var H = 0;
    var S = 0;
    var M = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = (((M * 60) + S) * 1000) + MS;
    return Result;
  };
  this.SecondOfTheMinute = function (AValue) {
    var Result = 0;
    Result = $mod.SecondOf(AValue);
    return Result;
  };
  this.MilliSecondOfTheMinute = function (AValue) {
    var Result = 0;
    var H = 0;
    var S = 0;
    var M = 0;
    var MS = 0;
    pas.SysUtils.DecodeTime(AValue,{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Result = (S * 1000) + MS;
    return Result;
  };
  this.MilliSecondOfTheSecond = function (AValue) {
    var Result = 0;
    Result = $mod.MilliSecondOf(AValue);
    return Result;
  };
  this.WithinPastYears = function (ANow, AThen, AYears) {
    var Result = false;
    Result = $mod.YearsBetween(ANow,AThen,false) <= AYears;
    return Result;
  };
  this.WithinPastMonths = function (ANow, AThen, AMonths) {
    var Result = false;
    Result = $mod.MonthsBetween(ANow,AThen,false) <= AMonths;
    return Result;
  };
  this.WithinPastWeeks = function (ANow, AThen, AWeeks) {
    var Result = false;
    Result = $mod.WeeksBetween(ANow,AThen) <= AWeeks;
    return Result;
  };
  this.WithinPastDays = function (ANow, AThen, ADays) {
    var Result = false;
    Result = $mod.DaysBetween(ANow,AThen) <= ADays;
    return Result;
  };
  this.WithinPastHours = function (ANow, AThen, AHours) {
    var Result = false;
    Result = $mod.HoursBetween(ANow,AThen) <= AHours;
    return Result;
  };
  this.WithinPastMinutes = function (ANow, AThen, AMinutes) {
    var Result = false;
    Result = $mod.MinutesBetween(ANow,AThen) <= AMinutes;
    return Result;
  };
  this.WithinPastSeconds = function (ANow, AThen, ASeconds) {
    var Result = false;
    Result = $mod.SecondsBetween(ANow,AThen) <= ASeconds;
    return Result;
  };
  this.WithinPastMilliSeconds = function (ANow, AThen, AMilliSeconds) {
    var Result = false;
    Result = $mod.MilliSecondsBetween(ANow,AThen) <= AMilliSeconds;
    return Result;
  };
  this.YearsBetween = function (ANow, AThen, AExact) {
    var Result = 0;
    var yy = 0;
    var mm = 0;
    var dd = 0;
    if (AExact && (ANow >= -693594) && (AThen >= -693594) && (ANow <= pas.SysUtils.MaxDateTime) && (AThen <= pas.SysUtils.MaxDateTime)) {
      $mod.PeriodBetween(ANow,AThen,{get: function () {
          return yy;
        }, set: function (v) {
          yy = v;
        }},{get: function () {
          return mm;
        }, set: function (v) {
          mm = v;
        }},{get: function () {
          return dd;
        }, set: function (v) {
          dd = v;
        }});
      Result = yy;
    } else Result = pas.System.Trunc((Math.abs($impl.DateTimeDiff(ANow,AThen)) + 5.7870370370370369E-9) / $mod.ApproxDaysPerYear);
    return Result;
  };
  this.MonthsBetween = function (ANow, AThen, AExact) {
    var Result = 0;
    var y = 0;
    var m = 0;
    var d = 0;
    if (AExact && (ANow >= -693594) && (AThen >= -693594) && (ANow <= pas.SysUtils.MaxDateTime) && (AThen <= pas.SysUtils.MaxDateTime)) {
      $mod.PeriodBetween(ANow,AThen,{get: function () {
          return y;
        }, set: function (v) {
          y = v;
        }},{get: function () {
          return m;
        }, set: function (v) {
          m = v;
        }},{get: function () {
          return d;
        }, set: function (v) {
          d = v;
        }});
      Result = (y * 12) + m;
    } else Result = pas.System.Trunc((Math.abs($impl.DateTimeDiff(ANow,AThen)) + 5.7870370370370369E-9) / $mod.ApproxDaysPerMonth);
    return Result;
  };
  this.WeeksBetween = function (ANow, AThen) {
    var Result = 0;
    Result = Math.floor(pas.System.Trunc(Math.abs($impl.DateTimeDiff(ANow,AThen)) + 5.7870370370370369E-9) / 7);
    return Result;
  };
  this.DaysBetween = function (ANow, AThen) {
    var Result = 0;
    Result = pas.System.Trunc(Math.abs($impl.DateTimeDiff(ANow,AThen)) + 5.7870370370370369E-9);
    return Result;
  };
  this.HoursBetween = function (ANow, AThen) {
    var Result = 0;
    Result = pas.System.Trunc((Math.abs($impl.DateTimeDiff(ANow,AThen)) + 5.7870370370370369E-9) * 24);
    return Result;
  };
  this.MinutesBetween = function (ANow, AThen) {
    var Result = 0;
    Result = pas.System.Trunc((Math.abs($impl.DateTimeDiff(ANow,AThen)) + 5.7870370370370369E-9) * 1440);
    return Result;
  };
  this.SecondsBetween = function (ANow, AThen) {
    var Result = 0;
    Result = pas.System.Trunc((Math.abs($impl.DateTimeDiff(ANow,AThen)) + 5.7870370370370369E-9) * 86400);
    return Result;
  };
  this.MilliSecondsBetween = function (ANow, AThen) {
    var Result = 0;
    Result = pas.System.Trunc((Math.abs($impl.DateTimeDiff(ANow,AThen)) + 5.7870370370370369E-9) * 86400000);
    return Result;
  };
  this.PeriodBetween = function (ANow, AThen, Years, months, days) {
    var Y1 = 0;
    var Y2 = 0;
    var M1 = 0;
    var M2 = 0;
    var D1 = 0;
    var D2 = 0;
    if (AThen > ANow) {
      pas.SysUtils.DecodeDate(ANow,{get: function () {
          return Y1;
        }, set: function (v) {
          Y1 = v;
        }},{get: function () {
          return M1;
        }, set: function (v) {
          M1 = v;
        }},{get: function () {
          return D1;
        }, set: function (v) {
          D1 = v;
        }});
      pas.SysUtils.DecodeDate(AThen,{get: function () {
          return Y2;
        }, set: function (v) {
          Y2 = v;
        }},{get: function () {
          return M2;
        }, set: function (v) {
          M2 = v;
        }},{get: function () {
          return D2;
        }, set: function (v) {
          D2 = v;
        }});
    } else {
      pas.SysUtils.DecodeDate(AThen,{get: function () {
          return Y1;
        }, set: function (v) {
          Y1 = v;
        }},{get: function () {
          return M1;
        }, set: function (v) {
          M1 = v;
        }},{get: function () {
          return D1;
        }, set: function (v) {
          D1 = v;
        }});
      pas.SysUtils.DecodeDate(ANow,{get: function () {
          return Y2;
        }, set: function (v) {
          Y2 = v;
        }},{get: function () {
          return M2;
        }, set: function (v) {
          M2 = v;
        }},{get: function () {
          return D2;
        }, set: function (v) {
          D2 = v;
        }});
    };
    Years.set(Y2 - Y1);
    if ((M1 > M2) || ((M1 === M2) && (D1 > D2))) Years.set(Years.get() - 1);
    if (M1 > M2) M2 += 12;
    months.set(M2 - M1);
    if (D2 >= D1) {
      days.set(D2 - D1)}
     else {
      if (months.get() === 0) {
        months.set(11)}
       else months.set(months.get() - 1);
      days.set(($mod.DaysInAMonth(Y1,M1) - D1) + D2);
    };
  };
  this.YearSpan = function (ANow, AThen) {
    var Result = 0.0;
    Result = Math.abs($impl.DateTimeDiff(ANow,AThen)) / $mod.ApproxDaysPerYear;
    return Result;
  };
  this.MonthSpan = function (ANow, AThen) {
    var Result = 0.0;
    Result = Math.abs($impl.DateTimeDiff(ANow,AThen)) / $mod.ApproxDaysPerMonth;
    return Result;
  };
  this.WeekSpan = function (ANow, AThen) {
    var Result = 0.0;
    Result = Math.abs($impl.DateTimeDiff(ANow,AThen)) / 7;
    return Result;
  };
  this.DaySpan = function (ANow, AThen) {
    var Result = 0.0;
    Result = Math.abs($impl.DateTimeDiff(ANow,AThen));
    return Result;
  };
  this.HourSpan = function (ANow, AThen) {
    var Result = 0.0;
    Result = Math.abs($impl.DateTimeDiff(ANow,AThen)) * 24;
    return Result;
  };
  this.MinuteSpan = function (ANow, AThen) {
    var Result = 0.0;
    Result = Math.abs($impl.DateTimeDiff(ANow,AThen)) * 1440;
    return Result;
  };
  this.SecondSpan = function (ANow, AThen) {
    var Result = 0.0;
    Result = Math.abs($impl.DateTimeDiff(ANow,AThen)) * 86400;
    return Result;
  };
  this.MilliSecondSpan = function (ANow, AThen) {
    var Result = 0.0;
    Result = Math.abs($impl.DateTimeDiff(ANow,AThen)) * 86400000;
    return Result;
  };
  this.IncYear = function (AValue, ANumberOfYears) {
    var Result = 0.0;
    var Y = 0;
    var M = 0;
    var D = 0;
    var H = 0;
    var N = 0;
    var S = 0;
    var MS = 0;
    $mod.DecodeDateTime(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Y = Y + ANumberOfYears;
    if ((M === 2) && (D === 29) && !pas.SysUtils.IsLeapYear(Y)) D = 28;
    Result = $mod.EncodeDateTime(Y,M,D,H,N,S,MS);
    return Result;
  };
  this.IncYear$1 = function (AValue) {
    var Result = 0.0;
    Result = $mod.IncYear(AValue,1);
    return Result;
  };
  this.IncWeek = function (AValue, ANumberOfWeeks) {
    var Result = 0.0;
    Result = AValue + (ANumberOfWeeks * 7);
    $impl.MaybeSkipTimeWarp(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.IncWeek$1 = function (AValue) {
    var Result = 0.0;
    Result = $mod.IncWeek(AValue,1);
    return Result;
  };
  this.IncDay = function (AValue, ANumberOfDays) {
    var Result = 0.0;
    Result = AValue + ANumberOfDays;
    $impl.MaybeSkipTimeWarp(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.IncDay$1 = function (AValue) {
    var Result = 0.0;
    Result = $mod.IncDay(AValue,1);
    return Result;
  };
  this.IncHour = function (AValue, ANumberOfHours) {
    var Result = 0.0;
    if (AValue >= 0) {
      Result = AValue + (ANumberOfHours / 24)}
     else Result = $impl.IncNegativeTime(AValue,ANumberOfHours / 24);
    $impl.MaybeSkipTimeWarp(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.IncHour$1 = function (AValue) {
    var Result = 0.0;
    Result = $mod.IncHour(AValue,1);
    return Result;
  };
  this.IncMinute = function (AValue, ANumberOfMinutes) {
    var Result = 0.0;
    if (AValue >= 0) {
      Result = AValue + (ANumberOfMinutes / 1440)}
     else Result = $impl.IncNegativeTime(AValue,ANumberOfMinutes / 1440);
    $impl.MaybeSkipTimeWarp(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.IncMinute$1 = function (AValue) {
    var Result = 0.0;
    Result = $mod.IncMinute(AValue,1);
    return Result;
  };
  this.IncSecond = function (AValue, ANumberOfSeconds) {
    var Result = 0.0;
    if (AValue >= 0) {
      Result = AValue + (ANumberOfSeconds / 86400)}
     else Result = $impl.IncNegativeTime(AValue,ANumberOfSeconds / 86400);
    $impl.MaybeSkipTimeWarp(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.IncSecond$1 = function (AValue) {
    var Result = 0.0;
    Result = $mod.IncSecond(AValue,1);
    return Result;
  };
  this.IncMilliSecond = function (AValue, ANumberOfMilliSeconds) {
    var Result = 0.0;
    if (AValue >= 0) {
      Result = AValue + (ANumberOfMilliSeconds / 86400000)}
     else Result = $impl.IncNegativeTime(AValue,ANumberOfMilliSeconds / 86400000);
    $impl.MaybeSkipTimeWarp(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }});
    return Result;
  };
  this.IncMilliSecond$1 = function (AValue) {
    var Result = 0.0;
    Result = $mod.IncMilliSecond(AValue,1);
    return Result;
  };
  this.EncodeDateTime = function (AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond) {
    var Result = 0.0;
    if (!$mod.TryEncodeDateTime(AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) $mod.InvalidDateTimeError$1(AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond);
    return Result;
  };
  this.DecodeDateTime = function (AValue, AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond) {
    pas.SysUtils.DecodeTime(AValue,AHour,AMinute,ASecond,AMilliSecond);
    if (AHour.get() === 24) {
      AHour.set(0);
      pas.SysUtils.DecodeDate(Math.round(AValue),AYear,AMonth,ADay);
    } else pas.SysUtils.DecodeDate(AValue,AYear,AMonth,ADay);
  };
  this.TryEncodeDateTime = function (AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond, AValue) {
    var Result = false;
    var tmp = 0.0;
    Result = pas.SysUtils.TryEncodeDate(AYear,AMonth,ADay,AValue);
    Result = Result && pas.SysUtils.TryEncodeTime(AHour,AMinute,ASecond,AMilliSecond,{get: function () {
        return tmp;
      }, set: function (v) {
        tmp = v;
      }});
    if (Result) AValue.set(pas.SysUtils.ComposeDateTime(AValue.get(),tmp));
    return Result;
  };
  this.EncodeDateWeek = function (AYear, AWeekOfYear, ADayOfWeek) {
    var Result = 0.0;
    if (!$mod.TryEncodeDateWeek(AYear,AWeekOfYear,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},ADayOfWeek)) $mod.InvalidDateWeekError(AYear,AWeekOfYear,ADayOfWeek);
    return Result;
  };
  this.EncodeDateWeek$1 = function (AYear, AWeekOfYear) {
    var Result = 0.0;
    Result = $mod.EncodeDateWeek(AYear,AWeekOfYear,1);
    return Result;
  };
  this.DecodeDateWeek = function (AValue, AYear, AWeekOfYear, ADayOfWeek) {
    var DOY = 0;
    var D = 0;
    var YS = 0.0;
    var YSDOW = 0;
    var YEDOW = 0;
    AYear.set($mod.YearOf(AValue));
    ADayOfWeek.set(pas.SysUtils.DayOfWeek(AValue) - 1);
    if (ADayOfWeek.get() === 0) ADayOfWeek.set(7);
    YS = $mod.StartOfAYear(AYear.get());
    DOY = pas.System.Trunc(AValue - YS) + 1;
    YSDOW = $mod.DayOfTheWeek(YS);
    if (YSDOW < 5) {
      DOY += YSDOW - 1}
     else DOY -= 8 - YSDOW;
    if (DOY <= 0) {
      $mod.DecodeDateWeek(YS - 1,AYear,AWeekOfYear,{get: function () {
          return D;
        }, set: function (v) {
          D = v;
        }})}
     else {
      AWeekOfYear.set(Math.floor(DOY / 7));
      if ((DOY % 7) !== 0) AWeekOfYear.set(AWeekOfYear.get() + 1);
      if (AWeekOfYear.get() > 52) {
        YEDOW = YSDOW;
        if (pas.SysUtils.IsLeapYear(AYear.get())) {
          YEDOW += 1;
          if (YEDOW > 7) YEDOW = 1;
        };
        if (YEDOW < 4) {
          AYear.set(AYear.get() + 1);
          AWeekOfYear.set(1);
        };
      };
    };
  };
  this.TryEncodeDateWeek = function (AYear, AWeekOfYear, AValue, ADayOfWeek) {
    var Result = false;
    var DOW = 0;
    var Rest = 0;
    Result = $mod.IsValidDateWeek(AYear,AWeekOfYear,ADayOfWeek);
    if (Result) {
      AValue.set(pas.SysUtils.EncodeDate(AYear,1,1) + (7 * (AWeekOfYear - 1)));
      DOW = $mod.DayOfTheWeek(AValue.get());
      Rest = ADayOfWeek - DOW;
      if (DOW > 4) Rest += 7;
      AValue.set(AValue.get() + Rest);
    };
    return Result;
  };
  this.TryEncodeDateWeek$1 = function (AYear, AWeekOfYear, AValue) {
    var Result = false;
    Result = $mod.TryEncodeDateWeek(AYear,AWeekOfYear,AValue,1);
    return Result;
  };
  this.EncodeDateDay = function (AYear, ADayOfYear) {
    var Result = 0.0;
    if (!$mod.TryEncodeDateDay(AYear,ADayOfYear,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) $mod.InvalidDateDayError(AYear,ADayOfYear);
    return Result;
  };
  this.DecodeDateDay = function (AValue, AYear, ADayOfYear) {
    var M = 0;
    var D = 0;
    pas.SysUtils.DecodeDate(AValue,AYear,{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    ADayOfYear.set(pas.System.Trunc(AValue - pas.SysUtils.EncodeDate(AYear.get(),1,1)) + 1);
  };
  this.TryEncodeDateDay = function (AYear, ADayOfYear, AValue) {
    var Result = false;
    Result = (ADayOfYear !== 0) && (ADayOfYear <= $mod.DaysPerYear[+pas.SysUtils.IsLeapYear(AYear)]);
    if (Result) AValue.set((pas.SysUtils.EncodeDate(AYear,1,1) + ADayOfYear) - 1);
    return Result;
  };
  this.EncodeDateMonthWeek = function (AYear, AMonth, AWeekOfMonth, ADayOfWeek) {
    var Result = 0.0;
    if (!$mod.TryEncodeDateMonthWeek(AYear,AMonth,AWeekOfMonth,ADayOfWeek,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) $mod.InvalidDateMonthWeekError(AYear,AMonth,AWeekOfMonth,ADayOfWeek);
    return Result;
  };
  this.DecodeDateMonthWeek = function (AValue, AYear, AMonth, AWeekOfMonth, ADayOfWeek) {
    var D = 0;
    var SDOM = 0;
    var EDOM = 0;
    var SOM = 0.0;
    var DOM = 0;
    pas.SysUtils.DecodeDate(AValue,AYear,AMonth,{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    ADayOfWeek.set($mod.DayOfTheWeek(AValue));
    SOM = pas.SysUtils.EncodeDate(AYear.get(),AMonth.get(),1);
    SDOM = $mod.DayOfTheWeek(SOM);
    DOM = (D - 1) + SDOM;
    if (SDOM > 4) DOM -= 7;
    if (DOM <= 0) {
      $mod.DecodeDateMonthWeek(SOM - 1,AYear,AMonth,AWeekOfMonth,{get: function () {
          return D;
        }, set: function (v) {
          D = v;
        }})}
     else {
      AWeekOfMonth.set(Math.floor(DOM / 7));
      if ((DOM % 7) !== 0) AWeekOfMonth.set(AWeekOfMonth.get() + 1);
      EDOM = $mod.DayOfTheWeek($mod.EndOfAMonth(AYear.get(),AMonth.get()));
      if ((EDOM < 4) && (($mod.DaysInAMonth(AYear.get(),AMonth.get()) - D) < EDOM)) {
        AWeekOfMonth.set(1);
        AMonth.set(AMonth.get() + 1);
        if (AMonth.get() === 13) {
          AMonth.set(1);
          AYear.set(AYear.get() + 1);
        };
      };
    };
  };
  this.TryEncodeDateMonthWeek = function (AYear, AMonth, AWeekOfMonth, ADayOfWeek, AValue) {
    var Result = false;
    var S = 0;
    var DOM = 0;
    Result = $mod.IsValidDateMonthWeek(AYear,AMonth,AWeekOfMonth,ADayOfWeek);
    if (Result) {
      AValue.set(pas.SysUtils.EncodeDate(AYear,AMonth,1));
      DOM = (((AWeekOfMonth - 1) * 7) + ADayOfWeek) - 1;
      S = $mod.DayOfTheWeek(AValue.get());
      DOM -= S - 1;
      if ((S === 5) || (S === 6) || (S === 7)) DOM += 7;
      AValue.set(AValue.get() + DOM);
    };
    return Result;
  };
  this.TryEncodeTimeInterval = function (Hour, Min, Sec, MSec, Time) {
    var Result = false;
    Result = (Min < 60) && (Sec < 60) && (MSec < 1000);
    if (Result) Time.set(((Hour * 3600000) + (Min * 60000) + (Sec * 1000) + MSec) / 86400000);
    return Result;
  };
  this.EncodeTimeInterval = function (Hour, Minute, Second, MilliSecond) {
    var Result = 0.0;
    if (!$mod.TryEncodeTimeInterval(Hour,Minute,Second,MilliSecond,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw pas.SysUtils.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidHourMinuteSecMsec,[Hour,Minute,Second,MilliSecond]]);
    return Result;
  };
  this.RecodeYear = function (AValue, AYear) {
    var Result = 0.0;
    Result = $mod.RecodeDateTime(AValue,AYear,65535,65535,65535,65535,65535,65535);
    return Result;
  };
  this.RecodeMonth = function (AValue, AMonth) {
    var Result = 0.0;
    Result = $mod.RecodeDateTime(AValue,65535,AMonth,65535,65535,65535,65535,65535);
    return Result;
  };
  this.RecodeDay = function (AValue, ADay) {
    var Result = 0.0;
    Result = $mod.RecodeDateTime(AValue,65535,65535,ADay,65535,65535,65535,65535);
    return Result;
  };
  this.RecodeHour = function (AValue, AHour) {
    var Result = 0.0;
    Result = $mod.RecodeDateTime(AValue,65535,65535,65535,AHour,65535,65535,65535);
    return Result;
  };
  this.RecodeMinute = function (AValue, AMinute) {
    var Result = 0.0;
    Result = $mod.RecodeDateTime(AValue,65535,65535,65535,65535,AMinute,65535,65535);
    return Result;
  };
  this.RecodeSecond = function (AValue, ASecond) {
    var Result = 0.0;
    Result = $mod.RecodeDateTime(AValue,65535,65535,65535,65535,65535,ASecond,65535);
    return Result;
  };
  this.RecodeMilliSecond = function (AValue, AMilliSecond) {
    var Result = 0.0;
    Result = $mod.RecodeDateTime(AValue,65535,65535,65535,65535,65535,65535,AMilliSecond);
    return Result;
  };
  this.RecodeDate = function (AValue, AYear, AMonth, ADay) {
    var Result = 0.0;
    Result = $mod.RecodeDateTime(AValue,AYear,AMonth,ADay,65535,65535,65535,65535);
    return Result;
  };
  this.RecodeTime = function (AValue, AHour, AMinute, ASecond, AMilliSecond) {
    var Result = 0.0;
    Result = $mod.RecodeDateTime(AValue,65535,65535,65535,AHour,AMinute,ASecond,AMilliSecond);
    return Result;
  };
  this.RecodeDateTime = function (AValue, AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond) {
    var Result = 0.0;
    if (!$mod.TryRecodeDateTime(AValue,AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) $mod.InvalidDateTimeError(AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,AValue);
    return Result;
  };
  this.TryRecodeDateTime = function (AValue, AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond, AResult) {
    var Result = false;
    function FV(AV, Arg) {
      if (Arg !== 65535) AV.set(Arg);
    };
    var Y = 0;
    var M = 0;
    var D = 0;
    var H = 0;
    var N = 0;
    var S = 0;
    var MS = 0;
    $mod.DecodeDateTime(AValue,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    FV({get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},AYear);
    FV({get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},AMonth);
    FV({get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},ADay);
    FV({get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},AHour);
    FV({get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},AMinute);
    FV({get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},ASecond);
    FV({get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }},AMilliSecond);
    Result = $mod.TryEncodeDateTime(Y,M,D,H,N,S,MS,AResult);
    return Result;
  };
  this.CompareDateTime = function (A, B) {
    var Result = 0;
    if ($mod.SameDateTime(A,B)) {
      Result = 0}
     else if (pas.System.Trunc(A) === pas.System.Trunc(B)) {
      if (Math.abs(pas.System.Frac(A)) > Math.abs(pas.System.Frac(B))) {
        Result = 1}
       else Result = -1;
    } else {
      if (A > B) {
        Result = 1}
       else Result = -1;
    };
    return Result;
  };
  this.CompareDate = function (A, B) {
    var Result = 0;
    if ($mod.SameDate(A,B)) {
      Result = 0}
     else if (A < B) {
      Result = -1}
     else Result = 1;
    return Result;
  };
  this.CompareTime = function (A, B) {
    var Result = 0;
    if ($mod.SameTime(A,B)) {
      Result = 0}
     else if (pas.System.Frac(A) < pas.System.Frac(B)) {
      Result = -1}
     else Result = 1;
    return Result;
  };
  this.SameDateTime = function (A, B) {
    var Result = false;
    Result = Math.abs(A - B) < 1.1574074074074074E-8;
    return Result;
  };
  this.SameDate = function (A, B) {
    var Result = false;
    Result = pas.System.Trunc(A) === pas.System.Trunc(B);
    return Result;
  };
  this.SameTime = function (A, B) {
    var Result = false;
    Result = pas.System.Frac(Math.abs(A - B)) < 1.1574074074074074E-8;
    return Result;
  };
  this.NthDayOfWeek = function (AValue) {
    var Result = 0;
    Result = $impl.InternalNthDayOfWeek($mod.DayOfTheMonth(AValue));
    return Result;
  };
  this.DecodeDayOfWeekInMonth = function (AValue, AYear, AMonth, ANthDayOfWeek, ADayOfWeek) {
    var D = 0;
    pas.SysUtils.DecodeDate(AValue,AYear,AMonth,{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }});
    ADayOfWeek.set($mod.DayOfTheWeek(AValue));
    ANthDayOfWeek.set($impl.InternalNthDayOfWeek(D));
  };
  this.EncodeDayOfWeekInMonth = function (AYear, AMonth, ANthDayOfWeek, ADayOfWeek) {
    var Result = 0.0;
    if (!$mod.TryEncodeDayOfWeekInMonth(AYear,AMonth,ANthDayOfWeek,ADayOfWeek,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) $mod.InvalidDayOfWeekInMonthError(AYear,AMonth,ANthDayOfWeek,ADayOfWeek);
    return Result;
  };
  this.TryEncodeDayOfWeekInMonth = function (AYear, AMonth, ANthDayOfWeek, ADayOfWeek, AValue) {
    var Result = false;
    var SOM = 0;
    var D = 0;
    SOM = $mod.DayOfTheWeek(pas.SysUtils.EncodeDate(AYear,AMonth,1));
    D = ((1 + ADayOfWeek) - SOM) + (7 * (ANthDayOfWeek - 1));
    if (SOM > ADayOfWeek) D = D + 7;
    Result = pas.SysUtils.TryEncodeDate(AYear,AMonth,D,AValue);
    return Result;
  };
  this.InvalidDateTimeError = function (AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond, ABaseDate) {
    function DoField(Arg, Def, Unknown) {
      var Result = "";
      if (Def === 0) ;
      if (Arg !== 65535) {
        Result = pas.SysUtils.Format("%.*d",[Unknown.length,Arg])}
       else if (ABaseDate === 0) {
        Result = Unknown}
       else Result = pas.SysUtils.Format("%.*d",[Unknown.length,Arg]);
      return Result;
    };
    var Y = 0;
    var M = 0;
    var D = 0;
    var H = 0;
    var N = 0;
    var S = 0;
    var MS = 0;
    var Msg = "";
    $mod.DecodeDateTime(ABaseDate,{get: function () {
        return Y;
      }, set: function (v) {
        Y = v;
      }},{get: function () {
        return M;
      }, set: function (v) {
        M = v;
      }},{get: function () {
        return D;
      }, set: function (v) {
        D = v;
      }},{get: function () {
        return H;
      }, set: function (v) {
        H = v;
      }},{get: function () {
        return N;
      }, set: function (v) {
        N = v;
      }},{get: function () {
        return S;
      }, set: function (v) {
        S = v;
      }},{get: function () {
        return MS;
      }, set: function (v) {
        MS = v;
      }});
    Msg = DoField(AYear,Y,"????");
    Msg = Msg + pas.SysUtils.DateSeparator + DoField(AMonth,M,"??");
    Msg = Msg + pas.SysUtils.DateSeparator + DoField(ADay,D,"??");
    Msg = Msg + " " + DoField(AHour,H,"??");
    Msg = Msg + pas.SysUtils.TimeSeparator + DoField(AMinute,N,"??");
    Msg = Msg + pas.SysUtils.TimeSeparator + DoField(ASecond,S,"??");
    Msg = Msg + pas.SysUtils.DecimalSeparator + DoField(AMilliSecond,MS,"???");
    throw pas.SysUtils.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidTimeStamp,[Msg]]);
  };
  this.InvalidDateTimeError$1 = function (AYear, AMonth, ADay, AHour, AMinute, ASecond, AMilliSecond) {
    $mod.InvalidDateTimeError(AYear,AMonth,ADay,AHour,AMinute,ASecond,AMilliSecond,0);
  };
  this.InvalidDateWeekError = function (AYear, AWeekOfYear, ADayOfWeek) {
    throw pas.SysUtils.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidDateWeek,[AYear,AWeekOfYear,ADayOfWeek]]);
  };
  this.InvalidDateDayError = function (AYear, ADayOfYear) {
    throw pas.SysUtils.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidDayOfYear,[AYear,ADayOfYear]]);
  };
  this.InvalidDateMonthWeekError = function (AYear, AMonth, AWeekOfMonth, ADayOfWeek) {
    throw pas.SysUtils.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidDateMonthWeek,[AYear,AMonth,AWeekOfMonth,ADayOfWeek]]);
  };
  this.InvalidDayOfWeekInMonthError = function (AYear, AMonth, ANthDayOfWeek, ADayOfWeek) {
    throw pas.SysUtils.EConvertError.$create("CreateFmt",[pas.RTLConsts.SErrInvalidDayOfWeekInMonth,[AYear,AMonth,ANthDayOfWeek,ADayOfWeek]]);
  };
  this.DateTimeToJulianDate = function (AValue) {
    var Result = 0.0;
    var day = 0;
    var month = 0;
    var year = 0;
    var a = 0;
    var y = 0;
    var m = 0;
    pas.SysUtils.DecodeDate(AValue,{get: function () {
        return year;
      }, set: function (v) {
        year = v;
      }},{get: function () {
        return month;
      }, set: function (v) {
        month = v;
      }},{get: function () {
        return day;
      }, set: function (v) {
        day = v;
      }});
    a = Math.floor((14 - month) / 12);
    y = (year + 4800) - a;
    m = (month + (12 * a)) - 3;
    Result = ((((day + Math.floor(((153 * m) + 2) / 5) + (365 * y) + Math.floor(y / 4)) - Math.floor(y / 100)) + Math.floor(y / 400)) - 32045.5) + pas.System.Frac(AValue);
    return Result;
  };
  this.JulianDateToDateTime = function (AValue) {
    var Result = 0.0;
    if (!$mod.TryJulianDateToDateTime(AValue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) throw pas.SysUtils.EConvertError.$create("CreateFmt",[pas.RTLConsts.SInvalidJulianDate,[AValue]]);
    return Result;
  };
  this.TryJulianDateToDateTime = function (AValue, ADateTime) {
    var Result = false;
    var a = 0;
    var b = 0;
    var c = 0;
    var d = 0;
    var e = 0;
    var m = 0;
    var day = 0;
    var month = 0;
    var year = 0;
    a = pas.System.Trunc(AValue + 32044.5);
    b = Math.floor(((4 * a) + 3) / 146097);
    c = a - Math.floor((146097 * b) / 4);
    d = Math.floor(((4 * c) + 3) / 1461);
    e = c - Math.floor((1461 * d) / 4);
    m = Math.floor(((5 * e) + 2) / 153);
    day = (e - Math.floor(((153 * m) + 2) / 5)) + 1;
    month = (m + 3) - (12 * Math.floor(m / 10));
    year = (((100 * b) + d) - 4800) + Math.floor(m / 10);
    Result = pas.SysUtils.TryEncodeDate(year,month,day,ADateTime);
    if (Result) ADateTime.set(ADateTime.get() + pas.System.Frac(AValue - 0.5));
    return Result;
  };
  this.DateTimeToModifiedJulianDate = function (AValue) {
    var Result = 0.0;
    Result = $mod.DateTimeToJulianDate(AValue) - 2400000.5;
    return Result;
  };
  this.ModifiedJulianDateToDateTime = function (AValue) {
    var Result = 0.0;
    Result = $mod.JulianDateToDateTime(AValue + 2400000.5);
    return Result;
  };
  this.TryModifiedJulianDateToDateTime = function (AValue, ADateTime) {
    var Result = false;
    Result = $mod.TryJulianDateToDateTime(AValue + 2400000.5,ADateTime);
    return Result;
  };
  this.DateTimeToUnix = function (AValue) {
    var Result = 0;
    Result = Math.round($impl.DateTimeDiff($mod.RecodeMilliSecond(AValue,0),25569) * 86400);
    return Result;
  };
  this.UnixToDateTime = function (AValue) {
    var Result = 0.0;
    Result = $mod.IncSecond(25569,AValue);
    return Result;
  };
  var Epoch = 24107 * 24 * 3600;
  this.UnixTimeStampToMac = function (AValue) {
    var Result = 0;
    Result = AValue + 2082844800;
    return Result;
  };
  this.DateTimeToMac = function (AValue) {
    var Result = 0;
    var Epoch = 0.0;
    Epoch = $mod.EncodeDateTime(1904,1,1,0,0,0,0);
    Result = $mod.SecondsBetween(Epoch,AValue);
    return Result;
  };
  this.MacToDateTime = function (AValue) {
    var Result = 0.0;
    var Epoch = 0.0;
    Epoch = $mod.EncodeDateTime(1904,1,1,0,0,0,0);
    Result = $mod.IncSecond(Epoch,AValue);
    return Result;
  };
  var Epoch$1 = 24107 * 24 * 3600;
  this.MacTimeStampToUnix = function (AValue) {
    var Result = 0;
    Result = AValue - 2082844800;
    return Result;
  };
  this.DateTimeToDosDateTime = function (AValue) {
    var Result = 0;
    var year = 0;
    var month = 0;
    var day = 0;
    var hour = 0;
    var min = 0;
    var sec = 0;
    var msec = 0;
    var zs = 0;
    $mod.DecodeDateTime(AValue,{get: function () {
        return year;
      }, set: function (v) {
        year = v;
      }},{get: function () {
        return month;
      }, set: function (v) {
        month = v;
      }},{get: function () {
        return day;
      }, set: function (v) {
        day = v;
      }},{get: function () {
        return hour;
      }, set: function (v) {
        hour = v;
      }},{get: function () {
        return min;
      }, set: function (v) {
        min = v;
      }},{get: function () {
        return sec;
      }, set: function (v) {
        sec = v;
      }},{get: function () {
        return msec;
      }, set: function (v) {
        msec = v;
      }});
    Result = -1980;
    Result = Result + (year & 127);
    Result = Result << 4;
    Result = Result + month;
    Result = Result << 5;
    Result = Result + day;
    Result = Result << 16;
    zs = hour;
    zs = zs << 6;
    zs = zs + min;
    zs = zs << 5;
    zs = zs + Math.floor(sec / 2);
    Result = Result + (zs & 0xffff);
    return Result;
  };
  this.DosDateTimeToDateTime = function (AValue) {
    var Result = 0.0;
    var year = 0;
    var month = 0;
    var day = 0;
    var hour = 0;
    var min = 0;
    var sec = 0;
    sec = (AValue & 31) * 2;
    AValue = AValue >>> 5;
    min = AValue & 63;
    AValue = AValue >>> 6;
    hour = AValue & 31;
    AValue = AValue >>> 5;
    day = AValue & 31;
    AValue = AValue >>> 5;
    month = AValue & 15;
    AValue = AValue >>> 4;
    year = AValue + 1980;
    Result = $mod.EncodeDateTime(year,month,day,hour,min,sec,0);
    return Result;
  };
  this.UniversalTimeToLocal = function (UT) {
    var Result = 0.0;
    Result = $mod.UniversalTimeToLocal$1(UT,-$impl.GetLocalTimeOffset());
    return Result;
  };
  this.UniversalTimeToLocal$1 = function (UT, TZOffset) {
    var Result = 0.0;
    if (TZOffset > 0) {
      Result = UT + pas.SysUtils.EncodeTime(Math.floor(TZOffset / 60),TZOffset % 60,0,0)}
     else if (TZOffset < 0) {
      Result = UT - pas.SysUtils.EncodeTime(Math.floor(Math.abs(TZOffset) / 60),Math.abs(TZOffset) % 60,0,0)}
     else Result = UT;
    return Result;
  };
  this.LocalTimeToUniversal = function (LT) {
    var Result = 0.0;
    Result = $mod.LocalTimeToUniversal$1(LT,-$impl.GetLocalTimeOffset());
    return Result;
  };
  this.LocalTimeToUniversal$1 = function (LT, TZOffset) {
    var Result = 0.0;
    if (TZOffset > 0) {
      Result = LT - pas.SysUtils.EncodeTime(Math.floor(TZOffset / 60),TZOffset % 60,0,0)}
     else if (TZOffset < 0) {
      Result = LT + pas.SysUtils.EncodeTime(Math.floor(Math.abs(TZOffset) / 60),Math.abs(TZOffset) % 60,0,0)}
     else Result = LT;
    return Result;
  };
  this.DateTimeToRFC3339 = function (ADate) {
    var Result = "";
    Result = pas.SysUtils.FormatDateTime('yyyy-mm-dd"T"hh":"nn":"ss"."zzz"Z"',ADate);
    return Result;
  };
  this.DateToRFC3339 = function (ADate) {
    var Result = "";
    Result = pas.SysUtils.FormatDateTime("yyyy-mm-dd",ADate);
    return Result;
  };
  this.TimeToRFC3339 = function (ADate) {
    var Result = "";
    Result = pas.SysUtils.FormatDateTime('hh":"nn":"ss"."zzz',ADate);
    return Result;
  };
  var TPartPos = {"0": "ppTime", ppTime: 0, "1": "ppYear", ppYear: 1, "2": "ppMonth", ppMonth: 2, "3": "ppDay", ppDay: 3, "4": "ppHour", ppHour: 4, "5": "ppMinute", ppMinute: 5, "6": "ppSec", ppSec: 6};
  var P = [11,1,6,9,12,15,18];
  this.TryRFC3339ToDateTime = function (Avalue, ADateTime) {
    var Result = false;
    var lY = 0;
    var lM = 0;
    var lD = 0;
    var lH = 0;
    var lMi = 0;
    var lS = 0;
    if (pas.SysUtils.Trim(Avalue) === "") {
      Result = true;
      ADateTime.set(0);
    };
    lY = pas.SysUtils.StrToIntDef(pas.System.Copy(Avalue,P[TPartPos.ppYear],4),-1);
    lM = pas.SysUtils.StrToIntDef(pas.System.Copy(Avalue,P[TPartPos.ppMonth],2),-1);
    lD = pas.SysUtils.StrToIntDef(pas.System.Copy(Avalue,P[TPartPos.ppDay],2),-1);
    if (Avalue.length >= P[TPartPos.ppTime]) {
      lH = pas.SysUtils.StrToIntDef(pas.System.Copy(Avalue,P[TPartPos.ppHour],2),-1);
      lMi = pas.SysUtils.StrToIntDef(pas.System.Copy(Avalue,P[TPartPos.ppMinute],2),-1);
      lS = pas.SysUtils.StrToIntDef(pas.System.Copy(Avalue,P[TPartPos.ppSec],2),-1);
    } else {
      lH = 0;
      lMi = 0;
      lS = 0;
    };
    Result = (lY >= 0) && (lM >= 0) && (lD >= 0) && (lH >= 0) && (lMi >= 0) && (lS >= 0);
    if (!Result) {
      ADateTime.set(0)}
     else if ((lY === 0) || (lM === 0) || (lD === 0)) {
      ADateTime.set(pas.SysUtils.EncodeTime(lH,lMi,lS,0))}
     else ADateTime.set(pas.SysUtils.EncodeDate(lY,lM,lD) + pas.SysUtils.EncodeTime(lH,lMi,lS,0));
    return Result;
  };
  this.RFC3339ToDateTime = function (Avalue) {
    var Result = 0.0;
    if (!$mod.TryRFC3339ToDateTime(Avalue,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }})) Result = 0;
    return Result;
  };
  rtl.createClass($mod,"TDateTimeScanner",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FPattern = "";
      this.FText = "";
      this.FPatternOffset = 0;
      this.FLen = 0;
      this.FPatternLen = 0;
      this.FPatternPos = 0;
      this.FPos = 0;
      this.FY = 0;
      this.FM = 0;
      this.FD = 0;
      this.FTimeval = 0.0;
    };
    this.ArrayMatchError = function () {
      $impl.raiseexception(pas.SysUtils.Format($impl.SNoArrayMatch,[this.FPatternPos + 1,this.FPos]));
    };
    this.DoDateTime = function () {
      this.MatchPattern(pas.SysUtils.ShortDateFormat);
      this.MatchPattern("\t");
      this.MatchPattern(pas.SysUtils.LongTimeFormat);
      this.FPatternPos += 1;
    };
    this.SetPattern = function (AValue) {
      if (this.FPattern === AValue) return;
      this.FPattern = AValue;
      this.FPatternLen = this.FPattern.length;
    };
    this.SetText = function (AValue) {
      if (this.FText === AValue) return;
      this.FText = AValue;
      this.FLen = this.FText.length;
    };
    this.ScanFixedInt = function (maxv) {
      var Result = 0;
      var c = "";
      var n = "";
      var oi = 0;
      Result = 0;
      oi = this.FPos;
      c = this.FPattern.charAt(this.FPatternPos - 1);
      while ((this.FPatternPos <= this.FPatternLen) && (this.FPattern.charAt(this.FPatternPos - 1) === c)) this.FPatternPos += 1;
      n = this.FText.charAt(this.FPos - 1);
      while ((maxv > 0) && (this.FPos <= this.FLen) && (n.charCodeAt() in rtl.createSet(null,48,57))) {
        Result = ((Result * 10) + n.charCodeAt()) - 48;
        this.FPos += 1;
        maxv -= 1;
        if (this.FPos <= this.FLen) n = this.FText.charAt(this.FPos - 1);
      };
      if (oi === this.FPos) $impl.raiseexception(pas.SysUtils.Format($impl.SPatternCharMismatch,[c,oi]));
      return Result;
    };
    this.ScanPatternLength = function () {
      var Result = 0;
      var c = "";
      var i = 0;
      Result = this.FPatternPos;
      i = this.FPatternPos;
      c = this.FPattern.charAt(i - 1);
      while ((i <= this.FPatternLen) && (this.FPattern.charAt(i - 1) === c)) i += 1;
      Result = i - Result;
      return Result;
    };
    this.MatchChar = function (c) {
      var N = "";
      if (this.FPos <= this.FLen) {
        N = this.FText.charAt(this.FPos - 1)}
       else N = "?";
      if (N !== c) $impl.raiseexception(pas.SysUtils.Format($impl.SNoCharMatch,[N,c,this.FPatternPos + this.FPatternOffset,this.FPos]));
      this.FPatternPos += 1;
      this.FPos += 1;
    };
    this.FindIMatch = function (values, aTerm) {
      var Result = 0;
      var l = 0;
      var i = 0;
      Result = -1;
      l = rtl.length(values) - 1;
      i = 0;
      while ((i <= l) && (Result === -1)) {
        if (pas.SysUtils.SameText(pas.System.Copy(aTerm,1,values[i].length),values[i])) Result = i;
        i += 1;
      };
      return Result;
    };
    this.FindMatch = function (Values) {
      var Result = 0;
      Result = this.FindIMatch(Values,pas.System.Copy(this.FText,this.FPos,(this.FLen - this.FPos) + 1));
      if (Result === -1) {
        this.ArrayMatchError()}
       else {
        this.FPos += Values[Result].length + 1;
        this.FPatternPos += Values[Result].length + 1;
        Result += 1;
      };
      return Result;
    };
    this.MatchPattern = function (aPattern) {
      var T = "";
      var cPos = 0;
      T = this.FPattern;
      cPos = this.FPatternPos;
      this.FPatternOffset = this.FPatternPos;
      this.FPattern = aPattern;
      this.FPatternLen = aPattern.length;
      try {
        this.Scan(-1);
      } finally {
        this.FPattern = T;
        this.FPatternLen = aPattern.length;
        this.FPatternPos = cPos;
        this.FPatternOffset = 0;
      };
    };
    this.DoYear = function () {
      var I = 0;
      var pivot = 0;
      I = this.ScanPatternLength();
      this.FY = this.ScanFixedInt(4);
      if (I <= 2) {
        pivot = $mod.YearOf(pas.SysUtils.Now()) - pas.SysUtils.TwoDigitYearCenturyWindow;
        this.FY += Math.floor(pivot / 100) * 100;
        if ((pas.SysUtils.TwoDigitYearCenturyWindow > 0) && (this.FY < pivot)) this.FY += 100;
      };
    };
    this.DoMonth = function () {
      var I = 0;
      I = this.ScanPatternLength();
      var $tmp1 = I;
      if (($tmp1 === 1) || ($tmp1 === 2)) {
        this.FM = this.ScanFixedInt(2)}
       else if ($tmp1 === 3) {
        this.FM = this.FindMatch(pas.SysUtils.ShortMonthNames)}
       else if ($tmp1 === 4) this.FM = this.FindMatch(pas.SysUtils.LongMonthNames);
    };
    this.DoDay = function () {
      var I = 0;
      I = this.ScanPatternLength();
      var $tmp1 = I;
      if (($tmp1 === 1) || ($tmp1 === 2)) {
        this.FD = this.ScanFixedInt(2)}
       else if ($tmp1 === 3) {
        this.FD = this.FindMatch(pas.SysUtils.ShortDayNames)}
       else if ($tmp1 === 4) {
        this.FD = this.FindMatch(pas.SysUtils.LongDayNames)}
       else if ($tmp1 === 5) {
        this.MatchPattern(pas.SysUtils.ShortDateFormat)}
       else if ($tmp1 === 6) this.MatchPattern(pas.SysUtils.LongDateFormat);
    };
    this.DoTime = function () {
      var I = 0;
      I = this.ScanPatternLength();
      var $tmp1 = I;
      if ($tmp1 === 1) {
        this.MatchPattern(pas.SysUtils.ShortTimeFormat)}
       else if ($tmp1 === 2) this.MatchPattern(pas.SysUtils.LongTimeFormat);
    };
    this.DoAMPM = function () {
      var I = 0;
      I = this.FindIMatch($impl.AMPMformatting,pas.System.Copy(this.FPattern,this.FPatternPos,5));
      var $tmp1 = I;
      if ($tmp1 === 0) {
        I = this.FindIMatch(["AM","PM"],pas.System.Copy(this.FText,this.FPos,2));
        var $tmp2 = I;
        if ($tmp2 === 0) {}
        else if ($tmp2 === 1) {
          this.FTimeval = this.FTimeval + (12 * 0.041666666666666664)}
         else {
          this.ArrayMatchError();
        };
        this.FPatternPos += $impl.AMPMformatting[0].length;
        this.FPos += 2;
      } else if ($tmp1 === 1) {
        var $tmp3 = pas.System.upcase(this.FText.charAt(this.FPos - 1));
        if ($tmp3 === "A") {}
        else if ($tmp3 === "P") {
          this.FTimeval = this.FTimeval + (12 * 0.041666666666666664)}
         else {
          this.ArrayMatchError();
        };
        this.FPatternPos += $impl.AMPMformatting[1].length;
        this.FPos += 1;
      } else if ($tmp1 === 2) {
        I = this.FindIMatch([pas.SysUtils.TimeAMString,pas.SysUtils.TimePMString],pas.System.Copy(this.FText,this.FPos,5));
        var $tmp4 = I;
        if ($tmp4 === 0) {
          this.FPos += pas.SysUtils.TimeAMString.length}
         else if ($tmp4 === 1) {
          this.FTimeval = this.FTimeval + (12 * 0.041666666666666664);
          this.FPos += pas.SysUtils.TimePMString.length;
        } else {
          this.ArrayMatchError();
        };
        this.FPatternPos += $impl.AMPMformatting[2].length;
        this.FPatternPos += 2;
        this.FPos += 2;
      } else {
        this.MatchChar(this.FPattern.charAt(this.FPatternPos - 1));
      };
    };
    this.Scan = function (StartPos) {
      var Result = 0.0;
      var lasttoken = "";
      var activequote = "";
      var lch = "";
      var i = 0;
      if (StartPos < 1) StartPos = 1;
      if (this.FPos < StartPos) this.FPos = StartPos;
      this.FPatternPos = 1;
      activequote = "\x00";
      lasttoken = " ";
      while ((this.FPos <= this.FLen) && (this.FPatternPos <= this.FPatternLen)) {
        lch = pas.System.upcase(this.FPattern.charAt(this.FPatternPos - 1));
        if (activequote !== "\x00") {
          if (activequote !== lch) {
            this.MatchChar(lch)}
           else {
            activequote = "\x00";
            this.FPatternPos += 1;
          };
        } else {
          if ((lch === "M") && (lasttoken === "H")) {
            i = this.ScanPatternLength();
            if (i > 2) $impl.raiseexception(pas.SysUtils.Format($impl.SHHMMError,[this.FPatternOffset + this.FPatternPos + 1]));
            this.FTimeval = this.FTimeval + (this.ScanFixedInt(2) * 0.00069444444444444447);
          } else {
            var $tmp1 = lch;
            if ($tmp1 === "Y") {
              this.DoYear()}
             else if ($tmp1 === "M") {
              this.DoMonth()}
             else if ($tmp1 === "D") {
              this.DoDay()}
             else if ($tmp1 === "T") {
              this.DoTime()}
             else if ($tmp1 === "H") {
              this.FTimeval = this.FTimeval + (this.ScanFixedInt(2) * 0.041666666666666664)}
             else if ($tmp1 === "N") {
              this.FTimeval = this.FTimeval + (this.ScanFixedInt(2) * 0.00069444444444444447)}
             else if ($tmp1 === "S") {
              this.FTimeval = this.FTimeval + (this.ScanFixedInt(2) * 0.000011574074074074073)}
             else if ($tmp1 === "Z") {
              this.FTimeval = this.FTimeval + (this.ScanFixedInt(3) * 1.1574074074074074E-8)}
             else if ($tmp1 === "A") {
              this.DoAMPM()}
             else if ($tmp1 === "\/") {
              this.MatchChar(pas.SysUtils.DateSeparator)}
             else if ($tmp1 === ":") {
              this.MatchChar(pas.SysUtils.TimeSeparator);
              lch = lasttoken;
            } else if (($tmp1 === "'") || ($tmp1 === '"')) {
              activequote = lch;
              this.FPatternPos += 1;
            } else if ($tmp1 === "C") {
              this.DoDateTime()}
             else if ($tmp1 === "?") {
              this.FPatternPos += 1;
              this.FPos += 1;
            } else if ($tmp1 === "\t") {
              while ((this.FPos <= this.FLen) && (this.FText.charCodeAt(this.FPos - 1) in $impl.whitespace)) this.FPos += 1;
              this.FPatternPos += 1;
            } else {
              this.MatchChar(this.FPattern.charAt(this.FPatternPos - 1));
            };
          };
          lasttoken = lch;
        };
      };
      Result = this.FTimeval;
      if ((this.FY > 0) && (this.FM > 0) && (this.FD > 0)) Result = Result + pas.SysUtils.EncodeDate(this.FY,this.FM,this.FD);
      return Result;
    };
  });
  this.ScanDateTime = function (APattern, AValue, APos) {
    var Result = 0.0;
    var T = null;
    T = $mod.TDateTimeScanner.$create("Create");
    try {
      T.SetPattern(APattern);
      T.SetText(AValue);
      Result = T.Scan(APos);
    } finally {
      T = rtl.freeLoc(T);
    };
    return Result;
  };
},["JS","RTLConsts"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.TDateTimeEpsilon = 2.2204460493e-16;
  $impl.HalfMilliSecond = 1.1574074074074074E-8 / 2;
  $impl.IsValidMonth = function (AMonth) {
    var Result = false;
    Result = (AMonth >= 1) && (AMonth <= 12);
    return Result;
  };
  $impl.IsValidDayOfWeek = function (ADayOfWeek) {
    var Result = false;
    Result = (ADayOfWeek >= 1) && (ADayOfWeek <= 7);
    return Result;
  };
  $impl.IsValidWeekOfMonth = function (AWeekOfMonth) {
    var Result = false;
    Result = (AWeekOfMonth >= 1) && (AWeekOfMonth <= 5);
    return Result;
  };
  $impl.DOWMap = [7,1,2,3,4,5,6];
  $impl.DateTimeDiff = function (ANow, AThen) {
    var Result = 0.0;
    Result = ANow - AThen;
    if ((ANow > 0) && (AThen < 0)) {
      Result = Result - 0.5}
     else if ((ANow < -1.0) && (AThen > -1.0)) Result = Result + 0.5;
    return Result;
  };
  $impl.MaybeSkipTimeWarp = function (OldDate, NewDate) {
    if ((OldDate >= 0) && (NewDate.get() < -2.2204460493E-16)) {
      NewDate.set(pas.System.Int((NewDate.get() - 1.0) + 2.2204460493E-16) - pas.System.Frac(1.0 + pas.System.Frac(NewDate.get())))}
     else if ((OldDate <= -1.0) && (NewDate.get() > (-1.0 + 2.2204460493E-16))) NewDate.set(pas.System.Int((NewDate.get() + 1.0) - 2.2204460493E-16) + pas.System.Frac(1.0 - Math.abs(pas.System.Frac(1.0 + NewDate.get()))));
  };
  $impl.IncNegativeTime = function (AValue, Addend) {
    var Result = 0.0;
    var newtime = 0.0;
    newtime = -pas.System.Frac(AValue) + pas.System.Frac(Addend);
    if (pas.Math.SameValue(newtime,pas.System.Int(newtime) + 1,2.2204460493E-16)) {
      newtime = pas.System.Int(newtime) + 1}
     else if (pas.Math.SameValue(newtime,pas.System.Int(newtime),2.2204460493E-16)) newtime = pas.System.Int(newtime);
    if (newtime < -2.2204460493E-16) {
      newtime = 1.0 + newtime;
      AValue = pas.System.Int(AValue) - 1;
    } else if (newtime >= (1.0 - 2.2204460493E-16)) {
      newtime = newtime - 1.0;
      AValue = pas.System.Int(AValue) + 1;
    };
    Result = (pas.System.Int(AValue) + pas.System.Int(Addend)) - newtime;
    return Result;
  };
  $impl.LFAI = 65535;
  $impl.InternalNthDayOfWeek = function (DoM) {
    var Result = 0;
    Result = Math.floor((DoM - 1) / 7) + 1;
    return Result;
  };
  $impl.whitespace = rtl.createSet(32,13,10);
  $impl.hrfactor = 1 / 24;
  $impl.minfactor = 1 / (24 * 60);
  $impl.secfactor = 1 / (24 * 60 * 60);
  $impl.mssecfactor = 1 / (24 * 60 * 60 * 1000);
  $impl.AMPMformatting = ["am\/pm","a\/p","ampm"];
  $impl.raiseexception = function (s) {
    throw pas.SysUtils.EConvertError.$create("Create$1",[s]);
  };
  $impl.GetLocalTimeOffset = function () {
    var Result = 0;
    Result = (new Date()).getTimezoneOffset();
    return Result;
  };
  $impl.SPatternCharMismatch = 'Pattern mismatch char "%s" at position %d.';
  $impl.SNoCharMatch = 'Mismatch char "%s" <> "%s" at pattern position %d, string position %d.';
  $impl.SHHMMError = "mm in a sequence hh:mm is interpreted as minutes. No longer versions allowed! (Position : %d).";
  $impl.SNoArrayMatch = "Can't match any allowed value at pattern position %d, string position %d.";
});
rtl.module("WEBLib.TMSFNCUtils",["System","Classes","SysUtils","Types","WEBLib.Graphics","WEBLib.TMSFNCTypes","WEBLib.Controls","WEBLib.Forms","JS","WEBLib.Dialogs","WEBLib.JSON","Web"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.PthDel = "\/";
  $mod.$rtti.$DynArray("TTMSFNCUtilsCharSet",{eltype: rtl.char});
  rtl.recNewT($mod,"TTMSFNCUtilsFile",function () {
    this.Data = null;
    this.Name = "";
    this.$eq = function (b) {
      return (this.Data === b.Data) && (this.Name === b.Name);
    };
    this.$assign = function (s) {
      this.Data = s.Data;
      this.Name = s.Name;
      return this;
    };
    var $r = $mod.$rtti.$Record("TTMSFNCUtilsFile",{});
    $r.addField("Data",pas.JS.$rtti["TJSUint8Array"]);
    $r.addField("Name",rtl.string);
  });
  $mod.$rtti.$MethodVar("TTMSFNCUtilsLoadFileCompleteEvent",{procsig: rtl.newTIProcSig([["AFile",$mod.$rtti["TTMSFNCUtilsFile"],2]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCUtilsFileCallBackEvent",{procsig: rtl.newTIProcSig([["AFile",rtl.string,2],["AResult",rtl.boolean,2]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCUtils",pas.System.TObject,function () {
    this.GetTimeZoneInfo = function (ABias, ABiasDay, AIsDaylight) {
      var bias = 0;
      var biasday = 0;
      var isDaylight = false;
      Date.prototype.stdTimezoneOffset = function () {
              var jan = new Date(this.getFullYear(), 0, 1);
              var jul = new Date(this.getFullYear(), 6, 1);
              return Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
          }
      
          Date.prototype.isDstObserved = function () {
              return this.getTimezoneOffset() < this.stdTimezoneOffset();
          }
          var dt = new Date();
          bias = dt.getTimezoneOffset();
          biasday = dt.stdTimezoneOffset();
          isDaylight = dt.isDstObserved();
      ABias.set(bias);
      ABiasDay.set(biasday);
      AIsDaylight.set(isDaylight);
    };
    this.OpenURL = function (AURL) {
      window.open(AURL, '_blank');
    };
    this.OpenFile = function (AFile, AControlReference) {
    };
    this.GetFonts = function (FontList) {
      FontList.BeginUpdate();
      FontList.Add("Arial");
      FontList.Add("Tahoma");
      FontList.Add("SimSun");
      FontList.Add("Arial Unicode MS");
      FontList.Add("Helvetica");
      FontList.Add("Times New Roman");
      FontList.Add("Times");
      FontList.Add("Courier New");
      FontList.Add("Courier");
      FontList.Add("Verdana");
      FontList.Add("Georgia");
      FontList.Add("Palatino");
      FontList.Add("Garamond");
      FontList.Add("Bookman");
      FontList.Add("Comic Sans MS");
      FontList.Add("Trebuchet MS");
      FontList.Add("Arial Black");
      FontList.Add("Impact");
      FontList.Sort();
      FontList.EndUpdate();
    };
    this.SetFontSize = function (AFont, ASize) {
      AFont.SetSize(Math.round((ASize / 96) * 72));
    };
    this.GetHInstance = function () {
      var Result = 0;
      Result = pas["WEBLib.TMSFNCTypes"].HInstance();
      return Result;
    };
    this.IsHTMLUnicode = function (AValue) {
      var Result = false;
      Result = this.IsHTML(AValue);
      return Result;
    };
    this.IsHTML = function (AValue) {
      var Result = false;
      Result = (pas.System.Pos("<\/",AValue) > 0) || (pas.System.Pos("\/>",AValue) > 0) || (pas.System.Pos("<BR>",pas.SysUtils.UpperCase(AValue)) > 0);
      return Result;
    };
    this.GetDocumentsPath = function () {
      var Result = "";
      return Result;
    };
    this.GetAppPath = function () {
      var Result = "";
      Result = "file:\/\/";
      return Result;
    };
    this.GetTempPath = function () {
      var Result = "";
      Result = "";
      return Result;
    };
    this.GetMousePos = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var p = pas.Types.TPoint.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(-1,-1));
      p.$assign(pas["WEBLib.Controls"].GetMousePos());
      Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(p.x,p.y));
      return Result;
    };
    this.IsHighDPIScale = function () {
      var Result = false;
      Result = this.GetDPIScale(null) > 1;
      return Result;
    };
    this.GetDPIScale = function (AOwner) {
      var Result = 0.0;
      Result = 1.0;
      return Result;
    };
    this.AddBackslash = function (AValue) {
      var Result = "";
      if ((AValue.length >= 1) && (AValue.charAt(AValue.length - 1) !== $mod.PthDel)) {
        Result = AValue + $mod.PthDel}
       else Result = AValue;
      return Result;
    };
    this.AddForwardslash = function (AValue) {
      var Result = "";
      if ((AValue.length >= 1) && (AValue.charAt(AValue.length - 1) !== "\/")) {
        Result = AValue + "\/"}
       else Result = AValue;
      return Result;
    };
    this.GetResourceStream = function (AResourceName) {
      var Result = null;
      Result = this.GetResourceStream$1(AResourceName,this.GetHInstance());
      return Result;
    };
    this.GetResourceStream$1 = function (AResourceName, AInstance) {
      var Result = null;
      Result = null;
      return Result;
    };
    this.Clone = function (AComponent) {
      var Result = null;
      throw pas.SysUtils.Exception.$create("Create$1",["Implement Clone"]);
      return Result;
    };
    this.HTMLStrip = function (AHTML) {
      var Result = "";
      var TagPos = 0;
      Result = "";
      while (pas.System.Pos("<BR>",pas.SysUtils.UpperCase(AHTML)) > 0) AHTML = pas.SysUtils.StringReplace(AHTML,"<BR>",String.fromCharCode(13) + String.fromCharCode(10),rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfIgnoreCase));
      while (pas.System.Pos("<HR>",pas.SysUtils.UpperCase(AHTML)) > 0) AHTML = pas.SysUtils.StringReplace(AHTML,"<HR>",String.fromCharCode(13) + String.fromCharCode(10),rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfIgnoreCase));
      TagPos = 0;
      while (this.VarPos("<",AHTML,{get: function () {
          return TagPos;
        }, set: function (v) {
          TagPos = v;
        }}) > 0) {
        Result = Result + pas.System.Copy(AHTML,1,TagPos - 1);
        if (this.VarPos(">",AHTML,{get: function () {
            return TagPos;
          }, set: function (v) {
            TagPos = v;
          }}) > 0) {
          pas.System.Delete({get: function () {
              return AHTML;
            }, set: function (v) {
              AHTML = v;
            }},1,TagPos)}
         else break;
      };
      Result = Result + AHTML;
      return Result;
    };
    this.VarPos = function (ASubValue, AValue, AResult) {
      var Result = 0;
      AResult.set(pas.System.Pos(ASubValue,AValue));
      Result = AResult.get();
      return Result;
    };
    this.VarPosNoCase = function (ASubValue, AValue, AResult) {
      var Result = 0;
      AResult.set(pas.System.Pos(pas.SysUtils.UpperCase(ASubValue),pas.SysUtils.UpperCase(AValue)));
      Result = AResult.get();
      return Result;
    };
    this.CharInStr = function (s, Index) {
      var Result = "";
      Result = "\x00";
      if ((Index > 0) && (Index <= s.length)) {
        Result = s.charAt(Index - 1);
      };
      return Result;
    };
    this.HexStrToBytes = function (AValue) {
      var Result = [];
      var il = 0;
      var idx = 0;
      var b = [];
      Result = [];
      b = rtl.arraySetLength(b,0,Math.floor(AValue.length / 2));
      il = 1;
      idx = 0;
      while (il <= AValue.length) {
        b[idx] = pas.SysUtils.StrToInt("$" + AValue.charAt(il - 1) + AValue.charAt((il + 1) - 1));
        il = il + 2;
        idx = idx + 1;
      };
      Result = b;
      return Result;
    };
    this.URLDecode = function (AURL) {
      var Result = "";
      Result = decodeURIComponent(AURL);
      return Result;
    };
    this.URLEncode = function (AURL) {
      var Result = "";
      Result = encodeURIComponent(AURL);
      return Result;
    };
    this.EnDeCrypt = function (AValue) {
      var Result = "";
      var r = "";
      var i = 0;
      var c = "";
      var b = 0;
      r = "";
      for (var $l1 = 1, $end2 = AValue.length; $l1 <= $end2; $l1++) {
        i = $l1;
        b = AValue.charCodeAt(i - 1);
        b = (b & 0xE0) + ((b & 0x1F) ^ 5);
        c = String.fromCharCode(b);
        r = r + c;
      };
      Result = r;
      return Result;
    };
    this.SaveBitmapToHexStr = function (ABitmap) {
      var Result = "";
      var ms = null;
      var s = "";
      var img = null;
      var ss = null;
      ms = pas["WEBLib.TMSFNCTypes"].TMemoryStream.$create("Create");
      try {
        s = "";
        if (!ABitmap.Empty()) {
          img = ABitmap.Image();
          var canvas = document.createElement("canvas");
          canvas.width = img.width;
          canvas.height = img.height;
          var ctx = canvas.getContext("2d");
          ctx.drawImage(img, 0, 0);
          var dataURL = canvas.toDataURL("image/png");
          s = dataURL;
          ss = pas["WEBLib.TMSFNCTypes"].TStringStream.$create("Create$1",[s]);
          try {
            s = this.SaveStreamToHexStr(ss);
          } finally {
            ss = rtl.freeLoc(ss);
          };
        };
        Result = s;
      } finally {
        ms = rtl.freeLoc(ms);
      };
      return Result;
    };
    this.SaveStreamToHexStr = function (AStream) {
      var Result = "";
      var s = "";
      var K = 0;
      var bt = [];
      s = "";
      AStream.FPosition = 0;
      for (var $l1 = 1, $end2 = AStream.FSize; $l1 <= $end2; $l1++) {
        K = $l1;
        bt = rtl.arraySetLength(bt,0,1);
        AStream.Read({get: function () {
            return bt;
          }, set: function (v) {
            bt = v;
          }},1);
        s = s + pas.SysUtils.IntToHex(bt[0],2);
      };
      Result = s;
      return Result;
    };
    this.CreateBitmapFromHexStr = function (AHexStr) {
      var Result = null;
      Result = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.LoadBitmapFromHexStr(AHexStr,Result);
      return Result;
    };
    this.MulDivInt = function (nNumber, nNumerator, nDenominator) {
      var $Self = this;
      var Result = 0;
      function MathRound(AValue) {
        var Result = 0;
        if (AValue >= 0) {
          Result = pas.System.Trunc(AValue + 0.5)}
         else Result = pas.System.Trunc(AValue - 0.5);
        return Result;
      };
      if (nDenominator === 0) {
        Result = -1}
       else Result = MathRound((nNumber * nNumerator) / nDenominator);
      return Result;
    };
    this.MulDivSingle = function (nNumber, nNumerator, nDenominator) {
      var Result = 0.0;
      Result = this.MulDivInt(Math.round(nNumber),Math.round(nNumerator),Math.round(nDenominator));
      return Result;
    };
    var Measure = ["Bytes","KB","MB","GB","TB"];
    this.FormatBytesAsString = function (ASize) {
      var Result = "";
      var NewSize = 0.0;
      var i = 0;
      Result = "";
      if (ASize > -1) {
        i = 0;
        NewSize = ASize;
        while (NewSize >= 1024) {
          NewSize = NewSize / 1024;
          i += 1;
        };
        var $tmp1 = i;
        if ($tmp1 === 0) {
          Result = pas.SysUtils.FloatToStr(NewSize)}
         else if (($tmp1 === 1) || ($tmp1 === 2) || ($tmp1 === 3) || ($tmp1 === 4)) {
          Result = pas.SysUtils.FormatFloat("0.00",NewSize)}
         else {
          Result = pas.SysUtils.FloatToStr(NewSize);
        };
        Result = Result + " " + Measure[i];
      };
      return Result;
    };
    this.GetImageType = function (AData) {
      var Result = "";
      throw pas.SysUtils.Exception.$create("Create$1",["Implement GetImageType"]);
      return Result;
    };
    this.LoadBitmapFromHexStr = function (AHexStr, ABitmap) {
      var sst = null;
      var sb = null;
      var bst = null;
      var M = 0;
      var bt = [];
      var hx = "";
      sst = pas["WEBLib.TMSFNCTypes"].TStringStream.$create("Create$1",[AHexStr]);
      bst = pas["WEBLib.TMSFNCTypes"].TBytesStream.$create("Create");
      try {
        for (var $l1 = 1, $end2 = Math.floor(sst.FSize / 2); $l1 <= $end2; $l1++) {
          M = $l1;
          bt = this.HexStrToBytes(sst.ReadString(2));
          bst.Write(bt,rtl.length(bt));
        };
        bst.FPosition = 0;
        hx = "";
        sb = pas["WEBLib.TMSFNCTypes"].TStringStream.$create("Create$1",[""]);
        try {
          sb.CopyFrom(bst,bst.FSize);
          hx = sb.GetDataString();
        } finally {
          sb = rtl.freeLoc(sb);
        };
        if (!(pas.System.Pos(";base64,",hx) > 0)) {
          ABitmap.LoadFromStream(bst);
        } else {
          ABitmap.LoadFromResource(hx);
        };
      } finally {
        sst = rtl.freeLoc(sst);
        bst = rtl.freeLoc(bst);
      };
    };
    this.LoadStreamFromHexStr = function (AHexStr, AStream) {
      var sst = null;
      var bst = null;
      var M = 0;
      var bt = [];
      sst = pas["WEBLib.TMSFNCTypes"].TStringStream.$create("Create$1",[AHexStr]);
      bst = pas["WEBLib.TMSFNCTypes"].TBytesStream.$create("Create");
      try {
        for (var $l1 = 1, $end2 = Math.floor(sst.FSize / 2); $l1 <= $end2; $l1++) {
          M = $l1;
          bt = this.HexStrToBytes(sst.ReadString(2));
          bst.Write(bt,rtl.length(bt));
        };
        bst.FPosition = 0;
        AStream.CopyFrom(bst,bst.FSize);
      } finally {
        sst = rtl.freeLoc(sst);
        bst = rtl.freeLoc(bst);
      };
    };
    this.ConvertBitmapToJPEGStream = function (ABitmap, AQuality, ABackgroundColor) {
      var Result = null;
      throw pas.SysUtils.Exception.$create("Create$1",["ConvertBitmapToJPEGStream"]);
      return Result;
    };
    this.Split = function (ADelimiter, AInput, AStrings, AClearEmptyStrings) {
      var C = 0;
      AStrings.Clear();
      AStrings.SetDelimiter(ADelimiter);
      AStrings.FStrictDelimiter = true;
      AStrings.SetDelimitedText(AInput);
      if (AClearEmptyStrings) {
        for (var $l1 = AStrings.GetCount() - 1; $l1 >= 0; $l1--) {
          C = $l1;
          if (AStrings.Get(C) === "") AStrings.Delete(C);
        };
      };
    };
    this.Log = function (AMessage) {
      var m = "";
      m = AMessage;
      console.log(m);
    };
    this.EpochToDateTime = function (AEpoch) {
      var Result = 0.0;
      var dw = 0;
      dw = pas.SysUtils.StrToInt(AEpoch);
      Result = pas.DateUtils.UnixToDateTime(dw);
      return Result;
    };
    this.PlayAudio = function (AAudioBase64) {
      var b64 = "";
      try {
        b64 = AAudioBase64;
        try {
          var snd = new Audio("data:audio/wav;base64," + b64);
          snd.play();
        } finally {
        };
      } finally {
      };
    };
    this.DateTimeToISO = function (ADateTime, AAddDelimiters, AAddMilliSeconds) {
      var $Self = this;
      var Result = "";
      var da = 0;
      var mo = 0;
      var ye = 0;
      var ho = 0;
      var mi = 0;
      var se = 0;
      var ms = 0;
      var dd = "";
      var td = "";
      var msec = "";
      function IntToZStr(i, l) {
        var Result = "";
        var Res = "";
        Res = pas.SysUtils.IntToStr(i);
        while (Res.length < l) Res = "0" + Res;
        Result = Res;
        return Result;
      };
      if (AAddDelimiters) {
        dd = "-";
        td = ":";
      };
      pas.SysUtils.DecodeDate(ADateTime,{get: function () {
          return ye;
        }, set: function (v) {
          ye = v;
        }},{get: function () {
          return mo;
        }, set: function (v) {
          mo = v;
        }},{get: function () {
          return da;
        }, set: function (v) {
          da = v;
        }});
      pas.SysUtils.DecodeTime(ADateTime,{get: function () {
          return ho;
        }, set: function (v) {
          ho = v;
        }},{get: function () {
          return mi;
        }, set: function (v) {
          mi = v;
        }},{get: function () {
          return se;
        }, set: function (v) {
          se = v;
        }},{get: function () {
          return ms;
        }, set: function (v) {
          ms = v;
        }});
      if (AAddMilliSeconds) msec = "." + IntToZStr(ms,3) + "Z";
      Result = IntToZStr(ye,4) + dd + IntToZStr(mo,2) + dd + IntToZStr(da,2) + "T" + IntToZStr(ho,2) + td + IntToZStr(mi,2) + td + IntToZStr(se,2) + msec;
      return Result;
    };
    this.ISOToDateTime = function (AISOString) {
      var Result = 0.0;
      var da = 0;
      var mo = 0;
      var ye = 0;
      var ho = 0;
      var mi = 0;
      var se = 0;
      var err = 0;
      var s = "";
      s = AISOString;
      pas.System.val$5(pas.System.Copy(s,1,4),{get: function () {
          return ye;
        }, set: function (v) {
          ye = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,6,2),{get: function () {
          return mo;
        }, set: function (v) {
          mo = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,9,2),{get: function () {
          return da;
        }, set: function (v) {
          da = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,12,2),{get: function () {
          return ho;
        }, set: function (v) {
          ho = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,15,2),{get: function () {
          return mi;
        }, set: function (v) {
          mi = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,18,2),{get: function () {
          return se;
        }, set: function (v) {
          se = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      if (ye < 1) ye = 1;
      if (mo < 1) mo = 1;
      if (da < 1) da = 1;
      Result = pas.SysUtils.EncodeDate(ye,mo,da) + pas.SysUtils.EncodeTime(ho,mi,se,0);
      return Result;
    };
    var STimePrefix = "T";
    this.ISOToDateTime$1 = function (AISOString, AIsUTC) {
      var $Self = this;
      var Result = 0.0;
      var TimeString = "";
      var DateString = "";
      var TimePosition = 0;
      var da = 0;
      var mo = 0;
      var ye = 0;
      var ho = 0;
      var mi = 0;
      var se = 0;
      var HourOffset = 0;
      var MinuteOffset = 0;
      var err = 0;
      var sign = "";
      var s = "";
      function AdjustDateTime(ADate, AHourOffset, AMinuteOffset) {
        var Result = 0.0;
        var AdjustDT = 0.0;
        var BiasLocal = 0;
        var BiasTime = 0;
        var BiasHour = 0;
        var BiasMins = 0;
        var BiasDT = 0.0;
        Result = ADate;
        if (AIsUTC) {
          if ((AHourOffset !== 0) || (AMinuteOffset !== 0)) {
            AdjustDT = pas.SysUtils.EncodeTime(Math.abs(AHourOffset),Math.abs(AMinuteOffset),0,0);
            if (((AHourOffset * 60) + AMinuteOffset) > 0) {
              Result = Result - AdjustDT}
             else Result = Result + AdjustDT;
          };
        } else {
          var dt = new Date();
          BiasLocal = dt.getTimezoneOffset();
          BiasTime = (AHourOffset * 60) + AMinuteOffset;
          if ((BiasLocal + BiasTime) === 0) return Result;
          BiasLocal = BiasLocal + BiasTime;
          BiasHour = Math.floor(Math.abs(BiasLocal) / 60);
          BiasMins = Math.abs(BiasLocal) % 60;
          BiasDT = pas.SysUtils.EncodeTime(BiasHour,BiasMins,0,0);
          if (BiasLocal > 0) {
            Result = Result - BiasDT}
           else Result = Result + BiasDT;
        };
        return Result;
      };
      s = AISOString;
      HourOffset = 0;
      MinuteOffset = 0;
      TimePosition = pas.System.Pos(STimePrefix,s);
      if (TimePosition >= 0) {
        DateString = pas.System.Copy(s,0,TimePosition);
        TimeString = pas.System.Copy(s,TimePosition + 1,s.length);
      };
      pas.System.val$5(pas.System.Copy(s,1,4),{get: function () {
          return ye;
        }, set: function (v) {
          ye = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,6,2),{get: function () {
          return mo;
        }, set: function (v) {
          mo = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,9,2),{get: function () {
          return da;
        }, set: function (v) {
          da = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,12,2),{get: function () {
          return ho;
        }, set: function (v) {
          ho = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,15,2),{get: function () {
          return mi;
        }, set: function (v) {
          mi = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,18,2),{get: function () {
          return se;
        }, set: function (v) {
          se = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      if (ye < 1) ye = 1;
      if (mo < 1) mo = 1;
      if (da < 1) da = 1;
      if (s.length > 20) {
        sign = pas.System.Copy(s,20,1);
        pas.System.val$6(pas.System.Copy(s,21,2),{get: function () {
            return HourOffset;
          }, set: function (v) {
            HourOffset = v;
          }},{get: function () {
            return err;
          }, set: function (v) {
            err = v;
          }});
        pas.System.val$6(pas.System.Copy(s,24,2),{get: function () {
            return MinuteOffset;
          }, set: function (v) {
            MinuteOffset = v;
          }},{get: function () {
            return err;
          }, set: function (v) {
            err = v;
          }});
        if (sign === "-") {
          HourOffset = HourOffset * -1;
          MinuteOffset = MinuteOffset * -1;
        };
      };
      Result = pas.SysUtils.EncodeDate(ye,mo,da) + pas.SysUtils.EncodeTime(ho,mi,se,0);
      Result = AdjustDateTime(Result,HourOffset,MinuteOffset);
      return Result;
    };
    this.ISOToDate = function (AISOString) {
      var Result = 0.0;
      var da = 0;
      var mo = 0;
      var ye = 0;
      var err = 0;
      var s = "";
      s = AISOString;
      pas.System.val$5(pas.System.Copy(s,1,4),{get: function () {
          return ye;
        }, set: function (v) {
          ye = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,6,2),{get: function () {
          return mo;
        }, set: function (v) {
          mo = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,9,2),{get: function () {
          return da;
        }, set: function (v) {
          da = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      if (ye < 1) ye = 1;
      if (mo < 1) mo = 1;
      if (da < 1) da = 1;
      Result = pas.SysUtils.EncodeDate(ye,mo,da) + pas.SysUtils.EncodeTime(0,0,0,0);
      return Result;
    };
    this.DateTimeToUTC = function (ADateTime) {
      var $Self = this;
      var Result = "";
      var da = 0;
      var mo = 0;
      var ye = 0;
      var ho = 0;
      var mi = 0;
      var se = 0;
      var ms = 0;
      var bias = 0;
      var biasday = 0;
      var isDayLight = false;
      function IntToZStr(i, l) {
        var Result = "";
        var Res = "";
        Res = pas.SysUtils.IntToStr(i);
        while (Res.length < l) Res = "0" + Res;
        Result = Res;
        return Result;
      };
      bias = 0;
      biasday = 0;
      isDayLight = false;
      $Self.GetTimeZoneInfo({get: function () {
          return bias;
        }, set: function (v) {
          bias = v;
        }},{get: function () {
          return biasday;
        }, set: function (v) {
          biasday = v;
        }},{get: function () {
          return isDayLight;
        }, set: function (v) {
          isDayLight = v;
        }});
      pas.SysUtils.DecodeDate(ADateTime,{get: function () {
          return ye;
        }, set: function (v) {
          ye = v;
        }},{get: function () {
          return mo;
        }, set: function (v) {
          mo = v;
        }},{get: function () {
          return da;
        }, set: function (v) {
          da = v;
        }});
      pas.SysUtils.DecodeTime(ADateTime,{get: function () {
          return ho;
        }, set: function (v) {
          ho = v;
        }},{get: function () {
          return mi;
        }, set: function (v) {
          mi = v;
        }},{get: function () {
          return se;
        }, set: function (v) {
          se = v;
        }},{get: function () {
          return ms;
        }, set: function (v) {
          ms = v;
        }});
      Result = pas.SysUtils.IntToStr(ye) + "-" + IntToZStr(mo,2) + "-" + IntToZStr(da,2) + "T" + IntToZStr(ho,2) + ":" + IntToZStr(mi,2) + ":" + IntToZStr(se,2);
      if (isDayLight) {
        if (bias <= 0) {
          Result = Result + "+" + IntToZStr(Math.floor((-bias - biasday) / 60),2) + ":00"}
         else Result = Result + "-" + IntToZStr(Math.floor((bias + biasday) / 60),2) + ":00";
      } else {
        if (bias !== 0) {
          if (bias <= 0) {
            Result = Result + "+" + IntToZStr(Math.floor(-bias / 60),2) + ":00"}
           else Result = Result + "-" + IntToZStr(Math.floor(bias / 60),2) + ":00";
        } else Result = Result + "+00:00";
      };
      return Result;
    };
    var UnixStartDate = 25569;
    this.DateTimeToMilliSeconds = function (ADateTime) {
      var Result = 0;
      var bias = 0;
      var biasday = 0;
      var isDayLight = false;
      bias = 0;
      biasday = 0;
      isDayLight = false;
      this.GetTimeZoneInfo({get: function () {
          return bias;
        }, set: function (v) {
          bias = v;
        }},{get: function () {
          return biasday;
        }, set: function (v) {
          biasday = v;
        }},{get: function () {
          return isDayLight;
        }, set: function (v) {
          isDayLight = v;
        }});
      if (isDayLight) {
        Result = pas.DateUtils.MilliSecondsBetween(pas.DateUtils.IncHour(ADateTime,Math.floor((bias + biasday) / 60)),UnixStartDate)}
       else Result = pas.DateUtils.MilliSecondsBetween(pas.DateUtils.IncHour(ADateTime,Math.floor(bias / 60)),UnixStartDate);
      return Result;
    };
    this.GetMimeType = function (AFile) {
      var Result = "";
      var e = "";
      e = pas.SysUtils.ExtractFileExt(AFile);
      e = pas.SysUtils.LowerCase(pas.SysUtils.Trim(e));
      if ((e !== "") && (e.charAt(0) === ".")) e = pas.System.Copy(e,2,e.length - 1);
      Result = "";
      if ($impl.FMimeTypes != null) Result = $impl.FMimeTypes.GetValue(e);
      if (Result === "") Result = "application\/octet-stream";
      return Result;
    };
    this.GetFileExtension = function (AMime) {
      var Result = "";
      var I = 0;
      var e = "";
      e = pas.SysUtils.LowerCase(AMime);
      Result = "";
      if ($impl.FMimeTypes != null) {
        for (var $l1 = 0, $end2 = $impl.FMimeTypes.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          if ($impl.FMimeTypes.GetValueFromIndex(I) === e) {
            Result = $impl.FMimeTypes.GetName(I);
            return Result;
          };
        };
      };
      return Result;
    };
    this.FileToBase64 = function (AFile) {
      var Result = "";
      var s = "";
      function uint8ToString(buf) {
        var i, length, out = '';
        for (i = 0, length = buf.length; i < length; i += 1) {
            out += String.fromCharCode(buf[i]);
        }
        return out;
      }
      s = btoa(uint8ToString(AFile.Data));
      Result = s;
      return Result;
    };
    this.LoadFile = function (AFile, ALoadFileComplete) {
      var f = null;
      var c = null;
      var ua = null;
      if (1 < 0) $mod.CreateUploadFile("file",ua);
      f = AFile;
      c = ALoadFileComplete;
      var reader = new FileReader();
      
          reader.onload = function(e) {
            var s = new Uint8Array(reader.result);
            var fn = pas["WEBLib.TMSFNCUtils"].CreateUploadFile(f.name, s);
            if (c){
              c(fn);
            }
          }
      
          reader.readAsArrayBuffer(f);
    };
    this.Decode64 = function (AValue, AURL) {
      var Result = "";
      var s = "";
      Result = "";
      if (AValue.length === 0) return Result;
      s = AValue;
      if (AURL) {
        s = s + pas.System.StringOfChar("=",s.length % 4);
        s = pas.SysUtils.StringReplace(s,"-","+",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
        s = pas.SysUtils.StringReplace(s,"_","\/",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      };
      function b64DecodeUnicode(str) {
        // Going backwards: from bytestream, to percent-encoding, to original string.
        return decodeURIComponent(atob(str).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
      }
      return b64DecodeUnicode(s);
      return Result;
    };
    this.Encode64 = function (AValue, AURL) {
      var Result = "";
      var s = "";
      var v = "";
      Result = "";
      if (AValue.length === 0) return Result;
      v = AValue;
      function b64EncodeUnicode(str) {
        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
            function toSolidBytes(match, p1) {
                return String.fromCharCode('0x' + p1);
        }));
      }
      s = b64EncodeUnicode(v);
      if (AURL) {
        s = pas.SysUtils.StringReplace(s,"+","-",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll,pas.SysUtils.TStringReplaceFlag.rfIgnoreCase));
        s = pas.SysUtils.StringReplace(s,"\/","_",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll,pas.SysUtils.TStringReplaceFlag.rfIgnoreCase));
        s = pas.SysUtils.StringReplace(s,"=","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll,pas.SysUtils.TStringReplaceFlag.rfIgnoreCase));
      };
      Result = s;
      return Result;
    };
    this.Encode64$1 = function (AValue, AURL) {
      var Result = "";
      var s = "";
      var v = [];
      Result = "";
      if (rtl.length(AValue) === 0) return Result;
      v = AValue;
      s = "";
      function _arrayBufferToBase64( buffer ) {
              var binary = '';
              var bytes = new Uint8Array( buffer );
              var len = bytes.byteLength;
              for (var i = 0; i < len; i++) {
                  binary += String.fromCharCode( bytes[ i ] );
              }
              return window.btoa( binary );
          }
      
          s = _arrayBufferToBase64(v);
      if (AURL) {
        s = pas.SysUtils.StringReplace(s,"+","-",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll,pas.SysUtils.TStringReplaceFlag.rfIgnoreCase));
        s = pas.SysUtils.StringReplace(s,"\/","_",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll,pas.SysUtils.TStringReplaceFlag.rfIgnoreCase));
        s = pas.SysUtils.StringReplace(s,"=","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll,pas.SysUtils.TStringReplaceFlag.rfIgnoreCase));
      };
      Result = s;
      return Result;
    };
    this.GetJSONProp = function (AJSONValue, APropertyName) {
      var Result = "";
      var v = null;
      Result = "";
      v = this.GetJSONValue(AJSONValue,APropertyName);
      if ((v != null) && !pas["WEBLib.JSON"].TJSONNull.isPrototypeOf(v)) Result = v.GetStrValue();
      return Result;
    };
    this.GetJSONValueAsString = function (AJSONValue) {
      var Result = "";
      Result = "";
      if (AJSONValue != null) {
        Result = AJSONValue.ToString();
      };
      return Result;
    };
    this.GetJSONValue = function (AJSONValue, APropertyName) {
      var Result = null;
      Result = null;
      try {
        if (pas["WEBLib.JSON"].TJSONObject.isPrototypeOf(AJSONValue)) {
          Result = rtl.as(AJSONValue,pas["WEBLib.JSON"].TJSONObject).GetValue(APropertyName);
        };
      } catch ($e) {
      };
      return Result;
    };
    this.GetJSONDoubleValue = function (AJSONValue, APropertyName) {
      var Result = 0.0;
      Result = this.GetJSONValueAsDouble(this.GetJSONValue(AJSONValue,APropertyName));
      return Result;
    };
    this.GetJSONValueAsDouble = function (AJSONValue) {
      var Result = 0.0;
      var v = null;
      Result = 0;
      v = AJSONValue;
      if ((v != null) && pas["WEBLib.JSON"].TJSONNumber.isPrototypeOf(v)) {
        Result = rtl.as(v,pas["WEBLib.JSON"].TJSONNumber).FDouble;
      };
      return Result;
    };
    this.GetJSONIntegerValue = function (AJSONValue, APropertyName) {
      var Result = 0;
      Result = this.GetJSONValueAsInteger(this.GetJSONValue(AJSONValue,APropertyName));
      return Result;
    };
    this.GetJSONValueAsInteger = function (AJSONValue) {
      var Result = 0;
      var v = null;
      Result = 0;
      v = AJSONValue;
      if ((v != null) && pas["WEBLib.JSON"].TJSONNumber.isPrototypeOf(v)) {
        Result = rtl.as(v,pas["WEBLib.JSON"].TJSONNumber).FInt;
      };
      return Result;
    };
    this.IsJSONTrue = function (AJSONValue) {
      var Result = false;
      Result = false;
      if (AJSONValue != null) Result = AJSONValue.GetStrValue() === "true";
      return Result;
    };
    this.IsJSONFalse = function (AJSONValue) {
      var Result = false;
      Result = false;
      if (AJSONValue != null) Result = AJSONValue.GetStrValue() === "false";
      return Result;
    };
    this.GetJSONArraySize = function (AJSONArray) {
      var Result = 0;
      Result = AJSONArray.GetCount$1();
      return Result;
    };
    this.GetJSONArrayItem = function (AJSONArray, AIndex) {
      var Result = null;
      Result = null;
      if ((AIndex >= 0) && (AIndex <= (this.GetJSONArraySize(AJSONArray) - 1))) Result = AJSONArray.GetItem$1(AIndex);
      return Result;
    };
    this.GetJSONObjectSize = function (AJSONObject) {
      var Result = 0;
      Result = AJSONObject.GetCount();
      return Result;
    };
    this.GetJSONObjectItem = function (AJSONObject, AIndex) {
      var Result = null;
      Result = null;
      if ((AIndex >= 0) && (AIndex <= (this.GetJSONObjectSize(AJSONObject) - 1))) {
        Result = AJSONObject.GetItem(AIndex);
      };
      return Result;
    };
    this.GetJSONObjectName = function (AJSONObject, AIndex) {
      var Result = "";
      var p = null;
      Result = "";
      if ((AIndex >= 0) && (AIndex <= (this.GetJSONObjectSize(AJSONObject) - 1))) {
        p = AJSONObject.Get$1(AIndex);
        if (p != null) Result = p.fjs.GetStrValue();
      };
      return Result;
    };
    this.ParseJSON = function (AJSON) {
      var Result = null;
      Result = pas["WEBLib.JSON"].TJSONObject.ParseJSONValue(AJSON);
      return Result;
    };
    this.Decode64ToBytes = function (AValue, AURL) {
      var Result = [];
      var s = "";
      var ss = null;
      Result = [];
      if (AValue.length === 0) return Result;
      s = AValue;
      if (AURL) {
        s = s + pas.System.StringOfChar("=",s.length % 4);
        s = pas.SysUtils.StringReplace(s,"-","+",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
        s = pas.SysUtils.StringReplace(s,"_","\/",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      };
      function b64DecodeUnicode(str) {
        // Going backwards: from bytestream, to percent-encoding, to original string.
        return decodeURIComponent(atob(str).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
      }
      s = b64DecodeUnicode(s);
      ss = pas["WEBLib.TMSFNCTypes"].TStringStream.$create("Create$1",[""]);
      try {
        ss.WriteString(s);
        Result = ss.FBytes;
      } finally {
        ss = rtl.freeLoc(ss);
      };
      return Result;
    };
    this.MatchStrEx = function (AValue1, AValue2, ACaseSensitive) {
      var Result = false;
      var ch = "";
      var lastop = "";
      var sep = 0;
      var cp = 0;
      var res = false;
      var newres = false;
      var CharArray = [];
      AValue1 = pas.SysUtils.Trim(AValue1);
      AValue1 = this.StripLogicSpaces(AValue1);
      sep = -1;
      if ($mod.TTMSFNCUtils.VarPos("=",AValue1,{get: function () {
          return sep;
        }, set: function (v) {
          sep = v;
        }}) === 1) pas.System.Delete({get: function () {
          return AValue1;
        }, set: function (v) {
          AValue1 = v;
        }},sep,1);
      lastop = "\x00";
      res = true;
      CharArray = rtl.arraySetLength(CharArray,"",5);
      CharArray[0] = "(";
      CharArray[1] = ";";
      CharArray[2] = "^";
      CharArray[3] = "&";
      CharArray[4] = "|";
      if (AValue1 === "") {
        Result = AValue2 === "";
        return Result;
      };
      if ((AValue1 !== "*") && (AValue2 === "")) {
        Result = false;
        return Result;
      };
      do {
        ch = this.FirstChar(CharArray,AValue1,{get: function () {
            return sep;
          }, set: function (v) {
            sep = v;
          }});
        if (ch !== "\x00") {
          if ((AValue1.length > 0) && (AValue1.charAt(0) === "(") && (pas.System.Pos("(",AValue1) > 0)) {
            cp = this.ClosingParenthesis(AValue1);
            newres = this.MatchStrEx(pas.System.Copy(AValue1,2,cp - 2),AValue2,ACaseSensitive);
            pas.System.Delete({get: function () {
                return AValue1;
              }, set: function (v) {
                AValue1 = v;
              }},1,cp);
          } else {
            newres = this.MatchStr(pas.System.Copy(AValue1,1,sep - 1),AValue2,ACaseSensitive);
            pas.System.Delete({get: function () {
                return AValue1;
              }, set: function (v) {
                AValue1 = v;
              }},1,sep);
          };
          if (lastop === "\x00") {
            res = newres}
           else {
            var $tmp1 = lastop;
            if (($tmp1 === ";") || ($tmp1 === "^") || ($tmp1 === "|")) {
              res = res || newres}
             else if ($tmp1 === "&") res = res && newres;
          };
          lastop = ch;
        };
      } while (!(ch === "\x00"));
      newres = this.MatchStr(AValue1,AValue2,ACaseSensitive);
      if (lastop === "\x00") {
        res = newres}
       else {
        var $tmp2 = lastop;
        if (($tmp2 === ";") || ($tmp2 === "^") || ($tmp2 === "|")) {
          res = res || newres}
         else if ($tmp2 === "&") res = res && newres;
      };
      Result = res;
      return Result;
    };
    this.MatchStr = function (AValue1, AValue2, ACaseSensitive) {
      var Result = false;
      if (ACaseSensitive) {
        Result = this.Matches(AValue1,AValue2)}
       else Result = this.Matches(pas["WEBLib.TMSFNCTypes"].AnsiUpperCase(AValue1),pas["WEBLib.TMSFNCTypes"].AnsiUpperCase(AValue2));
      return Result;
    };
    this.StripLogicSpaces = function (AValue) {
      var Result = "";
      var i = 0;
      var k = 0;
      var q = 0;
      q = 0;
      i = 1;
      k = AValue.length;
      Result = "";
      while (i <= k) {
        if (AValue.charAt(i - 1) === '"') q += 1;
        if (AValue.charAt(i - 1) === " ") {
          if (pas.System.Odd(q)) Result = Result + AValue.charAt(i - 1);
        } else Result = Result + AValue.charAt(i - 1);
        i += 1;
      };
      return Result;
    };
    this.FirstChar = function (ACharset, AValue, spos) {
      var Result = "";
      var i = 0;
      var q = 0;
      var j = 0;
      j = 0;
      i = 1;
      q = 0;
      spos.set(-1);
      Result = "\x00";
      while (i <= AValue.length) {
        if (AValue.charAt(i - j - 1) === '"') q += 1;
        if (this.CharInSet(AValue.charAt(i - j - 1),ACharset) && !pas.System.Odd(q)) {
          spos.set(i);
          Result = AValue.charAt(i - j - 1);
          break;
        };
        i += 1;
      };
      return Result;
    };
    this.CharInSet = function (ch, ACharSet) {
      var Result = false;
      var j = 0;
      Result = false;
      for (var $l1 = 0, $end2 = rtl.length(ACharSet) - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        if (ch === ACharSet[j]) {
          Result = true;
          break;
        };
      };
      return Result;
    };
    this.AddCharSet = function (ACharSet1, ACharSet2) {
      var Result = [];
      var l = 0;
      var j = 0;
      l = rtl.length(ACharSet1) + rtl.length(ACharSet2);
      Result = rtl.arraySetLength(Result,"",l);
      l = 0;
      for (var $l1 = 0, $end2 = rtl.length(ACharSet1) - 1; $l1 <= $end2; $l1++) {
        j = $l1;
        Result[l] = ACharSet1[j];
        l += 1;
      };
      for (var $l3 = 0, $end4 = rtl.length(ACharSet2) - 1; $l3 <= $end4; $l3++) {
        j = $l3;
        Result[l] = ACharSet2[j];
        l += 1;
      };
      return Result;
    };
    this.SubCharSet = function (ACharSet1, ACharSet2) {
      var Result = [];
      var i = 0;
      var j = 0;
      var l = 0;
      var found = false;
      l = 0;
      Result = rtl.arraySetLength(Result,"",l);
      for (var $l1 = 0, $end2 = rtl.length(ACharSet1) - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        found = false;
        for (var $l3 = 0, $end4 = rtl.length(ACharSet2) - 1; $l3 <= $end4; $l3++) {
          j = $l3;
          if (ACharSet1[i] === ACharSet2[j]) {
            found = true;
            break;
          };
        };
        if (!found) {
          l += 1;
          Result = rtl.arraySetLength(Result,"",l);
          Result[l - 1] = ACharSet1[i];
        };
      };
      return Result;
    };
    this.AlphaCharSet = function () {
      var Result = [];
      var i = 0;
      var ch = "";
      Result = rtl.arraySetLength(Result,"",52);
      i = 0;
      for (var $l1 = 97; $l1 <= 122; $l1++) {
        ch = String.fromCharCode($l1);
        Result[i] = ch;
        i += 1;
      };
      for (var $l2 = 65; $l2 <= 90; $l2++) {
        ch = String.fromCharCode($l2);
        Result[i] = ch;
        i += 1;
      };
      return Result;
    };
    this.NumericCharSet = function () {
      var Result = [];
      var ch = "";
      var i = 0;
      Result = rtl.arraySetLength(Result,"",10);
      i = 0;
      for (var $l1 = 48; $l1 <= 57; $l1++) {
        ch = String.fromCharCode($l1);
        Result[i] = ch;
        i += 1;
      };
      return Result;
    };
    this.CreateCharSet = function (AValue) {
      var Result = [];
      var i = 0;
      Result = rtl.arraySetLength(Result,"",AValue.length);
      for (var $l1 = 1, $end2 = AValue.length; $l1 <= $end2; $l1++) {
        i = $l1;
        Result[i - 1] = this.CharInStr(AValue,i);
      };
      return Result;
    };
    this.IsDate = function (AValue, ADate) {
      var Result = false;
      var su = "";
      var ts = "";
      var da = 0;
      var mo = 0;
      var ye = 0;
      var ho = 0;
      var mi = 0;
      var se = 0;
      var err = 0;
      var dp = 0;
      var mp = 0;
      var yp = 0;
      var vp = 0;
      Result = false;
      ts = "";
      su = pas.SysUtils.UpperCase(pas.SysUtils.ShortDateFormat);
      dp = pas.System.Pos("D",su);
      mp = pas.System.Pos("M",su);
      yp = pas.System.Pos("Y",su);
      da = 0;
      mo = 0;
      ye = 0;
      ho = 0;
      mi = 0;
      se = 0;
      vp = -1;
      if ($mod.TTMSFNCUtils.VarPos(pas.SysUtils.DateSeparator,AValue,{get: function () {
          return vp;
        }, set: function (v) {
          vp = v;
        }}) > 0) {
        su = pas.System.Copy(AValue,1,vp - 1);
        if ((dp < mp) && (dp < yp)) {
          pas.System.val$5(su,{get: function () {
              return da;
            }, set: function (v) {
              da = v;
            }},{get: function () {
              return err;
            }, set: function (v) {
              err = v;
            }})}
         else if ((mp < dp) && (mp < yp)) {
          pas.System.val$5(su,{get: function () {
              return mo;
            }, set: function (v) {
              mo = v;
            }},{get: function () {
              return err;
            }, set: function (v) {
              err = v;
            }})}
         else if ((yp < mp) && (yp < dp)) pas.System.val$5(su,{get: function () {
            return ye;
          }, set: function (v) {
            ye = v;
          }},{get: function () {
            return err;
          }, set: function (v) {
            err = v;
          }});
        if (err !== 0) return Result;
        pas.System.Delete({get: function () {
            return AValue;
          }, set: function (v) {
            AValue = v;
          }},1,vp);
        if ($mod.TTMSFNCUtils.VarPos(pas.SysUtils.DateSeparator,AValue,{get: function () {
            return vp;
          }, set: function (v) {
            vp = v;
          }}) > 0) {
          su = pas.System.Copy(AValue,1,vp - 1);
          if (((dp > mp) && (dp < yp)) || ((dp > yp) && (dp < mp))) {
            pas.System.val$5(su,{get: function () {
                return da;
              }, set: function (v) {
                da = v;
              }},{get: function () {
                return err;
              }, set: function (v) {
                err = v;
              }})}
           else if (((mp > dp) && (mp < yp)) || ((mp > yp) && (mp < dp))) {
            pas.System.val$5(su,{get: function () {
                return mo;
              }, set: function (v) {
                mo = v;
              }},{get: function () {
                return err;
              }, set: function (v) {
                err = v;
              }})}
           else if (((yp > mp) && (yp < dp)) || ((yp > dp) && (yp < mp))) pas.System.val$5(su,{get: function () {
              return ye;
            }, set: function (v) {
              ye = v;
            }},{get: function () {
              return err;
            }, set: function (v) {
              err = v;
            }});
          if (err !== 0) return Result;
          pas.System.Delete({get: function () {
              return AValue;
            }, set: function (v) {
              AValue = v;
            }},1,vp);
          AValue = pas.SysUtils.Trim(AValue);
          if ($mod.TTMSFNCUtils.VarPos(" ",AValue,{get: function () {
              return vp;
            }, set: function (v) {
              vp = v;
            }}) > 0) {
            ts = pas.System.Copy(AValue,vp,AValue.length);
            AValue = pas.System.Copy(AValue,1,vp - 1);
          };
          if ((dp > mp) && (dp > yp)) {
            pas.System.val$5(AValue,{get: function () {
                return da;
              }, set: function (v) {
                da = v;
              }},{get: function () {
                return err;
              }, set: function (v) {
                err = v;
              }})}
           else if ((mp > dp) && (mp > yp)) {
            pas.System.val$5(AValue,{get: function () {
                return mo;
              }, set: function (v) {
                mo = v;
              }},{get: function () {
                return err;
              }, set: function (v) {
                err = v;
              }})}
           else if ((yp > mp) && (yp > dp)) pas.System.val$5(AValue,{get: function () {
              return ye;
            }, set: function (v) {
              ye = v;
            }},{get: function () {
              return err;
            }, set: function (v) {
              err = v;
            }});
          if (err !== 0) return Result;
          if (da > 31) return Result;
          if (mo > 12) return Result;
          if (ts !== "") {
            if ($mod.TTMSFNCUtils.VarPos(pas.SysUtils.TimeSeparator,ts,{get: function () {
                return vp;
              }, set: function (v) {
                vp = v;
              }}) > 0) {
              su = pas.System.Copy(ts,1,vp - 1);
              pas.System.val$5(su,{get: function () {
                  return ho;
                }, set: function (v) {
                  ho = v;
                }},{get: function () {
                  return err;
                }, set: function (v) {
                  err = v;
                }});
              if (err !== 0) return Result;
              if (ho > 23) return Result;
              pas.System.Delete({get: function () {
                  return ts;
                }, set: function (v) {
                  ts = v;
                }},1,vp);
              if ($mod.TTMSFNCUtils.VarPos(pas.SysUtils.TimeSeparator,ts,{get: function () {
                  return vp;
                }, set: function (v) {
                  vp = v;
                }}) > 0) {
                su = pas.System.Copy(ts,1,vp - 1);
                pas.System.val$5(su,{get: function () {
                    return mi;
                  }, set: function (v) {
                    mi = v;
                  }},{get: function () {
                    return err;
                  }, set: function (v) {
                    err = v;
                  }});
                if (err !== 0) return Result;
                pas.System.Delete({get: function () {
                    return ts;
                  }, set: function (v) {
                    ts = v;
                  }},1,vp);
                pas.System.val$5(ts,{get: function () {
                    return se;
                  }, set: function (v) {
                    se = v;
                  }},{get: function () {
                    return err;
                  }, set: function (v) {
                    err = v;
                  }});
                if (err !== 0) return Result;
                if (se > 60) return Result;
              } else {
                pas.System.val$5(su,{get: function () {
                    return mi;
                  }, set: function (v) {
                    mi = v;
                  }},{get: function () {
                    return err;
                  }, set: function (v) {
                    err = v;
                  }});
                if (err !== 0) return Result;
              };
              if (mi > 59) return Result;
              Result = true;
            };
          } else Result = true;
          try {
            ADate.set(pas.SysUtils.EncodeDate(ye,mo,da) + pas.SysUtils.EncodeTime(ho,mi,se,0));
          } catch ($e) {
            Result = false;
          };
        };
      };
      return Result;
    };
    this.IPos = function (su, s) {
      var Result = 0;
      Result = pas.System.Pos(pas.SysUtils.UpperCase(su),pas.SysUtils.UpperCase(s));
      return Result;
    };
    this.UnFixMarkup = function (su, SpecialChars) {
      var Result = "";
      var i = 0;
      while (pas.System.Pos("&lt;",su) > 0) {
        this.TagReplaceString("&lt;","<",{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      while (pas.System.Pos("&gt;",su) > 0) {
        this.TagReplaceString("&gt;",">",{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      while (pas.System.Pos("&amp;",su) > 0) {
        this.TagReplaceString("&amp;","&",{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      while (pas.System.Pos("&quot;",su) > 0) {
        this.TagReplaceString("&quot;",'"',{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      if (SpecialChars) {
        for (i = 4; i <= 86; i++) {
          while (pas.System.Pos($impl.HTMLSpecialChar[i - 1],su) > 0) {
            this.TagReplaceString($impl.HTMLSpecialChar[i - 1],$impl.HTMLEncodedChar[i - 1],{get: function () {
                return su;
              }, set: function (v) {
                su = v;
              }});
          };
        };
      };
      Result = su;
      return Result;
    };
    this.FixMarkup = function (su, SpecialChars) {
      var Result = "";
      var i = 0;
      var res = "";
      var ch = "";
      while (pas.System.Pos("&",su) > 0) {
        this.TagReplaceString("&","*amp;",{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      while (pas.System.Pos("*amp;",su) > 0) {
        this.TagReplaceString("*amp;","&amp;",{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      while (pas.System.Pos('"',su) > 0) {
        this.TagReplaceString('"',"&quot;",{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      while (pas.System.Pos("<",su) > 0) {
        this.TagReplaceString("<","&lt;",{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      while (pas.System.Pos(">",su) > 0) {
        this.TagReplaceString(">","&gt;",{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }});
      };
      if (SpecialChars) {
        for (i = 4; i <= 86; i++) {
          while (pas.System.Pos($impl.HTMLEncodedChar[i - 1],su) > 0) {
            this.TagReplaceString($impl.HTMLEncodedChar[i - 1],$impl.HTMLSpecialChar[i - 1],{get: function () {
                return su;
              }, set: function (v) {
                su = v;
              }});
          };
        };
        res = "";
        for (var $l1 = 1, $end2 = su.length; $l1 <= $end2; $l1++) {
          i = $l1;
          ch = this.CharInStr(su,i);
          if (ch.charCodeAt() > 256) {
            res = res + "&#" + pas.SysUtils.IntToStr(ch.charCodeAt()) + ";"}
           else res = res + ch;
        };
        su = res;
      };
      Result = su;
      return Result;
    };
    this.TagReplaceString = function (Srch, Repl, Dest) {
      var Result = false;
      var i = 0;
      i = this.IPos(Srch,Dest.get());
      if (i > 0) {
        Result = true;
        pas.System.Delete(Dest,i,Srch.length);
        Dest.set(pas.System.Copy(Dest.get(),1,i - 1) + Repl + pas.System.Copy(Dest.get(),i,Dest.get().length));
      } else Result = false;
      return Result;
    };
    var larger = ">";
    var smaller = "<";
    var logand = "&";
    var logor = "^";
    var asterix = "*";
    var qmark = "?";
    var negation = "!";
    this.Matches = function (s0a, s1a) {
      var Result = false;
      var matching = false;
      var done = false;
      var len = 0;
      var lastchar = "";
      var s0 = 0;
      var s1 = 0;
      var s2 = 0;
      var s3 = 0;
      var oksmaller = false;
      var oklarger = false;
      var negflag = false;
      var compstr = "";
      var flag1 = false;
      var flag2 = false;
      var flag3 = false;
      var equal = false;
      var n1 = 0.0;
      var n2 = 0.0;
      var code1 = 0;
      var code2 = 0;
      var dt1 = 0.0;
      var dt2 = 0.0;
      var q = 0;
      var i = 0;
      i = 0;
      oksmaller = true;
      oklarger = true;
      flag1 = false;
      flag2 = false;
      flag3 = false;
      negflag = false;
      equal = false;
      s2 = pas.System.Pos(larger,s0a);
      if (s2 !== 0) {
        s2 += 1;
        if (s0a.charAt(s2 - i - 1) === "=") {
          equal = true;
          s2 += 1;
        };
        while (s0a.charAt(s2 - i - 1) === " ") s2 += 1;
        s3 = s2;
        len = 0;
        lastchar = "\x00";
        q = 0;
        while ((s0a.charAt(s2 - i - 1) !== " ") && (s2 <= s0a.length) && (pas.System.Odd(q) || ((s0a.charAt(s2 - i - 1) !== "&") && (s0a.charAt(s2 - i - 1) !== "|")))) {
          if (s0a.charAt(s2 - i - 1) === '"') q += 1;
          if ((len === 0) && (s0a.charAt(s2 - i - 1) === '"')) {
            s3 += 1}
           else len += 1;
          lastchar = s0a.charAt(s2 - i - 1);
          s2 += 1;
          if ((s0a.charAt(s2 - i - 1) === " ") && pas.System.Odd(q)) {
            lastchar = s0a.charAt(s2 - i - 1);
            s2 += 1;
          };
        };
        if ((len > 0) && (lastchar === '"')) len -= 1;
        compstr = pas.System.Copy(s0a,s3,len);
        pas.System.val$8($mod.TTMSFNCUtils.StripThousandSep(s1a),{get: function () {
            return n1;
          }, set: function (v) {
            n1 = v;
          }},{get: function () {
            return code1;
          }, set: function (v) {
            code1 = v;
          }});
        pas.System.val$8($mod.TTMSFNCUtils.StripThousandSep(compstr),{get: function () {
            return n2;
          }, set: function (v) {
            n2 = v;
          }},{get: function () {
            return code2;
          }, set: function (v) {
            code2 = v;
          }});
        dt2 = 0;
        if ($mod.TTMSFNCUtils.IsDate(compstr,{get: function () {
            return dt2;
          }, set: function (v) {
            dt2 = v;
          }})) code2 = 1;
        dt1 = 0;
        if ($mod.TTMSFNCUtils.IsDate(s1a,{get: function () {
            return dt1;
          }, set: function (v) {
            dt1 = v;
          }})) code1 = 1;
        if ((code1 === 0) && (code2 === 0)) {
          if (equal) {
            oklarger = n1 >= n2}
           else oklarger = n1 > n2;
        } else {
          if ($mod.TTMSFNCUtils.IsDate(compstr,{get: function () {
              return dt2;
            }, set: function (v) {
              dt2 = v;
            }}) && $mod.TTMSFNCUtils.IsDate(s1a,{get: function () {
              return dt1;
            }, set: function (v) {
              dt1 = v;
            }})) {
            if (equal) {
              oklarger = dt1 >= dt2}
             else oklarger = dt1 > dt2;
          } else {
            if (equal) {
              oklarger = pas.SysUtils.CompareStr(compstr,s1a) <= 0}
             else oklarger = pas.SysUtils.CompareStr(compstr,s1a) < 0;
          };
        };
        flag1 = true;
      };
      equal = false;
      s2 = pas.System.Pos(smaller,s0a);
      if (s2 !== 0) {
        s2 += 1;
        if (s0a.charAt(s2 - i - 1) === "=") {
          equal = true;
          s2 += 1;
        };
        lastchar = "\x00";
        while (s0a.charAt(s2 - i - 1) === " ") s2 += 1;
        s3 = s2;
        len = 0;
        q = 0;
        while ((s0a.charAt(s2 - i - 1) !== " ") && (s2 <= s0a.length) && (pas.System.Odd(q) || ((s0a.charAt(s2 - i - 1) !== "&") && (s0a.charAt(s2 - i - 1) !== "|")))) {
          if (s0a.charAt(s2 - i - 1) === '"') q += 1;
          if ((len === 0) && (s0a.charAt(s2 - i - 1) === '"')) {
            s3 += 1}
           else len += 1;
          lastchar = s0a.charAt(s2 - i - 1);
          s2 += 1;
        };
        if ((len > 0) && (lastchar === '"')) len -= 1;
        compstr = pas.System.Copy(s0a,s3,len);
        pas.System.val$8($mod.TTMSFNCUtils.StripThousandSep(s1a),{get: function () {
            return n1;
          }, set: function (v) {
            n1 = v;
          }},{get: function () {
            return code1;
          }, set: function (v) {
            code1 = v;
          }});
        pas.System.val$8($mod.TTMSFNCUtils.StripThousandSep(compstr),{get: function () {
            return n2;
          }, set: function (v) {
            n2 = v;
          }},{get: function () {
            return code2;
          }, set: function (v) {
            code2 = v;
          }});
        if ($mod.TTMSFNCUtils.IsDate(compstr,{get: function () {
            return dt2;
          }, set: function (v) {
            dt2 = v;
          }})) code2 = 1;
        if ($mod.TTMSFNCUtils.IsDate(s1a,{get: function () {
            return dt1;
          }, set: function (v) {
            dt1 = v;
          }})) code1 = 1;
        if ((code1 === 0) && (code2 === 0)) {
          if (equal) {
            oksmaller = n1 <= n2}
           else oksmaller = n1 < n2;
        } else {
          if ($mod.TTMSFNCUtils.IsDate(compstr,{get: function () {
              return dt2;
            }, set: function (v) {
              dt2 = v;
            }}) && $mod.TTMSFNCUtils.IsDate(s1a,{get: function () {
              return dt1;
            }, set: function (v) {
              dt1 = v;
            }})) {
            if (equal) {
              oksmaller = dt1 <= dt2}
             else oksmaller = dt1 < dt2;
          } else {
            if (equal) {
              oksmaller = pas.SysUtils.CompareStr(compstr,s1a) >= 0}
             else oksmaller = pas.SysUtils.CompareStr(compstr,s1a) > 0;
          };
        };
        flag2 = true;
      };
      s2 = pas.System.Pos(negation,s0a);
      if (s2 !== 0) {
        s2 += 1;
        while (s0a.charAt(s2 - i - 1) === " ") s2 += 1;
        s3 = s2;
        len = 0;
        lastchar = "\x00";
        q = 0;
        while ((s0a.charAt(s2 - i - 1) !== " ") && (s2 <= s0a.length) && (pas.System.Odd(q) || ((s0a.charAt(s2 - i - 1) !== "&") && (s0a.charAt(s2 - i - 1) !== "|")))) {
          if (s0a.charAt(s2 - i - 1) === '"') q += 1;
          if ((len === 0) && (s0a.charAt(s2 - i - 1) === '"')) {
            s3 += 1}
           else len += 1;
          lastchar = s0a.charAt(s2 - i - 1);
          s2 += 1;
        };
        if ((len > 0) && (lastchar === '"')) len -= 1;
        compstr = pas.System.Copy(s0a,s3,len);
        flag3 = true;
      };
      if (flag3) {
        if (pas.System.Pos(larger,s0a) === 0) flag1 = flag3;
        if (pas.System.Pos(smaller,s0a) === 0) flag2 = flag3;
      };
      if (pas.System.Pos(logor,s0a) !== 0) if (flag1 || flag2) {
        Result = oksmaller || oklarger;
        return Result;
      };
      if (pas.System.Pos(logand,s0a) !== 0) if (flag1 && flag2) {
        Result = oksmaller && oklarger;
        return Result;
      };
      if (((pas.System.Pos(larger,s0a) !== 0) && oklarger) || ((pas.System.Pos(smaller,s0a) !== 0) && oksmaller)) {
        Result = true;
        return Result;
      };
      s0 = 1;
      s1 = 1;
      done = (s0a === "") || (s1a === "");
      matching = true;
      while (!done && matching) {
        var $tmp1 = s0a.charAt(s0 - i - 1);
        if ($tmp1 === qmark) {
          matching = s1 <= s1a.length;
          if (matching) {
            s0 += 1;
            s1 += 1;
          };
        } else if ($tmp1 === negation) {
          negflag = true;
          s0 += 1;
        } else if ($tmp1 === '"') {
          s0 += 1;
        } else if ($tmp1 === asterix) {
          do {
            s0 += 1;
          } while (!(s0a.charAt(s0 - i - 1) !== asterix));
          len = s1a.length - s1;
          s1 += len;
          matching = this.Matches(pas.System.Copy(s0a,s0,s0a.length),pas.System.Copy(s1a,s1,s1a.length));
          while ((len >= 0) && !matching) {
            s1 -= 1;
            len -= 1;
            matching = this.Matches(pas.System.Copy(s0a,s0,s0a.length),pas.System.Copy(s1a,s1,s1a.length));
          };
          if (matching) {
            s0 = s0a.length + 1;
            s1 = s1a.length + 1;
          };
        } else {
          if ((s0 <= s0a.length) && (s1 <= s1a.length)) {
            matching = s0a.charAt(s0 - i - 1) === s1a.charAt(s1 - i - 1)}
           else matching = false;
          if (matching) {
            s0 += 1;
            s1 += 1;
          };
        };
        done = (s0 > s0a.length) && (s1 > s1a.length);
      };
      if (negflag) {
        Result = !matching}
       else Result = matching;
      return Result;
    };
    this.StripThousandSep = function (ps) {
      var Result = "";
      while (pas.System.Pos(pas.SysUtils.ThousandSeparator,ps) > 0) pas.System.Delete({get: function () {
          return ps;
        }, set: function (v) {
          ps = v;
        }},pas.System.Pos(pas.SysUtils.ThousandSeparator,ps),1);
      Result = ps;
      return Result;
    };
    this.ClosingParenthesis = function (s1) {
      var Result = 0;
      var i = 0;
      var j = 0;
      var k = 0;
      var r = 0;
      r = 0;
      j = 0;
      k = 0;
      i = 1;
      while (i <= s1.length) {
        if (s1.charAt(i - 1) === ")") k += 1;
        if (s1.charAt(i - 1) === "(") j += 1;
        if ((s1.charAt(i - 1) === ")") && (j === k)) {
          r = i;
          break;
        };
        i += 1;
      };
      Result = r;
      return Result;
    };
    this.GetMarkupIndex = function (Markup) {
      var Result = 0;
      Result = this.IndexOfTextInArray(Markup,$impl.HTMLSpecialChar);
      return Result;
    };
    this.GetSpecialChar = function (Value) {
      var Result = "";
      Result = $impl.HTMLEncodedChar[Value - 1];
      return Result;
    };
    this.IndexOfTextInArray = function (AText, AValues) {
      var Result = 0;
      var I = 0;
      Result = -1;
      for (var $l1 = 0, $end2 = rtl.length(AValues) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (pas.SysUtils.SameText(AText,AValues[I])) {
          if ((pas.System.Pos("cute",AText) > 0) || (pas.System.Pos("grave",AText) > 0) || (pas.System.Pos("uml",AText) > 0) || (pas.System.Pos("circ",AText) > 0) || (pas.System.Pos("tilde",AText) > 0)) {
            if (AText === AValues[I]) {
              Result = I;
              break;
            };
          } else {
            Result = I;
            break;
          };
        };
      };
      return Result;
    };
    this.GetParentForm = function (AControl) {
      var Result = null;
      var c = null;
      Result = null;
      c = AControl;
      if (!(c != null)) return Result;
      if (pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(c.FParent)) {
        Result = rtl.as(c.FParent,pas["WEBLib.Forms"].TCustomForm)}
       else Result = this.GetParentForm(c.FParent);
      return Result;
    };
    this.GetOwnerForm = function (AComponent) {
      var Result = null;
      var c = null;
      Result = null;
      c = AComponent;
      if (!(c != null)) return Result;
      if (pas["WEBLib.Forms"].TCustomForm.isPrototypeOf(c.FOwner)) {
        Result = rtl.as(c.FOwner,pas["WEBLib.Forms"].TCustomForm)}
       else Result = this.GetOwnerForm(c.FOwner);
      return Result;
    };
    this.Message = function (AMessage) {
      var Result = 0;
      Result = $mod.TTMSFNCUtils.Message$1(AMessage,pas["WEBLib.Dialogs"].TMsgDlgType.mtInformation,rtl.createSet(pas["WEBLib.Dialogs"].TMsgDlgBtn.mbOK),0);
      return Result;
    };
    this.Message$1 = function (AMessage, ADialogType, AButtons, AHelpContext) {
      var Result = 0;
      if (((pas["WEBLib.Dialogs"].TMsgDlgBtn.mbOK in AButtons) && (pas["WEBLib.Dialogs"].TMsgDlgBtn.mbCancel in AButtons)) || ((pas["WEBLib.Dialogs"].TMsgDlgBtn.mbYes in AButtons) && (pas["WEBLib.Dialogs"].TMsgDlgBtn.mbNo in AButtons))) {
        if (window.confirm(AMessage))
        {
          return 1
        }
        else
        {
          return 2
        };
      } else {
        window.alert(AMessage);
        return 1;
      };
      return Result;
    };
    this.SelectFile = function (AFileName, ADefaultFolder, AFilter, ACallBack) {
      var Result = false;
      Result = true;
      if (ACallBack != null) ACallBack(AFileName.get(),Result);
      return Result;
    };
    this.SaveFile = function (AFileName, AFilter, ACallBack) {
      var Result = false;
      Result = true;
      return Result;
    };
    this.EscapeString = function (AValue) {
      var $Self = this;
      var Result = "";
      var res = "";
      var ch = "";
      var i = 0;
      function EscapeSpecialChar(ch, s) {
        var Result = false;
        var i = 0;
        Result = false;
        s.set("");
        for (i = 1; i <= 7; i++) {
          if (ch === $impl.JSONSpecialChar[i - 1]) {
            s.set($impl.JSONEncodedSpecialChar[i - 1]);
            Result = true;
            break;
          };
        };
        return Result;
      };
      Result = "";
      for (var $l1 = 1, $end2 = AValue.length; $l1 <= $end2; $l1++) {
        i = $l1;
        ch = $Self.CharInStr(AValue,i);
        if (ch > "") {
          Result = Result + "\\u" + pas.SysUtils.IntToHex(ch.charCodeAt(),4)}
         else {
          res = "";
          if (EscapeSpecialChar(ch,{get: function () {
              return res;
            }, set: function (v) {
              res = v;
            }})) {
            Result = Result + res}
           else Result = Result + ch;
        };
      };
      return Result;
    };
    this.UnescapeString = function (AValue) {
      var Result = "";
      var i = 0;
      var j = 0;
      var c = 0;
      var o = 0;
      var s = "";
      var x = 0;
      s = rtl.strSetLength(s,AValue.length);
      o = 0;
      i = 1;
      j = 1;
      while (i <= AValue.length) {
        if (AValue.charAt(i - o - 1) === "\\") {
          if (i < AValue.length) {
            if (AValue.charAt((i + 1) - o - 1) === "\\") {
              x = j - o;
              s = rtl.setCharAt(s,x - 1,"\\");
              i += 2;
            } else if ((AValue.charAt((i + 1) - o - 1) === "u") && ((i + 1 + 4) <= AValue.length) && pas.SysUtils.TryStrToInt("$" + pas.System.Copy(AValue,i + 2,4),{get: function () {
                return c;
              }, set: function (v) {
                c = v;
              }})) {
              i += 6;
              x = j - o;
              s = rtl.setCharAt(s,x - 1,String.fromCharCode(c));
            } else throw pas.SysUtils.Exception.$create("CreateFmt",["Invalid code at position %s",[pas.SysUtils.IntToStr(i)]]);
          } else throw pas.SysUtils.Exception.$create("Create$1",["Unexpected end of string"]);
        } else {
          x = j - o;
          s = rtl.setCharAt(s,x - 1,AValue.charAt(i - o - 1));
          i += 1;
        };
        j += 1;
      };
      s = rtl.strSetLength(s,j - 1);
      Result = s;
      return Result;
    };
    this.DownloadImage = function (AURL) {
      var Result = null;
      return Result;
    };
  });
  this.TTMSFNCClipBoardFormat = {"0": "cfText", cfText: 0, "1": "cfRTF", cfRTF: 1, "2": "cfHTML", cfHTML: 2, "3": "cfBitmap", cfBitmap: 3, "4": "cfBitmapWin", cfBitmapWin: 4, "5": "cfStream", cfStream: 5, "6": "cfRichTextStream", cfRichTextStream: 6};
  $mod.$rtti.$Enum("TTMSFNCClipBoardFormat",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TTMSFNCClipBoardFormat});
  rtl.createClass($mod,"TTMSFNCClipBoard",pas.System.TObject,function () {
    this.FClipboardData = "";
    this.HasFormat = function (AFormat) {
      var Result = false;
      Result = true;
      return Result;
    };
    this.HasContent = function () {
      var Result = false;
      Result = this.HasFormat($mod.TTMSFNCClipBoardFormat.cfText) || this.HasFormat($mod.TTMSFNCClipBoardFormat.cfRTF) || this.HasFormat($mod.TTMSFNCClipBoardFormat.cfBitmap) || this.HasFormat($mod.TTMSFNCClipBoardFormat.cfBitmapWin) || this.HasFormat($mod.TTMSFNCClipBoardFormat.cfRichTextStream) || this.HasFormat($mod.TTMSFNCClipBoardFormat.cfStream);
      return Result;
    };
    this.Clear = function () {
    };
    this.SetText = function (AText) {
      $mod.TTMSFNCClipBoard.FClipboardData = AText;
      const element = document.createElement('textarea');
      element.value = AText;
      document.body.appendChild(element);
      element.focus();
      element.setSelectionRange(0, element.value.length);
      document.execCommand('copy');
      document.body.removeChild(element);
    };
    this.GetText = function () {
      var Result = "";
      Result = this.FClipboardData;
      return Result;
    };
    this.SetStream = function (AStream) {
      throw pas.SysUtils.Exception.$create("Create$1",["SetStream not supported"]);
    };
    this.GetStream = function () {
      var Result = null;
      throw pas.SysUtils.Exception.$create("Create$1",["GetStream not supported"]);
      return Result;
    };
    this.SetBitmap = function (ABitmap) {
      throw pas.SysUtils.Exception.$create("Create$1",["SetBitmap not supported"]);
    };
    this.GetBitmap = function () {
      var Result = null;
      throw pas.SysUtils.Exception.$create("Create$1",["GetBitmap not supported"]);
      return Result;
    };
    this.SetRichTextStream = function (AStream) {
      throw pas.SysUtils.Exception.$create("Create$1",["SetRichTextStream not supported"]);
    };
    this.GetRichTextStream = function () {
      var Result = null;
      throw pas.SysUtils.Exception.$create("Create$1",["GetRichTextStream not supported"]);
      return Result;
    };
    this.SetRTF = function (ARTF) {
      throw pas.SysUtils.Exception.$create("Create$1",["SetRTF not supported"]);
    };
    this.GetRTF = function () {
      var Result = "";
      throw pas.SysUtils.Exception.$create("Create$1",["GetRTF not supported"]);
      return Result;
    };
    this.SetHTML = function (AHTML) {
      throw pas.SysUtils.Exception.$create("Create$1",["SetHTML not supported"]);
    };
    this.GetHTML = function () {
      var Result = "";
      throw pas.SysUtils.Exception.$create("Create$1",["GetHTML not supported"]);
      return Result;
    };
  });
  this.Hiword = function (L) {
    var Result = 0;
    Result = rtl.lw(L >>> 16);
    return Result;
  };
  this.LoWord = function (L) {
    var Result = 0;
    Result = L & 0xFFFF;
    return Result;
  };
  this.MakeWord = function (b1, b2) {
    var Result = 0;
    Result = b1 | (b2 << 8);
    return Result;
  };
  this.MakeLong = function (i1, i2) {
    var Result = 0;
    Result = i1 | (i2 << 16);
    return Result;
  };
  this.CreateUploadFile = function (AName, AData) {
    var Result = $mod.TTMSFNCUtilsFile.$new();
    Result.Data = AData;
    Result.Name = AName;
    return Result;
  };
  this.ExtractFileNameEx = function (AFile) {
    var Result = "";
    Result = AFile.Name;
    return Result;
  };
  this.GetMimeTypeEx = function (AFile) {
    var Result = "";
    Result = $mod.TTMSFNCUtils.GetMimeType(AFile.Name);
    return Result;
  };
  this.CF_FNCSTREAM = 0;
  this.CF_FNCRICHTEXTSTREAM = 0;
  this.CF_FNCRTF = 0;
  this.CF_FNCBITMAP = 0;
  this.CF_FNCHTML = 0;
  $mod.$init = function () {
    $impl.FMimeTypes = pas.Classes.TStringList.$create("Create$1");
    $impl.RegisterMimeTypes();
  };
},["DateUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.HTMLNumSpecialChar = 86;
  $impl.JSONNumSpecialChar = 7;
  $impl.HTMLEncodedChar = ["&","<",">",'"'," ","é","è","ë","ê","ó","ò","ö","ô","í","ì","ï","î","ú","ù","ü","û","á","à","ä","â","É","È","Ë","Ê","Ó","Ò","Ö","Ô","Í","Ì","Ï","Î","Ú","Ù","Ü","Û","Á","À","Ä","Â","ç","Ç","ø","Ø","å","Å","©","®","€","«","»","ã","Ã","õ","Õ","™","§","¶","ß","£","$","§","‰","¶","'","¥","¤","¢","±","¡","°","ý","Ý","¼","½","¾","Æ","æ","Ñ","ñ","Ð"];
  $impl.HTMLSpecialChar = ["amp;","lt;","gt;","quot;","&nbsp;","&eacute;","&egrave;","&euml;","&ecirc;","&oacute;","&ograve;","&ouml;","&ocirc;","&iacute;","&igrave;","&iuml;","&icirc;","&uacute;","&ugrave;","&uuml;","&ucirc;","&aacute;","&agrave;","&auml;","&acirc;","&Eacute;","&Egrave;","&Euml;","&Ecirc;","&Oacute;","&Ograve;","&Ouml;","&Ocirc;","&Iacute;","&Igrave;","&Iuml;","&Icirc;","&Uacute;","&Ugrave;","&Uuml;","&Ucirc;","&Aacute;","&Agrave;","&Auml;","&Acirc;","&ccedil;","&Ccedil;","&oslash;","&Oslash;","&aring;","&Aring;","&copy;","&reg;","&euro;","&laquo;","&raquo;","&atilde;","&Atilde;","&otilde;","&Otilde","&trade;","&sect;","&para;","&szlig;","&pound;","&#36;","&sect;","&permil;","&para;","&#39;","&yen;","&curren;","&cent;","&plusmn;","&iexcl;","&deg;","&#x00FD;","&#221;","&frac14;","&frac12;","&frac34;","&AElig;","&aelig;","&Ntilde;","&ntilde;","&ETH;"];
  $impl.JSONSpecialChar = ['"',"\\","\b","\f","\n","\r","\t"];
  $impl.JSONEncodedSpecialChar = ["\\u0022","\\u005C","\\u0008","\\u000C","\\u000A","\\u000D","\\u0009"];
  $impl.FMimeTypes = null;
  $impl.RegisterMimeTypes = function () {
    function AddType(AExt, AMimeType) {
      $impl.FMimeTypes.Add(AExt + $impl.FMimeTypes.GetNameValueSeparator() + AMimeType);
    };
    AddType("ez","application\/andrew-inset");
    AddType("aw","application\/applixware");
    AddType("atom","application\/atom+xml");
    AddType("atomcat","application\/atomcat+xml");
    AddType("atomsvc","application\/atomsvc+xml");
    AddType("bson","application\/bson");
    AddType("ccxml","application\/ccxml+xml");
    AddType("cdmia","application\/cdmi-capability");
    AddType("cdmic","application\/cdmi-container");
    AddType("cdmid","application\/cdmi-domain");
    AddType("cdmio","application\/cdmi-object");
    AddType("cdmiq","application\/cdmi-queue");
    AddType("cu","application\/cu-seeme");
    AddType("davmount","application\/davmount+xml");
    AddType("dbk","application\/docbook+xml");
    AddType("dssc","application\/dssc+der");
    AddType("xdssc","application\/dssc+xml");
    AddType("ecma","application\/ecmascript");
    AddType("emma","application\/emma+xml");
    AddType("epub","application\/epub+zip");
    AddType("exi","application\/exi");
    AddType("pfr","application\/font-tdpfr");
    AddType("gml","application\/gml+xml");
    AddType("gpx","application\/gpx+xml");
    AddType("gxf","application\/gxf");
    AddType("stk","application\/hyperstudio");
    AddType("ink","application\/inkml+xml");
    AddType("inkml","application\/inkml+xml");
    AddType("ipfix","application\/ipfix");
    AddType("jar","application\/java-archive");
    AddType("ser","application\/java-serialized-object");
    AddType("class","application\/java-vm");
    AddType("js","application\/javascript");
    AddType("json","application\/json");
    AddType("jsonml","application\/jsonml+json");
    AddType("lostxml","application\/lost+xml");
    AddType("hqx","application\/mac-binhex40");
    AddType("cpt","application\/mac-compactpro");
    AddType("mads","application\/mads+xml");
    AddType("mrc","application\/marc");
    AddType("mrcx","application\/marcxml+xml");
    AddType("ma","application\/mathematica");
    AddType("nb","application\/mathematica");
    AddType("mb","application\/mathematica");
    AddType("mathml","application\/mathml+xml");
    AddType("mbox","application\/mbox");
    AddType("mscml","application\/mediaservercontrol+xml");
    AddType("metalink","application\/metalink+xml");
    AddType("meta4","application\/metalink4+xml");
    AddType("mets","application\/mets+xml");
    AddType("mods","application\/mods+xml");
    AddType("m21","application\/mp21");
    AddType("mp21","application\/mp21");
    AddType("mp4s","application\/mp4");
    AddType("doc","application\/msword");
    AddType("dot","application\/msword");
    AddType("mxf","application\/mxf");
    AddType("bin","application\/octet-stream");
    AddType("bpk","application\/octet-stream");
    AddType("class","application\/octet-stream");
    AddType("deploy","application\/octet-stream");
    AddType("dist","application\/octet-stream");
    AddType("distz","application\/octet-stream");
    AddType("dmg","application\/octet-stream");
    AddType("dms","application\/octet-stream");
    AddType("dump","application\/octet-stream");
    AddType("elc","application\/octet-stream");
    AddType("iso","application\/octet-stream");
    AddType("lha","application\/octet-stream");
    AddType("lrf","application\/octet-stream");
    AddType("lzh","application\/octet-stream");
    AddType("mar","application\/octet-stream");
    AddType("pkg","application\/octet-stream");
    AddType("so","application\/octet-stream");
    AddType("oda","application\/oda");
    AddType("opf","application\/oebps-package+xml");
    AddType("ogx","application\/ogg");
    AddType("omdoc","application\/omdoc+xml");
    AddType("onetoc","application\/onenote");
    AddType("onetoc2","application\/onenote");
    AddType("onetmp","application\/onenote");
    AddType("onepkg","application\/onenote");
    AddType("oxps","application\/oxps");
    AddType("xer","application\/patch-ops-error+xml");
    AddType("pdf","application\/pdf");
    AddType("pgp","application\/pgp-encrypted");
    AddType("asc","application\/pgp-signature");
    AddType("sig","application\/pgp-signature");
    AddType("prf","application\/pics-rules");
    AddType("p10","application\/pkcs10");
    AddType("p7m","application\/pkcs7-mime");
    AddType("p7c","application\/pkcs7-mime");
    AddType("p7s","application\/pkcs7-signature");
    AddType("p8","application\/pkcs8");
    AddType("ac","application\/pkix-attr-cert");
    AddType("cer","application\/pkix-cert");
    AddType("crl","application\/pkix-crl");
    AddType("pkipath","application\/pkix-pkipath");
    AddType("pki","application\/pkixcmp");
    AddType("pls","application\/pls+xml");
    AddType("ai","application\/postscript");
    AddType("eps","application\/postscript");
    AddType("ps","application\/postscript");
    AddType("cww","application\/prs.cww");
    AddType("pskcxml","application\/pskc+xml");
    AddType("rdf","application\/rdf+xml");
    AddType("rif","application\/reginfo+xml");
    AddType("rnc","application\/relax-ng-compact-syntax");
    AddType("rl","application\/resource-lists+xml");
    AddType("rld","application\/resource-lists-diff+xml");
    AddType("rs","application\/rls-services+xml");
    AddType("gbr","application\/rpki-ghostbusters");
    AddType("mft","application\/rpki-manifest");
    AddType("roa","application\/rpki-roa");
    AddType("rsd","application\/rsd+xml");
    AddType("rss","application\/rss+xml");
    AddType("rtf","application\/rtf");
    AddType("sbml","application\/sbml+xml");
    AddType("scq","application\/scvp-cv-request");
    AddType("scs","application\/scvp-cv-response");
    AddType("spq","application\/scvp-vp-request");
    AddType("spp","application\/scvp-vp-response");
    AddType("sdp","application\/sdp");
    AddType("setpay","application\/set-payment-initiation");
    AddType("setreg","application\/set-registration-initiation");
    AddType("shf","application\/shf+xml");
    AddType("smi","application\/smil+xml");
    AddType("smil","application\/smil+xml");
    AddType("soap","application\/soap+xml");
    AddType("rq","application\/sparql-query");
    AddType("srx","application\/sparql-results+xml");
    AddType("gram","application\/srgs");
    AddType("grxml","application\/srgs+xml");
    AddType("sru","application\/sru+xml");
    AddType("ssdl","application\/ssdl+xml");
    AddType("ssml","application\/ssml+xml");
    AddType("tei","application\/tei+xml");
    AddType("teicorpus","application\/tei+xml");
    AddType("tfi","application\/thraud+xml");
    AddType("tsd","application\/timestamped-data");
    AddType("plb","application\/vnd.3gpp.pic-bw-large");
    AddType("psb","application\/vnd.3gpp.pic-bw-small");
    AddType("pvb","application\/vnd.3gpp.pic-bw-var");
    AddType("tcap","application\/vnd.3gpp2.tcap");
    AddType("pwn","application\/vnd.3m.post-it-notes");
    AddType("aso","application\/vnd.accpac.simply.aso");
    AddType("imp","application\/vnd.accpac.simply.imp");
    AddType("acu","application\/vnd.acucobol");
    AddType("atc","application\/vnd.acucorp");
    AddType("acutc","application\/vnd.acucorp");
    AddType("air","application\/vnd.adobe.air-application-installer-package+zip");
    AddType("fcdt","application\/vnd.adobe.formscentral.fcdt");
    AddType("fxp","application\/vnd.adobe.fxp");
    AddType("fxpl","application\/vnd.adobe.fxp");
    AddType("xdp","application\/vnd.adobe.xdp+xml");
    AddType("xfdf","application\/vnd.adobe.xfdf");
    AddType("ahead","application\/vnd.ahead.space");
    AddType("azf","application\/vnd.airzip.filesecure.azf");
    AddType("azs","application\/vnd.airzip.filesecure.azs");
    AddType("azw","application\/vnd.amazon.ebook");
    AddType("acc","application\/vnd.americandynamics.acc");
    AddType("ami","application\/vnd.amiga.ami");
    AddType("apk","application\/vnd.android.package-archive");
    AddType("cii","application\/vnd.anser-web-certificate-issue-initiation");
    AddType("fti","application\/vnd.anser-web-funds-transfer-initiation");
    AddType("atx","application\/vnd.antix.game-component");
    AddType("mpkg","application\/vnd.apple.installer+xml");
    AddType("m3u8","application\/vnd.apple.mpegurl");
    AddType("swi","application\/vnd.aristanetworks.swi");
    AddType("iota","application\/vnd.astraea-software.iota");
    AddType("aep","application\/vnd.audiograph");
    AddType("mpm","application\/vnd.blueice.multipass");
    AddType("bmi","application\/vnd.bmi");
    AddType("rep","application\/vnd.businessobjects");
    AddType("cdxml","application\/vnd.chemdraw+xml");
    AddType("mmd","application\/vnd.chipnuts.karaoke-mmd");
    AddType("cdy","application\/vnd.cinderella");
    AddType("cla","application\/vnd.claymore");
    AddType("rp9","application\/vnd.cloanto.rp9");
    AddType("c4g","application\/vnd.clonk.c4group");
    AddType("c4d","application\/vnd.clonk.c4group");
    AddType("c4f","application\/vnd.clonk.c4group");
    AddType("c4p","application\/vnd.clonk.c4group");
    AddType("c4u","application\/vnd.clonk.c4group");
    AddType("c11amc","application\/vnd.cluetrust.cartomobile-config");
    AddType("c11amz","application\/vnd.cluetrust.cartomobile-config-pkg");
    AddType("csp","application\/vnd.commonspace");
    AddType("cdbcmsg","application\/vnd.contact.cmsg");
    AddType("cmc","application\/vnd.cosmocaller");
    AddType("clkx","application\/vnd.crick.clicker");
    AddType("clkk","application\/vnd.crick.clicker.keyboard");
    AddType("clkp","application\/vnd.crick.clicker.palette");
    AddType("clkt","application\/vnd.crick.clicker.template");
    AddType("clkw","application\/vnd.crick.clicker.wordbank");
    AddType("wbs","application\/vnd.criticaltools.wbs+xml");
    AddType("pml","application\/vnd.ctc-posml");
    AddType("ppd","application\/vnd.cups-ppd");
    AddType("car","application\/vnd.curl.car");
    AddType("pcurl","application\/vnd.curl.pcurl");
    AddType("dart","application\/vnd.dart");
    AddType("rdz","application\/vnd.data-vision.rdz");
    AddType("uvf","application\/vnd.dece.data");
    AddType("uvvf","application\/vnd.dece.data");
    AddType("uvd","application\/vnd.dece.data");
    AddType("uvvd","application\/vnd.dece.data");
    AddType("uvt","application\/vnd.dece.ttml+xml");
    AddType("uvvt","application\/vnd.dece.ttml+xml");
    AddType("uvx","application\/vnd.dece.unspecified");
    AddType("uvvx","application\/vnd.dece.unspecified");
    AddType("uvz","application\/vnd.dece.zip");
    AddType("uvvz","application\/vnd.dece.zip");
    AddType("fe_launch","application\/vnd.denovo.fcselayout-link");
    AddType("dna","application\/vnd.dna");
    AddType("mlp","application\/vnd.dolby.mlp");
    AddType("dpg","application\/vnd.dpgraph");
    AddType("dfac","application\/vnd.dreamfactory");
    AddType("kpxx","application\/vnd.ds-keypoint");
    AddType("ait","application\/vnd.dvb.ait");
    AddType("svc","application\/vnd.dvb.service");
    AddType("geo","application\/vnd.dynageo");
    AddType("mag","application\/vnd.ecowin.chart");
    AddType("nml","application\/vnd.enliven");
    AddType("esf","application\/vnd.epson.esf");
    AddType("msf","application\/vnd.epson.msf");
    AddType("qam","application\/vnd.epson.quickanime");
    AddType("slt","application\/vnd.epson.salt");
    AddType("ssf","application\/vnd.epson.ssf");
    AddType("es3","application\/vnd.eszigno3+xml");
    AddType("et3","application\/vnd.eszigno3+xml");
    AddType("ez2","application\/vnd.ezpix-album");
    AddType("ez3","application\/vnd.ezpix-package");
    AddType("fdf","application\/vnd.fdf");
    AddType("mseed","application\/vnd.fdsn.mseed");
    AddType("seed","application\/vnd.fdsn.seed");
    AddType("dataless","application\/vnd.fdsn.seed");
    AddType("json","application\/vnd.firedac.json");
    AddType("xml","application\/vnd.firedac.xml");
    AddType("bin","application\/vnd.firedac.bin");
    AddType("gph","application\/vnd.flographit");
    AddType("ftc","application\/vnd.fluxtime.clip");
    AddType("fm","application\/vnd.framemaker");
    AddType("frame","application\/vnd.framemaker");
    AddType("maker","application\/vnd.framemaker");
    AddType("book","application\/vnd.framemaker");
    AddType("fnc","application\/vnd.frogans.fnc");
    AddType("ltf","application\/vnd.frogans.ltf");
    AddType("fsc","application\/vnd.fsc.weblaunch");
    AddType("oas","application\/vnd.fujitsu.oasys");
    AddType("oa2","application\/vnd.fujitsu.oasys2");
    AddType("oa3","application\/vnd.fujitsu.oasys3");
    AddType("fg5","application\/vnd.fujitsu.oasysgp");
    AddType("bh2","application\/vnd.fujitsu.oasysprs");
    AddType("ddd","application\/vnd.fujixerox.ddd");
    AddType("xdw","application\/vnd.fujixerox.docuworks");
    AddType("xbd","application\/vnd.fujixerox.docuworks.binder");
    AddType("fzs","application\/vnd.fuzzysheet");
    AddType("txd","application\/vnd.genomatix.tuxedo");
    AddType("ggb","application\/vnd.geogebra.file");
    AddType("ggt","application\/vnd.geogebra.tool");
    AddType("gex","application\/vnd.geometry-explorer");
    AddType("gre","application\/vnd.geometry-explorer");
    AddType("gxt","application\/vnd.geonext");
    AddType("g2w","application\/vnd.geoplan");
    AddType("g3w","application\/vnd.geospace");
    AddType("gmx","application\/vnd.gmx");
    AddType("kml","application\/vnd.google-earth.kml+xml");
    AddType("kmz","application\/vnd.google-earth.kmz");
    AddType("gqf","application\/vnd.grafeq");
    AddType("gqs","application\/vnd.grafeq");
    AddType("gac","application\/vnd.groove-account");
    AddType("ghf","application\/vnd.groove-help");
    AddType("gim","application\/vnd.groove-identity-message");
    AddType("grv","application\/vnd.groove-injector");
    AddType("gtm","application\/vnd.groove-tool-message");
    AddType("tpl","application\/vnd.groove-tool-template");
    AddType("vcg","application\/vnd.groove-vcard");
    AddType("hal","application\/vnd.hal+xml");
    AddType("zmm","application\/vnd.handheld-entertainment+xml");
    AddType("hbci","application\/vnd.hbci");
    AddType("les","application\/vnd.hhe.lesson-player");
    AddType("hpgl","application\/vnd.hp-hpgl");
    AddType("hpid","application\/vnd.hp-hpid");
    AddType("hps","application\/vnd.hp-hps");
    AddType("jlt","application\/vnd.hp-jlyt");
    AddType("pcl","application\/vnd.hp-pcl");
    AddType("pclxl","application\/vnd.hp-pclxl");
    AddType("sfd-hdstx","application\/vnd.hydrostatix.sof-data");
    AddType("mpy","application\/vnd.ibm.minipay");
    AddType("afp","application\/vnd.ibm.modcap");
    AddType("listafp","application\/vnd.ibm.modcap");
    AddType("list3820","application\/vnd.ibm.modcap");
    AddType("irm","application\/vnd.ibm.rights-management");
    AddType("sc","application\/vnd.ibm.secure-container");
    AddType("icc","application\/vnd.iccprofile");
    AddType("icm","application\/vnd.iccprofile");
    AddType("igl","application\/vnd.igloader");
    AddType("ivp","application\/vnd.immervision-ivp");
    AddType("ivu","application\/vnd.immervision-ivu");
    AddType("igm","application\/vnd.insors.igm");
    AddType("xpw","application\/vnd.intercon.formnet");
    AddType("xpx","application\/vnd.intercon.formnet");
    AddType("i2g","application\/vnd.intergeo");
    AddType("qbo","application\/vnd.intu.qbo");
    AddType("qfx","application\/vnd.intu.qfx");
    AddType("rcprofile","application\/vnd.ipunplugged.rcprofile");
    AddType("irp","application\/vnd.irepository.package+xml");
    AddType("xpr","application\/vnd.is-xpr");
    AddType("fcs","application\/vnd.isac.fcs");
    AddType("jam","application\/vnd.jam");
    AddType("rms","application\/vnd.jcp.javame.midlet-rms");
    AddType("jisp","application\/vnd.jisp");
    AddType("joda","application\/vnd.joost.joda-archive");
    AddType("ktz","application\/vnd.kahootz");
    AddType("ktr","application\/vnd.kahootz");
    AddType("karbon","application\/vnd.kde.karbon");
    AddType("chrt","application\/vnd.kde.kchart");
    AddType("kfo","application\/vnd.kde.kformula");
    AddType("flw","application\/vnd.kde.kivio");
    AddType("kon","application\/vnd.kde.kontour");
    AddType("kpr","application\/vnd.kde.kpresenter");
    AddType("kpt","application\/vnd.kde.kpresenter");
    AddType("ksp","application\/vnd.kde.kspread");
    AddType("kwd","application\/vnd.kde.kword");
    AddType("kwt","application\/vnd.kde.kword");
    AddType("htke","application\/vnd.kenameaapp");
    AddType("kia","application\/vnd.kidspiration");
    AddType("kne","application\/vnd.kinar");
    AddType("knp","application\/vnd.kinar");
    AddType("skp","application\/vnd.koan");
    AddType("skd","application\/vnd.koan");
    AddType("skt","application\/vnd.koan");
    AddType("skm","application\/vnd.koan");
    AddType("sse","application\/vnd.kodak-descriptor");
    AddType("lasxml","application\/vnd.las.las+xml");
    AddType("lbd","application\/vnd.llamagraphics.life-balance.desktop");
    AddType("lbe","application\/vnd.llamagraphics.life-balance.exchange+xml");
    AddType("123","application\/vnd.lotus-1-2-3");
    AddType("apr","application\/vnd.lotus-approach");
    AddType("pre","application\/vnd.lotus-freelance");
    AddType("nsf","application\/vnd.lotus-notes");
    AddType("org","application\/vnd.lotus-organizer");
    AddType("scm","application\/vnd.lotus-screencam");
    AddType("lwp","application\/vnd.lotus-wordpro");
    AddType("portpkg","application\/vnd.macports.portpkg");
    AddType("mcd","application\/vnd.mcd");
    AddType("mc1","application\/vnd.medcalcdata");
    AddType("cdkey","application\/vnd.mediastation.cdkey");
    AddType("mwf","application\/vnd.mfer");
    AddType("mfm","application\/vnd.mfmp");
    AddType("flo","application\/vnd.micrografx.flo");
    AddType("igx","application\/vnd.micrografx.igx");
    AddType("mif","application\/vnd.mif");
    AddType("daf","application\/vnd.mobius.daf");
    AddType("dis","application\/vnd.mobius.dis");
    AddType("mbk","application\/vnd.mobius.mbk");
    AddType("mqy","application\/vnd.mobius.mqy");
    AddType("msl","application\/vnd.mobius.msl");
    AddType("plc","application\/vnd.mobius.plc");
    AddType("txf","application\/vnd.mobius.txf");
    AddType("mpn","application\/vnd.mophun.application");
    AddType("mpc","application\/vnd.mophun.certificate");
    AddType("xul","application\/vnd.mozilla.xul+xml");
    AddType("cil","application\/vnd.ms-artgalry");
    AddType("cab","application\/vnd.ms-cab-compressed");
    AddType("xls","application\/vnd.ms-excel");
    AddType("xlm","application\/vnd.ms-excel");
    AddType("xla","application\/vnd.ms-excel");
    AddType("xlc","application\/vnd.ms-excel");
    AddType("xlt","application\/vnd.ms-excel");
    AddType("xlw","application\/vnd.ms-excel");
    AddType("xlam","application\/vnd.ms-excel.addin.macroenabled.12");
    AddType("xlsb","application\/vnd.ms-excel.sheet.binary.macroenabled.12");
    AddType("xlsm","application\/vnd.ms-excel.sheet.macroenabled.12");
    AddType("xltm","application\/vnd.ms-excel.template.macroenabled.12");
    AddType("eot","application\/vnd.ms-fontobject");
    AddType("chm","application\/vnd.ms-htmlhelp");
    AddType("ims","application\/vnd.ms-ims");
    AddType("lrm","application\/vnd.ms-lrm");
    AddType("thmx","application\/vnd.ms-officetheme");
    AddType("cat","application\/vnd.ms-pki.seccat");
    AddType("stl","application\/vnd.ms-pki.stl");
    AddType("ppt","application\/vnd.ms-powerpoint");
    AddType("pps","application\/vnd.ms-powerpoint");
    AddType("pot","application\/vnd.ms-powerpoint");
    AddType("ppam","application\/vnd.ms-powerpoint.addin.macroenabled.12");
    AddType("pptm","application\/vnd.ms-powerpoint.presentation.macroenabled.12");
    AddType("sldm","application\/vnd.ms-powerpoint.slide.macroenabled.12");
    AddType("ppsm","application\/vnd.ms-powerpoint.slideshow.macroenabled.12");
    AddType("potm","application\/vnd.ms-powerpoint.template.macroenabled.12");
    AddType("mpp","application\/vnd.ms-project");
    AddType("mpt","application\/vnd.ms-project");
    AddType("docm","application\/vnd.ms-word.document.macroenabled.12");
    AddType("dotm","application\/vnd.ms-word.template.macroenabled.12");
    AddType("wps","application\/vnd.ms-works");
    AddType("wks","application\/vnd.ms-works");
    AddType("wcm","application\/vnd.ms-works");
    AddType("wdb","application\/vnd.ms-works");
    AddType("wpl","application\/vnd.ms-wpl");
    AddType("xps","application\/vnd.ms-xpsdocument");
    AddType("mseq","application\/vnd.mseq");
    AddType("mus","application\/vnd.musician");
    AddType("msty","application\/vnd.muvee.style");
    AddType("taglet","application\/vnd.mynfc");
    AddType("nlu","application\/vnd.neurolanguage.nlu");
    AddType("ntf","application\/vnd.nitf");
    AddType("nitf","application\/vnd.nitf");
    AddType("nnd","application\/vnd.noblenet-directory");
    AddType("nns","application\/vnd.noblenet-sealer");
    AddType("nnw","application\/vnd.noblenet-web");
    AddType("ngdat","application\/vnd.nokia.n-gage.data");
    AddType("n-gage","application\/vnd.nokia.n-gage.symbian.install");
    AddType("rpst","application\/vnd.nokia.radio-preset");
    AddType("rpss","application\/vnd.nokia.radio-presets");
    AddType("edm","application\/vnd.novadigm.edm");
    AddType("edx","application\/vnd.novadigm.edx");
    AddType("FExt","application\/vnd.novadigm.FExt");
    AddType("odc","application\/vnd.oasis.opendocument.chart");
    AddType("otc","application\/vnd.oasis.opendocument.chart-template");
    AddType("odb","application\/vnd.oasis.opendocument.database");
    AddType("odf","application\/vnd.oasis.opendocument.formula");
    AddType("odft","application\/vnd.oasis.opendocument.formula-template");
    AddType("odg","application\/vnd.oasis.opendocument.graphics");
    AddType("otg","application\/vnd.oasis.opendocument.graphics-template");
    AddType("odi","application\/vnd.oasis.opendocument.image");
    AddType("oti","application\/vnd.oasis.opendocument.image-template");
    AddType("odp","application\/vnd.oasis.opendocument.presentation");
    AddType("otp","application\/vnd.oasis.opendocument.presentation-template");
    AddType("ods","application\/vnd.oasis.opendocument.spreadsheet");
    AddType("ots","application\/vnd.oasis.opendocument.spreadsheet-template");
    AddType("odt","application\/vnd.oasis.opendocument.text");
    AddType("odm","application\/vnd.oasis.opendocument.text-master");
    AddType("ott","application\/vnd.oasis.opendocument.text-template");
    AddType("oth","application\/vnd.oasis.opendocument.text-web");
    AddType("xo","application\/vnd.olpc-sugar");
    AddType("dd2","application\/vnd.oma.dd2+xml");
    AddType("oxt","application\/vnd.openofficeorg.extension");
    AddType("pptx","application\/vnd.openxmlformats-officedocument.presentationml.presentation");
    AddType("sldx","application\/vnd.openxmlformats-officedocument.presentationml.slide");
    AddType("ppsx","application\/vnd.openxmlformats-officedocument.presentationml.slideshow");
    AddType("potx","application\/vnd.openxmlformats-officedocument.presentationml.template");
    AddType("xlsx","application\/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
    AddType("xltx","application\/vnd.openxmlformats-officedocument.spreadsheetml.template");
    AddType("docx","application\/vnd.openxmlformats-officedocument.wordprocessingml.document");
    AddType("dotx","application\/vnd.openxmlformats-officedocument.wordprocessingml.template");
    AddType("mgp","application\/vnd.osgeo.mapguide.package");
    AddType("dp","application\/vnd.osgi.dp");
    AddType("esa","application\/vnd.osgi.subsystem");
    AddType("pdb","application\/vnd.palm");
    AddType("pqa","application\/vnd.palm");
    AddType("oprc","application\/vnd.palm");
    AddType("paw","application\/vnd.pawaafile");
    AddType("str","application\/vnd.pg.format");
    AddType("ei6","application\/vnd.pg.osasli");
    AddType("efif","application\/vnd.picsel");
    AddType("wg","application\/vnd.pmi.widget");
    AddType("plf","application\/vnd.pocketlearn");
    AddType("pbd","application\/vnd.powerbuilder6");
    AddType("box","application\/vnd.previewsystems.box");
    AddType("mgz","application\/vnd.proteus.magazine");
    AddType("qps","application\/vnd.publishare-delta-tree");
    AddType("ptid","application\/vnd.pvi.ptid1");
    AddType("qxd","application\/vnd.quark.quarkxpress");
    AddType("qxt","application\/vnd.quark.quarkxpress");
    AddType("qwd","application\/vnd.quark.quarkxpress");
    AddType("qwt","application\/vnd.quark.quarkxpress");
    AddType("qxl","application\/vnd.quark.quarkxpress");
    AddType("qxb","application\/vnd.quark.quarkxpress");
    AddType("bed","application\/vnd.realvnc.bed");
    AddType("mxl","application\/vnd.recordare.musicxml");
    AddType("musicxml","application\/vnd.recordare.musicxml+xml");
    AddType("cryptonote","application\/vnd.rig.cryptonote");
    AddType("cod","application\/vnd.rim.cod");
    AddType("rm","application\/vnd.rn-realmedia");
    AddType("rmvb","application\/vnd.rn-realmedia-vbr");
    AddType("link66","application\/vnd.route66.link66+xml");
    AddType("st","application\/vnd.sailingtracker.track");
    AddType("see","application\/vnd.seemail");
    AddType("sema","application\/vnd.sema");
    AddType("semd","application\/vnd.semd");
    AddType("semf","application\/vnd.semf");
    AddType("ifm","application\/vnd.shana.informed.formdata");
    AddType("itp","application\/vnd.shana.informed.formtemplate");
    AddType("iif","application\/vnd.shana.informed.interchange");
    AddType("ipk","application\/vnd.shana.informed.package");
    AddType("twd","application\/vnd.simtech-mindmapper");
    AddType("twds","application\/vnd.simtech-mindmapper");
    AddType("mmf","application\/vnd.smaf");
    AddType("teacher","application\/vnd.smart.teacher");
    AddType("sdkm","application\/vnd.solent.sdkm+xml");
    AddType("sdkd","application\/vnd.solent.sdkm+xml");
    AddType("dxp","application\/vnd.spotfire.dxp");
    AddType("sfs","application\/vnd.spotfire.sfs");
    AddType("sdc","application\/vnd.stardivision.calc");
    AddType("sda","application\/vnd.stardivision.draw");
    AddType("sdd","application\/vnd.stardivision.impress");
    AddType("smf","application\/vnd.stardivision.math");
    AddType("sdw","application\/vnd.stardivision.writer");
    AddType("vor","application\/vnd.stardivision.writer");
    AddType("sgl","application\/vnd.stardivision.writer-global");
    AddType("smzip","application\/vnd.stepmania.package");
    AddType("sm","application\/vnd.stepmania.stepchart");
    AddType("sxc","application\/vnd.sun.xml.calc");
    AddType("stc","application\/vnd.sun.xml.calc.template");
    AddType("sxd","application\/vnd.sun.xml.draw");
    AddType("std","application\/vnd.sun.xml.draw.template");
    AddType("sxi","application\/vnd.sun.xml.impress");
    AddType("sti","application\/vnd.sun.xml.impress.template");
    AddType("sxm","application\/vnd.sun.xml.math");
    AddType("sxw","application\/vnd.sun.xml.writer");
    AddType("sxg","application\/vnd.sun.xml.writer.global");
    AddType("stw","application\/vnd.sun.xml.writer.template");
    AddType("sus","application\/vnd.sus-calendar");
    AddType("susp","application\/vnd.sus-calendar");
    AddType("svd","application\/vnd.svd");
    AddType("sis","application\/vnd.symbian.install");
    AddType("sisx","application\/vnd.symbian.install");
    AddType("xsm","application\/vnd.syncml+xml");
    AddType("bdm","application\/vnd.syncml.dm+wbxml");
    AddType("xdm","application\/vnd.syncml.dm+xml");
    AddType("tao","application\/vnd.tao.intent-module-archive");
    AddType("pcap","application\/vnd.tcpdump.pcap");
    AddType("cap","application\/vnd.tcpdump.pcap");
    AddType("dmp","application\/vnd.tcpdump.pcap");
    AddType("tmo","application\/vnd.tmobile-livetv");
    AddType("tpt","application\/vnd.trid.tpt");
    AddType("mxs","application\/vnd.triscape.mxs");
    AddType("tra","application\/vnd.trueapp");
    AddType("ufd","application\/vnd.ufdl");
    AddType("ufdl","application\/vnd.ufdl");
    AddType("utz","application\/vnd.uiq.theme");
    AddType("umj","application\/vnd.umajin");
    AddType("unityweb","application\/vnd.unity");
    AddType("uoml","application\/vnd.uoml+xml");
    AddType("vcx","application\/vnd.vcx");
    AddType("vsd","application\/vnd.visio");
    AddType("vst","application\/vnd.visio");
    AddType("vss","application\/vnd.visio");
    AddType("vsw","application\/vnd.visio");
    AddType("vis","application\/vnd.visionary");
    AddType("vsf","application\/vnd.vsf");
    AddType("wbxml","application\/vnd.wap.wbxml");
    AddType("wmlc","application\/vnd.wap.wmlc");
    AddType("wmlsc","application\/vnd.wap.wmlscriptc");
    AddType("wtb","application\/vnd.webturbo");
    AddType("nbp","application\/vnd.wolfram.player");
    AddType("wpd","application\/vnd.wordperfect");
    AddType("wqd","application\/vnd.wqd");
    AddType("stf","application\/vnd.wt.stf");
    AddType("xar","application\/vnd.xara");
    AddType("xfdl","application\/vnd.xfdl");
    AddType("hvd","application\/vnd.yamaha.hv-dic");
    AddType("hvs","application\/vnd.yamaha.hv-script");
    AddType("hvp","application\/vnd.yamaha.hv-voice");
    AddType("osf","application\/vnd.yamaha.openscoreformat");
    AddType("osfpvg","application\/vnd.yamaha.openscoreformat.osfpvg+xml");
    AddType("saf","application\/vnd.yamaha.smaf-audio");
    AddType("spf","application\/vnd.yamaha.smaf-phrase");
    AddType("cmp","application\/vnd.yellowriver-custom-menu");
    AddType("zir","application\/vnd.zul");
    AddType("zirz","application\/vnd.zul");
    AddType("zaz","application\/vnd.zzazz.deck+xml");
    AddType("vxml","application\/voicexml+xml");
    AddType("wgt","application\/widget");
    AddType("hlp","application\/winhlp");
    AddType("wsdl","application\/wsdl+xml");
    AddType("wspolicy","application\/wspolicy+xml");
    AddType("7z","application\/x-7z-compressed");
    AddType("abw","application\/x-abiword");
    AddType("ace","application\/x-ace-compressed");
    AddType("dmg","application\/x-apple-diskimage");
    AddType("aab","application\/x-authorware-bin");
    AddType("x32","application\/x-authorware-bin");
    AddType("u32","application\/x-authorware-bin");
    AddType("vox","application\/x-authorware-bin");
    AddType("aam","application\/x-authorware-map");
    AddType("aas","application\/x-authorware-seg");
    AddType("bcpio","application\/x-bcpio");
    AddType("torrent","application\/x-bittorrent");
    AddType("blb","application\/x-blorb");
    AddType("blorb","application\/x-blorb");
    AddType("bz","application\/x-bzip");
    AddType("bz2","application\/x-bzip2");
    AddType("boz","application\/x-bzip2");
    AddType("cbr","application\/x-cbr");
    AddType("cba","application\/x-cbr");
    AddType("cbt","application\/x-cbr");
    AddType("cbz","application\/x-cbr");
    AddType("cb7","application\/x-cbr");
    AddType("vcd","application\/x-cdlink");
    AddType("cfs","application\/x-cfs-compressed");
    AddType("chat","application\/x-chat");
    AddType("pgn","application\/x-chess-pgn");
    AddType("nsc","application\/x-conference");
    AddType("cpio","application\/x-cpio");
    AddType("csh","application\/x-csh");
    AddType("deb","application\/x-debian-package");
    AddType("udeb","application\/x-debian-package");
    AddType("dgc","application\/x-dgc-compressed");
    AddType("dir","application\/x-director");
    AddType("dcr","application\/x-director");
    AddType("dxr","application\/x-director");
    AddType("cst","application\/x-director");
    AddType("cct","application\/x-director");
    AddType("cxt","application\/x-director");
    AddType("w3d","application\/x-director");
    AddType("fgd","application\/x-director");
    AddType("swa","application\/x-director");
    AddType("wad","application\/x-doom");
    AddType("ncx","application\/x-dtbncx+xml");
    AddType("dtb","application\/x-dtbook+xml");
    AddType("res","application\/x-dtbresource+xml");
    AddType("dvi","application\/x-dvi");
    AddType("evy","application\/x-envoy");
    AddType("eva","application\/x-eva");
    AddType("bdf","application\/x-font-bdf");
    AddType("gsf","application\/x-font-ghostscript");
    AddType("psf","application\/x-font-linux-psf");
    AddType("otf","application\/x-font-otf");
    AddType("pcf","application\/x-font-pcf");
    AddType("snf","application\/x-font-snf");
    AddType("ttf","application\/x-font-ttf");
    AddType("ttc","application\/x-font-ttf");
    AddType("pfa","application\/x-font-type1");
    AddType("pfb","application\/x-font-type1");
    AddType("pfm","application\/x-font-type1");
    AddType("afm","application\/x-font-type1");
    AddType("woff","application\/x-font-woff");
    AddType("arc","application\/x-freearc");
    AddType("spl","application\/x-futuresplash");
    AddType("gca","application\/x-gca-compressed");
    AddType("ulx","application\/x-glulx");
    AddType("gnumeric","application\/x-gnumeric");
    AddType("gramps","application\/x-gramps-xml");
    AddType("gtar","application\/x-gtar");
    AddType("hdf","application\/x-hdf");
    AddType("install","application\/x-install-instructions");
    AddType("iso","application\/x-iso9660-image");
    AddType("jnlp","application\/x-java-jnlp-file");
    AddType("latex","application\/x-latex");
    AddType("lzh","application\/x-lzh-compressed");
    AddType("lha","application\/x-lzh-compressed");
    AddType("mie","application\/x-mie");
    AddType("prc","application\/x-mobipocket-ebook");
    AddType("mobi","application\/x-mobipocket-ebook");
    AddType("application","application\/x-ms-application");
    AddType("lnk","application\/x-ms-shortcut");
    AddType("wmd","application\/x-ms-wmd");
    AddType("wmz","application\/x-ms-wmz");
    AddType("xbap","application\/x-ms-xbap");
    AddType("mdb","application\/x-msaccess");
    AddType("obd","application\/x-msbinder");
    AddType("crd","application\/x-mscardfile");
    AddType("clp","application\/x-msclip");
    AddType("exe","application\/x-msdownload");
    AddType("dll","application\/x-msdownload");
    AddType("com","application\/x-msdownload");
    AddType("bat","application\/x-msdownload");
    AddType("msi","application\/x-msdownload");
    AddType("mvb","application\/x-msmediaview");
    AddType("m13","application\/x-msmediaview");
    AddType("m14","application\/x-msmediaview");
    AddType("wmf","application\/x-msmetafile");
    AddType("wmz","application\/x-msmetafile");
    AddType("emf","application\/x-msmetafile");
    AddType("emz","application\/x-msmetafile");
    AddType("mny","application\/x-msmoney");
    AddType("pub","application\/x-mspublisher");
    AddType("scd","application\/x-msschedule");
    AddType("trm","application\/x-msterminal");
    AddType("wri","application\/x-mswrite");
    AddType("nc","application\/x-netcdf");
    AddType("cdf","application\/x-netcdf");
    AddType("nzb","application\/x-nzb");
    AddType("p12","application\/x-pkcs12");
    AddType("pfx","application\/x-pkcs12");
    AddType("p7b","application\/x-pkcs7-certificates");
    AddType("spc","application\/x-pkcs7-certificates");
    AddType("p7r","application\/x-pkcs7-certreqresp");
    AddType("rar","application\/x-rar-compressed");
    AddType("ris","application\/x-research-info-systems");
    AddType("sh","application\/x-sh");
    AddType("shar","application\/x-shar");
    AddType("swf","application\/x-shockwave-flash");
    AddType("xap","application\/x-silverlight-app");
    AddType("sql","application\/x-sql");
    AddType("sit","application\/x-stuffit");
    AddType("sitx","application\/x-stuffitx");
    AddType("srt","application\/x-subrip");
    AddType("sv4cpio","application\/x-sv4cpio");
    AddType("sv4crc","application\/x-sv4crc");
    AddType("t3","application\/x-t3vm-image");
    AddType("gam","application\/x-tads");
    AddType("tar","application\/x-tar");
    AddType("tcl","application\/x-tcl");
    AddType("tex","application\/x-tex");
    AddType("tfm","application\/x-tex-tfm");
    AddType("texinfo","application\/x-texinfo");
    AddType("texi","application\/x-texinfo");
    AddType("obj","application\/x-tgif");
    AddType("ustar","application\/x-ustar");
    AddType("src","application\/x-wais-source");
    AddType("der","application\/x-x509-ca-cert");
    AddType("crt","application\/x-x509-ca-cert");
    AddType("fig","application\/x-xfig");
    AddType("xlf","application\/x-xliff+xml");
    AddType("xpi","application\/x-xpinstall");
    AddType("xz","application\/x-xz");
    AddType("z1","application\/x-zmachine");
    AddType("z2","application\/x-zmachine");
    AddType("z3","application\/x-zmachine");
    AddType("z4","application\/x-zmachine");
    AddType("z5","application\/x-zmachine");
    AddType("z6","application\/x-zmachine");
    AddType("z7","application\/x-zmachine");
    AddType("z8","application\/x-zmachine");
    AddType("xaml","application\/xaml+xml");
    AddType("xdf","application\/xcap-diff+xml");
    AddType("xenc","application\/xenc+xml");
    AddType("xhtml","application\/xhtml+xml");
    AddType("xht","application\/xhtml+xml");
    AddType("xml","application\/xml");
    AddType("xsl","application\/xml");
    AddType("dtd","application\/xml-dtd");
    AddType("xop","application\/xop+xml");
    AddType("xpl","application\/xproc+xml");
    AddType("xslt","application\/xslt+xml");
    AddType("xspf","application\/xspf+xml");
    AddType("mxml","application\/xv+xml");
    AddType("xhvml","application\/xv+xml");
    AddType("xvml","application\/xv+xml");
    AddType("xvm","application\/xv+xml");
    AddType("yang","application\/yang");
    AddType("yin","application\/yin+xml");
    AddType("zip","application\/zip");
    AddType("adp","audio\/adpcm");
    AddType("au","audio\/basic");
    AddType("snd","audio\/basic");
    AddType("mid","audio\/midi");
    AddType("midi","audio\/midi");
    AddType("kar","audio\/midi");
    AddType("rmi","audio\/midi");
    AddType("mp4a","audio\/mp4");
    AddType("mpga","audio\/mpeg");
    AddType("mp2","audio\/mpeg");
    AddType("mp2a","audio\/mpeg");
    AddType("mp3","audio\/mpeg");
    AddType("m2a","audio\/mpeg");
    AddType("m3a","audio\/mpeg");
    AddType("oga","audio\/ogg");
    AddType("ogg","audio\/ogg");
    AddType("spx","audio\/ogg");
    AddType("s3m","audio\/s3m");
    AddType("sil","audio\/silk");
    AddType("uva","audio\/vnd.dece.audio");
    AddType("uvva","audio\/vnd.dece.audio");
    AddType("eol","audio\/vnd.digital-winds");
    AddType("dra","audio\/vnd.dra");
    AddType("dts","audio\/vnd.dts");
    AddType("dtshd","audio\/vnd.dts.hd");
    AddType("lvp","audio\/vnd.lucent.voice");
    AddType("pya","audio\/vnd.ms-playready.media.pya");
    AddType("ecelp4800","audio\/vnd.nuera.ecelp4800");
    AddType("ecelp7470","audio\/vnd.nuera.ecelp7470");
    AddType("ecelp9600","audio\/vnd.nuera.ecelp9600");
    AddType("rip","audio\/vnd.rip");
    AddType("weba","audio\/webm");
    AddType("aac","audio\/x-aac");
    AddType("aif","audio\/x-aiff");
    AddType("aiff","audio\/x-aiff");
    AddType("aifc","audio\/x-aiff");
    AddType("caf","audio\/x-caf");
    AddType("flac","audio\/x-flac");
    AddType("mka","audio\/x-matroska");
    AddType("m3u","audio\/x-mpegurl");
    AddType("wax","audio\/x-ms-wax");
    AddType("wma","audio\/x-ms-wma");
    AddType("ram","audio\/x-pn-realaudio");
    AddType("ra","audio\/x-pn-realaudio");
    AddType("rmp","audio\/x-pn-realaudio-plugin");
    AddType("wav","audio\/x-wav");
    AddType("xm","audio\/xm");
    AddType("cdx","chemical\/x-cdx");
    AddType("cif","chemical\/x-cif");
    AddType("cmdf","chemical\/x-cmdf");
    AddType("cml","chemical\/x-cml");
    AddType("csml","chemical\/x-csml");
    AddType("xyz","chemical\/x-xyz");
    AddType("bmp","image\/bmp");
    AddType("cgm","image\/cgm");
    AddType("g3","image\/g3fax");
    AddType("gif","image\/gif");
    AddType("ief","image\/ief");
    AddType("jpeg","image\/jpeg");
    AddType("jpg","image\/jpeg");
    AddType("jpe","image\/jpeg");
    AddType("ktx","image\/ktx");
    AddType("png","image\/png");
    AddType("btif","image\/prs.btif");
    AddType("sgi","image\/sgi");
    AddType("svg","image\/svg+xml");
    AddType("svgz","image\/svg+xml");
    AddType("tiff","image\/tiff");
    AddType("tif","image\/tiff");
    AddType("psd","image\/vnd.adobe.photoshop");
    AddType("uvi","image\/vnd.dece.graphic");
    AddType("uvvi","image\/vnd.dece.graphic");
    AddType("uvg","image\/vnd.dece.graphic");
    AddType("uvvg","image\/vnd.dece.graphic");
    AddType("sub","image\/vnd.dvb.subtitle");
    AddType("djvu","image\/vnd.djvu");
    AddType("djv","image\/vnd.djvu");
    AddType("dwg","image\/vnd.dwg");
    AddType("dxf","image\/vnd.dxf");
    AddType("fbs","image\/vnd.fastbidsheet");
    AddType("fpx","image\/vnd.fpx");
    AddType("fst","image\/vnd.fst");
    AddType("mmr","image\/vnd.fujixerox.edmics-mmr");
    AddType("rlc","image\/vnd.fujixerox.edmics-rlc");
    AddType("mdi","image\/vnd.ms-modi");
    AddType("wdp","image\/vnd.ms-photo");
    AddType("npx","image\/vnd.net-fpx");
    AddType("wbmp","image\/vnd.wap.wbmp");
    AddType("xif","image\/vnd.xiff");
    AddType("webp","image\/webp");
    AddType("3ds","image\/x-3ds");
    AddType("ras","image\/x-cmu-raster");
    AddType("cmx","image\/x-cmx");
    AddType("fh","image\/x-freehand");
    AddType("fhc","image\/x-freehand");
    AddType("fh4","image\/x-freehand");
    AddType("fh5","image\/x-freehand");
    AddType("fh7","image\/x-freehand");
    AddType("ico","image\/x-icon");
    AddType("sid","image\/x-mrsid-image");
    AddType("pcx","image\/x-pcx");
    AddType("pic","image\/x-pict");
    AddType("pct","image\/x-pict");
    AddType("pnm","image\/x-portable-anymap");
    AddType("pbm","image\/x-portable-bitmap");
    AddType("pgm","image\/x-portable-graymap");
    AddType("ppm","image\/x-portable-pixmap");
    AddType("rgb","image\/x-rgb");
    AddType("tga","image\/x-tga");
    AddType("xbm","image\/x-xbitmap");
    AddType("xpm","image\/x-xpixmap");
    AddType("xwd","image\/x-xwindowdump");
    AddType("eml","message\/rfc822");
    AddType("mime","message\/rfc822");
    AddType("igs","model\/iges");
    AddType("iges","model\/iges");
    AddType("msh","model\/mesh");
    AddType("mesh","model\/mesh");
    AddType("silo","model\/mesh");
    AddType("dae","model\/vnd.collada+xml");
    AddType("dwf","model\/vnd.dwf");
    AddType("gdl","model\/vnd.gdl");
    AddType("gtw","model\/vnd.gtw");
    AddType("mts","model\/vnd.mts");
    AddType("vtu","model\/vnd.vtu");
    AddType("wrl","model\/vrml");
    AddType("vrml","model\/vrml");
    AddType("x3db","model\/x3d+binary");
    AddType("x3dbz","model\/x3d+binary");
    AddType("x3dv","model\/x3d+vrml");
    AddType("x3dvz","model\/x3d+vrml");
    AddType("x3d","model\/x3d+xml");
    AddType("x3dz","model\/x3d+xml");
    AddType("appcache","text\/cache-manifest");
    AddType("ics","text\/calendar");
    AddType("ifb","text\/calendar");
    AddType("cmd","text\/cmd");
    AddType("css","text\/css");
    AddType("csv","text\/csv");
    AddType("html","text\/html");
    AddType("htm","text\/html");
    AddType("n3","text\/n3");
    AddType("txt","text\/plain");
    AddType("text","text\/plain");
    AddType("conf","text\/plain");
    AddType("def","text\/plain");
    AddType("list","text\/plain");
    AddType("log","text\/plain");
    AddType("in","text\/plain");
    AddType("js","text\/plain");
    AddType("dsc","text\/prs.lines.tag");
    AddType("rtx","text\/richtext");
    AddType("sgml","text\/sgml");
    AddType("sgm","text\/sgml");
    AddType("tsv","text\/tab-separated-values");
    AddType("t","text\/troff");
    AddType("tr","text\/troff");
    AddType("roff","text\/troff");
    AddType("man","text\/troff");
    AddType("me","text\/troff");
    AddType("ms","text\/troff");
    AddType("ttl","text\/turtle");
    AddType("uri","text\/uri-list");
    AddType("uris","text\/uri-list");
    AddType("urls","text\/uri-list");
    AddType("vcard","text\/vcard");
    AddType("curl","text\/vnd.curl");
    AddType("dcurl","text\/vnd.curl.dcurl");
    AddType("scurl","text\/vnd.curl.scurl");
    AddType("mcurl","text\/vnd.curl.mcurl");
    AddType("sub","text\/vnd.dvb.subtitle");
    AddType("fly","text\/vnd.fly");
    AddType("flx","text\/vnd.fmi.flexstor");
    AddType("gv","text\/vnd.graphviz");
    AddType("3dml","text\/vnd.in3d.3dml");
    AddType("spot","text\/vnd.in3d.spot");
    AddType("jad","text\/vnd.sun.j2me.app-descriptor");
    AddType("wml","text\/vnd.wap.wml");
    AddType("wmls","text\/vnd.wap.wmlscript");
    AddType("s","text\/x-asm");
    AddType("asm","text\/x-asm");
    AddType("c","text\/x-c");
    AddType("cc","text\/x-c");
    AddType("cxx","text\/x-c");
    AddType("cpp","text\/x-c");
    AddType("h","text\/x-c");
    AddType("hh","text\/x-c");
    AddType("dic","text\/x-c");
    AddType("f","text\/x-fortran");
    AddType("for","text\/x-fortran");
    AddType("f77","text\/x-fortran");
    AddType("f90","text\/x-fortran");
    AddType("java","text\/x-java-source");
    AddType("opml","text\/x-opml");
    AddType("p","text\/x-pascal");
    AddType("pas","text\/x-pascal");
    AddType("nfo","text\/x-nfo");
    AddType("etx","text\/x-setext");
    AddType("sfv","text\/x-sfv");
    AddType("uu","text\/x-uuencode");
    AddType("vcs","text\/x-vcalendar");
    AddType("vcf","text\/x-vcard");
    AddType("xml","text\/xml");
    AddType("xsl","text\/xml");
    AddType("dtd","text\/xml-dtd");
    AddType("3gp","video\/3gpp");
    AddType("3g2","video\/3gpp2");
    AddType("h261","video\/h261");
    AddType("h263","video\/h263");
    AddType("h264","video\/h264");
    AddType("jpgv","video\/jpeg");
    AddType("jpm","video\/jpm");
    AddType("jpgm","video\/jpm");
    AddType("mj2","video\/mj2");
    AddType("mjp2","video\/mj2");
    AddType("mp4","video\/mp4");
    AddType("mp4v","video\/mp4");
    AddType("mpg4","video\/mp4");
    AddType("mpeg","video\/mpeg");
    AddType("mpg","video\/mpeg");
    AddType("mpe","video\/mpeg");
    AddType("m1v","video\/mpeg");
    AddType("m2v","video\/mpeg");
    AddType("ogv","video\/ogg");
    AddType("qt","video\/quicktime");
    AddType("mov","video\/quicktime");
    AddType("uvh","video\/vnd.dece.hd");
    AddType("uvvh","video\/vnd.dece.hd");
    AddType("uvm","video\/vnd.dece.mobile");
    AddType("uvvm","video\/vnd.dece.mobile");
    AddType("uvp","video\/vnd.dece.pd");
    AddType("uvvp","video\/vnd.dece.pd");
    AddType("uvs","video\/vnd.dece.sd");
    AddType("uvvs","video\/vnd.dece.sd");
    AddType("uvv","video\/vnd.dece.video");
    AddType("uvvv","video\/vnd.dece.video");
    AddType("dvb","video\/vnd.dvb.file");
    AddType("fvt","video\/vnd.fvt");
    AddType("mxu","video\/vnd.mpegurl");
    AddType("m4u","video\/vnd.mpegurl");
    AddType("pyv","video\/vnd.ms-playready.media.pyv");
    AddType("uvu","video\/vnd.uvvu.mp4");
    AddType("uvvu","video\/vnd.uvvu.mp4");
    AddType("viv","video\/vnd.vivo");
    AddType("webm","video\/webm");
    AddType("f4v","video\/x-f4v");
    AddType("fli","video\/x-fli");
    AddType("flv","video\/x-flv");
    AddType("m4v","video\/x-m4v");
    AddType("mkv","video\/x-matroska");
    AddType("mk3d","video\/x-matroska");
    AddType("mks","video\/x-matroska");
    AddType("mng","video\/x-mng");
    AddType("asf","video\/x-ms-asf");
    AddType("asx","video\/x-ms-asf");
    AddType("vob","video\/x-ms-vob");
    AddType("wm","video\/x-ms-wm");
    AddType("wmv","video\/x-ms-wmv");
    AddType("wmx","video\/x-ms-wmx");
    AddType("wvx","video\/x-ms-wvx");
    AddType("avi","video\/x-msvideo");
    AddType("movie","video\/x-sgi-movie");
    AddType("smv","video\/x-smv");
    AddType("ice","x-conference\/x-cooltalk");
  };
});
rtl.module("WEBLib.TMSFNCGraphicsTypes",["System","Classes","Types","WEBLib.TMSFNCTypes","WEBLib.Graphics"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.FPC_FULLVERSION = 0;
  this.PathScale = 1E-4;
  this.PathFontSize = 1E-2;
  this.PathPosition = 1E-3;
  this.PathAngle = 1E-4;
  this.gcAliceblue = 0xFFF8F0;
  this.gcAntiquewhite = 0xD7EBFA;
  this.gcAqua = 0xFFFF00;
  this.gcAquamarine = 0xD4FF7F;
  this.gcAzure = 0xFFFFF0;
  this.gcBeige = 0xDCF5F5;
  this.gcBisque = 0xC4E4FF;
  this.gcBlack = 0x0;
  this.gcBlanchedalmond = 0xCDEBFF;
  this.gcBlue = 0xFF0000;
  this.gcBlueviolet = 0xE22B8A;
  this.gcBrown = 0x2A2AA5;
  this.gcBurlywood = 0x87B8DE;
  this.gcCadetblue = 0xA09E5F;
  this.gcChartreuse = 0xFF7F;
  this.gcChocolate = 0x1E69D2;
  this.gcCoral = 0x507FFF;
  this.gcCornflowerblue = 0xED9564;
  this.gcCornsilk = 0xDCF8FF;
  this.gcCrimson = 0x3C14DC;
  this.gcCyan = 0xFFFF00;
  this.gcDarkblue = 0x8B0000;
  this.gcDarkcyan = 0x8B8B00;
  this.gcDarkgoldenrod = 0xB86B8;
  this.gcDarkgray = 0xA9A9A9;
  this.gcDarkgreen = 0x6400;
  this.gcDarkgrey = 0xA9A9A9;
  this.gcDarkkhaki = 0x6BB7BD;
  this.gcDarkmagenta = 0x8B008B;
  this.gcDarkolivegreen = 0x2F6B55;
  this.gcDarkorange = 0x8CFF;
  this.gcDarkorchid = 0xCC3299;
  this.gcDarkred = 0x8B;
  this.gcDarksalmon = 0x7A96E9;
  this.gcDarkseagreen = 0x8FBC8F;
  this.gcDarkslateblue = 0x8B3D48;
  this.gcDarkslategray = 0x4F4F2F;
  this.gcDarkslategrey = 0x4F4F2F;
  this.gcDarkturquoise = 0xD1CE00;
  this.gcDarkviolet = 0xD30094;
  this.gcDeeppink = 0x9314FF;
  this.gcDeepskyblue = 0xFFBF00;
  this.gcDimgray = 0x696969;
  this.gcDimgrey = 0x696969;
  this.gcDodgerblue = 0xFF901E;
  this.gcFirebrick = 0x2222B2;
  this.gcFloralwhite = 0xF0FAFF;
  this.gcForestgreen = 0x228B22;
  this.gcFuchsia = 0xFF00FF;
  this.gcGainsboro = 0xDCDCDC;
  this.gcGhostwhite = 0xFFF8F8;
  this.gcGold = 0xD7FF;
  this.gcGoldenrod = 0x20A5DA;
  this.gcGray = 0x808080;
  this.gcGreen = 0x8000;
  this.gcGreenyellow = 0x2FFFAD;
  this.gcGrey = 0x808080;
  this.gcHoneydew = 0xF0FFF0;
  this.gcHotpink = 0xB469FF;
  this.gcIndianred = 0x5C5CCD;
  this.gcIndigo = 0x82004B;
  this.gcIvory = 0xF0FFFF;
  this.gcKhaki = 0x8CE6F0;
  this.gcLavender = 0xFAE6E6;
  this.gcLavenderblush = 0xF5F0FF;
  this.gcLawngreen = 0xFC7C;
  this.gcLemonchiffon = 0xCDFAFF;
  this.gcLightblue = 0xE6D8AD;
  this.gcLightcoral = 0x8080F0;
  this.gcLightcyan = 0xFFFFE0;
  this.gcLightgoldenrodyellow = 0xD2FAFA;
  this.gcLightgray = 0xD3D3D3;
  this.gcLightgreen = 0x90EE90;
  this.gcLightgrey = 0xD3D3D3;
  this.gcLightpink = 0xC1B6FF;
  this.gcLightsalmon = 0x7AA0FF;
  this.gcLightseagreen = 0xAAB220;
  this.gcLightskyblue = 0xFACE87;
  this.gcLightslategray = 0x998877;
  this.gcLightslategrey = 0x998877;
  this.gcLightsteelblue = 0xDEC4B0;
  this.gcLightyellow = 0xE0FFFF;
  this.gcLtGray = 0xC0C0C0;
  this.gcMedGray = 0xA4A0A0;
  this.gcDkGray = 0x808080;
  this.gcMoneyGreen = 0xC0DCC0;
  this.gcLegacySkyBlue = 0xF0CAA6;
  this.gcCream = 0xF0FBFF;
  this.gcLime = 0xFF00;
  this.gcLimegreen = 0x32CD32;
  this.gcLinen = 0xE6F0FA;
  this.gcMagenta = 0xFF00FF;
  this.gcMaroon = 0x80;
  this.gcMediumaquamarine = 0xAACD66;
  this.gcMediumblue = 0xCD0000;
  this.gcMediumorchid = 0xD355BA;
  this.gcMediumpurple = 0xDB7093;
  this.gcMediumseagreen = 0x71B33C;
  this.gcMediumslateblue = 0xEE687B;
  this.gcMediumspringgreen = 0x9AFA00;
  this.gcMediumturquoise = 0xCCD148;
  this.gcMediumvioletred = 0x8515C7;
  this.gcMidnightblue = 0x701919;
  this.gcMintcream = 0xFAFFF5;
  this.gcMistyrose = 0xE1E4FF;
  this.gcMoccasin = 0xB5E4FF;
  this.gcNavajowhite = 0xADDEFF;
  this.gcNavy = 0x800000;
  this.gcOldlace = 0xE6F5FD;
  this.gcOlive = 0x8080;
  this.gcOlivedrab = 0x238E6B;
  this.gcOrange = 0xA5FF;
  this.gcOrangered = 0x45FF;
  this.gcOrchid = 0xD670DA;
  this.gcPalegoldenrod = 0xAAE8EE;
  this.gcPalegreen = 0x98FB98;
  this.gcPaleturquoise = 0xEEEEAF;
  this.gcPalevioletred = 0x9370DB;
  this.gcPapayawhip = 0xD5EFFF;
  this.gcPeachpuff = 0xB9DAFF;
  this.gcPeru = 0x3F85CD;
  this.gcPink = 0xCBC0FF;
  this.gcPlum = 0xDDA0DD;
  this.gcPowderblue = 0xE6E0B0;
  this.gcPurple = 0x800080;
  this.gcRed = 0xFF;
  this.gcRosybrown = 0x8F8FBC;
  this.gcRoyalblue = 0xE16941;
  this.gcSaddlebrown = 0x13458B;
  this.gcSalmon = 0x7280FA;
  this.gcSandybrown = 0x60A4F4;
  this.gcSeagreen = 0x578B2E;
  this.gcSeashell = 0xEEF5FF;
  this.gcSienna = 0x2D52A0;
  this.gcSilver = 0xC0C0C0;
  this.gcSkyblue = 0xEBCE87;
  this.gcSlateblue = 0xCD5A6A;
  this.gcSlategray = 0x908070;
  this.gcSlategrey = 0x908070;
  this.gcSnow = 0xFAFAFF;
  this.gcSpringgreen = 0x7FFF00;
  this.gcSteelblue = 0xB48246;
  this.gcTan = 0x8CB4D2;
  this.gcTeal = 0x808000;
  this.gcThistle = 0xD8BFD8;
  this.gcTomato = 0x4763FF;
  this.gcTurquoise = 0xD0E040;
  this.gcViolet = 0xEE82EE;
  this.gcWheat = 0xB3DEF5;
  this.gcWhite = 0xFFFFFF;
  this.gcWhitesmoke = 0xF5F5F5;
  this.gcYellow = 0xFFFF;
  this.gcYellowgreen = 0x32CD9A;
  this.gcNull = -1;
  rtl.recNewT($mod,"TTMSFNCGraphicsColorEntry",function () {
    this.Value = 0;
    this.Name = "";
    this.$eq = function (b) {
      return (this.Value === b.Value) && (this.Name === b.Name);
    };
    this.$assign = function (s) {
      this.Value = s.Value;
      this.Name = s.Name;
      return this;
    };
    var $r = $mod.$rtti.$Record("TTMSFNCGraphicsColorEntry",{});
    $r.addField("Value",pas["WEBLib.Graphics"].$rtti["TColor"]);
    $r.addField("Name",rtl.string);
  });
  this.TMSFNCGraphicsColorCount = 154;
  this.TTMSFNCGraphicsStrokeKind = {"0": "gskNone", gskNone: 0, "1": "gskSolid", gskSolid: 1, "2": "gskDash", gskDash: 2, "3": "gskDot", gskDot: 3, "4": "gskDashDot", gskDashDot: 4, "5": "gskDashDotDot", gskDashDotDot: 5};
  $mod.$rtti.$Enum("TTMSFNCGraphicsStrokeKind",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TTMSFNCGraphicsStrokeKind});
  this.TTMSFNCGraphicsTextureMode = {"0": "gtmOriginal", gtmOriginal: 0, "1": "gtmFit", gtmFit: 1, "2": "gtmStretch", gtmStretch: 2, "3": "gtmCenter", gtmCenter: 3, "4": "gtmTile", gtmTile: 4};
  $mod.$rtti.$Enum("TTMSFNCGraphicsTextureMode",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TTMSFNCGraphicsTextureMode});
  this.TTMSFNCGraphicsFillKind = {"0": "gfkNone", gfkNone: 0, "1": "gfkSolid", gfkSolid: 1, "2": "gfkGradient", gfkGradient: 2, "3": "gfkTexture", gfkTexture: 3};
  $mod.$rtti.$Enum("TTMSFNCGraphicsFillKind",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCGraphicsFillKind});
  this.TTMSFNCGraphicsFillOrientation = {"0": "gfoHorizontal", gfoHorizontal: 0, "1": "gfoVertical", gfoVertical: 1};
  $mod.$rtti.$Enum("TTMSFNCGraphicsFillOrientation",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCGraphicsFillOrientation});
  this.TTMSFNCGraphicsTextAlign = {"0": "gtaCenter", gtaCenter: 0, "1": "gtaLeading", gtaLeading: 1, "2": "gtaTrailing", gtaTrailing: 2};
  $mod.$rtti.$Enum("TTMSFNCGraphicsTextAlign",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCGraphicsTextAlign});
  this.TTMSFNCGraphicsTextTrimming = {"0": "gttNone", gttNone: 0, "1": "gttCharacter", gttCharacter: 1, "2": "gttWord", gttWord: 2};
  $mod.$rtti.$Enum("TTMSFNCGraphicsTextTrimming",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCGraphicsTextTrimming});
  this.TTMSFNCGraphicsSide = {"0": "gsLeft", gsLeft: 0, "1": "gsTop", gsTop: 1, "2": "gsRight", gsRight: 2, "3": "gsBottom", gsBottom: 3};
  $mod.$rtti.$Enum("TTMSFNCGraphicsSide",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCGraphicsSide});
  $mod.$rtti.$Set("TTMSFNCGraphicsSides",{comptype: $mod.$rtti["TTMSFNCGraphicsSide"]});
  this.TTMSFNCGraphicsTextQuality = {"0": "gtqDefault", gtqDefault: 0, "1": "gtqAntiAliasing", gtqAntiAliasing: 1, "2": "gtqClearType", gtqClearType: 2};
  $mod.$rtti.$Enum("TTMSFNCGraphicsTextQuality",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCGraphicsTextQuality});
  this.AllSides = rtl.createSet($mod.TTMSFNCGraphicsSide.gsLeft,$mod.TTMSFNCGraphicsSide.gsTop,$mod.TTMSFNCGraphicsSide.gsRight,$mod.TTMSFNCGraphicsSide.gsBottom);
  this.Epsilon = 1E-40;
  $mod.$rtti.$Class("TTMSFNCGraphicsStroke");
  $mod.$rtti.$Class("TTMSFNCGraphicsFill");
  $mod.$rtti.$Class("TTMSFNCGraphicsFont");
  rtl.createClass($mod,"TTMSFNCGraphicsSaveState",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FSaveDC = 0;
      this.FFont = null;
      this.FStroke = null;
      this.FFill = null;
      this.FCustomSaveDC = 0;
    };
    this.$final = function () {
      this.FFont = undefined;
      this.FStroke = undefined;
      this.FFill = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetStroke = function (Value) {
      this.FStroke.Assign(Value);
    };
    this.SetFill = function (Value) {
      this.FFill.Assign(Value);
    };
    this.SetFont = function (Value) {
      this.FFont.AssignSource(Value);
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FFill = $mod.TTMSFNCGraphicsFill.$create("Create$1",[$mod.TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FStroke = $mod.TTMSFNCGraphicsStroke.$create("Create$1",[$mod.TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FFont = $mod.TTMSFNCGraphicsFont.$create("Create$2");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FFill");
      rtl.free(this,"FStroke");
      rtl.free(this,"FFont");
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomGraphicsFill",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FUpdateCount = 0;
      this.FOnChanged = null;
      this.FOrientation = 0;
      this.FKind = 0;
      this.FColor = 0;
      this.FColorTo = 0;
      this.FColorMirror = 0;
      this.FColorMirrorTo = 0;
      this.FOpacity = 0.0;
      this.FTexture = null;
      this.FTextureMode = 0;
    };
    this.$final = function () {
      this.FOnChanged = undefined;
      this.FTexture = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetKind = function (Value) {
      if (this.FKind !== Value) {
        this.FKind = Value;
        this.Changed();
      };
    };
    this.SetOrientation = function (Value) {
      if (this.FOrientation !== Value) {
        this.FOrientation = Value;
        this.Changed();
      };
    };
    this.SetColor = function (Value) {
      if (this.FColor !== Value) {
        this.FColor = Value;
        if (this.FColor === -1) {
          this.FColor = -1}
         else if (this.FColor === 536870912) this.FColor = 15790320;
        this.Changed();
      };
    };
    this.SetColorTo = function (Value) {
      if (this.FColorTo !== Value) {
        this.FColorTo = Value;
        if (this.FColorTo === -1) {
          this.FColorTo = -1}
         else if (this.FColorTo === 536870912) this.FColorTo = 15790320;
        this.Changed();
      };
    };
    this.SetColorMirror = function (Value) {
      if (this.FColorMirror !== Value) {
        this.FColorMirror = Value;
        if (this.FColorMirror === -1) {
          this.FColorMirror = -1}
         else if (this.FColorMirror === 536870912) this.FColorMirror = 15790320;
        this.Changed();
      };
    };
    this.SetColorMirrorTo = function (Value) {
      if (this.FColorMirrorTo !== Value) {
        this.FColorMirrorTo = Value;
        if (this.FColorMirrorTo === -1) {
          this.FColorMirrorTo = -1}
         else if (this.FColorMirrorTo === 536870912) this.FColorMirrorTo = 15790320;
        this.Changed();
      };
    };
    this.SetOpacity = function (Value) {
      if (this.FOpacity !== Value) {
        this.FOpacity = Value;
        this.Changed();
      };
    };
    this.IsOpacityStored = function () {
      var Result = false;
      Result = this.FOpacity !== 1;
      return Result;
    };
    this.SetTexture = function (Value) {
      if (this.FTexture !== Value) {
        this.FTexture.Assign(Value);
        this.Changed();
      };
    };
    this.SetTextureMode = function (Value) {
      if (this.FTextureMode !== Value) {
        this.FTextureMode = Value;
        this.Changed();
      };
    };
    this.Changed = function () {
      if ((this.FOnChanged != null) && (this.FUpdateCount === 0)) this.FOnChanged(this);
    };
    this.TextureChanged = function (Sender) {
      this.Changed();
    };
    this.Create$1 = function (AKind, AColor) {
      this.FKind = AKind;
      this.FColor = AColor;
      this.FOpacity = 1;
      this.FOrientation = $mod.TTMSFNCGraphicsFillOrientation.gfoVertical;
      this.FColorTo = 8421504;
      this.FColorMirror = -1;
      this.FColorMirrorTo = -1;
      this.FTextureMode = $mod.TTMSFNCGraphicsTextureMode.gtmStretch;
      this.FTexture = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FTexture.FOnChange = rtl.createCallback(this,"TextureChanged");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FTexture");
      pas.System.TObject.Destroy.call(this);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomGraphicsFill.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FColor;
        this.FColorTo = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FColorTo;
        this.FColorMirror = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FColorMirror;
        this.FColorMirrorTo = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FColorMirrorTo;
        this.FKind = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FKind;
        this.FOrientation = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FOrientation;
        this.FOpacity = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FOpacity;
        this.FTexture.Assign(rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FTexture);
        this.FTextureMode = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FTextureMode;
      } else if ($mod.TTMSFNCCustomGraphicsStroke.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TTMSFNCCustomGraphicsStroke).FColor;
        this.FColorTo = -1;
        this.FColorMirror = -1;
        this.FColorMirrorTo = -1;
        this.FKind = $mod.TTMSFNCGraphicsFillKind.gfkSolid;
        this.FOrientation = $mod.TTMSFNCGraphicsFillOrientation.gfoVertical;
        this.FOpacity = 1;
      };
      this.Changed();
    };
    this.BeginUpdate = function () {
      this.FUpdateCount += 1;
    };
    this.EndUpdate = function () {
      this.FUpdateCount -= 1;
      this.Changed();
    };
  });
  rtl.createClass($mod,"TTMSFNCGraphicsFill",$mod.TTMSFNCCustomGraphicsFill,function () {
    var $r = this.$rtti;
    $r.addProperty("OnChanged",0,pas.Classes.$rtti["TNotifyEvent"],"FOnChanged","FOnChanged");
    $r.addProperty("Kind",2,$mod.$rtti["TTMSFNCGraphicsFillKind"],"FKind","SetKind",{Default: $mod.TTMSFNCGraphicsFillKind.gfkSolid});
    $r.addProperty("Orientation",2,$mod.$rtti["TTMSFNCGraphicsFillOrientation"],"FOrientation","SetOrientation",{Default: $mod.TTMSFNCGraphicsFillOrientation.gfoVertical});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor",{Default: 16777215});
    $r.addProperty("ColorTo",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColorTo","SetColorTo",{Default: 8421504});
    $r.addProperty("ColorMirror",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColorMirror","SetColorMirror",{Default: -1});
    $r.addProperty("ColorMirrorTo",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColorMirrorTo","SetColorMirrorTo",{Default: -1});
    $r.addProperty("TextureMode",2,$mod.$rtti["TTMSFNCGraphicsTextureMode"],"FTextureMode","SetTextureMode",{Default: $mod.TTMSFNCGraphicsTextureMode.gtmStretch});
    $r.addProperty("Texture",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FTexture","SetTexture");
  });
  rtl.createClass($mod,"TTMSFNCGraphicsFont",pas["WEBLib.Graphics"].TFont,function () {
    this.$init = function () {
      pas["WEBLib.Graphics"].TFont.$init.call(this);
      this.FUpdateCount = 0;
      this.FOnChanged = null;
    };
    this.$final = function () {
      this.FOnChanged = undefined;
      pas["WEBLib.Graphics"].TFont.$final.call(this);
    };
    this.DoChanged = function (Sender) {
      if ((this.FOnChanged != null) && (this.FUpdateCount === 0)) this.FOnChanged(this);
    };
    this.Create$2 = function () {
      pas["WEBLib.Graphics"].TFont.Create$1.call(this);
      this.FOnChange = rtl.createCallback(this,"DoChanged");
      return this;
    };
    this.Assign = function (Source) {
      pas["WEBLib.Graphics"].TFont.Assign.call(this,Source);
      this.DoChanged(this);
    };
    this.AssignSource = function (Source) {
      this.Assign(Source);
    };
    this.BeginUpdate = function () {
      this.FUpdateCount += 1;
    };
    this.EndUpdate = function () {
      this.FUpdateCount -= 1;
      this.DoChanged(this);
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomGraphicsStroke",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FUpdateCount = 0;
      this.FOnChanged = null;
      this.FKind = 0;
      this.FColor = 0;
      this.FWidth = 0.0;
      this.FOpacity = 0.0;
    };
    this.$final = function () {
      this.FOnChanged = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetKind = function (Value) {
      if (this.FKind !== Value) {
        this.FKind = Value;
        this.Changed();
      };
    };
    this.SetColor = function (Value) {
      if (this.FColor !== Value) {
        this.FColor = Value;
        if (this.FColor === -1) {
          this.FColor = -1}
         else if (this.FColor === 536870912) this.FColor = 15790320;
        this.Changed();
      };
    };
    this.SetWidth = function (Value) {
      if (this.FWidth !== Value) {
        this.FWidth = Value;
        this.Changed();
      };
    };
    this.SetOpacity = function (Value) {
      if (this.FOpacity !== Value) {
        this.FOpacity = Value;
        this.Changed();
      };
    };
    this.IsOpacityStored = function () {
      var Result = false;
      Result = this.FOpacity !== 1;
      return Result;
    };
    this.IsWidthStored = function () {
      var Result = false;
      Result = this.FWidth !== 1;
      return Result;
    };
    this.Changed = function () {
      if ((this.FOnChanged != null) && (this.FUpdateCount === 0)) this.FOnChanged(this);
    };
    this.Create$1 = function (AKind, AColor) {
      this.FKind = AKind;
      this.FColor = AColor;
      this.FOpacity = 1;
      this.FWidth = 1;
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomGraphicsStroke.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TTMSFNCCustomGraphicsStroke).FColor;
        this.FKind = rtl.as(Source,$mod.TTMSFNCCustomGraphicsStroke).FKind;
        this.FOpacity = rtl.as(Source,$mod.TTMSFNCCustomGraphicsStroke).FOpacity;
        this.FWidth = rtl.as(Source,$mod.TTMSFNCCustomGraphicsStroke).FWidth;
      } else if ($mod.TTMSFNCCustomGraphicsFill.isPrototypeOf(Source)) {
        this.FColor = rtl.as(Source,$mod.TTMSFNCCustomGraphicsFill).FColor;
        this.FKind = $mod.TTMSFNCGraphicsStrokeKind.gskSolid;
        this.FOpacity = 1;
        this.FWidth = 1;
      };
      this.Changed();
    };
    this.BeginUpdate = function () {
      this.FUpdateCount += 1;
    };
    this.EndUpdate = function () {
      this.FUpdateCount -= 1;
      this.Changed();
    };
  });
  rtl.createClass($mod,"TTMSFNCGraphicsStroke",$mod.TTMSFNCCustomGraphicsStroke,function () {
    var $r = this.$rtti;
    $r.addProperty("OnChanged",0,pas.Classes.$rtti["TNotifyEvent"],"FOnChanged","FOnChanged");
    $r.addProperty("Kind",2,$mod.$rtti["TTMSFNCGraphicsStrokeKind"],"FKind","SetKind",{Default: $mod.TTMSFNCGraphicsStrokeKind.gskSolid});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor",{Default: 12632256});
    $r.addProperty("Width",14,rtl.double,"FWidth","SetWidth",{stored: "IsWidthStored"});
  });
  rtl.recNewT($mod,"TTMSFNCGraphicsMatrix",function () {
    this.m11 = 0.0;
    this.m12 = 0.0;
    this.m13 = 0.0;
    this.m21 = 0.0;
    this.m22 = 0.0;
    this.m23 = 0.0;
    this.m31 = 0.0;
    this.m32 = 0.0;
    this.m33 = 0.0;
    this.$eq = function (b) {
      return (this.m11 === b.m11) && (this.m12 === b.m12) && (this.m13 === b.m13) && (this.m21 === b.m21) && (this.m22 === b.m22) && (this.m23 === b.m23) && (this.m31 === b.m31) && (this.m32 === b.m32) && (this.m33 === b.m33);
    };
    this.$assign = function (s) {
      this.m11 = s.m11;
      this.m12 = s.m12;
      this.m13 = s.m13;
      this.m21 = s.m21;
      this.m22 = s.m22;
      this.m23 = s.m23;
      this.m31 = s.m31;
      this.m32 = s.m32;
      this.m33 = s.m33;
      return this;
    };
    var $r = $mod.$rtti.$Record("TTMSFNCGraphicsMatrix",{});
    $r.addField("m11",rtl.double);
    $r.addField("m12",rtl.double);
    $r.addField("m13",rtl.double);
    $r.addField("m21",rtl.double);
    $r.addField("m22",rtl.double);
    $r.addField("m23",rtl.double);
    $r.addField("m31",rtl.double);
    $r.addField("m32",rtl.double);
    $r.addField("m33",rtl.double);
  });
  $mod.$rtti.$DynArray("TTMSFNCGraphicsPathPolygon",{eltype: pas["WEBLib.TMSFNCTypes"].$rtti["TPointF"]});
  this.TTMSFNCGraphicsPathPointKind = {"0": "gppMoveTo", gppMoveTo: 0, "1": "gppLineTo", gppLineTo: 1, "2": "gppCurveTo", gppCurveTo: 2, "3": "gppClose", gppClose: 3};
  $mod.$rtti.$Enum("TTMSFNCGraphicsPathPointKind",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCGraphicsPathPointKind});
  this.TTMSFNCGraphicsPathCubicBezier$clone = function (a) {
    var r = [];
    for (var i = 0; i < 4; i++) r.push(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(a[i]));
    return r;
  };
  $mod.$rtti.$StaticArray("TTMSFNCGraphicsPathCubicBezier",{dims: [4], eltype: pas["WEBLib.TMSFNCTypes"].$rtti["TPointF"]});
  rtl.recNewT($mod,"TTMSFNCGraphicsPathPoint",function () {
    this.Kind = 0;
    this.Dummy = false;
    this.$new = function () {
      var r = Object.create(this);
      r.Point = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      return r;
    };
    this.$eq = function (b) {
      return (this.Kind === b.Kind) && (this.Dummy === b.Dummy) && this.Point.$eq(b.Point);
    };
    this.$assign = function (s) {
      this.Kind = s.Kind;
      this.Dummy = s.Dummy;
      this.Point.$assign(s.Point);
      return this;
    };
    var $r = $mod.$rtti.$Record("TTMSFNCGraphicsPathPoint",{});
    $r.addField("Kind",$mod.$rtti["TTMSFNCGraphicsPathPointKind"]);
    $r.addField("Dummy",rtl.boolean);
    $r.addField("Point",pas["WEBLib.TMSFNCTypes"].$rtti["TPointF"]);
  });
  this.TTMSFNCGraphicsPathDrawMode = {"0": "pdmPolygon", pdmPolygon: 0, "1": "pdmPolyline", pdmPolyline: 1, "2": "pdmPath", pdmPath: 2};
  $mod.$rtti.$Enum("TTMSFNCGraphicsPathDrawMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCGraphicsPathDrawMode});
  rtl.createClass($mod,"TTMSFNCGraphicsPathPoints",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = $mod.TTMSFNCGraphicsPathPoint.$new();
      Result.$assign(rtl.getObject(this.Get(Index)));
      return Result;
    };
    this.SetItem = function (Index, Value) {
      var v = $mod.TTMSFNCGraphicsPathPoint.$new();
      v.$assign(Value);
      this.Put(Index,v);
    };
  });
  rtl.createClass($mod,"TTMSFNCGraphicsPath",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FStartPoint = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      this.FClippable = false;
      this.FPoints = null;
    };
    this.$final = function () {
      this.FStartPoint = undefined;
      this.FPoints = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.CalculateBezierCoefficients = function (Bezier, AX, BX, CX, AY, BY, CY) {
      CX.set(3 * (Bezier[1].X - Bezier[0].X));
      CY.set(3 * (Bezier[1].Y - Bezier[0].Y));
      BX.set((3 * (Bezier[2].X - Bezier[1].X)) - CX.get());
      BY.set((3 * (Bezier[2].Y - Bezier[1].Y)) - CY.get());
      AX.set(Bezier[3].X - Bezier[0].X - CX.get() - BX.get());
      AY.set(Bezier[3].Y - Bezier[0].Y - CY.get() - BY.get());
    };
    this.GetCount = function () {
      var Result = 0;
      Result = this.FPoints.GetCount();
      return Result;
    };
    this.GetPoint = function (AIndex) {
      var Result = $mod.TTMSFNCGraphicsPathPoint.$new();
      Result.$assign(this.FPoints.GetItem(AIndex));
      return Result;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FPoints = $mod.TTMSFNCGraphicsPathPoints.$create("Create$1");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FPoints");
      pas.System.TObject.Destroy.call(this);
    };
    this.Assign = function (Source) {
      var I = 0;
      if ($mod.TTMSFNCGraphicsPath.isPrototypeOf(Source)) {
        this.FPoints.SetCount(Source.GetCount());
        for (var $l1 = 0, $end2 = Source.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          this.FPoints.SetItem(I,Source.GetPoint(I));
        };
      } else pas.Classes.TPersistent.Assign.apply(this,arguments);
    };
    this.LastPoint = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      if (this.GetCount() > 0) {
        Result.$assign(this.FPoints.GetItem(this.FPoints.GetCount() - 1).Point)}
       else {
        Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(0,0));
      };
      return Result;
    };
    this.IsPointVisible = function (P) {
      var Result = false;
      var pt = [];
      pt = rtl.arraySetLength(pt,pas["WEBLib.TMSFNCTypes"].TPointF,0);
      this.FlattenToPolygon({get: function () {
          return pt;
        }, set: function (v) {
          pt = v;
        }},0.25);
      Result = $mod.PointInPoly(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(P),pt);
      return Result;
    };
    this.IsRectVisible = function (R) {
      var Result = false;
      var pt = [];
      pt = rtl.arraySetLength(pt,pas["WEBLib.TMSFNCTypes"].TPointF,0);
      this.FlattenToPolygon({get: function () {
          return pt;
        }, set: function (v) {
          pt = v;
        }},0.25);
      Result = $mod.PolyInRect(pt,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(R));
      return Result;
    };
    this.PointOnBezier = function (StartPoint, AX, BX, CX, AY, BY, CY, T) {
      var Result = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var SquareT = 0.0;
      var CubeT = 0.0;
      SquareT = T * T;
      CubeT = SquareT * T;
      Result.X = (AX * CubeT) + (BX * SquareT) + (CX * T) + StartPoint.X;
      Result.Y = (AY * CubeT) + (BY * SquareT) + (CY * T) + StartPoint.Y;
      return Result;
    };
    this.CreateBezier = function (Bezier, PointCount) {
      var Result = [];
      var AX = 0.0;
      var BX = 0.0;
      var CX = 0.0;
      var AY = 0.0;
      var BY = 0.0;
      var CY = 0.0;
      var DT = 0.0;
      var T = 0.0;
      var I = 0;
      if (PointCount === 0) return Result;
      DT = 1 / ((1 * PointCount) - 1);
      T = 0;
      Result = rtl.arraySetLength(Result,pas["WEBLib.TMSFNCTypes"].TPointF,PointCount);
      this.CalculateBezierCoefficients(Bezier,{get: function () {
          return AX;
        }, set: function (v) {
          AX = v;
        }},{get: function () {
          return BX;
        }, set: function (v) {
          BX = v;
        }},{get: function () {
          return CX;
        }, set: function (v) {
          CX = v;
        }},{get: function () {
          return AY;
        }, set: function (v) {
          AY = v;
        }},{get: function () {
          return BY;
        }, set: function (v) {
          BY = v;
        }},{get: function () {
          return CY;
        }, set: function (v) {
          CY = v;
        }});
      for (var $l1 = 0, $end2 = PointCount - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        Result[I].$assign(this.PointOnBezier(Bezier[0],AX,BX,CX,AY,BY,CY,T));
        T = T + DT;
      };
      return Result;
    };
    var SmallAmount = 0.001;
    this.GetBounds = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var I = 0;
      var pt = $mod.TTMSFNCGraphicsPathPoint.$new();
      if (this.FPoints.GetCount() < 1) return pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0);
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0xFFFF,0xFFFF,-0xFFFF,-0xFFFF));
      for (var $l1 = 0, $end2 = this.FPoints.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        pt.$assign(this.FPoints.GetItem(I));
        if (pt.Kind === $mod.TTMSFNCGraphicsPathPointKind.gppClose) continue;
        if (pt.Point.X < Result.Left) Result.Left = pt.Point.X;
        if (pt.Point.X > Result.Right) Result.Right = pt.Point.X;
        if (pt.Point.Y < Result.Top) Result.Top = pt.Point.Y;
        if (pt.Point.Y > Result.Bottom) Result.Bottom = pt.Point.Y;
      };
      if (pas.Math.SameValue(Result.Right - Result.Left,0,0.001)) Result.Right = Result.Left + 0.001;
      if (pas.Math.SameValue(Result.Bottom - Result.Top,0,0.001)) Result.Bottom = Result.Top + 0.001;
      return Result;
    };
    this.IsClippable = function () {
      var Result = false;
      Result = this.FClippable;
      return Result;
    };
    this.MoveTo = function (P) {
      var pt = $mod.TTMSFNCGraphicsPathPoint.$new();
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppMoveTo;
      pt.Point.$assign(P);
      this.FPoints.Add($mod.TTMSFNCGraphicsPathPoint.$clone(pt));
      this.FStartPoint.$assign(this.FPoints.GetItem(this.FPoints.GetCount() - 1).Point);
    };
    this.LineTo = function (P) {
      var pt = $mod.TTMSFNCGraphicsPathPoint.$new();
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppLineTo;
      pt.Point.$assign(P);
      this.FPoints.Add($mod.TTMSFNCGraphicsPathPoint.$clone(pt));
      if ((P.X === this.FStartPoint.X) && (P.Y === this.FStartPoint.Y)) this.FClippable = true;
    };
    this.CurveTo = function (ControlPoint1, ControlPoint2, EndPoint) {
      var pt = $mod.TTMSFNCGraphicsPathPoint.$new();
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppCurveTo;
      pt.Point.$assign(ControlPoint1);
      this.FPoints.Add($mod.TTMSFNCGraphicsPathPoint.$clone(pt));
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppCurveTo;
      pt.Point.$assign(ControlPoint2);
      this.FPoints.Add($mod.TTMSFNCGraphicsPathPoint.$clone(pt));
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppCurveTo;
      pt.Point.$assign(EndPoint);
      this.FPoints.Add($mod.TTMSFNCGraphicsPathPoint.$clone(pt));
    };
    this.SmoothCurveTo = function (ControlPoint2, EndPoint) {
      var ControlPoint1 = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      if (this.GetCount() > 2) {
        ControlPoint1.X = this.LastPoint().X + (this.LastPoint().X - this.FPoints.GetItem(this.FPoints.GetCount() - 2).Point.X);
        ControlPoint1.Y = this.LastPoint().Y + (this.LastPoint().Y - this.FPoints.GetItem(this.FPoints.GetCount() - 2).Point.Y);
      } else ControlPoint1.$assign(ControlPoint2);
      this.CurveTo(ControlPoint1,ControlPoint2,EndPoint);
    };
    var OneThird = 1 / 3;
    var TwoThirds = 2 / 3;
    this.QuadCurveTo = function (ControlPoint, EndPoint) {
      var LP = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var CP1 = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var CP2 = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      LP.$assign(this.LastPoint());
      CP1.X = (0.33333333333333331 * LP.X) + (0.66666666666666663 * ControlPoint.X);
      CP1.Y = (0.33333333333333331 * LP.Y) + (0.66666666666666663 * ControlPoint.Y);
      CP2.X = (0.66666666666666663 * ControlPoint.X) + (0.33333333333333331 * EndPoint.X);
      CP2.Y = (0.66666666666666663 * ControlPoint.Y) + (0.33333333333333331 * EndPoint.Y);
      this.CurveTo(CP1,CP2,EndPoint);
    };
    this.AddPolygon = function (APolygon) {
      var I = 0;
      for (var $l1 = 0, $end2 = rtl.length(APolygon) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.LineTo(APolygon[I]);
      };
    };
    this.ClosePath = function () {
      var pt = $mod.TTMSFNCGraphicsPathPoint.$new();
      pt.Kind = $mod.TTMSFNCGraphicsPathPointKind.gppClose;
      pt.Point.$assign(this.FStartPoint);
      this.FPoints.Add($mod.TTMSFNCGraphicsPathPoint.$clone(pt));
      this.FClippable = true;
    };
    this.AddLine = function (StartPoint, EndPoint) {
      if (this.GetCount() === 0) {
        this.MoveTo(StartPoint)}
       else this.LineTo(StartPoint);
      this.LineTo(EndPoint);
    };
    this.AddEllipse = function (ARect) {
      var CX = 0.0;
      var CY = 0.0;
      var PX = 0.0;
      var PY = 0.0;
      var c = 0.0;
      c = 0.5522847498;
      CX = (ARect.Left + ARect.Right) / 2;
      CY = (ARect.Top + ARect.Bottom) / 2;
      PX = c * ((ARect.Right - ARect.Left) / 2);
      PY = c * ((ARect.Bottom - ARect.Top) / 2);
      this.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,CY));
      this.CurveTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,CY - PY),pas["WEBLib.TMSFNCTypes"].PointF(CX - PX,ARect.Top),pas["WEBLib.TMSFNCTypes"].PointF(CX,ARect.Top));
      this.CurveTo(pas["WEBLib.TMSFNCTypes"].PointF(CX + PX,ARect.Top),pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,CY - PY),pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,CY));
      this.CurveTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,CY + PY),pas["WEBLib.TMSFNCTypes"].PointF(CX + PX,ARect.Bottom),pas["WEBLib.TMSFNCTypes"].PointF(CX,ARect.Bottom));
      this.CurveTo(pas["WEBLib.TMSFNCTypes"].PointF(CX - PX,ARect.Bottom),pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,CY + PY),pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,CY));
      this.FClippable = true;
    };
    this.AddRectangle = function (ARect) {
      this.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top));
      this.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Top));
      this.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Bottom));
      this.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom));
      this.ClosePath();
      this.FClippable = true;
    };
    var BezierArcAngleEpsilon = 0.01;
    var MinSweepAngle = 1E-10;
    this.AddArc = function (Center, Radius, StartAngle, SweepAngle) {
      var UseMoveTo = false;
      var I = 0;
      var F = 0.0;
      var TotalSweep = 0.0;
      var LocalSweep = 0.0;
      var PrevSweep = 0.0;
      var Done = false;
      StartAngle = pas.Math.DegToRad(StartAngle);
      SweepAngle = pas.Math.DegToRad(SweepAngle);
      I = pas.System.Trunc(StartAngle / (2 * Math.PI));
      F = StartAngle - (I * 2 * Math.PI);
      StartAngle = F;
      if (SweepAngle >= (2 * Math.PI)) SweepAngle = 2 * Math.PI;
      if (SweepAngle <= (-2 * Math.PI)) SweepAngle = -2 * Math.PI;
      if (Math.abs(SweepAngle) < 1E-10) return;
      TotalSweep = 0;
      Done = false;
      UseMoveTo = true;
      do {
        if (SweepAngle < 0) {
          PrevSweep = TotalSweep;
          LocalSweep = -Math.PI / 2;
          TotalSweep = TotalSweep - (Math.PI / 2);
          if (TotalSweep <= (SweepAngle + 0.01)) {
            LocalSweep = SweepAngle - PrevSweep;
            Done = true;
          };
        } else {
          PrevSweep = TotalSweep;
          LocalSweep = Math.PI / 2;
          TotalSweep = TotalSweep + (Math.PI / 2);
          if (TotalSweep >= (SweepAngle - 0.01)) {
            LocalSweep = SweepAngle - PrevSweep;
            Done = true;
          };
        };
        $impl.DrawArcWithBezier(this,Center.X,Center.Y,Radius.X,Radius.Y,StartAngle,LocalSweep,UseMoveTo);
        UseMoveTo = false;
        StartAngle = StartAngle + LocalSweep;
      } while (!Done);
    };
    this.AddPath = function (APath) {
      var I = 0;
      this.FPoints.SetCapacity(this.FPoints.GetCount() + APath.GetCount());
      for (var $l1 = 0, $end2 = APath.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.FPoints.Add($mod.TTMSFNCGraphicsPathPoint.$clone(APath.GetPoint(I)));
      };
    };
    this.ApplyMatrix = function (AMatrix) {
      var I = 0;
      var pt = $mod.TTMSFNCGraphicsPathPoint.$new();
      if (this.FPoints.GetCount() > 0) {
        for (var $l1 = 0, $end2 = this.FPoints.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          if (this.FPoints.GetItem(I).Kind in rtl.createSet($mod.TTMSFNCGraphicsPathPointKind.gppMoveTo,$mod.TTMSFNCGraphicsPathPointKind.gppLineTo,$mod.TTMSFNCGraphicsPathPointKind.gppCurveTo)) {
            pt.$assign(this.FPoints.GetItem(I));
            pt.Point.$assign($mod.MatrixMultiply$1(pt.Point,AMatrix));
            this.FPoints.SetItem(I,pt);
          };
        };
      };
    };
    this.Clear = function () {
      this.FPoints.Clear();
    };
    this.Flatten = function (Flatness) {
      var J = 0;
      var I = 0;
      var BPts = [];
      var B = rtl.arraySetLength(null,pas["WEBLib.TMSFNCTypes"].TPointF,4);
      var F = 0.0;
      var Len = 0.0;
      var SegCount = 0;
      var OldPathData = null;
      var CurPoint = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var x = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      if (this.FPoints.GetCount() > 0) {
        F = Math.max(Flatness,0.05);
        OldPathData = $mod.TTMSFNCGraphicsPathPoints.$create("Create$1");
        try {
          OldPathData.SetCount(this.FPoints.GetCount());
          for (var $l1 = 0, $end2 = this.FPoints.GetCount() - 1; $l1 <= $end2; $l1++) {
            J = $l1;
            OldPathData.Add($mod.TTMSFNCGraphicsPathPoint.$clone(this.FPoints.GetItem(J)));
          };
          this.FPoints.Clear();
          J = 0;
          while (J < OldPathData.GetCount()) {
            var $tmp3 = OldPathData.GetItem(J).Kind;
            if ($tmp3 === $mod.TTMSFNCGraphicsPathPointKind.gppMoveTo) {
              this.MoveTo(OldPathData.GetItem(J).Point);
              CurPoint.$assign(OldPathData.GetItem(J).Point);
            } else if ($tmp3 === $mod.TTMSFNCGraphicsPathPointKind.gppLineTo) {
              this.LineTo(OldPathData.GetItem(J).Point);
              CurPoint.$assign(OldPathData.GetItem(J).Point);
            } else if ($tmp3 === $mod.TTMSFNCGraphicsPathPointKind.gppCurveTo) {
              B[0].$assign(CurPoint);
              B[1].$assign(OldPathData.GetItem(J).Point);
              J += 1;
              B[2].$assign(OldPathData.GetItem(J).Point);
              J += 1;
              B[3].$assign(OldPathData.GetItem(J).Point);
              BPts = this.CreateBezier(B,6);
              Len = 0;
              for (var $l4 = 0, $end5 = rtl.length(BPts) - 1 - 1; $l4 <= $end5; $l4++) {
                I = $l4;
                x.X = BPts[I].X - BPts[I + 1].X;
                x.Y = BPts[I].Y - BPts[I + 1].Y;
                Len = Len + pas["WEBLib.TMSFNCTypes"].GetPointLength(x);
              };
              SegCount = Math.round(Len / F);
              if (SegCount < 2) {
                this.LineTo(B[3])}
               else {
                BPts = this.CreateBezier(B,SegCount);
                for (var $l6 = 0, $end7 = rtl.length(BPts) - 1; $l6 <= $end7; $l6++) {
                  I = $l6;
                  this.LineTo(BPts[I]);
                };
                CurPoint.$assign(OldPathData.GetItem(J).Point);
              };
            } else if ($tmp3 === $mod.TTMSFNCGraphicsPathPointKind.gppClose) this.ClosePath();
            J += 1;
          };
        } finally {
          OldPathData = rtl.freeLoc(OldPathData);
        };
      };
    };
    this.FlattenToPolygon = function (Polygon, Flatness) {
      var $Self = this;
      function AddPoint(P) {
        if ((rtl.length(Polygon.get()) > 0) && pas.Math.SameValue(P.X,Polygon.get()[rtl.length(Polygon.get()) - 1].X,0.001) && pas.Math.SameValue(P.Y,Polygon.get()[rtl.length(Polygon.get()) - 1].Y,0.001)) return;
        Polygon.set(rtl.arraySetLength(Polygon.get(),pas["WEBLib.TMSFNCTypes"].TPointF,rtl.length(Polygon.get()) + 1));
        Polygon.get()[rtl.length(Polygon.get()) - 1].$assign(P);
      };
      var J = 0;
      var I = 0;
      var BPts = [];
      var B = rtl.arraySetLength(null,pas["WEBLib.TMSFNCTypes"].TPointF,4);
      var SP = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var CurPoint = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var X = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var F = 0.0;
      var Len = 0.0;
      var SegCount = 0;
      Polygon.set(rtl.arraySetLength(Polygon.get(),pas["WEBLib.TMSFNCTypes"].TPointF,0));
      if ($Self.FPoints.GetCount() > 0) {
        F = Math.max(Flatness,0.05);
        J = 0;
        while (J < $Self.FPoints.GetCount()) {
          var $tmp1 = $Self.FPoints.GetItem(J).Kind;
          if ($tmp1 === $mod.TTMSFNCGraphicsPathPointKind.gppMoveTo) {
            AddPoint($Self.FPoints.GetItem(J).Point);
            CurPoint.$assign($Self.FPoints.GetItem(J).Point);
            SP.$assign(CurPoint);
          } else if ($tmp1 === $mod.TTMSFNCGraphicsPathPointKind.gppLineTo) {
            AddPoint($Self.FPoints.GetItem(J).Point);
            CurPoint.$assign($Self.FPoints.GetItem(J).Point);
          } else if ($tmp1 === $mod.TTMSFNCGraphicsPathPointKind.gppCurveTo) {
            B[0].$assign(CurPoint);
            B[1].$assign($Self.FPoints.GetItem(J).Point);
            J += 1;
            B[2].$assign($Self.FPoints.GetItem(J).Point);
            J += 1;
            B[3].$assign($Self.FPoints.GetItem(J).Point);
            BPts = $Self.CreateBezier(B,6);
            Len = 0;
            for (var $l2 = 0, $end3 = rtl.length(BPts) - 1 - 1; $l2 <= $end3; $l2++) {
              I = $l2;
              X.X = BPts[I].X - BPts[I + 1].X;
              X.Y = BPts[I].Y - BPts[I + 1].Y;
              Len = Len + pas["WEBLib.TMSFNCTypes"].GetPointLength(X);
            };
            SegCount = Math.round(Len / F);
            if (SegCount < 2) {
              AddPoint(B[0]);
              AddPoint(B[3]);
            } else {
              BPts = $Self.CreateBezier(B,SegCount);
              for (var $l4 = 0, $end5 = rtl.length(BPts) - 1; $l4 <= $end5; $l4++) {
                I = $l4;
                AddPoint(BPts[I]);
              };
            };
            CurPoint.$assign($Self.FPoints.GetItem(J).Point);
          } else if ($tmp1 === $mod.TTMSFNCGraphicsPathPointKind.gppClose) {
            AddPoint(SP);
          };
          J += 1;
        };
      };
    };
  });
  rtl.createClass($mod,"TTMSFNCGraphicsColorObject",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FColor = 0;
    };
    this.Create$1 = function (AColor) {
      this.FColor = AColor;
      return this;
    };
  });
  this.TTMSFNCGraphicsModifyRectMode = {"0": "gcrmNone", gcrmNone: 0, "1": "gcrmExpandAll", gcrmExpandAll: 1, "2": "gcrmShrinkAll", gcrmShrinkAll: 2, "3": "gcrmShiftRightAndExpandHeight", gcrmShiftRightAndExpandHeight: 3, "4": "gcrmShiftDownAndExpandWidth", gcrmShiftDownAndExpandWidth: 4, "5": "gcrmShiftRightAndShrinkHeight", gcrmShiftRightAndShrinkHeight: 5, "6": "gcrmShiftRightDown", gcrmShiftRightDown: 6, "7": "gcrmShiftRightUp", gcrmShiftRightUp: 7, "8": "gcrmShiftLeftUp", gcrmShiftLeftUp: 8, "9": "gcrmShiftLeftDown", gcrmShiftLeftDown: 9, "10": "gcrmShiftUpAndExpandWidth", gcrmShiftUpAndExpandWidth: 10, "11": "gcrmShiftLeftAndExpandHeight", gcrmShiftLeftAndExpandHeight: 11};
  $mod.$rtti.$Enum("TTMSFNCGraphicsModifyRectMode",{minvalue: 0, maxvalue: 11, ordtype: 1, enumtype: this.TTMSFNCGraphicsModifyRectMode});
  this.TTMSFNCGraphicsModifyPointMode = {"0": "gcpmNone", gcpmNone: 0, "1": "gcpmLeftUp", gcpmLeftUp: 1, "2": "gcpmRightDown", gcpmRightDown: 2, "3": "gcpmLeftDown", gcpmLeftDown: 3, "4": "gcpmRightUp", gcpmRightUp: 4};
  $mod.$rtti.$Enum("TTMSFNCGraphicsModifyPointMode",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TTMSFNCGraphicsModifyPointMode});
  this.TTMSFNCGraphicsExpanderState = {"0": "gesCollapsed", gesCollapsed: 0, "1": "gesExpanded", gesExpanded: 1};
  $mod.$rtti.$Enum("TTMSFNCGraphicsExpanderState",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCGraphicsExpanderState});
  this.TTMSFNCGraphicsCompactState = {"0": "gcsCollapsed", gcsCollapsed: 0, "1": "gcsExpanded", gcsExpanded: 1};
  $mod.$rtti.$Enum("TTMSFNCGraphicsCompactState",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCGraphicsCompactState});
  this.TTMSFNCGraphicsCorner = {"0": "gcTopLeft", gcTopLeft: 0, "1": "gcTopRight", gcTopRight: 1, "2": "gcBottomLeft", gcBottomLeft: 2, "3": "gcBottomRight", gcBottomRight: 3};
  $mod.$rtti.$Enum("TTMSFNCGraphicsCorner",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCGraphicsCorner});
  $mod.$rtti.$Set("TTMSFNCGraphicsCorners",{comptype: $mod.$rtti["TTMSFNCGraphicsCorner"]});
  this.ModifyRect = function (ARect, ARectMode) {
    var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
    Result.$assign(ARect);
    var $tmp1 = ARectMode;
    if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmExpandAll) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) + 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) + 0.5,pas.System.Int(Result.Top) + 0.5,pas.System.Int(Result.Right) - 0.5,pas.System.Int(Result.Bottom) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftRightAndExpandHeight) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) + 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) + 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftRightDown) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) + 0.5,pas.System.Int(Result.Top) + 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) + 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftRightAndShrinkHeight) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) + 0.5,pas.System.Int(Result.Top) + 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftDownAndExpandWidth) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) + 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) + 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftUpAndExpandWidth) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftRightUp) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) + 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) + 0.5,pas.System.Int(Result.Bottom) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftUp) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) - 0.5,pas.System.Int(Result.Bottom) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftDown) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) + 0.5,pas.System.Int(Result.Right) - 0.5,pas.System.Int(Result.Bottom) + 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyRectMode.gcrmShiftLeftAndExpandHeight) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(Result.Left) - 0.5,pas.System.Int(Result.Top) - 0.5,pas.System.Int(Result.Right) - 0.5,pas.System.Int(Result.Bottom) + 0.5));
    return Result;
  };
  this.ModifyPoint = function (APoint, APointMode) {
    var Result = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
    Result.$assign(APoint);
    var $tmp1 = APointMode;
    if ($tmp1 === $mod.TTMSFNCGraphicsModifyPointMode.gcpmRightDown) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(pas.System.Int(Result.X) + 0.5,pas.System.Int(Result.Y) + 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyPointMode.gcpmLeftUp) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(pas.System.Int(Result.X) - 0.5,pas.System.Int(Result.Y) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyPointMode.gcpmRightUp) {
      Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(pas.System.Int(Result.X) + 0.5,pas.System.Int(Result.Y) - 0.5))}
     else if ($tmp1 === $mod.TTMSFNCGraphicsModifyPointMode.gcpmLeftDown) Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(pas.System.Int(Result.X) - 0.5,pas.System.Int(Result.Y) + 0.5));
    return Result;
  };
  this.MakeGraphicsColor = function (ARed, AGreen, ABlue) {
    var Result = 0;
    Result = pas["WEBLib.Graphics"].RGB(ARed,AGreen,ABlue);
    return Result;
  };
  this.Lighter = function (AColor, APercent) {
    var Result = 0;
    var r = 0;
    var g = 0;
    var b = 0;
    AColor = pas["WEBLib.Graphics"].ColorToRGB(AColor);
    r = pas["WEBLib.Graphics"].GetRValue(AColor);
    g = pas["WEBLib.Graphics"].GetGValue(AColor);
    b = pas["WEBLib.Graphics"].GetBValue(AColor);
    r = r + Math.min(255,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivInt(255 - r,APercent,100));
    g = g + Math.min(255,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivInt(255 - g,APercent,100));
    b = b + Math.min(255,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivInt(255 - b,APercent,100));
    Result = $mod.MakeGraphicsColor(r,g,b);
    return Result;
  };
  this.Darker = function (AColor, APercent) {
    var Result = 0;
    var r = 0;
    var g = 0;
    var b = 0;
    AColor = pas["WEBLib.Graphics"].ColorToRGB(AColor);
    r = pas["WEBLib.Graphics"].GetRValue(AColor);
    g = pas["WEBLib.Graphics"].GetGValue(AColor);
    b = pas["WEBLib.Graphics"].GetBValue(AColor);
    r = r - Math.max(0,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivInt(255 - r,APercent,100));
    g = g - Math.max(0,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivInt(255 - g,APercent,100));
    b = b - Math.max(0,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivInt(255 - b,APercent,100));
    Result = $mod.MakeGraphicsColor(r,g,b);
    return Result;
  };
  this.Blend = function (AColor1, AColor2, ALevel) {
    var Result = 0;
    var c1 = 0;
    var c2 = 0;
    var r = 0;
    var g = 0;
    var b = 0;
    var v1 = 0;
    var v2 = 0;
    ALevel = Math.round(2.55 * ALevel);
    c1 = pas["WEBLib.Graphics"].ColorToRGB(AColor1);
    c2 = pas["WEBLib.Graphics"].ColorToRGB(AColor2);
    v1 = c1 & 255;
    v2 = c2 & 255;
    r = Math.max(0,Math.min(255,((ALevel * (v1 - v2)) >>> 8) + v2));
    v1 = Math.floor(c1 / 256) & 255;
    v2 = Math.floor(c2 / 256) & 255;
    g = Math.max(0,Math.min(255,((ALevel * (v1 - v2)) >>> 8) + v2));
    v1 = Math.floor(c1 / 65536) & 255;
    v2 = Math.floor(c2 / 65536) & 255;
    b = Math.max(0,Math.min(255,((ALevel * (v1 - v2)) >>> 8) + v2));
    Result = (b << 16) + (g << 8) + r;
    return Result;
  };
  this.ColorLookup = function () {
    var Result = null;
    Result = $impl.FColorLookup;
    return Result;
  };
  this.PointInPoly = function (APoint, APolygon) {
    var Result = false;
    var minX = 0.0;
    var maxX = 0.0;
    var minY = 0.0;
    var maxY = 0.0;
    var I = 0;
    var J = 0;
    var q = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
    var pt = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
    var ptn = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
    var inside = false;
    var chk = false;
    var calc = 0.0;
    var chkc = false;
    Result = false;
    if (rtl.length(APolygon) === 0) return Result;
    minX = APolygon[0].X;
    maxX = APolygon[0].X;
    minY = APolygon[0].Y;
    maxY = APolygon[0].Y;
    for (var $l1 = 1, $end2 = rtl.length(APolygon) - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      q.$assign(APolygon[I]);
      minX = Math.min(q.X,minX);
      maxX = Math.max(q.X,maxX);
      minY = Math.min(q.Y,minY);
      maxY = Math.max(q.Y,maxY);
    };
    if ((APoint.X < minX) || (APoint.X > maxX) || (APoint.Y < minY) || (APoint.Y > maxY)) {
      Result = false;
      return Result;
    };
    inside = false;
    J = rtl.length(APolygon) - 1;
    for (var $l3 = 0, $end4 = rtl.length(APolygon) - 1; $l3 <= $end4; $l3++) {
      I = $l3;
      pt.$assign(APolygon[I]);
      ptn.$assign(APolygon[J]);
      chk = (pt.Y > APoint.Y) !== (ptn.Y > APoint.Y);
      if ((ptn.Y - pt.Y) !== 0) {
        calc = (((ptn.X - pt.X) * (APoint.Y - pt.Y)) / (ptn.Y - pt.Y)) + pt.X;
        chkc = APoint.X < calc;
        if (chk && chkc) inside = !inside;
      };
      J = I;
    };
    Result = inside;
    return Result;
  };
  this.RectInPoly = function (ARect, APolygon) {
    var Result = false;
    Result = $mod.PointInPoly(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Top)),APolygon) || $mod.PointInPoly(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Top)),APolygon) || $mod.PointInPoly(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left,ARect.Bottom)),APolygon) || $mod.PointInPoly(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right,ARect.Bottom)),APolygon);
    return Result;
  };
  this.PolyInRect = function (APolygon, ARect) {
    var Result = false;
    var I = 0;
    Result = false;
    for (var $l1 = 0, $end2 = rtl.length(APolygon) - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(ARect,APolygon[I])) {
        Result = true;
        return Result;
      };
    };
    return Result;
  };
  this.DrawGradient = function (ACanvas, AColor, AColorTo, ARect, ARounding, ACorners, ADirection) {
    var diffr = 0;
    var startr = 0;
    var endr = 0;
    var diffg = 0;
    var startg = 0;
    var endg = 0;
    var diffb = 0;
    var startb = 0;
    var endb = 0;
    var si = 0;
    var rstepr = 0.0;
    var rstepg = 0.0;
    var rstepb = 0.0;
    var rstepw = 0.0;
    var i = 0;
    var stepw = 0;
    var oldp = 0;
    var oldb = 0;
    var Steps = 0;
    var R = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
    var dr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
    var iend = 0.0;
    var a = 0.0;
    var oldps = 0;
    var oldbs = 0;
    R.$assign(ARect);
    if (ADirection) {
      Steps = Math.round(R.Right - R.Left)}
     else Steps = Math.round(R.Bottom - R.Top);
    if (Steps === 0) Steps = 1;
    AColor = pas["WEBLib.Graphics"].ColorToRGB(AColor);
    AColorTo = pas["WEBLib.Graphics"].ColorToRGB(AColorTo);
    startr = AColor & 0xFF;
    startg = Math.floor((AColor & 0xFF00) / 256);
    startb = Math.floor((AColor & 0xFF0000) / 65536);
    endr = AColorTo & 0xFF;
    endg = Math.floor((AColorTo & 0xFF00) / 256);
    endb = Math.floor((AColorTo & 0xFF0000) / 65536);
    diffr = endr - startr;
    diffg = endg - startg;
    diffb = endb - startb;
    rstepr = diffr / Steps;
    rstepg = diffg / Steps;
    rstepb = diffb / Steps;
    if (ADirection) {
      rstepw = (R.Right - R.Left) / Steps}
     else rstepw = (R.Bottom - R.Top) / Steps;
    oldb = ACanvas.FBrush.FColor;
    oldbs = ACanvas.FBrush.FStyle;
    oldp = ACanvas.FPen.FColor;
    oldps = ACanvas.FPen.FStyle;
    ACanvas.FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psSolid;
    ACanvas.FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsSolid;
    for (var $l1 = 0, $end2 = Steps - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      endr = startr + Math.round(rstepr * i);
      endg = startg + Math.round(rstepg * i);
      endb = startb + Math.round(rstepb * i);
      stepw = Math.round(i * rstepw);
      ACanvas.FPen.SetColor(endr + (endg << 8) + (endb << 16));
      ACanvas.FBrush.FColor = ACanvas.FPen.FColor;
      if (ADirection) {
        si = pas.System.Trunc(rstepw);
        iend = R.Left + stepw + si;
        iend = Math.min(iend,R.Right);
        dr.$assign(R);
        if ((i <= ARounding) && (($mod.TTMSFNCGraphicsCorner.gcTopLeft in ACorners) || ($mod.TTMSFNCGraphicsCorner.gcBottomLeft in ACorners))) {
          a = Math.sqrt(Math.pow(ARounding,2) - Math.pow(ARounding - i,2));
          if ($mod.TTMSFNCGraphicsCorner.gcTopLeft in ACorners) dr.Top = dr.Top + Math.round(ARounding - a);
          if ($mod.TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) dr.Bottom = dr.Bottom - Math.round(ARounding - a);
        } else if ((i >= (Steps - ARounding)) && (($mod.TTMSFNCGraphicsCorner.gcBottomRight in ACorners) || ($mod.TTMSFNCGraphicsCorner.gcTopRight in ACorners))) {
          a = Math.sqrt(Math.pow(ARounding,2) - Math.pow(ARounding - (Steps - i),2));
          if ($mod.TTMSFNCGraphicsCorner.gcTopRight in ACorners) dr.Top = dr.Top + Math.round(ARounding - a);
          if ($mod.TTMSFNCGraphicsCorner.gcBottomRight in ACorners) dr.Bottom = dr.Bottom - Math.round(ARounding - a);
        };
        ACanvas.Rectangle(dr.Left + stepw,dr.Top,iend,dr.Bottom);
      } else {
        si = pas.System.Trunc(rstepw);
        iend = R.Top + stepw + si;
        iend = Math.min(iend,R.Bottom);
        dr.$assign(R);
        if ((i <= ARounding) && (($mod.TTMSFNCGraphicsCorner.gcTopLeft in ACorners) || ($mod.TTMSFNCGraphicsCorner.gcTopRight in ACorners))) {
          a = Math.sqrt(Math.pow(ARounding,2) - Math.pow(ARounding - i,2));
          if ($mod.TTMSFNCGraphicsCorner.gcTopLeft in ACorners) dr.Left = dr.Left + Math.round(ARounding - a);
          if ($mod.TTMSFNCGraphicsCorner.gcTopRight in ACorners) dr.Right = dr.Right - Math.round(ARounding - a);
        } else if ((i >= (Steps - ARounding)) && (($mod.TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) || ($mod.TTMSFNCGraphicsCorner.gcBottomRight in ACorners))) {
          a = Math.sqrt(Math.pow(ARounding,2) - Math.pow(ARounding - (Steps - i),2));
          if ($mod.TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) dr.Left = dr.Left + Math.round(ARounding - a);
          if ($mod.TTMSFNCGraphicsCorner.gcBottomRight in ACorners) dr.Right = dr.Right - Math.round(ARounding - a);
        };
        ACanvas.Rectangle(dr.Left,dr.Top + stepw,dr.Right,iend);
      };
    };
    ACanvas.FBrush.FColor = oldb;
    ACanvas.FBrush.FStyle = oldbs;
    ACanvas.FPen.SetColor(oldp);
    ACanvas.FPen.FStyle = oldps;
  };
  this.IsMatrixEmpty = function (AMatrix) {
    var Result = false;
    Result = (AMatrix.m11 === 0) && (AMatrix.m12 === 0) && (AMatrix.m13 === 0) && (AMatrix.m21 === 0) && (AMatrix.m22 === 0) && (AMatrix.m23 === 0) && (AMatrix.m31 === 0) && (AMatrix.m32 === 0) && (AMatrix.m33 === 0);
    return Result;
  };
  this.MatrixEmpty = function () {
    var Result = $mod.TTMSFNCGraphicsMatrix.$new();
    Result.m11 = 0;
    Result.m12 = 0;
    Result.m13 = 0;
    Result.m21 = 0;
    Result.m22 = 0;
    Result.m23 = 0;
    Result.m31 = 0;
    Result.m32 = 0;
    Result.m33 = 0;
    return Result;
  };
  this.MatrixIdentity = function () {
    var Result = $mod.TTMSFNCGraphicsMatrix.$new();
    Result.m11 = 1;
    Result.m12 = 0;
    Result.m13 = 0;
    Result.m21 = 0;
    Result.m22 = 1;
    Result.m23 = 0;
    Result.m31 = 0;
    Result.m32 = 0;
    Result.m33 = 1;
    return Result;
  };
  this.MatrixCreateRotation = function (AAngle) {
    var Result = $mod.TTMSFNCGraphicsMatrix.$new();
    var S = 0.0;
    var C = 0.0;
    S = Math.sin(AAngle);
    C = Math.cos(AAngle);
    Result.$assign($mod.MatrixIdentity());
    Result.m11 = C;
    Result.m12 = S;
    Result.m21 = -S;
    Result.m22 = C;
    return Result;
  };
  this.MatrixCreateScaling = function (AScaleX, AScaleY) {
    var Result = $mod.TTMSFNCGraphicsMatrix.$new();
    Result.$assign($mod.MatrixIdentity());
    Result.m11 = AScaleX;
    Result.m22 = AScaleY;
    return Result;
  };
  this.MatrixCreateTranslation = function (ADeltaX, ADeltaY) {
    var Result = $mod.TTMSFNCGraphicsMatrix.$new();
    Result.$assign($mod.MatrixIdentity());
    Result.m31 = ADeltaX;
    Result.m32 = ADeltaY;
    return Result;
  };
  this.MatrixMultiply = function (AMatrix1, AMatrix2) {
    var Result = $mod.TTMSFNCGraphicsMatrix.$new();
    Result.m11 = (AMatrix1.m11 * AMatrix2.m11) + (AMatrix1.m12 * AMatrix2.m21) + (AMatrix1.m13 * AMatrix2.m31);
    Result.m12 = (AMatrix1.m11 * AMatrix2.m12) + (AMatrix1.m12 * AMatrix2.m22) + (AMatrix1.m13 * AMatrix2.m32);
    Result.m13 = (AMatrix1.m11 * AMatrix2.m13) + (AMatrix1.m12 * AMatrix2.m23) + (AMatrix1.m13 * AMatrix2.m33);
    Result.m21 = (AMatrix1.m21 * AMatrix2.m11) + (AMatrix1.m22 * AMatrix2.m21) + (AMatrix1.m23 * AMatrix2.m31);
    Result.m22 = (AMatrix1.m21 * AMatrix2.m12) + (AMatrix1.m22 * AMatrix2.m22) + (AMatrix1.m23 * AMatrix2.m32);
    Result.m23 = (AMatrix1.m21 * AMatrix2.m13) + (AMatrix1.m22 * AMatrix2.m23) + (AMatrix1.m23 * AMatrix2.m33);
    Result.m31 = (AMatrix1.m31 * AMatrix2.m11) + (AMatrix1.m32 * AMatrix2.m21) + (AMatrix1.m33 * AMatrix2.m31);
    Result.m32 = (AMatrix1.m31 * AMatrix2.m12) + (AMatrix1.m32 * AMatrix2.m22) + (AMatrix1.m33 * AMatrix2.m32);
    Result.m33 = (AMatrix1.m31 * AMatrix2.m13) + (AMatrix1.m32 * AMatrix2.m23) + (AMatrix1.m33 * AMatrix2.m33);
    return Result;
  };
  this.MatrixMultiply$1 = function (APoint, AMatrix) {
    var Result = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
    Result.X = (APoint.X * AMatrix.m11) + (APoint.Y * AMatrix.m21) + AMatrix.m31;
    Result.Y = (APoint.X * AMatrix.m12) + (APoint.Y * AMatrix.m22) + AMatrix.m32;
    return Result;
  };
  $mod.$init = function () {
    $impl.FColorLookup = pas.Classes.TStringList.$create("Create$1");
    $impl.FColorLookup.AddObject("aliceblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16775408]));
    $impl.FColorLookup.AddObject("antiquewhite",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14150650]));
    $impl.FColorLookup.AddObject("aqua",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16776960]));
    $impl.FColorLookup.AddObject("aquamarine",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13959039]));
    $impl.FColorLookup.AddObject("azure",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16777200]));
    $impl.FColorLookup.AddObject("beige",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14480885]));
    $impl.FColorLookup.AddObject("bisque",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[12903679]));
    $impl.FColorLookup.AddObject("black",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[0]));
    $impl.FColorLookup.AddObject("blanchedalmond",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13495295]));
    $impl.FColorLookup.AddObject("blue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16711680]));
    $impl.FColorLookup.AddObject("blueviolet",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14822282]));
    $impl.FColorLookup.AddObject("brown",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[2763429]));
    $impl.FColorLookup.AddObject("burlywood",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8894686]));
    $impl.FColorLookup.AddObject("cadetblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[10526303]));
    $impl.FColorLookup.AddObject("chartreuse",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[65407]));
    $impl.FColorLookup.AddObject("chocolate",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[1993170]));
    $impl.FColorLookup.AddObject("coral",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[5275647]));
    $impl.FColorLookup.AddObject("cornflowerblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15570276]));
    $impl.FColorLookup.AddObject("cornsilk",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14481663]));
    $impl.FColorLookup.AddObject("crimson",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[3937500]));
    $impl.FColorLookup.AddObject("cyan",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16776960]));
    $impl.FColorLookup.AddObject("darkblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9109504]));
    $impl.FColorLookup.AddObject("darkcyan",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9145088]));
    $impl.FColorLookup.AddObject("darkgoldenrod",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[755384]));
    $impl.FColorLookup.AddObject("darkgray",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[11119017]));
    $impl.FColorLookup.AddObject("darkgreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[25600]));
    $impl.FColorLookup.AddObject("darkgrey",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[11119017]));
    $impl.FColorLookup.AddObject("darkkhaki",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[7059389]));
    $impl.FColorLookup.AddObject("darkmagenta",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9109643]));
    $impl.FColorLookup.AddObject("darkolivegreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[3107669]));
    $impl.FColorLookup.AddObject("darkorange",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[36095]));
    $impl.FColorLookup.AddObject("darkorchid",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13382297]));
    $impl.FColorLookup.AddObject("darkred",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[139]));
    $impl.FColorLookup.AddObject("darksalmon",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8034025]));
    $impl.FColorLookup.AddObject("darkseagreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9419919]));
    $impl.FColorLookup.AddObject("darkslateblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9125192]));
    $impl.FColorLookup.AddObject("darkslategray",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[5197615]));
    $impl.FColorLookup.AddObject("darkslategrey",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[5197615]));
    $impl.FColorLookup.AddObject("darkturquoise",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13749760]));
    $impl.FColorLookup.AddObject("darkviolet",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13828244]));
    $impl.FColorLookup.AddObject("deeppink",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9639167]));
    $impl.FColorLookup.AddObject("deepskyblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16760576]));
    $impl.FColorLookup.AddObject("dimgray",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[6908265]));
    $impl.FColorLookup.AddObject("dimgrey",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[6908265]));
    $impl.FColorLookup.AddObject("dodgerblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16748574]));
    $impl.FColorLookup.AddObject("firebrick",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[2237106]));
    $impl.FColorLookup.AddObject("floralwhite",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15792895]));
    $impl.FColorLookup.AddObject("forestgreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[2263842]));
    $impl.FColorLookup.AddObject("fuchsia",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16711935]));
    $impl.FColorLookup.AddObject("gainsboro",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14474460]));
    $impl.FColorLookup.AddObject("ghostwhite",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16775416]));
    $impl.FColorLookup.AddObject("gold",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[55295]));
    $impl.FColorLookup.AddObject("goldenrod",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[2139610]));
    $impl.FColorLookup.AddObject("gray",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8421504]));
    $impl.FColorLookup.AddObject("green",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[32768]));
    $impl.FColorLookup.AddObject("greenyellow",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[3145645]));
    $impl.FColorLookup.AddObject("grey",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8421504]));
    $impl.FColorLookup.AddObject("honeydew",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15794160]));
    $impl.FColorLookup.AddObject("hotpink",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[11823615]));
    $impl.FColorLookup.AddObject("indianred",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[6053069]));
    $impl.FColorLookup.AddObject("indigo",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8519755]));
    $impl.FColorLookup.AddObject("ivory",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15794175]));
    $impl.FColorLookup.AddObject("khaki",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9234160]));
    $impl.FColorLookup.AddObject("lavender",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16443110]));
    $impl.FColorLookup.AddObject("lavenderblush",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16118015]));
    $impl.FColorLookup.AddObject("lawngreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[64636]));
    $impl.FColorLookup.AddObject("lemonchiffon",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13499135]));
    $impl.FColorLookup.AddObject("lightblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15128749]));
    $impl.FColorLookup.AddObject("lightcoral",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8421616]));
    $impl.FColorLookup.AddObject("lightcyan",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16777184]));
    $impl.FColorLookup.AddObject("lightgoldenrodyellow",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13826810]));
    $impl.FColorLookup.AddObject("lightgray",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13882323]));
    $impl.FColorLookup.AddObject("lightgreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9498256]));
    $impl.FColorLookup.AddObject("lightgrey",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13882323]));
    $impl.FColorLookup.AddObject("lightpink",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[12695295]));
    $impl.FColorLookup.AddObject("lightsalmon",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8036607]));
    $impl.FColorLookup.AddObject("lightseagreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[11186720]));
    $impl.FColorLookup.AddObject("lightskyblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16436871]));
    $impl.FColorLookup.AddObject("lightslategray",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[10061943]));
    $impl.FColorLookup.AddObject("lightslategrey",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[10061943]));
    $impl.FColorLookup.AddObject("lightsteelblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14599344]));
    $impl.FColorLookup.AddObject("lightyellow",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14745599]));
    $impl.FColorLookup.AddObject("lime",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[65280]));
    $impl.FColorLookup.AddObject("limegreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[3329330]));
    $impl.FColorLookup.AddObject("linen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15134970]));
    $impl.FColorLookup.AddObject("magenta",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16711935]));
    $impl.FColorLookup.AddObject("maroon",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[128]));
    $impl.FColorLookup.AddObject("mediumaquamarine",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[11193702]));
    $impl.FColorLookup.AddObject("mediumblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13434880]));
    $impl.FColorLookup.AddObject("mediumorchid",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13850042]));
    $impl.FColorLookup.AddObject("mediumpurple",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14381203]));
    $impl.FColorLookup.AddObject("mediumseagreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[7451452]));
    $impl.FColorLookup.AddObject("mediumslateblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15624315]));
    $impl.FColorLookup.AddObject("mediumspringgreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[10156544]));
    $impl.FColorLookup.AddObject("mediumturquoise",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13422920]));
    $impl.FColorLookup.AddObject("mediumvioletred",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8721863]));
    $impl.FColorLookup.AddObject("midnightblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[7346457]));
    $impl.FColorLookup.AddObject("mintcream",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16449525]));
    $impl.FColorLookup.AddObject("mistyrose",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14804223]));
    $impl.FColorLookup.AddObject("moccasin",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[11920639]));
    $impl.FColorLookup.AddObject("navajowhite",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[11394815]));
    $impl.FColorLookup.AddObject("navy",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8388608]));
    $impl.FColorLookup.AddObject("oldlace",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15136253]));
    $impl.FColorLookup.AddObject("olive",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[32896]));
    $impl.FColorLookup.AddObject("olivedrab",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[2330219]));
    $impl.FColorLookup.AddObject("orange",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[42495]));
    $impl.FColorLookup.AddObject("orangered",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[17919]));
    $impl.FColorLookup.AddObject("orchid",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14053594]));
    $impl.FColorLookup.AddObject("palegoldenrod",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[11200750]));
    $impl.FColorLookup.AddObject("palegreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[10025880]));
    $impl.FColorLookup.AddObject("paleturquoise",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15658671]));
    $impl.FColorLookup.AddObject("palevioletred",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9662683]));
    $impl.FColorLookup.AddObject("papayawhip",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14020607]));
    $impl.FColorLookup.AddObject("peachpuff",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[12180223]));
    $impl.FColorLookup.AddObject("peru",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[4163021]));
    $impl.FColorLookup.AddObject("pink",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13353215]));
    $impl.FColorLookup.AddObject("plum",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14524637]));
    $impl.FColorLookup.AddObject("powderblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15130800]));
    $impl.FColorLookup.AddObject("purple",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8388736]));
    $impl.FColorLookup.AddObject("red",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[255]));
    $impl.FColorLookup.AddObject("rosybrown",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9408444]));
    $impl.FColorLookup.AddObject("royalblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14772545]));
    $impl.FColorLookup.AddObject("saddlebrown",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[1262987]));
    $impl.FColorLookup.AddObject("salmon",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[7504122]));
    $impl.FColorLookup.AddObject("sandybrown",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[6333684]));
    $impl.FColorLookup.AddObject("seagreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[5737262]));
    $impl.FColorLookup.AddObject("seashell",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15660543]));
    $impl.FColorLookup.AddObject("sienna",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[2970272]));
    $impl.FColorLookup.AddObject("skyblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15453831]));
    $impl.FColorLookup.AddObject("slateblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13458026]));
    $impl.FColorLookup.AddObject("slategray",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9470064]));
    $impl.FColorLookup.AddObject("slategrey",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9470064]));
    $impl.FColorLookup.AddObject("snow",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16448255]));
    $impl.FColorLookup.AddObject("springgreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8388352]));
    $impl.FColorLookup.AddObject("steelblue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[11829830]));
    $impl.FColorLookup.AddObject("violet",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[15631086]));
    $impl.FColorLookup.AddObject("thistle",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[14204888]));
    $impl.FColorLookup.AddObject("tan",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[9221330]));
    $impl.FColorLookup.AddObject("tomato",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[4678655]));
    $impl.FColorLookup.AddObject("turquoise",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[13688896]));
    $impl.FColorLookup.AddObject("wheat",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[11788021]));
    $impl.FColorLookup.AddObject("whitesmoke",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16119285]));
    $impl.FColorLookup.AddObject("yellowgreen",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[3329434]));
    $impl.FColorLookup.AddObject("red",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[255]));
    $impl.FColorLookup.AddObject("black",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[0]));
    $impl.FColorLookup.AddObject("blue",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16711680]));
    $impl.FColorLookup.AddObject("green",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[32768]));
    $impl.FColorLookup.AddObject("aqua",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16776960]));
    $impl.FColorLookup.AddObject("yellow",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[65535]));
    $impl.FColorLookup.AddObject("fuchsia",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16711935]));
    $impl.FColorLookup.AddObject("white",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[16777215]));
    $impl.FColorLookup.AddObject("lime",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[65280]));
    $impl.FColorLookup.AddObject("silver",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[12632256]));
    $impl.FColorLookup.AddObject("gray",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8421504]));
    $impl.FColorLookup.AddObject("olive",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[32896]));
    $impl.FColorLookup.AddObject("navy",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8388608]));
    $impl.FColorLookup.AddObject("purple",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8388736]));
    $impl.FColorLookup.AddObject("teal",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[8421376]));
    $impl.FColorLookup.AddObject("orange",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[42495]));
    $impl.FColorLookup.AddObject("maroon",$mod.TTMSFNCGraphicsColorObject.$create("Create$1",[128]));
    $impl.FColorLookup.Sort();
  };
},["WEBLib.TMSFNCUtils","SysUtils","Math"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.FColorLookup = null;
  $impl.DrawArcWithBezier = function (Path, CenterX, CenterY, RadiusX, RadiusY, StartAngle, SweepRange, UseMoveTo) {
    var Coord = [];
    var Pts = [];
    var A = 0.0;
    var X = 0.0;
    var Y = 0.0;
    var C = 0.0;
    var B = 0.0;
    var CC = 0.0;
    var SS = 0.0;
    var I = 0;
    if (SweepRange === 0) {
      if (UseMoveTo) {
        if (Path.FPoints.GetCount() < 1) {
          Path.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(CenterX + (RadiusX * Math.cos(StartAngle)),CenterY - (RadiusY * Math.sin(StartAngle))))}
         else Path.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(CenterX + (RadiusX * Math.cos(StartAngle)),CenterY - (RadiusY * Math.sin(StartAngle))));
      };
      Path.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(CenterX + (RadiusX * Math.cos(StartAngle)),CenterY - (RadiusY * Math.sin(StartAngle))));
      return;
    };
    B = Math.sin(SweepRange / 2);
    C = Math.cos(SweepRange / 2);
    A = 1 - C;
    X = (A * 4) / 3;
    Y = B - ((X * C) / B);
    SS = Math.sin(StartAngle + (SweepRange / 2));
    CC = Math.cos(StartAngle + (SweepRange / 2));
    Coord = rtl.arraySetLength(Coord,pas["WEBLib.TMSFNCTypes"].TPointF,4);
    Coord[0].$assign(pas["WEBLib.TMSFNCTypes"].PointF(C,-B));
    Coord[1].$assign(pas["WEBLib.TMSFNCTypes"].PointF(C + X,-Y));
    Coord[2].$assign(pas["WEBLib.TMSFNCTypes"].PointF(C + X,Y));
    Coord[3].$assign(pas["WEBLib.TMSFNCTypes"].PointF(C,B));
    Pts = rtl.arraySetLength(Pts,pas["WEBLib.TMSFNCTypes"].TPointF,4);
    for (I = 0; I <= 3; I++) {
      Pts[I].$assign(pas["WEBLib.TMSFNCTypes"].PointF(CenterX + (RadiusX * ((Coord[I].X * CC) - (Coord[I].Y * SS))),CenterY + (RadiusY * ((Coord[I].X * SS) + (Coord[I].Y * CC)))));
    };
    if (UseMoveTo) {
      if (Path.FPoints.GetCount() < 1) {
        Path.MoveTo(Pts[0])}
       else Path.LineTo(Pts[0]);
    };
    Path.CurveTo(Pts[1],Pts[2],Pts[3]);
  };
  $impl.DestroyColorLookup = function () {
    var I = 0;
    var obj = null;
    for (var $l1 = 0, $end2 = $impl.FColorLookup.GetCount() - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      obj = $impl.FColorLookup.GetObject(I);
      obj = rtl.freeLoc(obj);
    };
    rtl.free($impl,"FColorLookup");
  };
});
rtl.module("WEBLib.TMSFNCJSONReader",["System","Classes","SysUtils","WEBLib.TMSFNCTypes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TTMSFNCJSONStreamReader",pas.System.TObject,function () {
    rtl.createClass(this,"EInvalidJsonInput",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Invalid JSON Input");
        return this;
      };
    });
    rtl.createClass(this,"EInternalError",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"JSON stream reader internal error");
        return this;
      };
    });
    rtl.createClass(this,"EEndOfInputReached",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"End of JSON input reached.");
        return this;
      };
    });
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FStream = null;
      this.FReadStream = null;
    };
    this.$final = function () {
      this.FStream = undefined;
      this.FReadStream = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (aStream) {
      this.FStream = aStream;
      this.FReadStream = pas["WEBLib.TMSFNCTypes"].TStringStream.$create("Create$1",[""]);
      this.FReadStream.CopyFrom(this.FStream,this.FStream.FSize);
      this.FReadStream.FPosition = 0;
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FReadStream");
      pas.System.TObject.Destroy.call(this);
    };
    this.NextChar = function () {
      var Result = "";
      if (this.Eof()) throw this.EEndOfInputReached.$create("Create$2");
      Result = this.ReadChar();
      return Result;
    };
    this.PeekChar = function () {
      var Result = "";
      var p = 0;
      p = this.FReadStream.FPosition;
      Result = this.ReadChar();
      this.FReadStream.FPosition = p;
      return Result;
    };
    this.ReadChar = function () {
      var Result = "";
      var i = 0;
      var s = "";
      Result = "\x00";
      i = 1;
      if (this.FReadStream.FPosition < this.FReadStream.FSize) {
        s = this.FReadStream.ReadString(1);
        if ((s !== "") && pas.System.Assigned(s)) Result = s.charAt(i - 1);
      };
      return Result;
    };
    this.Backup = function (c) {
      this.FReadStream.FPosition = this.FReadStream.FPosition - 1;
    };
    this.MoveNext = function (Count) {
      this.FReadStream.FPosition = this.FReadStream.FPosition + Count;
    };
    this.Eof = function () {
      var Result = false;
      Result = this.FReadStream.FPosition === this.FReadStream.FSize;
      return Result;
    };
  });
  this.TTMSFNCJSONToken = {"0": "jstoBeginObject", jstoBeginObject: 0, "1": "jstoEndObject", jstoEndObject: 1, "2": "jstoBeginArray", jstoBeginArray: 2, "3": "jstoEndArray", jstoEndArray: 3, "4": "jstoName", jstoName: 4, "5": "jstoBoolean", jstoBoolean: 5, "6": "jstoNull", jstoNull: 6, "7": "jstoText", jstoText: 7, "8": "jstoNumber", jstoNumber: 8, "9": "jstoEOF", jstoEOF: 9};
  $mod.$rtti.$Enum("TTMSFNCJSONToken",{minvalue: 0, maxvalue: 9, ordtype: 1, enumtype: this.TTMSFNCJSONToken});
  rtl.createClass($mod,"TTMSFNCJSONReader",pas.System.TObject,function () {
    this.TTMSFNCJSONState = {"0": "jstNone", jstNone: 0, "1": "jstBeginObject", jstBeginObject: 1, "2": "jstEndObject", jstEndObject: 2, "3": "jstBeginArray", jstBeginArray: 3, "4": "jstEndArray", jstEndArray: 4, "5": "jstTrue", jstTrue: 5, "6": "jstFalse", jstFalse: 6, "7": "jstNull", jstNull: 7, "8": "jstDoubleQuoted", jstDoubleQuoted: 8, "9": "jstBuffered", jstBuffered: 9, "10": "jstDoubleQuotedName", jstDoubleQuotedName: 10, "11": "jstInt64", jstInt64: 11, "12": "jstNumber", jstNumber: 12, "13": "jstEOF", jstEOF: 13};
    $mod.$rtti.$Enum("TTMSFNCJSONReader.TTMSFNCJSONState",{minvalue: 0, maxvalue: 13, ordtype: 1, enumtype: this.TTMSFNCJSONState});
    this.TTMSFNCJSONNumberState = {"0": "jnstNone", jnstNone: 0, "1": "jnstSign", jnstSign: 1, "2": "jnstDigit", jnstDigit: 2, "3": "jnstDecimal", jnstDecimal: 3, "4": "jnstFraction", jnstFraction: 4, "5": "jnstExpE", jnstExpE: 5, "6": "jnstExpSign", jnstExpSign: 6, "7": "jnstExpDigit", jnstExpDigit: 7};
    $mod.$rtti.$Enum("TTMSFNCJSONReader.TTMSFNCJSONNumberState",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TTMSFNCJSONNumberState});
    this.TTMSFNCJSONScope = {"0": "jscEmptyDocument", jscEmptyDocument: 0, "1": "jscEmptyArray", jscEmptyArray: 1, "2": "jscEmptyObject", jscEmptyObject: 2, "3": "jscNonEmptyDocument", jscNonEmptyDocument: 3, "4": "jscNonEmptyArray", jscNonEmptyArray: 4, "5": "jscNonEmptyObject", jscNonEmptyObject: 5, "6": "jscDanglingName", jscDanglingName: 6};
    $mod.$rtti.$Enum("TTMSFNCJSONReader.TTMSFNCJSONScope",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TTMSFNCJSONScope});
    rtl.createClass(this,"EInvalidStateException",pas.SysUtils.Exception,function () {
      this.Create$2 = function (AState) {
        pas.SysUtils.Exception.CreateFmt.call(this,"Invalid Json parser state. Expected state: %d",[AState]);
        return this;
      };
    });
    rtl.createClass(this,"EUnterminatedArray",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Unterminated array");
        return this;
      };
    });
    rtl.createClass(this,"EUnterminatedObject",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Unterminated object");
        return this;
      };
    });
    rtl.createClass(this,"ENameExpected",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Name expected");
        return this;
      };
    });
    rtl.createClass(this,"EColonExpected",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Colon expected");
        return this;
      };
    });
    rtl.createClass(this,"EReaderClosed",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Reader already closed");
        return this;
      };
    });
    rtl.createClass(this,"EMultipleRootNotAllowed",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Multiple root values not allowed");
        return this;
      };
    });
    rtl.createClass(this,"EExpectedValue",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Value expected but invalid character found");
        return this;
      };
    });
    rtl.createClass(this,"EObjectOrArrayExpected",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Object or array expected as top-level value");
        return this;
      };
    });
    rtl.createClass(this,"ETooManyDepthLevels",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Maximum level of nested structured reached.");
        return this;
      };
    });
    rtl.createClass(this,"EInvalidEscaped",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Invalid escaped sequence");
        return this;
      };
    });
    this.MaxNumberBuffer = 255;
    this.MaxStackSize = 255;
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FReader = null;
      this.FStack = rtl.arraySetLength(null,0,256);
      this.FStackSize = 0;
      this.FPeeked = 0;
      this.FPeekedInt64 = 0;
      this.FPeekedNumber = rtl.arraySetLength(null,"",256);
      this.FPeekedString = "";
    };
    this.$final = function () {
      this.FReader = undefined;
      this.FStack = undefined;
      this.FPeekedNumber = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.NextPeek = function () {
      var Result = 0;
      if (this.FPeeked === this.TTMSFNCJSONState.jstNone) this.FPeeked = this.DoPeek();
      Result = this.FPeeked;
      return Result;
    };
    this.CheckState = function (State) {
      if (this.NextPeek() !== State) throw this.EInvalidStateException.$create("Create$2",[State]);
    };
    this.SkipChar = function () {
      this.FReader.MoveNext(1);
      while (this.FReader.PeekChar().charCodeAt() in $impl.Wspace) this.FReader.MoveNext(1);
    };
    this.IsLiteral = function (C) {
      var Result = false;
      Result = !pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.CharInSet(C,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.CreateCharSet("\/\\;#{}[]:,' \r\n\f\t"));
      return Result;
    };
    this.IsDigit = function (C) {
      var Result = false;
      Result = (C <= "ÿ") && pas["WEBLib.TMSFNCTypes"].CharIsNumber(C);
      return Result;
    };
    this.DoPeek = function () {
      var Result = 0;
      var FPeekStack = 0;
      var C = "";
      FPeekStack = this.FStack[this.FStackSize - 1];
      if (FPeekStack === this.TTMSFNCJSONScope.jscEmptyArray) {
        this.FStack[this.FStackSize - 1] = this.TTMSFNCJSONScope.jscNonEmptyArray}
       else if (FPeekStack === this.TTMSFNCJSONScope.jscNonEmptyArray) {
        C = this.NextNonWhitespace();
        var $tmp1 = C;
        if ($tmp1 === "]") {
          this.SkipChar();
          this.FPeeked = this.TTMSFNCJSONState.jstEndArray;
          return this.FPeeked;
        } else if ($tmp1 === ",") {
          this.SkipChar()}
         else {
          throw this.EUnterminatedArray.$create("Create$2");
        };
      } else if (FPeekStack in rtl.createSet(this.TTMSFNCJSONScope.jscEmptyObject,this.TTMSFNCJSONScope.jscNonEmptyObject)) {
        this.FStack[this.FStackSize - 1] = this.TTMSFNCJSONScope.jscDanglingName;
        if (FPeekStack === this.TTMSFNCJSONScope.jscNonEmptyObject) {
          C = this.NextNonWhitespace();
          var $tmp2 = C;
          if ($tmp2 === "}") {
            this.SkipChar();
            this.FPeeked = this.TTMSFNCJSONState.jstEndObject;
            return this.FPeeked;
          } else if ($tmp2 === ",") {
            this.SkipChar()}
           else {
            throw this.EUnterminatedObject.$create("Create$2");
          };
        };
        C = this.NextNonWhitespace();
        var $tmp3 = C;
        if ($tmp3 === '"') {
          this.SkipChar();
          this.FPeeked = this.TTMSFNCJSONState.jstDoubleQuotedName;
          return this.FPeeked;
        } else if ($tmp3 === "}") {
          if (FPeekStack !== this.TTMSFNCJSONScope.jscNonEmptyObject) {
            this.SkipChar();
            this.FPeeked = this.TTMSFNCJSONState.jstEndObject;
            return this.FPeeked;
          } else throw this.ENameExpected.$create("Create$2")}
         else {
          throw this.ENameExpected.$create("Create$2");
        };
      } else if (FPeekStack === this.TTMSFNCJSONScope.jscDanglingName) {
        this.FStack[this.FStackSize - 1] = this.TTMSFNCJSONScope.jscNonEmptyObject;
        C = this.NextNonWhitespace();
        if (C === ":") {
          this.SkipChar()}
         else throw this.EColonExpected.$create("Create$2");
      } else if (FPeekStack === this.TTMSFNCJSONScope.jscEmptyDocument) {
        this.FStack[this.FStackSize - 1] = this.TTMSFNCJSONScope.jscNonEmptyDocument}
       else if (FPeekStack === this.TTMSFNCJSONScope.jscNonEmptyDocument) {
        if (this.SkipWhitespaceUntilEnd()) {
          this.FPeeked = this.TTMSFNCJSONState.jstEOF;
          return this.FPeeked;
        } else throw this.EMultipleRootNotAllowed.$create("Create$2");
      };
      C = this.NextNonWhitespace();
      var $tmp4 = C;
      if ($tmp4 === "]") {
        if (FPeekStack === this.TTMSFNCJSONScope.jscEmptyArray) {
          this.SkipChar();
          this.FPeeked = this.TTMSFNCJSONState.jstEndArray;
          return this.FPeeked;
        } else throw this.EExpectedValue.$create("Create$2")}
       else if ($tmp4 === '"') {
        if (this.FStackSize === 1) throw this.EObjectOrArrayExpected.$create("Create$2");
        this.SkipChar();
        this.FPeeked = this.TTMSFNCJSONState.jstDoubleQuoted;
        return this.FPeeked;
      } else if ($tmp4 === "[") {
        this.SkipChar();
        this.FPeeked = this.TTMSFNCJSONState.jstBeginArray;
        return this.FPeeked;
      } else if ($tmp4 === "{") {
        this.SkipChar();
        this.FPeeked = this.TTMSFNCJSONState.jstBeginObject;
        return this.FPeeked;
      };
      if (this.FStackSize === 1) throw this.EObjectOrArrayExpected.$create("Create$2");
      Result = this.PeekKeyword();
      if (Result !== this.TTMSFNCJSONState.jstNone) return Result;
      Result = this.PeekNumber();
      if (Result !== this.TTMSFNCJSONState.jstNone) return Result;
      throw this.EExpectedValue.$create("Create$2");
      return Result;
    };
    this.PushScope = function (Scope) {
      if (this.FStackSize > 255) throw this.ETooManyDepthLevels.$create("Create$2");
      this.FStack[this.FStackSize] = Scope;
      this.FStackSize += 1;
    };
    this.NextNonWhitespace = function () {
      var Result = "";
      var s = "";
      var p = 0;
      p = this.FReader.FReadStream.FPosition;
      Result = "\x00";
      s = this.ReadChar();
      do {
        if ((s > " ") || !(s.charCodeAt() in $impl.Wspace)) {
          this.FReader.FReadStream.FPosition = p;
          return s;
        };
        s = this.ReadChar();
      } while (!this.FReader.Eof());
      this.FReader.FReadStream.FPosition = p;
      return Result;
    };
    this.ReadChar = function () {
      var Result = "";
      Result = this.FReader.ReadChar();
      return Result;
    };
    this.PeekKeyword = function () {
      var Result = 0;
      var $tmp1 = this.FReader.PeekChar();
      if (($tmp1 === "t") || ($tmp1 === "T")) {
        this.FReader.MoveNext(1);
        var $tmp2 = this.FReader.NextChar();
        if (($tmp2 === "r") || ($tmp2 === "R")) {
          var $tmp3 = this.FReader.NextChar();
          if (($tmp3 === "u") || ($tmp3 === "U")) {
            var $tmp4 = this.FReader.NextChar();
            if (($tmp4 === "e") || ($tmp4 === "E")) if (this.FReader.Eof() || !this.IsLiteral(this.FReader.PeekChar())) return this.TTMSFNCJSONState.jstTrue;
          };
        };
      } else if (($tmp1 === "f") || ($tmp1 === "F")) {
        this.FReader.MoveNext(1);
        var $tmp5 = this.FReader.NextChar();
        if (($tmp5 === "a") || ($tmp5 === "A")) {
          var $tmp6 = this.FReader.NextChar();
          if (($tmp6 === "l") || ($tmp6 === "L")) {
            var $tmp7 = this.FReader.NextChar();
            if (($tmp7 === "s") || ($tmp7 === "S")) {
              var $tmp8 = this.FReader.NextChar();
              if (($tmp8 === "e") || ($tmp8 === "E")) if (this.FReader.Eof() || !this.IsLiteral(this.FReader.PeekChar())) return this.TTMSFNCJSONState.jstFalse;
            };
          };
        };
      } else if (($tmp1 === "n") || ($tmp1 === "N")) {
        this.FReader.MoveNext(1);
        var $tmp9 = this.FReader.NextChar();
        if (($tmp9 === "u") || ($tmp9 === "U")) {
          var $tmp10 = this.FReader.NextChar();
          if (($tmp10 === "l") || ($tmp10 === "L")) {
            var $tmp11 = this.FReader.NextChar();
            if (($tmp11 === "l") || ($tmp11 === "L")) if (this.FReader.Eof() || !this.IsLiteral(this.FReader.PeekChar())) return this.TTMSFNCJSONState.jstNull;
          };
        };
      } else {
        return this.TTMSFNCJSONState.jstNone;
      };
      throw this.EExpectedValue.$create("Create$2");
      return Result;
    };
    var MinIncompleteInteger = Math.floor(-4503599627370496 / 10);
    this.PeekNumber = function () {
      var Result = 0;
      var Last = 0;
      var Negative = false;
      var FitsInInt64 = false;
      var Value = 0;
      var NewValue = 0;
      var C = "";
      var BufIndex = 0;
      C = this.FReader.PeekChar();
      if ((C !== "-") && !this.IsDigit(C)) return this.TTMSFNCJSONState.jstNone;
      Negative = false;
      FitsInInt64 = true;
      Last = this.TTMSFNCJSONNumberState.jnstNone;
      BufIndex = 0;
      Value = -1;
      do {
        if (BufIndex >= 255) throw this.EExpectedValue.$create("Create$2");
        C = this.FReader.NextChar();
        this.FPeekedNumber[BufIndex] = C;
        BufIndex += 1;
        var $tmp1 = C;
        if ($tmp1 === "-") {
          if (Last === this.TTMSFNCJSONNumberState.jnstNone) {
            Negative = true;
            Last = this.TTMSFNCJSONNumberState.jnstSign;
            continue;
          } else if (Last === this.TTMSFNCJSONNumberState.jnstExpE) {
            Last = this.TTMSFNCJSONNumberState.jnstExpSign;
            continue;
          } else throw this.EExpectedValue.$create("Create$2")}
         else if ($tmp1 === "+") {
          if (Last === this.TTMSFNCJSONNumberState.jnstExpE) {
            Last = this.TTMSFNCJSONNumberState.jnstExpSign;
            continue;
          } else throw this.EExpectedValue.$create("Create$2")}
         else if (($tmp1 === "e") || ($tmp1 === "E")) {
          if (Last in rtl.createSet(this.TTMSFNCJSONNumberState.jnstDigit,this.TTMSFNCJSONNumberState.jnstFraction)) {
            Last = this.TTMSFNCJSONNumberState.jnstExpE;
            continue;
          } else throw this.EExpectedValue.$create("Create$2")}
         else if ($tmp1 === ".") {
          if (Last === this.TTMSFNCJSONNumberState.jnstDigit) {
            Last = this.TTMSFNCJSONNumberState.jnstDecimal;
            continue;
          } else throw this.EExpectedValue.$create("Create$2")}
         else {
          if (!this.IsDigit(C)) if (!this.IsLiteral(C)) {
            this.FReader.Backup(C);
            BufIndex -= 1;
            break;
          } else throw this.EExpectedValue.$create("Create$2");
          if (Last in rtl.createSet(this.TTMSFNCJSONNumberState.jnstSign,this.TTMSFNCJSONNumberState.jnstNone)) {
            Value = -(C.charCodeAt() - 48);
            Last = this.TTMSFNCJSONNumberState.jnstDigit;
          } else if (Last === this.TTMSFNCJSONNumberState.jnstDigit) {
            if (Value === 0) throw this.EExpectedValue.$create("Create$2");
            NewValue = (Value * 10) - (C.charCodeAt() - 48);
            FitsInInt64 = FitsInInt64 && ((Value > -450359962737049) || ((Value === -450359962737049) && (NewValue < Value)));
            Value = NewValue;
          } else if (Last === this.TTMSFNCJSONNumberState.jnstDecimal) {
            Last = this.TTMSFNCJSONNumberState.jnstFraction}
           else if (Last in rtl.createSet(this.TTMSFNCJSONNumberState.jnstExpE,this.TTMSFNCJSONNumberState.jnstExpSign)) Last = this.TTMSFNCJSONNumberState.jnstExpDigit;
        };
      } while (!false);
      if ((Last === this.TTMSFNCJSONNumberState.jnstDigit) && FitsInInt64 && ((Value !== -4503599627370496) || Negative)) {
        if (Negative) {
          this.FPeekedInt64 = Value}
         else this.FPeekedInt64 = -Value;
        return this.TTMSFNCJSONState.jstInt64;
      } else if (Last in rtl.createSet(this.TTMSFNCJSONNumberState.jnstDigit,this.TTMSFNCJSONNumberState.jnstFraction,this.TTMSFNCJSONNumberState.jnstExpDigit)) {
        this.FPeekedNumber[BufIndex] = "\x00";
        return this.TTMSFNCJSONState.jstNumber;
      } else throw this.EExpectedValue.$create("Create$2");
      return Result;
    };
    this.InternalReadQuoted = function (BuildString) {
      var Result = "";
      var c = "";
      var s = "";
      Result = "";
      s = "";
      while (!this.FReader.Eof()) {
        c = this.ReadChar();
        if (c === '"') {
          break}
         else s = s + c;
      };
      if (BuildString) Result = s;
      return Result;
    };
    this.ReadQuoted = function () {
      var Result = "";
      Result = this.InternalReadQuoted(true);
      return Result;
    };
    this.SkipQuoted = function () {
      this.InternalReadQuoted(false);
    };
    this.SkipWhitespaceUntilEnd = function () {
      var Result = false;
      var s = "";
      var p = 0;
      p = this.FReader.FReadStream.FPosition;
      Result = true;
      s = this.ReadChar();
      do {
        if ((s > " ") || !(s.charCodeAt() in $impl.Wspace)) {
          this.FReader.FReadStream.FPosition = p;
          return false;
        };
        s = this.ReadChar();
      } while (!this.FReader.Eof());
      this.FReader.FReadStream.FPosition = p;
      return Result;
    };
    this.Create$1 = function (AStream) {
      pas.System.TObject.Create.call(this);
      this.FReader = $mod.TTMSFNCJSONStreamReader.$create("Create$1",[AStream]);
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
      this.FStack[0] = this.TTMSFNCJSONScope.jscEmptyDocument;
      this.FStackSize = 1;
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FReader");
      pas.System.TObject.Destroy.call(this);
    };
    this.ReadBeginArray = function () {
      this.CheckState(this.TTMSFNCJSONState.jstBeginArray);
      this.PushScope(this.TTMSFNCJSONScope.jscEmptyArray);
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
    };
    this.ReadEndArray = function () {
      this.CheckState(this.TTMSFNCJSONState.jstEndArray);
      this.FStackSize -= 1;
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
    };
    this.ReadBeginObject = function () {
      this.CheckState(this.TTMSFNCJSONState.jstBeginObject);
      this.PushScope(this.TTMSFNCJSONScope.jscEmptyObject);
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
    };
    this.ReadEndObject = function () {
      this.CheckState(this.TTMSFNCJSONState.jstEndObject);
      this.FStackSize -= 1;
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
    };
    this.ReadName = function () {
      var Result = "";
      this.CheckState(this.TTMSFNCJSONState.jstDoubleQuotedName);
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
      Result = this.ReadQuoted();
      return Result;
    };
    this.ReadString = function () {
      var Result = "";
      var $tmp1 = this.NextPeek();
      if ($tmp1 === this.TTMSFNCJSONState.jstDoubleQuoted) {
        Result = this.ReadQuoted()}
       else if ($tmp1 === this.TTMSFNCJSONState.jstInt64) {
        Result = pas.SysUtils.IntToStr(this.FPeekedInt64)}
       else if ($tmp1 === this.TTMSFNCJSONState.jstNumber) {
        Result = $impl.ArrayOfCharToString(this.FPeekedNumber.slice(0))}
       else if ($tmp1 === this.TTMSFNCJSONState.jstBuffered) {
        Result = this.FPeekedString}
       else {
        throw this.EInvalidStateException.$create("Create$2",[this.TTMSFNCJSONState.jstDoubleQuoted]);
      };
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
      Result = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.UnescapeString(Result);
      return Result;
    };
    this.ReadBoolean = function () {
      var Result = false;
      var $tmp1 = this.NextPeek();
      if ($tmp1 === this.TTMSFNCJSONState.jstTrue) {
        Result = true}
       else if ($tmp1 === this.TTMSFNCJSONState.jstFalse) {
        Result = false}
       else {
        throw this.EInvalidStateException.$create("Create$2",[this.TTMSFNCJSONState.jstTrue]);
      };
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
      return Result;
    };
    this.ReadDouble = function () {
      var Result = 0.0;
      var $tmp1 = this.NextPeek();
      if ($tmp1 === this.TTMSFNCJSONState.jstInt64) {
        this.FPeeked = this.TTMSFNCJSONState.jstNone;
        return this.FPeekedInt64;
      } else if ($tmp1 === this.TTMSFNCJSONState.jstNumber) {
        if (pas.SysUtils.TryStrToFloat($impl.ArrayOfCharToString(this.FPeekedNumber.slice(0)),{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }})) {
          this.FPeeked = this.TTMSFNCJSONState.jstNone;
          return Result;
        } else this.FPeekedString = $impl.ArrayOfCharToString(this.FPeekedNumber.slice(0));
      } else if ($tmp1 === this.TTMSFNCJSONState.jstDoubleQuoted) {
        this.FPeekedString = this.ReadQuoted()}
       else if ($tmp1 === this.TTMSFNCJSONState.jstBuffered) {}
      else {
        throw this.EInvalidStateException.$create("Create$2",[this.TTMSFNCJSONState.jstNumber]);
      };
      this.FPeeked = this.TTMSFNCJSONState.jstBuffered;
      Result = pas.SysUtils.StrToFloat(this.FPeekedString);
      this.FPeekedString = "";
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
      return Result;
    };
    this.ReadInt64 = function () {
      var Result = 0;
      var AsDouble = 0.0;
      var $tmp1 = this.NextPeek();
      if ($tmp1 === this.TTMSFNCJSONState.jstInt64) {
        this.FPeeked = this.TTMSFNCJSONState.jstNone;
        return this.FPeekedInt64;
      } else if ($tmp1 === this.TTMSFNCJSONState.jstNumber) {
        if (pas.SysUtils.TryStrToInt64($impl.ArrayOfCharToString(this.FPeekedNumber.slice(0)),{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }})) {
          this.FPeeked = this.TTMSFNCJSONState.jstNone;
          return Result;
        } else this.FPeekedString = $impl.ArrayOfCharToString(this.FPeekedNumber.slice(0));
      } else if ($tmp1 === this.TTMSFNCJSONState.jstDoubleQuoted) {
        this.FPeekedString = this.ReadQuoted();
        if (pas.SysUtils.TryStrToInt64(this.FPeekedString,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }})) {
          this.FPeeked = this.TTMSFNCJSONState.jstNone;
          return Result;
        };
      } else if ($tmp1 === this.TTMSFNCJSONState.jstBuffered) {}
      else {
        throw this.EInvalidStateException.$create("Create$2",[this.TTMSFNCJSONState.jstInt64]);
      };
      this.FPeeked = this.TTMSFNCJSONState.jstBuffered;
      AsDouble = pas.SysUtils.StrToFloat(this.FPeekedString);
      Result = Math.round(AsDouble);
      if (AsDouble !== Result) throw this.EInvalidStateException.$create("Create$2",[this.TTMSFNCJSONState.jstInt64]);
      this.FPeekedString = "";
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
      return Result;
    };
    this.ReadInteger = function () {
      var Result = 0;
      var AsDouble = 0.0;
      var $tmp1 = this.NextPeek();
      if ($tmp1 === this.TTMSFNCJSONState.jstInt64) {
        Result = this.FPeekedInt64 & 0xFFFFFFFF;
        if (Result !== this.FPeekedInt64) throw this.EInvalidStateException.$create("Create$2",[this.TTMSFNCJSONState.jstInt64]);
        this.FPeeked = this.TTMSFNCJSONState.jstNone;
        return Result;
      } else if ($tmp1 === this.TTMSFNCJSONState.jstNumber) {
        if (pas.SysUtils.TryStrToInt($impl.ArrayOfCharToString(this.FPeekedNumber.slice(0)),{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }})) {
          this.FPeeked = this.TTMSFNCJSONState.jstNone;
          return Result;
        } else this.FPeekedString = $impl.ArrayOfCharToString(this.FPeekedNumber.slice(0));
      } else if ($tmp1 === this.TTMSFNCJSONState.jstDoubleQuoted) {
        this.FPeekedString = this.ReadQuoted();
        if (pas.SysUtils.TryStrToInt(this.FPeekedString,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }})) {
          this.FPeeked = this.TTMSFNCJSONState.jstNone;
          return Result;
        };
      } else if ($tmp1 === this.TTMSFNCJSONState.jstBuffered) {}
      else {
        throw this.EInvalidStateException.$create("Create$2",[this.TTMSFNCJSONState.jstInt64]);
      };
      this.FPeeked = this.TTMSFNCJSONState.jstBuffered;
      AsDouble = pas.SysUtils.StrToFloat(this.FPeekedString);
      Result = Math.round(AsDouble);
      if (AsDouble !== Result) throw this.EInvalidStateException.$create("Create$2",[this.TTMSFNCJSONState.jstInt64]);
      this.FPeekedString = "";
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
      return Result;
    };
    this.SkipValue = function () {
      var Count = 0;
      Count = 0;
      do {
        var $tmp1 = this.NextPeek();
        if ($tmp1 === this.TTMSFNCJSONState.jstBeginArray) {
          this.PushScope(this.TTMSFNCJSONScope.jscEmptyArray);
          Count += 1;
        } else if ($tmp1 === this.TTMSFNCJSONState.jstBeginObject) {
          this.PushScope(this.TTMSFNCJSONScope.jscEmptyObject);
          Count += 1;
        } else if (($tmp1 === this.TTMSFNCJSONState.jstEndArray) || ($tmp1 === this.TTMSFNCJSONState.jstEndObject)) {
          this.FStackSize -= 1;
          Count -= 1;
        } else if (($tmp1 === this.TTMSFNCJSONState.jstDoubleQuoted) || ($tmp1 === this.TTMSFNCJSONState.jstDoubleQuotedName)) this.SkipQuoted();
        this.FPeeked = this.TTMSFNCJSONState.jstNone;
      } while (!(Count <= 0));
    };
    this.ReadNull = function () {
      this.CheckState(this.TTMSFNCJSONState.jstNull);
      this.FPeeked = this.TTMSFNCJSONState.jstNone;
    };
    this.HasNext = function () {
      var Result = false;
      Result = !(this.NextPeek() in rtl.createSet(this.TTMSFNCJSONState.jstEndObject,this.TTMSFNCJSONState.jstEndArray));
      return Result;
    };
    this.Peek = function () {
      var Result = 0;
      var $tmp1 = this.NextPeek();
      if ($tmp1 === this.TTMSFNCJSONState.jstBeginObject) {
        Result = $mod.TTMSFNCJSONToken.jstoBeginObject}
       else if ($tmp1 === this.TTMSFNCJSONState.jstEndObject) {
        Result = $mod.TTMSFNCJSONToken.jstoEndObject}
       else if ($tmp1 === this.TTMSFNCJSONState.jstBeginArray) {
        Result = $mod.TTMSFNCJSONToken.jstoBeginArray}
       else if ($tmp1 === this.TTMSFNCJSONState.jstEndArray) {
        Result = $mod.TTMSFNCJSONToken.jstoEndArray}
       else if ($tmp1 === this.TTMSFNCJSONState.jstDoubleQuotedName) {
        Result = $mod.TTMSFNCJSONToken.jstoName}
       else if (($tmp1 === this.TTMSFNCJSONState.jstTrue) || ($tmp1 === this.TTMSFNCJSONState.jstFalse)) {
        Result = $mod.TTMSFNCJSONToken.jstoBoolean}
       else if ($tmp1 === this.TTMSFNCJSONState.jstNull) {
        Result = $mod.TTMSFNCJSONToken.jstoNull}
       else if (($tmp1 === this.TTMSFNCJSONState.jstDoubleQuoted) || ($tmp1 === this.TTMSFNCJSONState.jstBuffered)) {
        Result = $mod.TTMSFNCJSONToken.jstoText}
       else if (($tmp1 === this.TTMSFNCJSONState.jstInt64) || ($tmp1 === this.TTMSFNCJSONState.jstNumber)) {
        Result = $mod.TTMSFNCJSONToken.jstoNumber}
       else if ($tmp1 === this.TTMSFNCJSONState.jstEOF) {
        Result = $mod.TTMSFNCJSONToken.jstoEOF}
       else {
        Result = $mod.TTMSFNCJSONToken.jstoEOF;
      };
      return Result;
    };
    this.IsNull = function () {
      var Result = false;
      Result = this.Peek() === $mod.TTMSFNCJSONToken.jstoNull;
      return Result;
    };
    this.Eof = function () {
      var Result = false;
      Result = this.Peek() === $mod.TTMSFNCJSONToken.jstoEOF;
      return Result;
    };
  });
},["WEBLib.TMSFNCUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.Wspace = rtl.createSet(0x20,0xA,0xD,0x9,0xC);
  $impl.ArrayOfCharToString = function (AArray) {
    var Result = "";
    var I = 0;
    Result = "";
    for (var $l1 = 0, $end2 = rtl.length(AArray) - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      if (AArray[I] === "\x00") break;
      Result = Result + AArray[I];
    };
    return Result;
  };
});
rtl.module("WEBLib.TMSFNCJSONWriter",["System","Classes","SysUtils","WEBLib.TMSFNCTypes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createClass($mod,"TTMSFNCJSONStreamWriter",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FStream = null;
      this.FWriteStream = null;
    };
    this.$final = function () {
      this.FStream = undefined;
      this.FWriteStream = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AStream) {
      this.FStream = AStream;
      this.FWriteStream = pas["WEBLib.TMSFNCTypes"].TStringStream.$create("Create$1",[""]);
      return this;
    };
    this.Destroy = function () {
      try {
        this.FWriteStream.FPosition = 0;
        this.FStream.CopyFrom(this.FWriteStream,this.FWriteStream.FSize);
      } finally {
        rtl.free(this,"FWriteStream");
      };
      pas.System.TObject.Destroy.call(this);
    };
    this.Write = function (Value) {
      this.FWriteStream.WriteString(Value);
    };
  });
  rtl.createClass($mod,"TTMSFNCJSONWriter",pas.System.TObject,function () {
    rtl.createClass(this,"ECannotWriteName",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Cannot write name in current Json scope");
        return this;
      };
    });
    rtl.createClass(this,"EMultipleRootNotAllowed",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Multiple root values not allowed");
        return this;
      };
    });
    rtl.createClass(this,"EObjectOrArrayExpected",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Object or array expected as top-level value");
        return this;
      };
    });
    rtl.createClass(this,"EInvalidNesting",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Invalid nesting. Not all arrays\/objects were properly closed.");
        return this;
      };
    });
    rtl.createClass(this,"EMissingValue",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Json value missing");
        return this;
      };
    });
    rtl.createClass(this,"ETooManyDepthLevels",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Maximum level of nested structured reached.");
        return this;
      };
    });
    rtl.createClass(this,"EEmptyJson",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Json is still empty. Cannot perform operation.");
        return this;
      };
    });
    rtl.createClass(this,"EEmptyName",pas.SysUtils.Exception,function () {
      this.Create$2 = function () {
        pas.SysUtils.Exception.Create$1.call(this,"Cannot write empty name");
        return this;
      };
    });
    this.TTMSFNCJSONScope = {"0": "jscEmptyDocument", jscEmptyDocument: 0, "1": "jscEmptyArray", jscEmptyArray: 1, "2": "jscEmptyObject", jscEmptyObject: 2, "3": "jscNonEmptyDocument", jscNonEmptyDocument: 3, "4": "jscNonEmptyArray", jscNonEmptyArray: 4, "5": "jscNonEmptyObject", jscNonEmptyObject: 5, "6": "jscDanglingName", jscDanglingName: 6};
    $mod.$rtti.$Enum("TTMSFNCJSONWriter.TTMSFNCJSONScope",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TTMSFNCJSONScope});
    this.MaxStackSize = 255;
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FWriter = null;
      this.FStack = rtl.arraySetLength(null,0,256);
      this.FStackSize = 0;
      this.FIndent = "";
      this.FSeparator = "";
      this.FDeferredName = "";
      this.FClosed = false;
    };
    this.$final = function () {
      this.FWriter = undefined;
      this.FStack = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetIndentLength = function (Value) {
      if (Value <= 0) {
        this.FIndent = "";
        this.FSeparator = ":";
      } else {
        this.FIndent = pas.System.StringOfChar(" ",Value);
        this.FSeparator = ": ";
      };
    };
    this.GetIndentLength = function () {
      var Result = 0;
      Result = this.FIndent.length;
      return Result;
    };
    this.OpenItem = function (Empty, OpenBracket) {
      var Result = null;
      this.BeforeValue(true);
      this.PushScope(Empty);
      this.FWriter.Write(OpenBracket);
      Result = this;
      return Result;
    };
    this.CloseItem = function (Empty, NonEmpty, CloseBracket) {
      var Result = null;
      var Context = 0;
      Context = this.PeekScope();
      if (!(Context in rtl.createSet(Empty,NonEmpty))) throw this.EInvalidNesting.$create("Create$2");
      if (this.FDeferredName !== "") throw this.EMissingValue.$create("Create$2");
      this.FStackSize -= 1;
      if (Context === NonEmpty) this.NewLine();
      this.FWriter.Write(CloseBracket);
      Result = this;
      return Result;
    };
    this.PushScope = function (Scope) {
      if (this.FStackSize > 255) throw this.ETooManyDepthLevels.$create("Create$2");
      this.FStack[this.FStackSize] = Scope;
      this.FStackSize += 1;
    };
    this.PeekScope = function () {
      var Result = 0;
      if (this.FStackSize === 0) throw this.EEmptyJson.$create("Create$2");
      Result = this.FStack[this.FStackSize - 1];
      return Result;
    };
    this.ReplaceTop = function (Scope) {
      if (this.FStackSize === 0) throw this.EEmptyJson.$create("Create$2");
      this.FStack[this.FStackSize - 1] = Scope;
    };
    this.WriteDeferredName = function () {
      if (this.FDeferredName !== "") {
        this.BeforeName();
        this.InternalWriteString(this.FDeferredName);
        this.FDeferredName = "";
      };
    };
    this.InternalWriteString = function (Value) {
      this.FWriter.Write('"');
      this.FWriter.Write(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.EscapeString(Value));
      this.FWriter.Write('"');
    };
    this.NewLine = function () {
      var I = 0;
      if (this.FIndent !== "") {
        this.FWriter.Write("\r\n");
        for (var $l1 = 1, $end2 = this.FStackSize - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          this.FWriter.Write(this.FIndent);
        };
      };
    };
    this.BeforeName = function () {
      var $tmp1 = this.PeekScope();
      if ($tmp1 === this.TTMSFNCJSONScope.jscNonEmptyObject) {
        this.FWriter.Write(",")}
       else if ($tmp1 === this.TTMSFNCJSONScope.jscEmptyObject) {}
      else {
        throw this.ECannotWriteName.$create("Create$2");
      };
      this.NewLine();
      this.ReplaceTop(this.TTMSFNCJSONScope.jscDanglingName);
    };
    this.BeforeValue = function (Root) {
      var $tmp1 = this.PeekScope();
      if ($tmp1 === this.TTMSFNCJSONScope.jscNonEmptyDocument) {
        throw this.EMultipleRootNotAllowed.$create("Create$2")}
       else if ($tmp1 === this.TTMSFNCJSONScope.jscEmptyDocument) {
        if (!Root) throw this.EObjectOrArrayExpected.$create("Create$2");
        this.ReplaceTop(this.TTMSFNCJSONScope.jscNonEmptyDocument);
      } else if ($tmp1 === this.TTMSFNCJSONScope.jscEmptyArray) {
        this.ReplaceTop(this.TTMSFNCJSONScope.jscNonEmptyArray);
        this.NewLine();
      } else if ($tmp1 === this.TTMSFNCJSONScope.jscNonEmptyArray) {
        this.FWriter.Write(",");
        this.NewLine();
      } else if ($tmp1 === this.TTMSFNCJSONScope.jscDanglingName) {
        this.FWriter.Write(this.FSeparator);
        this.ReplaceTop(this.TTMSFNCJSONScope.jscNonEmptyObject);
      } else {
        throw this.EInvalidNesting.$create("Create$2");
      };
    };
    this.Create$1 = function (AStream) {
      pas.System.TObject.Create.call(this);
      this.FWriter = $mod.TTMSFNCJSONStreamWriter.$create("Create$1",[AStream]);
      this.FSeparator = ":";
      this.PushScope(this.TTMSFNCJSONScope.jscEmptyDocument);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FWriter");
      pas.System.TObject.Destroy.call(this);
    };
    this.WriteBeginArray = function () {
      var Result = null;
      this.WriteDeferredName();
      Result = this.OpenItem(this.TTMSFNCJSONScope.jscEmptyArray,"[");
      return Result;
    };
    this.WriteEndArray = function () {
      var Result = null;
      Result = this.CloseItem(this.TTMSFNCJSONScope.jscEmptyArray,this.TTMSFNCJSONScope.jscNonEmptyArray,"]");
      return Result;
    };
    this.WriteBeginObject = function () {
      var Result = null;
      this.WriteDeferredName();
      Result = this.OpenItem(this.TTMSFNCJSONScope.jscEmptyObject,"{");
      return Result;
    };
    this.WriteEndObject = function () {
      var Result = null;
      Result = this.CloseItem(this.TTMSFNCJSONScope.jscEmptyObject,this.TTMSFNCJSONScope.jscNonEmptyObject,"}");
      return Result;
    };
    this.WriteName = function (Name) {
      var Result = null;
      if (Name === "") throw this.EEmptyName.$create("Create$2");
      if (this.FDeferredName !== "") throw this.EMissingValue.$create("Create$2");
      if (this.FStackSize === 0) throw this.EEmptyJson.$create("Create$2");
      this.FDeferredName = Name;
      Result = this;
      return Result;
    };
    this.WriteString = function (Value) {
      var Result = null;
      this.WriteDeferredName();
      this.BeforeValue(false);
      this.InternalWriteString(Value);
      Result = this;
      return Result;
    };
    this.WriteRawString = function (Value) {
      var Result = null;
      this.WriteDeferredName();
      this.BeforeValue(false);
      this.FWriter.Write('"');
      this.FWriter.Write(Value);
      this.FWriter.Write('"');
      Result = this;
      return Result;
    };
    this.WriteBoolean = function (Value) {
      var Result = null;
      this.WriteDeferredName();
      this.BeforeValue(false);
      if (Value) {
        this.FWriter.Write("true")}
       else this.FWriter.Write("false");
      Result = this;
      return Result;
    };
    this.WriteNull = function () {
      var Result = null;
      this.WriteDeferredName();
      this.BeforeValue(false);
      this.FWriter.Write("null");
      Result = this;
      return Result;
    };
    this.WriteDouble = function (Value) {
      var Result = null;
      this.WriteDeferredName();
      this.BeforeValue(false);
      this.FWriter.Write(pas.SysUtils.FloatToStr(Value));
      Result = this;
      return Result;
    };
    this.WriteInteger = function (Value) {
      var Result = null;
      this.WriteDeferredName();
      this.BeforeValue(false);
      this.FWriter.Write(pas.SysUtils.IntToStr(Value));
      Result = this;
      return Result;
    };
    this.Close = function () {
      if ((this.FStackSize > 1) || ((this.FStackSize === 1) && (this.PeekScope() !== this.TTMSFNCJSONScope.jscNonEmptyDocument))) throw this.EInvalidNesting.$create("Create$2");
      this.FClosed = true;
    };
  });
},["WEBLib.TMSFNCUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.RaiseErrInvalidString = function () {
    throw pas.SysUtils.Exception.$create("Create$1",[rtl.getResStr(pas["WEBLib.TMSFNCJSONWriter"],"ErrInvalidString")]);
  };
  $mod.$resourcestrings = {ErrInvalidString: {org: "The file contains a string that can't be encoded in UTF-8"}};
});
rtl.module("strutils",["System","SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.AnsiResemblesText = function (AText, AOther) {
    var Result = false;
    if ($mod.AnsiResemblesProc != null) {
      Result = $mod.AnsiResemblesProc(AText,AOther)}
     else Result = false;
    return Result;
  };
  this.AnsiContainsText = function (AText, ASubText) {
    var Result = false;
    Result = pas.System.Pos(pas.SysUtils.UpperCase(ASubText),pas.SysUtils.UpperCase(AText)) > 0;
    return Result;
  };
  this.AnsiStartsText = function (ASubText, AText) {
    var Result = false;
    if ((AText.length >= ASubText.length) && (ASubText !== "")) {
      Result = pas.SysUtils.SameText(ASubText,pas.System.Copy(AText,1,ASubText.length))}
     else Result = false;
    return Result;
  };
  this.AnsiEndsText = function (ASubText, AText) {
    var Result = false;
    if (AText.length >= ASubText.length) {
      Result = pas.SysUtils.SameText(ASubText,$mod.RightStr(AText,ASubText.length))}
     else Result = false;
    return Result;
  };
  this.AnsiReplaceText = function (AText, AFromText, AToText) {
    var Result = "";
    Result = pas.SysUtils.StringReplace(AText,AFromText,AToText,rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll,pas.SysUtils.TStringReplaceFlag.rfIgnoreCase));
    return Result;
  };
  this.AnsiMatchText = function (AText, AValues) {
    var Result = false;
    Result = $mod.AnsiIndexText(AText,AValues) !== -1;
    return Result;
  };
  this.AnsiIndexText = function (AText, AValues) {
    var Result = 0;
    var i = 0;
    Result = -1;
    if (((rtl.length(AValues) - 1) === -1) || ((rtl.length(AValues) - 1) > 2147483647)) return Result;
    for (var $l1 = 0, $end2 = rtl.length(AValues) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (pas.SysUtils.CompareText(AValues[i],AText) === 0) return i;
    };
    return Result;
  };
  this.StartsText = function (ASubText, AText) {
    var Result = false;
    Result = $mod.AnsiStartsText(ASubText,AText);
    return Result;
  };
  this.EndsText = function (ASubText, AText) {
    var Result = false;
    Result = $mod.AnsiEndsText(ASubText,AText);
    return Result;
  };
  this.ResemblesText = function (AText, AOther) {
    var Result = false;
    if ($mod.ResemblesProc != null) {
      Result = $mod.ResemblesProc(AText,AOther)}
     else Result = false;
    return Result;
  };
  this.ContainsText = function (AText, ASubText) {
    var Result = false;
    Result = $mod.AnsiContainsText(AText,ASubText);
    return Result;
  };
  this.MatchText = function (AText, AValues) {
    var Result = false;
    Result = $mod.AnsiMatchText(AText,AValues);
    return Result;
  };
  this.IndexText = function (AText, AValues) {
    var Result = 0;
    Result = $mod.AnsiIndexText(AText,AValues);
    return Result;
  };
  this.AnsiContainsStr = function (AText, ASubText) {
    var Result = false;
    Result = pas.System.Pos(ASubText,AText) > 0;
    return Result;
  };
  this.AnsiStartsStr = function (ASubText, AText) {
    var Result = false;
    if ((AText.length >= ASubText.length) && (ASubText !== "")) {
      Result = ASubText === pas.System.Copy(AText,1,ASubText.length)}
     else Result = false;
    return Result;
  };
  this.AnsiEndsStr = function (ASubText, AText) {
    var Result = false;
    if (AText.length >= ASubText.length) {
      Result = ASubText === $mod.RightStr(AText,ASubText.length)}
     else Result = false;
    return Result;
  };
  this.AnsiReplaceStr = function (AText, AFromText, AToText) {
    var Result = "";
    Result = pas.SysUtils.StringReplace(AText,AFromText,AToText,rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    return Result;
  };
  this.AnsiMatchStr = function (AText, AValues) {
    var Result = false;
    Result = $mod.AnsiIndexStr(AText,AValues) !== -1;
    return Result;
  };
  this.AnsiIndexStr = function (AText, AValues) {
    var Result = 0;
    var i = 0;
    Result = -1;
    if (((rtl.length(AValues) - 1) === -1) || ((rtl.length(AValues) - 1) > 2147483647)) return Result;
    for (var $l1 = 0, $end2 = rtl.length(AValues) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (AValues[i] === AText) return i;
    };
    return Result;
  };
  this.MatchStr = function (AText, AValues) {
    var Result = false;
    Result = $mod.IndexStr(AText,AValues) !== -1;
    return Result;
  };
  this.IndexStr = function (AText, AValues) {
    var Result = 0;
    var i = 0;
    Result = -1;
    if (((rtl.length(AValues) - 1) === -1) || ((rtl.length(AValues) - 1) > 2147483647)) return Result;
    for (var $l1 = 0, $end2 = rtl.length(AValues) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      if (AValues[i] === AText) return i;
    };
    return Result;
  };
  this.ContainsStr = function (AText, ASubText) {
    var Result = false;
    Result = $mod.AnsiContainsStr(AText,ASubText);
    return Result;
  };
  this.StartsStr = function (ASubText, AText) {
    var Result = false;
    Result = $mod.AnsiStartsStr(AText,ASubText);
    return Result;
  };
  this.EndsStr = function (ASubText, AText) {
    var Result = false;
    Result = $mod.AnsiEndsStr(AText,ASubText);
    return Result;
  };
  this.DupeString = function (AText, ACount) {
    var Result = "";
    var i = 0;
    Result = "";
    for (var $l1 = 1, $end2 = ACount; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = Result + AText;
    };
    return Result;
  };
  this.ReverseString = function (AText) {
    var Result = "";
    var i = 0;
    var j = 0;
    Result = rtl.strSetLength(Result,AText.length);
    i = 1;
    j = AText.length;
    while (i <= j) {
      Result = rtl.setCharAt(Result,i - 1,AText.charAt(((j - i) + 1) - 1));
      i += 1;
    };
    return Result;
  };
  this.AnsiReverseString = function (AText) {
    var Result = "";
    Result = $mod.ReverseString(AText);
    return Result;
  };
  this.StuffString = function (AText, AStart, ALength, ASubText) {
    var Result = "";
    var i = 0;
    var j = 0;
    var k = 0;
    j = ASubText.length;
    i = AText.length;
    if (AStart > i) AStart = i + 1;
    k = (i + 1) - AStart;
    if (ALength > k) ALength = k;
    Result = rtl.strSetLength(Result,(i + j) - ALength);
    Result = pas.System.Copy(AText,1,AStart - 1) + pas.System.Copy(ASubText,1,j) + pas.System.Copy(AText,AStart + ALength,(i + 1) - AStart - ALength);
    return Result;
  };
  this.RandomFrom = function (AValues) {
    var Result = "";
    if ((rtl.length(AValues) - 1) === -1) return "";
    Result = AValues[pas.System.Random((rtl.length(AValues) - 1) + 1)];
    return Result;
  };
  this.IfThen = function (AValue, ATrue, AFalse) {
    var Result = "";
    if (AValue) {
      Result = ATrue}
     else Result = AFalse;
    return Result;
  };
  this.NaturalCompareText = function (S1, S2) {
    var Result = 0;
    Result = $mod.NaturalCompareText$1(S1,S2,pas.SysUtils.DecimalSeparator,pas.SysUtils.ThousandSeparator);
    return Result;
  };
  this.NaturalCompareText$1 = function (Str1, Str2, ADecSeparator, AThousandSeparator) {
    var Result = 0;
    var Num1 = 0.0;
    var Num2 = 0.0;
    var pStr1 = 0;
    var pStr2 = 0;
    var Len1 = 0;
    var Len2 = 0;
    var TextLen1 = 0;
    var TextLen2 = 0;
    var TextStr1 = "";
    var TextStr2 = "";
    var i = 0;
    var j = 0;
    function Sign(AValue) {
      var Result = 0;
      if (AValue < 0) {
        Result = -1}
       else if (AValue > 0) {
        Result = 1}
       else Result = 0;
      return Result;
    };
    function IsNumber(ch) {
      var Result = false;
      Result = ch.charCodeAt() in rtl.createSet(null,48,57);
      return Result;
    };
    function GetInteger(aString, pch, Len) {
      var Result = 0.0;
      Result = 0;
      while ((pch.get() <= aString.length) && IsNumber(aString.charAt(pch.get() - 1))) {
        Result = ((Result * 10) + aString.charCodeAt(pch.get() - 1)) - "0".charCodeAt();
        Len.set(Len.get() + 1);
        pch.set(pch.get() + 1);
      };
      return Result;
    };
    function GetChars() {
      TextLen1 = 0;
      while (!(Str1.charCodeAt((pStr1 + TextLen1) - 1) in rtl.createSet(null,48,57)) && ((pStr1 + TextLen1) <= Str1.length)) TextLen1 += 1;
      TextStr1 = "";
      i = 1;
      j = 0;
      while (i <= TextLen1) {
        TextStr1 = TextStr1 + Str1.charAt((pStr1 + j) - 1);
        i += 1;
        j += 1;
      };
      TextLen2 = 0;
      while (!(Str2.charCodeAt((pStr2 + TextLen2) - 1) in rtl.createSet(null,48,57)) && ((pStr2 + TextLen2) <= Str2.length)) TextLen2 += 1;
      i = 1;
      j = 0;
      while (i <= TextLen2) {
        TextStr2 = TextStr2 + Str2.charAt((pStr2 + j) - 1);
        i += 1;
        j += 1;
      };
    };
    if ((Str1 !== "") && (Str2 !== "")) {
      pStr1 = 1;
      pStr2 = 1;
      Result = 0;
      while ((pStr1 <= Str1.length) && (pStr2 <= Str2.length)) {
        TextLen1 = 1;
        TextLen2 = 1;
        Len1 = 0;
        Len2 = 0;
        while (Str1.charAt(pStr1 - 1) === " ") {
          pStr1 += 1;
          Len1 += 1;
        };
        while (Str2.charAt(pStr2 - 1) === " ") {
          pStr2 += 1;
          Len2 += 1;
        };
        if (IsNumber(Str1.charAt(pStr1 - 1)) && IsNumber(Str2.charAt(pStr2 - 1))) {
          Num1 = GetInteger(Str1,{get: function () {
              return pStr1;
            }, set: function (v) {
              pStr1 = v;
            }},{get: function () {
              return Len1;
            }, set: function (v) {
              Len1 = v;
            }});
          Num2 = GetInteger(Str2,{get: function () {
              return pStr2;
            }, set: function (v) {
              pStr2 = v;
            }},{get: function () {
              return Len2;
            }, set: function (v) {
              Len2 = v;
            }});
          if (Num1 < Num2) {
            Result = -1}
           else if (Num1 > Num2) {
            Result = 1}
           else {
            Result = Sign(Len1 - Len2);
          };
          pStr1 -= 1;
          pStr2 -= 1;
        } else {
          GetChars();
          if (TextStr1 !== TextStr2) {
            Result = pas.SysUtils.CompareText(TextStr1,TextStr2)}
           else Result = 0;
        };
        if (Result !== 0) break;
        pStr1 += TextLen1;
        pStr2 += TextLen2;
      };
    };
    Num1 = Str1.length;
    Num2 = Str2.length;
    if ((Result === 0) && (Num1 !== Num2)) {
      if (Num1 < Num2) {
        Result = -1}
       else Result = 1;
    };
    if (ADecSeparator === "") ;
    if (AThousandSeparator === "") ;
    return Result;
  };
  this.LeftStr = function (AText, ACount) {
    var Result = "";
    Result = pas.System.Copy(AText,1,ACount);
    return Result;
  };
  this.RightStr = function (AText, ACount) {
    var Result = "";
    var j = 0;
    var l = 0;
    l = AText.length;
    j = ACount;
    if (j > l) j = l;
    Result = pas.System.Copy(AText,(l - j) + 1,j);
    return Result;
  };
  this.MidStr = function (AText, AStart, ACount) {
    var Result = "";
    if ((ACount === 0) || (AStart > AText.length)) return "";
    Result = pas.System.Copy(AText,AStart,ACount);
    return Result;
  };
  this.RightBStr = function (AText, AByteCount) {
    var Result = "";
    Result = $mod.RightStr(AText,AByteCount);
    return Result;
  };
  this.MidBStr = function (AText, AByteStart, AByteCount) {
    var Result = "";
    Result = $mod.MidStr(AText,AByteStart,AByteCount);
    return Result;
  };
  this.AnsiLeftStr = function (AText, ACount) {
    var Result = "";
    Result = pas.System.Copy(AText,1,ACount);
    return Result;
  };
  this.AnsiRightStr = function (AText, ACount) {
    var Result = "";
    Result = pas.System.Copy(AText,(AText.length - ACount) + 1,ACount);
    return Result;
  };
  this.AnsiMidStr = function (AText, AStart, ACount) {
    var Result = "";
    Result = pas.System.Copy(AText,AStart,ACount);
    return Result;
  };
  this.LeftBStr = function (AText, AByteCount) {
    var Result = "";
    Result = $mod.LeftStr(AText,AByteCount);
    return Result;
  };
  this.WordDelimiters = [];
  this.SErrAmountStrings = "Amount of search and replace strings don't match";
  this.SInvalidRomanNumeral = "%s is not a valid Roman numeral";
  this.TStringSearchOption = {"0": "soDown", soDown: 0, "1": "soMatchCase", soMatchCase: 1, "2": "soWholeWord", soWholeWord: 2};
  $mod.$rtti.$Enum("TStringSearchOption",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TStringSearchOption});
  $mod.$rtti.$Set("TStringSearchOptions",{comptype: $mod.$rtti["TStringSearchOption"]});
  this.PosEx = function (SubStr, S, Offset) {
    var Result = 0;
    Result = (new String(S)).indexOf(SubStr,Offset - 1) + 1;
    return Result;
  };
  this.PosEx$1 = function (SubStr, S) {
    var Result = 0;
    Result = $mod.PosEx(SubStr,S,1);
    return Result;
  };
  this.PosEx$2 = function (c, S, Offset) {
    var Result = 0;
    Result = (new String(S)).indexOf(c,Offset - 1) + 1;
    return Result;
  };
  this.StringsReplace = function (S, OldPattern, NewPattern, Flags) {
    var Result = "";
    var pc = 0;
    var pcc = 0;
    var lastpc = 0;
    var strcount = 0;
    var ResStr = "";
    var CompStr = "";
    var Found = false;
    var sc = 0;
    sc = rtl.length(OldPattern);
    if (sc !== rtl.length(NewPattern)) throw pas.SysUtils.Exception.$create("Create$1",[$mod.SErrAmountStrings]);
    sc -= 1;
    if (pas.SysUtils.TStringReplaceFlag.rfIgnoreCase in Flags) {
      CompStr = pas.SysUtils.UpperCase(S);
      for (var $l1 = 0, $end2 = sc; $l1 <= $end2; $l1++) {
        strcount = $l1;
        OldPattern[strcount] = pas.SysUtils.UpperCase(OldPattern[strcount]);
      };
    } else CompStr = S;
    ResStr = "";
    pc = 1;
    pcc = 1;
    lastpc = pc + S.length;
    while (pc < lastpc) {
      Found = false;
      for (var $l3 = 0, $end4 = sc; $l3 <= $end4; $l3++) {
        strcount = $l3;
        if (pas.System.Copy(CompStr,pc,OldPattern[strcount].length) === OldPattern[strcount]) {
          ResStr = ResStr + NewPattern[strcount];
          pc = pc + OldPattern[strcount].length;
          pcc = pcc + OldPattern[strcount].length;
          Found = true;
        };
      };
      if (!Found) {
        ResStr = ResStr + S.charAt(pcc - 1);
        pc += 1;
        pcc += 1;
      } else if (!(pas.SysUtils.TStringReplaceFlag.rfReplaceAll in Flags)) {
        ResStr = ResStr + pas.System.Copy(S,pcc,(S.length - pcc) + 1);
        break;
      };
    };
    Result = ResStr;
    return Result;
  };
  this.ReplaceStr = function (AText, AFromText, AToText) {
    var Result = "";
    Result = $mod.AnsiReplaceStr(AText,AFromText,AToText);
    return Result;
  };
  this.ReplaceText = function (AText, AFromText, AToText) {
    var Result = "";
    Result = $mod.AnsiReplaceText(AText,AFromText,AToText);
    return Result;
  };
  $mod.$rtti.$Int("TSoundexLength",{minvalue: 1, maxvalue: 2147483647, ordtype: 5});
  this.Soundex = function (AText, ALength) {
    var Result = "";
    var S = "";
    var PS = "";
    var I = 0;
    var L = 0;
    Result = "";
    PS = "\x00";
    if (AText.length > 0) {
      Result = pas.System.upcase(AText.charAt(0));
      I = 2;
      L = AText.length;
      while ((I <= L) && (Result.length < ALength)) {
        S = $impl.SScore.charAt(AText.charCodeAt(I - 1) - 1);
        if (!(S.charCodeAt() in rtl.createSet(48,105,PS.charCodeAt()))) Result = Result + S;
        if (S !== "i") PS = S;
        I += 1;
      };
    };
    L = Result.length;
    if (L < ALength) Result = Result + pas.System.StringOfChar("0",ALength - L);
    return Result;
  };
  this.Soundex$1 = function (AText) {
    var Result = "";
    Result = $mod.Soundex(AText,4);
    return Result;
  };
  $mod.$rtti.$Int("TSoundexIntLength",{minvalue: 1, maxvalue: 8, ordtype: 1});
  this.SoundexInt = function (AText, ALength) {
    var Result = 0;
    var SE = "";
    var I = 0;
    Result = -1;
    SE = $mod.Soundex(AText,ALength);
    if (SE.length > 0) {
      Result = SE.charCodeAt(1 - 1) - 65;
      if (ALength > 1) {
        Result = (Result * 26) + (SE.charCodeAt(2 - 1) - 48);
        for (var $l1 = 3, $end2 = ALength; $l1 <= $end2; $l1++) {
          I = $l1;
          Result = (SE.charCodeAt(I - 1) - 48) + (Result * 7);
        };
      };
      Result = ALength + (Result * 9);
    };
    return Result;
  };
  this.SoundexInt$1 = function (AText) {
    var Result = 0;
    Result = $mod.SoundexInt(AText,4);
    return Result;
  };
  this.DecodeSoundexInt = function (AValue) {
    var Result = "";
    var I = 0;
    var Len = 0;
    Result = "";
    Len = AValue % 9;
    AValue = Math.floor(AValue / 9);
    for (var $l1 = Len; $l1 >= 3; $l1--) {
      I = $l1;
      Result = String.fromCharCode(48 + (AValue % 7)) + Result;
      AValue = Math.floor(AValue / 7);
    };
    if (Len > 1) {
      Result = String.fromCharCode(48 + (AValue % 26)) + Result;
      AValue = Math.floor(AValue / 26);
    };
    Result = String.fromCharCode(65 + AValue) + Result;
    return Result;
  };
  this.SoundexWord = function (AText) {
    var Result = 0;
    var S = "";
    S = $mod.Soundex(AText,4);
    Result = S.charCodeAt(1 - 1) - 65;
    Result = ((Result * 26) + S.charCodeAt(2 - 1)) - 48;
    Result = ((Result * 7) + S.charCodeAt(3 - 1)) - 48;
    Result = ((Result * 7) + S.charCodeAt(4 - 1)) - 48;
    return Result;
  };
  this.DecodeSoundexWord = function (AValue) {
    var Result = "";
    Result = String.fromCharCode(48 + (AValue % 7));
    AValue = Math.floor(AValue / 7);
    Result = String.fromCharCode(48 + (AValue % 7)) + Result;
    AValue = Math.floor(AValue / 7);
    Result = pas.SysUtils.IntToStr(AValue % 26) + Result;
    AValue = Math.floor(AValue / 26);
    Result = String.fromCharCode(65 + AValue) + Result;
    return Result;
  };
  this.SoundexSimilar = function (AText, AOther, ALength) {
    var Result = false;
    Result = $mod.Soundex(AText,ALength) === $mod.Soundex(AOther,ALength);
    return Result;
  };
  this.SoundexSimilar$1 = function (AText, AOther) {
    var Result = false;
    Result = $mod.SoundexSimilar(AText,AOther,4);
    return Result;
  };
  this.SoundexCompare = function (AText, AOther, ALength) {
    var Result = 0;
    Result = pas.SysUtils.AnsiCompareStr($mod.Soundex(AText,ALength),$mod.Soundex(AOther,ALength));
    return Result;
  };
  this.SoundexCompare$1 = function (AText, AOther) {
    var Result = 0;
    Result = $mod.SoundexCompare(AText,AOther,4);
    return Result;
  };
  this.SoundexProc = function (AText, AOther) {
    var Result = false;
    Result = $mod.SoundexSimilar$1(AText,AOther);
    return Result;
  };
  $mod.$rtti.$ProcVar("TCompareTextProc",{procsig: rtl.newTIProcSig([["AText",rtl.string,2],["AOther",rtl.string,2]],rtl.boolean)});
  this.AnsiResemblesProc = null;
  this.ResemblesProc = null;
  this.TRomanConversionStrictness = {"0": "rcsStrict", rcsStrict: 0, "1": "rcsRelaxed", rcsRelaxed: 1, "2": "rcsDontCare", rcsDontCare: 2};
  $mod.$rtti.$Enum("TRomanConversionStrictness",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TRomanConversionStrictness});
  this.IsEmptyStr = function (S, EmptyChars) {
    var Result = false;
    var i = 0;
    var l = 0;
    l = S.length;
    i = 1;
    Result = true;
    while (Result && (i <= l)) {
      Result = pas.SysUtils.CharInSet(S.charAt(i - 1),EmptyChars);
      i += 1;
    };
    return Result;
  };
  this.DelSpace = function (S) {
    var Result = "";
    Result = $mod.DelChars(S," ");
    return Result;
  };
  this.DelChars = function (S, Chr) {
    var Result = "";
    var I = 0;
    var J = 0;
    Result = S;
    I = Result.length;
    while (I > 0) {
      if (Result.charAt(I - 1) === Chr) {
        J = I - 1;
        while ((J > 0) && (Result.charAt(J - 1) === Chr)) J -= 1;
        pas.System.Delete({get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},J + 1,I - J);
        I = J + 1;
      };
      I -= 1;
    };
    return Result;
  };
  this.DelSpace1 = function (S) {
    var Result = "";
    var I = 0;
    Result = S;
    for (var $l1 = Result.length; $l1 >= 2; $l1--) {
      I = $l1;
      if ((Result.charAt(I - 1) === " ") && (Result.charAt(I - 1 - 1) === " ")) pas.System.Delete({get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},I,1);
    };
    return Result;
  };
  this.Tab2Space = function (S, Numb) {
    var Result = "";
    var I = 0;
    I = 1;
    Result = S;
    while (I <= Result.length) if (Result.charAt(I - 1) !== String.fromCharCode(9)) {
      I += 1}
     else {
      Result = rtl.setCharAt(Result,I - 1," ");
      if (Numb > 1) pas.System.Insert(pas.System.StringOfChar(" ",Numb - 1),{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }},I);
      I += Numb;
    };
    return Result;
  };
  this.NPos = function (C, S, N) {
    var Result = 0;
    var i = 0;
    var p = 0;
    var k = 0;
    Result = 0;
    if (N < 1) return Result;
    k = 0;
    i = 1;
    do {
      p = pas.System.Pos(C,S);
      k += p;
      if (p > 0) pas.System.Delete({get: function () {
          return S;
        }, set: function (v) {
          S = v;
        }},1,p);
      i += 1;
    } while (!((i > N) || (p === 0)));
    if (p > 0) Result = k;
    return Result;
  };
  this.RPosEX = function (C, S, offs) {
    var Result = 0;
    Result = (new String(S)).lastIndexOf(C,offs - 1) + 1;
    return Result;
  };
  this.RPosex$1 = function (Substr, Source, offs) {
    var Result = 0;
    Result = (new String(Source)).lastIndexOf(Substr,offs - 1) + 1;
    return Result;
  };
  this.RPos = function (c, S) {
    var Result = 0;
    Result = $mod.RPosex$1(c,S,S.length);
    return Result;
  };
  this.RPos$1 = function (Substr, Source) {
    var Result = 0;
    Result = $mod.RPosex$1(Substr,Source,Source.length);
    return Result;
  };
  this.AddChar = function (C, S, N) {
    var Result = "";
    var l = 0;
    Result = S;
    l = Result.length;
    if (l < N) Result = pas.System.StringOfChar(C,N - l) + Result;
    return Result;
  };
  this.AddCharR = function (C, S, N) {
    var Result = "";
    var l = 0;
    Result = S;
    l = Result.length;
    if (l < N) Result = Result + pas.System.StringOfChar(C,N - l);
    return Result;
  };
  this.PadLeft = function (S, N) {
    var Result = "";
    Result = $mod.AddChar(" ",S,N);
    return Result;
  };
  this.PadRight = function (S, N) {
    var Result = "";
    Result = $mod.AddCharR(" ",S,N);
    return Result;
  };
  this.PadCenter = function (S, Len) {
    var Result = "";
    if (S.length < Len) {
      Result = pas.System.StringOfChar(" ",Math.floor(Len / 2) - Math.floor(S.length / 2)) + S;
      Result = Result + pas.System.StringOfChar(" ",Len - Result.length);
    } else Result = S;
    return Result;
  };
  this.Copy2Symb = function (S, Symb) {
    var Result = "";
    var p = 0;
    p = pas.System.Pos(Symb,S);
    if (p === 0) p = S.length + 1;
    Result = pas.System.Copy(S,1,p - 1);
    return Result;
  };
  this.Copy2SymbDel = function (S, Symb) {
    var Result = "";
    var p = 0;
    p = pas.System.Pos(Symb,S.get());
    if (p === 0) {
      Result = S.get();
      S.set("");
    } else {
      Result = pas.System.Copy(S.get(),1,p - 1);
      pas.System.Delete(S,1,p);
    };
    return Result;
  };
  this.Copy2Space = function (S) {
    var Result = "";
    Result = $mod.Copy2Symb(S," ");
    return Result;
  };
  this.Copy2SpaceDel = function (S) {
    var Result = "";
    Result = $mod.Copy2SymbDel(S," ");
    return Result;
  };
  this.AnsiProperCase = function (S, WordDelims) {
    var Result = "";
    var P = 0;
    var L = 0;
    Result = pas.SysUtils.LowerCase(S);
    P = 1;
    L = Result.length;
    while (P <= L) {
      while ((P <= L) && pas.SysUtils.CharInSet(Result.charAt(P - 1),WordDelims)) P += 1;
      if (P <= L) Result = rtl.setCharAt(Result,P - 1,pas.System.upcase(Result.charAt(P - 1)));
      while ((P <= L) && !pas.SysUtils.CharInSet(Result.charAt(P - 1),WordDelims)) P += 1;
    };
    return Result;
  };
  this.WordCount = function (S, WordDelims) {
    var Result = 0;
    var P = 0;
    var L = 0;
    Result = 0;
    P = 1;
    L = S.length;
    while (P <= L) {
      while ((P <= L) && pas.SysUtils.CharInSet(S.charAt(P - 1),WordDelims)) P += 1;
      if (P <= L) Result += 1;
      while ((P <= L) && !pas.SysUtils.CharInSet(S.charAt(P - 1),WordDelims)) P += 1;
    };
    return Result;
  };
  this.WordPosition = function (N, S, WordDelims) {
    var Result = 0;
    var PS = 0;
    var P = 0;
    var PE = 0;
    var Count = 0;
    Result = 0;
    Count = 0;
    PS = 1;
    PE = S.length;
    P = PS;
    while ((P <= PE) && (Count !== N)) {
      while ((P <= PE) && pas.SysUtils.CharInSet(S.charAt(P - 1),WordDelims)) P += 1;
      if (P <= PE) Count += 1;
      if (Count !== N) {
        while ((P <= PE) && !pas.SysUtils.CharInSet(S.charAt(P - 1),WordDelims)) P += 1}
       else Result = (P - PS) + 1;
    };
    return Result;
  };
  this.ExtractWord = function (N, S, WordDelims) {
    var Result = "";
    var i = 0;
    Result = $mod.ExtractWordPos(N,S,WordDelims,{get: function () {
        return i;
      }, set: function (v) {
        i = v;
      }});
    return Result;
  };
  this.ExtractWordPos = function (N, S, WordDelims, Pos) {
    var Result = "";
    var i = 0;
    var j = 0;
    var l = 0;
    j = 0;
    i = $mod.WordPosition(N,S,WordDelims);
    if (i > 2147483647) {
      Result = "";
      Pos.set(-1);
      return Result;
    };
    Pos.set(i);
    if (i !== 0) {
      j = i;
      l = S.length;
      while ((j <= l) && !pas.SysUtils.CharInSet(S.charAt(j - 1),WordDelims)) j += 1;
    };
    Result = pas.System.Copy(S,i,j - i);
    return Result;
  };
  this.ExtractDelimited = function (N, S, Delims) {
    var Result = "";
    var w = 0;
    var i = 0;
    var l = 0;
    var len = 0;
    w = 0;
    i = 1;
    l = 0;
    len = S.length;
    Result = rtl.strSetLength(Result,0);
    while ((i <= len) && (w !== N)) {
      if (pas.SysUtils.CharInSet(S.charAt(i - 1),Delims)) {
        w += 1}
       else {
        if ((N - 1) === w) {
          l += 1;
          Result = Result + S.charAt(i - 1);
        };
      };
      i += 1;
    };
    return Result;
  };
  this.ExtractSubstr = function (S, Pos, Delims) {
    var Result = "";
    var i = 0;
    var l = 0;
    i = Pos.get();
    l = S.length;
    while ((i <= l) && !pas.SysUtils.CharInSet(S.charAt(i - 1),Delims)) i += 1;
    Result = pas.System.Copy(S,Pos.get(),i - Pos.get());
    while ((i <= l) && pas.SysUtils.CharInSet(S.charAt(i - 1),Delims)) i += 1;
    if (i > 2147483647) {
      Pos.set(2147483647)}
     else Pos.set(i);
    return Result;
  };
  this.IsWordPresent = function (W, S, WordDelims) {
    var Result = false;
    var i = 0;
    var Count = 0;
    Result = false;
    Count = $mod.WordCount(S,WordDelims);
    i = 1;
    while (!Result && (i <= Count)) {
      Result = $mod.ExtractWord(i,S,WordDelims) === W;
      i += 1;
    };
    return Result;
  };
  this.FindPart = function (HelpWilds, InputStr) {
    var Result = 0;
    var Diff = 0;
    var i = 0;
    var J = 0;
    Result = 0;
    i = pas.System.Pos("?",HelpWilds);
    if (i === 0) {
      Result = pas.System.Pos(HelpWilds,InputStr)}
     else {
      Diff = InputStr.length - HelpWilds.length;
      for (var $l1 = 0, $end2 = Diff; $l1 <= $end2; $l1++) {
        i = $l1;
        for (var $l3 = 1, $end4 = HelpWilds.length; $l3 <= $end4; $l3++) {
          J = $l3;
          if ((InputStr.charAt((i + J) - 1) === HelpWilds.charAt(J - 1)) || (HelpWilds.charAt(J - 1) === "?")) {
            if (J === HelpWilds.length) {
              Result = i + 1;
              return Result;
            };
          } else break;
        };
      };
    };
    return Result;
  };
  this.IsWild = function (InputStr, Wilds, IgnoreCase) {
    var Result = false;
    var i = 0;
    var MaxinputWord = 0;
    var MaxWilds = 0;
    var eos = false;
    Result = true;
    if (Wilds === InputStr) return Result;
    i = pas.System.Pos("**",Wilds);
    while (i > 0) {
      pas.System.Delete({get: function () {
          return Wilds;
        }, set: function (v) {
          Wilds = v;
        }},i,1);
      i = pas.System.Pos("**",Wilds);
    };
    if (Wilds === "*") return Result;
    MaxinputWord = InputStr.length;
    MaxWilds = Wilds.length;
    if ((MaxWilds === 0) || (MaxinputWord === 0)) {
      Result = false;
      return Result;
    };
    if (IgnoreCase) {
      InputStr = pas.SysUtils.UpperCase(InputStr);
      Wilds = pas.SysUtils.UpperCase(Wilds);
    };
    Result = $impl.isMatch(1,InputStr,Wilds,1,1,MaxinputWord,MaxWilds,{get: function () {
        return eos;
      }, set: function (v) {
        eos = v;
      }});
    return Result;
  };
  this.XorString = function (Key, Src) {
    var Result = "";
    var i = 0;
    Result = Src;
    if (Key.length > 0) for (var $l1 = 1, $end2 = Src.length; $l1 <= $end2; $l1++) {
      i = $l1;
      Result = rtl.setCharAt(Result,i - 1,String.fromCharCode(Key.charCodeAt((1 + ((i - 1) % Key.length)) - 1) ^ Src.charCodeAt(i - 1)));
    };
    return Result;
  };
  this.XorEncode = function (Key, Source) {
    var Result = "";
    var i = 0;
    var C = 0;
    Result = "";
    for (var $l1 = 1, $end2 = Source.length; $l1 <= $end2; $l1++) {
      i = $l1;
      if (Key.length > 0) {
        C = Key.charCodeAt((1 + ((i - 1) % Key.length)) - 1) ^ Source.charCodeAt(i - 1)}
       else C = Source.charCodeAt(i - 1);
      Result = Result + pas.SysUtils.LowerCase(pas.SysUtils.IntToHex(C,2));
    };
    return Result;
  };
  this.XorDecode = function (Key, Source) {
    var Result = "";
    var i = 0;
    var C = "";
    Result = "";
    for (var $l1 = 0, $end2 = Math.floor(Source.length / 2) - 1; $l1 <= $end2; $l1++) {
      i = $l1;
      C = String.fromCharCode(pas.SysUtils.StrToIntDef("$" + pas.System.Copy(Source,(i * 2) + 1,2)," ".charCodeAt()));
      if (Key.length > 0) C = String.fromCharCode(Key.charCodeAt((1 + (i % Key.length)) - 1) ^ C.charCodeAt());
      Result = Result + C;
    };
    return Result;
  };
  this.GetCmdLineArg = function (Switch, SwitchChars) {
    var Result = "";
    var i = 0;
    var S = "";
    i = 1;
    Result = "";
    while ((Result === "") && (i <= pas.System.ParamCount())) {
      S = pas.System.ParamStr(i);
      if ((rtl.length(SwitchChars) === 0) || (pas.SysUtils.CharInSet(S.charAt(0),SwitchChars) && (S.length > 1) && (pas.SysUtils.CompareText(pas.System.Copy(S,2,S.length - 1),Switch) === 0))) {
        i += 1;
        if (i <= pas.System.ParamCount()) Result = pas.System.ParamStr(i);
      };
      i += 1;
    };
    return Result;
  };
  this.Numb2USA = function (S) {
    var Result = "";
    var i = 0;
    var NA = 0;
    i = S.length;
    Result = S;
    NA = 0;
    while (i > 0) {
      if ((((((Result.length - i) + 1) - NA) % 3) === 0) && (i !== 1)) {
        pas.System.Insert(",",{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},i);
        NA += 1;
      };
      i -= 1;
    };
    return Result;
  };
  this.Hex2Dec = function (S) {
    var Result = 0;
    var HexStr = "";
    if (pas.System.Pos("$",S) === 0) {
      HexStr = "$" + S}
     else HexStr = S;
    Result = pas.SysUtils.StrToInt(HexStr);
    return Result;
  };
  this.Dec2Numb = function (N, Len, Base) {
    var Result = "";
    var C = 0;
    var number = 0;
    if (N === 0) {
      Result = "0"}
     else {
      number = N;
      Result = "";
      while (number > 0) {
        C = number % Base;
        if (C > 9) {
          C = C + 55}
         else C = C + 48;
        Result = String.fromCharCode(C) + Result;
        number = Math.floor(number / Base);
      };
    };
    if (Result !== "") Result = $mod.AddChar("0",Result,Len);
    return Result;
  };
  this.Numb2Dec = function (S, Base) {
    var Result = 0;
    var i = 0;
    var P = 0;
    i = S.length;
    Result = 0;
    S = pas.SysUtils.UpperCase(S);
    P = 1;
    while (i >= 1) {
      if (S.charAt(i - 1) > "@") {
        Result = Result + ((S.charCodeAt(i - 1) - 55) * P)}
       else Result = Result + ((S.charCodeAt(i - 1) - 48) * P);
      i -= 1;
      P = P * Base;
    };
    return Result;
  };
  this.IntToBin = function (Value, Digits, Spaces) {
    var Result = "";
    var endpos = 0;
    var p = 0;
    var p2 = 0;
    var k = 0;
    Result = "";
    if (Digits > 32) Digits = 32;
    if (Spaces === 0) {
      Result = $mod.IntToBin$1(Value,Digits);
      return Result;
    };
    endpos = Digits + Math.floor((Digits - 1) / Spaces);
    Result = rtl.strSetLength(Result,endpos);
    p = endpos;
    p2 = 1;
    k = Spaces;
    while (p >= p2) {
      if (k === 0) {
        Result = rtl.setCharAt(Result,p - 1," ");
        p -= 1;
        k = Spaces;
      };
      Result = rtl.setCharAt(Result,p - 1,String.fromCharCode(48 + ((Value >>> 0) & 1)));
      Value = rtl.lw((Value >>> 0) >>> 1);
      p -= 1;
      k -= 1;
    };
    return Result;
  };
  this.IntToBin$1 = function (Value, Digits) {
    var Result = "";
    var p = 0;
    var p2 = 0;
    Result = "";
    if (Digits <= 0) return Result;
    Result = rtl.strSetLength(Result,Digits);
    p = Digits;
    p2 = 1;
    while ((p >= p2) && ((Value >>> 0) > 0)) {
      Result = rtl.setCharAt(Result,p - 1,String.fromCharCode(48 + ((Value >>> 0) & 1)));
      Value = rtl.lw((Value >>> 0) >>> 1);
      p -= 1;
    };
    Digits = (p - p2) + 1;
    while (Digits > 0) {
      Result = rtl.setCharAt(Result,Digits - 1,String.fromCharCode(48));
      Digits -= 1;
    };
    return Result;
  };
  this.IntToBin$2 = function (Value, Digits) {
    var Result = "";
    var p = 0;
    var p2 = 0;
    Result = "";
    if (Digits <= 0) return Result;
    Result = rtl.strSetLength(Result,Digits);
    p = Digits;
    p2 = 1;
    while ((p >= p2) && (Value > 0)) {
      Result = rtl.setCharAt(Result,p - 1,String.fromCharCode(48 + ((Value >>> 0) & 1)));
      Value = Math.floor(Value / 2);
      p -= 1;
    };
    Digits = (p - p2) + 1;
    while (Digits > 0) Result = rtl.setCharAt(Result,Digits - 1,"0");
    return Result;
  };
  var Arabics = [1,4,5,9,10,40,50,90,100,400,500,900,1000];
  var Romans = ["I","IV","V","IX","X","XL","L","XC","C","CD","D","CM","M"];
  this.IntToRoman = function (Value) {
    var Result = "";
    var i = 0;
    Result = "";
    for (var $l1 = 13; $l1 >= 1; $l1--) {
      i = $l1;
      while (Value >= Arabics[i - 1]) {
        Value = Value - Arabics[i - 1];
        Result = Result + Romans[i - 1];
      };
    };
    return Result;
  };
  this.TryRomanToInt = function (S, N, Strictness) {
    var Result = false;
    var i = 0;
    var Len = 0;
    var Terminated = false;
    Result = false;
    S = pas.SysUtils.UpperCase(S);
    Len = S.length;
    if (Strictness === $mod.TRomanConversionStrictness.rcsDontCare) {
      N.set($impl.RomanToIntDontCare(S));
      if (N.get() === 0) {
        Result = Len === 0;
      } else Result = true;
      return Result;
    };
    if (Len === 0) return Result;
    i = 1;
    N.set(0);
    Terminated = false;
    while ((i <= Len) && ((Strictness !== $mod.TRomanConversionStrictness.rcsStrict) || (i < 4)) && (S.charAt(i - 1) === "M")) {
      i += 1;
      N.set(N.get() + 1000);
    };
    if ((i <= Len) && (S.charAt(i - 1) === "D")) {
      i += 1;
      N.set(N.get() + 500);
    } else if (((i + 1) <= Len) && (S.charAt(i - 1) === "C")) {
      if (S.charAt((i + 1) - 1) === "M") {
        i += 2;
        N.set(N.get() + 900);
      } else if (S.charAt((i + 1) - 1) === "D") {
        i += 2;
        N.set(N.get() + 400);
      };
    };
    if ((i <= Len) && (S.charAt(i - 1) === "C")) {
      i += 1;
      N.set(N.get() + 100);
      if ((i <= Len) && (S.charAt(i - 1) === "C")) {
        i += 1;
        N.set(N.get() + 100);
      };
      if ((i <= Len) && (S.charAt(i - 1) === "C")) {
        i += 1;
        N.set(N.get() + 100);
      };
      if ((Strictness !== $mod.TRomanConversionStrictness.rcsStrict) && (i <= Len) && (S.charAt(i - 1) === "C")) {
        i += 1;
        N.set(N.get() + 100);
      };
    };
    if (((i + 1) <= Len) && (S.charAt(i - 1) === "X")) {
      if (S.charAt((i + 1) - 1) === "C") {
        i += 2;
        N.set(N.get() + 90);
      } else if (S.charAt((i + 1) - 1) === "L") {
        i += 2;
        N.set(N.get() + 40);
      };
    };
    if ((i <= Len) && (S.charAt(i - 1) === "L")) {
      i += 1;
      N.set(N.get() + 50);
    };
    if ((i <= Len) && (S.charAt(i - 1) === "X")) {
      i += 1;
      N.set(N.get() + 10);
      if ((i <= Len) && (S.charAt(i - 1) === "X")) {
        i += 1;
        N.set(N.get() + 10);
      };
      if ((i <= Len) && (S.charAt(i - 1) === "X")) {
        i += 1;
        N.set(N.get() + 10);
      };
      if ((Strictness !== $mod.TRomanConversionStrictness.rcsStrict) && (i <= Len) && (S.charAt(i - 1) === "X")) {
        i += 1;
        N.set(N.get() + 10);
      };
    };
    if (((i + 1) <= Len) && (S.charAt(i - 1) === "I")) {
      if (S.charAt((i + 1) - 1) === "X") {
        Terminated = true;
        i += 2;
        N.set(N.get() + 9);
      } else if (S.charAt((i + 1) - 1) === "V") {
        Terminated = true;
        i += 2;
        N.set(N.get() + 4);
      };
    };
    if (!Terminated && (i <= Len) && (S.charAt(i - 1) === "V")) {
      i += 1;
      N.set(N.get() + 5);
    };
    if (!Terminated && (i <= Len) && (S.charAt(i - 1) === "I")) {
      Terminated = true;
      i += 1;
      N.set(N.get() + 1);
      if ((i <= Len) && (S.charAt(i - 1) === "I")) {
        i += 1;
        N.set(N.get() + 1);
      };
      if ((i <= Len) && (S.charAt(i - 1) === "I")) {
        i += 1;
        N.set(N.get() + 1);
      };
      if ((Strictness !== $mod.TRomanConversionStrictness.rcsStrict) && (i <= Len) && (S.charAt(i - 1) === "I")) {
        i += 1;
        N.set(N.get() + 1);
      };
    };
    Result = i > Len;
    return Result;
  };
  this.RomanToInt = function (S, Strictness) {
    var Result = 0;
    if (!$mod.TryRomanToInt(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},Strictness)) throw pas.SysUtils.EConvertError.$create("CreateFmt",[$mod.SInvalidRomanNumeral,[S]]);
    return Result;
  };
  this.RomanToIntDef = function (S, ADefault, Strictness) {
    var Result = 0;
    if (!$mod.TryRomanToInt(S,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},Strictness)) Result = ADefault;
    return Result;
  };
  this.DigitChars = rtl.createSet(null,48,57);
  this.Brackets = rtl.createSet(40,41,91,93,123,125);
  this.StdWordDelims = rtl.unionSet(rtl.createSet(null,0,32,44,46,59,47,92,58,39,34,96),$mod.Brackets);
  this.StdSwitchChars = rtl.createSet(45,47);
  this.PosSet = function (c, s) {
    var Result = 0;
    Result = $mod.PosSetEx(c,s,1);
    return Result;
  };
  this.PosSet$1 = function (c, s) {
    var Result = 0;
    Result = $mod.PosSetEx$1(c,s,1);
    return Result;
  };
  this.PosSetEx = function (c, s, count) {
    var Result = 0;
    var i = 0;
    var j = 0;
    if (s === "") {
      j = 0}
     else {
      i = s.length;
      j = count;
      if (j > i) {
        Result = 0;
        return Result;
      };
      while ((j <= i) && !pas.SysUtils.CharInSet(s.charAt(j - 1),c)) j += 1;
      if (j > i) j = 0;
    };
    Result = j;
    return Result;
  };
  this.PosSetEx$1 = function (c, s, count) {
    var Result = 0;
    var cset = [];
    var i = 0;
    var l = 0;
    l = c.length;
    cset = rtl.arraySetLength(cset,"",l);
    if (l > 0) for (var $l1 = 1, $end2 = l; $l1 <= $end2; $l1++) {
      i = $l1;
      cset[i - 1] = c.charAt(i - 1);
    };
    Result = $mod.PosSetEx(cset,s,count);
    return Result;
  };
  this.Removeleadingchars = function (S, CSet) {
    var I = 0;
    var J = 0;
    I = S.get().length;
    if (I > 0) {
      J = 1;
      while ((J <= I) && pas.SysUtils.CharInSet(S.get().charAt(J - 1),CSet)) J += 1;
      if (J > 1) pas.System.Delete(S,1,J - 1);
    };
  };
  this.RemoveTrailingChars = function (S, CSet) {
    var i = 0;
    var j = 0;
    i = S.get().length;
    if (i > 0) {
      j = i;
      while ((j > 0) && pas.SysUtils.CharInSet(S.get().charAt(j - 1),CSet)) j -= 1;
      if (j !== i) S.set(rtl.strSetLength(S.get(),j));
    };
  };
  this.RemovePadChars = function (S, CSet) {
    var I = 0;
    var J = 0;
    var K = 0;
    I = S.get().length;
    if (I === 0) return;
    J = I;
    while ((J > 0) && pas.SysUtils.CharInSet(S.get().charAt(J - 1),CSet)) J -= 1;
    if (J === 0) {
      S.set("");
      return;
    };
    S.set(rtl.strSetLength(S.get(),J));
    I = J;
    K = 1;
    while ((K <= I) && pas.SysUtils.CharInSet(S.get().charAt(K - 1),CSet)) K += 1;
    if (K > 1) pas.System.Delete(S,1,K - 1);
  };
  this.TrimLeftSet = function (S, CSet) {
    var Result = "";
    Result = S;
    $mod.Removeleadingchars({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},CSet);
    return Result;
  };
  this.TrimRightSet = function (S, CSet) {
    var Result = "";
    Result = S;
    $mod.RemoveTrailingChars({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},CSet);
    return Result;
  };
  this.TrimSet = function (S, CSet) {
    var Result = "";
    Result = S;
    $mod.RemovePadChars({get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},CSet);
    return Result;
  };
  $mod.$rtti.$DynArray("SizeIntArray",{eltype: rtl.nativeint});
  $mod.$init = function () {
    $mod.AnsiResemblesProc = $mod.SoundexProc;
    $mod.ResemblesProc = $mod.SoundexProc;
  };
},["JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.SScore = "00000000000000000000000000000000" + "00000000000000000000000000000000" + "0123012i02245501262301i2i2" + "000000" + "0123012i02245501262301i2i2" + "00000000000000000000000000000000" + "00000000000000000000000000000000" + "00000000000000000000000000000000" + "00000000000000000000000000000000" + "00000";
  $impl.Ord0 = "0".charCodeAt();
  $impl.OrdA = "A".charCodeAt();
  $impl.RomanValues = function (C) {
    var Result = 0;
    var $tmp1 = C;
    if ($tmp1 === "C") {
      Result = 100}
     else if ($tmp1 === "D") {
      Result = 500}
     else if ($tmp1 === "I") {
      Result = 1}
     else if ($tmp1 === "L") {
      Result = 50}
     else if ($tmp1 === "M") {
      Result = 1000}
     else if ($tmp1 === "V") {
      Result = 5}
     else if ($tmp1 === "X") {
      Result = 10}
     else {
      Result = 0;
    };
    return Result;
  };
  var RomanChars = rtl.createSet(67,68,73,76,77,86,88);
  $impl.RomanToIntDontCare = function (S) {
    var Result = 0;
    var index = "";
    var Next = "";
    var i = 0;
    var l = 0;
    var Negative = false;
    Result = 0;
    i = 0;
    Negative = (S.length > 0) && (S.charAt(0) === "-");
    if (Negative) i += 1;
    l = S.length;
    while (i < l) {
      i += 1;
      index = pas.System.upcase(S.charAt(i - 1));
      if (index.charCodeAt() in RomanChars) {
        if ((i + 1) <= l) {
          Next = pas.System.upcase(S.charAt((i + 1) - 1))}
         else Next = "\x00";
        if ((Next.charCodeAt() in RomanChars) && ($impl.RomanValues(index) < $impl.RomanValues(Next))) {
          Result += $impl.RomanValues(Next);
          Result -= $impl.RomanValues(index);
          i += 1;
        } else Result += $impl.RomanValues(index);
      } else {
        Result = 0;
        return Result;
      };
    };
    if (Negative) Result = -Result;
    return Result;
  };
  $impl.isMatch = function (level, inputstr, wilds, CWild, CinputWord, MaxInputword, maxwilds, EOS) {
    var Result = false;
    EOS.set(false);
    Result = true;
    do {
      if (wilds.charAt(CWild - 1) === "*") {
        CWild += 1;
        while (wilds.charAt(CWild - 1) === "?") {
          CWild += 1;
          CinputWord += 1;
        };
        do {
          while ((inputstr.charAt(CinputWord - 1) !== wilds.charAt(CWild - 1)) && (CinputWord <= MaxInputword)) CinputWord += 1;
          Result = $impl.isMatch(level + 1,inputstr,wilds,CWild,CinputWord,MaxInputword,maxwilds,EOS);
          if (!Result) CinputWord += 1;
        } while (!(Result || (CinputWord >= MaxInputword)));
        if (Result && EOS.get()) return Result;
        continue;
      };
      if (wilds.charAt(CWild - 1) === "?") {
        CWild += 1;
        CinputWord += 1;
        continue;
      };
      if (inputstr.charAt(CinputWord - 1) === wilds.charAt(CWild - 1)) {
        CWild += 1;
        CinputWord += 1;
        continue;
      };
      Result = false;
      return Result;
    } while (!((CinputWord > MaxInputword) || (CWild > maxwilds)));
    if ((CinputWord <= MaxInputword) || (CWild < maxwilds)) {
      Result = false}
     else if (CWild > maxwilds) {
      EOS.set(false)}
     else {
      EOS.set(wilds.charAt(CWild - 1) === "*");
      if (!EOS.get()) Result = false;
    };
    return Result;
  };
});
rtl.module("WEBLib.TMSFNCPersistence",["System","contnrs","Classes","TypInfo","Variants","SysUtils","WEBLib.TMSFNCTypes","WEBLib.TMSFNCJSONReader","WEBLib.TMSFNCJSONWriter"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createInterface($mod,"ITMSFNCPersistence","{363F04AF-B8A7-4C47-A2D6-8ED9C44CEFF6}",["SaveSettingsToFile","LoadSettingsFromFile","SaveSettingsToStream","LoadSettingsFromStream","CanSaveProperty","CanLoadProperty"],pas.System.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("SaveSettingsToFile",0,[["AFileName",rtl.string],["AAppearanceOnly",rtl.boolean]]);
    $r.addMethod("LoadSettingsFromFile",0,[["AFileName",rtl.string]]);
    $r.addMethod("SaveSettingsToStream",0,[["AStream",pas["WEBLib.TMSFNCTypes"].$rtti["TStream"]],["AAppearanceOnly",rtl.boolean]]);
    $r.addMethod("LoadSettingsFromStream",0,[["AStream",pas["WEBLib.TMSFNCTypes"].$rtti["TStream"]]]);
    $r.addMethod("CanSaveProperty",1,[["AObject",pas.System.$rtti["TObject"]],["APropertyName",rtl.string],["APropertyType",pas.TypInfo.$rtti["TTypeKind"]]],rtl.boolean);
    $r.addMethod("CanLoadProperty",1,[["AObject",pas.System.$rtti["TObject"]],["APropertyName",rtl.string],["APropertyType",pas.TypInfo.$rtti["TTypeKind"]]],rtl.boolean);
  });
  rtl.createInterface($mod,"ITMSFNCBaseListIO","{FAB1D21E-D798-4CE0-B17B-9D75E4456AB4}",["GetItemClass"],pas.System.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("GetItemClass",1,null,pas.System.$rtti["TClass"]);
  });
  rtl.createInterface($mod,"ITMSFNCBasePersistenceIO","{91DEAFC3-8932-45F4-A3ED-5AAA0C0E9250}",["CreateObject"],pas.System.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("CreateObject",1,[["AClassName",rtl.string,2],["ABaseClass",pas.System.$rtti["TClass"],2]],pas.System.$rtti["TObject"]);
  });
  rtl.createInterface($mod,"ITMSFNCPersistenceIO","{11B625F8-447A-4AE5-BB88-5ECDEA979AF7}",["NeedsObjectReference","GetObjectReference","FindObject","FixOwners"],$mod.ITMSFNCBasePersistenceIO,function () {
    var $r = this.$rtti;
    $r.addMethod("NeedsObjectReference",1,[["AClass",pas.System.$rtti["TClass"],2]],rtl.boolean);
    $r.addMethod("GetObjectReference",1,[["AObject",pas.System.$rtti["TObject"],2]],rtl.string);
    $r.addMethod("FindObject",1,[["AReference",rtl.string,2]],pas.System.$rtti["TObject"]);
    $r.addMethod("FixOwners",0,[["AObject",pas.System.$rtti["TObject"],2],["AObjectList",pas.System.$rtti["TObject"],2]]);
  });
  rtl.createClass($mod,"ETMSFNCReaderException",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"TTMSFNCObjectList",pas.contnrs.TObjectList,function () {
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItem$1 = function (Index, Value) {
      this.SetItem(Index,Value);
    };
  });
  rtl.createClass($mod,"TTMSFNCStringList",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = "";
      Result = "" + this.Get(Index);
      return Result;
    };
    this.SetItem = function (Index, Value) {
      this.Put(Index,Value);
    };
  });
  $mod.$rtti.$DynArray("TTMSFNCObjectArray",{eltype: pas.System.$rtti["TObject"]});
  $mod.$rtti.$MethodVar("TTMSFNCWriterCustomWritePropertyEvent",{procsig: rtl.newTIProcSig([["AObject",pas.System.$rtti["TObject"]],["APropertyName",rtl.string],["APropertyKind",pas.TypInfo.$rtti["TTypeKind"]],["AWriter",pas["WEBLib.TMSFNCJSONWriter"].$rtti["TTMSFNCJSONWriter"]],["ACanWrite",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCWriterCustomIsAssignablePropertyEvent",{procsig: rtl.newTIProcSig([["AObject",pas.System.$rtti["TObject"]],["APropertyName",rtl.string],["AIsAssignable",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$DynArray("TTMSFNCExcludePropertyListArray",{eltype: rtl.string});
  rtl.createClass($mod,"TTMSFNCWriter",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FWriter = null;
      this.FIOReference = null;
      this.FOnCustomWriteProperty = null;
      this.FRootObject = null;
      this.FExcludeProperties = [];
      this.FOnCustomIsAssignableProperty = null;
    };
    this.$final = function () {
      this.FWriter = undefined;
      this.FIOReference = undefined;
      this.FOnCustomWriteProperty = undefined;
      this.FRootObject = undefined;
      this.FExcludeProperties = undefined;
      this.FOnCustomIsAssignableProperty = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetRootObject = function (Value) {
      this.FRootObject = Value;
      $mod.TTMSFNCPersistence.FRootObject = this.FRootObject;
    };
    this.SetExcludeProperties = function (Value) {
      this.FExcludeProperties = Value;
      $mod.TTMSFNCPersistence.FExcludeProperties = this.FExcludeProperties;
    };
    this.SetIOReference = function (Value) {
      this.FIOReference = Value;
      $mod.TTMSFNCPersistence.FIOReference = this.FIOReference;
    };
    this.WritePropInfoValue = function (AInstance, APropInfo) {
      var cn = "";
      var pName = "";
      var en = "";
      var k = 0;
      var p = null;
      var o = null;
      var v = pas.System.TMethod.$new();
      if ($mod.TTMSFNCPersistence.IsWriteOnly(APropInfo)) {
        this.FWriter.WriteNull();
        return;
      };
      o = AInstance;
      p = APropInfo;
      k = $mod.TTMSFNCPersistence.GetPropInfoType(p);
      pName = $mod.TTMSFNCPersistence.GetPropInfoName(p);
      var $tmp1 = k;
      if ($tmp1 === pas.TypInfo.TTypeKind.tkInteger) {
        cn = $mod.TTMSFNCPersistence.GetPropInfoTypeName(p);
        if ((cn === "TAlphaColor") || (cn === "TColor") || (cn === "TGraphicsColor")) {
          if (pas.TypInfo.GetOrdProp$1(o,p) === -1) {
            this.FWriter.WriteString("gcNull")}
           else this.FWriter.WriteString($impl.ColorToHTMLEx(pas.TypInfo.GetOrdProp$1(o,p)));
        } else this.FWriter.WriteInteger(pas.TypInfo.GetOrdProp$1(o,p));
      } else if (($tmp1 === pas.TypInfo.TTypeKind.tkChar) || ($tmp1 === pas.TypInfo.TTypeKind.tkString)) {
        this.FWriter.WriteString(pas.TypInfo.GetStrProp$1(o,p))}
       else if ($tmp1 === pas.TypInfo.TTypeKind.tkEnumeration) {
        if ($mod.TTMSFNCPersistence.GetPropInfoDataTypeInfo(p) === rtl.boolean) {
          this.FWriter.WriteBoolean(pas.TypInfo.GetOrdProp$1(o,p) != 0)}
         else this.FWriter.WriteInteger(pas.TypInfo.GetOrdProp$1(o,p))}
       else if ($tmp1 === pas.TypInfo.TTypeKind.tkBool) {
        this.FWriter.WriteBoolean(pas.TypInfo.GetOrdProp$1(o,p) != 0)}
       else if ($tmp1 === pas.TypInfo.TTypeKind.tkDouble) {
        this.FWriter.WriteDouble(pas.TypInfo.GetFloatProp$1(o,p))}
       else if ($tmp1 === pas.TypInfo.TTypeKind.tkSet) {
        this.FWriter.WriteInteger(pas.TypInfo.GetOrdProp$1(o,p))}
       else if ($tmp1 === pas.TypInfo.TTypeKind.tkMethod) {
        v.$assign(pas.TypInfo.GetMethodProp(o,p));
        if (v.Code === null) {
          this.FWriter.WriteNull()}
         else {
          if ($mod.TTMSFNCPersistence.FRootObject != null) {
            this.FWriter.WriteString($mod.TTMSFNCPersistence.FRootObject.$class.MethodName(v.Code))}
           else this.FWriter.WriteNull();
        };
      } else {
        en = $mod.TTMSFNCPersistence.GetEnumName(pas.TypInfo.$rtti["TTypeKind"],k);
        this.FWriter.WriteNull();
      };
    };
    this.WriteProperties = function (AObject) {
      var ci = null;
      var p = null;
      var a = [];
      var I = 0;
      if (AObject != null) {
        ci = AObject.$rtti;
        try {
          a = pas.TypInfo.GetPropList(ci,pas.TypInfo.tkAny,true);
          for (var $l1 = 0, $end2 = rtl.length(a) - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            this.WriteProperty(AObject,a[I]);
          };
        } finally {
        };
      };
    };
    this.WriteProperty = function (AObject, AProp) {
      var pName = "";
      var k = 0;
      var b = false;
      var a = false;
      var ap = false;
      var p = null;
      var o = null;
      try {
        if (!(AProp != null)) return;
        pName = $mod.TTMSFNCPersistence.GetPropInfoName(AProp);
        k = $mod.TTMSFNCPersistence.GetPropInfoType(AProp);
        b = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IndexOfTextInArray(pName,$mod.TTMSFNCPersistence.FExcludeProperties) === -1;
        if (pas.SysUtils.Supports$3(AObject,$mod.ITMSFNCPersistence.$guid,{get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }})) b = p.CanSaveProperty(AObject,pName,k);
        if (b) {
          a = true;
          if (this.FOnCustomWriteProperty != null) this.FOnCustomWriteProperty(AObject,pName,k,this.FWriter,{get: function () {
              return a;
            }, set: function (v) {
              a = v;
            }});
          if (a) {
            this.FWriter.WriteName(pName);
            if (k in rtl.createSet(pas.TypInfo.TTypeKind.tkClass)) {
              o = pas.TypInfo.GetObjectProp(AObject,pName);
              ap = $mod.TTMSFNCPersistence.IsAssignableProperty(AObject,AProp);
              if (this.FOnCustomIsAssignableProperty != null) this.FOnCustomIsAssignableProperty(AObject,pName,{get: function () {
                  return ap;
                }, set: function (v) {
                  ap = v;
                }});
              if (ap) {
                if (pas.Classes.TComponent.isPrototypeOf(o)) {
                  this.FWriter.WriteString(rtl.as(o,pas.Classes.TComponent).FName)}
                 else this.FWriter.WriteString("");
              } else this.WriteObject(o);
            } else this.WritePropInfoValue(AObject,AProp);
          };
        };
      } finally {
        rtl._Release(p);
      };
    };
    this.WriteGenericObjectList = function (AList) {
      var I = 0;
      this.FWriter.WriteBeginArray();
      for (var $l1 = 0, $end2 = AList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.WriteSingleObject(AList.GetItem$1(I));
      };
      this.FWriter.WriteEndArray();
    };
    this.WriteGenericStringList = function (AList) {
      var I = 0;
      this.FWriter.WriteBeginArray();
      for (var $l1 = 0, $end2 = AList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.FWriter.WriteString(AList.GetItem(I));
      };
      this.FWriter.WriteEndArray();
    };
    this.WriteStrings = function (AList) {
      var I = 0;
      this.FWriter.WriteBeginArray();
      for (var $l1 = 0, $end2 = AList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.FWriter.WriteString(AList.Get(I));
      };
      this.FWriter.WriteEndArray();
    };
    this.WriteCollection = function (ACollection) {
      var I = 0;
      this.FWriter.WriteBeginArray();
      for (var $l1 = 0, $end2 = ACollection.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.WriteSingleObject(ACollection.GetItem(I));
      };
      this.FWriter.WriteEndArray();
    };
    this.WriteList = function (AList) {
      var I = 0;
      this.FWriter.WriteBeginArray();
      for (var $l1 = 0, $end2 = AList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.WriteSingleObject(rtl.getObject(AList.Get(I)));
      };
      this.FWriter.WriteEndArray();
    };
    this.WriteBitmap = function (ABitmap) {
      var ms = null;
      if (pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(ABitmap)) {
        this.FWriter.WriteString("");
        return;
      };
      ms = pas["WEBLib.TMSFNCTypes"].TMemoryStream.$create("Create");
      try {
        throw pas.SysUtils.Exception.$create("Create$1",["Implement SaveToStream on TTMSFNCBitmap"]);
        ms.FPosition = 0;
        this.FWriter.WriteString(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SaveStreamToHexStr(ms));
      } finally {
        ms = rtl.freeLoc(ms);
      };
    };
    this.WriteSingleObject = function (AObject) {
      this.FWriter.WriteBeginObject();
      if ($mod.TTMSFNCPersistence.ClassTypeVariable !== "") {
        this.FWriter.WriteName($mod.TTMSFNCPersistence.ClassTypeVariable);
        this.FWriter.WriteString(AObject.$classname);
      };
      this.WriteProperties(AObject);
      this.FWriter.WriteEndObject();
    };
    this.WriteObject = function (AObject) {
      var b = null;
      try {
        if (AObject === null) {
          this.FWriter.WriteNull()}
         else {
          if ($mod.TTMSFNCPersistence.IsGenericList(AObject.$class.ClassType(),"String")) {
            this.WriteGenericStringList(AObject)}
           else if ($mod.TTMSFNCPersistence.IsGenericList(AObject.$class.ClassType(),"")) {
            this.WriteGenericObjectList(AObject)}
           else if ($mod.TTMSFNCPersistence.IsList(AObject.$class.ClassType())) {
            this.WriteList(AObject)}
           else if ($mod.TTMSFNCPersistence.IsCollection(AObject.$class.ClassType())) {
            this.WriteCollection(AObject)}
           else if ($mod.TTMSFNCPersistence.IsBitmap(AObject.$class.ClassType())) {
            this.WriteBitmap(AObject)}
           else if ($mod.TTMSFNCPersistence.IsDescendingClass(AObject.$class.ClassType(),["TStrings"])) {
            this.WriteStrings(AObject)}
           else {
            if ((this.FIOReference != null) && pas.SysUtils.Supports$3(this.FIOReference,$mod.ITMSFNCPersistenceIO.$guid,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }})) {
              if (b.NeedsObjectReference(AObject.$class.ClassType())) {
                this.FWriter.WriteString(b.GetObjectReference(AObject))}
               else this.WriteSingleObject(AObject);
            } else this.WriteSingleObject(AObject);
          };
        };
      } finally {
        rtl._Release(b);
      };
    };
    this.Create$1 = function (AStream) {
      this.FWriter = pas["WEBLib.TMSFNCJSONWriter"].TTMSFNCJSONWriter.$create("Create$1",[AStream]);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FWriter");
      pas.System.TObject.Destroy.call(this);
    };
    this.Write = function (AObject) {
      this.WriteObject(AObject);
    };
    this.WriteArray = function (AName, AArray) {
      var I = 0;
      this.FWriter.WriteBeginObject();
      this.FWriter.WriteName(AName);
      this.FWriter.WriteBeginArray();
      for (var $l1 = 0, $end2 = rtl.length(AArray) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.WriteSingleObject(AArray[I]);
      };
      this.FWriter.WriteEndArray();
      this.FWriter.WriteEndObject();
    };
  });
  $mod.$rtti.$MethodVar("TTMSFNCReaderCustomReadPropertyEvent",{procsig: rtl.newTIProcSig([["AObject",pas.System.$rtti["TObject"]],["APropertyName",rtl.string],["APropertyKind",pas.TypInfo.$rtti["TTypeKind"]],["AReader",pas["WEBLib.TMSFNCJSONReader"].$rtti["TTMSFNCJSONReader"]],["ACanRead",rtl.boolean,1]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCReader",pas.System.TObject,function () {
    rtl.createClass(this,"TTMSFNCObjectReference",pas.System.TObject,function () {
      this.$init = function () {
        pas.System.TObject.$init.call(this);
        this.Instance = null;
        this.Prop = null;
        this.Id = "";
      };
      this.$final = function () {
        this.Instance = undefined;
        this.Prop = undefined;
        pas.System.TObject.$final.call(this);
      };
      this.Create$1 = function (AInstance, AProp, AId) {
        this.Instance = AInstance;
        this.Prop = AProp;
        this.Id = AId;
        return this;
      };
    });
    rtl.createClass(this,"TTMSFNCObjectReferences",pas.contnrs.TObjectList,function () {
      this.GetItem$1 = function (Index) {
        var Result = null;
        Result = this.GetItem(Index);
        return Result;
      };
      this.SetItem$1 = function (Index, Value) {
        this.SetItem(Index,Value);
      };
    });
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FReferences = null;
      this.FReader = null;
      this.FIOReference = null;
      this.FOnCustomReadProperty = null;
      this.FRootObject = null;
      this.FExcludeProperties = [];
      this.FOnCustomIsAssignableProperty = null;
    };
    this.$final = function () {
      this.FReferences = undefined;
      this.FReader = undefined;
      this.FIOReference = undefined;
      this.FOnCustomReadProperty = undefined;
      this.FRootObject = undefined;
      this.FExcludeProperties = undefined;
      this.FOnCustomIsAssignableProperty = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.ReadSingleObject = function (ABaseClass) {
      var Result = null;
      var cn = "";
      var b = null;
      try {
        this.FReader.ReadBeginObject();
        if ($mod.TTMSFNCPersistence.ClassTypeVariable !== "") {
          if (!this.FReader.HasNext() || (this.FReader.ReadName() !== $mod.TTMSFNCPersistence.ClassTypeVariable)) throw $mod.ETMSFNCReaderException.$create("Create$1",['"' + $mod.TTMSFNCPersistence.ClassTypeVariable + '" property not found in Object descriptor.']);
          cn = this.FReader.ReadString();
        };
        if (cn === "") cn = ABaseClass.$classname;
        if ((this.FIOReference != null) && pas.SysUtils.Supports$3(this.FIOReference,$mod.ITMSFNCBasePersistenceIO.$guid,{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }})) {
          Result = b.CreateObject(cn,ABaseClass)}
         else Result = $mod.TTMSFNCPersistence.CreateObject(cn,ABaseClass);
        try {
          this.ReadProperties(Result);
          this.FReader.ReadEndObject();
        } catch ($e) {
          Result = rtl.freeLoc(Result);
          throw $e;
        };
      } finally {
        rtl._Release(b);
      };
      return Result;
    };
    this.SetRootObject = function (Value) {
      this.FRootObject = Value;
      $mod.TTMSFNCPersistence.FRootObject = this.FRootObject;
    };
    this.SetExcludeProperties = function (Value) {
      this.FExcludeProperties = Value;
      $mod.TTMSFNCPersistence.FExcludeProperties = this.FExcludeProperties;
    };
    this.SetIOReference = function (Value) {
      this.FIOReference = Value;
      $mod.TTMSFNCPersistence.FIOReference = this.FIOReference;
    };
    this.ReadSingleObject$1 = function (AObject) {
      this.FReader.ReadBeginObject();
      if ($mod.TTMSFNCPersistence.ClassTypeVariable !== "") {
        if (!this.FReader.HasNext() || (this.FReader.ReadName() !== $mod.TTMSFNCPersistence.ClassTypeVariable)) throw $mod.ETMSFNCReaderException.$create("Create$1",['"' + $mod.TTMSFNCPersistence.ClassTypeVariable + '" property not found in Object descriptor.']);
        this.FReader.ReadString();
      };
      try {
        this.ReadProperties(AObject);
        this.FReader.ReadEndObject();
      } catch ($e) {
        throw $e;
      };
    };
    this.ReadProperties = function (AObject) {
      var Prop = null;
      while (this.FReader.HasNext()) {
        if (!this.FReader.IsNull()) {
          Prop = pas.TypInfo.GetPropInfo$2(AObject,this.FReader.ReadName());
          if (Prop != null) {
            this.ReadProperty(AObject,Prop)}
           else this.FReader.SkipValue();
        } else this.FReader.SkipValue();
      };
    };
    this.ReadProperty = function (AObject, AProp) {
      var pName = "";
      var ct = null;
      var b = false;
      var p = null;
      var pio = null;
      var k = 0;
      var a = false;
      var ap = false;
      var o = null;
      var n = "";
      try {
        if (!(AProp != null)) return;
        k = $mod.TTMSFNCPersistence.GetPropInfoType(AProp);
        pName = $mod.TTMSFNCPersistence.GetPropInfoName(AProp);
        b = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IndexOfTextInArray(pName,$mod.TTMSFNCPersistence.FExcludeProperties) === -1;
        if (pas.SysUtils.Supports$3(AObject,$mod.ITMSFNCPersistence.$guid,{get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }})) b = p.CanLoadProperty(AObject,pName,k);
        if (b) {
          a = true;
          if (this.FOnCustomReadProperty != null) this.FOnCustomReadProperty(AObject,pName,k,this.FReader,{get: function () {
              return a;
            }, set: function (v) {
              a = v;
            }});
          if (a) {
            if (k in rtl.createSet(pas.TypInfo.TTypeKind.tkClass)) {
              ct = $mod.TTMSFNCPersistence.GetPropInfoDataTypeInfoClassType(AProp);
              if ($mod.TTMSFNCPersistence.IsGenericList(ct,"String")) {
                this.ReadGenericStringList(pas.TypInfo.GetObjectProp(AObject,pName))}
               else if ($mod.TTMSFNCPersistence.IsGenericList(ct,"")) {
                this.ReadGenericObjectList(pas.TypInfo.GetObjectProp(AObject,pName))}
               else if ($mod.TTMSFNCPersistence.IsList(ct)) {
                this.ReadList(pas.TypInfo.GetObjectProp(AObject,pName))}
               else if ($mod.TTMSFNCPersistence.IsCollection(ct)) {
                this.ReadCollection(pas.TypInfo.GetObjectProp(AObject,pName))}
               else if ($mod.TTMSFNCPersistence.IsBitmap(ct)) {
                this.ReadBitmap(pas.TypInfo.GetObjectProp(AObject,pName))}
               else if ($mod.TTMSFNCPersistence.IsDescendingClass(ct,["TStrings"])) {
                this.ReadStrings(pas.TypInfo.GetObjectProp(AObject,pName))}
               else {
                a = false;
                if ((this.FIOReference != null) && pas.SysUtils.Supports$3(this.FIOReference,$mod.ITMSFNCPersistenceIO.$guid,{get: function () {
                    return pio;
                  }, set: function (v) {
                    pio = v;
                  }})) a = pio.NeedsObjectReference(ct);
                if (a) {
                  if (this.FReader.IsNull()) {
                    this.FReader.ReadNull();
                    pas.TypInfo.SetObjectProp(AObject,pName,null);
                  } else this.FReferences.Add$1(this.TTMSFNCObjectReference.$create("Create$1",[AObject,AProp,this.FReader.ReadString()]));
                } else {
                  o = pas.TypInfo.GetObjectProp(AObject,pName);
                  ap = $mod.TTMSFNCPersistence.IsAssignableProperty(AObject,AProp);
                  if (this.FOnCustomIsAssignableProperty != null) this.FOnCustomIsAssignableProperty(AObject,pName,{get: function () {
                      return ap;
                    }, set: function (v) {
                      ap = v;
                    }});
                  if (ap) {
                    n = this.FReader.ReadString();
                    if ((this.FRootObject != null) && pas.Classes.TComponent.isPrototypeOf(this.FRootObject)) pas.TypInfo.SetObjectProp(AObject,pName,rtl.as(this.FRootObject,pas.Classes.TComponent).FindComponent(n));
                  } else this.ReadExistingObject(o);
                };
              };
            } else this.ReadPropInfoValue(AObject,AProp);
          };
        };
      } finally {
        rtl._Release(p);
        rtl._Release(pio);
      };
    };
    this.ReadPropInfoValue = function (AInstance, APropInfo) {
      var pName = "";
      var cn = "";
      var cnv = "";
      var en = "";
      var k = 0;
      var p = null;
      var o = null;
      var i = 0;
      var s = "";
      var b = false;
      var d = 0.0;
      var ii = 0;
      var v = "";
      var m = pas.System.TMethod.$new();
      if ($mod.TTMSFNCPersistence.IsWriteOnly(APropInfo)) {
        this.FReader.ReadNull();
        return;
      };
      o = AInstance;
      p = APropInfo;
      pName = $mod.TTMSFNCPersistence.GetPropInfoName(p);
      k = $mod.TTMSFNCPersistence.GetPropInfoType(p);
      var $tmp1 = k;
      if ($tmp1 === pas.TypInfo.TTypeKind.tkInteger) {
        cn = $mod.TTMSFNCPersistence.GetPropInfoTypeName(p);
        if ((cn === "TAlphaColor") || (cn === "TColor") || (cn === "TGraphicsColor")) {
          cnv = this.FReader.ReadString();
          if (!$mod.TTMSFNCPersistence.IsReadOnly(p)) {
            if (cnv === "gcNull") {
              pas.TypInfo.SetOrdProp(o,pName,-1)}
             else pas.TypInfo.SetOrdProp(o,pName,$impl.HTMLToColorEx(cnv));
          };
        } else {
          i = this.FReader.ReadInteger();
          if (!$mod.TTMSFNCPersistence.IsReadOnly(p)) pas.TypInfo.SetOrdProp$1(o,p,i);
        };
      } else if (($tmp1 === pas.TypInfo.TTypeKind.tkChar) || ($tmp1 === pas.TypInfo.TTypeKind.tkString)) {
        s = this.FReader.ReadString();
        if (!$mod.TTMSFNCPersistence.IsReadOnly(p)) pas.TypInfo.SetStrProp$1(o,p,s);
      } else if ($tmp1 === pas.TypInfo.TTypeKind.tkEnumeration) {
        if ($mod.TTMSFNCPersistence.GetPropInfoDataTypeInfo(p) === rtl.boolean) {
          b = this.FReader.ReadBoolean();
          if (!$mod.TTMSFNCPersistence.IsReadOnly(p)) pas.TypInfo.SetOrdProp$1(o,p,(b ? 1 : 0));
        } else {
          i = this.FReader.ReadInteger();
          if (!$mod.TTMSFNCPersistence.IsReadOnly(p)) pas.TypInfo.SetOrdProp$1(o,p,i);
        }}
       else if ($tmp1 === pas.TypInfo.TTypeKind.tkBool) {
        b = this.FReader.ReadBoolean();
        if (!$mod.TTMSFNCPersistence.IsReadOnly(p)) pas.TypInfo.SetOrdProp$1(o,p,(b ? 1 : 0));
      } else if ($tmp1 === pas.TypInfo.TTypeKind.tkDouble) {
        d = this.FReader.ReadDouble();
        if (!$mod.TTMSFNCPersistence.IsReadOnly(p)) pas.TypInfo.SetFloatProp$1(o,p,d);
      } else if ($tmp1 === pas.TypInfo.TTypeKind.tkSet) {
        i = this.FReader.ReadInteger();
        if (!$mod.TTMSFNCPersistence.IsReadOnly(p)) pas.TypInfo.SetOrdProp$1(o,p,i);
      } else if ($tmp1 === pas.TypInfo.TTypeKind.tkMethod) {
        m.Data = null;
        m.Code = null;
        if (this.FReader.IsNull()) {
          this.FReader.ReadNull()}
         else {
          if ($mod.TTMSFNCPersistence.FRootObject != null) {
            v = this.FReader.ReadString();
            m.Code = $mod.TTMSFNCPersistence.FRootObject.$class.MethodAddress(v);
            if (m.Code !== null) m.Data = $mod.TTMSFNCPersistence.FRootObject;
          } else this.FReader.ReadNull();
        };
        pas.TypInfo.SetMethodProp(o,p,m);
      } else {
        en = $mod.TTMSFNCPersistence.GetEnumName(pas.TypInfo.$rtti["TTypeKind"],k);
        this.FReader.ReadNull();
      };
    };
    this.ReadExistingObject = function (AObject) {
      if (AObject != null) {
        this.FReader.ReadBeginObject();
        if ($mod.TTMSFNCPersistence.ClassTypeVariable !== "") {
          if (!this.FReader.HasNext() || (this.FReader.ReadName() !== $mod.TTMSFNCPersistence.ClassTypeVariable)) throw $mod.ETMSFNCReaderException.$create("Create$1",['"' + $mod.TTMSFNCPersistence.ClassTypeVariable + '" property not found in Object descriptor.']);
          this.FReader.ReadString();
        };
        this.ReadProperties(AObject);
        this.FReader.ReadEndObject();
      } else this.FReader.ReadNull();
    };
    this.ReadGenericStringList = function (AList) {
      var obj = "";
      AList.Clear();
      this.FReader.ReadBeginArray();
      while (this.FReader.HasNext()) {
        if (!this.FReader.IsNull()) {
          obj = this.FReader.ReadString();
          AList.Add(obj);
        } else this.FReader.SkipValue();
      };
      this.FReader.ReadEndArray();
    };
    this.ReadStrings = function (AList) {
      var obj = "";
      AList.Clear();
      this.FReader.ReadBeginArray();
      while (this.FReader.HasNext()) {
        if (!this.FReader.IsNull()) {
          obj = this.FReader.ReadString();
          AList.Add(obj);
        } else this.FReader.SkipValue();
      };
      this.FReader.ReadEndArray();
    };
    this.ReadGenericObjectList = function (AList) {
      var obj = null;
      var b = null;
      var c = null;
      var i = null;
      try {
        c = pas.System.TObject;
        if (pas.SysUtils.Supports$3(AList,$mod.ITMSFNCBaseListIO.$guid,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }})) c = i.GetItemClass();
        AList.Clear();
        this.FReader.ReadBeginArray();
        while (this.FReader.HasNext()) {
          if (!this.FReader.IsNull()) {
            obj = this.ReadSingleObject(c);
            if ((this.FIOReference != null) && pas.SysUtils.Supports$3(this.FIOReference,$mod.ITMSFNCPersistenceIO.$guid,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }})) b.FixOwners(obj,AList);
            AList.Add$1(obj);
          } else this.FReader.SkipValue();
        };
        this.FReader.ReadEndArray();
      } finally {
        rtl._Release(i);
        rtl._Release(b);
      };
    };
    this.ReadCollection = function (ACollection) {
      var obj = null;
      var c = null;
      var i = null;
      try {
        c = pas.System.TObject;
        if (pas.SysUtils.Supports$3(ACollection,$mod.ITMSFNCBaseListIO.$guid,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }})) c = i.GetItemClass();
        ACollection.Clear();
        this.FReader.ReadBeginArray();
        while (this.FReader.HasNext()) {
          if (!this.FReader.IsNull()) {
            obj = this.ReadSingleObject(c);
            if (obj != null) {
              try {
                if (pas.Classes.TPersistent.isPrototypeOf(obj)) ACollection.Add().Assign(rtl.as(obj,pas.Classes.TPersistent));
              } finally {
                obj = rtl.freeLoc(obj);
              };
            };
          } else this.FReader.SkipValue();
        };
        this.FReader.ReadEndArray();
      } finally {
        rtl._Release(i);
      };
    };
    this.ReadList = function (AList) {
      var obj = null;
      var b = null;
      var c = null;
      var i = null;
      try {
        c = pas.System.TObject;
        if (pas.SysUtils.Supports$3(AList,$mod.ITMSFNCBaseListIO.$guid,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }})) c = i.GetItemClass();
        AList.Clear();
        this.FReader.ReadBeginArray();
        while (this.FReader.HasNext()) {
          if (!this.FReader.IsNull()) {
            obj = this.ReadSingleObject(c);
            if ((this.FIOReference != null) && pas.SysUtils.Supports$3(this.FIOReference,$mod.ITMSFNCPersistenceIO.$guid,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }})) b.FixOwners(obj,AList);
            AList.Add(obj);
          } else this.FReader.SkipValue();
        };
        this.FReader.ReadEndArray();
      } finally {
        rtl._Release(i);
        rtl._Release(b);
      };
    };
    this.ReadBitmap = function (ABitmap) {
      var s = "";
      var ms = null;
      s = this.FReader.ReadString();
      if (s !== "") {
        ms = pas["WEBLib.TMSFNCTypes"].TMemoryStream.$create("Create");
        try {
          pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.LoadStreamFromHexStr(s,ms);
          ms.FPosition = 0;
          ABitmap.LoadFromStream(ms);
        } finally {
          ms = rtl.freeLoc(ms);
        };
      };
    };
    this.ReadObject = function (AObject) {
      if (AObject === null) {
        this.FReader.ReadNull()}
       else {
        if ($mod.TTMSFNCPersistence.IsGenericList(AObject.$class.ClassType(),"String")) {
          this.ReadGenericStringList(AObject)}
         else if ($mod.TTMSFNCPersistence.IsGenericList(AObject.$class.ClassType(),"")) {
          this.ReadGenericObjectList(AObject)}
         else if ($mod.TTMSFNCPersistence.IsList(AObject.$class.ClassType())) {
          this.ReadList(AObject)}
         else if ($mod.TTMSFNCPersistence.IsCollection(AObject.$class.ClassType())) {
          this.ReadCollection(AObject)}
         else if ($mod.TTMSFNCPersistence.IsBitmap(AObject.$class.ClassType())) {
          this.ReadBitmap(AObject)}
         else if ($mod.TTMSFNCPersistence.IsDescendingClass(AObject.$class.ClassType(),["TStrings"])) {
          this.ReadStrings(AObject)}
         else this.ReadSingleObject$1(AObject);
      };
    };
    this.Create$1 = function (AStream) {
      this.FReader = pas["WEBLib.TMSFNCJSONReader"].TTMSFNCJSONReader.$create("Create$1",[AStream]);
      this.FReferences = this.TTMSFNCObjectReferences.$create("Create$3",[true]);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FReader");
      rtl.free(this,"FReferences");
      pas.System.TObject.Destroy.call(this);
    };
    this.Read = function (AClass) {
      var Result = null;
      Result = this.ReadSingleObject(AClass);
      return Result;
    };
    this.Read$1 = function (AObject) {
      this.ReadObject(AObject);
    };
    this.ReadArray = function (AName) {
      var Result = [];
      var Name = "";
      this.FReader.ReadBeginObject();
      while (this.FReader.HasNext()) {
        if (!this.FReader.IsNull()) {
          Name = this.FReader.ReadName();
          if (Name === AName) {
            this.FReader.ReadBeginArray();
            while (this.FReader.HasNext()) {
              Result = rtl.arraySetLength(Result,null,rtl.length(Result) + 1);
              Result[rtl.length(Result) - 1] = this.ReadSingleObject(pas.System.TObject);
            };
            this.FReader.ReadEndArray();
          } else this.FReader.SkipValue();
        } else this.FReader.SkipValue();
      };
      return Result;
    };
    this.SolveReferences = function () {
      var b = null;
      var r = 0;
      var rf = null;
      var o = null;
      try {
        if ((this.FIOReference != null) && pas.SysUtils.Supports$3(this.FIOReference,$mod.ITMSFNCPersistenceIO.$guid,{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }})) {
          for (var $l1 = 0, $end2 = this.FReferences.GetCount() - 1; $l1 <= $end2; $l1++) {
            r = $l1;
            rf = this.FReferences.GetItem$1(r);
            o = b.FindObject(rf.Id);
            pas.TypInfo.SetObjectProp$1(rf.Instance,rf.Prop,o);
          };
        };
      } finally {
        rtl._Release(b);
      };
    };
  });
  rtl.createClass($mod,"TTMSFNCObjectPersistence",pas.System.TObject,function () {
    this.SaveObjectToString = function (AObject) {
      var Result = "";
      var ss = null;
      ss = pas["WEBLib.TMSFNCTypes"].TStringStream.$create("Create$1",[""]);
      try {
        $mod.TTMSFNCPersistence.SaveSettingsToStream(AObject,ss);
        ss.FPosition = 0;
        Result = ss.GetDataString();
      } finally {
        ss = rtl.freeLoc(ss);
      };
      return Result;
    };
    this.LoadObjectFromString = function (AObject, AString) {
      var ms = null;
      ms = pas["WEBLib.TMSFNCTypes"].TStringStream.$create("Create$1",[AString]);
      try {
        $mod.TTMSFNCPersistence.LoadSettingsFromStream(AObject,ms);
      } finally {
        ms = rtl.freeLoc(ms);
      };
    };
  });
  rtl.createClass($mod,"TTMSFNCPersistence",pas.System.TObject,function () {
    this.ClassTypeVariable = "";
    this.FOnCustomReadProperty = null;
    this.FOnCustomWriteProperty = null;
    this.FRootObject = null;
    this.FExcludeProperties = [];
    this.FIOReference = null;
    this.DoCustomReadProperty = function (AObject, APropertyName, APropertyKind, AReader, ACanRead) {
      if (this.FOnCustomReadProperty != null) this.FOnCustomReadProperty(AObject,APropertyName,APropertyKind,AReader,ACanRead);
    };
    this.DoCustomWriteProperty = function (AObject, APropertyName, APropertyKind, AWriter, ACanWrite) {
      if (this.FOnCustomWriteProperty != null) this.FOnCustomWriteProperty(AObject,APropertyName,APropertyKind,AWriter,ACanWrite);
    };
    this.SaveSettingsToFile = function (AObject, AFileName) {
      var ms = null;
      ms = pas["WEBLib.TMSFNCTypes"].TMemoryStream.$create("Create");
      try {
        this.SaveSettingsToStream(AObject,ms);
        ms.SaveToFile(AFileName);
      } finally {
        ms = rtl.freeLoc(ms);
      };
    };
    this.LoadSettingsFromFile = function (AObject, AFileName) {
      var ms = null;
      ms = pas["WEBLib.TMSFNCTypes"].TMemoryStream.$create("Create");
      try {
        this.LoadSettingsFromStream(AObject,ms);
      } finally {
        ms = rtl.freeLoc(ms);
      };
    };
    this.SaveSettingsToStream = function (AObject, AStream) {
      var Writer = null;
      var d = "";
      var t = "";
      Writer = $mod.TTMSFNCWriter.$create("Create$1",[AStream]);
      try {
        Writer.SetIOReference($mod.TTMSFNCPersistence.FIOReference);
        Writer.SetRootObject($mod.TTMSFNCPersistence.FRootObject);
        Writer.FOnCustomWriteProperty = rtl.createCallback(this,"DoCustomWriteProperty");
        t = pas.SysUtils.FormatSettings.GetThousandSeparator();
        d = pas.SysUtils.FormatSettings.GetDecimalSeparator();
        pas.SysUtils.FormatSettings.SetDecimalSeparator(".");
        pas.SysUtils.FormatSettings.SetThousandSeparator(",");
        Writer.Write(AObject);
        pas.SysUtils.FormatSettings.SetDecimalSeparator(d);
        pas.SysUtils.FormatSettings.SetThousandSeparator(t);
      } finally {
        Writer = rtl.freeLoc(Writer);
      };
    };
    this.LoadSettingsFromStream = function (AObject, AStream) {
      var Reader = null;
      var d = "";
      var t = "";
      AStream.FPosition = 0;
      Reader = $mod.TTMSFNCReader.$create("Create$1",[AStream]);
      try {
        Reader.SetIOReference($mod.TTMSFNCPersistence.FIOReference);
        Reader.SetRootObject($mod.TTMSFNCPersistence.FRootObject);
        Reader.FOnCustomReadProperty = rtl.createCallback(this,"DoCustomReadProperty");
        t = pas.SysUtils.FormatSettings.GetThousandSeparator();
        d = pas.SysUtils.FormatSettings.GetDecimalSeparator();
        pas.SysUtils.FormatSettings.SetDecimalSeparator(".");
        pas.SysUtils.FormatSettings.SetThousandSeparator(",");
        Reader.Read$1(AObject);
        pas.SysUtils.FormatSettings.SetDecimalSeparator(d);
        pas.SysUtils.FormatSettings.SetThousandSeparator(t);
      } finally {
        Reader = rtl.freeLoc(Reader);
      };
    };
    this.GetEnumValues = function (AValues, APropInfo) {
      var p = null;
      var pi = null;
      var ps = null;
      var I = 0;
      var k = 0;
      p = $impl.GetTypeInfoEx(APropInfo);
      if ((p != null) && rtl.isExt(p,rtl.tTypeInfoSet)) p = p.comptype;
      if ((p != null) && rtl.isExt(p,rtl.tTypeInfoInteger)) {
        pi = p;
        for (var $l1 = pi.minvalue, $end2 = pi.maxvalue; $l1 <= $end2; $l1++) {
          I = $l1;
          AValues.Add($mod.TTMSFNCPersistence.GetEnumName(p,I));
        };
      };
    };
    this.CreateObject = function (AClassName, BaseClass) {
      var Result = null;
      var ObjType = null;
      ObjType = pas.Classes.GetClass(AClassName);
      if (ObjType === null) throw $mod.ETMSFNCReaderException.$create("CreateFmt",['Type "%s" not found',[AClassName]]);
      if (!ObjType.InheritsFrom(pas.System.TObject)) throw $mod.ETMSFNCReaderException.$create("Create$1",['Type "%s" is not an class type']);
      if (BaseClass !== null) if (!ObjType.InheritsFrom(BaseClass)) throw $mod.ETMSFNCReaderException.$create("CreateFmt",['Type "%s" does not inherit from %s',[AClassName,BaseClass.$classname]]);
      if (ObjType.InheritsFrom(pas["WEBLib.Controls"].TCustomControl)) {
        Result = ObjType.$create("Create$1",[null])}
       else if (ObjType.InheritsFrom(pas.Classes.TComponent)) {
        Result = ObjType.$create("Create$1",[null])}
       else if (ObjType.InheritsFrom(pas.Classes.TCollectionItem)) {
        Result = ObjType.$create("Create$1",[null])}
       else if (ObjType.InheritsFrom(pas.Classes.TPersistent)) {
        Result = ObjType.$create("Create")}
       else throw $mod.ETMSFNCReaderException.$create("CreateFmt",['Type "%s" not supported',[AClassName]]);
      return Result;
    };
    this.GetPropInfoDataTypeInfo = function (APropInfo) {
      var Result = null;
      Result = null;
      if (APropInfo != null) Result = APropInfo.typeinfo;
      return Result;
    };
    this.GetPropInfoDataTypeInfoClassType = function (APropInfo) {
      var Result = null;
      var t = null;
      Result = null;
      if ((APropInfo != null) && (APropInfo.typeinfo != null)) {
        t = APropInfo.typeinfo;
        if (t.class){
          return t.class.ClassType();
        };
      };
      return Result;
    };
    this.GetPropInfoType = function (APropInfo) {
      var Result = 0;
      if (APropInfo.typeinfo != null) {
        Result = APropInfo.typeinfo.kind}
       else Result = pas.TypInfo.TTypeKind.tkUnknown;
      return Result;
    };
    this.GetPropInfoName = function (APropInfo) {
      var Result = "";
      Result = APropInfo.name;
      return Result;
    };
    this.GetPropInfoTypeName = function (APropInfo) {
      var Result = "";
      Result = "";
      if (APropInfo.typeinfo != null) Result = APropInfo.typeinfo.name;
      return Result;
    };
    this.GetEnumName = function (ATypeInfo, AValue) {
      var Result = "";
      Result = ATypeInfo.enumtype[AValue];
      return Result;
    };
    this.IsWriteOnly = function (APropInfo) {
      var Result = false;
      Result = APropInfo.getter === "";
      return Result;
    };
    this.IsReadOnly = function (APropInfo) {
      var Result = false;
      Result = APropInfo.setter === "";
      return Result;
    };
    this.IsAssignableProperty = function (AObject, APropInfo) {
      var Result = false;
      var oProp = null;
      var k = 0;
      var pName = "";
      Result = false;
      k = this.GetPropInfoType(APropInfo);
      if (k in rtl.createSet(pas.TypInfo.TTypeKind.tkClass)) {
        pName = this.GetPropInfoName(APropInfo);
        oProp = pas.TypInfo.GetObjectProp(AObject,pName);
        Result = ((oProp != null) && this.IsComponent(oProp.$class.ClassType())) || !(oProp != null);
      };
      return Result;
    };
    this.IsColor = function (APropertyName) {
      var Result = false;
      Result = (APropertyName === "TAlphaColor") || (APropertyName === "TColor") || (APropertyName === "TGraphicsColor");
      return Result;
    };
    this.IsStrokeKind = function (APropertyName) {
      var Result = false;
      Result = APropertyName === "TTMSFNCGraphicsStrokeKind";
      return Result;
    };
    this.IsFillKind = function (APropertyName) {
      var Result = false;
      Result = APropertyName === "TTMSFNCGraphicsFillKind";
      return Result;
    };
    this.IsDate = function (APropertyName) {
      var Result = false;
      Result = APropertyName === "TDate";
      return Result;
    };
    this.IsDateTime = function (APropertyName) {
      var Result = false;
      Result = APropertyName === "TDateTime";
      return Result;
    };
    this.IsTime = function (APropertyName) {
      var Result = false;
      Result = APropertyName === "TTime";
      return Result;
    };
    this.IsGenericList = function (AClass, AType) {
      var Result = false;
      var cn = "";
      if (!(AClass != null)) return false;
      do {
        cn = AClass.$classname;
        if (pas.strutils.AnsiStartsStr("TList<",cn) || pas.strutils.AnsiStartsStr("TObjectList<",cn)) {
          if ((AType === "") || ((AType !== "") && (pas.System.Pos(pas.SysUtils.LowerCase(AType),pas.SysUtils.LowerCase(cn)) > 0)) || (pas.System.Pos(pas.SysUtils.LowerCase(AType),pas.SysUtils.LowerCase(cn)) > 0)) return true;
        };
        AClass = AClass.$ancestor;
      } while (AClass != null);
      Result = false;
      return Result;
    };
    this.IsCollection = function (AClass) {
      var Result = false;
      Result = this.IsDescendingClass(AClass,["TCollection"]);
      return Result;
    };
    this.IsComponent = function (AClass) {
      var Result = false;
      Result = this.IsDescendingClass(AClass,["TComponent","TTMSFNCCustomComponent"]);
      return Result;
    };
    this.IsControl = function (AClass) {
      var Result = false;
      Result = this.IsDescendingClass(AClass,["TControl"]);
      return Result;
    };
    this.IsList = function (AClass) {
      var Result = false;
      Result = this.IsDescendingClass(AClass,["TList"]);
      return Result;
    };
    this.IsDescendingClass = function (AClass, AClassParentList) {
      var Result = false;
      var cn = "";
      var I = 0;
      if (!(AClass != null)) return false;
      do {
        cn = AClass.$classname;
        for (var $l1 = 0, $end2 = rtl.length(AClassParentList) - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          if (cn === AClassParentList[I]) return true;
        };
        AClass = AClass.$ancestor;
      } while (AClass != null);
      Result = false;
      return Result;
    };
    this.IsBitmap = function (AClass) {
      var Result = false;
      Result = this.IsDescendingClass(AClass,["TBitmap","TPicture","TTMSFNCBitmap"]);
      return Result;
    };
    this.IsStrings = function (AClass) {
      var Result = false;
      Result = this.IsDescendingClass(AClass,["TStrings"]);
      return Result;
    };
  });
  this.ExcludePropertyList = ["Align","AllowFocus","Anchors","BevelEdges","BevelInner","BevelKind","BevelOuter","BevelWidth","BiDiMode","BitmapContainer","BorderSpacing","CanParentFocus","ClipChildren","ClipParent","Constraints","Ctl3D","DisableFocusEffect","DoubleBuffered","DragCursor","DragKind","DragMode","Enabled","EnableDragHighLight","Height","Hint","HitTest","Locked","Margins","Name","Opacity","Padding","ParentBiDiMode","ParentColor","ParentCtl3D","ParentDoubleBuffered","ParentFont","ParentShowHint","PopupMenu","Position","RotationAngle","RotationCenter","Scale","ShowHint","Size","StyleElements","StyleName","TabOrder","TabStop","Tag","Touch","TouchTargetExpansion","Visible","Width"];
  $mod.$init = function () {
    $mod.TTMSFNCPersistence.ClassTypeVariable = "$type";
  };
},["strutils","WEBLib.Controls","WEBLib.Graphics","WEBLib.TMSFNCUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.gcNull = -1;
  $mod.$rtti.$ClassRef("TCustomControlClass",{instancetype: pas["WEBLib.Controls"].$rtti["TCustomControl"]});
  $impl.GetTypeInfoEx = function (APropInfo) {
    var Result = null;
    Result = APropInfo.typeinfo;
    return Result;
  };
  $impl.GetColorRed = function (AColor) {
    var Result = 0;
    AColor = pas["WEBLib.Graphics"].ColorToRGB(AColor);
    Result = pas["WEBLib.Graphics"].GetRValue(AColor);
    return Result;
  };
  $impl.GetColorGreen = function (AColor) {
    var Result = 0;
    AColor = pas["WEBLib.Graphics"].ColorToRGB(AColor);
    Result = pas["WEBLib.Graphics"].GetGValue(AColor);
    return Result;
  };
  $impl.GetColorBlue = function (AColor) {
    var Result = 0;
    AColor = pas["WEBLib.Graphics"].ColorToRGB(AColor);
    Result = pas["WEBLib.Graphics"].GetBValue(AColor);
    return Result;
  };
  $impl.HTMLToColorEx = function (AHTML) {
    var Result = 0;
    function HexVal(s) {
      var Result = 0;
      var i = 0;
      var j = 0;
      var i1 = 0;
      var i2 = 0;
      if (s.length < 2) {
        Result = 0;
        return Result;
      };
      i1 = 1;
      i2 = 2;
      if (s.charAt(i1 - 1) >= "A") {
        i = (s.charCodeAt(i1 - 1) - "A".charCodeAt()) + 10}
       else i = s.charCodeAt(i1 - 1) - "0".charCodeAt();
      if (s.charAt(i2 - 1) >= "A") {
        j = (s.charCodeAt(i2 - 1) - "A".charCodeAt()) + 10}
       else j = s.charCodeAt(i2 - 1) - "0".charCodeAt();
      Result = (i << 4) + j;
      return Result;
    };
    var r = 0;
    var g = 0;
    var b = 0;
    r = HexVal(pas.System.Copy(AHTML,2,2));
    g = HexVal(pas.System.Copy(AHTML,4,2)) << 8;
    b = HexVal(pas.System.Copy(AHTML,6,2)) << 16;
    Result = b + g + r;
    return Result;
  };
  var HTMLHexColor = "#RRGGBB";
  var HexDigit = ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"];
  $impl.ColorToHTMLEx = function (AColor) {
    var Result = "";
    var c = 0;
    var i = 0;
    i = 1;
    c = pas["WEBLib.Graphics"].ColorToRGB(AColor);
    Result = HTMLHexColor;
    Result = rtl.setCharAt(Result,(1 + i) - 1,HexDigit[$impl.GetColorRed(c) >>> 4]);
    Result = rtl.setCharAt(Result,(2 + i) - 1,HexDigit[$impl.GetColorRed(c) & 0xF]);
    Result = rtl.setCharAt(Result,(3 + i) - 1,HexDigit[$impl.GetColorGreen(c) >>> 4]);
    Result = rtl.setCharAt(Result,(4 + i) - 1,HexDigit[$impl.GetColorGreen(c) & 0xF]);
    Result = rtl.setCharAt(Result,(5 + i) - 1,HexDigit[$impl.GetColorBlue(c) >>> 4]);
    Result = rtl.setCharAt(Result,(6 + i) - 1,HexDigit[$impl.GetColorBlue(c) & 0xF]);
    return Result;
  };
});
rtl.module("WEBLib.DesignIntf",["System","Classes","Web","JS","TypInfo","WEBLib.Forms"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $mod.$rtti.$MethodVar("TLoadJavaScriptCallBack",{procsig: rtl.newTIProcSig([["AJavaScriptFile",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TErrorJavaScriptCallBack",{procsig: rtl.newTIProcSig([["AError",pas.Web.$rtti["TJSErrorEvent"]]]), methodkind: 0});
  $mod.$rtti.$ClassRef("TComponentClass",{instancetype: pas.Classes.$rtti["TComponent"]});
  $mod.$rtti.$DynArray("TIconArray",{eltype: rtl.string});
  $mod.$rtti.$DynArray("TComponentClassArray",{eltype: $mod.$rtti["TComponentClass"]});
  rtl.createClass($mod,"TRegisteredComponent",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FClass = null;
      this.FIcon = "";
      this.FPage = "";
    };
    this.$final = function () {
      this.FClass = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (APage, AClass, AIcon) {
      this.FPage = APage;
      this.FClass = AClass;
      this.FIcon = AIcon;
      return this;
    };
  });
  rtl.createInterface($mod,"IDesignerSelections","{2A041D7A-7175-3AD1-B2C4-57B3F6EDFAF4}",["Add","Get","GetCount"],pas.System.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("Add",1,[["Item",pas.Classes.$rtti["TPersistent"],2]],rtl.longint);
    $r.addMethod("Get",1,[["Index",rtl.longint]],pas.Classes.$rtti["TPersistent"]);
    $r.addMethod("GetCount",1,null,rtl.longint);
    $r.addProperty("Count",1,rtl.longint,"GetCount","");
    $r.addProperty("Items",1,pas.Classes.$rtti["TPersistent"],"Get","");
  });
  $mod.$rtti.$ProcVar("TGetStrProc",{procsig: rtl.newTIProcSig([["AUnitName",rtl.string]])});
  rtl.createClass($mod,"TSelectionEditor",pas.System.TObject,function () {
    this.RequiresUnits = function (Proc) {
    };
  });
  $mod.$rtti.$ClassRef("TSelectionEditorClass",{instancetype: $mod.$rtti["TSelectionEditor"]});
  rtl.createClass($mod,"TRegisteredSelectionEditor",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FClass = null;
      this.FEditor = null;
    };
    this.$final = function () {
      this.FClass = undefined;
      this.FEditor = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AClass, AEditorClass) {
      pas.System.TObject.Create.call(this);
      this.FClass = AClass;
      this.FEditor = AEditorClass;
      return this;
    };
  });
  rtl.createClass($mod,"TLibraryRequirementsEditor",pas.System.TObject,function () {
    this.RequiresLibraries = function (Proc) {
    };
  });
  $mod.$rtti.$ClassRef("TLibraryRequirementsEditorClass",{instancetype: $mod.$rtti["TLibraryRequirementsEditor"]});
  rtl.createClass($mod,"TRegisteredLibraryRequirementsEditor",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FClass = null;
      this.FEditor = null;
    };
    this.$final = function () {
      this.FClass = undefined;
      this.FEditor = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AClass, AEditorClass) {
      pas.System.TObject.Create.call(this);
      this.FClass = AClass;
      this.FEditor = AEditorClass;
      return this;
    };
  });
  this.TPropertyAttribute = {"0": "paDialog", paDialog: 0, "1": "paValueList", paValueList: 1, "2": "paSortList", paSortList: 2, "3": "paValueEditable", paValueEditable: 3};
  $mod.$rtti.$Enum("TPropertyAttribute",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TPropertyAttribute});
  $mod.$rtti.$Set("TPropertyAttributes",{comptype: $mod.$rtti["TPropertyAttribute"]});
  rtl.createClass($mod,"TPropertyEditor",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FComponent = null;
      this.FPropertyName = "";
      this.FPropertyInfo = null;
      this.FResultProc = null;
    };
    this.$final = function () {
      this.FComponent = undefined;
      this.FPropertyInfo = undefined;
      this.FResultProc = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function () {
      this.FPropertyName = "";
      this.FPropertyInfo = null;
      return this;
    };
    this.Edit = function () {
      this.Edit$1(null);
    };
    this.Edit$1 = function (AProc) {
      this.FResultProc = AProc;
    };
    this.GetAttributes = function () {
      var Result = {};
      Result = rtl.createSet($mod.TPropertyAttribute.paDialog);
      return Result;
    };
    this.GetValues = function (Proc) {
    };
    this.SetValue = function (Value) {
      var tmp = null;
      if (this.FComponent != null) {
        tmp = pas.TypInfo.FindPropInfo(this.FComponent,this.FPropertyName);
        if (tmp != null) {
          pas.TypInfo.SetStrProp(this.FComponent,this.FPropertyName,Value);
        };
      };
    };
  });
  $mod.$rtti.$ClassRef("TPropertyEditorClass",{instancetype: $mod.$rtti["TPropertyEditor"]});
  rtl.createClass($mod,"TRegisteredPropertyEditor",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FClass = null;
      this.FPropertyName = "";
      this.FPropertyType = null;
      this.FEditor = null;
    };
    this.$final = function () {
      this.FClass = undefined;
      this.FEditor = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (APropertyType, AClass, AProperty, AEditor) {
      pas.System.TObject.Create.call(this);
      this.FClass = AClass;
      this.FPropertyName = AProperty;
      this.FPropertyType = APropertyType;
      this.FEditor = AEditor;
      return this;
    };
  });
  rtl.createClass($mod,"TRegisteredIgnoredProperty",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FClass = null;
      this.FPropertyName = "";
    };
    this.$final = function () {
      this.FClass = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AClass, AProperty) {
      pas.System.TObject.Create.call(this);
      this.FClass = AClass;
      this.FPropertyName = AProperty;
      return this;
    };
  });
  rtl.createClass($mod,"TComponentEditor",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FComponent = null;
      this.FResultProc = null;
      this.FExecResultProc = null;
    };
    this.$final = function () {
      this.FComponent = undefined;
      this.FResultProc = undefined;
      this.FExecResultProc = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Edit = function () {
      this.Edit$1(null);
    };
    this.Edit$1 = function (AProc) {
      this.FResultProc = AProc;
    };
    this.ExecuteVerb = function (Index) {
      this.ExecuteVerb$1(Index,null);
    };
    this.ExecuteVerb$1 = function (Index, AProc) {
      this.FExecResultProc = AProc;
    };
    this.GetVerb = function (Index) {
      var Result = "";
      Result = "";
      return Result;
    };
    this.GetVerbCount = function () {
      var Result = 0;
      Result = 0;
      return Result;
    };
    this.GetComponent = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.GetDefaultProperty = function () {
      var Result = "";
      Result = "";
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("TComponentEditorClass",{instancetype: $mod.$rtti["TComponentEditor"]});
  rtl.createClass($mod,"TRegisteredComponentEditor",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FClass = null;
      this.FEditor = null;
    };
    this.$final = function () {
      this.FClass = undefined;
      this.FEditor = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.Create$1 = function (AClass, AEditorClass) {
      pas.System.TObject.Create.call(this);
      this.FClass = AClass;
      this.FEditor = AEditorClass;
      return this;
    };
  });
  this.RegisterComponents = function (Page, ComponentClasses, Icons) {
    var I = 0;
    var c = null;
    var ic = "";
    for (var $l1 = 0, $end2 = rtl.length(ComponentClasses) - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      c = ComponentClasses[I];
      if (rtl.length(Icons) > 0) {
        ic = Icons[I]}
       else ic = "";
      $impl.RegisteredComponentList[c.$classname] = $mod.TRegisteredComponent.$create("Create$1",[Page,c,ic]);
    };
  };
  this.RegisterSelectionEditor = function (AClass, AEditorClass) {
    $impl.RegisteredSelectionEditorList[AClass.$classname] = $mod.TRegisteredSelectionEditor.$create("Create$1",[AClass,AEditorClass]);
  };
  this.RegisterPropertyEditor = function (PropertyType, ComponentClass, PropertyName, EditorClass) {
    var LKey = "";
    var LType = "";
    var LClass = "";
    LType = "";
    if (PropertyType != null) LType = PropertyType.name;
    LClass = "";
    if (ComponentClass != null) LClass = ComponentClass.$classname;
    LKey = LType + "_" + LClass + "_" + PropertyName;
    $impl.RegisteredPropertyEditorList[LKey] = $mod.TRegisteredPropertyEditor.$create("Create$1",[PropertyType,ComponentClass,PropertyName,EditorClass]);
  };
  this.RegisterComponentEditor = function (AClass, ComponentEditor) {
    $impl.RegisteredComponentEditorList[AClass.$classname] = $mod.TRegisteredComponentEditor.$create("Create$1",[AClass,ComponentEditor]);
  };
  this.RegisterIgnoredProperty = function (ComponentClass, PropertyName) {
    var LKey = "";
    var LClass = "";
    LClass = "";
    if (ComponentClass != null) LClass = ComponentClass.$classname;
    LKey = LClass + "_" + PropertyName;
    $impl.RegisteredIgnoredPropertyList[LKey] = $mod.TRegisteredIgnoredProperty.$create("Create$1",[ComponentClass,PropertyName]);
  };
  this.RegisterLibraryRequirementsEditor = function (AClass, AEditorClass) {
    $impl.RegisteredLibraryRequirementsEditorList[AClass.$classname] = $mod.TRegisteredLibraryRequirementsEditor.$create("Create$1",[AClass,AEditorClass]);
  };
  this.GetRegisteredComponents = function (List) {
    var a = Object.keys($impl.RegisteredComponentList).map(function(key) {
          return [$impl.RegisteredComponentList[key]];
        });
    
        a.forEach(function(element) {
          List.Add(element[0]);
        });
  };
  this.GetRegisteredPages = function (List) {
    var a = Object.keys($impl.RegisteredComponentList).map(function(key) {
          return [$impl.RegisteredComponentList[key]];
        });
    
        a.forEach(function(element) {
          var p = element[0].FPage;
          if (List.IndexOf(p) == -1) {
            List.Add(element[0].FPage);
          }
        });
  };
  this.GetSelectionEditors = function (List) {
    var a = Object.keys($impl.RegisteredSelectionEditorList).map(function(key) {
          return [$impl.RegisteredSelectionEditorList[key]];
        });
    
        a.forEach(function(element) {
          List.Add(element[0]);
        });
  };
  this.LoadComponentFromJavaScript = function (JavaScriptFile, CallBack, ErrorCallBack) {
    var self = this;
        var JavaScript = {
          loadcomponent: function(src) {
            var n = src.substr(0, src.lastIndexOf("."));
            if (!pas[n]) {
              var script = document.createElement('script'), loaded;
              script.setAttribute('src', src);
              script.onerror = function(e){
                if (ErrorCallBack != null)
                {
                  ErrorCallBack(e);
                }
              }
              script.onreadystatechange = script.onload = function() {
                if (!loaded) {
                  if (CallBack != null)
                    CallBack(src);
                }
                loaded = true;
              };
              document.getElementsByTagName('head')[0].appendChild(script);
            }
          }
        };
    
        JavaScript.loadcomponent(JavaScriptFile);
  };
  this.InitializeComponentFromJavaScript = function (JavaScriptFile) {
    var src = "";
    if ($mod.IsComponentFromJavaScriptLoaded(JavaScriptFile)) {
      src = JavaScriptFile;
      var n = src.substr(0, src.lastIndexOf("."))
      var module = pas[n];
      rtl.loadintf(module);
      rtl.loadimpl(module);
    };
  };
  this.GetRegisteredComponentClass = function (ComponentClassName) {
    var Result = null;
    var r = null;
    Result = null;
    r = $mod.GetRegisteredComponent(ComponentClassName);
    if (r != null) Result = r.FClass;
    return Result;
  };
  this.GetRegisteredComponent = function (ComponentClassName) {
    var Result = null;
    var res = null;
    Result = null;
    if (ComponentClassName === "") return Result;
    res = null;
    var a = Object.keys($impl.RegisteredComponentList).map(function(key) {
          return [$impl.RegisteredComponentList[key]];
        });
    
        for (let el of a) {
          if (el[0].FClass.$classname.toLowerCase() == ComponentClassName.toLowerCase()) {
            res = el[0];
            break; }
        };
    Result = res;
    return Result;
  };
  this.GetRegisteredSelectionEditor = function (ComponentClassName) {
    var Result = null;
    Result = null;
    if (ComponentClassName === "") return Result;
    Result = rtl.getObject($impl.RegisteredSelectionEditorList[ComponentClassName]);
    return Result;
  };
  this.GetRegisteredLibraryRequirementsEditor = function (ComponentClassName) {
    var Result = null;
    Result = null;
    if (ComponentClassName === "") return Result;
    Result = rtl.getObject($impl.RegisteredLibraryRequirementsEditorList[ComponentClassName]);
    return Result;
  };
  this.GetRegisteredPropertyEditor = function (PropertyType, AClass, AProperty) {
    var Result = null;
    var LKey = "";
    var LType = "";
    var LPropEditor = null;
    var LList = null;
    var i = 0;
    Result = null;
    LType = PropertyType.name;
    LKey = LType + "__";
    LPropEditor = rtl.getObject($impl.RegisteredPropertyEditorList[LKey]);
    if (LPropEditor != null) {
      Result = LPropEditor;
    } else if ((AClass != null) && (AProperty !== "")) {
      LKey = LType + "_" + AClass.$classname + "_" + AProperty;
      LPropEditor = rtl.getObject($impl.RegisteredPropertyEditorList[LKey]);
      if (LPropEditor != null) {
        Result = LPropEditor;
      };
    } else {
      LList = pas.Classes.TList.$create("Create$1");
      $impl.GetPropertyEditors(LList);
      for (var $l1 = 0, $end2 = LList.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        LPropEditor = rtl.getObject(LList.Get(i));
        if (LPropEditor.FPropertyType === PropertyType) {
          if ((LPropEditor.FPropertyName === "") || (LPropEditor.FPropertyName === AProperty)) {
            if (!(LPropEditor.FClass != null) || ((AClass != null) && (LPropEditor.FClass.$classname === AClass.$classname))) {
              Result = LPropEditor;
              break;
            };
          };
        };
      };
      LList = rtl.freeLoc(LList);
    };
    return Result;
  };
  this.GetRegisteredComponentEditor = function (AClass) {
    var Result = null;
    Result = rtl.getObject($impl.RegisteredComponentEditorList[AClass.$classname]);
    return Result;
  };
  this.IsComponentFromJavaScriptLoaded = function (JavaScriptFile) {
    var Result = false;
    var src = "";
    src = JavaScriptFile;
    var n = src.substr(0, src.lastIndexOf("."))
    return (pas[n]);
    return Result;
  };
  this.IsIgnoredProperty = function (AClass, AProperty) {
    var Result = false;
    var LKey = "";
    var LIgnoredProperty = null;
    Result = false;
    if (!(AClass != null)) {
      LKey = "_" + AProperty;
      LIgnoredProperty = rtl.getObject($impl.RegisteredIgnoredPropertyList[LKey]);
      if (LIgnoredProperty != null) {
        Result = true;
      };
    } else if ((AClass != null) && (AProperty !== "")) {
      LKey = AClass.$classname + "_" + AProperty;
      LIgnoredProperty = rtl.getObject($impl.RegisteredIgnoredPropertyList[LKey]);
      if (LIgnoredProperty != null) {
        Result = true;
      } else {
        LKey = "_" + AProperty;
        LIgnoredProperty = rtl.getObject($impl.RegisteredIgnoredPropertyList[LKey]);
        if (LIgnoredProperty != null) {
          Result = true;
        };
      };
    };
    return Result;
  };
  $mod.$init = function () {
    $impl.RegisteredComponentList = Object.create(null);
    $impl.RegisteredSelectionEditorList = Object.create(null);
    $impl.RegisteredPropertyEditorList = Object.create(null);
    $impl.RegisteredIgnoredPropertyList = Object.create(null);
    $impl.RegisteredLibraryRequirementsEditorList = Object.create(null);
    $impl.RegisteredComponentEditorList = Object.create(null);
  };
},["SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.RegisteredComponentList = null;
  $impl.RegisteredSelectionEditorList = null;
  $impl.RegisteredPropertyEditorList = null;
  $impl.RegisteredIgnoredPropertyList = null;
  $impl.RegisteredLibraryRequirementsEditorList = null;
  $impl.RegisteredComponentEditorList = null;
  $impl.GetPropertyEditors = function (List) {
    var a = Object.keys($impl.RegisteredPropertyEditorList).map(function(key) {
          return [$impl.RegisteredPropertyEditorList[key]];
        });
    
        a.forEach(function(element) {
          List.Add(element[0]);
        });
  };
});
rtl.module("WEBLib.TMSFNCCustomComponent",["System","Classes","WEBLib.Controls","WEBLib.TMSFNCTypes","WEBLib.TMSFNCPersistence","TypInfo"],function () {
  "use strict";
  var $mod = this;
  $mod.$rtti.$MethodVar("TTMSFNCCustomComponentCanSavePropertyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AObject",pas.System.$rtti["TObject"]],["APropertyName",rtl.string],["APropertyType",pas.TypInfo.$rtti["TTypeKind"]],["ACanSave",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomComponentCanLoadPropertyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AObject",pas.System.$rtti["TObject"]],["APropertyName",rtl.string],["APropertyType",pas.TypInfo.$rtti["TTypeKind"]],["ACanLoad",rtl.boolean,1]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomComponent",pas["WEBLib.Controls"].TCustomControl,function () {
    this.FBlockPersistenceInterface = false;
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FStored = false;
      this.FAppearancePersisting = false;
      this.FAdaptToStyle = false;
      this.FOnCanSaveProperty = null;
      this.FOnCanLoadProperty = null;
    };
    this.$final = function () {
      this.FOnCanSaveProperty = undefined;
      this.FOnCanLoadProperty = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.GetVersionNumber = function (AMaj, AMin, ARel, ABld) {
      var Result = "";
      Result = "";
      return Result;
    };
    this.DoCanSaveProperty = function (AObject, APropertyName, APropertyType, ACanSave) {
      if (this.FOnCanSaveProperty != null) this.FOnCanSaveProperty(this,AObject,APropertyName,APropertyType,ACanSave);
    };
    this.DoCanLoadProperty = function (AObject, APropertyName, APropertyType, ACanLoad) {
      if (this.FOnCanLoadProperty != null) this.FOnCanLoadProperty(this,AObject,APropertyName,APropertyType,ACanLoad);
    };
    this.IsAppearanceProperty = function (AObject, APropertyName, APropertyType) {
      var Result = false;
      Result = false;
      return Result;
    };
    this.CanSaveProperty = function (AObject, APropertyName, APropertyType) {
      var Result = false;
      if ((AObject === this) && !this.FBlockPersistenceInterface) {
        Result = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IndexOfTextInArray(APropertyName,pas["WEBLib.TMSFNCPersistence"].ExcludePropertyList) === -1}
       else Result = true;
      if (this.FAppearancePersisting) Result = Result && this.IsAppearanceProperty(AObject,APropertyName,APropertyType);
      this.DoCanSaveProperty(AObject,APropertyName,APropertyType,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.CanLoadProperty = function (AObject, APropertyName, APropertyType) {
      var Result = false;
      if ((AObject === this) && !this.FBlockPersistenceInterface) {
        Result = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IndexOfTextInArray(APropertyName,pas["WEBLib.TMSFNCPersistence"].ExcludePropertyList) === -1}
       else Result = true;
      this.DoCanLoadProperty(AObject,APropertyName,APropertyType,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = "";
      return Result;
    };
    this.GetDocURL = function () {
      var Result = "";
      Result = pas["WEBLib.TMSFNCTypes"].TTMSFNCBaseDocURL;
      return Result;
    };
    this.GetTipsURL = function () {
      var Result = "";
      Result = pas["WEBLib.TMSFNCTypes"].TTMSFNCBaseTipsURL;
      return Result;
    };
    this.GetInstance = function () {
      var Result = 0;
      Result = pas["WEBLib.TMSFNCTypes"].HInstance();
      return Result;
    };
    this.SetAdaptToStyle = function (Value) {
      this.FAdaptToStyle = Value;
    };
    this.Paint = function () {
      var pic = null;
      var g = null;
      var r = null;
      var rc = null;
      var c = null;
      pas["WEBLib.Controls"].TCustomControl.Paint.call(this);
      r = null;
      pic = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[this.GetCanvas(),false]);
      try {
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(0);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        rc = pas["WEBLib.DesignIntf"].GetRegisteredComponent(this.$classname);
        if (rc != null) pic.LoadFromResource(rc.FIcon);
        g.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight())),pic,true,false,true,false);
      } finally {
        if (r != null) r = rtl.freeLoc(r);
        pic = rtl.freeLoc(pic);
        g = rtl.freeLoc(g);
      };
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
      if (!(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) this.SetVisible(false);
    };
    this.RegisterRuntimeClasses = function () {
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      this.SetWidth(26);
      this.SetHeight(26);
      if (!this.IsDesigning()) this.RegisterRuntimeClasses();
      return this;
    };
    this.SetBounds = function (X, Y, AWidth, AHeight) {
      pas["WEBLib.Controls"].TControl.SetBounds.call(this,X,Y,26,26);
    };
    this.IsDesignTime = function () {
      var Result = false;
      Result = (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && !((pas.Classes.TComponentStateItem.csReading in this.FOwner.FComponentState) || (pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState));
      return Result;
    };
    this.IsLoading = function () {
      var Result = false;
      Result = pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState;
      return Result;
    };
    this.IsReading = function () {
      var Result = false;
      Result = pas.Classes.TComponentStateItem.csReading in this.FOwner.FComponentState;
      return Result;
    };
    this.IsDesigning = function () {
      var Result = false;
      Result = pas.Classes.TComponentStateItem.csDesigning in this.FComponentState;
      return Result;
    };
    this.IsDestroying = function () {
      var Result = false;
      Result = pas.Classes.TComponentStateItem.csDestroying in this.FComponentState;
      return Result;
    };
    this.SaveSettingsToFile = function (AFileName, AAppearanceOnly) {
      this.FAppearancePersisting = AAppearanceOnly;
      pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.SaveSettingsToFile(this,AFileName);
      this.FAppearancePersisting = false;
    };
    this.LoadSettingsFromFile = function (AFileName) {
      pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.LoadSettingsFromFile(this,AFileName);
    };
    this.SaveSettingsToStream = function (AStream, AAppearanceOnly) {
      this.FAppearancePersisting = AAppearanceOnly;
      pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.SaveSettingsToStream(this,AStream);
      this.FAppearancePersisting = false;
    };
    this.LoadSettingsFromStream = function (AStream) {
      pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.LoadSettingsFromStream(this,AStream);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Width",3,rtl.longint,"GetWidth","SetWidth");
    $r.addProperty("Height",3,rtl.longint,"GetHeight","SetHeight");
    $r.addProperty("OnCanSaveProperty",0,$mod.$rtti["TTMSFNCCustomComponentCanSavePropertyEvent"],"FOnCanSaveProperty","FOnCanSaveProperty");
    $r.addProperty("OnCanLoadProperty",0,$mod.$rtti["TTMSFNCCustomComponentCanLoadPropertyEvent"],"FOnCanLoadProperty","FOnCanLoadProperty");
  });
  $mod.$rtti.$ClassRef("TTMSFNCCustomComponentClass",{instancetype: $mod.$rtti["TTMSFNCCustomComponent"]});
},["WEBLib.TMSFNCUtils","SysUtils","WEBLib.TMSFNCGraphics","WEBLib.Graphics","WEBLib.TMSFNCGraphicsTypes","Types","WEBLib.DesignIntf"]);
rtl.module("WEBLib.TMSFNCBitmapContainer",["System","Classes","WEBLib.TMSFNCTypes","WEBLib.TMSFNCCustomComponent","WEBLib.Controls"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 0;
  $mod.$rtti.$Class("TTMSFNCBitmapContainer");
  $mod.$rtti.$Class("TTMSFNCBitmapItem");
  rtl.createInterface($mod,"ITMSFNCBitmapContainer","{ED26710D-395F-4971-8AC9-A31083BF2A3C}",["SetBitmapContainer","GetBitmapContainer"],pas.System.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("SetBitmapContainer",0,[["Value",$mod.$rtti["TTMSFNCBitmapContainer"],2]]);
    $r.addMethod("GetBitmapContainer",1,null,$mod.$rtti["TTMSFNCBitmapContainer"]);
    $r.addProperty("BitmapContainer",3,$mod.$rtti["TTMSFNCBitmapContainer"],"GetBitmapContainer","SetBitmapContainer");
  });
  rtl.createInterface($mod,"ITMSFNCBitmapContainerGetItem","{98F65D59-B40C-4574-AF9C-3CA68E86AE10}",["ItemCount","GetItem"],pas.System.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("ItemCount",1,null,rtl.longint);
    $r.addMethod("GetItem",1,[["AIndex",rtl.longint]],$mod.$rtti["TTMSFNCBitmapItem"]);
  });
  rtl.createClass($mod,"TTMSFNCBitmapItem",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FBitmap = null;
      this.FTag = 0;
      this.FName = "";
    };
    this.$final = function () {
      this.FBitmap = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.SetBitmap = function (Value) {
      this.FBitmap.Assign(Value);
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      this.FBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FBitmap.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
      this.FName = "Item" + pas.SysUtils.IntToStr(this.FCollection.GetCount());
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FBitmap");
      pas.Classes.TCollectionItem.Destroy.call(this);
    };
    this.DoBitmapChanged = function (Sender) {
      if ($mod.TTMSFNCBitmapCollection.isPrototypeOf(this.FCollection)) {
        if (rtl.as(this.FCollection,$mod.TTMSFNCBitmapCollection).FOwner$1 != null) rtl.as(this.FCollection,$mod.TTMSFNCBitmapCollection).FOwner$1.DoBitmapChanged(this);
      };
    };
    this.Assign = function (Source) {
      this.FName = rtl.as(Source,$mod.TTMSFNCBitmapItem).FName;
      this.FTag = rtl.as(Source,$mod.TTMSFNCBitmapItem).FTag;
      this.FBitmap.Assign(rtl.as(Source,$mod.TTMSFNCBitmapItem).FBitmap);
    };
    this.GetDisplayName = function () {
      var Result = "";
      if (this.FName !== "") {
        Result = this.FName}
       else Result = "";
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Bitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FBitmap","SetBitmap");
    $r.addProperty("Name",0,rtl.string,"FName","FName");
    $r.addProperty("Tag",0,rtl.nativeint,"FTag","FTag");
  });
  rtl.createClass($mod,"TTMSFNCBitmapCollection",pas.Classes.TOwnedCollection,function () {
    this.$init = function () {
      pas.Classes.TOwnedCollection.$init.call(this);
      this.FOwner$1 = null;
    };
    this.$final = function () {
      this.FOwner$1 = undefined;
      pas.Classes.TOwnedCollection.$final.call(this);
    };
    this.GetItemEx = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItemEx = function (Index, Value) {
      pas.Classes.TCollection.SetItem.call(this,Index,Value);
    };
    this.GetBitmapItemClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCBitmapItem;
      return Result;
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,this.GetBitmapItemClass());
      this.FOwner$1 = AOwner;
      return this;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
    this.Insert$1 = function (index) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,index);
      return Result;
    };
  });
  rtl.createClass($mod,"TControlList",pas.Classes.TList,function () {
  });
  rtl.createClass($mod,"TTMSFNCBitmapContainer",pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$init.call(this);
      this.FControls$1 = null;
      this.FItems = null;
      this.FOnBitmapChanged = null;
    };
    this.$final = function () {
      this.FControls$1 = undefined;
      this.FItems = undefined;
      this.FOnBitmapChanged = undefined;
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$final.call(this);
    };
    this.SetItems = function (Value) {
      this.FItems.Assign(Value);
    };
    this.GetBitmapName = function (AIndex) {
      var Result = "";
      Result = "";
      if ((AIndex >= 0) && (AIndex <= (this.GetItems().GetCount() - 1))) Result = this.GetItems().GetItemEx(AIndex).FName;
      return Result;
    };
    this.GetBitmap = function (AIndex) {
      var Result = null;
      Result = null;
      if ((AIndex >= 0) && (AIndex <= (this.GetItems().GetCount() - 1))) Result = this.GetItems().GetItemEx(AIndex).FBitmap;
      return Result;
    };
    this.GetItems = function () {
      var Result = null;
      Result = this.FItems;
      return Result;
    };
    this.GetInstance = function () {
      var Result = 0;
      Result = pas["WEBLib.TMSFNCTypes"].HInstance();
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,0);
      return Result;
    };
    this.CreateItems = function () {
      var Result = null;
      Result = $mod.TTMSFNCBitmapCollection.$create("Create$3",[this]);
      return Result;
    };
    this.RegisterRuntimeClasses = function () {
      pas.Classes.RegisterClass($mod.TTMSFNCBitmapContainer);
    };
    this.Notification = function (AComponent, Operation) {
      var i = 0;
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (this.FControls$1 != null)) {
        for (var $l1 = this.FControls$1.GetCount() - 1; $l1 >= 0; $l1--) {
          i = $l1;
          if (this.FControls$1.Get(i) == AComponent) this.FControls$1.Delete(i);
        };
      };
    };
    this.DoBitmapChanged = function (Sender) {
      var f = null;
      var I = 0;
      f = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetParentForm(this);
      if (f != null) {
        for (var $l1 = 0, $end2 = f.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          if (pas["WEBLib.Controls"].TWinControl.isPrototypeOf(f.GetControls(I))) this.InvalidateMembers(rtl.as(f.GetControls(I),pas["WEBLib.Controls"].TWinControl));
        };
      };
      if (this.FOnBitmapChanged != null) this.FOnBitmapChanged(this);
    };
    this.InvalidateMembers = function (AControl) {
      var I = 0;
      if (!(AControl != null)) return;
      if (pas.TypInfo.GetPropInfo$2(AControl,"BitmapContainer") != null) AControl.Invalidate();
      for (var $l1 = 0, $end2 = AControl.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (pas["WEBLib.Controls"].TWinControl.isPrototypeOf(AControl.GetControls(I))) this.InvalidateMembers(rtl.as(AControl.GetControls(I),pas["WEBLib.Controls"].TWinControl));
      };
    };
    this.Create$5 = function () {
      this.Create$1(null);
      return this;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.Create$1.apply(this,arguments);
      this.FItems = this.CreateItems();
      this.FControls$1 = $mod.TControlList.$create("Create$1");
      return this;
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FControls$1;
        }, set: function (v) {
          this.p.FControls$1 = v;
        }});
      rtl.free(this,"FItems");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.Changed = function () {
      var i = 0;
      for (var $l1 = 0, $end2 = this.FControls$1.GetCount() - 1; $l1 <= $end2; $l1++) i = $l1;
    };
    this.RegisterControl = function (AControl) {
      this.FControls$1.Add(AControl);
    };
    this.FindBitmap = function (i, ABitmap) {
      if ((i >= 0) && (i <= (this.GetItems().GetCount() - 1))) ABitmap.Assign(this.GetItems().GetItemEx(i).FBitmap);
    };
    this.GetItem = function (AIndex) {
      var Result = null;
      Result = null;
      if ((AIndex >= 0) && (AIndex <= (this.ItemCount() - 1))) Result = this.GetItems().GetItemEx(AIndex);
      return Result;
    };
    this.FindBitmap$1 = function (s) {
      var Result = null;
      var i = 0;
      Result = null;
      s = pas.SysUtils.UpperCase(s);
      i = 1;
      while (i <= this.GetItems().GetCount()) {
        if (pas.SysUtils.UpperCase(this.GetItems().GetItemEx(i - 1).FName) === s) {
          Result = this.GetItems().GetItemEx(i - 1).FBitmap;
          break;
        };
        i += 1;
      };
      return Result;
    };
    this.ItemCount = function () {
      var Result = 0;
      Result = this.GetItems().GetCount();
      return Result;
    };
    this.RandomBitmapName = function () {
      var Result = "";
      Result = this.GetBitmapName(pas.System.Random(this.ItemCount()));
      return Result;
    };
    this.RandomBitmap = function () {
      var Result = null;
      Result = this.GetBitmap(pas.System.Random(this.ItemCount()));
      return Result;
    };
    this.AddFromURL = function (URL, BitmapName) {
      var bmpi = null;
      bmpi = this.GetItems().Add$1();
      bmpi.FBitmap.LoadFromURL(URL);
      bmpi.FName = BitmapName;
    };
    this.AddFromResource = function (ResourceName, BitmapName, AInstance) {
      var bmpi = null;
      bmpi = this.GetItems().Add$1();
      bmpi.FBitmap.LoadFromResource$1(ResourceName,AInstance);
      bmpi.FName = BitmapName;
    };
    this.AddFromResource$1 = function (ResourceName, BitmapName) {
      this.AddFromResource(ResourceName,BitmapName,this.GetInstance());
    };
    this.AddFromFile = function (FileName, BitmapName) {
      var bmpi = null;
      bmpi = this.GetItems().Add$1();
      bmpi.FBitmap.LoadFromFile(FileName);
      bmpi.FName = BitmapName;
    };
    rtl.addIntf(this,$mod.ITMSFNCBitmapContainerGetItem);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Items",3,$mod.$rtti["TTMSFNCBitmapCollection"],"GetItems","SetItems");
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
    $r.addProperty("OnBitmapChanged",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnBitmapChanged","FOnBitmapChanged");
  });
},["TypInfo","WEBLib.Forms","SysUtils","WEBLib.TMSFNCUtils"]);
rtl.module("WEBLib.TMSFNCHTMLEngine",["System","Classes","WEBLib.TMSFNCGraphics","Types","WEBLib.Graphics","WEBLib.TMSFNCTypes","WEBLib.TMSFNCBitmapContainer","WEBLib.TMSFNCGraphicsTypes"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.TMSFNCHTMLENGINE_ATTR_DELIM = '"';
  this.HTMLDrawEx = function (AGraphics, s, fr, XPos, YPos, FocusLink, HoverLink, ShadowOffset, CheckHotSpot, CheckHeight, Print, Selected, Blink, HoverStyle, WordWrap, ResFactor, URLColor, HoverColor, HoverFontColor, ShadowColor, AnchorVal, StripVal, FocusAnchor, XSize, YSize, HyperLinks, MouseLink, HoverRect, LineCount, LineSpacing, BitmapContainer, Opacity, HyperLinkUnderline, HighlightColor, HighlightTextColor, HighlightTextStyle) {
    var Result = false;
    var cr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
    var cid = "";
    var cv = "";
    var ct = "";
    cid = "";
    cv = "";
    ct = "";
    cr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
    Result = $mod.HTMLDrawEx$1(AGraphics,s,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(fr),XPos,YPos,FocusLink,HoverLink,ShadowOffset,CheckHotSpot,CheckHeight,Print,Selected,Blink,HoverStyle,WordWrap,false,"",ResFactor,URLColor,HoverColor,HoverFontColor,ShadowColor,AnchorVal,StripVal,FocusAnchor,XSize,YSize,HyperLinks,MouseLink,HoverRect,cr,{get: function () {
        return cid;
      }, set: function (v) {
        cid = v;
      }},{get: function () {
        return cv;
      }, set: function (v) {
        cv = v;
      }},{get: function () {
        return ct;
      }, set: function (v) {
        ct = v;
      }},LineCount,LineSpacing,BitmapContainer,Opacity,HyperLinkUnderline,HighlightColor,HighlightTextColor,rtl.refSet(HighlightTextStyle));
    return Result;
  };
  var TFloatStyle = {"0": "fsNone", fsNone: 0, "1": "fsLeft", fsLeft: 1, "2": "fsRight", fsRight: 2};
  this.HTMLDrawEx$1 = function (AGraphics, s, fr, XPos, YPos, FocusLink, HoverLink, ShadowOffset, CheckHotSpot, CheckHeight, Print, Selected, Blink, HoverStyle, WordWrap, Down, DownID, ResFactor, URLColor, HoverColor, HoverFontColor, ShadowColor, AnchorVal, StripVal, FocusAnchor, XSize, YSize, HyperLinks, MouseLink, HoverRect, ControlRect, CID, CV, CT, LineCount, LineSpacing, BitmapContainer, Opacity, HyperLinkUnderline, HighlightColor, HighlightTextColor, HighlightTextStyle) {
    var Result = false;
    var su = "";
    var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
    var dr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
    var hr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
    var rr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
    var htmlwidth = 0.0;
    var htmlheight = 0.0;
    var txtheight = 0.0;
    var ch = 0.0;
    var rh = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
    var Align = 0;
    var PIndent = 0;
    var OldFont = null;
    var OldFontColor = 0;
    var CalcFont = null;
    var CalcFontColor = 0;
    var DrawFont = null;
    var DrawFontCOlor = 0;
    var FontColor = 0;
    var OldPenColor = 0;
    var OldCalcFont = null;
    var OldCalcFontColor = 0;
    var BkColor = 0;
    var BGColor = 0;
    var OldDrawFont = null;
    var OldDrawFontColor = 0;
    var Hotspot = false;
    var ImageHotspot = false;
    var Anchor = false;
    var OldAnchor = false;
    var MouseInAnchor = false;
    var error = false;
    var paracolor = 0;
    var pencolor = 0;
    var blnkcolor = 0;
    var hifcol = 0;
    var hibcol = 0;
    var LastAnchor = "";
    var OldAnchorVal = "";
    var LType = "";
    var IMGSize = pas.Types.TPoint.$new();
    var isSup = false;
    var isSub = false;
    var isPara = false;
    var isShad = false;
    var hlcount = 0;
    var licount = 0;
    var imgali = 0.0;
    var subh = 0.0;
    var suph = 0.0;
    var ListIndex = 0;
    var Invisible = false;
    var FoundTag = false;
    var nnFit = 0;
    var inspoint = 0;
    var hifStyles = {};
    var AltImg = 0;
    var ImgIdx = 0;
    var OldImgIdx = 0;
    var ColL = 0;
    var ColB = 0;
    var ofsx = 0;
    var newofsx = 0;
    var FHot = false;
    var floatrect = pas.Types.TRect.$new();
    var floatpt = pas.Types.TPoint.$new();
    var txtfloat = 0;
    var txtfloatbefore = 0;
    var imgfloat = 0;
    function HTMLDrawLine(AGraphics, s, r, Calc, w, h, subh, suph, imgali, Align, PIndent, XPos, YPos, Hotspot, ImageHotSpot, OffsetX, NewOffsetX, floatrect, txtfloat) {
      var Result = "";
      var su = "";
      var Res = "";
      var TagProp = "";
      var Prop = "";
      var Tagp = "";
      var LineText = "";
      var dsu = "";
      var cr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var ir = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var linebreak = false;
      var imgbreak = false;
      var linkbreak = false;
      var indent = 0;
      var bmpx = 0;
      var bmpy = 0;
      var imgw = 0;
      var imgh = 0;
      var err = 0;
      var sw = 0.0;
      var th = 0.0;
      var errs = 0.0;
      var rh = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var TagPos = 0;
      var SpacePos = 0;
      var o = 0;
      var l = 0;
      var bmp = null;
      var bmpcreated = false;
      var NewColor = 0;
      var TagWidth = 0;
      var TagHeight = 0;
      var WordLen = 0;
      var WordWidth = 0.0;
      var TagChar = "";
      var LengthFits = false;
      var ptf1 = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var ptf2 = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var imgalign = 0;
      var imgoffs = 0;
      var imgth = 0;
      var ControlType = "";
      var ControlWidth = "";
      var ControlHeight = "";
      var ControlID = "";
      var ControlValue = "";
      var ControlProp = "";
      var ControlLen = "";
      Result = "";
      LineText = "";
      WordWidth = 0;
      r.Bottom = r.Bottom - subh.get();
      w.set(0);
      sw = 0;
      linebreak = false;
      imgbreak = false;
      linkbreak = false;
      Hotspot.set(false);
      ImageHotSpot.set(false);
      cr.$assign(r);
      Res = "";
      if (!Calc) cr.Left = cr.Left + OffsetX;
      if (isPara && !Calc) {
        pencolor = AGraphics.FStroke.FColor;
        AGraphics.FStroke.SetColor(AGraphics.FFill.FColor);
        AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(fr.Left,r.Top,fr.Right,r.Top + h.get())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      };
      while ((s.get().length > 0) && !linebreak && !imgbreak) {
        TagPos = pas.System.Pos("<",s.get());
        if (WordWrap) {
          SpacePos = pas.System.Pos(" ",s.get())}
         else SpacePos = 0;
        if ((TagPos > 0) && ((SpacePos > TagPos) || (SpacePos === 0))) {
          su = pas.System.Copy(s.get(),1,TagPos - 1)}
         else {
          if (SpacePos > 0) {
            su = pas.System.Copy(s.get(),1,SpacePos)}
           else su = s.get();
        };
        WordLen = su.length;
        while (pas.System.Pos("&nbsp;",su) > 0) {
          pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&nbsp;"," ",{get: function () {
              return su;
            }, set: function (v) {
              su = v;
            }});
        };
        while (pas.System.Pos("&lt;",su) > 0) {
          pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&lt;","<",{get: function () {
              return su;
            }, set: function (v) {
              su = v;
            }});
        };
        while (pas.System.Pos("&gt;",su) > 0) {
          pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&gt;",">",{get: function () {
              return su;
            }, set: function (v) {
              su = v;
            }});
        };
        if (WordLen > 0) {
          rh.$assign(AGraphics.CalculateText(su,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,10000,10000)),false,false));
          th = rh.Bottom - rh.Top;
          if (isSub && (subh.get() < (th / 4))) subh.set(th / 4);
          if (isSup && (suph.get() < (th / 4))) suph.set(th / 4);
          if (th > h.get()) h.set(th);
          StripVal.set(StripVal.get() + su);
          if (Invisible) pas.System.Delete(s,1,WordLen);
          if (!Invisible) {
            if (!Calc) {
              if (isSup) cr.Bottom = cr.Bottom - suph.get();
              if (isSub) cr.Bottom = cr.Bottom + subh.get();
              cr.Bottom = cr.Bottom - imgali.get();
              rh.$assign(AGraphics.CalculateText(su,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,10000,10000)),false,false));
              errs = rh.Right - rh.Left;
              if (BkColor !== -1) {
                AGraphics.FFill.SetColor(BkColor);
                AGraphics.FStroke.SetColor(BkColor);
                rh.$assign(AGraphics.CalculateText$1("gh"));
                AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Top,cr.Left + errs,cr.Top + (rh.Bottom - rh.Top))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
              };
              BkColor = -1;
              if (isShad) {
                pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(cr,ShadowOffset,ShadowOffset);
                AGraphics.FFont.SetColor(ShadowColor);
                AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(cr),su,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,false,false,-1,-1);
                pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(cr,-ShadowOffset,-ShadowOffset);
                AGraphics.FFont.SetColor(OldFontColor);
              };
              if ((su !== "") && (su.charAt(su.length - 1) === " ") && Anchor) {
                dsu = su + "\x00"}
               else dsu = su;
              AGraphics.FFont.SetColor(FontColor);
              AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(cr),dsu,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,false,false,-1,-1);
              cr.Right = cr.Left + errs;
              if (Anchor && ((HyperLinks.get() - 1) === FocusLink)) FocusAnchor.set(LastAnchor);
              if (error) {
                AGraphics.FStroke.SetColor(255);
                AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
                AGraphics.FStroke.SetWidth(1);
                l = Math.round((cr.Left / 2) * 2);
                if ((l % 4) === 0) {
                  o = 2}
                 else o = 0;
                while (l < cr.Right) {
                  ptf1.$assign(pas["WEBLib.TMSFNCTypes"].PointF(l,(r.Bottom + o) - 1));
                  if (o === 2) {
                    o = 0}
                   else o = 2;
                  ptf2.$assign(pas["WEBLib.TMSFNCTypes"].PointF(l + 2,(r.Bottom + o) - 1));
                  AGraphics.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(ptf1),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(ptf2),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  l += 2;
                };
              };
              cr.Left = cr.Right;
              cr.Right = r.Right;
              cr.Bottom = r.Bottom;
              cr.Top = r.Top;
            } else {
              cr.$assign(r);
              rh.$assign(AGraphics.CalculateText(su,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,10000,10000)),false,false));
              cr.Right = cr.Left + (rh.Right - rh.Left);
              if ((YPos > cr.Top) && (YPos < cr.Bottom) && (XPos > w.get())) {
                nnFit = 0;
                if (nnFit === WordLen) {
                  inspoint = inspoint + WordLen}
                 else inspoint = inspoint + nnFit;
              };
              WordWidth = cr.Right - cr.Left;
              w.set(w.get() + WordWidth);
              if (((XPos - cr.Left) >= (w.get() - WordWidth)) && ((XPos - cr.Left) <= w.get()) && Anchor) {
                Hotspot.set(true);
                if (YPos > cr.Top) {
                  AnchorVal.set(LastAnchor);
                  MouseInAnchor = true;
                };
              };
            };
            LengthFits = (w.get() < (r.Right - r.Left - ofsx)) || ((r.Right - r.Left - ofsx) <= WordWidth);
            LineText = LineText + su;
            if (LengthFits || !WordWrap) {
              Res = Res + pas.System.Copy(s.get(),1,WordLen);
              pas.System.Delete(s,1,WordLen);
              if (su.length >= WordLen) {
                if (pas.System.Copy(su,WordLen,1) === " ") {
                  rh.$assign(AGraphics.CalculateText$1(" "));
                  sw = rh.Right - rh.Left;
                } else sw = 0;
              } else sw = 0;
            } else {
              linebreak = true;
              w.set(w.get() - WordWidth);
            };
          };
        };
        TagPos = pas.System.Pos("<",s.get());
        if ((TagPos === 1) && (s.get().length <= 2)) s.set("");
        if (!linebreak && (TagPos === 1) && (s.get().length > 2)) {
          if ((s.get().charAt(1) === "\/") && (s.get().length > 3)) {
            var $tmp1 = pas.System.upcase(s.get().charAt(2));
            if ($tmp1 === "A") {
              if ((!HoverStyle || (HoverLink === HyperLinks.get())) && !Calc) {
                AGraphics.FFont.SetStyle(rtl.diffSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsUnderline)));
                if (HoverColor !== -1) BkColor = HoverColor;
                if (HoverFontColor !== -1) FontColor = HoverFontColor;
              };
              if (!Selected) FontColor = OldFontColor;
              Anchor = false;
              if (MouseInAnchor) {
                hr.Bottom = r.Bottom;
                hr.Right = r.Left + w.get();
                if (r.Top !== hr.Top) {
                  hr.Left = r.Left;
                  hr.Top = r.Top;
                };
                HoverRect.$assign(hr);
                MouseLink.set(HyperLinks.get());
                MouseInAnchor = false;
              };
              if (FocusLink === (HyperLinks.get() - 1)) {
                rr.Right = cr.Left;
                rr.Bottom = cr.Bottom - imgali.get();
                rh.$assign(AGraphics.CalculateText$1("gh"));
                rr.Top = rr.Bottom - (rh.Bottom - rh.Top);
                pas["WEBLib.TMSFNCTypes"].InflateRectEx(rr,1,0);
              };
            } else if ($tmp1 === "E") {
              if (!Calc) error = false;
            } else if ($tmp1 === "B") {
              if (s.get().charAt(3) !== ">") {
                FontColor = OldFontColor}
               else AGraphics.FFont.SetStyle(rtl.diffSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold)));
            } else if ($tmp1 === "S") {
              TagChar = pas.System.upcase(s.get().charAt(3));
              if (TagChar === "U") {
                isSup = false;
                isSub = false;
              } else if (TagChar === "H") {
                isShad = false}
               else AGraphics.FFont.SetStyle(rtl.diffSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsStrikeOut)));
            } else if ($tmp1 === "F") {
              AGraphics.FFont.SetName(OldFont.FName);
              AGraphics.FFont.SetSize(OldFont.FSize);
              if (!Calc && !Selected) {
                FontColor = OldFontColor;
                AGraphics.FFill.SetColor(BGColor);
              };
            } else if ($tmp1 === "H") {
              if (!Calc) {
                FontColor = hifcol;
                BkColor = hibcol;
                AGraphics.FFont.SetStyle(rtl.refSet(hifStyles));
                AGraphics.FFill.SetColor(hibcol);
              };
            } else if ($tmp1 === "I") {
              AGraphics.FFont.SetStyle(rtl.diffSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsItalic)));
            } else if ($tmp1 === "L") {
              linebreak = true;
            } else if ($tmp1 === "O") {
              NewOffsetX.set(0);
            } else if ($tmp1 === "P") {
              linebreak = true;
              if (!Calc) {
                AGraphics.FFill.SetColor(paracolor);
                isPara = false;
              };
            } else if ($tmp1 === "U") {
              if ((s.get().charAt(3) !== ">") && (ListIndex > 0)) {
                ListIndex -= 1}
               else AGraphics.FFont.SetStyle(rtl.diffSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsUnderline)));
            } else if ($tmp1 === "R") {}
            else if ($tmp1 === "Z") Invisible = false;
          } else {
            var $tmp2 = pas.System.upcase(s.get().charAt(1));
            if ($tmp2 === "A") {
              if ((FocusLink === HyperLinks.get()) && !Calc) {
                rr.Left = cr.Left;
                rr.Top = cr.Top;
              };
              HyperLinks.set(HyperLinks.get() + 1);
              if ((!HoverStyle || (HoverLink === HyperLinks.get())) && !Calc) {
                if (HyperLinkUnderline) AGraphics.FFont.SetStyle(rtl.unionSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsUnderline)));
                if ((HoverColor !== -1) && !Calc) BkColor = HoverColor;
                if (HoverFontColor !== -1) FontColor = HoverFontColor;
              };
              if (!Selected && ((HoverFontColor === -1) || (HoverLink !== HyperLinks.get()) || !HoverStyle)) {
                OldFontColor = FontColor;
                FontColor = URLColor;
              };
              TagProp = pas.System.Copy(s.get(),3,pas.System.Pos(">",s.get()) - 1);
              Prop = pas.System.Copy(TagProp,pas.System.Pos('"',TagProp) + 1,TagProp.length);
              Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
              LastAnchor = Prop;
              Anchor = true;
              hr.Left = w.get();
              hr.Top = r.Top;
            } else if ($tmp2 === "B") {
              TagChar = pas.System.upcase(s.get().charAt(2));
              var $tmp3 = TagChar;
              if ($tmp3 === ">") {
                AGraphics.FFont.SetStyle(rtl.unionSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold)))}
               else if ($tmp3 === "R") {
                linebreak = true;
                StripVal.set(StripVal.get() + "\r");
              } else if ($tmp3 === "L") {
                if (!Blink) FontColor = blnkcolor}
               else if ($tmp3 === "O") {
                bmpy = 0;
                Res = Res + pas.System.Copy(s.get(),1,pas.System.Pos(">",s.get()));
                if (!Calc && !Selected) {
                  TagProp = pas.SysUtils.UpperCase(pas.System.Copy(s.get(),6,pas.System.Pos(">",s.get()) - 1));
                  if (pas.System.Pos("BACKGROUND",TagProp) > 0) {
                    Prop = pas.System.Copy(TagProp,pas.System.Pos("BACKGROUND",TagProp) + 10,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    if (pas.System.Pos("IDX:",pas.SysUtils.UpperCase(Prop)) > 0) {
                      pas.System.Delete({get: function () {
                          return Prop;
                        }, set: function (v) {
                          Prop = v;
                        }},1,4);
                    };
                    bmp = null;
                    bmpcreated = false;
                    if ((pas.System.Pos(":",Prop) === 0) && (BitmapContainer != null)) {
                      bmp = BitmapContainer.FindBitmap$1(Prop);
                    };
                    if (pas.System.Pos("URL:\/\/",pas.SysUtils.UpperCase(Prop)) > 0) {
                      pas.System.Delete({get: function () {
                          return Prop;
                        }, set: function (v) {
                          Prop = v;
                        }},1,6);
                      bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromURL(Prop);
                      bmpcreated = true;
                    };
                    if (bmp != null) {
                      if (!pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp) && (bmp.GetWidth() > 0) && (bmp.GetHeight() > 0)) {
                        while (bmpy < (fr.Bottom - fr.Top)) {
                          bmpx = 0;
                          while (bmpx < (fr.Right - fr.Left)) {
                            AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(fr.Left + bmpx),Math.round(fr.Top + bmpy),Math.round(fr.Left + bmpx) + bmp.GetWidth(),Math.round(fr.Top + bmpy) + bmp.GetHeight())),bmp,true,false,true,false);
                            bmpx = bmpx + bmp.GetWidth();
                          };
                          bmpy = bmpy + bmp.GetHeight();
                        };
                      };
                      if (bmpcreated) bmp = rtl.freeLoc(bmp);
                    };
                  };
                  if (pas.System.Pos("BGTOPLEFT",TagProp) > 0) {
                    Prop = pas.System.Copy(TagProp,pas.System.Pos("BGTOPLEFT",TagProp) + 10,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    bmp = null;
                    if ((pas.System.Pos(":",Prop) === 0) && (BitmapContainer != null)) {
                      bmp = BitmapContainer.FindBitmap$1(Prop);
                    };
                    if (bmp != null) {
                      if (!pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp) && (bmp.GetWidth() > 0) && (bmp.GetHeight() > 0)) {
                        AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(fr.Left),Math.round(fr.Top + bmpy),Math.round(fr.Left) + bmp.GetWidth(),Math.round(fr.Top) + bmp.GetHeight())),bmp,true,false,true,false);
                      };
                    };
                  };
                  if (pas.System.Pos("BGTOPRIGHT",TagProp) > 0) {
                    Prop = pas.System.Copy(TagProp,pas.System.Pos("BGTOPRIGHT",TagProp) + 10,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    bmp = null;
                    if ((pas.System.Pos(":",Prop) === 0) && (BitmapContainer != null)) {
                      bmp = BitmapContainer.FindBitmap$1(Prop);
                    };
                    if (bmp != null) {
                      if (!pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp) && (bmp.GetWidth() > 0) && (bmp.GetHeight() > 0)) {
                        AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(fr.Right) - bmp.GetWidth(),Math.round(fr.Top + bmpy),Math.round(fr.Right),Math.round(fr.Top) + bmp.GetHeight())),bmp,true,false,true,false);
                      };
                    };
                  };
                  if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("BGCOLOR",TagProp,{get: function () {
                      return TagPos;
                    }, set: function (v) {
                      TagPos = v;
                    }}) > 0) {
                    Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    NewColor = -1;
                    if (Prop.length > 0) {
                      if (Prop.charAt(0) === "#") {
                        NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                       else {
                        NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(pas.SysUtils.LowerCase(Prop));
                      };
                    };
                    if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("BGCOLORTO",TagProp,{get: function () {
                        return TagPos;
                      }, set: function (v) {
                        TagPos = v;
                      }}) > 0) {
                      Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                      Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                      Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                      Prop = "H";
                      if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("DIR",TagProp,{get: function () {
                          return TagPos;
                        }, set: function (v) {
                          TagPos = v;
                        }}) > 0) {
                        Prop = pas.System.Copy(TagProp,TagPos + 3,TagProp.length);
                        Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                        Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                      };
                      AGraphics.FStroke.SetColor(NewColor);
                    } else {
                      BGColor = AGraphics.FFill.FColor;
                      AGraphics.FFill.SetColor(NewColor);
                      pencolor = AGraphics.FStroke.FColor;
                      AGraphics.FStroke.SetColor(NewColor);
                      AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(fr.Left - 2,fr.Top,fr.Right,fr.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
                      AGraphics.FStroke.SetColor(pencolor);
                    };
                  };
                };
              };
            } else if ($tmp2 === "E") {
              if (!Calc) error = true;
            } else if ($tmp2 === "C") {
              TagProp = pas.System.Copy(s.get(),9,pas.System.Pos(">",s.get()) - 1);
              ControlType = "";
              ControlID = "";
              ControlValue = "";
              ControlWidth = "";
              ControlHeight = "";
              ControlProp = "";
              ControlLen = "";
              $mod.ParseControl(TagProp,{get: function () {
                  return ControlType;
                }, set: function (v) {
                  ControlType = v;
                }},{get: function () {
                  return ControlID;
                }, set: function (v) {
                  ControlID = v;
                }},{get: function () {
                  return ControlValue;
                }, set: function (v) {
                  ControlValue = v;
                }},{get: function () {
                  return ControlWidth;
                }, set: function (v) {
                  ControlWidth = v;
                }},{get: function () {
                  return ControlHeight;
                }, set: function (v) {
                  ControlHeight = v;
                }},{get: function () {
                  return ControlProp;
                }, set: function (v) {
                  ControlProp = v;
                }},{get: function () {
                  return ControlLen;
                }, set: function (v) {
                  ControlLen = v;
                }});
              ch = 25;
              if (ControlHeight !== "") {
                pas.System.val$8(ControlHeight,{get: function () {
                    return ch;
                  }, set: function (v) {
                    ch = v;
                  }},{get: function () {
                    return err;
                  }, set: function (v) {
                    err = v;
                  }});
                if (err !== 0) ch = 25;
              };
              if ((ControlWidth !== "") || (ControlType === "CHECK") || (ControlType === "RADIO")) {
                pas.System.val$6(ControlWidth,{get: function () {
                    return indent;
                  }, set: function (v) {
                    indent = v;
                  }},{get: function () {
                    return err;
                  }, set: function (v) {
                    err = v;
                  }});
                if (err === 0) {
                  IMGSize.x = indent;
                  IMGSize.y = Math.round(AGraphics.CalculateTextHeight$1("gh")) + 10;
                };
                if ((ControlType === "CHECK") || (ControlType === "RADIO")) {
                  h.set(16)}
                 else h.set(23);
                if (ch > 25) h.set(ch - 2);
                if (!Calc) {
                  if ((ControlType === "EDIT") || (ControlType === "PASSWORD") || (ControlType === "MASK")) ;
                  if (ControlType === "COMBO") ;
                  if (ControlType === "CHECK") {
                    IMGSize.x = Math.round(16 * ResFactor) + 2;
                    IMGSize.y = IMGSize.x;
                    indent = IMGSize.x;
                    ir.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left + 1,cr.Top + ((cr.Bottom - cr.Top - (IMGSize.y - 2)) / 2),(cr.Left + IMGSize.x) - 1,cr.Top + ((cr.Bottom - cr.Top - (IMGSize.y - 2)) / 2) + (IMGSize.y - 2)));
                    ir.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Right),Math.round(ir.Bottom)));
                    AGraphics.DrawCheckBox(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ir),pas.SysUtils.UpperCase(ControlValue) === "TRUE",Down && (DownID === ControlID),true);
                  };
                  if (ControlType === "RADIO") {
                    IMGSize.x = Math.round(16 * ResFactor) + 2;
                    IMGSize.y = IMGSize.x;
                    indent = IMGSize.x;
                    ir.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left + 1,cr.Top + ((cr.Bottom - cr.Top - (IMGSize.y - 2)) / 2),(cr.Left + IMGSize.x) - 1,cr.Top + ((cr.Bottom - cr.Top - (IMGSize.y - 2)) / 2) + (IMGSize.y - 2)));
                    ir.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Right),Math.round(ir.Bottom)));
                    AGraphics.DrawRadioButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ir),pas.SysUtils.UpperCase(ControlValue) === "TRUE",Down && (DownID === ControlID),true);
                  };
                  if (ControlType === "BUTTON") {
                    IMGSize.y = 22;
                    ir.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left + 2,cr.Top + ((cr.Bottom - cr.Top - IMGSize.y) / 2),(cr.Left + indent) - 2,cr.Top + ((cr.Bottom - cr.Top - IMGSize.y) / 2) + IMGSize.y));
                    FHot = pas["WEBLib.TMSFNCTypes"].PtInRectEx(ir,pas["WEBLib.TMSFNCTypes"].PointF(XPos,YPos));
                    ir.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Right),Math.round(ir.Bottom)));
                    AGraphics.DrawButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ir),Down && (DownID === ControlID),FHot,true,true);
                    pas["WEBLib.TMSFNCTypes"].InflateRectEx(ir,-2,-2);
                    AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ir),ControlValue,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
                  };
                };
                if (ControlType === "BUTTON") IMGSize.y = 22;
                if (ControlType === "COMBO") IMGSize.y = 25;
                if ((ControlType === "CHECK") || (ControlType === "RADIO")) {
                  IMGSize.x = Math.round(16 * ResFactor) + 2;
                  IMGSize.y = IMGSize.x;
                };
                if ((((XPos - r.Left) > w.get()) && ((XPos - r.Left) < (w.get() + IMGSize.x)) && (YPos > cr.Top) && (YPos < (cr.Top + IMGSize.y))) || (CheckHotSpot && (CID.get() === ControlID))) {
                  ImageHotSpot.set(true);
                  AnchorVal.set("ctrl");
                  AltImg = ImgIdx;
                  ir.Left = r.Left + w.get();
                  ir.Right = ir.Left + IMGSize.x;
                  ir.Top = cr.Top;
                  ir.Bottom = cr.Top + IMGSize.y;
                  ControlRect.$assign(ir);
                  CV.set(ControlValue);
                  CID.set(ControlID);
                  CT.set(ControlType);
                };
                if (((w.get() + IMGSize.x) > (r.Right - r.Left)) && (IMGSize.x < (r.Right - r.Left))) {
                  imgbreak = true;
                } else {
                  w.set(w.get() + IMGSize.x);
                  cr.Left = cr.Left + IMGSize.x;
                  if (IMGSize.y > h.get()) h.set(IMGSize.y);
                };
              };
            } else if ($tmp2 === "H") {
              var $tmp4 = pas.System.upcase(s.get().charAt(2));
              if ($tmp4 === "R") {
                linebreak = true;
                if (!Calc) {
                  TagProp = pas.System.Copy(s.get(),4,pas.System.Pos(">",s.get()) - 1);
                  NewColor = 0;
                  if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("COLOR",pas.SysUtils.UpperCase(TagProp),{get: function () {
                      return TagPos;
                    }, set: function (v) {
                      TagPos = v;
                    }}) > 0) {
                    Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    if (Prop.length > 0) {
                      if (Prop.charAt(0) === "#") {
                        NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                       else {
                        NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(pas.SysUtils.LowerCase(Prop));
                      };
                    };
                  };
                  AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
                  pencolor = AGraphics.FStroke.FColor;
                  AGraphics.FStroke.SetColor(NewColor);
                  ptf1.$assign(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,cr.Bottom + 1));
                  ptf2.$assign(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,cr.Bottom + 1));
                  AGraphics.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(ptf1),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(ptf2),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
                  AGraphics.FStroke.SetColor(pencolor);
                };
              } else if ($tmp4 === "I") {
                if (!Calc) {
                  hifcol = FontColor;
                  hibcol = BkColor;
                  hifStyles = rtl.refSet(AGraphics.FFont.FStyle);
                  BkColor = HighlightColor;
                  FontColor = HighlightTextColor;
                };
                AGraphics.FFont.SetStyle(rtl.refSet(HighlightTextStyle));
              };
            } else if ($tmp2 === "I") {
              TagChar = pas.System.upcase(s.get().charAt(2));
              if (TagChar === ">") {
                AGraphics.FFont.SetStyle(rtl.unionSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsItalic)))}
               else if (TagChar === "N") {
                TagProp = pas.System.Copy(s.get(),3,pas.System.Pos(">",s.get()) - 1);
                Prop = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("x",TagProp) + 2,TagProp.length);
                Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                pas.System.val$6(Prop,{get: function () {
                    return indent;
                  }, set: function (v) {
                    indent = v;
                  }},{get: function () {
                    return err;
                  }, set: function (v) {
                    err = v;
                  }});
                if (err === 0) {
                  if (indent > w.get()) {
                    w.set(indent);
                    cr.Left = fr.Left + indent;
                  };
                };
              } else if (TagChar === "M") {
                imgalign = 0;
                imgoffs = 0;
                imgfloat = TFloatStyle.fsNone;
                imgth = Math.round(AGraphics.CalculateTextHeight$1("gh"));
                ImgIdx += 1;
                ir.$assign(cr);
                TagProp = pas.System.Copy(s.get(),3,pas.System.Pos(">",s.get()) - 1);
                Prop = pas.System.Copy(TagProp,pas.System.Pos("SRC",pas.SysUtils.UpperCase(TagProp)) + 4,TagProp.length);
                Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                TagProp = pas.SysUtils.UpperCase(TagProp);
                if ((pas.System.Pos("ALT",TagProp) > 0) && (AltImg === ImgIdx)) {
                  Prop = pas.System.Copy(TagProp,pas.System.Pos("ALT",TagProp) + 4,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                };
                TagWidth = 0;
                TagHeight = 0;
                if (pas.System.Pos("WIDTH",TagProp) > 0) {
                  Tagp = pas.System.Copy(TagProp,pas.System.Pos("WIDTH",TagProp) + 6,TagProp.length);
                  Tagp = pas.System.Copy(Tagp,pas.System.Pos('"',Tagp) + 1,Tagp.length);
                  Tagp = pas.System.Copy(Tagp,1,pas.System.Pos('"',Tagp) - 1);
                  pas.System.val$6(Tagp,{get: function () {
                      return TagWidth;
                    }, set: function (v) {
                      TagWidth = v;
                    }},{get: function () {
                      return err;
                    }, set: function (v) {
                      err = v;
                    }});
                };
                if (pas.System.Pos("HEIGHT",TagProp) > 0) {
                  Tagp = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("HEIGHT",TagProp) + 7,TagProp.length);
                  Tagp = pas.System.Copy(Tagp,pas.System.Pos('"',Tagp) + 1,Tagp.length);
                  Tagp = pas.System.Copy(Tagp,1,pas.System.Pos('"',Tagp) - 1);
                  pas.System.val$6(Tagp,{get: function () {
                      return TagHeight;
                    }, set: function (v) {
                      TagHeight = v;
                    }},{get: function () {
                      return err;
                    }, set: function (v) {
                      err = v;
                    }});
                };
                if (pas.System.Pos("ALIGN",TagProp) > 0) {
                  Tagp = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("ALIGN",TagProp) + 6,TagProp.length);
                  Tagp = pas.System.Copy(Tagp,pas.System.Pos('"',Tagp) + 1,Tagp.length);
                  Tagp = pas.System.Copy(Tagp,1,pas.System.Pos('"',Tagp) - 1);
                  if (Tagp === "MIDDLE") imgalign = 1;
                  if (Tagp === "TOP") imgalign = 2;
                };
                if (pas.System.Pos("FLOAT",TagProp) > 0) {
                  Tagp = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("FLOAT",TagProp) + 6,TagProp.length);
                  Tagp = pas.System.Copy(Tagp,pas.System.Pos('"',Tagp) + 1,Tagp.length);
                  Tagp = pas.System.Copy(Tagp,1,pas.System.Pos('"',Tagp) - 1);
                  if (Tagp === "LEFT") {
                    imgfloat = TFloatStyle.fsLeft;
                    ir.Left = fr.Left;
                  };
                  if (Tagp === "RIGHT") imgfloat = TFloatStyle.fsRight;
                };
                IMGSize.x = 0;
                IMGSize.y = 0;
                if (pas.System.Pos("IDX:",pas.SysUtils.UpperCase(Prop)) > 0) {
                  pas.System.Delete({get: function () {
                      return Prop;
                    }, set: function (v) {
                      Prop = v;
                    }},1,4);
                };
                bmp = null;
                bmpcreated = false;
                if ((pas.System.Pos(":",Prop) === 0) && (BitmapContainer != null)) {
                  bmp = BitmapContainer.FindBitmap$1(Prop);
                };
                if (pas.System.Pos("URL:\/\/",pas.SysUtils.UpperCase(Prop)) > 0) {
                  pas.System.Delete({get: function () {
                      return Prop;
                    }, set: function (v) {
                      Prop = v;
                    }},1,6);
                  bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromURL(Prop);
                  bmpcreated = true;
                };
                imgw = 0;
                imgh = 0;
                if (bmp != null) {
                  if (!pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) {
                    if ((TagWidth > 0) && (TagHeight > 0)) {
                      imgw = TagWidth;
                      imgh = TagHeight;
                    };
                    if ((TagWidth > 0) && (TagHeight === 0)) {
                      imgw = TagWidth;
                      imgh = Math.round((TagWidth / bmp.GetWidth()) * bmp.GetHeight());
                    };
                    if ((TagWidth === 0) && (TagHeight > 0)) {
                      imgw = Math.round((TagHeight / bmp.GetHeight()) * bmp.GetWidth());
                      imgh = TagHeight;
                    };
                    if ((TagWidth === 0) && (TagHeight === 0)) {
                      imgw = bmp.GetWidth();
                      imgh = bmp.GetHeight();
                    };
                    if (imgfloat === TFloatStyle.fsRight) ir.Left = r.Right - imgw;
                    if (!Calc) {
                      if ((TagWidth > 0) || (TagHeight > 0)) {
                        AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Left) + imgw,Math.round(ir.Top) + imgh)),bmp,true,false,true,false);
                      } else if ((TagWidth > 0) && (TagHeight === 0)) {
                        AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Left) + TagWidth,Math.round(ir.Top) + TagHeight)),bmp,true,false,true,false);
                      } else {
                        AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(ir.Left),Math.round(ir.Top),Math.round(ir.Left) + bmp.GetWidth(),Math.round(ir.Top) + bmp.GetHeight())),bmp,true,false,true,false);
                      };
                    };
                    if ((TagWidth > 0) || (TagHeight > 0)) {
                      IMGSize.x = imgw;
                      IMGSize.y = imgh;
                    } else {
                      IMGSize.x = bmp.GetWidth();
                      IMGSize.y = bmp.GetHeight();
                    };
                  };
                  if (bmpcreated) bmp = rtl.freeLoc(bmp);
                };
                if (((XPos - r.Left) > w.get()) && ((XPos - r.Left) < (w.get() + IMGSize.x)) && (YPos > cr.Top) && (YPos < (cr.Top + IMGSize.y)) && Anchor) {
                  ImageHotSpot.set(true);
                  AnchorVal.set(LastAnchor);
                  AltImg = ImgIdx;
                };
                if (((w.get() + IMGSize.x) > (r.Right - r.Left)) && (IMGSize.x < (r.Right - r.Left))) {
                  imgbreak = true;
                } else {
                  w.set(w.get() + IMGSize.x);
                  cr.Left = cr.Left + IMGSize.x;
                  if (IMGSize.y > h.get()) h.set(IMGSize.y);
                };
                if (pas.System.Pos("ALIGN",TagProp) > 0) {
                  if (pas.System.Pos('"TOP',TagProp) > 0) {
                    rh.$assign(AGraphics.CalculateText$1("gh"));
                    imgali.set(h.get() - (rh.Bottom - rh.Top));
                  } else {
                    if (pas.System.Pos('"MIDDLE',TagProp) > 0) {
                      rh.$assign(AGraphics.CalculateText$1("gh"));
                      imgali.set((h.get() - (rh.Bottom - rh.Top)) / 2);
                    };
                  };
                };
                if (pas.System.Pos("WRAP",TagProp) > 0) {
                  rh.$assign(AGraphics.CalculateText$1("gh"));
                  h.set(rh.Bottom - rh.Top);
                  imgali.set(0);
                };
                if (imgfloat === TFloatStyle.fsLeft) {
                  rh.$assign(AGraphics.CalculateText$1("gh"));
                  imgali.set(h.get() - (rh.Bottom - rh.Top));
                  floatrect.Left = imgw;
                  floatrect.Bottom = imgh;
                  if (!Calc) {
                    rh.$assign(AGraphics.CalculateText$1("gh"));
                    h.set(rh.Bottom - rh.Top);
                  };
                };
                if (imgfloat === TFloatStyle.fsRight) {
                  rh.$assign(AGraphics.CalculateText$1("gh"));
                  imgali.set(h.get() - (rh.Bottom - rh.Top));
                  floatrect.Right = imgw;
                  floatrect.Bottom = imgh;
                  if (!Calc) {
                    rh.$assign(AGraphics.CalculateText$1("gh"));
                    h.set(rh.Bottom - rh.Top);
                  };
                  w.set(fr.Right);
                };
              };
            } else if ($tmp2 === "L") {
              NewColor = -1;
              LType = "";
              if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(">",s.get(),{get: function () {
                  return TagPos;
                }, set: function (v) {
                  TagPos = v;
                }}) > 0) {
                TagProp = pas.SysUtils.UpperCase(pas.System.Copy(s.get(),3,TagPos - 1));
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("TYPE",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 4,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  LType = Prop;
                };
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("COLOR",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  if (Prop.length > 0) {
                    if (Prop.charAt(0) === "#") {
                      NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                     else NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(Prop);
                  };
                };
              };
              w.set(w.get() + (12 * ListIndex));
              if (linkbreak) {
                imgbreak = true}
               else linkbreak = true;
              cr.Left = cr.Left + (12 * (ListIndex - 1));
              if (!Calc && !Invisible) {
                if (LType === "") {
                  if (NewColor !== -1) {
                    ColL = AGraphics.FFont.FColor;
                    FontColor = NewColor;
                  };
                  Prop = AGraphics.FFont.FName;
                  AGraphics.FFont.SetName("Symbol");
                  if (pas.System.Odd(ListIndex)) {
                    AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(cr),"·",false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,false,false,-1,-1)}
                   else AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(cr),"o",false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,false,false,-1,-1);
                  AGraphics.FFont.SetName(Prop);
                  if (NewColor !== -1) FontColor = ColL;
                } else {
                  ColB = -1;
                  if (LType === "SQUARE") {
                    ColB = AGraphics.FFill.FColor;
                    AGraphics.FStroke.SetColor(NewColor);
                    AGraphics.FFill.SetColor(NewColor);
                    AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Top + 2,cr.Left + 8,cr.Top + 10)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
                    AGraphics.FFill.SetColor(ColB);
                  };
                  if (LType === "CIRCLE") {
                    ColB = AGraphics.FFill.FColor;
                    AGraphics.FStroke.SetColor(NewColor);
                    AGraphics.FFill.SetColor(NewColor);
                    AGraphics.DrawEllipse$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Top + 2,cr.Left + 8,cr.Top + 10)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
                    AGraphics.FFill.SetColor(ColB);
                  };
                };
              };
              cr.Left = cr.Left + 12;
            } else if ($tmp2 === "U") {
              if (s.get().charAt(2) !== ">") {
                ListIndex += 1;
                linebreak = true;
              } else AGraphics.FFont.SetStyle(rtl.unionSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsUnderline)));
            } else if ($tmp2 === "O") {
              TagChar = pas.System.upcase(s.get().charAt(2));
              if (TagChar === "F") {
                TagProp = pas.System.Copy(s.get(),3,pas.System.Pos(">",s.get()) - 1);
                Prop = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("x",TagProp) + 2,TagProp.length);
                Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                pas.System.val$6(Prop,NewOffsetX,{get: function () {
                    return err;
                  }, set: function (v) {
                    err = v;
                  }});
                cr.Left = NewOffsetX.get();
                w.set(NewOffsetX.get());
              };
            } else if ($tmp2 === "P") {
              if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(">",s.get(),{get: function () {
                  return TagPos;
                }, set: function (v) {
                  TagPos = v;
                }}) > 0) {
                TagProp = pas.SysUtils.UpperCase(pas.System.Copy(s.get(),3,TagPos - 1));
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("ALIGN",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  if (pas.System.Pos("RIGHT",Prop) > 0) Align.set(pas.Classes.TAlignment.taRightJustify);
                  if (pas.System.Pos("LEFT",Prop) > 0) Align.set(pas.Classes.TAlignment.taLeftJustify);
                  if (pas.System.Pos("CENTER",Prop) > 0) Align.set(pas.Classes.TAlignment.taCenter);
                };
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("INDENT",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 6,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  PIndent.set($impl.IStrToInt(Prop));
                };
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("FLOAT",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  if (Prop === "LEFT") txtfloat.set(TFloatStyle.fsLeft);
                  if (Prop === "RIGHT") txtfloat.set(TFloatStyle.fsRight);
                  floatpt.$assign(pas.Types.Point(Math.round(r.Left),Math.round(r.Top)));
                };
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("BGCOLOR",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  NewColor = -1;
                  if (Prop.length > 0) {
                    if (Prop.charAt(0) === "#") {
                      NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                     else NewColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(Prop);
                  };
                  if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("BGCOLORTO",TagProp,{get: function () {
                      return TagPos;
                    }, set: function (v) {
                      TagPos = v;
                    }}) > 0) {
                    Prop = pas.System.Copy(TagProp,TagPos + 5,TagProp.length);
                    Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                    Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                    if (!Calc) {
                      isPara = true;
                      AGraphics.FStroke.SetColor(NewColor);
                    };
                  } else {
                    if (!Calc) {
                      isPara = true;
                      paracolor = AGraphics.FFill.FColor;
                      AGraphics.FFill.SetColor(NewColor);
                      pencolor = AGraphics.FStroke.FColor;
                      AGraphics.FStroke.SetColor(NewColor);
                      AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(fr.Left,r.Top,fr.Right,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
                    };
                  };
                };
              };
            } else if ($tmp2 === "F") {
              if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(">",s.get(),{get: function () {
                  return TagPos;
                }, set: function (v) {
                  TagPos = v;
                }}) > 0) {
                TagProp = pas.SysUtils.UpperCase(pas.System.Copy(s.get(),6,TagPos - 6));
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("FACE",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 4,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  AGraphics.FFont.SetName(Prop);
                };
                if ((pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(" COLOR",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) && !Selected) {
                  Prop = pas.System.Copy(TagProp,TagPos + 6,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  if (AGraphics.FFill.FColor !== -1) {
                    OldFontColor = AGraphics.FFont.FColor}
                   else OldFontColor = 0;
                  if (Prop.length > 0) {
                    if (Prop.charAt(0) === "#") {
                      FontColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                     else FontColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(Prop);
                  };
                };
                if ((pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("BGCOLOR",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) && !Calc && !Selected) {
                  Prop = pas.System.Copy(TagProp,TagPos + 7,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  if (Prop.length > 0) {
                    if (Prop.charAt(0) === "#") {
                      BkColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.HTMLToColor(Prop)}
                     else BkColor = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.TextToColor(Prop);
                  };
                };
                if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos("SIZE",TagProp,{get: function () {
                    return TagPos;
                  }, set: function (v) {
                    TagPos = v;
                  }}) > 0) {
                  Prop = pas.System.Copy(TagProp,TagPos + 4,TagProp.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos("=",Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
                  Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
                  var $tmp5 = $impl.IStrToInt(Prop);
                  if ($tmp5 === 1) {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,8)}
                   else if ($tmp5 === 2) {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,10)}
                   else if ($tmp5 === 3) {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,12)}
                   else if ($tmp5 === 4) {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,14)}
                   else if ($tmp5 === 5) {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,16)}
                   else {
                    pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.SetFontSize(AGraphics.FFont,$impl.IStrToInt(Prop));
                  };
                };
              };
            } else if ($tmp2 === "S") {
              TagChar = pas.System.upcase(s.get().charAt(2));
              if (TagChar === ">") {
                AGraphics.FFont.SetStyle(rtl.unionSet(AGraphics.FFont.FStyle,rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsStrikeOut)))}
               else {
                if (TagChar === "H") {
                  isShad = true}
                 else {
                  if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("<SUB>",s.get()) === 1) {
                    isSub = true}
                   else if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("<SUP>",s.get()) === 1) isSup = true;
                };
              };
            } else if ($tmp2 === "R") {
              TagProp = pas.System.Copy(s.get(),3,pas.System.Pos(">",s.get()) - 1);
              Prop = pas.System.Copy(TagProp,pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IPos("a",TagProp) + 2,TagProp.length);
              Prop = pas.System.Copy(Prop,pas.System.Pos('"',Prop) + 1,Prop.length);
              Prop = pas.System.Copy(Prop,1,pas.System.Pos('"',Prop) - 1);
            } else if ($tmp2 === "Z") Invisible = true;
          };
          if ((pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(">",s.get(),{get: function () {
              return TagPos;
            }, set: function (v) {
              TagPos = v;
            }}) > 0) && !imgbreak) {
            Res = Res + pas.System.Copy(s.get(),1,TagPos);
            pas.System.Delete(s,1,TagPos);
          } else if (!imgbreak) pas.System.Delete(s,1,s.get().length);
        };
      };
      w.set(w.get() - sw);
      if (w.get() > XSize.get()) XSize.set(w.get() + 2);
      if ((FocusLink === (HyperLinks.get() - 1)) && Anchor && !Calc) {
        rr.Right = cr.Left;
        rr.Bottom = cr.Bottom;
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(rr,1,0);
        rr.Left = r.Left + 1;
        rr.Top = rr.Bottom;
      };
      Result = Res;
      return Result;
    };
    Anchor = false;
    error = false;
    OldFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
    OldFont.AssignSource(AGraphics.FFont);
    OldFontColor = AGraphics.FFont.FColor;
    DrawFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
    DrawFont.AssignSource(AGraphics.FFont);
    DrawFontCOlor = AGraphics.FFont.FColor;
    CalcFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
    CalcFont.AssignSource(AGraphics.FFont);
    CalcFontColor = AGraphics.FFont.FColor;
    OldDrawFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
    OldDrawFont.AssignSource(AGraphics.FFont);
    OldDrawFontColor = AGraphics.FFont.FColor;
    OldCalcFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
    OldCalcFont.AssignSource(AGraphics.FFont);
    OldCalcFontColor = AGraphics.FFont.FColor;
    blnkcolor = AGraphics.FFill.FColor;
    OldPenColor = AGraphics.FStroke.FColor;
    BGColor = -1;
    BkColor = -1;
    paracolor = -1;
    isPara = false;
    isShad = false;
    Invisible = false;
    ControlRect.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
    CV.set("");
    CT.set("");
    if (!CheckHotSpot) CID.set("");
    ofsx = 0;
    newofsx = 0;
    txtfloat = TFloatStyle.fsNone;
    floatrect.$assign(pas.Types.Rect(0,0,0,0));
    Result = false;
    r.$assign(fr);
    Align = pas.Classes.TAlignment.taLeftJustify;
    PIndent = 0;
    XSize.set(0);
    YSize.set(0);
    HyperLinks.set(0);
    hlcount = 0;
    ListIndex = 0;
    licount = 0;
    StripVal.set("");
    FocusAnchor.set("");
    MouseLink.set(-1);
    MouseInAnchor = false;
    ImgIdx = 0;
    AltImg = -1;
    if (pas.System.Pos("&",s) > 0) {
      s = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.UnFixMarkup(s,true);
      do {
        FoundTag = false;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.TagReplaceString("&amp;","&",{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }})) FoundTag = true;
      } while (FoundTag);
    };
    s = $impl.DBTagStrip(s);
    s = $impl.CRLFStrip(s,true);
    inspoint = 0;
    LineCount.set(0);
    while (s.length > 0) {
      OldFont.AssignSource(OldCalcFont);
      OldFontColor = OldCalcFontColor;
      AGraphics.FFont.AssignSource(CalcFont);
      FontColor = CalcFontColor;
      OldAnchor = Anchor;
      OldAnchorVal = LastAnchor;
      suph = 0;
      subh = 0;
      imgali = 0;
      isSup = false;
      isSub = false;
      Hotspot = false;
      ImageHotspot = false;
      htmlwidth = 0;
      rh.$assign(AGraphics.CalculateText$1("gh"));
      htmlheight = rh.Bottom - rh.Top;
      txtheight = htmlheight;
      OldImgIdx = ImgIdx;
      s = pas.SysUtils.Trim(s);
      txtfloatbefore = txtfloat;
      su = HTMLDrawLine(AGraphics,{get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),true,{get: function () {
          return htmlwidth;
        }, set: function (v) {
          htmlwidth = v;
        }},{get: function () {
          return htmlheight;
        }, set: function (v) {
          htmlheight = v;
        }},{get: function () {
          return subh;
        }, set: function (v) {
          subh = v;
        }},{get: function () {
          return suph;
        }, set: function (v) {
          suph = v;
        }},{get: function () {
          return imgali;
        }, set: function (v) {
          imgali = v;
        }},{get: function () {
          return Align;
        }, set: function (v) {
          Align = v;
        }},{get: function () {
          return PIndent;
        }, set: function (v) {
          PIndent = v;
        }},XPos,YPos,{get: function () {
          return Hotspot;
        }, set: function (v) {
          Hotspot = v;
        }},{get: function () {
          return ImageHotspot;
        }, set: function (v) {
          ImageHotspot = v;
        }},ofsx,{get: function () {
          return newofsx;
        }, set: function (v) {
          newofsx = v;
        }},floatrect,{get: function () {
          return txtfloat;
        }, set: function (v) {
          txtfloat = v;
        }});
      LineCount.set(LineCount.get() + 1);
      Anchor = OldAnchor;
      LastAnchor = OldAnchorVal;
      CalcFont.AssignSource(AGraphics.FFont);
      CalcFontColor = AGraphics.FFont.FColor;
      OldCalcFont.AssignSource(OldFont);
      OldCalcFontColor = OldFontColor;
      htmlheight = htmlheight + LineSpacing;
      dr.$assign(r);
      var $tmp1 = Align;
      if ($tmp1 === pas.Classes.TAlignment.taCenter) {
        if ((r.Right - r.Left - htmlwidth) > 0) dr.Left = r.Left + ((r.Right - r.Left - htmlwidth) / 2)}
       else if ($tmp1 === pas.Classes.TAlignment.taRightJustify) if ((r.Right - htmlwidth) > r.Left) dr.Left = r.Right - htmlwidth;
      dr.Left = dr.Left + PIndent;
      dr.Right = dr.Right + PIndent;
      dr.Bottom = dr.Top + htmlheight + subh + suph;
      if (!CheckHeight) {
        OldFont.AssignSource(OldDrawFont);
        OldFontColor = OldDrawFontColor;
        AGraphics.FFont.AssignSource(DrawFont);
        FontColor = DrawFontCOlor;
        HyperLinks.set(hlcount);
        ListIndex = licount;
        ImgIdx = OldImgIdx;
        HTMLDrawLine(AGraphics,{get: function () {
            return su;
          }, set: function (v) {
            su = v;
          }},pas["WEBLib.TMSFNCTypes"].TRectF.$clone(dr),CheckHotSpot,{get: function () {
            return htmlwidth;
          }, set: function (v) {
            htmlwidth = v;
          }},{get: function () {
            return htmlheight;
          }, set: function (v) {
            htmlheight = v;
          }},{get: function () {
            return subh;
          }, set: function (v) {
            subh = v;
          }},{get: function () {
            return suph;
          }, set: function (v) {
            suph = v;
          }},{get: function () {
            return imgali;
          }, set: function (v) {
            imgali = v;
          }},{get: function () {
            return Align;
          }, set: function (v) {
            Align = v;
          }},{get: function () {
            return PIndent;
          }, set: function (v) {
            PIndent = v;
          }},XPos,YPos,{get: function () {
            return Hotspot;
          }, set: function (v) {
            Hotspot = v;
          }},{get: function () {
            return ImageHotspot;
          }, set: function (v) {
            ImageHotspot = v;
          }},ofsx,{get: function () {
            return newofsx;
          }, set: function (v) {
            newofsx = v;
          }},floatrect,{get: function () {
            return txtfloat;
          }, set: function (v) {
            txtfloat = v;
          }});
        hlcount = HyperLinks.get();
        licount = ListIndex;
        r.Left = fr.Left + floatrect.Left;
        r.Right = fr.Right - floatrect.Right;
        if (dr.Top > floatrect.Bottom) {
          floatrect.Left = 0;
          floatrect.Right = 0;
          r.Left = fr.Left;
        };
        rh.$assign(AGraphics.CalculateText$1("gh"));
        if ((Hotspot && (YPos > (dr.Bottom - imgali - (rh.Bottom - rh.Top))) && (YPos < (dr.Bottom - imgali))) || ImageHotspot) {
          Result = true;
        };
        ofsx = newofsx;
        DrawFont.AssignSource(AGraphics.FFont);
        DrawFontCOlor = FontColor;
        OldDrawFont.AssignSource(OldFont);
        OldDrawFontColor = OldFontColor;
      };
      if ((txtfloat !== TFloatStyle.fsNone) && (txtfloat !== txtfloatbefore)) {
        r.Left = floatpt.x;
        r.Top = floatpt.y;
        txtfloat = TFloatStyle.fsNone;
      } else {
        r.Top = r.Top + htmlheight + subh + suph;
        YSize.set(YSize.get() + htmlheight + subh + suph);
      };
      if (((r.Top + txtheight) > (r.Bottom + 1)) && !CheckHeight) s = "";
    };
    if (YSize.get() === 0) {
      rh.$assign(AGraphics.CalculateText$1("gh"));
      YSize.set(rh.Bottom - rh.Top);
    };
    inspoint = inspoint >>> 1;
    AGraphics.FStroke.SetColor(OldPenColor);
    AGraphics.FFill.SetColor(blnkcolor);
    AGraphics.FFont.AssignSource(OldFont);
    OldFont = rtl.freeLoc(OldFont);
    DrawFont = rtl.freeLoc(DrawFont);
    CalcFont = rtl.freeLoc(CalcFont);
    OldDrawFont = rtl.freeLoc(OldDrawFont);
    OldCalcFont = rtl.freeLoc(OldCalcFont);
    return Result;
  };
  this.HiLight = function (s, h, tag, DoCase) {
    var Result = "";
    var hs = "";
    var l = 0;
    var k = 0;
    hs = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.HTMLStrip(s);
    l = 0;
    if ((pas.System.Pos(h,s) > 0) && ((pas.System.Pos("<",hs) > 0) || (pas.System.Pos(">",hs) > 0))) {
      hs = pas.SysUtils.StringReplace(hs,"<","&lt;",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      hs = pas.SysUtils.StringReplace(hs,">","&gt;",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      s = hs;
      h = pas.SysUtils.StringReplace(h,"<","&lt;",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
      h = pas.SysUtils.StringReplace(h,">","&gt;",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    };
    k = 0;
    while ($impl.PosFrom(h,hs,l,DoCase,{get: function () {
        return k;
      }, set: function (v) {
        k = v;
      }}) > 0) {
      l = k + h.length;
      pas.System.Insert("<" + tag + ">",{get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},$impl.StripPos2HTMLPos(s,k));
      pas.System.Insert("<\/" + tag + ">",{get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},$impl.StripPos2HTMLPos(s,l));
    };
    Result = s;
    return Result;
  };
  this.UnHiLight = function (s, tag) {
    var Result = "";
    Result = "";
    tag = pas.SysUtils.UpperCase(tag);
    while (pas.System.Pos("<" + tag + ">",pas.SysUtils.UpperCase(s)) > 0) s = pas.SysUtils.StringReplace(s,"<" + tag + ">","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfIgnoreCase));
    while (pas.System.Pos("<\/" + tag + ">",pas.SysUtils.UpperCase(s)) > 0) s = pas.SysUtils.StringReplace(s,"<\/" + tag + ">","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfIgnoreCase));
    s = pas.SysUtils.StringReplace(s,"&lt;","<",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    s = pas.SysUtils.StringReplace(s,"&gt;",">",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
    Result = s;
    return Result;
  };
  this.GetControlValue = function (HTML, ControlID, ControlValue) {
    var Result = false;
    var lp = 0;
    var Tag = "";
    var CType = "";
    var CID = "";
    var CV = "";
    var CW = "";
    var CH = "";
    var CP = "";
    var CL = "";
    Result = false;
    lp = 0;
    while ($impl.VarIPos("<CONTROL ",HTML,{get: function () {
        return lp;
      }, set: function (v) {
        lp = v;
      }}) > 0) {
      pas.System.Delete({get: function () {
          return HTML;
        }, set: function (v) {
          HTML = v;
        }},1,lp);
      Tag = pas.System.Copy(HTML,1,pas.System.Pos(">",HTML));
      CType = "";
      CID = "";
      CV = "";
      CW = "";
      CH = "";
      CP = "";
      CL = "";
      $mod.ParseControl(Tag,{get: function () {
          return CType;
        }, set: function (v) {
          CType = v;
        }},{get: function () {
          return CID;
        }, set: function (v) {
          CID = v;
        }},{get: function () {
          return CV;
        }, set: function (v) {
          CV = v;
        }},{get: function () {
          return CW;
        }, set: function (v) {
          CW = v;
        }},{get: function () {
          return CH;
        }, set: function (v) {
          CH = v;
        }},{get: function () {
          return CP;
        }, set: function (v) {
          CP = v;
        }},{get: function () {
          return CL;
        }, set: function (v) {
          CL = v;
        }});
      if (ControlID === CID) {
        ControlValue.set(CV);
        Result = true;
        return Result;
      };
    };
    return Result;
  };
  this.GetControlProp = function (HTML, ControlID) {
    var Result = "";
    var lp = 0;
    var Tag = "";
    var CType = "";
    var CID = "";
    var CV = "";
    var CW = "";
    var CH = "";
    var CP = "";
    var CL = "";
    Result = "";
    lp = 0;
    while ($impl.VarIPos("<CONTROL ",HTML,{get: function () {
        return lp;
      }, set: function (v) {
        lp = v;
      }}) > 0) {
      pas.System.Delete({get: function () {
          return HTML;
        }, set: function (v) {
          HTML = v;
        }},1,lp);
      Tag = pas.System.Copy(HTML,1,pas.System.Pos(">",HTML));
      CType = "";
      CID = "";
      CV = "";
      CW = "";
      CH = "";
      CP = "";
      CL = "";
      $mod.ParseControl(Tag,{get: function () {
          return CType;
        }, set: function (v) {
          CType = v;
        }},{get: function () {
          return CID;
        }, set: function (v) {
          CID = v;
        }},{get: function () {
          return CV;
        }, set: function (v) {
          CV = v;
        }},{get: function () {
          return CW;
        }, set: function (v) {
          CW = v;
        }},{get: function () {
          return CH;
        }, set: function (v) {
          CH = v;
        }},{get: function () {
          return CP;
        }, set: function (v) {
          CP = v;
        }},{get: function () {
          return CL;
        }, set: function (v) {
          CL = v;
        }});
      if (ControlID === CID) {
        Result = CP;
        return Result;
      };
    };
    return Result;
  };
  this.GetControlMaxLen = function (HTML, ControlID) {
    var Result = 0;
    var lp = 0;
    var e = 0;
    var Tag = "";
    var CType = "";
    var CID = "";
    var CV = "";
    var CW = "";
    var CH = "";
    var CP = "";
    var CL = "";
    Result = 0;
    lp = 0;
    e = 0;
    while ($impl.VarIPos("<CONTROL ",HTML,{get: function () {
        return lp;
      }, set: function (v) {
        lp = v;
      }}) > 0) {
      pas.System.Delete({get: function () {
          return HTML;
        }, set: function (v) {
          HTML = v;
        }},1,lp);
      Tag = pas.System.Copy(HTML,1,pas.System.Pos(">",HTML));
      CType = "";
      CID = "";
      CV = "";
      CW = "";
      CH = "";
      CP = "";
      CL = "";
      $mod.ParseControl(Tag,{get: function () {
          return CType;
        }, set: function (v) {
          CType = v;
        }},{get: function () {
          return CID;
        }, set: function (v) {
          CID = v;
        }},{get: function () {
          return CV;
        }, set: function (v) {
          CV = v;
        }},{get: function () {
          return CW;
        }, set: function (v) {
          CW = v;
        }},{get: function () {
          return CH;
        }, set: function (v) {
          CH = v;
        }},{get: function () {
          return CP;
        }, set: function (v) {
          CP = v;
        }},{get: function () {
          return CL;
        }, set: function (v) {
          CL = v;
        }});
      if (ControlID === CID) {
        pas.System.val$6(CL,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }},{get: function () {
            return e;
          }, set: function (v) {
            e = v;
          }});
        return Result;
      };
    };
    return Result;
  };
  this.SetControlValue = function (HTML, ControlID, ControlValue) {
    var Result = false;
    var lp = 0;
    var Tag = "";
    var Temp = "";
    var CType = "";
    var CID = "";
    var CV = "";
    var CW = "";
    var CH = "";
    var CP = "";
    var CL = "";
    Result = false;
    Temp = "";
    ControlValue = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.FixMarkup(ControlValue,true);
    lp = 0;
    while ($impl.VarIPos("<CONTROL ",HTML.get(),{get: function () {
        return lp;
      }, set: function (v) {
        lp = v;
      }}) > 0) {
      Temp = Temp + pas.System.Copy(HTML.get(),1,lp);
      pas.System.Delete(HTML,1,lp);
      Tag = pas.System.Copy(HTML.get(),1,pas.System.Pos(">",HTML.get()));
      CType = "";
      CID = "";
      CV = "";
      CW = "";
      CH = "";
      CP = "";
      CL = "";
      $mod.ParseControl(Tag,{get: function () {
          return CType;
        }, set: function (v) {
          CType = v;
        }},{get: function () {
          return CID;
        }, set: function (v) {
          CID = v;
        }},{get: function () {
          return CV;
        }, set: function (v) {
          CV = v;
        }},{get: function () {
          return CW;
        }, set: function (v) {
          CW = v;
        }},{get: function () {
          return CH;
        }, set: function (v) {
          CH = v;
        }},{get: function () {
          return CP;
        }, set: function (v) {
          CP = v;
        }},{get: function () {
          return CL;
        }, set: function (v) {
          CL = v;
        }});
      if (ControlID === CID) {
        Temp = Temp + "CONTROL ID=" + $mod.TMSFNCHTMLENGINE_ATTR_DELIM + ControlID + $mod.TMSFNCHTMLENGINE_ATTR_DELIM + " VALUE=" + $mod.TMSFNCHTMLENGINE_ATTR_DELIM + ControlValue + $mod.TMSFNCHTMLENGINE_ATTR_DELIM + " WIDTH=" + $mod.TMSFNCHTMLENGINE_ATTR_DELIM + CW + $mod.TMSFNCHTMLENGINE_ATTR_DELIM + " TYPE=" + $mod.TMSFNCHTMLENGINE_ATTR_DELIM + CType + $mod.TMSFNCHTMLENGINE_ATTR_DELIM;
        if (CP !== "") Temp = Temp + " PROP=" + $mod.TMSFNCHTMLENGINE_ATTR_DELIM + pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.FixMarkup(CP,true) + $mod.TMSFNCHTMLENGINE_ATTR_DELIM;
        if (CL !== "") Temp = Temp + " MAXLEN=" + $mod.TMSFNCHTMLENGINE_ATTR_DELIM + CL + $mod.TMSFNCHTMLENGINE_ATTR_DELIM;
        Temp = Temp + ">";
        HTML.set(Temp + pas.System.Copy(HTML.get(),pas.System.Pos(">",HTML.get()) + 1,HTML.get().length));
        Result = true;
        return Result;
      };
    };
    return Result;
  };
  this.ClearRadioControls = function (HTML) {
    var Result = "";
    var lp = 0;
    var Tag = "";
    var CType = "";
    var CID = "";
    var CV = "";
    var CW = "";
    var CH = "";
    var CP = "";
    var CL = "";
    var sl = null;
    var s = "";
    Result = "";
    s = HTML;
    sl = pas.Classes.TStringList.$create("Create$1");
    lp = 0;
    while ($impl.VarIPos("<CONTROL ",HTML,{get: function () {
        return lp;
      }, set: function (v) {
        lp = v;
      }}) > 0) {
      pas.System.Delete({get: function () {
          return HTML;
        }, set: function (v) {
          HTML = v;
        }},1,lp);
      Tag = pas.System.Copy(HTML,1,pas.System.Pos(">",HTML));
      CType = "";
      CID = "";
      CV = "";
      CW = "";
      CH = "";
      CP = "";
      CL = "";
      $mod.ParseControl(Tag,{get: function () {
          return CType;
        }, set: function (v) {
          CType = v;
        }},{get: function () {
          return CID;
        }, set: function (v) {
          CID = v;
        }},{get: function () {
          return CV;
        }, set: function (v) {
          CV = v;
        }},{get: function () {
          return CW;
        }, set: function (v) {
          CW = v;
        }},{get: function () {
          return CH;
        }, set: function (v) {
          CH = v;
        }},{get: function () {
          return CP;
        }, set: function (v) {
          CP = v;
        }},{get: function () {
          return CL;
        }, set: function (v) {
          CL = v;
        }});
      if (CType === "RADIO") sl.Add(CID);
    };
    for (var $l1 = 0, $end2 = sl.GetCount() - 1; $l1 <= $end2; $l1++) {
      lp = $l1;
      $mod.SetControlValue({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},sl.Get(lp),"FALSE");
    };
    sl = rtl.freeLoc(sl);
    Result = s;
    return Result;
  };
  this.GetNextControlID = function (HTML, ControlID) {
    var Result = "";
    var lp = 0;
    var Tag = "";
    var CType = "";
    var CID = "";
    var CV = "";
    var CW = "";
    var CH = "";
    var CP = "";
    var CL = "";
    var flg = false;
    Result = "";
    flg = ControlID === "";
    lp = 0;
    while ($impl.VarIPos("<CONTROL ",HTML,{get: function () {
        return lp;
      }, set: function (v) {
        lp = v;
      }}) > 0) {
      pas.System.Delete({get: function () {
          return HTML;
        }, set: function (v) {
          HTML = v;
        }},1,lp);
      Tag = pas.System.Copy(HTML,1,pas.System.Pos(">",HTML));
      CType = "";
      CID = "";
      CV = "";
      CW = "";
      CH = "";
      CP = "";
      CL = "";
      $mod.ParseControl(Tag,{get: function () {
          return CType;
        }, set: function (v) {
          CType = v;
        }},{get: function () {
          return CID;
        }, set: function (v) {
          CID = v;
        }},{get: function () {
          return CV;
        }, set: function (v) {
          CV = v;
        }},{get: function () {
          return CW;
        }, set: function (v) {
          CW = v;
        }},{get: function () {
          return CH;
        }, set: function (v) {
          CH = v;
        }},{get: function () {
          return CP;
        }, set: function (v) {
          CP = v;
        }},{get: function () {
          return CL;
        }, set: function (v) {
          CL = v;
        }});
      if (flg && (CType !== "BUTTON") && (CType !== "CHECK") && (CType !== "RADIO")) {
        Result = CID;
        return Result;
      };
      if (ControlID === CID) flg = true;
    };
    return Result;
  };
  this.HasHTMLControl = function (HTML) {
    var Result = false;
    var lp = 0;
    lp = 0;
    Result = $impl.VarIPos("<CONTROL",HTML,{get: function () {
        return lp;
      }, set: function (v) {
        lp = v;
      }}) > 0;
    return Result;
  };
  this.ParseControl = function (Tag, ControlType, ControlID, ControlValue, ControlWidth, ControlHeight, ControlProp, ControlLen) {
    var Prop = "";
    var vp = 0;
    ControlType.set("");
    ControlWidth.set("");
    ControlHeight.set("");
    ControlValue.set("");
    ControlID.set("");
    ControlProp.set("");
    ControlLen.set("");
    vp = 0;
    if ($impl.VarIPos("TYPE=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlType.set(pas.SysUtils.UpperCase(Prop));
    };
    if ($impl.VarIPos("WIDTH=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlWidth.set(Prop);
    };
    if ($impl.VarIPos("HEIGHT=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlHeight.set(Prop);
    };
    if ($impl.VarIPos("ID=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlID.set(Prop);
    };
    if ($impl.VarIPos("VALUE=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlValue.set(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.UnFixMarkup(Prop,true));
    };
    if ($impl.VarIPos("PROP=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlProp.set(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.UnFixMarkup(Prop,true));
    };
    if ($impl.VarIPos("MAXLEN=",Tag,{get: function () {
        return vp;
      }, set: function (v) {
        vp = v;
      }}) > 0) {
      Prop = pas.System.Copy(Tag,vp + 1,Tag.length);
      Prop = pas.System.Copy(Prop,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) + 1,Prop.length);
      Prop = pas.System.Copy(Prop,1,pas.System.Pos($mod.TMSFNCHTMLENGINE_ATTR_DELIM,Prop) - 1);
      ControlLen.set(Prop);
    };
  };
},["SysUtils","WEBLib.TMSFNCUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.VarIPos = function (su, s, Res) {
    var Result = 0;
    Res.set(pas.System.Pos(su,pas.SysUtils.UpperCase(s)));
    Result = Res.get();
    return Result;
  };
  $impl.StripPos2HTMLPos = function (s, i) {
    var Result = 0;
    var j = 0;
    var k = 0;
    var Skip = false;
    Result = 0;
    k = 1;
    Skip = false;
    for (var $l1 = 1, $end2 = s.length; $l1 <= $end2; $l1++) {
      j = $l1;
      if (s.charAt(j - 1) === "<") Skip = true;
      if (k === i) {
        Result = j;
        return Result;
      };
      if (!Skip) k += 1;
      if (s.charAt(j - 1) === ">") Skip = false;
    };
    if (k === i) {
      Result = s.length + 1;
    };
    return Result;
  };
  $impl.PosFrom = function (su, s, h, DoCase, Res) {
    var Result = 0;
    var r = 0;
    Result = 0;
    Res.set(0);
    if (h > 0) pas.System.Delete({get: function () {
        return s;
      }, set: function (v) {
        s = v;
      }},1,h);
    if (DoCase) {
      r = pas.System.Pos(su,s)}
     else r = pas.System.Pos(pas["WEBLib.TMSFNCTypes"].AnsiUpperCase(su),pas["WEBLib.TMSFNCTypes"].AnsiUpperCase(s));
    if (r > 0) {
      Res.set(h + r);
      Result = Res.get();
    };
    return Result;
  };
  $impl.IStrToInt = function (s) {
    var Result = 0;
    var Err = 0;
    var Res = 0;
    pas.System.val$6(s,{get: function () {
        return Res;
      }, set: function (v) {
        Res = v;
      }},{get: function () {
        return Err;
      }, set: function (v) {
        Err = v;
      }});
    Result = Res;
    return Result;
  };
  $impl.DBTagStrip = function (s) {
    var Result = "";
    var i = 0;
    var j = 0;
    i = pas.System.Pos("<#",s);
    if (i > 0) {
      Result = pas.System.Copy(s,1,i - 1);
      pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,i);
      j = pas.System.Pos(">",s);
      if (j > 0) pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},j,1);
      Result = Result + s;
    } else Result = s;
    return Result;
  };
  $impl.CRLFStrip = function (s, Break) {
    var Result = "";
    var i = 0;
    Result = "";
    for (var $l1 = 1, $end2 = s.length; $l1 <= $end2; $l1++) {
      i = $l1;
      if (!((s.charAt(i - 1) === "\r") || (s.charAt(i - 1) === "\n"))) {
        Result = Result + s.charAt(i - 1)}
       else if ((s.charAt(i - 1) === "\r") && Break) Result = Result + "<BR>";
    };
    return Result;
  };
});
rtl.module("WEBLib.TMSFNCGraphics.General",["System","Classes","WEBLib.TMSFNCGraphicsTypes","Types","WEBLib.Graphics","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCTypes"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TTMSFNCGraphicsContextGeneral",pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext.$init.call(this);
      this.FShowAcceleratorChar = false;
      this.FOldPenStyle = 0;
      this.FOldPenWidth = 0;
    };
    this.GetNativeCanvas = function () {
      var Result = null;
      Result = this.GetCanvas();
      return Result;
    };
    this.DrawRotatedText = function (ACanvas, ARect, AText, AAngle, AHorizontalAlign, AVerticalAlign) {
      var tw = 0.0;
      var th = 0.0;
      var so = 0;
      var s = "";
      var xs = 0.0;
      var ys = 0.0;
      var angle = 0.0;
      var ha = 0;
      var va = 0;
      var r = pas["WEBLib.Graphics"].TCanvasRectF.$new();
      s = AText;
      angle = -10 * AAngle;
      xs = ARect.Left;
      ys = ARect.Top;
      tw = ACanvas.TextWidth(s);
      th = ACanvas.TextHeight(s);
      var $tmp1 = AHorizontalAlign;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
        ha = pas.Classes.TAlignment.taLeftJustify}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
        ha = pas.Classes.TAlignment.taCenter}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) ha = pas.Classes.TAlignment.taRightJustify;
      var $tmp2 = AVerticalAlign;
      if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
        va = pas["WEBLib.Graphics"].TVerticalAlignment.taVerticalCenter}
       else if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
        va = pas["WEBLib.Graphics"].TVerticalAlignment.taAlignTop}
       else if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) va = pas["WEBLib.Graphics"].TVerticalAlignment.taAlignBottom;
      r.$assign(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      ACanvas.TextRect$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(r),s,false,false,ha,va);
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.GetFillColor = function () {
      var Result = 0;
      Result = this.GetCanvas().FBrush.FColor;
      return Result;
    };
    this.CalculateText = function (AText, ARect, AWordWrapping) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.Graphics"].TCanvasRectF.$new();
      r.$assign(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      r.$assign(this.GetCanvas().TextRect$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(r),AText,AWordWrapping,true,pas.Classes.TAlignment.taLeftJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignTop));
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Right,r.Bottom));
      return Result;
    };
    this.SetTextAngle = function (ARect, AAngle) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var ar = 0.0;
      var cx = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      Result.$assign(ARect);
      if (AAngle !== 0) {
        ar = pas.Math.DegToRad(AAngle);
        cx.X = Result.Left + ((Result.Right - Result.Left) / 2);
        cx.Y = Result.Top + ((Result.Bottom - Result.Top) / 2);
        this.GetCanvas().Transform(Math.cos(ar),Math.sin(ar),-Math.sin(ar),Math.cos(ar),cx.X,cx.Y);
        if ((Result.Right - Result.Left) < (Result.Bottom - Result.Top)) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(-(Result.Bottom - Result.Top) / 2,-(Result.Right - Result.Left) / 2,(Result.Bottom - Result.Top) / 2,(Result.Right - Result.Left) / 2))}
         else Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(-(Result.Right - Result.Left) / 2,-(Result.Bottom - Result.Top) / 2,(Result.Right - Result.Left) / 2,(Result.Bottom - Result.Top) / 2));
      };
      return Result;
    };
    this.CreatePath = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.GetMatrix = function () {
      var Result = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsMatrix.$new();
      Result.$assign(pas["WEBLib.TMSFNCGraphicsTypes"].MatrixIdentity());
      return Result;
    };
    this.Render = function () {
    };
    this.PathOpen = function (APath) {
    };
    this.PathMoveTo = function (APath, APoint) {
      this.GetCanvas().PathMoveTo$1(APoint.X,APoint.Y);
    };
    this.PathLineTo = function (APath, APoint) {
      this.GetCanvas().PathLineTo$1(APoint.X,APoint.Y);
    };
    this.PathClose = function (APath) {
      this.GetCanvas().PathClose();
    };
    this.ResetTransform = function () {
      this.GetCanvas().SetTransform(1,0,0,1,0,0);
    };
    this.ResetClip = function () {
      this.RestoreState(null);
    };
    this.ScaleTransform = function (AX, AY) {
      var m = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsMatrix.$new();
      m.$assign(pas["WEBLib.TMSFNCGraphicsTypes"].MatrixCreateScaling(AX,AY));
      this.GetCanvas().Transform(m.m11,m.m12,m.m21,m.m22,m.m31,m.m32);
    };
    this.RotateTransform = function (AAngle) {
      var m = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsMatrix.$new();
      m.$assign(pas["WEBLib.TMSFNCGraphicsTypes"].MatrixCreateRotation(pas.Math.DegToRad(AAngle)));
      this.GetCanvas().Transform(m.m11,m.m12,m.m21,m.m22,m.m31,m.m32);
    };
    this.TranslateTransform = function (AX, AY) {
      var m = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsMatrix.$new();
      m.$assign(pas["WEBLib.TMSFNCGraphicsTypes"].MatrixCreateTranslation(AX,AY));
      this.GetCanvas().Transform(m.m11,m.m12,m.m21,m.m22,m.m31,m.m32);
    };
    this.SetTextQuality = function (ATextQuality) {
    };
    this.SetAntiAliasing = function (AAntiAliasing) {
    };
    this.SetShowAcceleratorChar = function (AShowAcceleratorChar) {
      this.FShowAcceleratorChar = AShowAcceleratorChar;
    };
    this.SetSize = function (AWidth, AHeight) {
    };
    this.ResetTextAngle = function (AAngle) {
      if (AAngle !== 0) this.GetCanvas().SetTransform(1,0,0,1,0,0);
    };
    this.BeginScene = function () {
      if (this.GetCanvas() != null) {
        this.GetCanvas().BeginScene();
        this.GetCanvas().Clear();
      };
    };
    this.EndScene = function () {
      this.GetCanvas().EndScene();
    };
    this.StartSpecialPen = function () {
      this.FOldPenStyle = this.GetCanvas().FPen.FStyle;
      this.FOldPenWidth = this.GetCanvas().FPen.FWidth;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDot;
      this.GetCanvas().FPen.FWidth = 1;
    };
    this.StopSpecialPen = function () {
      this.GetCanvas().FPen.FStyle = this.FOldPenStyle;
      this.GetCanvas().FPen.FWidth = this.FOldPenWidth;
    };
    this.RestoreState = function (AState) {
      if (AState != null) AState.FSaveDC = 0;
      this.GetCanvas().Restore();
      this.GetCanvas().Refresh();
    };
    this.SaveState = function (AState) {
      this.GetCanvas().Refresh();
      this.GetCanvas().Save();
    };
    this.SetMatrix = function (AMatrix) {
    };
    this.SetScale = function (AScale) {
    };
    this.SetFontSize = function (ASize) {
      this.GetCanvas().FFont.SetSize(ASize);
    };
    this.SetFontColor = function (AColor) {
      this.GetCanvas().FFont.SetColor(AColor);
    };
    this.SetFontName = function (AName) {
      this.GetCanvas().FFont.SetName(AName);
    };
    this.SetFont = function (AFont) {
      this.GetCanvas().FFont.Assign(AFont);
    };
    this.SetFontStyles = function (AStyle) {
      this.GetCanvas().FFont.SetStyle(rtl.refSet(AStyle));
    };
    this.SetFill = function (AFill) {
      this.GetCanvas().FBrush.FColor = AFill.FColor;
      var $tmp1 = AFill.FKind;
      if (($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) || ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient)) {
        this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsSolid}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone) this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
    };
    this.SetFillKind = function (AKind) {
      var $tmp1 = AKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone) {
        this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear}
       else if (($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) || ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient)) this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsSolid;
    };
    this.SetFillColor = function (AColor) {
      this.GetCanvas().FBrush.FColor = AColor;
    };
    this.SetStroke = function (AStroke) {
      this.GetCanvas().FPen.SetColor(AStroke.FColor);
      this.GetCanvas().FPen.FWidth = Math.round(AStroke.FWidth);
      var $tmp1 = AStroke.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psSolid}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDash) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDash}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDot) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDot}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDashDot) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDashDot}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDashDotDot) this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDashDotDot;
    };
    this.SetStrokeKind = function (AKind) {
      var $tmp1 = AKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psSolid}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDash) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDash}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDot) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDot}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDashDot) {
        this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDashDot}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDashDotDot) this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psDashDotDot;
    };
    this.SetStrokeColor = function (AColor) {
      this.GetCanvas().FPen.SetColor(AColor);
    };
    this.SetStrokeWidth = function (AWidth) {
      this.GetCanvas().FPen.FWidth = Math.round(AWidth);
    };
    this.DrawLine = function (AStroke, AFromPoint, AToPoint, AModifyPointModeFrom, AModifyPointModeTo) {
      this.GetCanvas().MoveTo$1(AFromPoint.X,AFromPoint.Y);
      this.GetCanvas().LineTo$1(AToPoint.X,AToPoint.Y);
    };
    this.DrawPolygon = function (AStroke, APolygon) {
      var pts = [];
      var I = 0;
      var bs = 0;
      var c = 0;
      pts = rtl.arraySetLength(pts,pas["WEBLib.Graphics"].TCanvasPointF,rtl.length(APolygon));
      for (var $l1 = 0, $end2 = rtl.length(APolygon) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        pts[I].$assign(pas["WEBLib.Graphics"].CreateCanvasPointF(APolygon[I].X,APolygon[I].Y));
      };
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      this.GetCanvas().Polygon$1(pts);
      this.GetCanvas().FBrush.FStyle = bs;
      this.GetCanvas().FBrush.FColor = c;
    };
    this.FillPolygon = function (AFill, APolygon) {
      var pts = [];
      var I = 0;
      var ps = 0;
      pts = rtl.arraySetLength(pts,pas["WEBLib.Graphics"].TCanvasPointF,rtl.length(APolygon));
      for (var $l1 = 0, $end2 = rtl.length(APolygon) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        pts[I].$assign(pas["WEBLib.Graphics"].CreateCanvasPointF(APolygon[I].X,APolygon[I].Y));
      };
      ps = this.GetCanvas().FPen.FStyle;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear;
      this.GetCanvas().Polygon$1(pts);
      this.GetCanvas().FPen.FStyle = ps;
    };
    this.DrawPolyline = function (AStroke, APolyline) {
      var I = 0;
      var pts = [];
      var bs = 0;
      var c = 0;
      pts = rtl.arraySetLength(pts,pas["WEBLib.Graphics"].TCanvasPointF,rtl.length(APolyline));
      for (var $l1 = 0, $end2 = rtl.length(APolyline) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        pts[I].$assign(pas["WEBLib.Graphics"].CreateCanvasPointF(APolyline[I].X,APolyline[I].Y));
      };
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      this.GetCanvas().Polyline$1(pts);
      this.GetCanvas().FBrush.FStyle = bs;
      this.GetCanvas().FBrush.FColor = c;
    };
    this.FillPolyline = function (AFill, APolyline) {
      var pts = [];
      var I = 0;
      var ps = 0;
      pts = rtl.arraySetLength(pts,pas["WEBLib.Graphics"].TCanvasPointF,rtl.length(APolyline));
      for (var $l1 = 0, $end2 = rtl.length(APolyline) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        pts[I].$assign(pas["WEBLib.Graphics"].CreateCanvasPointF(APolyline[I].X,APolyline[I].Y));
      };
      ps = this.GetCanvas().FPen.FStyle;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear;
      this.GetCanvas().Polyline$1(pts);
      this.GetCanvas().FPen.FStyle = ps;
    };
    this.FillArc = function (AFill, ACenter, ARadius, AStartAngle, ASweepAngle) {
      var ps = 0;
      ps = this.GetCanvas().FPen.FStyle;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear;
      this.GetCanvas().AngleArc$1(ACenter.X,ACenter.Y,ARadius.X,pas.Math.DegToRad(AStartAngle),pas.Math.DegToRad(ASweepAngle));
      this.GetCanvas().FPen.FStyle = ps;
    };
    this.DrawArc = function (AStroke, ACenter, ARadius, AStartAngle, ASweepAngle) {
      var bs = 0;
      var c = 0;
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      this.GetCanvas().AngleArc$1(ACenter.X,ACenter.Y,ARadius.X,pas.Math.DegToRad(AStartAngle),pas.Math.DegToRad(ASweepAngle));
      this.GetCanvas().FBrush.FStyle = bs;
      this.GetCanvas().FBrush.FColor = c;
    };
    this.FillRect = function (AFill, ARect, AModifyRectMode) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var c = 0;
      var bs = 0;
      var ps = 0;
      ARect.$assign(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      c = -1;
      bs = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      if (AFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        if ((AFill.FColor !== -1) && (AFill.FColorTo !== -1)) {
          if ((AFill.FColorMirror !== -1) && (AFill.FColorMirrorTo !== -1)) {
            var $tmp1 = AFill.FOrientation;
            if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal) {
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Left + ((r.Right - r.Left) / 2),r.Bottom)),0,{},true);
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColorMirror,AFill.FColorMirrorTo,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + ((r.Right - r.Left) / 2),r.Top,r.Right,r.Bottom)),0,{},true);
            } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoVertical) {
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Right,r.Top + ((r.Bottom - r.Top) / 2))),0,{},false);
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColorMirror,AFill.FColorMirrorTo,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top + ((r.Bottom - r.Top) / 2),r.Right,r.Bottom)),0,{},false);
            };
          } else pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),0,{},AFill.FOrientation === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal);
        };
        c = this.GetCanvas().FBrush.FColor;
        bs = this.GetCanvas().FBrush.FStyle;
        this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      };
      ps = this.GetCanvas().FPen.FStyle;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear;
      if ((AFill.FColor !== -1) && (AFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid)) {
        this.GetCanvas().Rectangle$3(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom));
      };
      this.GetCanvas().FPen.FStyle = ps;
      if (AFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        this.GetCanvas().FBrush.FColor = c;
        this.GetCanvas().FBrush.FStyle = bs;
      };
    };
    this.DrawRect = function (AStroke, ARect, ASides, AModifyRectMode) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      ARect.$assign(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r.$assign(ARect);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsTop in ASides) this.DrawLine(AStroke,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsLeft in ASides) this.DrawLine(AStroke,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsBottom in ASides) this.DrawLine(AStroke,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsRight in ASides) this.DrawLine(AStroke,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
    };
    this.FillRoundRect = function (AFill, ARect, ARounding, ACorners, AModifyRectMode) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var rg = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var c = {};
      ARect.$assign(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      rg.$assign(r);
      rg.Bottom = rg.Bottom - 1;
      rg.Right = rg.Right - 1;
      if (AFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        if ((AFill.FColor !== -1) && (AFill.FColorTo !== -1)) {
          if ((AFill.FColorMirror !== -1) && (AFill.FColorMirrorTo !== -1)) {
            var $tmp1 = AFill.FOrientation;
            if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal) {
              c = {};
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft));
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft));
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(rg.Left,rg.Top,rg.Left + ((rg.Right - rg.Left) / 2),r.Bottom)),ARounding,rtl.refSet(c),true);
              c = {};
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight));
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight));
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColorMirror,AFill.FColorMirrorTo,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(rg.Left + ((rg.Right - r.Left) / 2),rg.Top,rg.Right,rg.Bottom)),ARounding,rtl.refSet(c),true);
            } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoVertical) {
              c = {};
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft));
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight));
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(rg.Left,rg.Top,rg.Right,rg.Top + ((rg.Bottom - rg.Top) / 2))),ARounding,rtl.refSet(c),false);
              c = {};
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft));
              if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) c = rtl.unionSet(c,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight));
              pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColorMirror,AFill.FColorMirrorTo,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(rg.Left,rg.Top + ((rg.Bottom - rg.Top) / 2),rg.Right,rg.Bottom)),ARounding,rtl.refSet(c),false);
            };
          } else pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColorTo,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(rg),ARounding,rtl.refSet(ACorners),AFill.FOrientation === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal);
        };
      } else if ((AFill.FColor !== -1) && (AFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid)) pas["WEBLib.TMSFNCGraphicsTypes"].DrawGradient(this.GetCanvas(),AFill.FColor,AFill.FColor,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),ARounding,rtl.refSet(ACorners),AFill.FOrientation === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal);
    };
    this.DrawRoundRect = function (AStroke, ARect, ARounding, ACorners, AModifyRectMode) {
      var $Self = this;
      var r = pas["WEBLib.Graphics"].TCanvasRectF.$new();
      var rg = pas["WEBLib.Graphics"].TCanvasRectF.$new();
      var rc = 0.0;
      var cl = 0;
      var bs = 0;
      function CanvasArc(ACanvas, Center, Radius, StartAngle, SweepAngle) {
        ACanvas.AngleArc$1(Center.X,Center.Y,Radius.X,pas.Math.DegToRad(StartAngle),pas.Math.DegToRad(SweepAngle));
      };
      ARect.$assign(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r.$assign(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      rg.$assign(r);
      rg.Bottom = rg.Bottom - 1;
      rg.Right = rg.Right - 1;
      cl = $Self.GetCanvas().FBrush.FColor;
      bs = $Self.GetCanvas().FBrush.FStyle;
      $Self.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      rc = Math.round(ARounding);
      if (rtl.eqSet(ACorners,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight))) {
        $Self.GetCanvas().RoundRect$3(r,rc * 2,rc * 2)}
       else if (rtl.eqSet(ACorners,{})) {
        $Self.GetCanvas().Rectangle$3(r)}
       else {
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          $Self.GetCanvas().MoveTo$1(r.Left + rc,r.Bottom);
          CanvasArc($Self.GetCanvas(),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom - rc)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(rc,rc)),-270,90);
          $Self.GetCanvas().MoveTo$1(r.Left,r.Bottom - rc);
        } else {
          $Self.GetCanvas().MoveTo$1(r.Left,r.Bottom);
        };
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) {
          $Self.GetCanvas().LineTo$1(r.Left,r.Top + rc);
          CanvasArc($Self.GetCanvas(),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top + rc)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(rc,rc)),-180,90);
          $Self.GetCanvas().MoveTo$1(r.Left + rc,r.Top);
        } else $Self.GetCanvas().LineTo$1(r.Left,r.Top);
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) {
          $Self.GetCanvas().LineTo$1(r.Right - rc,r.Top);
          CanvasArc($Self.GetCanvas(),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top + rc)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(rc,rc)),-90,90);
          $Self.GetCanvas().MoveTo$1(r.Right,r.Top + rc);
        } else $Self.GetCanvas().LineTo$1(r.Right,r.Top);
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) {
          $Self.GetCanvas().LineTo$1(r.Right,r.Bottom - rc);
          CanvasArc($Self.GetCanvas(),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom - rc)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(rc,rc)),0,90);
          $Self.GetCanvas().MoveTo$1(r.Right - rc,r.Bottom);
        } else {
          $Self.GetCanvas().LineTo$1(r.Right,r.Bottom);
        };
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          $Self.GetCanvas().LineTo$1(r.Left + rc,r.Bottom);
        } else $Self.GetCanvas().LineTo$1(r.Left,r.Bottom);
      };
      $Self.GetCanvas().FBrush.FColor = cl;
      $Self.GetCanvas().FBrush.FStyle = bs;
    };
    this.FillEllipse = function (AFill, ARect, AModifyRectMode) {
      var r = pas["WEBLib.Graphics"].TCanvasRectF.$new();
      var ps = 0;
      ARect.$assign(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r.$assign(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      ps = this.GetCanvas().FPen.FStyle;
      this.GetCanvas().FPen.FStyle = pas["WEBLib.Graphics"].TPenStyle.psClear;
      this.GetCanvas().Ellipse$3(r);
      this.GetCanvas().FPen.FStyle = ps;
    };
    this.DrawEllipse = function (AStroke, ARect, AModifyRectMode) {
      var r = pas["WEBLib.Graphics"].TCanvasRectF.$new();
      var bs = 0;
      var c = 0;
      ARect.$assign(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r.$assign(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      this.GetCanvas().Ellipse$3(r);
      this.GetCanvas().FBrush.FStyle = bs;
      this.GetCanvas().FBrush.FColor = c;
    };
    this.DrawBitmap = function (ABitmap, ASrcRect, ADstRect, AOpacity) {
      this.GetCanvas().StretchDraw$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(pas["WEBLib.Graphics"].CreateCanvasRectF(ADstRect.Left,ADstRect.Top,ADstRect.Right,ADstRect.Bottom)),ABitmap);
    };
    this.ClipRect = function (ARect) {
      this.GetCanvas().SetClipRect(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
    };
    this.ClipPath = function (APath) {
      if (APath != null) {
        this.GetCanvas().PathBegin();
        this.ConvertToPath(APath,0.25);
        this.GetCanvas().Clip();
      };
    };
    this.DrawFocusPath = function (AStroke, APath, AColor) {
      var bs = 0;
      var c = 0;
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      this.GetCanvas().FPen.SetColor(AColor);
      this.StartSpecialPen();
      this.DrawPath(AStroke,APath,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon);
      this.StopSpecialPen();
      this.GetCanvas().FBrush.FColor = c;
      this.GetCanvas().FBrush.FStyle = bs;
    };
    this.DrawFocusRectangle = function (AStroke, ARect, AColor, AModifyRectMode) {
      var r = pas["WEBLib.Graphics"].TCanvasRectF.$new();
      var c = 0;
      var bs = 0;
      ARect.$assign(pas["WEBLib.TMSFNCGraphicsTypes"].ModifyRect(ARect,AModifyRectMode));
      r.$assign(pas["WEBLib.Graphics"].CreateCanvasRectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      this.GetCanvas().FPen.SetColor(AColor);
      this.StartSpecialPen();
      this.GetCanvas().Rectangle$3(r);
      this.StopSpecialPen();
      this.GetCanvas().FBrush.FColor = c;
      this.GetCanvas().FBrush.FStyle = bs;
    };
    this.DrawText = function (AText, ARect, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle) {
      var rcalc = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var rh = 0;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var st = null;
      var c = 0;
      var bs = 0;
      c = this.GetCanvas().FBrush.FColor;
      bs = this.GetCanvas().FBrush.FStyle;
      this.GetCanvas().FBrush.FStyle = pas["WEBLib.Graphics"].TBrushStyle.bsClear;
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom));
      if (AWordWrapping) {
        var $tmp1 = AVerticalAlign;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
          rcalc.$assign(this.CalculateText(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AWordWrapping));
          rh = Math.round(rcalc.Bottom - rcalc.Top);
          r.Top = r.Top + Math.max(0,(r.Bottom - r.Top - rh) / 2);
          r.Bottom = Math.max(0,Math.min(Math.round(ARect.Bottom),r.Top + rh));
        } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) {
          rcalc.$assign(this.CalculateText(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AWordWrapping));
          rh = Math.round(rcalc.Bottom - rcalc.Top);
          r.Top = (r.Top + r.Bottom) - rh;
          r.Bottom = r.Top + rh;
        };
      };
      if (AAngle !== 0) {
        this.DrawRotatedText(this.GetCanvas(),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),AText,AAngle,AHorizontalAlign,AVerticalAlign)}
       else {
        st = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSaveState.$create("Create$1");
        try {
          this.SaveState(st);
          this.ClipRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
          var $tmp2 = AHorizontalAlign;
          if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
            var $tmp3 = AVerticalAlign;
            if ($tmp3 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
              this.GetCanvas().TextRect$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taLeftJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignTop)}
             else if ($tmp3 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
              this.GetCanvas().TextRect$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taLeftJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taVerticalCenter)}
             else if ($tmp3 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) this.GetCanvas().TextRect$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taLeftJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignBottom);
          } else if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
            var $tmp4 = AVerticalAlign;
            if ($tmp4 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
              this.GetCanvas().TextRect$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taCenter,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignTop)}
             else if ($tmp4 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
              this.GetCanvas().TextRect$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taCenter,pas["WEBLib.Graphics"].TVerticalAlignment.taVerticalCenter)}
             else if ($tmp4 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) this.GetCanvas().TextRect$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taCenter,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignBottom);
          } else if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) {
            var $tmp5 = AVerticalAlign;
            if ($tmp5 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
              this.GetCanvas().TextRect$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taRightJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignTop)}
             else if ($tmp5 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
              this.GetCanvas().TextRect$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taRightJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taVerticalCenter)}
             else if ($tmp5 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) this.GetCanvas().TextRect$1(pas["WEBLib.Graphics"].TCanvasRectF.$clone(pas["WEBLib.Graphics"].CreateCanvasRectF(r.Left,r.Top,r.Right,r.Bottom)),AText,AWordWrapping,false,pas.Classes.TAlignment.taRightJustify,pas["WEBLib.Graphics"].TVerticalAlignment.taAlignBottom);
          };
        } finally {
          this.RestoreState(st);
        };
      };
      this.GetCanvas().FBrush.FColor = c;
      this.GetCanvas().FBrush.FStyle = bs;
    };
    this.DrawPath = function (AStroke, APath, APathMode) {
      var p = [];
      if (APath != null) {
        if (APathMode === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPath) {
          this.GetCanvas().PathBegin();
          this.ConvertToPath(APath,0.25);
          this.GetCanvas().PathStroke();
        } else {
          p = rtl.arraySetLength(p,pas["WEBLib.TMSFNCTypes"].TPointF,0);
          APath.FlattenToPolygon({get: function () {
              return p;
            }, set: function (v) {
              p = v;
            }},0.25);
          var $tmp1 = APathMode;
          if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon) {
            this.DrawPolygon(AStroke,p)}
           else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolyline) this.DrawPolyline(AStroke,p);
        };
      };
    };
    this.FillPath = function (AFill, APath, APathMode) {
      var p = [];
      if (APath != null) {
        if (APathMode === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPath) {
          this.GetCanvas().PathBegin();
          this.ConvertToPath(APath,0.25);
          this.GetCanvas().PathFill();
        } else {
          p = rtl.arraySetLength(p,pas["WEBLib.TMSFNCTypes"].TPointF,0);
          APath.FlattenToPolygon({get: function () {
              return p;
            }, set: function (v) {
              p = v;
            }},0.25);
          var $tmp1 = APathMode;
          if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon) {
            this.FillPolygon(AFill,p)}
           else if (($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolyline) || ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPath)) this.FillPolyline(AFill,p);
        };
      };
    };
  });
  this.GetNativeContextClass = function () {
    var Result = null;
    Result = $mod.TTMSFNCGraphicsContextGeneral;
    return Result;
  };
},["Math"]);
rtl.module("WEBLib.TMSFNCGraphics.WEB",["System","Classes","WEBLib.TMSFNCGraphicsTypes","WEBLib.TMSFNCUtils","Types","WEBLib.TMSFNCTypes","WEBLib.TMSFNCGraphics","WEBLib.Graphics"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TTMSFNCGraphicsContextWEB",pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext.$init.call(this);
      this.FActivePath = null;
      this.FScale = 0.0;
      this.FNeedsRendering = false;
      this.FFont = null;
      this.FFill = null;
      this.FStroke = null;
      this.FContextSize = pas["WEBLib.TMSFNCTypes"].TSizeF.$new();
      this.FNCanvas = null;
      this.FBitmap = null;
    };
    this.$final = function () {
      this.FActivePath = undefined;
      this.FFont = undefined;
      this.FFill = undefined;
      this.FStroke = undefined;
      this.FContextSize = undefined;
      this.FBitmap = undefined;
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext.$final.call(this);
    };
    this.GetNativeCanvas = function () {
      var Result = null;
      Result = this.FNCanvas;
      return Result;
    };
    this.DestroyResources = function () {
      if (this.FNCanvas != null) {
        this.RestoreContext();
        this.FNCanvas = null;
      };
      if (this.FBitmap != null) {
        rtl.free(this,"FBitmap");
        this.FBitmap = null;
      };
    };
    this.DrawTextInternal = function (AText, ARect, AWordWrap, AHorizontalAlignment, ACalculate) {
      var $Self = this;
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var i = 0;
      var s = "";
      var sn = "";
      var st = "";
      var l = 0;
      var w = 0.0;
      var mw = 0.0;
      var f = false;
      var p = 0;
      var tw = 0.0;
      var th = 0.0;
      var lcnt = 0;
      var rs = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var fws = 0.0;
      var ths = 0.0;
      function ApplyFont() {
      };
      function FindNextWord(AText, APos) {
        var Result = "";
        var l = 0;
        var i = 0;
        Result = "";
        l = AText.length;
        if (APos.get() > l) return Result;
        i = APos.get();
        while (true) {
          if (((AText.charAt(i - 1) === "\n") && (AText.charAt(i - 1 - 1) === "\r")) || ((AText.charAt(i - 1) === "\r") && (AText.charAt(i - 1 - 1) === "\n")) || (AText.charAt(i - 1) === " ")) {
            if (AText.charAt(i - 1) === " ") {
              Result = pas.System.Copy(AText,APos.get(),i - (APos.get() - 1))}
             else Result = pas.System.Copy(AText,APos.get(),i - APos.get());
            break;
          } else if ((AText.charAt(i - 1) === "\n") || (AText.charAt(i - 1) === "\r") || (AText.charAt(i - 1) === " ")) {
            Result = pas.System.Copy(AText,APos.get(),i - (APos.get() - 1));
            break;
          } else if (i >= l) {
            Result = pas.System.Copy(AText,APos.get(),i - (APos.get() - 1));
            break;
          } else i += 1;
        };
        APos.set(i + 1);
        return Result;
      };
      ApplyFont();
      if (!AWordWrap) {
        if (!ACalculate) ;
      } else {
        rs.$assign(ARect);
        mw = 0;
        i = 1;
        ths = $Self.FFont.FSize * 0.5;
        lcnt = 0;
        fws = 0;
        tw = 0;
        s = FindNextWord(AText,{get: function () {
            return i;
          }, set: function (v) {
            i = v;
          }});
        mw = mw + w;
        if ((s.length > 0) && (s.charAt(s.length - 1) === " ")) mw = mw + fws;
        while (i <= AText.length) {
          l = s.length;
          if ((l >= 2) && (((s.charAt(l - 1) === "\n") && (s.charAt(l - 1 - 1) === "\r")) || ((s.charAt(l - 1) === "\r") && (s.charAt(l - 1 - 1) === "\n")))) {
            s = pas.System.Copy(s,1,l - 2);
            f = true;
          } else if ((l >= 1) && ((s.charAt(l - 1) === "\n") || (s.charAt(l - 1) === "\r"))) {
            s = pas.System.Copy(s,1,l - 1);
            f = true;
          } else f = false;
          sn = FindNextWord(AText,{get: function () {
              return i;
            }, set: function (v) {
              i = v;
            }});
          if (((ARect.Left + mw + w) > ARect.Right) || f) {
            if (s !== "") {
              p = s.length;
              st = pas.System.Copy(s,1,p);
              lcnt += 1;
              if (mw > tw) tw = mw;
              if (!ACalculate) ;
              mw = 0;
            };
            s = "";
            ARect.Top = ARect.Top + th;
            if ((pas.System.Trunc(ARect.Top) > pas.System.Trunc(ARect.Bottom - th)) && !ACalculate) break;
          };
          mw = mw + w;
          if ((sn.length > 0) && (sn.charAt(sn.length - 1) === " ")) mw = mw + fws;
          s = s + sn;
        };
        if (s !== "") {
          p = s.length;
          st = pas.System.Copy(s,1,p);
          lcnt += 1;
          if (mw > tw) tw = mw;
          if (!ACalculate) ;
        };
        Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(rs.Left,rs.Top,rs.Left + tw,rs.Top + (lcnt * th)));
      };
      return Result;
    };
    this.DrawLinearGradient = function (ARect) {
      if (!(this.FNCanvas != null)) return;
      var $tmp1 = this.FFill.FOrientation;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoHorizontal) {}
      else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillOrientation.gfoVertical) ;
      if ((this.FFill.FColorTo !== -1) && (this.FFill.FColorMirror !== -1)) {}
      else if (this.FFill.FColorTo !== -1) ;
    };
    this.FontChanged = function (Sender) {
    };
    this.FillChanged = function (Sender) {
      if (!(this.FNCanvas != null)) return;
      this.ApplyFill();
    };
    this.StrokeChanged = function (Sender) {
      if (!(this.FNCanvas != null)) return;
      this.ApplyStroke();
    };
    this.RestoreContext = function () {
      if (!(this.FNCanvas != null)) return;
    };
    this.SaveContext = function () {
      if (!(this.FNCanvas != null)) return;
    };
    this.ApplyStroke = function () {
      var f = [];
      if (!(this.FNCanvas != null)) return;
    };
    this.ApplyFill = function () {
      if (!(this.FNCanvas != null)) return;
      var $tmp1 = this.FFill.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) ;
    };
    this.Create$1 = function (AGraphics) {
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphicsContext.Create$1.apply(this,arguments);
      this.FScale = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null);
      this.FNeedsRendering = true;
      this.FContextSize.cx = 0;
      this.FContextSize.cy = 0;
      this.FFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FFont.FOnChanged = rtl.createCallback(this,"FontChanged");
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      return this;
    };
    this.Destroy = function () {
      this.Render();
      if (this.FFont != null) {
        rtl.free(this,"FFont");
        this.FFont = null;
      };
      if (this.FFill != null) {
        rtl.free(this,"FFill");
        this.FFill = null;
      };
      if (this.FStroke != null) {
        rtl.free(this,"FStroke");
        this.FStroke = null;
      };
      this.DestroyResources();
      pas.System.TObject.Destroy.call(this);
    };
    this.GetFillColor = function () {
      var Result = 0;
      Result = this.GetGraphics().FFill.FColor;
      return Result;
    };
    this.CalculateText = function (AText, ARect, AWordWrapping) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if (!(this.FNCanvas != null)) return Result;
      this.SaveContext();
      Result.$assign(this.DrawTextInternal(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AWordWrapping,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,true));
      this.RestoreContext();
      return Result;
    };
    this.SetTextAngle = function (ARect, AAngle) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var ar = 0.0;
      var cx = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      Result.$assign(ARect);
      if (!(this.FNCanvas != null)) return Result;
      if (AAngle !== 0) {
        ar = pas.Math.DegToRad(AAngle);
        cx.X = Result.Left + ((Result.Right - Result.Left) / 2);
        cx.Y = Result.Top + ((Result.Bottom - Result.Top) / 2);
        this.SaveContext();
        if ((Result.Right - Result.Left) < (Result.Bottom - Result.Top)) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(-(Result.Bottom - Result.Top) / 2,-(Result.Right - Result.Left) / 2,(Result.Bottom - Result.Top) / 2,(Result.Right - Result.Left) / 2))}
         else Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(-(Result.Right - Result.Left) / 2,-(Result.Bottom - Result.Top) / 2,(Result.Right - Result.Left) / 2,(Result.Bottom - Result.Top) / 2));
      };
      return Result;
    };
    this.CreatePath = function () {
      var Result = null;
      return Result;
    };
    this.GetMatrix = function () {
      var Result = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsMatrix.$new();
      return Result;
    };
    this.Render = function () {
      if (!this.FNeedsRendering) return;
      this.FNeedsRendering = false;
      this.DestroyResources();
    };
    this.PathOpen = function (APath) {
    };
    this.PathMoveTo = function (APath, APoint) {
    };
    this.PathLineTo = function (APath, APoint) {
    };
    this.PathClose = function (APath) {
    };
    this.ResetClip = function () {
      if (!(this.FNCanvas != null)) return;
      this.RestoreContext();
    };
    this.ResetTransform = function () {
      if (!(this.FNCanvas != null)) return;
      this.RestoreContext();
      this.SaveContext();
    };
    this.ScaleTransform = function (AX, AY) {
      if (!(this.FNCanvas != null)) return;
    };
    this.RotateTransform = function (AAngle) {
      if (!(this.FNCanvas != null)) return;
    };
    this.TranslateTransform = function (AX, AY) {
      if (!(this.FNCanvas != null)) return;
    };
    this.SetTextQuality = function (ATextQuality) {
    };
    this.SetAntiAliasing = function (AAntiAliasing) {
      if (!(this.FNCanvas != null)) return;
    };
    this.SetShowAcceleratorChar = function (AShowAcceleratorChar) {
    };
    this.SetSize = function (AWidth, AHeight) {
      this.FContextSize.cx = AWidth;
      this.FContextSize.cy = AHeight;
      this.DestroyResources();
      this.FBitmap = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
      this.ScaleTransform(this.FScale,this.FScale);
      this.SaveContext();
    };
    this.SetMatrix = function (AMatrix) {
    };
    this.SetScale = function (AScale) {
      this.FScale = AScale;
    };
    this.ResetTextAngle = function (AAngle) {
      if (!(this.FNCanvas != null)) return;
      if (AAngle !== 0) this.RestoreContext();
    };
    this.BeginScene = function () {
      if (!(this.FNCanvas != null)) return;
    };
    this.EndScene = function () {
      if (!(this.FNCanvas != null)) return;
      this.Render();
    };
    this.StartSpecialPen = function () {
      if (!(this.FNCanvas != null)) return;
    };
    this.StopSpecialPen = function () {
      if (!(this.FNCanvas != null)) return;
    };
    this.RestoreState = function (AState) {
      if (!(this.FNCanvas != null)) return;
      this.RestoreContext();
    };
    this.SaveState = function (AState) {
      if (!(this.FNCanvas != null)) return;
      this.SaveContext();
    };
    this.SetFontSize = function (ASize) {
      if (!(this.FNCanvas != null)) return;
      this.FFont.SetSize(ASize);
    };
    this.SetFontColor = function (AColor) {
      if (!(this.FNCanvas != null)) return;
      this.FFont.SetColor(AColor);
    };
    this.SetFontName = function (AName) {
      if (!(this.FNCanvas != null)) return;
      this.FFont.SetName(AName);
    };
    this.SetFont = function (AFont) {
      if (!(this.FNCanvas != null)) return;
      this.FFont.AssignSource(AFont);
    };
    this.SetFontStyles = function (AStyle) {
      if (!(this.FNCanvas != null)) return;
      this.FFont.SetStyle(rtl.refSet(AStyle));
    };
    this.SetFill = function (AFill) {
      if (!(this.FNCanvas != null)) return;
      this.FFill.Assign(AFill);
    };
    this.SetFillKind = function (AKind) {
      if (!(this.FNCanvas != null)) return;
      this.FFill.SetKind(AKind);
    };
    this.SetFillColor = function (AColor) {
      if (!(this.FNCanvas != null)) return;
      this.FFill.SetColor(AColor);
    };
    this.SetStroke = function (AStroke) {
      if (!(this.FNCanvas != null)) return;
      this.FStroke.Assign(AStroke);
    };
    this.SetStrokeKind = function (AKind) {
      if (!(this.FNCanvas != null)) return;
      this.FStroke.SetKind(AKind);
    };
    this.SetStrokeColor = function (AColor) {
      if (!(this.FNCanvas != null)) return;
      this.FStroke.SetColor(AColor);
    };
    this.SetStrokeWidth = function (AWidth) {
      if (!(this.FNCanvas != null)) return;
      this.FStroke.SetWidth(AWidth);
    };
    this.DrawLine = function (AStroke, AFromPoint, AToPoint, AModifyPointModeFrom, AModifyPointModeTo) {
      if (!(this.FNCanvas != null)) return;
      this.SaveContext();
      this.RestoreContext();
    };
    this.DrawPolygon = function (AStroke, APolygon) {
      var I = 0;
      if (!(this.FNCanvas != null)) return;
      if (rtl.length(APolygon) === 0) return;
      this.SaveContext();
      this.ApplyStroke();
      this.RestoreContext();
    };
    this.FillPolygon = function (AFill, APolygon) {
      var I = 0;
      if (!(this.FNCanvas != null)) return;
      if (rtl.length(APolygon) === 0) return;
      this.SaveContext();
      var $tmp1 = AFill.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) {
        this.ApplyFill();
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        if (this.FActivePath != null) this.DrawLinearGradient(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(this.FActivePath.GetBounds()));
      };
      this.RestoreContext();
    };
    this.DrawPolyline = function (AStroke, APolyline) {
      var I = 0;
      if (!(this.FNCanvas != null)) return;
      if (rtl.length(APolyline) === 0) return;
      this.SaveContext();
      this.ApplyStroke();
      this.RestoreContext();
    };
    this.FillPolyline = function (AFill, APolyline) {
      var I = 0;
      if (!(this.FNCanvas != null)) return;
      if (rtl.length(APolyline) === 0) return;
      this.SaveContext();
      var $tmp1 = AFill.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) {
        this.ApplyFill();
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        if (this.FActivePath != null) this.DrawLinearGradient(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(this.FActivePath.GetBounds()));
      };
      this.RestoreContext();
    };
    this.FillArc = function (AFill, ACenter, ARadius, AStartAngle, ASweepAngle) {
      if (!(this.FNCanvas != null)) return;
      this.SaveContext();
      var $tmp1 = AFill.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) {
        this.ApplyFill();
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        this.DrawLinearGradient(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ACenter.X - ARadius.X,ACenter.Y - ARadius.Y,ACenter.X + ARadius.X,ACenter.Y + ARadius.Y)));
      };
      this.RestoreContext();
    };
    this.DrawArc = function (AStroke, ACenter, ARadius, AStartAngle, ASweepAngle) {
      if (!(this.FNCanvas != null)) return;
      this.SaveContext();
      this.ApplyStroke();
      this.RestoreContext();
    };
    this.FillRect = function (AFill, ARect, AModifyRectMode) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (!(this.FNCanvas != null)) return;
      r.$assign(ARect);
      this.SaveContext();
      var $tmp1 = AFill.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) {
        this.ApplyFill();
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        this.DrawLinearGradient(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
      };
      this.RestoreContext();
    };
    this.DrawRect = function (AStroke, ARect, ASides, AModifyRectMode) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (!(this.FNCanvas != null)) return;
      r.$assign(ARect);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsTop in ASides) this.DrawLine(AStroke,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsLeft in ASides) this.DrawLine(AStroke,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsBottom in ASides) this.DrawLine(AStroke,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSide.gsRight in ASides) this.DrawLine(AStroke,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
    };
    this.FillRoundRect = function (AFill, ARect, ARounding, ACorners, AModifyRectMode) {
      var pth = null;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var rc = 0.0;
      r.$assign(ARect);
      rc = ARounding;
      pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
      try {
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-270,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom - rc));
        } else {
          pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
        };
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top + rc));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-180,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-90,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top + rc));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom - rc));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),0,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom))}
         else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
        pth.ClosePath();
        this.FillPath(this.FFill,pth,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon);
      } finally {
        pth = rtl.freeLoc(pth);
      };
    };
    this.DrawRoundRect = function (AStroke, ARect, ARounding, ACorners, AModifyRectMode) {
      var pth = null;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var rc = 0.0;
      r.$assign(ARect);
      rc = ARounding;
      pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
      try {
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-270,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom - rc));
        } else {
          pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
        };
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top + rc));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-180,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-90,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top + rc));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom - rc));
          pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),0,90);
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom));
        } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom));
        if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
          pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom))}
         else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
        pth.ClosePath();
        this.DrawPath(this.FStroke,pth,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon);
      } finally {
        pth = rtl.freeLoc(pth);
      };
    };
    this.FillEllipse = function (AFill, ARect, AModifyRectMode) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (!(this.FNCanvas != null)) return;
      r.$assign(ARect);
      this.SaveContext();
      var $tmp1 = AFill.FKind;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid) {
        this.ApplyFill();
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient) {
        this.DrawLinearGradient(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
      };
      this.RestoreContext();
    };
    this.DrawEllipse = function (AStroke, ARect, AModifyRectMode) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (!(this.FNCanvas != null)) return;
      r.$assign(ARect);
      this.SaveContext();
      this.ApplyStroke();
      this.RestoreContext();
    };
    this.DrawBitmap = function (ABitmap, ASrcRect, ADstRect, AOpacity) {
      var R = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (!(ABitmap != null) || !(this.FNCanvas != null)) return;
      this.SaveContext();
      R.$assign(ADstRect);
      try {} finally {
      };
      this.RestoreContext();
    };
    this.ClipRect = function (ARect) {
      if (!(this.FNCanvas != null)) return;
      this.SaveContext();
    };
    this.ClipPath = function (APath) {
      if (!(this.FNCanvas != null)) return;
      try {
        this.SaveContext();
      } finally {
      };
    };
    this.DrawFocusPath = function (AStroke, APath, AColor) {
      if (!(this.FNCanvas != null)) return;
    };
    this.DrawFocusRectangle = function (AStroke, ARect, AColor, AModifyRectMode) {
      if (!(this.FNCanvas != null)) return;
    };
    this.DrawText = function (AText, ARect, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle) {
      var R = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (!(this.FNCanvas != null)) return;
      this.SaveContext();
      R.$assign(this.DrawTextInternal(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AWordWrapping,AHorizontalAlign,true));
      var $tmp1 = AVerticalAlign;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
        this.DrawTextInternal(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top + ((ARect.Bottom - ARect.Top - (R.Bottom - R.Top)) / 2),ARect.Right,ARect.Top + ((ARect.Bottom - ARect.Top - (R.Bottom - R.Top)) / 2) + (R.Bottom - R.Top))),AWordWrapping,AHorizontalAlign,false)}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading) {
        this.DrawTextInternal(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Right,ARect.Top + (R.Bottom - R.Top))),AWordWrapping,AHorizontalAlign,false)}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) this.DrawTextInternal(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Bottom - (R.Bottom - R.Top),ARect.Right,ARect.Bottom)),AWordWrapping,AHorizontalAlign,false);
      this.RestoreContext();
    };
    this.DrawPath = function (AStroke, APath, APathMode) {
      var p = [];
      if (APath != null) {
        this.FActivePath = APath;
        p = rtl.arraySetLength(p,pas["WEBLib.TMSFNCTypes"].TPointF,0);
        APath.FlattenToPolygon({get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }},0.25);
        var $tmp1 = APathMode;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon) {
          this.DrawPolygon(AStroke,p)}
         else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolyline) this.DrawPolyline(AStroke,p);
        this.FActivePath = null;
      };
    };
    this.FillPath = function (AFill, APath, APathMode) {
      var p = [];
      if (APath != null) {
        this.FActivePath = APath;
        p = rtl.arraySetLength(p,pas["WEBLib.TMSFNCTypes"].TPointF,0);
        APath.FlattenToPolygon({get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }},0.25);
        var $tmp1 = APathMode;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolygon) {
          this.FillPolygon(AFill,p)}
         else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathDrawMode.pdmPolyline) this.FillPolyline(AFill,p);
        this.FActivePath = null;
      };
    };
  });
  this.GetNativeContextClass = function () {
    var Result = null;
    Result = $mod.TTMSFNCGraphicsContextWEB;
    return Result;
  };
},["SysUtils","Math"]);
rtl.module("WEBLib.TMSFNCGraphics",["System","Classes","WEBLib.TMSFNCGraphicsTypes","WEBLib.Graphics","WEBLib.TMSFNCBitmapContainer","Types","WEBLib.TMSFNCTypes"],function () {
  "use strict";
  var $mod = this;
  $mod.$rtti.$Class("TTMSFNCGraphics");
  rtl.createClass($mod,"TTMSFNCGraphicsContext",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FGraphics = null;
    };
    this.$final = function () {
      this.FGraphics = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetCanvas = function () {
      var Result = null;
      Result = null;
      if (this.GetGraphics() != null) Result = this.GetGraphics().GetCanvas();
      return Result;
    };
    this.GetGraphics = function () {
      var Result = null;
      Result = this.FGraphics;
      return Result;
    };
    this.Create$1 = function (AGraphics) {
      this.FGraphics = AGraphics;
      return this;
    };
    this.ConvertToPath = function (APath, Flatness) {
      var Result = null;
      var J = 0;
      var I = 0;
      var BPts = [];
      var B = rtl.arraySetLength(null,pas["WEBLib.TMSFNCTypes"].TPointF,4);
      var F = 0.0;
      var Len = 0.0;
      var SegCount = 0;
      var CurPoint = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var x = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      Result = this.CreatePath();
      if (APath.GetCount() > 0) {
        F = Math.max(Flatness,0.05);
        J = 0;
        while (J < APath.GetCount()) {
          var $tmp1 = APath.GetPoint(J).Kind;
          if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathPointKind.gppMoveTo) {
            this.PathOpen(Result);
            this.PathMoveTo(Result,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(APath.GetPoint(J).Point));
            CurPoint.$assign(APath.GetPoint(J).Point);
          } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathPointKind.gppLineTo) {
            this.PathLineTo(Result,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(APath.GetPoint(J).Point));
            CurPoint.$assign(APath.GetPoint(J).Point);
          } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathPointKind.gppCurveTo) {
            B[0].$assign(CurPoint);
            B[1].$assign(APath.GetPoint(J).Point);
            J += 1;
            B[2].$assign(APath.GetPoint(J).Point);
            J += 1;
            B[3].$assign(APath.GetPoint(J).Point);
            BPts = APath.CreateBezier(B,6);
            Len = 0;
            for (var $l2 = 0, $end3 = rtl.length(BPts) - 1 - 1; $l2 <= $end3; $l2++) {
              I = $l2;
              x.X = BPts[I].X - BPts[I + 1].X;
              x.Y = BPts[I].Y - BPts[I + 1].Y;
              Len = Len + pas["WEBLib.TMSFNCTypes"].GetPointLength(x);
            };
            SegCount = Math.round(Len / F);
            if (SegCount < 2) {
              this.PathLineTo(Result,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(B[3]))}
             else {
              BPts = APath.CreateBezier(B,SegCount);
              for (var $l4 = 0, $end5 = rtl.length(BPts) - 1; $l4 <= $end5; $l4++) {
                I = $l4;
                this.PathLineTo(Result,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(BPts[I]));
              };
              CurPoint.$assign(APath.GetPoint(J).Point);
            };
          } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPathPointKind.gppClose) this.PathClose(Result);
          J += 1;
        };
      };
      return Result;
    };
  });
  $mod.$rtti.$ClassRef("TTMSFNCGraphicsContextClass",{instancetype: $mod.$rtti["TTMSFNCGraphicsContext"]});
  rtl.createClass($mod,"TTMSFNCGraphics",pas.System.TObject,function () {
    this.DefaultSelectionFillColor = 0;
    this.DefaultTextFontColor = 0;
    this.DefaultPopupFillColor = 0;
    this.DefaultPopupStrokeColor = 0;
    this.DefaultButtonStrokeColorFocused = 0;
    this.DefaultButtonFillColorFocused = 0;
    this.DefaultButtonStrokeColorDisabled = 0;
    this.DefaultButtonFillColorDisabled = 0;
    this.DefaultButtonStrokeColor = 0;
    this.DefaultButtonFillColor = 0;
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FActiveCanvas = null;
      this.FBlockUpdate = 0;
      this.FNative = false;
      this.FContextNative = null;
      this.FContextGeneral = null;
      this.FBitmap = null;
      this.FFill = null;
      this.FStroke = null;
      this.FFont = null;
      this.FHighlightColor = 0;
      this.FOptimizedHTMLDrawing = false;
      this.FHighlightTextColor = 0;
      this.FHighlightFontStyles = {};
      this.FURLUnderline = false;
      this.FURLColor = 0;
      this.FBitmapContainer = null;
    };
    this.$final = function () {
      this.FActiveCanvas = undefined;
      this.FContextNative = undefined;
      this.FContextGeneral = undefined;
      this.FBitmap = undefined;
      this.FFill = undefined;
      this.FStroke = undefined;
      this.FFont = undefined;
      this.FHighlightFontStyles = undefined;
      this.FBitmapContainer = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.GetCanvas = function () {
      var Result = null;
      Result = this.FActiveCanvas;
      return Result;
    };
    this.GetContext = function () {
      var Result = null;
      if (this.FNative) {
        Result = this.FContextNative}
       else Result = this.FContextGeneral;
      return Result;
    };
    this.FontChanged = function (Sender) {
      this.SetFont(rtl.as(Sender,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont));
    };
    this.FillChanged = function (Sender) {
      this.SetFill(rtl.as(Sender,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill));
    };
    this.StrokeChanged = function (Sender) {
      this.SetStroke(rtl.as(Sender,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke));
    };
    this.InitializeDefaultAppearance = function () {
      this.FURLColor = 16711680;
      this.FURLUnderline = true;
      this.SetFill(this.FFill);
      this.SetStroke(this.FStroke);
      this.SetFont(this.FFont);
    };
    this.InternalCalculateText = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var a = "";
      var s = "";
      var fa = "";
      var XSize = 0.0;
      var YSize = 0.0;
      var hl = 0;
      var ml = 0;
      var hr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var cr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var lc = 0;
      var AControlID = "";
      var AControlType = "";
      var AControlValue = "";
      Result.$assign(ARect);
      if (Math.round(Result.Right - Result.Left) <= 0) {
        Result.Bottom = Result.Top;
        return Result;
      };
      if (AText !== "") {
        if (ASupportHTML && ((pas["WEBLib.TMSFNCTypes"].AnsiPos("<\/",AText) > 0) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("\/>",AText) > 0) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("<BR>",pas.SysUtils.UpperCase(AText)) > 0))) {
          hr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
          XSize = 0;
          YSize = 0;
          hl = -1;
          ml = -1;
          fa = "";
          s = "";
          a = "";
          lc = 0;
          cr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
          AControlID = "";
          AControlValue = "";
          AControlType = "";
          pas["WEBLib.TMSFNCHTMLEngine"].HTMLDrawEx$1(this,AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),0,0,-1,-1,0,false,true,false,false,false,false,AWordWrapping,false,"",1.0,this.FURLColor,-1,-1,-1,{get: function () {
              return a;
            }, set: function (v) {
              a = v;
            }},{get: function () {
              return s;
            }, set: function (v) {
              s = v;
            }},{get: function () {
              return fa;
            }, set: function (v) {
              fa = v;
            }},{get: function () {
              return XSize;
            }, set: function (v) {
              XSize = v;
            }},{get: function () {
              return YSize;
            }, set: function (v) {
              YSize = v;
            }},{get: function () {
              return hl;
            }, set: function (v) {
              hl = v;
            }},{get: function () {
              return ml;
            }, set: function (v) {
              ml = v;
            }},hr,cr,{get: function () {
              return AControlID;
            }, set: function (v) {
              AControlID = v;
            }},{get: function () {
              return AControlValue;
            }, set: function (v) {
              AControlValue = v;
            }},{get: function () {
              return AControlType;
            }, set: function (v) {
              AControlType = v;
            }},{get: function () {
              return lc;
            }, set: function (v) {
              lc = v;
            }},0,this.FBitmapContainer,1,this.FURLUnderline,this.FHighlightColor,this.FHighlightTextColor,rtl.refSet(this.FHighlightFontStyles));
          YSize = YSize + 1;
          Result.Right = Result.Left + XSize;
          Result.Bottom = Result.Top + YSize;
        } else {
          Result.$assign(this.GetContext().CalculateText(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AWordWrapping));
          Result.Bottom = Result.Bottom + 1;
        };
      } else {
        Result.Right = Result.Left;
        Result.Bottom = Result.Top;
      };
      return Result;
    };
    this.InternalDrawText = function (ARect, AText, AControlID, AControlValue, AControlType, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      var a = "";
      var s = "";
      var fa = "";
      var XSize = 0.0;
      var YSize = 0.0;
      var hl = 0;
      var ml = 0;
      var hr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var cr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var xs = 0.0;
      var ys = 0.0;
      var lc = 0;
      var htmlr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var isanchor = false;
      var st = null;
      var oldc = 0;
      oldc = this.GetContext().GetFillColor();
      this.GetContext().SetFillColor(this.FFont.FColor);
      if ((AMinHeight > -1) && ((ARect.Bottom - ARect.Top) < AMinHeight)) ARect.Bottom = ARect.Top + AMinHeight;
      if ((AMinWidth > -1) && ((ARect.Right - ARect.Left) < AMinWidth)) ARect.Right = ARect.Left + AMinWidth;
      ARect.$assign(this.GetContext().SetTextAngle(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AAngle));
      Result = "";
      if (((pas["WEBLib.TMSFNCTypes"].AnsiPos("<\/",AText) > 0) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("\/>",AText) > 0) || (pas["WEBLib.TMSFNCTypes"].AnsiPos("<BR>",pas.SysUtils.UpperCase(AText)) > 0)) && ASupportHTML) {
        hr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
        XSize = 0;
        YSize = 0;
        hl = -1;
        ml = -1;
        fa = "";
        s = "";
        a = "";
        lc = 0;
        cr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
        AControlID.set("");
        AControlValue.set("");
        AControlType.set("");
        pas["WEBLib.TMSFNCHTMLEngine"].HTMLDrawEx$1(this,AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),0,0,-1,-1,0,false,true,false,false,false,false,AWordWrapping,false,"",1.0,this.FURLColor,-1,-1,-1,{get: function () {
            return a;
          }, set: function (v) {
            a = v;
          }},{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }},{get: function () {
            return fa;
          }, set: function (v) {
            fa = v;
          }},{get: function () {
            return XSize;
          }, set: function (v) {
            XSize = v;
          }},{get: function () {
            return YSize;
          }, set: function (v) {
            YSize = v;
          }},{get: function () {
            return hl;
          }, set: function (v) {
            hl = v;
          }},{get: function () {
            return ml;
          }, set: function (v) {
            ml = v;
          }},hr,cr,AControlID,AControlValue,AControlType,{get: function () {
            return lc;
          }, set: function (v) {
            lc = v;
          }},0,this.FBitmapContainer,1,this.FURLUnderline,this.FHighlightColor,this.FHighlightTextColor,rtl.refSet(this.FHighlightFontStyles));
        YSize = YSize + 1;
        if ((AWordWrapping && (lc <= 1)) || !AWordWrapping) {
          xs = ARect.Left;
          ys = ARect.Top;
          var $tmp1 = AHorizontalAlign;
          if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
            xs = xs + ((ARect.Right - ARect.Left - XSize) / 2)}
           else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) xs = (ARect.Left + (ARect.Right - ARect.Left)) - XSize;
          var $tmp2 = AVerticalAlign;
          if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter) {
            ys = ys + ((ARect.Bottom - ARect.Top - YSize) / 2)}
           else if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaTrailing) ys = (ys + (ARect.Bottom - ARect.Top)) - YSize;
          htmlr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(xs,ys,xs + XSize,ys + YSize));
        } else htmlr.$assign(ARect);
        st = this.SaveState(true);
        this.ClipRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
        isanchor = pas["WEBLib.TMSFNCHTMLEngine"].HTMLDrawEx$1(this,AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(htmlr),Math.round(AX),Math.round(AY),-1,-1,0,ATestAnchor,false,false,false,false,false,AWordWrapping,false,"",1.0,this.FURLColor,-1,-1,-1,{get: function () {
            return a;
          }, set: function (v) {
            a = v;
          }},{get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }},{get: function () {
            return fa;
          }, set: function (v) {
            fa = v;
          }},{get: function () {
            return XSize;
          }, set: function (v) {
            XSize = v;
          }},{get: function () {
            return YSize;
          }, set: function (v) {
            YSize = v;
          }},{get: function () {
            return hl;
          }, set: function (v) {
            hl = v;
          }},{get: function () {
            return ml;
          }, set: function (v) {
            ml = v;
          }},hr,cr,AControlID,AControlValue,AControlType,{get: function () {
            return lc;
          }, set: function (v) {
            lc = v;
          }},0,this.FBitmapContainer,1,this.FURLUnderline,this.FHighlightColor,this.FHighlightTextColor,rtl.refSet(this.FHighlightFontStyles));
        this.RestoreState(st,true);
        if (isanchor) Result = a;
      } else if (!ATestAnchor) this.GetContext().DrawText(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle);
      this.GetContext().ResetTextAngle(AAngle);
      this.GetContext().SetFillColor(oldc);
      return Result;
    };
    this.DrawTexture = function (ARect, ATexture, ATextureMode) {
      var LR = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var R = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var IR = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var I = 0;
      var J = 0;
      if (pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(ATexture)) return;
      LR.$assign(ARect);
      var $tmp1 = ATextureMode;
      if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextureMode.gtmOriginal) {
        R.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,ARect.Top,ARect.Left + ATexture.GetWidth(),ARect.Top + ATexture.GetHeight()));
        pas["WEBLib.TMSFNCTypes"].IntersectRectEx$1(IR,LR,R);
        this.DrawBitmapPart$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,IR.Right - IR.Left,IR.Bottom - IR.Top)),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(R.Left,R.Top,R.Left + (IR.Right - IR.Left),R.Top + (IR.Bottom - IR.Top))),ATexture,false,false,false,false);
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextureMode.gtmFit) {
        R.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ATexture.GetWidth(),ATexture.GetHeight()));
        R.$assign(pas["WEBLib.TMSFNCTypes"].RectSnapToPixelEx(pas["WEBLib.TMSFNCTypes"].RectFitIntoEx$1(R,ARect),1,false));
        this.DrawBitmapPart$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ATexture.GetWidth(),ATexture.GetHeight())),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(R),ATexture,false,true,false,false);
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextureMode.gtmStretch) {
        this.DrawBitmapPart$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ATexture.GetWidth(),ATexture.GetHeight())),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),ATexture,false,true,false,false)}
       else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextureMode.gtmTile) {
        for (var $l2 = 0, $end3 = pas.System.Trunc((LR.Right - LR.Left) / ATexture.GetWidth()) + 1; $l2 <= $end3; $l2++) {
          I = $l2;
          for (var $l4 = 0, $end5 = pas.System.Trunc((LR.Bottom - LR.Top) / ATexture.GetHeight()) + 1; $l4 <= $end5; $l4++) {
            J = $l4;
            R.$assign(pas["WEBLib.TMSFNCTypes"].RectF(LR.Left,LR.Top,LR.Left + ATexture.GetWidth(),LR.Top + ATexture.GetHeight()));
            pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(R,I * ATexture.GetWidth(),J * ATexture.GetHeight());
            pas["WEBLib.TMSFNCTypes"].IntersectRectEx$1(IR,LR,R);
            if (pas["WEBLib.TMSFNCTypes"].IntersectRectEx(IR,R)) this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(R.Left,R.Top,R.Left + (IR.Right - IR.Left),R.Top + (IR.Bottom - IR.Top))),ATexture,false,false,false,false);
          };
        };
      } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextureMode.gtmCenter) {
        R.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ATexture.GetWidth(),ATexture.GetHeight()));
        R.$assign(pas["WEBLib.TMSFNCTypes"].RectSnapToPixelEx(pas["WEBLib.TMSFNCTypes"].RectCenterAtEx(R,ARect),1,false));
        this.DrawBitmapPart$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ATexture.GetWidth(),ATexture.GetHeight())),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(R),ATexture,true,false,true,false);
      };
    };
    this.DrawSVG = function (ABitmap, ARect) {
      var Result = false;
      Result = false;
      return Result;
    };
    var TTMSFNCGraphicsColorToGrayscale = {"0": "ctgLightness", ctgLightness: 0, "1": "ctgAverage", ctgAverage: 1, "2": "ctgLuminosity", ctgLuminosity: 2};
    this.ConvertBitmapToGrayScale = function (ABitmap) {
      var $Self = this;
      function MinColor(A, B, C) {
        var Result = 0;
        Result = Math.min(A,Math.min(B,C));
        return Result;
      };
      function MaxColor(A, B, C) {
        var Result = 0;
        Result = Math.max(A,Math.max(B,C));
        return Result;
      };
      function ColorToGray(AColor, AMode) {
        var Result = 0;
        var R = 0;
        var G = 0;
        var B = 0;
        var X = 0;
        var A = 0;
        var $tmp1 = AMode;
        if ($tmp1 === TTMSFNCGraphicsColorToGrayscale.ctgLightness) {
          X = Math.floor((MaxColor(R,G,B) + MinColor(R,G,B)) / 2)}
         else if ($tmp1 === TTMSFNCGraphicsColorToGrayscale.ctgAverage) {
          X = Math.floor((R + G + B) / 3)}
         else if ($tmp1 === TTMSFNCGraphicsColorToGrayscale.ctgLuminosity) {
          X = Math.round((0.21 * R) + (0.71 * G) + (0.07 * B))}
         else {
          X = 0;
        };
        return Result;
      };
      var I = 0;
      var J = 0;
      if ((ABitmap != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(ABitmap)) {
        for (var $l1 = 0, $end2 = ABitmap.GetWidth() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          for (var $l3 = 0, $end4 = ABitmap.GetHeight() - 1; $l3 <= $end4; $l3++) {
            J = $l3;
          };
        };
      };
    };
    this.Create$1 = function (ACanvas, ANative) {
      this.FNative = ANative;
      this.FActiveCanvas = ACanvas;
      if (!ANative) {
        this.FContextGeneral = pas["WEBLib.TMSFNCGraphics.General"].TTMSFNCGraphicsContextGeneral.$create("Create$1",[this]);
        this.FContextGeneral.SetSize(1,1);
      } else {
        this.FContextNative = pas["WEBLib.TMSFNCGraphics.WEB"].GetNativeContextClass().$create("Create$1",[this]);
        this.FContextNative.SetSize(1,1);
      };
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FFont.FOnChanged = rtl.createCallback(this,"FontChanged");
      this.FHighlightColor = 16711680;
      this.FHighlightTextColor = 16777215;
      this.FHighlightFontStyles = {};
      this.InitializeDefaultAppearance();
      return this;
    };
    this.CreateNative = function (ACanvas) {
      this.Create$1(ACanvas,true);
      return this;
    };
    this.CreateBitmapCanvas = function (AWidth, AHeight, ANative, AHighDPI) {
      this.FNative = ANative;
      this.FBitmap = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
      this.FBitmap.SetWidth(AWidth);
      this.FBitmap.SetHeight(AHeight);
      this.FActiveCanvas = this.FBitmap.GetCanvas();
      if (!ANative) {
        this.FContextGeneral = pas["WEBLib.TMSFNCGraphics.General"].TTMSFNCGraphicsContextGeneral.$create("Create$1",[this]);
        this.FContextGeneral.SetSize(AWidth,AHeight);
      } else {
        this.FContextNative = pas["WEBLib.TMSFNCGraphics.WEB"].GetNativeContextClass().$create("Create$1",[this]);
        this.FContextNative.SetSize(AWidth,AHeight);
      };
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FFont.FOnChanged = rtl.createCallback(this,"FontChanged");
      this.InitializeDefaultAppearance();
      return this;
    };
    this.CreateNativeBitmapCanvas = function (AWidth, AHeight) {
      this.CreateBitmapCanvas(AWidth,AHeight,true,true);
      return this;
    };
    this.Destroy = function () {
      if (this.FContextNative != null) {
        rtl.free(this,"FContextNative");
        this.FContextNative = null;
      };
      if (this.FContextGeneral != null) {
        rtl.free(this,"FContextGeneral");
        this.FContextGeneral = null;
      };
      if (this.FFont != null) {
        rtl.free(this,"FFont");
        this.FFont = null;
      };
      if (this.FFill != null) {
        this.FFill.FOnChanged = null;
        rtl.free(this,"FFill");
        this.FFill = null;
      };
      if (this.FStroke != null) {
        this.FStroke.FOnChanged = null;
        rtl.free(this,"FStroke");
        this.FStroke = null;
      };
      this.FBitmapContainer = null;
      if (this.FBitmap != null) {
        rtl.free(this,"FBitmap");
        this.FBitmap = null;
      };
      pas.System.TObject.Destroy.call(this);
    };
    this.GetMatrix = function () {
      var Result = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsMatrix.$new();
      Result.$assign(this.GetContext().GetMatrix());
      return Result;
    };
    this.StartSpecialPen = function () {
      this.GetContext().StartSpecialPen();
    };
    this.StopSpecialPen = function () {
      this.GetContext().StopSpecialPen();
    };
    this.BeginScene = function () {
      this.GetContext().BeginScene();
    };
    this.EndScene = function () {
      this.GetContext().EndScene();
    };
    this.SetMatrix = function (AMatrix) {
      this.GetContext().SetMatrix(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsMatrix.$clone(AMatrix));
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCGraphics.isPrototypeOf(Source)) {
        this.FFill.BeginUpdate();
        this.FFill.Assign(rtl.as(Source,$mod.TTMSFNCGraphics).FFill);
        this.FFill.EndUpdate();
        this.FStroke.BeginUpdate();
        this.FStroke.Assign(rtl.as(Source,$mod.TTMSFNCGraphics).FStroke);
        this.FStroke.EndUpdate();
        this.FFont.BeginUpdate();
        this.FFont.AssignSource(rtl.as(Source,$mod.TTMSFNCGraphics).FFont);
        this.FFont.EndUpdate();
      };
    };
    this.SetFill = function (AFill) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetFill(AFill);
      this.FFill.Assign(AFill);
      this.FBlockUpdate -= 1;
    };
    this.SetStroke = function (AStroke) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetStroke(AStroke);
      this.FStroke.Assign(AStroke);
      this.FBlockUpdate -= 1;
    };
    this.RestoreState = function (AState, ACanvasOnly) {
      if (!ACanvasOnly) {
        this.SetFill(AState.FFill);
        this.SetStroke(AState.FStroke);
        this.SetFont(AState.FFont);
      };
      this.GetContext().RestoreState(AState);
      AState = rtl.freeLoc(AState);
    };
    this.SetFillKind = function (AKind) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetFillKind(AKind);
      this.FFill.SetKind(AKind);
      this.FBlockUpdate -= 1;
    };
    this.SetFillColor = function (AColor) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetFillColor(AColor);
      this.FFill.SetColor(AColor);
      this.FBlockUpdate -= 1;
    };
    this.SetFontColor = function (AColor) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetFontColor(AColor);
      this.FFont.SetColor(AColor);
      this.FBlockUpdate -= 1;
    };
    this.SetFontName = function (AName) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetFontName(AName);
      this.FFont.SetName(AName);
      this.FBlockUpdate -= 1;
    };
    this.SetFont = function (AFont) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetFont(AFont);
      this.FFont.AssignSource(AFont);
      this.FBlockUpdate -= 1;
    };
    this.SetFontSize = function (ASize) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetFontSize(ASize);
      this.FFont.SetSize(ASize);
      this.FBlockUpdate -= 1;
    };
    this.SetFontStyles = function (AStyle) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetFontStyles(rtl.refSet(AStyle));
      this.FFont.SetStyle(rtl.refSet(AStyle));
      this.FBlockUpdate -= 1;
    };
    this.SetStrokeKind = function (AKind) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetStrokeKind(AKind);
      this.FStroke.SetKind(AKind);
      this.FBlockUpdate -= 1;
    };
    this.SetStrokeColor = function (AColor) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetStrokeColor(AColor);
      this.FStroke.SetColor(AColor);
      this.FBlockUpdate -= 1;
    };
    this.SetStrokeWidth = function (AWidth) {
      if (this.FBlockUpdate > 0) return;
      this.FBlockUpdate += 1;
      this.GetContext().SetStrokeWidth(AWidth);
      this.FStroke.SetWidth(AWidth);
      this.FBlockUpdate -= 1;
    };
    this.DrawLine = function (AFromPoint, AToPoint, AModifyPointModeFrom, AModifyPointModeTo) {
      this.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToPointF(AFromPoint)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToPointF(AToPoint)),AModifyPointModeFrom,AModifyPointModeTo);
    };
    this.DrawLine$1 = function (AFromPoint, AToPoint, AModifyPointModeFrom, AModifyPointModeTo) {
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawLine(this.FStroke,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(AFromPoint),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(AToPoint),AModifyPointModeFrom,AModifyPointModeTo);
    };
    this.DrawFocusRectangle = function (ALeft, ATop, ARight, ABottom, AColor, AModifyRectMode) {
      this.DrawFocusRectangle$1(pas.Types.TRect.$clone(pas.Types.Rect(ALeft,ATop,ARight,ABottom)),AColor,AModifyRectMode);
    };
    this.DrawFocusRectangle$1 = function (ARect, AColor, AModifyRectMode) {
      this.DrawFocusRectangle$3(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AColor,AModifyRectMode);
    };
    this.DrawFocusRectangle$2 = function (ALeft, ATop, ARight, ABottom, AColor, AModifyRectMode) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom));
      this.GetContext().DrawFocusRectangle(this.FStroke,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),AColor,AModifyRectMode);
    };
    this.DrawFocusRectangle$3 = function (ARect, AColor, AModifyRectMode) {
      this.DrawFocusRectangle$2(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,AColor,AModifyRectMode);
    };
    this.DrawFocusPath = function (APath, AColor) {
      this.GetContext().DrawFocusPath(this.FStroke,APath,AColor);
    };
    this.DrawPolygon = function (APolygon) {
      var pth = null;
      if (((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) || (this.FFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture)) {
        var $tmp1 = this.FFill.FKind;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) {
          pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
          try {
            pth.AddPolygon(APolygon);
            this.DrawTexture(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pth.GetBounds()),this.FFill.FTexture,this.FFill.FTextureMode);
          } finally {
            pth = rtl.freeLoc(pth);
          };
        } else {
          this.GetContext().FillPolygon(this.FFill,APolygon);
        };
      };
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawPolygon(this.FStroke,APolygon);
    };
    this.DrawPolyline = function (APolyline) {
      if ((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) this.GetContext().FillPolyline(this.FFill,APolyline);
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawPolyline(this.FStroke,APolyline);
    };
    this.DrawPath = function (APath, APathMode) {
      if (((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) || (this.FFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture)) {
        var $tmp1 = this.FFill.FKind;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) {
          this.DrawTexture(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(APath.GetBounds()),this.FFill.FTexture,this.FFill.FTextureMode)}
         else {
          this.GetContext().FillPath(this.FFill,APath,APathMode);
        };
      };
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawPath(this.FStroke,APath,APathMode);
    };
    this.DrawArc = function (Center, Radius, StartAngle, SweepAngle) {
      var pth = null;
      if ((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) {
        var $tmp1 = this.FFill.FKind;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) {
          pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
          try {
            pth.AddArc(Center,Radius,StartAngle,SweepAngle);
            this.DrawTexture(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pth.GetBounds()),this.FFill.FTexture,this.FFill.FTextureMode);
          } finally {
            pth = rtl.freeLoc(pth);
          };
        } else {
          this.GetContext().FillArc(this.FFill,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(Center),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(Radius),StartAngle,SweepAngle);
        };
      };
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawArc(this.FStroke,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(Center),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(Radius),StartAngle,SweepAngle);
    };
    this.DrawArc$1 = function (Center, Radius, StartAngle, SweepAngle) {
      this.DrawArc(pas["WEBLib.TMSFNCTypes"].ConvertToPointF(Center),pas["WEBLib.TMSFNCTypes"].ConvertToPointF(Radius),StartAngle,SweepAngle);
    };
    this.DrawRectangle = function (ALeft, ATop, ARight, ABottom, AModifyRectMode) {
      this.DrawRectangle$1(ALeft,ATop,ARight,ABottom,pas["WEBLib.TMSFNCGraphicsTypes"].AllSides,AModifyRectMode);
    };
    this.DrawRectangle$1 = function (ALeft, ATop, ARight, ABottom, ASides, AModifyRectMode) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var pth = null;
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom));
      if (((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) || (this.FFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture)) {
        var $tmp1 = this.FFill.FKind;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) {
          pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
          try {
            pth.AddRectangle(r);
            this.DrawTexture(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FFill.FTexture,this.FFill.FTextureMode);
          } finally {
            pth = rtl.freeLoc(pth);
          };
        } else {
          this.GetContext().FillRect(this.FFill,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),AModifyRectMode);
        };
      };
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawRect(this.FStroke,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),rtl.refSet(ASides),AModifyRectMode);
    };
    this.DrawEllipse = function (ALeft, ATop, ARight, ABottom, AModifyRectMode) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var pth = null;
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom));
      if (((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) || (this.FFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture)) {
        var $tmp1 = this.FFill.FKind;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) {
          pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
          try {
            pth.AddEllipse(r);
            this.DrawTexture(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FFill.FTexture,this.FFill.FTextureMode);
          } finally {
            pth = rtl.freeLoc(pth);
          };
        } else {
          this.GetContext().FillEllipse(this.FFill,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),AModifyRectMode);
        };
      };
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawEllipse(this.FStroke,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),AModifyRectMode);
    };
    this.DrawRectangle$2 = function (ARect, AModifyRectMode) {
      this.DrawRectangle(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,AModifyRectMode);
    };
    this.DrawRectangle$3 = function (ARect, ASides, AModifyRectMode) {
      this.DrawRectangle$1(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,rtl.refSet(ASides),AModifyRectMode);
    };
    this.DrawRectangle$4 = function (ALeft, ATop, ARight, ABottom, AModifyRectMode) {
      this.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),AModifyRectMode);
    };
    this.DrawRectangle$5 = function (ALeft, ATop, ARight, ABottom, ASides, AModifyRectMode) {
      this.DrawRectangle$3(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),rtl.refSet(ASides),AModifyRectMode);
    };
    this.DrawEllipse$1 = function (ALeft, ATop, ARight, ABottom, AModifyRectMode) {
      this.DrawEllipse$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),AModifyRectMode);
    };
    this.DrawRectangle$6 = function (ARect, AModifyRectMode) {
      this.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AModifyRectMode);
    };
    this.DrawRectangle$7 = function (ARect, ASides, AModifyRectMode) {
      this.DrawRectangle$3(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),rtl.refSet(ASides),AModifyRectMode);
    };
    this.DrawRoundRectangle = function (ALeft, ATop, ARight, ABottom, ARounding, ACorners, AModifyRectMode) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var rc = 0.0;
      var pth = null;
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom));
      if (((this.FFill.FColor !== -1) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone)) || (this.FFill.FKind === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture)) {
        var $tmp1 = this.FFill.FKind;
        if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) {
          pth = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsPath.$create("Create$1");
          try {
            rc = ARounding;
            if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
              pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom));
              pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-270,90);
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom - rc));
            } else {
              pth.MoveTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
            };
            if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft in ACorners) {
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top + rc));
              pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-180,90);
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Top));
            } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top));
            if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight in ACorners) {
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top));
              pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Top + rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),-90,90);
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top + rc));
            } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Top));
            if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight in ACorners) {
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom - rc));
              pth.AddArc(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom - rc),pas["WEBLib.TMSFNCTypes"].PointF(rc,rc),0,90);
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - rc,r.Bottom));
            } else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,r.Bottom));
            if (pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft in ACorners) {
              pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left + rc,r.Bottom))}
             else pth.LineTo(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom));
            pth.ClosePath();
            this.DrawTexture(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FFill.FTexture,this.FFill.FTextureMode);
          } finally {
            pth = rtl.freeLoc(pth);
          };
        } else {
          this.GetContext().FillRoundRect(this.FFill,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),ARounding,rtl.refSet(ACorners),AModifyRectMode);
        };
      };
      if ((this.FStroke.FColor !== -1) && (this.FStroke.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone)) this.GetContext().DrawRoundRect(this.FStroke,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),ARounding,rtl.refSet(ACorners),AModifyRectMode);
    };
    this.DrawRoundRectangle$1 = function (ARect, ARounding, ACorners, AModifyRectMode) {
      this.DrawRoundRectangle(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,ARounding,rtl.refSet(ACorners),AModifyRectMode);
    };
    this.DrawRoundRectangle$2 = function (ALeft, ATop, ARight, ABottom, ARounding, ACorners, AModifyRectMode) {
      this.DrawRoundRectangle$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),ARounding,rtl.refSet(ACorners),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.DrawRoundRectangle$3 = function (ARect, ARounding, ACorners, AModifyRectMode) {
      this.DrawRoundRectangle$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),ARounding,rtl.refSet(ACorners),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.DrawEllipse$2 = function (ARect, AModifyRectMode) {
      this.DrawEllipse(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,AModifyRectMode);
    };
    this.DrawBitmapPart = function (ASourceLeft, ASourceTop, ASourceRight, ASourceBottom, ADestinationLeft, ADestinationTop, ADestinationRight, ADestinationBottom, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var rs = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var g = null;
      var bmp = null;
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ADestinationLeft,ADestinationTop,ADestinationRight,ADestinationBottom));
      rs.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ASourceLeft,ASourceTop,ASourceRight,ASourceBottom));
      if (pas["WEBLib.TMSFNCTypes"].RectIsEmpty(r) || pas["WEBLib.TMSFNCTypes"].RectIsEmpty(rs)) return;
      if (!this.DrawSVG(ABitmap,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r))) {
        g = $mod.TTMSFNCGraphics.$create("CreateBitmapCanvas",[Math.round(ASourceRight - ASourceLeft),Math.round(ASourceBottom - ASourceTop),this.FNative,true]);
        try {
          g.BeginScene();
          g.DrawBitmap(-ASourceLeft,-ASourceTop,-ASourceLeft + g.FBitmap.GetWidth(),-ASourceTop + g.FBitmap.GetHeight(),ABitmap,false,false,false,false);
          g.EndScene();
          bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
          try {
            bmp.Assign(g.FBitmap);
            this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,AAspectRatio,AStretch,ACenter,ACropping);
          } finally {
            bmp = rtl.freeLoc(bmp);
          };
        } finally {
          g = rtl.freeLoc(g);
        };
      };
    };
    this.DrawBitmapPart$1 = function (ASourceRect, ADestinationRect, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawBitmapPart(ASourceRect.Left,ASourceRect.Top,ASourceRect.Right,ASourceRect.Bottom,ADestinationRect.Left,ADestinationRect.Top,ADestinationRect.Right,ADestinationRect.Bottom,ABitmap,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawBitmap = function (ALeft, ATop, ARight, ABottom, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (!(ABitmap != null)) return;
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom));
      r.$assign(this.GetBitmapDrawRectangle$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),ABitmap,AAspectRatio,AStretch,ACenter,ACropping));
      if (!this.DrawSVG(ABitmap,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r))) this.GetContext().DrawBitmap(pas["WEBLib.TMSFNCTypes"].BitmapToDrawBitmap(ABitmap),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,ABitmap.GetWidth(),ABitmap.GetHeight())),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),1);
    };
    this.DrawBitmap$1 = function (ARect, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawBitmap(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,ABitmap,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawEllipse$3 = function (ARect, AModifyRectMode) {
      this.DrawEllipse$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AModifyRectMode);
    };
    this.DrawBitmapPart$2 = function (ASourceLeft, ASourceTop, ASourceRight, ASourceBottom, ADestinationLeft, ADestinationTop, ADestinationRight, ADestinationBottom, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawBitmapPart$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ASourceLeft,ASourceTop,ASourceRight,ASourceBottom)),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ADestinationLeft,ADestinationTop,ADestinationRight,ADestinationBottom)),ABitmap,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawBitmapPart$3 = function (ASourceRect, ADestinationRect, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawBitmapPart$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ASourceRect)),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ADestinationRect)),ABitmap,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawBitmap$2 = function (ALeft, ATop, ARight, ABottom, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),ABitmap,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawBitmap$3 = function (ARect, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),ABitmap,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawBitmap$4 = function (ALeft, ATop, ABitmap) {
      this.DrawBitmap$3(pas.Types.TRect.$clone(pas.Types.Rect(ALeft,ATop,ALeft + ABitmap.GetWidth(),ATop + ABitmap.GetHeight())),ABitmap,true,false,true,false);
    };
    this.DrawBitmap$5 = function (ALeft, ATop, ABitmap) {
      this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ALeft + ABitmap.GetWidth(),ATop + ABitmap.GetHeight())),ABitmap,true,false,true,false);
    };
    this.DrawCheckBox = function (ARect, AChecked, AFocused, AEnabled) {
      var c = 0;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(ARect);
      pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-1,-1);
      if (AEnabled) {
        if (AFocused) {
          c = 11829830}
         else c = 0;
      } else c = 11119017;
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      if (AEnabled) {
        this.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(13882323,85))}
       else this.FFill.SetColor(13882323);
      this.FStroke.SetWidth(1);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FStroke.SetColor(c);
      this.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-(r.Right - r.Left) / 5,-(r.Bottom - r.Top) / 5);
      this.FStroke.SetWidth(2);
      this.FStroke.SetColor(c);
      if (AChecked) {
        this.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - 1,r.Bottom - 1)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
        this.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - 1,r.Top)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Bottom - 1)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      };
    };
    this.DrawButton = function (ARect, ADown, AFocused, AEnabled, AAdaptToStyle) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(ARect);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FStroke.SetWidth(1);
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      if (AAdaptToStyle) {
        if (AEnabled) {
          if (!AFocused) {
            this.FStroke.SetColor($mod.TTMSFNCGraphics.DefaultButtonStrokeColor);
            this.FFill.SetColor($mod.TTMSFNCGraphics.DefaultButtonFillColor);
          } else {
            this.FStroke.SetColor($mod.TTMSFNCGraphics.DefaultButtonStrokeColorFocused);
            this.FFill.SetColor($mod.TTMSFNCGraphics.DefaultButtonFillColorFocused);
          };
        } else {
          this.FStroke.SetColor($mod.TTMSFNCGraphics.DefaultButtonStrokeColorDisabled);
          this.FFill.SetColor($mod.TTMSFNCGraphics.DefaultButtonFillColorDisabled);
        };
      } else {
        if (AEnabled) {
          if (!AFocused) {
            this.FStroke.SetColor(11119017);
            this.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(225,225,225));
          } else {
            this.FStroke.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(60,127,177));
            this.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(229,241,251));
          };
        } else {
          this.FStroke.SetColor(11119017);
          this.FFill.SetColor(13882323);
        };
      };
      this.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-1,-1);
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      if (!ADown) {
        this.FStroke.SetColor(this.FFill.FColor)}
       else this.FStroke.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(this.FStroke.FColor,40));
      this.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.DrawCloseButton = function (ARect, ADown, AFocused, AEnabled, AAdaptToStyle) {
      var bmp = null;
      var bmpa = null;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var g = null;
      this.DrawButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),ADown,AFocused,AEnabled,AAdaptToStyle);
      if (AAdaptToStyle) {
        bmpa = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
        bmpa.SetSize(16,16);
        g = $mod.TTMSFNCGraphics.$create("Create$1",[bmpa.GetCanvas(),false]);
        try {
          g.BeginScene();
          g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
          g.FStroke.SetColor($mod.TTMSFNCGraphics.DefaultSelectionFillColor);
          g.FStroke.SetWidth(2);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(3,3)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(12,12)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(3,12)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(12,3)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
        } finally {
          g.EndScene();
          g = rtl.freeLoc(g);
        };
        try {
          r.$assign(ARect);
          bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
          try {
            bmp.Assign(bmpa);
            this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,true,false,true,false);
          } finally {
            bmp = rtl.freeLoc(bmp);
          };
        } finally {
          bmpa = rtl.freeLoc(bmpa);
        };
      } else {
        bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSCLOSE);
        try {
          r.$assign(ARect);
          this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,true,false,true,false);
        } finally {
          bmp = rtl.freeLoc(bmp);
        };
      };
    };
    this.DrawExpanderButton = function (ARect, AState, ADown, AFocused, AEnabled, AAdaptToStyle) {
      var bmpa = null;
      var bmp = null;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var g = null;
      this.DrawButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),ADown,AFocused,AEnabled,AAdaptToStyle);
      if (AAdaptToStyle) {
        bmpa = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
        bmpa.SetSize(16,16);
        g = $mod.TTMSFNCGraphics.$create("Create$1",[bmpa.GetCanvas(),false]);
        try {
          g.BeginScene();
          g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
          g.FStroke.SetWidth(2);
          g.FStroke.SetColor($mod.TTMSFNCGraphics.DefaultSelectionFillColor);
          var $tmp1 = AState;
          if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsExpanderState.gesCollapsed) {
            g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(5,6)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(8,9)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(8,9)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(11,6)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsExpanderState.gesExpanded) {
            g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(5,9)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(8,6)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(8,6)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(11,9)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          };
        } finally {
          g.EndScene();
          g = rtl.freeLoc(g);
        };
        if (bmpa != null) {
          try {
            r.$assign(ARect);
            bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
            try {
              bmp.Assign(bmpa);
              this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,true,false,true,false);
            } finally {
              bmp = rtl.freeLoc(bmp);
            };
          } finally {
            bmpa = rtl.freeLoc(bmpa);
          };
        };
      } else {
        var $tmp2 = AState;
        if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsExpanderState.gesCollapsed) {
          bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSDOWN)}
         else if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsExpanderState.gesExpanded) {
          bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSUP)}
         else {
          bmp = null;
        };
        if (bmp != null) {
          try {
            r.$assign(ARect);
            this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,true,false,true,false);
          } finally {
            bmp = rtl.freeLoc(bmp);
          };
        };
      };
    };
    this.DrawCompactButton = function (ARect, AState, ADown, AFocused, AEnabled, AAdaptToStyle) {
      var bmpa = null;
      var bmp = null;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var g = null;
      this.DrawButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),ADown,AFocused,AEnabled,AAdaptToStyle);
      if (AAdaptToStyle) {
        bmpa = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
        bmpa.SetSize(16,16);
        g = $mod.TTMSFNCGraphics.$create("Create$1",[bmpa.GetCanvas(),false]);
        try {
          g.BeginScene();
          g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
          g.FStroke.SetWidth(2);
          g.FStroke.SetColor($mod.TTMSFNCGraphics.DefaultSelectionFillColor);
          var $tmp1 = AState;
          if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCompactState.gcsCollapsed) {
            g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(6,5)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(9,8)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(9,8)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(6,11)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          } else if ($tmp1 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCompactState.gcsExpanded) {
            g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(9,5)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(6,8)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(6,8)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(9,11)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          };
        } finally {
          g.EndScene();
          g = rtl.freeLoc(g);
        };
        if (bmpa != null) {
          try {
            r.$assign(ARect);
            bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
            try {
              bmp.Assign(bmpa);
              this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,true,false,true,false);
            } finally {
              bmp = rtl.freeLoc(bmp);
            };
          } finally {
            bmpa = rtl.freeLoc(bmpa);
          };
        };
      } else {
        var $tmp2 = AState;
        if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCompactState.gcsCollapsed) {
          bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSRIGHT)}
         else if ($tmp2 === pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCompactState.gcsExpanded) {
          bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSLEFT)}
         else {
          bmp = null;
        };
        if (bmp != null) {
          try {
            r.$assign(ARect);
            this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,true,false,true,false);
          } finally {
            bmp = rtl.freeLoc(bmp);
          };
        };
      };
    };
    this.DrawDropDownButton = function (ARect, ADown, AFocused, AEnabled, ACenter, AAdaptToStyle) {
      var bmp = null;
      var bmpa = null;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var g = null;
      this.DrawButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),ADown,AFocused,AEnabled,AAdaptToStyle);
      if (AAdaptToStyle) {
        bmpa = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
        bmpa.SetSize(7,7);
        g = $mod.TTMSFNCGraphics.$create("Create$1",[bmpa.GetCanvas(),false]);
        try {
          g.BeginScene();
          g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
          g.FStroke.SetColor($mod.TTMSFNCGraphics.DefaultSelectionFillColor);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(0,1)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(6,1)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(0,2)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(6,2)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(1,3)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(5,3)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(2,4)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(4,4)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(3,5)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(3,5)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
        } finally {
          g.EndScene();
          g = rtl.freeLoc(g);
        };
        try {
          if (((ARect.Right - bmpa.GetWidth() - 10) > ARect.Left) && !ACenter) {
            r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Right - bmpa.GetWidth() - 10,ARect.Top,ARect.Right,ARect.Bottom))}
           else r.$assign(ARect);
          bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
          try {
            bmp.Assign(bmpa);
            this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,true,false,true,false);
          } finally {
            bmp = rtl.freeLoc(bmp);
          };
        } finally {
          bmpa = rtl.freeLoc(bmpa);
        };
      } else {
        bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSEXPAND);
        try {
          if (((ARect.Right - bmp.GetWidth() - 10) > ARect.Left) && !ACenter) {
            r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Right - bmp.GetWidth() - 10,ARect.Top,ARect.Right,ARect.Bottom))}
           else r.$assign(ARect);
          this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,true,false,true,false);
        } finally {
          bmp = rtl.freeLoc(bmp);
        };
      };
    };
    this.DrawRadioButton = function (ARect, AChecked, AFocused, AEnabled) {
      var c = 0;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(ARect);
      pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-1,-1);
      if (AEnabled) {
        if (AFocused) {
          c = 11829830}
         else c = 0;
      } else c = 11119017;
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      if (AEnabled) {
        this.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(13882323,85))}
       else this.FFill.SetColor(13882323);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FStroke.SetWidth(1);
      this.FStroke.SetColor(c);
      this.DrawEllipse$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-(r.Right - r.Left) / 5,-(r.Bottom - r.Top) / 5);
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FFill.SetColor(c);
      if (AChecked) {
        this.DrawEllipse$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      };
    };
    this.DrawProgressBar = function (ARect, AValue, AFormat, AMax, AColor, ATextColor, AShowText, AEnabled) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var rp = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var v = 0.0;
      r.$assign(ARect);
      rp.$assign(r);
      if (AEnabled) {
        this.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(13882323,75))}
       else this.FFill.SetColor(13882323);
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FStroke.SetColor(11119017);
      this.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      v = Math.max(0,Math.min(AValue,AMax));
      if ((v >= 0) && (v <= AMax) && (AMax > 0)) {
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(rp,-1,-1);
        rp.Right = rp.Left + (((rp.Right - r.Left) * v) / AMax);
        this.FFill.SetColor(AColor);
        this.FStroke.SetColor(this.FFill.FColor);
        this.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(rp),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        if (AShowText) {
          this.FFont.SetColor(ATextColor);
          this.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas.SysUtils.Format(AFormat,[(v / AMax) * 100]),false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
        };
      };
    };
    this.DrawCheckBox$1 = function (ARect, AChecked, AFocused, AEnabled) {
      this.DrawCheckBox(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AChecked,AFocused,AEnabled);
    };
    this.DrawButton$1 = function (ARect, ADown, AFocused, AEnabled, AAdaptToStyle) {
      this.DrawButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),ADown,AFocused,AEnabled,AAdaptToStyle);
    };
    this.DrawCloseButton$1 = function (ARect, ADown, AFocused, AEnabled, AAdaptToStyle) {
      this.DrawCloseButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),ADown,AFocused,AEnabled,AAdaptToStyle);
    };
    this.DrawExpanderButton$1 = function (ARect, AState, ADown, AFocused, AEnabled, AAdaptToStyle) {
      this.DrawExpanderButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AState,ADown,AFocused,AEnabled,AAdaptToStyle);
    };
    this.DrawCompactButton$1 = function (ARect, AState, ADown, AFocused, AEnabled, AAdaptToStyle) {
      this.DrawCompactButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AState,ADown,AFocused,AEnabled,AAdaptToStyle);
    };
    this.DrawDropDownButton$1 = function (ARect, ADown, AFocused, AEnabled, ACenter, AAdaptToStyle) {
      this.DrawDropDownButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),ADown,AFocused,AEnabled,ACenter,AAdaptToStyle);
    };
    this.DrawRadioButton$1 = function (ARect, AChecked, AFocused, AEnabled) {
      this.DrawRadioButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AChecked,AFocused,AEnabled);
    };
    this.DrawProgressBar$1 = function (ARect, AValue, AFormat, AMax, AColor, ATextColor, AShowText, AEnabled) {
      this.DrawProgressBar(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AValue,AFormat,AMax,AColor,ATextColor,AShowText,AEnabled);
    };
    this.DrawBitmapWithName = function (ALeft, ATop, ARight, ABottom, ABitmapName, AApplyScale, AScale, AAspectRatio, AStretch, ACenter, ACropping) {
      var b = null;
      b = this.$class.GetBitmapFromBitmapContainer(this.FBitmapContainer,ABitmapName,AApplyScale,AScale);
      if (b != null) this.DrawBitmap(ALeft,ATop,ARight,ABottom,b,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawBitmapWithName$1 = function (ARect, ABitmapName, AApplyScale, AScale, AAspectRatio, AStretch, ACenter, ACropping) {
      var b = null;
      b = this.$class.GetBitmapFromBitmapContainer(this.FBitmapContainer,ABitmapName,AApplyScale,AScale);
      if (b != null) this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),b,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawScaledBitmap = function (ARect, ABitmaps, AScale, AAspectRatio, AStretch, ACenter, ACropping) {
      var b = null;
      var bmp = null;
      if (ABitmaps != null) {
        if (AScale > 0) {
          b = ABitmaps.GetItemByScale(AScale)}
         else b = ABitmaps.GetItemByScale(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null));
        if (b != null) {
          if ((b.FBitmap != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(b.FBitmap)) {
            this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),b.FBitmap,AAspectRatio,AStretch,ACenter,ACropping)}
           else {
            bmp = this.$class.GetBitmapFromBitmapContainer(this.FBitmapContainer,b.FBitmapName,true,AScale);
            if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) {
              this.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),bmp,AAspectRatio,AStretch,ACenter,ACropping)}
             else this.DrawBitmapWithName$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),b.FBitmapName,false,b.FScale,AAspectRatio,AStretch,ACenter,ACropping);
          };
        };
      };
    };
    this.DrawScaledBitmap$1 = function (ALeft, ATop, ARight, ABottom, ABitmaps, AScale, AAspectRatio, AStretch, ACenter, ACropping) {
      var b = null;
      var bmp = null;
      if (ABitmaps != null) {
        if (AScale > 0) {
          b = ABitmaps.GetItemByScale(AScale)}
         else b = ABitmaps.GetItemByScale(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null));
        if (b != null) {
          if ((b.FBitmap != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(b.FBitmap)) {
            this.DrawBitmap(ALeft,ATop,ARight,ABottom,b.FBitmap,AAspectRatio,AStretch,ACenter,ACropping)}
           else {
            bmp = this.$class.GetBitmapFromBitmapContainer(this.FBitmapContainer,b.FBitmapName,true,AScale);
            if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) {
              this.DrawBitmap(ALeft,ATop,ARight,ABottom,bmp,AAspectRatio,AStretch,ACenter,ACropping)}
             else this.DrawBitmapWithName(ALeft,ATop,ARight,ABottom,b.FBitmapName,false,b.FScale,AAspectRatio,AStretch,ACenter,ACropping);
          };
        };
      };
    };
    this.DrawBitmapWithName$2 = function (ALeft, ATop, ARight, ABottom, ABitmapName, AApplyScale, AScale, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawBitmapWithName$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),ABitmapName,AApplyScale,AScale,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawBitmapWithName$3 = function (ARect, ABitmapName, AApplyScale, AScale, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawBitmapWithName$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),ABitmapName,AApplyScale,AScale,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawScaledBitmap$2 = function (ARect, ABitmaps, AScale, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),ABitmaps,AScale,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.DrawScaledBitmap$3 = function (ALeft, ATop, ARight, ABottom, ABitmaps, AScale, AAspectRatio, AStretch, ACenter, ACropping) {
      this.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),ABitmaps,AScale,AAspectRatio,AStretch,ACenter,ACropping);
    };
    this.GetBitmapDrawRectangle = function (ALeft, ATop, ARight, ABottom, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var bmp = null;
      var rdest = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var w = 0.0;
      var h = 0.0;
      var x = 0.0;
      var y = 0.0;
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      bmp = ABitmap;
      if (bmp != null) {
        x = 0;
        y = 0;
        w = 0;
        h = 0;
        this.$class.GetAspectSize({get: function () {
            return w;
          }, set: function (v) {
            w = v;
          }},{get: function () {
            return h;
          }, set: function (v) {
            h = v;
          }},bmp.GetWidth(),bmp.GetHeight(),ARight - ALeft,ABottom - ATop,AAspectRatio,AStretch,ACropping);
        if (ACenter || ACropping) {
          x = Math.round((ARight - ALeft - w) / 2);
          y = Math.round((ABottom - ATop - h) / 2);
        };
        rdest.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ALeft + x,ATop + y,ALeft + x + w,ATop + y + h));
        Result.$assign(rdest);
      };
      return Result;
    };
    this.GetBitmapDrawRectangle$1 = function (ARect, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign(this.GetBitmapDrawRectangle(ARect.Left,ARect.Top,ARect.Right,ARect.Bottom,ABitmap,AAspectRatio,AStretch,ACenter,ACropping));
      return Result;
    };
    this.GetBitmapDrawRectangle$2 = function (ALeft, ATop, ARight, ABottom, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      var Result = pas.Types.TRect.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].ConvertToRect(this.GetBitmapDrawRectangle$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),ABitmap,AAspectRatio,AStretch,ACenter,ACropping)));
      return Result;
    };
    this.GetBitmapDrawRectangle$3 = function (ARect, ABitmap, AAspectRatio, AStretch, ACenter, ACropping) {
      var Result = pas.Types.TRect.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].ConvertToRect(this.GetBitmapDrawRectangle$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),ABitmap,AAspectRatio,AStretch,ACenter,ACropping)));
      return Result;
    };
    this.ClipRect = function (ARect) {
      this.GetContext().ClipRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
    };
    this.CalculateTextSize = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = pas["WEBLib.TMSFNCTypes"].TSizeF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(this.CalculateText(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AWordWrapping,ASupportHTML));
      Result.cx = r.Right - r.Left;
      Result.cy = r.Bottom - r.Top;
      return Result;
    };
    this.CalculateTextWidth = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = 0.0;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(this.CalculateText(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AWordWrapping,ASupportHTML));
      Result = r.Right - r.Left;
      return Result;
    };
    this.CalculateTextHeight = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = 0.0;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(this.CalculateText(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AWordWrapping,ASupportHTML));
      Result = r.Bottom - r.Top;
      return Result;
    };
    var arr = ["<BR>","<BR\/>"];
    this.CalculateText = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var lst = null;
      var i = 0;
      var l = 0;
      var p = 0;
      var b = false;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign(ARect);
      b = this.FOptimizedHTMLDrawing && pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IsHTML(AText);
      if (b) {
        for (i = 0; i <= 1; i++) {
          p = pas.System.Pos(arr[i],pas.SysUtils.UpperCase(AText));
          l = arr[i].length;
        };
        if ((p > 0) && (l > 0)) {
          lst = pas.Classes.TStringList.$create("Create$1");
          try {
            lst.SetLineBreak(pas.System.Copy(AText,p,l));
            lst.SetTextStr(AText);
            Result.Bottom = 0;
            for (var $l1 = 0, $end2 = lst.GetCount() - 1; $l1 <= $end2; $l1++) {
              i = $l1;
              r.$assign(this.InternalCalculateText(lst.Get(i),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AWordWrapping,ASupportHTML));
              Result.Bottom = Result.Bottom + (r.Bottom - r.Top);
            };
          } finally {
            lst = rtl.freeLoc(lst);
          };
        } else b = false;
      };
      if (!b) Result.$assign(this.InternalCalculateText(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AWordWrapping,ASupportHTML));
      return Result;
    };
    this.CalculateTextSize$1 = function (AText) {
      var Result = pas["WEBLib.TMSFNCTypes"].TSizeF.$new();
      Result.$assign(this.CalculateTextSize(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,10000,10000)),false,true));
      return Result;
    };
    this.CalculateTextWidth$1 = function (AText) {
      var Result = 0.0;
      Result = this.CalculateTextWidth(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,10000,10000)),false,true);
      return Result;
    };
    this.CalculateTextHeight$1 = function (AText) {
      var Result = 0.0;
      Result = this.CalculateTextHeight(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,10000,10000)),false,true);
      return Result;
    };
    this.CalculateText$1 = function (AText) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign(this.CalculateText(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,10000,10000)),false,true));
      return Result;
    };
    this.ClipRect$1 = function (ARect) {
      this.ClipRect$1(pas.Types.TRect.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRect$1(ARect)));
    };
    this.CalculateTextSize$2 = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = pas.Types.TSize.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].ConvertToSize(this.CalculateTextSize(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AWordWrapping,ASupportHTML)));
      return Result;
    };
    this.CalculateTextWidth$2 = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = 0;
      Result = Math.round(this.CalculateTextWidth(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AWordWrapping,ASupportHTML));
      return Result;
    };
    this.CalculateTextHeight$2 = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = 0;
      Result = Math.round(this.CalculateTextHeight(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AWordWrapping,ASupportHTML));
      return Result;
    };
    this.CalculateText$2 = function (AText, ARect, AWordWrapping, ASupportHTML) {
      var Result = pas.Types.TRect.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].ConvertToRect(this.CalculateText(AText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AWordWrapping,ASupportHTML)));
      return Result;
    };
    this.CalculateTextSizeInt = function (AText) {
      var Result = pas.Types.TSize.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].ConvertToSize(this.CalculateTextSize$1(AText)));
      return Result;
    };
    this.CalculateTextWidthInt = function (AText) {
      var Result = 0;
      Result = Math.round(this.CalculateTextWidth$1(AText));
      return Result;
    };
    this.CalculateTextHeightInt = function (AText) {
      var Result = 0;
      Result = Math.round(this.CalculateTextHeight$1(AText));
      return Result;
    };
    this.CalculateTextInt = function (AText) {
      var Result = pas.Types.TRect.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].ConvertToRect(this.CalculateText$1(AText)));
      return Result;
    };
    this.DrawText = function (APoint, AText, AAngle, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      var AControlID = "";
      var AControlValue = "";
      var AControlType = "";
      AControlID = "";
      AControlValue = "";
      AControlType = "";
      Result = this.DrawText$5(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(APoint.X,APoint.Y,APoint.X + 10000,APoint.Y + 10000)),AText,{get: function () {
          return AControlID;
        }, set: function (v) {
          AControlID = v;
        }},{get: function () {
          return AControlValue;
        }, set: function (v) {
          AControlValue = v;
        }},{get: function () {
          return AControlType;
        }, set: function (v) {
          AControlType = v;
        }},false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,AAngle,-1,-1,ASupportHTML,ATestAnchor,AX,AY);
      return Result;
    };
    this.DrawText$1 = function (ARect, AText, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      var AControlID = "";
      var AControlValue = "";
      var AControlType = "";
      AControlID = "";
      AControlValue = "";
      AControlType = "";
      Result = this.DrawText$5(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AText,{get: function () {
          return AControlID;
        }, set: function (v) {
          AControlID = v;
        }},{get: function () {
          return AControlValue;
        }, set: function (v) {
          AControlValue = v;
        }},{get: function () {
          return AControlType;
        }, set: function (v) {
          AControlType = v;
        }},AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
      return Result;
    };
    this.DrawText$2 = function (ALeft, ATop, ARight, ABottom, AText, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      var AControlID = "";
      var AControlValue = "";
      var AControlType = "";
      AControlID = "";
      AControlValue = "";
      AControlType = "";
      Result = this.DrawText$5(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),AText,{get: function () {
          return AControlID;
        }, set: function (v) {
          AControlID = v;
        }},{get: function () {
          return AControlValue;
        }, set: function (v) {
          AControlValue = v;
        }},{get: function () {
          return AControlType;
        }, set: function (v) {
          AControlType = v;
        }},AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
      return Result;
    };
    this.DrawText$3 = function (ARect, AText, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      var AControlID = "";
      var AControlValue = "";
      var AControlType = "";
      AControlID = "";
      AControlValue = "";
      AControlType = "";
      Result = this.DrawText$5(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AText,{get: function () {
          return AControlID;
        }, set: function (v) {
          AControlID = v;
        }},{get: function () {
          return AControlValue;
        }, set: function (v) {
          AControlValue = v;
        }},{get: function () {
          return AControlType;
        }, set: function (v) {
          AControlType = v;
        }},AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
      return Result;
    };
    this.DrawText$4 = function (ALeft, ATop, ARight, ABottom, AText, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      var AControlID = "";
      var AControlValue = "";
      var AControlType = "";
      AControlID = "";
      AControlValue = "";
      AControlType = "";
      Result = this.DrawText$5(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),AText,{get: function () {
          return AControlID;
        }, set: function (v) {
          AControlID = v;
        }},{get: function () {
          return AControlValue;
        }, set: function (v) {
          AControlValue = v;
        }},{get: function () {
          return AControlType;
        }, set: function (v) {
          AControlType = v;
        }},AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
      return Result;
    };
    var arr = ["<BR>","<BR\/>"];
    this.DrawText$5 = function (ARect, AText, AControlID, AControlValue, AControlType, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      var lst = null;
      var i = 0;
      var l = 0;
      var p = 0;
      var b = false;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var rd = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      rd.$assign(ARect);
      b = !ATestAnchor && this.FOptimizedHTMLDrawing;
      b = b && pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IsHTML(AText);
      if (b) {
        for (i = 0; i <= 1; i++) {
          p = pas.System.Pos(arr[i],pas.SysUtils.UpperCase(AText));
          l = arr[i].length;
        };
        if ((p > 0) && (l > 0)) {
          lst = pas.Classes.TStringList.$create("Create$1");
          try {
            lst.SetLineBreak(pas.System.Copy(AText,p,l));
            lst.SetTextStr(AText);
            for (var $l1 = 0, $end2 = lst.GetCount() - 1; $l1 <= $end2; $l1++) {
              i = $l1;
              r.$assign(this.CalculateText(lst.Get(i),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(rd),AWordWrapping,ASupportHTML));
              this.InternalDrawText(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Right + 1,r.Bottom)),lst.Get(i),AControlID,AControlValue,AControlType,AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
              rd.Top = rd.Top + (r.Bottom - r.Top);
            };
          } finally {
            lst = rtl.freeLoc(lst);
          };
        } else b = false;
      };
      if (!b) {
        Result = this.InternalDrawText(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AText,AControlID,AControlValue,AControlType,AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
      };
      return Result;
    };
    this.DrawText$6 = function (ALeft, ATop, ARight, ABottom, AText, AControlID, AControlValue, AControlType, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      Result = this.DrawText$5(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),AText,AControlID,AControlValue,AControlType,AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
      return Result;
    };
    this.DrawText$7 = function (ARect, AText, AControlID, AControlValue, AControlType, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      Result = this.DrawText$5(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)),AText,AControlID,AControlValue,AControlType,AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
      return Result;
    };
    this.DrawText$8 = function (ALeft, ATop, ARight, ABottom, AText, AControlID, AControlValue, AControlType, AWordWrapping, AHorizontalAlign, AVerticalAlign, ATrimming, AAngle, AMinWidth, AMinHeight, ASupportHTML, ATestAnchor, AX, AY) {
      var Result = "";
      Result = this.DrawText$5(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(ALeft,ATop,ARight,ABottom)),AText,AControlID,AControlValue,AControlType,AWordWrapping,AHorizontalAlign,AVerticalAlign,ATrimming,AAngle,AMinWidth,AMinHeight,ASupportHTML,ATestAnchor,AX,AY);
      return Result;
    };
    this.SaveState = function (ACanvasOnly) {
      var Result = null;
      Result = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsSaveState.$create("Create$1");
      if (!ACanvasOnly) {
        Result.FFill.Assign(this.FFill);
        Result.FStroke.Assign(this.FStroke);
        Result.FFont.AssignSource(this.FFont);
      };
      this.GetContext().SaveState(Result);
      return Result;
    };
    this.ApplyHilight = function (AText, AHilight, ATag, ADoCase) {
      var Result = "";
      Result = pas["WEBLib.TMSFNCHTMLEngine"].HiLight(AText,AHilight,ATag,ADoCase);
      return Result;
    };
    this.GetBitmapFromBitmapContainer = function (ABitmapContainer, AName, AApplyScale, AScale) {
      var Result = null;
      Result = null;
      if ((ABitmapContainer != null) && (AName !== "")) {
        if (AApplyScale) {
          if (AScale > 0) {
            Result = ABitmapContainer.FindBitmap$1(AName + "_" + pas.SysUtils.FloatToStr(AScale))}
           else Result = ABitmapContainer.FindBitmap$1(AName + "_" + pas.SysUtils.FloatToStr(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null)));
        };
        if (!(Result != null)) Result = ABitmapContainer.FindBitmap$1(AName);
      };
      return Result;
    };
    this.GetScaledBitmap = function (ABitmaps, AScale, ABitmapContainer) {
      var Result = null;
      var b = null;
      var bmp = null;
      Result = null;
      if (ABitmaps != null) {
        if (AScale > 0) {
          b = ABitmaps.GetItemByScale(AScale)}
         else b = ABitmaps.GetItemByScale(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null));
        if (b != null) {
          if ((b.FBitmap != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(b.FBitmap)) {
            Result = b.FBitmap}
           else {
            bmp = this.GetBitmapFromBitmapContainer(ABitmapContainer,b.FBitmapName,true,AScale);
            if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) {
              Result = bmp}
             else {
              bmp = this.GetBitmapFromBitmapContainer(ABitmapContainer,b.FBitmapName,false,0);
              if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) Result = bmp;
            };
          };
        };
      };
      return Result;
    };
    this.GetAspectSize = function (AWidth, AHeight, AOriginalWidth, AOriginalHeight, ANewWidth, ANewHeight, AAspectRatio, AStretch, ACropping) {
      var arc = 0.0;
      var ar = 0.0;
      if (AAspectRatio) {
        if ((AOriginalWidth > 0) && (AOriginalHeight > 0) && (ANewWidth > 0) && (ANewHeight > 0)) {
          if ((AOriginalWidth < ANewWidth) && (AOriginalHeight < ANewHeight) && !AStretch) {
            AWidth.set(AOriginalWidth);
            AHeight.set(AOriginalHeight);
          } else {
            if ((AOriginalWidth / AOriginalHeight) < (ANewWidth / ANewHeight)) {
              AHeight.set(ANewHeight);
              AWidth.set((ANewHeight * AOriginalWidth) / AOriginalHeight);
            } else {
              AWidth.set(ANewWidth);
              AHeight.set((ANewWidth * AOriginalHeight) / AOriginalWidth);
            };
          };
        } else {
          AWidth.set(0);
          AHeight.set(0);
        };
      } else {
        if (AStretch) {
          AWidth.set(ANewWidth);
          AHeight.set(ANewHeight);
        } else {
          AWidth.set(AOriginalWidth);
          AHeight.set(AOriginalHeight);
          if (ACropping) {
            if ((AWidth.get() >= AHeight.get()) && (AWidth.get() > 0)) {
              AHeight.set((AOriginalWidth / AWidth.get()) * AHeight.get());
              AWidth.set(AOriginalWidth);
            } else if ((AHeight.get() >= AWidth.get()) && (AHeight.get() > 0)) {
              AWidth.set((AOriginalHeight / AHeight.get()) * AWidth.get());
              AHeight.set(AOriginalHeight);
            };
            if (AHeight.get() === 0) {
              ar = 1}
             else ar = AWidth.get() / AHeight.get();
            if (AOriginalHeight === 0) {
              arc = 1}
             else arc = AOriginalWidth / AOriginalHeight;
            if ((ar < 1) || (arc > ar)) {
              AHeight.set(AOriginalWidth / ar);
              AWidth.set(AOriginalWidth);
            } else {
              AWidth.set(ar * AOriginalHeight);
              AHeight.set(AOriginalHeight);
            };
          };
        };
      };
    };
    this.DrawSample = function (ACanvas, ARect) {
      var g = null;
      g = $mod.TTMSFNCGraphics.$create("Create$1",[ACanvas,false]);
      try {
        g.FFont.SetName("Courier New");
        g.FFont.SetSize(20);
        g.FFont.SetColor(16777215);
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        g.FFill.SetColor(36095);
        g.FFill.SetColorTo(11829830);
        g.FStroke.SetColor(9109504);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),"Sample",false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
      } finally {
        g = rtl.freeLoc(g);
      };
    };
    this.SetDefaultGraphicColors = function () {
      $mod.TTMSFNCGraphics.DefaultPopupFillColor = 16777215;
      $mod.TTMSFNCGraphics.DefaultPopupStrokeColor = 12632256;
      $mod.TTMSFNCGraphics.DefaultButtonFillColor = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(225,225,225);
      $mod.TTMSFNCGraphics.DefaultButtonStrokeColor = 11119017;
      $mod.TTMSFNCGraphics.DefaultTextFontColor = 0;
      $mod.TTMSFNCGraphics.DefaultSelectionFillColor = 0;
      $mod.TTMSFNCGraphics.DefaultButtonFillColorFocused = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(229,241,251);
      $mod.TTMSFNCGraphics.DefaultButtonStrokeColorFocused = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(60,127,177);
      $mod.TTMSFNCGraphics.DefaultButtonStrokeColorDisabled = 11119017;
      $mod.TTMSFNCGraphics.DefaultButtonFillColorDisabled = 13882323;
    };
    this.PointInPath = function (APoint, APath) {
      var Result = false;
      Result = APath.IsPointVisible(APoint);
      return Result;
    };
    this.PointInPath$1 = function (APoint, APath) {
      var Result = false;
      Result = this.PointInPath(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToPointF(APoint)),APath);
      return Result;
    };
    this.PointInPolygon = function (APoint, APolygon) {
      var Result = false;
      Result = this.PointInPolygon(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(APoint),APolygon);
      return Result;
    };
    this.PointInPolygon$1 = function (APoint, APolygon) {
      var Result = false;
      Result = this.PointInPolygon(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToPointF(APoint)),APolygon);
      return Result;
    };
    this.PointInRect = function (APoint, ARect) {
      var Result = false;
      Result = pas["WEBLib.TMSFNCTypes"].PtInRectEx(ARect,APoint);
      return Result;
    };
    this.PointInRect$1 = function (APoint, ARect) {
      var Result = false;
      Result = this.PointInRect(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToPointF(APoint)),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].ConvertToRectF(ARect)));
      return Result;
    };
    this.GetColorRed = function (AColor) {
      var Result = 0;
      AColor = pas["WEBLib.Graphics"].ColorToRGB(AColor);
      Result = pas["WEBLib.Graphics"].GetRValue(AColor);
      return Result;
    };
    this.GetColorGreen = function (AColor) {
      var Result = 0;
      AColor = pas["WEBLib.Graphics"].ColorToRGB(AColor);
      Result = pas["WEBLib.Graphics"].GetGValue(AColor);
      return Result;
    };
    this.GetColorBlue = function (AColor) {
      var Result = 0;
      AColor = pas["WEBLib.Graphics"].ColorToRGB(AColor);
      Result = pas["WEBLib.Graphics"].GetBValue(AColor);
      return Result;
    };
    var HTMLHexColor = "#RRGGBB";
    var HexDigit = ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"];
    this.ColorToHTML = function (AColor) {
      var Result = "";
      var c = 0;
      var i = 0;
      i = 1;
      c = pas["WEBLib.Graphics"].ColorToRGB(AColor);
      Result = HTMLHexColor;
      Result = rtl.setCharAt(Result,(1 + i) - 1,HexDigit[this.GetColorRed(c) >>> 4]);
      Result = rtl.setCharAt(Result,(2 + i) - 1,HexDigit[this.GetColorRed(c) & 0xF]);
      Result = rtl.setCharAt(Result,(3 + i) - 1,HexDigit[this.GetColorGreen(c) >>> 4]);
      Result = rtl.setCharAt(Result,(4 + i) - 1,HexDigit[this.GetColorGreen(c) & 0xF]);
      Result = rtl.setCharAt(Result,(5 + i) - 1,HexDigit[this.GetColorBlue(c) >>> 4]);
      Result = rtl.setCharAt(Result,(6 + i) - 1,HexDigit[this.GetColorBlue(c) & 0xF]);
      return Result;
    };
    this.HTMLToColor = function (AHTML) {
      var Result = 0;
      var r = 0;
      var g = 0;
      var b = 0;
      if (AHTML.length === 4) {
        r = pas.SysUtils.StrToInt("$" + pas.System.Copy(AHTML,2,1) + pas.System.Copy(AHTML,2,1));
        g = pas.SysUtils.StrToInt("$" + pas.System.Copy(AHTML,3,1) + pas.System.Copy(AHTML,3,1));
        b = pas.SysUtils.StrToInt("$" + pas.System.Copy(AHTML,4,1) + pas.System.Copy(AHTML,4,1));
      } else {
        r = pas.SysUtils.StrToInt("$" + pas.System.Copy(AHTML,2,2));
        g = pas.SysUtils.StrToInt("$" + pas.System.Copy(AHTML,4,2));
        b = pas.SysUtils.StrToInt("$" + pas.System.Copy(AHTML,6,2));
      };
      Result = pas["WEBLib.Graphics"].RGB(r,g,b);
      return Result;
    };
    this.TextToColor = function (AText) {
      var Result = 0;
      var i = 0;
      var s = "";
      var c = null;
      s = AText;
      s = pas.SysUtils.LowerCase(s);
      if (pas.System.Pos("cl",s) === 1) pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,2);
      if (pas.System.Pos("cla",s) === 1) pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,3);
      if (pas.System.Pos("gc",s) === 1) pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,2);
      Result = 0;
      c = pas["WEBLib.TMSFNCGraphicsTypes"].ColorLookup();
      if (c != null) {
        i = c.IndexOf(pas.SysUtils.LowerCase(s));
        if ((i >= 0) && (i <= (c.GetCount() - 1))) Result = c.GetObject(i).FColor;
      };
      return Result;
    };
  });
  rtl.createInterface($mod,"ITMSFNCGraphicsExport","{481CA803-8B50-4545-B212-57AC0D065D09}",["Export"],pas.System.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("Export",0,[["AGraphics",$mod.$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]]]);
  });
  this.TMSFNCGRAPHICSCLOSE = "data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJ" + "cEhZcwAACxIAAAsSAdLdfvwAAAAYdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuOWwzfk4AAABVSURBVDhPYxh+" + "QBSI\/0OYWAFIThjCxA5ACmAYHeCTQwHYFGITwwuQNSBjkgBFmkGAIgNAGv5BaZINQdYMA0Qbgk0zDBBlCCiR4FMA" + "khOCMIcJYGAAAHvVMBv6PIFYAAAAAElFTkSuQmCC";
  this.TMSFNCGRAPHICSDOWN = "data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMBA" + "JqcGAAAAGdJREFUOI3tzjsOwjAURNGDUqSgTxU5K2AVrJtswjUsgHSR0qdxAZZFPrS+3ZvRzBsqf9MUtBtazJk+oM" + "e0VTriiZCFX8nbpENMgfARjsn74vKj5IFruhfc8d6zIF9S\/Hyk5HS4spMVeFcOjszaOwMAAAAASUVORK5CYII=";
  this.TMSFNCGRAPHICSDOWN2 = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAAXNSR0IArs4c6QAAAA" + "RnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMT" + "ZEaa\/1AAAAdElEQVQ4T6XMsQ2AMBBD0UxBBwyA2L9jCWpY5bCLSJfgSFgUr+AHX4mIX2R0yOiQ0SGjQ8Ud5q7RCl" + "vX5IEDLlhS4\/gGvuV\/5YEJTuCAR+qYjW\/N\/81Hko8Mx\/QKST0yHJOMCYfDMcnokNEho0NGh4zfRXkAxSYKjdpwcI" + "UAAAAASUVORK5CYII=";
  this.TMSFNCGRAPHICSUP = "data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMBAJq" + "cGAAAAEZJREFUOI3tjLEJACAMwLLo5EM+rTjpXV7g0oI4tYKbgYwJfJ6Txet4iu6Jxk10TTSuQACidzKAIrGik24ZpC" + "PeJ8ky+DhZ1JENPrPndiwAAAAASUVORK5CYII=";
  this.TMSFNCGRAPHICSUP2 = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAAAXNSR0IArs4c6QAAAARn" + "QU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTZEaa" + "\/1AAAAcklEQVQ4T6XMMQ6AMAiF4S46eSEvremk5\/IC+GggKfE1ER2+gZ9AEZFfaMygMYPGDBozaOyshu0aGo0eXmb4" + "hEbw42qGTx4B\/HiHCWYYPgmDOWEDPfbmT46uNWEwC\/THTp\/oLvQwfEFjBo0ZNGbQ+J6UG5Y9CmuVGrAsAAAAAElFTkS" + "uQmCC";
  this.TMSFNCGRAPHICSPIN = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAYAAAAfSC3RAAAAAXNSR0IArs4c6QAAAARnQ" + "U1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTZEaa\/1" + "AAABKklEQVQ4T2PAB0JDQ5mjoqIEgUxGiAiRIDo6WiY8PHwdEGvW19czQYUJA6AGhbCwsO9Aek1ISIiZvb09C1QKPwB" + "qaAbi\/1DNJ4HYiqDNIE1ADZ9AGqGa\/wLp6xERESZAaVQ\/AyUUgDgIiOdCbQFrQsL\/gPgxUM4OFACSQMYdIP4FFPwNxH" + "+gpqNoAortAYayHNSfjAwgNwMFvaCaMTQA8W+g+M7IyEgNiLuQAMgUoNsDgYruoWkCOe1gcHCwHlQpJgA6wwCo6DySJ" + "hD+BDQwCaoEEwA1SQAVzQLiq0BcBMRXgBhk25PAwEBJqDJUkJaWxgr0QzoQbwYqdABGNCeQrQPSDKTv44w3oFPEgYqm" + "Amk9UNqECjMCxWSBeAeUjx1ANWAkZCSD0AADAwDRpKHlJfOjAwAAAABJRU5ErkJggg==";
  this.TMSFNCGRAPHICSPIN2 = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAA4AAAAOCAYAAAAfSC3RAAAAAXNSR0IArs4c6QAAAARn" + "QU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTZEaa" + "\/1AAAA\/UlEQVQ4T33Su2oCQRTGcddLYWmlQhTLCBIsQgoLSW2nj2Bj7yv4DGkCeYOQxiaBNJapbCI2ooU+gY3gbf1\/" + "w47MjosHfsvM7DlzY1JhGN6TQQGBM2bEOgke8IU60tGY4SYlqWGHT7wgC\/PPT\/SNoFDxH1owKyclWyrawsYJczwj8J" + "O1tR4+oFX8OGONtpLLWGCPA47Q7H78ogqd06yoPXeg4qQCTfaDR1x3ZxuapYsl3NDWJnjCtUjcThNTuKHL6cPNM2yj" + "hHfMMMQ\/tNoGuoNYkeiTwwBjvCKPBlS8QuzFWPoU8QadQ29TY3qbFXxH\/Ru2oYKbhww7kSdMXQD8wIToOQZE\/AAAAA" + "BJRU5ErkJggg==";
  this.TMSFNCGRAPHICSRIGHT = "data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMB" + "AJqcGAAAAFNJREFUOI3tzzsSQFAQRNFDqSezHUuwYBJLsBuhEomE4\/ll3HBq+nY1PxENRrS5xzK4L1jPSiISesxP" + "JcORJJqwU9xthjrX\/ko4mpBQocN0tf1rbDeZDIfcSud0AAAAAElFTkSuQmCC";
  this.TMSFNCGRAPHICSLEFT = "data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEwAACxMBA" + "JqcGAAAAEpJREFUOI3lzKENgEAQAMEJBkkIDdDTSxp6gqMyCkB8IQgMFdwZAutn+U19Bi84MUbxhZrBawSXB+8RDD" + "MaDkyvmQyZyYYuOvh6N24uDUKEV\/\/MAAAAAElFTkSuQmCC";
  this.TMSFNCGRAPHICSEXPAND = "data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAABGdBTUEAALGPC\/xhBQAAAAlwSFlzAAAOvwAADr8" + "BOAVTJAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4zjOaXUAAAACVJREFUGFdj+P\/\/P07MEBYW9h8Xxi" + "8JAjglYACnBAzglMAEDAwARZ1DA4NRF38AAAAASUVORK5CYII=";
  $mod.$init = function () {
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSCLOSE);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSDOWN);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSUP);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSRIGHT);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSLEFT);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSEXPAND);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSPIN);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSPIN2);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSDOWN);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSDOWN2);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSUP);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCGRAPHICSUP2);
  };
},["SysUtils","Math","WEBLib.TMSFNCUtils","WEBLib.TMSFNCHTMLEngine","WEBLib.TMSFNCGraphics.General","WEBLib.TMSFNCGraphics.WEB"]);
rtl.module("WEBLib.TMSFNCTypes",["System","Types","Classes","WEBLib.Graphics","SysUtils","WEBLib.Controls","Math"],function () {
  "use strict";
  var $mod = this;
  rtl.createInterface($mod,"ITMSFNCProductInfo","{C53329EA-7B3A-4507-AD9E-88ACD6A85054}",["GetVersion","GetDocURL","GetTipsURL"],pas.System.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("GetVersion",1,null,rtl.string);
    $r.addMethod("GetDocURL",1,null,rtl.string);
    $r.addMethod("GetTipsURL",1,null,rtl.string);
  });
  this.TTMSFNCBaseDocURL = "http:\/\/www.tmssoftware.biz\/Download\/Manuals\/TMSFNCUIPackDevGuide.pdf";
  this.TTMSFNCBaseTipsURL = "http:\/\/www.tmssoftware.com\/site\/tmsfnccore.asp?s=faq";
  this.pidWeb = 0x1000;
  this.ssCommand = pas["WEBLib.Controls"].TShiftState$a.ssCtrl;
  this.TMSPlatformsDesktop = 0;
  this.TMSPlatforms = 0;
  this.TMSPlatformsWeb = 0;
  this.TMSPlatformsWebDesktop = 0;
  this.KEY_CANCEL = 3;
  this.KEY_CONTROL = 17;
  this.KEY_SHIFT = 16;
  this.KEY_ESCAPE = 27;
  this.KEY_INSERT = 45;
  this.KEY_DELETE = 46;
  this.KEY_TAB = 9;
  this.KEY_PRIOR = 33;
  this.KEY_NEXT = 34;
  this.KEY_UP = 38;
  this.KEY_DOWN = 40;
  this.KEY_RIGHT = 39;
  this.KEY_LEFT = 37;
  this.KEY_HOME = 36;
  this.KEY_END = 35;
  this.KEY_RETURN = 13;
  this.KEY_SPACE = 32;
  this.KEY_MENU = 18;
  this.KEY_BACK = 8;
  this.KEY_F1 = 112;
  this.KEY_F2 = 113;
  this.KEY_F3 = 114;
  this.KEY_F4 = 115;
  this.KEY_F5 = 116;
  this.KEY_F6 = 117;
  this.KEY_F7 = 118;
  this.KEY_F8 = 119;
  this.KEY_F9 = 120;
  this.KEY_F10 = 121;
  this.KEY_F11 = 122;
  this.KEY_F12 = 123;
  this.SReadError = "Stream read error";
  this.SWriteError = "Stream write error";
  rtl.createClass($mod,"EStreamError",pas.SysUtils.Exception,function () {
  });
  rtl.createClass($mod,"EFilerError",$mod.EStreamError,function () {
  });
  rtl.createClass($mod,"EReadError",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"EWriteError",$mod.EFilerError,function () {
  });
  rtl.createClass($mod,"TStream",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FPosition = 0;
      this.FSize = 0;
      this.FCapacity = 0;
      this.FBytes = [];
      this.FOnLoaded = null;
    };
    this.$final = function () {
      this.FBytes = undefined;
      this.FOnLoaded = undefined;
      pas.System.TObject.$final.call(this);
    };
    this.SetSize = function (NewSize) {
      var OldPosition = 0;
      OldPosition = this.FPosition;
      this.SetCapacity(NewSize);
      this.FSize = NewSize;
      if (OldPosition > NewSize) this.FPosition = NewSize;
    };
    this.SetCapacity = function (NewCapacity) {
      this.FBytes = rtl.arraySetLength(this.FBytes,0,NewCapacity);
      this.FCapacity = NewCapacity;
    };
    this.Clear = function () {
      this.FBytes = rtl.arraySetLength(this.FBytes,0,0);
      this.FCapacity = 0;
      this.FPosition = 0;
    };
    this.OpenFile = function (FileType) {
      var b = [];
      var s = "";
      var f = "";
      f = "tmp." + pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetFileExtension(FileType);
      b = this.FBytes;
      s = FileType;
      var file = new Blob([new Uint8Array(b)], {type: s});
      var fileURL = window.URL.createObjectURL(file);
      if (window.navigator && window.navigator.msSaveOrOpenBlob) {
        window.navigator.msSaveOrOpenBlob(file, f);
        return;
      }
      window.open(fileURL);
    };
    this.SaveToFile = function (FileName) {
      var s = "";
      var b = [];
      s = FileName;
      b = this.FBytes;
      var userAgent = navigator.userAgent.toLowerCase();
          if (userAgent.indexOf('electron/') > -1) {
            var arr = new Uint8Array(b);
            nfs.writeFileSync(s, arr);
          } else {
            var newBlob = new Blob([new Uint8Array(b)], {type: "octet/stream"})
      
            if (window.navigator && window.navigator.msSaveOrOpenBlob) {
              window.navigator.msSaveOrOpenBlob(newBlob, s);
              return;
            }
      
            const data = window.URL.createObjectURL(newBlob);
            var link = document.createElement('a');
            link.href = data;
            link.download = s;
            document.body.appendChild(link);
            link.click();
            setTimeout(function(){
             document.body.removeChild(link);
              window.URL.revokeObjectURL(data);
            }, 100);
          };
    };
    this.LoadFromFile = function (FileName) {
      var u = "";
      u = FileName;
      var me = this;
      var xhr = new XMLHttpRequest();
      xhr.open('GET', u, true);
      xhr.responseType = 'blob';
      xhr.onload = function(e) {
        if (this.status == 200) {
          pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.LoadFile(this.response, function(f){
            me.Write(f.Data, f.Data.byteLength);
            if (me.FOnLoaded){
              me.FOnLoaded(me);
            }
          }
          );
        }
      };
      xhr.send();
    };
    this.LoadFromStream = function (AStream) {
      var Count = 0;
      AStream.FPosition = 0;
      Count = AStream.FSize;
      this.SetSize(Count);
      if (Count !== 0) AStream.ReadBuffer({p: this, get: function () {
          return this.p.FBytes;
        }, set: function (v) {
          this.p.FBytes = v;
        }},Count);
    };
    this.SaveToStream = function (AStream) {
      if (this.FSize !== 0) AStream.WriteBuffer(this.FBytes,this.FSize);
    };
    this.Read = function (Buffer, Count) {
      var Result = 0;
      Result = this.Read$1(Buffer,0,Count);
      return Result;
    };
    this.Read$1 = function (Buffer, Offset, Count) {
      var Result = 0;
      var I = 0;
      if ((this.FPosition >= 0) && (Count >= 0)) {
        if (this.FSize > this.FPosition) {
          if (this.FSize > (Count + this.FPosition)) {
            Result = Count}
           else Result = this.FSize - this.FPosition;
          Buffer.set(rtl.arraySetLength(Buffer.get(),0,Math.min(this.FSize,Count)));
          for (var $l1 = Offset + this.FPosition, $end2 = Math.min(this.FSize - 1,(Offset + this.FPosition + Count) - 1); $l1 <= $end2; $l1++) {
            I = $l1;
            Buffer.get()[I - Offset - this.FPosition] = this.FBytes[I];
          };
          this.FPosition += Result;
          return Result;
        };
      };
      Result = 0;
      return Result;
    };
    this.ReadBuffer = function (Buffer, Count) {
      this.ReadBuffer$1(Buffer,0,Count);
    };
    this.ReadBuffer$1 = function (Buffer, Offset, Count) {
      var LTotalCount = 0;
      var LReadCount = 0;
      LTotalCount = this.Read$1(Buffer,Offset,Count);
      if (LTotalCount < 0) throw $mod.EReadError.$create("Create$1",[$mod.SReadError]);
      while (LTotalCount < Count) {
        LReadCount = this.Read$1(Buffer,Offset + LTotalCount,Count - LTotalCount);
        if (LReadCount <= 0) {
          throw $mod.EReadError.$create("Create$1",[$mod.SReadError])}
         else LTotalCount += LReadCount;
      };
    };
    this.WriteBuffer = function (Buffer, Count) {
      this.WriteBuffer$1(Buffer,0,Count);
    };
    this.WriteBuffer$1 = function (Buffer, Offset, Count) {
      var LTotalCount = 0;
      var LWrittenCount = 0;
      LTotalCount = this.Write$1(Buffer,Offset,Count);
      if (LTotalCount < 0) throw $mod.EWriteError.$create("Create$1",[$mod.SWriteError]);
      while (LTotalCount < Count) {
        LWrittenCount = this.Write$1(Buffer,Offset + LTotalCount,Count - LTotalCount);
        if (LWrittenCount <= 0) {
          throw $mod.EWriteError.$create("Create$1",[$mod.SWriteError])}
         else LTotalCount += LWrittenCount;
      };
    };
    var MaxBufSize = 0xF000;
    this.CopyFrom = function (Source, Count) {
      var Result = 0;
      var BufSize = 0;
      var N = 0;
      var Buffer = [];
      if (Count <= 0) {
        Source.FPosition = 0;
        Count = Source.FSize;
      };
      Result = Count;
      if (Count > 61440) {
        BufSize = 61440}
       else BufSize = Count;
      Buffer = rtl.arraySetLength(Buffer,0,BufSize);
      try {
        while (Count !== 0) {
          if (Count > BufSize) {
            N = BufSize}
           else N = Count;
          Source.ReadBuffer({get: function () {
              return Buffer;
            }, set: function (v) {
              Buffer = v;
            }},N);
          this.WriteBuffer(Buffer,N);
          Count -= N;
        };
      } finally {
        Buffer = rtl.arraySetLength(Buffer,0,0);
      };
      return Result;
    };
    this.Write = function (Buffer, Count) {
      var Result = 0;
      var Pos = 0;
      var I = 0;
      if ((this.FPosition >= 0) && (Count >= 0)) {
        Pos = this.FPosition + Count;
        if (Pos > 0) {
          if (Pos > this.FSize) {
            if (Pos > this.FCapacity) this.SetCapacity(Pos);
            this.FSize = Pos;
          };
          for (var $l1 = 0, $end2 = rtl.length(Buffer) - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            this.FBytes[this.FPosition + I] = Buffer[I];
          };
          this.FPosition = Pos;
          Result = Count;
          return Result;
        };
      };
      Result = 0;
      return Result;
    };
    this.Write$1 = function (Buffer, Offset, Count) {
      var Result = 0;
      var b = [];
      var I = 0;
      Result = 0;
      if ((rtl.length(Buffer) - Offset) > 0) {
        b = rtl.arraySetLength(b,0,rtl.length(Buffer) - Offset);
        for (var $l1 = Offset, $end2 = rtl.length(Buffer) - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          b[I - Offset] = Buffer[I];
        };
        Result = this.Write(b,Count);
      };
      return Result;
    };
  });
  rtl.createClass($mod,"TMemoryStream",$mod.TStream,function () {
  });
  rtl.createClass($mod,"TStringStream",$mod.TStream,function () {
    this.GetDataString = function () {
      var Result = "";
      var h = "";
      h = this.ByteArrayToString(this.FBytes);
      if (!pas.System.Assigned(h)) {
        Result = ""}
       else Result = h;
      return Result;
    };
    this.StringToByteArray = function (AString) {
      var Result = [];
      var s = "";
      s = AString;
      function stringToByteArray(str) {
            var result = [];
            for (var i = 0; i < str.length; i++) {
              result.push(str.charCodeAt(i));
            }
            return result;
          }
      
          return stringToByteArray(s);
      return Result;
    };
    this.ByteArrayToString = function (ABytes) {
      var Result = "";
      var b = [];
      b = ABytes;
      function stringFromByteArray(data)
          {
            const extraByteMap = [ 1, 1, 1, 1, 2, 2, 3, 0 ];
            var count = data.length;
            var str = "";
      
            for (var index = 0;index < count;)
            {
              var ch = data[index++];
              if (ch & 0x80)
              {
                var extra = extraByteMap[(ch >> 3) & 0x07];
                if (!(ch & 0x40) || !extra || ((index + extra) > count))
                  return null;
      
                ch = ch & (0x3F >> extra);
                for (;extra > 0;extra -= 1)
                {
                  var chx = data[index++];
                  if ((chx & 0xC0) != 0x80)
                    return null;
      
                  ch = (ch << 6) | (chx & 0x3F);
                }
              }
      
              str += String.fromCharCode(ch);
            }
      
            return str + "";
          }
      
          return stringFromByteArray(b);
      return Result;
    };
    this.Create$1 = function (AString) {
      pas.System.TObject.Create.call(this);
      this.FBytes = this.StringToByteArray(AString);
      this.FSize = rtl.length(this.FBytes);
      this.FCapacity = this.FSize;
      return this;
    };
    this.ReadString = function (Count) {
      var Result = "";
      var b = [];
      var I = 0;
      if (Count > (this.FSize - this.FPosition)) Count = this.FSize - this.FPosition;
      b = rtl.arraySetLength(b,0,Count);
      for (var $l1 = this.FPosition, $end2 = (Count + this.FPosition) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        b[I - this.FPosition] = this.FBytes[I];
      };
      Result = this.ByteArrayToString(b);
      this.FPosition = this.FPosition + Count;
      return Result;
    };
    this.WriteString = function (AString) {
      var LBytes = [];
      LBytes = this.StringToByteArray(AString);
      this.Write(LBytes,rtl.length(LBytes));
    };
  });
  rtl.createClass($mod,"TBytesStream",$mod.TStream,function () {
  });
  rtl.createClass($mod,"TPopupMenu",pas.Classes.TComponent,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.recNewT($mod,"TSizeF",function () {
    this.cx = 0.0;
    this.cy = 0.0;
    this.$eq = function (b) {
      return (this.cx === b.cx) && (this.cy === b.cy);
    };
    this.$assign = function (s) {
      this.cx = s.cx;
      this.cy = s.cy;
      return this;
    };
    var $r = $mod.$rtti.$Record("TSizeF",{});
    $r.addField("cx",rtl.double);
    $r.addField("cy",rtl.double);
  });
  rtl.recNewT($mod,"TPointF",function () {
    this.X = 0.0;
    this.Y = 0.0;
    this.$eq = function (b) {
      return (this.X === b.X) && (this.Y === b.Y);
    };
    this.$assign = function (s) {
      this.X = s.X;
      this.Y = s.Y;
      return this;
    };
    var $r = $mod.$rtti.$Record("TPointF",{});
    $r.addField("X",rtl.double);
    $r.addField("Y",rtl.double);
  });
  rtl.recNewT($mod,"TRectF",function () {
    this.Left = 0.0;
    this.Top = 0.0;
    this.Right = 0.0;
    this.Bottom = 0.0;
    this.$eq = function (b) {
      return (this.Left === b.Left) && (this.Top === b.Top) && (this.Right === b.Right) && (this.Bottom === b.Bottom);
    };
    this.$assign = function (s) {
      this.Left = s.Left;
      this.Top = s.Top;
      this.Right = s.Right;
      this.Bottom = s.Bottom;
      return this;
    };
    var $r = $mod.$rtti.$Record("TRectF",{});
    $r.addField("Left",rtl.double);
    $r.addField("Top",rtl.double);
    $r.addField("Right",rtl.double);
    $r.addField("Bottom",rtl.double);
  });
  $mod.$rtti.$Class("TTMSFNCBitmap");
  rtl.createClass($mod,"TTMSFNCSVGImport",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FViewRect = $mod.TRectF.$new();
      this.FGrayScale = false;
    };
    this.$final = function () {
      this.FViewRect = undefined;
      pas.System.TObject.$final.call(this);
    };
  });
  rtl.createClass($mod,"TTMSFNCBitmap",pas["WEBLib.Graphics"].TBitmap,function () {
    this.CreateFromStream = function (AStream) {
      this.Create$3();
      this.LoadFromStream(AStream);
      return this;
    };
  });
  $mod.$rtti.$DynArray("TTMSFNCObjectExcludePropertyListArray",{eltype: rtl.string});
  rtl.createHelper($mod,"TTMSFNCObjectHelper",null,function () {
    this.ToJSON = function (AExcludedProperties) {
      var Result = "";
      var s = null;
      var p = null;
      var arr = [];
      var I = 0;
      arr = rtl.arraySetLength(arr,"",rtl.length(AExcludedProperties));
      for (var $l1 = 0, $end2 = rtl.length(AExcludedProperties) - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        arr[I] = AExcludedProperties[I];
      };
      s = $mod.TStringStream.$create("Create$1",[""]);
      p = pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.$create("Create");
      try {
        pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.FExcludeProperties = arr;
        p.$class.SaveSettingsToStream(this,s);
        Result = s.GetDataString();
      } finally {
        p = rtl.freeLoc(p);
        s = rtl.freeLoc(s);
      };
      return Result;
    };
    this.ToJSON$1 = function () {
      var Result = "";
      var s = null;
      s = $mod.TStringStream.$create("Create$1",[""]);
      try {
        pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.SaveSettingsToStream(this,s);
        Result = s.GetDataString();
      } finally {
        s = rtl.freeLoc(s);
      };
      return Result;
    };
    this.FromJSON = function (Value) {
      var s = null;
      var cs = "";
      var obj = null;
      s = $mod.TStringStream.$create("Create$1",[Value]);
      try {
        obj = pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.FIOReference;
        cs = pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.ClassTypeVariable;
        pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.ClassTypeVariable = "";
        pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.FIOReference = this;
        pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.LoadSettingsFromStream(this,s);
        pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.ClassTypeVariable = cs;
        pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.FIOReference = obj;
      } finally {
        s = rtl.freeLoc(s);
      };
    };
    this.Log = function () {
      pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.Log($mod.TTMSFNCObjectHelper.ToJSON$1.call(this));
    };
    this.SaveToJSONStream = function (AStream) {
      pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.SaveSettingsToStream(this,AStream);
    };
    this.LoadFromJSONStream = function (AStream) {
      pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.LoadSettingsFromStream(this,AStream);
    };
  });
  rtl.createClass($mod,"TTMSFNCMargins",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FRight = 0.0;
      this.FBottom = 0.0;
      this.FTop = 0.0;
      this.FLeft = 0.0;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetBottom = function (Value) {
      if (this.FBottom !== Value) {
        this.FBottom = Value;
        this.Changed();
      };
    };
    this.SetLeft = function (Value) {
      if (this.FLeft !== Value) {
        this.FLeft = Value;
        this.Changed();
      };
    };
    this.SetRight = function (Value) {
      if (this.FRight !== Value) {
        this.FRight = Value;
        this.Changed();
      };
    };
    this.SetTop = function (Value) {
      if (this.FTop !== Value) {
        this.FTop = Value;
        this.Changed();
      };
    };
    this.IsLeftStored = function () {
      var Result = false;
      Result = this.FLeft !== 0;
      return Result;
    };
    this.IsTopStored = function () {
      var Result = false;
      Result = this.FTop !== 0;
      return Result;
    };
    this.IsRightStored = function () {
      var Result = false;
      Result = this.FRight !== 0;
      return Result;
    };
    this.IsBottomStored = function () {
      var Result = false;
      Result = this.FBottom !== 0;
      return Result;
    };
    this.Changed = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$1 = function () {
      this.FLeft = 0;
      this.FBottom = 0;
      this.FRight = 0;
      this.FTop = 0;
      return this;
    };
    this.Create$2 = function (ARect) {
      this.FLeft = ARect.Left;
      this.FBottom = ARect.Bottom;
      this.FRight = ARect.Right;
      this.FTop = ARect.Top;
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCMargins.isPrototypeOf(Source)) {
        this.FLeft = rtl.as(Source,$mod.TTMSFNCMargins).FLeft;
        this.FTop = rtl.as(Source,$mod.TTMSFNCMargins).FTop;
        this.FRight = rtl.as(Source,$mod.TTMSFNCMargins).FRight;
        this.FBottom = rtl.as(Source,$mod.TTMSFNCMargins).FBottom;
      };
    };
    this.Empty = function () {
      var Result = false;
      var r = $mod.TRectF.$new();
      r.$assign($mod.RectF(this.FLeft,this.FTop,this.FRight,this.FBottom));
      Result = $mod.RectIsEmpty(r);
      return Result;
    };
    this.Rect = function () {
      var Result = $mod.TRectF.$new();
      Result.$assign($mod.RectF(this.FLeft,this.FTop,this.FRight,this.FBottom));
      return Result;
    };
    this.PaddingRect = function (R) {
      var Result = $mod.TRectF.$new();
      Result.$assign($mod.RectF(R.Left + this.FLeft,R.Top + this.FTop,R.Right - this.FRight,R.Bottom - this.FBottom));
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Left",14,rtl.double,"FLeft","SetLeft",{stored: "IsLeftStored"});
    $r.addProperty("Top",14,rtl.double,"FTop","SetTop",{stored: "IsTopStored"});
    $r.addProperty("Right",14,rtl.double,"FRight","SetRight",{stored: "IsRightStored"});
    $r.addProperty("Bottom",14,rtl.double,"FBottom","SetBottom",{stored: "IsBottomStored"});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
  });
  rtl.createClass($mod,"TTMSFNCPoint",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FY = 0.0;
      this.FX = 0.0;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetX = function (Value) {
      if (this.FX !== Value) {
        this.FX = Value;
        this.Changed();
      };
    };
    this.SetY = function (Value) {
      if (this.FY !== Value) {
        this.FY = Value;
        this.Changed();
      };
    };
    this.IsXStored = function () {
      var Result = false;
      Result = this.FX !== 0;
      return Result;
    };
    this.IsYStored = function () {
      var Result = false;
      Result = this.FY !== 0;
      return Result;
    };
    this.Changed = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$1 = function () {
      this.FX = 0;
      this.FY = 0;
      return this;
    };
    this.Create$2 = function (APoint) {
      this.FX = APoint.X;
      this.FY = APoint.Y;
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCPoint.isPrototypeOf(Source)) {
        this.FX = rtl.as(Source,$mod.TTMSFNCPoint).FX;
        this.FY = rtl.as(Source,$mod.TTMSFNCPoint).FY;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("X",14,rtl.double,"FX","SetX",{stored: "IsXStored"});
    $r.addProperty("Y",14,rtl.double,"FY","SetY",{stored: "IsYStored"});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
  });
  rtl.createClass($mod,"TTMSFNCScaledBitmap",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FBitmap = null;
      this.FScale = 0.0;
      this.FBitmapName = "";
    };
    this.$final = function () {
      this.FBitmap = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.IsScaleStored = function () {
      var Result = false;
      Result = this.FScale !== 1.0;
      return Result;
    };
    this.SetBitmap = function (Value) {
      if (this.FBitmap !== Value) {
        this.FBitmap.Assign(Value);
        this.Changed(false);
      };
    };
    this.SetScale = function (Value) {
      if (this.FScale !== Value) {
        this.FScale = Value;
        this.Changed(false);
      };
    };
    this.SetBitmapName = function (Value) {
      if (this.FBitmapName !== Value) {
        this.FBitmapName = Value;
        this.Changed(false);
      };
    };
    this.BitmapChanged = function (Sender) {
      this.Changed(false);
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      this.FBitmap = $mod.TTMSFNCBitmap.$create("Create$3");
      this.FBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FScale = 1.0;
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FBitmap");
      pas.Classes.TCollectionItem.Destroy.call(this);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCScaledBitmap.isPrototypeOf(Source)) {
        this.FBitmap.Assign(rtl.as(Source,$mod.TTMSFNCScaledBitmap).FBitmap);
        this.FBitmapName = rtl.as(Source,$mod.TTMSFNCScaledBitmap).FBitmapName;
        this.FScale = rtl.as(Source,$mod.TTMSFNCScaledBitmap).FScale;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Bitmap",2,$mod.$rtti["TTMSFNCBitmap"],"FBitmap","SetBitmap");
    $r.addProperty("BitmapName",2,rtl.string,"FBitmapName","SetBitmapName");
    $r.addProperty("Scale",14,rtl.double,"FScale","SetScale",{stored: "IsScaleStored"});
  });
  rtl.createClass($mod,"TTMSFNCScaledBitmaps",pas.Classes.TOwnedCollection,function () {
    this.$init = function () {
      pas.Classes.TOwnedCollection.$init.call(this);
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOnChange = undefined;
      pas.Classes.TOwnedCollection.$final.call(this);
    };
    this.GetItems = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItems = function (Index, Value) {
      this.SetItem(Index,Value);
    };
    this.GetBitmap = function (Scale) {
      var Result = null;
      Result = this.GetBitmapByScale(Scale);
      return Result;
    };
    this.SetBitmap = function (Scale, Value) {
      var b = null;
      b = this.GetItemByScale(Scale);
      if (!(b != null)) b = this.Add$1(Scale);
      b.FBitmap.Assign(Value);
    };
    this.Update = function (Item) {
      pas.Classes.TCollection.Update.apply(this,arguments);
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,$mod.TTMSFNCScaledBitmap);
      return this;
    };
    this.Add$1 = function (Scale) {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      Result.SetScale(Scale);
      return Result;
    };
    this.AddBitmapFromResource = function (ResourceName, Scale) {
      var Result = null;
      Result = this.AddBitmapFromResource$1(ResourceName,0,Scale);
      return Result;
    };
    this.AddBitmapFromResource$1 = function (ResourceName, AInstance, Scale) {
      var Result = null;
      Result = this.Add$1(Scale);
      Result.FBitmap.LoadFromResource$1(ResourceName,AInstance);
      return Result;
    };
    this.AddBitmap = function (Bitmap, Scale) {
      var Result = null;
      Result = this.Add$1(Scale);
      Result.FBitmap.Assign(Bitmap);
      return Result;
    };
    this.AddBitmapName = function (BitmapName, Scale) {
      var Result = null;
      Result = this.Add$1(Scale);
      Result.SetBitmapName(BitmapName);
      return Result;
    };
    this.AddDrawBitmap = function (Bitmap, Scale) {
      var Result = null;
      Result = this.Add$1(Scale);
      Result.FBitmap.Assign(Bitmap);
      return Result;
    };
    this.Insert$1 = function (Index) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,Index);
      return Result;
    };
    this.Insert$2 = function (Index, Scale) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,Index);
      Result.SetScale(Scale);
      return Result;
    };
    this.GetBitmapByScale = function (Scale) {
      var Result = null;
      var it = null;
      Result = null;
      it = this.GetItemByScale(Scale);
      if (it != null) Result = it.FBitmap;
      return Result;
    };
    this.GetItemByScale = function (Scale) {
      var Result = null;
      var I = 0;
      var cl = null;
      var it = null;
      var mx = 0.0;
      Result = null;
      cl = null;
      mx = 0;
      for (var $l1 = 0, $end2 = this.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = this.GetItems(I);
        if (it.FScale === Scale) {
          Result = it;
          break;
        } else if ((it.FScale !== Scale) && (it.FScale > mx)) {
          cl = it;
          mx = it.FScale;
        };
      };
      if (Result === null) Result = cl;
      return Result;
    };
  });
  this.TTMSFNCPictureFormat = {"0": "pfBMP", pfBMP: 0, "1": "pfGIF", pfGIF: 1, "2": "pfJPG", pfJPG: 2, "3": "pfPNG", pfPNG: 3, "4": "pfICO", pfICO: 4, "5": "pfTiff", pfTiff: 5, "6": "pfMetaFile", pfMetaFile: 6, "7": "pfNone", pfNone: 7};
  $mod.$rtti.$Enum("TTMSFNCPictureFormat",{minvalue: 0, maxvalue: 7, ordtype: 1, enumtype: this.TTMSFNCPictureFormat});
  rtl.createInterface($mod,"ITMSFNCCustomEditor","{CC0C60B7-75F3-47CE-8A7F-8005A19F12E8}",["SetText","SetSelStart","SetSelLength","GetTextLength"],pas.System.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("SetText",0,[["AValue",rtl.string]]);
    $r.addMethod("SetSelStart",0,[["AValue",rtl.longint]]);
    $r.addMethod("SetSelLength",0,[["AValue",rtl.longint]]);
    $r.addMethod("GetTextLength",1,null,rtl.longint);
  });
  rtl.createClass($mod,"TTMSFNCOwnedCollection",pas.Classes.TOwnedCollection,function () {
  });
  rtl.createClass($mod,"TTMSFNCPersistent",pas.Classes.TPersistent,function () {
  });
  this.InflateRectEx = function (R, DX, DY) {
    R.Left = R.Left - DX;
    R.Right = R.Right + DX;
    R.Top = R.Top - DY;
    R.Bottom = R.Bottom + DY;
  };
  this.ConvertToRectF = function (Rect) {
    var Result = $mod.TRectF.$new();
    Result.Left = Rect.Left;
    Result.Top = Rect.Top;
    Result.Right = Rect.Right;
    Result.Bottom = Rect.Bottom;
    return Result;
  };
  this.ConvertToRectF$1 = function (Rect) {
    var Result = $mod.TRectF.$new();
    Result.$assign(Rect);
    return Result;
  };
  this.ConvertToRect = function (Rect) {
    var Result = pas.Types.TRect.$new();
    Result.Left = Math.round(Rect.Left);
    Result.Top = Math.round(Rect.Top);
    Result.Right = Math.round(Rect.Right);
    Result.Bottom = Math.round(Rect.Bottom);
    return Result;
  };
  this.ConvertToRect$1 = function (Rect) {
    var Result = pas.Types.TRect.$new();
    Result.$assign(Rect);
    return Result;
  };
  this.ConvertToSizeF = function (Size) {
    var Result = $mod.TSizeF.$new();
    Result.cx = Size.cx;
    Result.cy = Size.cy;
    return Result;
  };
  this.ConvertToSizeF$1 = function (Size) {
    var Result = $mod.TSizeF.$new();
    Result.$assign(Size);
    return Result;
  };
  this.ConvertToSize = function (Size) {
    var Result = pas.Types.TSize.$new();
    Result.cx = Math.round(Size.cx);
    Result.cy = Math.round(Size.cy);
    return Result;
  };
  this.ConvertToSize$1 = function (Size) {
    var Result = pas.Types.TSize.$new();
    Result.$assign(Size);
    return Result;
  };
  this.ConvertToPointF = function (Point) {
    var Result = $mod.TPointF.$new();
    Result.X = Point.x;
    Result.Y = Point.y;
    return Result;
  };
  this.ConvertToPointF$1 = function (Point) {
    var Result = $mod.TPointF.$new();
    Result.$assign(Point);
    return Result;
  };
  this.ConvertToPoint = function (Point) {
    var Result = pas.Types.TPoint.$new();
    Result.x = Math.round(Point.X);
    Result.y = Math.round(Point.Y);
    return Result;
  };
  this.ConvertToPoint$1 = function (Point) {
    var Result = pas.Types.TPoint.$new();
    Result.$assign(Point);
    return Result;
  };
  this.OffsetRectEx = function (R, DX, DY) {
    var Result = false;
    R.Left = R.Left + DX;
    R.Right = R.Right + DX;
    R.Top = R.Top + DY;
    R.Bottom = R.Bottom + DY;
    Result = true;
    return Result;
  };
  this.OffsetRectEx$1 = function (R, DX, DY) {
    var Result = false;
    R.Left = R.Left + DX;
    R.Right = R.Right + DX;
    R.Top = R.Top + DY;
    R.Bottom = R.Bottom + DY;
    Result = true;
    return Result;
  };
  this.PtInRectEx = function (Rect, P) {
    var Result = false;
    Result = (P.X >= Rect.Left) && (P.X < Rect.Right) && (P.Y >= Rect.Top) && (P.Y < Rect.Bottom);
    return Result;
  };
  this.IntersectRectEx = function (Rect1, Rect2) {
    var Result = false;
    Result = (Rect1.Left < Rect2.Right) && (Rect1.Right > Rect2.Left) && (Rect1.Top < Rect2.Bottom) && (Rect1.Bottom > Rect2.Top);
    return Result;
  };
  this.IntersectRectEx$1 = function (Rect, R1, R2) {
    var Result = false;
    var tmpRect = $mod.TRectF.$new();
    tmpRect.$assign(R1);
    if (R2.Left > R1.Left) tmpRect.Left = R2.Left;
    if (R2.Top > R1.Top) tmpRect.Top = R2.Top;
    if (R2.Right < R1.Right) tmpRect.Right = R2.Right;
    if (R2.Bottom < R1.Bottom) tmpRect.Bottom = R2.Bottom;
    Result = !$mod.RectIsEmpty(tmpRect);
    if (!Result) {
      tmpRect.Top = 0.0;
      tmpRect.Bottom = 0.0;
      tmpRect.Left = 0.0;
      tmpRect.Right = 0.0;
    };
    Rect.$assign(tmpRect);
    return Result;
  };
  this.EqualRectEx = function (R1, R2) {
    var Result = false;
    Result = (R1.Left === R2.Left) && (R1.Right === R2.Right) && (R1.Top === R2.Top) && (R1.Bottom === R2.Bottom);
    return Result;
  };
  this.EqualRectEx$1 = function (R1, R2) {
    var Result = false;
    Result = (R1.Left === R2.Left) && (R1.Right === R2.Right) && (R1.Top === R2.Top) && (R1.Bottom === R2.Bottom);
    return Result;
  };
  this.RectWidthEx = function (Rect) {
    var Result = 0;
    Result = Rect.Right - Rect.Left;
    return Result;
  };
  this.RectWidthEx$1 = function (Rect) {
    var Result = 0.0;
    Result = Rect.Right - Rect.Left;
    return Result;
  };
  this.RectHeightEx = function (Rect) {
    var Result = 0;
    Result = Rect.Bottom - Rect.Top;
    return Result;
  };
  this.RectHeightEx$1 = function (Rect) {
    var Result = 0.0;
    Result = Rect.Bottom - Rect.Top;
    return Result;
  };
  this.RectCenterEx = function (R, B) {
    var Result = pas.Types.TRect.$new();
    $mod.OffsetRectEx(R,-R.Left,-R.Top);
    $mod.OffsetRectEx(R,Math.floor(($mod.RectWidthEx(B) - $mod.RectWidthEx(R)) / 2),Math.floor(($mod.RectHeightEx(B) - $mod.RectHeightEx(R)) / 2));
    $mod.OffsetRectEx(R,B.Left,B.Top);
    Result.$assign(R);
    return Result;
  };
  this.RectCenterEx$1 = function (R, B) {
    var Result = $mod.TRectF.$new();
    $mod.OffsetRectEx$1(R,-R.Left,-R.Top);
    $mod.OffsetRectEx$1(R,Math.round(($mod.RectWidthEx$1(B) - $mod.RectWidthEx$1(R)) / 2),Math.round(($mod.RectHeightEx$1(B) - $mod.RectHeightEx$1(R)) / 2));
    $mod.OffsetRectEx$1(R,B.Left,B.Top);
    Result.$assign(R);
    return Result;
  };
  this.RectCenterAtEx = function (Rect, ADesignatedArea) {
    var Result = $mod.TRectF.$new();
    Result.$assign(Rect);
    $mod.RectCenterEx$1(Result,ADesignatedArea);
    return Result;
  };
  this.RectSnapToPixelEx = function (Rect, AScale, APlaceBetweenPixels) {
    var Result = $mod.TRectF.$new();
    var LScale = 0.0;
    var HalfPixel = 0.0;
    if (AScale <= 0) {
      LScale = 1}
     else LScale = AScale;
    Result.Left = pas.System.Trunc(Rect.Left * LScale) / LScale;
    Result.Top = pas.System.Trunc(Rect.Top * LScale) / LScale;
    Result.Right = Result.Left + (Math.round((Rect.Right - Rect.Left) * LScale) / LScale);
    Result.Bottom = Result.Top + (Math.round((Rect.Bottom - Rect.Top) * LScale) / LScale);
    if (APlaceBetweenPixels) {
      HalfPixel = 1 / (2 * LScale);
      $mod.OffsetRectEx$1(Result,HalfPixel,HalfPixel);
    };
    return Result;
  };
  this.RectFitIntoEx = function (Rect, ADesignatedArea, Ratio) {
    var Result = $mod.TRectF.$new();
    if (((ADesignatedArea.Right - ADesignatedArea.Left) <= 0) || ((ADesignatedArea.Bottom - ADesignatedArea.Top) <= 0)) {
      Ratio.set(1);
      return Rect;
    };
    if (((Rect.Right - Rect.Left) / (ADesignatedArea.Right - ADesignatedArea.Left)) > ((Rect.Bottom - Rect.Top) / (ADesignatedArea.Bottom - ADesignatedArea.Top))) {
      Ratio.set((Rect.Right - Rect.Left) / (ADesignatedArea.Right - ADesignatedArea.Left))}
     else Ratio.set((Rect.Bottom - Rect.Top) / (ADesignatedArea.Bottom - ADesignatedArea.Top));
    Result.$assign($mod.RectF(0,0,(Rect.Right - Rect.Left) / Ratio.get(),(Rect.Bottom - Rect.Top) / Ratio.get()));
    $mod.RectCenterEx$1(Result,ADesignatedArea);
    return Result;
  };
  this.RectFitIntoEx$1 = function (Rect, ADesignatedArea) {
    var Result = $mod.TRectF.$new();
    var Ratio = 0.0;
    Result.$assign($mod.RectFitIntoEx(Rect,ADesignatedArea,{get: function () {
        return Ratio;
      }, set: function (v) {
        Ratio = v;
      }}));
    return Result;
  };
  this.GetPointLength = function (Point) {
    var Result = 0.0;
    Result = Math.sqrt(pas.System.Sqr$1(Point.X) + pas.System.Sqr$1(Point.Y));
    return Result;
  };
  this.MakeRectF = function (Left, Top, Width, Height) {
    var Result = $mod.TRectF.$new();
    Result.Left = Left;
    Result.Top = Top;
    Result.Right = Left + Width;
    Result.Bottom = Top + Height;
    return Result;
  };
  this.CenterPointEx = function (R) {
    var Result = $mod.TPointF.$new();
    Result.X = ((R.Right - R.Left) / 2.0) + R.Left;
    Result.Y = ((R.Bottom - R.Top) / 2.0) + R.Top;
    return Result;
  };
  this.CompareValueEx = function (A, B, Epsilon) {
    var Result = 0;
    if (pas.Math.SameValue(A,B,Epsilon)) {
      Result = 0}
     else if (A < B) {
      Result = -1}
     else Result = 1;
    return Result;
  };
  this.RectIsEmpty = function (R) {
    var Result = false;
    Result = (R.Right < R.Left) || pas.Math.SameValue(R.Right,R.Left,0.0) || (R.Bottom < R.Top) || pas.Math.SameValue(R.Bottom,R.Top,0.0);
    return Result;
  };
  this.EmptyRect = function () {
    var Result = $mod.TRectF.$new();
    Result.$assign($mod.RectF(0,0,0,0));
    return Result;
  };
  this.RectIntersectsWithEx = function (ARect, R) {
    var Result = false;
    Result = (ARect.Left < R.Right) && (ARect.Right > R.Left) && (ARect.Top < R.Bottom) && (ARect.Bottom > R.Top);
    return Result;
  };
  this.RectF = function (Left, Top, Right, Bottom) {
    var Result = $mod.TRectF.$new();
    Result.Left = Left;
    Result.Top = Top;
    Result.Bottom = Bottom;
    Result.Right = Right;
    return Result;
  };
  this.PointF = function (X, Y) {
    var Result = $mod.TPointF.$new();
    Result.X = X;
    Result.Y = Y;
    return Result;
  };
  this.BitmapToDrawBitmap = function (ABitmap) {
    var Result = null;
    Result = null;
    if (ABitmap != null) {
      Result = ABitmap;
    };
    return Result;
  };
  this.IsBitmapEmpty = function (ABitmap) {
    var Result = false;
    var b = null;
    Result = true;
    if (ABitmap != null) {
      b = $mod.BitmapToDrawBitmap(ABitmap);
      if (b != null) {
        Result = b.Empty();
      };
    };
    return Result;
  };
  this.CharInArray = function (AChar, ACharArray) {
    var Result = false;
    var ch = "";
    var I = 0;
    Result = false;
    for (var $l1 = 0, $end2 = rtl.length(ACharArray) - 1; $l1 <= $end2; $l1++) {
      I = $l1;
      ch = ACharArray[I];
      if (ch === AChar) {
        Result = true;
        return Result;
      };
    };
    return Result;
  };
  this.CharIsNumber = function (AChar) {
    var Result = false;
    Result = AChar.charCodeAt() in rtl.createSet(null,48,57);
    return Result;
  };
  this.CharIsLetter = function (AChar) {
    var Result = false;
    Result = (AChar.charCodeAt() in rtl.createSet(null,97,122)) || (AChar.charCodeAt() in rtl.createSet(null,65,90));
    return Result;
  };
  this.CharIsHex = function (AChar) {
    var Result = false;
    Result = (AChar.charCodeAt() in rtl.createSet(null,48,57)) || (AChar.charCodeAt() in rtl.createSet(null,97,102)) || (AChar.charCodeAt() in rtl.createSet(null,65,70));
    return Result;
  };
  this.CharIsLetterOrNumber = function (AChar) {
    var Result = false;
    Result = $mod.CharIsLetter(AChar) || $mod.CharIsNumber(AChar);
    return Result;
  };
  this.VarToStr = function (S) {
    var Result = "";
    Result = S;
    return Result;
  };
  this.VarToDateTime = function (S) {
    var Result = 0.0;
    Result = pas.SysUtils.StrToDateTime(S);
    return Result;
  };
  this.AnsiPos = function (Substr, S) {
    var Result = 0;
    Result = pas.System.Pos(Substr,S);
    return Result;
  };
  this.AnsiUpperCase = function (S) {
    var Result = "";
    Result = pas.SysUtils.UpperCase(S);
    return Result;
  };
  this.HInstance = function () {
    var Result = 0;
    Result = 0;
    return Result;
  };
  this.CreateNewGUID = function () {
    var Result = "";
    var g = pas.System.TGuid.$new();
    pas.SysUtils.CreateGUID(g);
    Result = pas.SysUtils.GUIDToString(g);
    return Result;
  };
},["WEBLib.TMSFNCUtils","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCPersistence","JS"]);
rtl.module("WEBLib.TMSFNCStyles",["System","Classes","WEBLib.Graphics","WEBLib.TMSFNCGraphicsTypes","JS"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.createInterface($mod,"ITMSFNCAdaptToStyle","{3EFF288D-3927-4E86-8E9D-EF684B501C9E}",["GetAdaptToStyle","SetAdaptToStyle"],pas.System.IUnknown,function () {
    var $r = this.$rtti;
    $r.addMethod("GetAdaptToStyle",1,null,rtl.boolean);
    $r.addMethod("SetAdaptToStyle",0,[["Value",rtl.boolean,2]]);
    $r.addProperty("AdaptToStyle",3,rtl.boolean,"GetAdaptToStyle","SetAdaptToStyle");
  });
  rtl.createClass($mod,"TTMSFNCStyles",pas.System.TObject,function () {
    this.ExtractColor = function (AValue) {
      var $Self = this;
      var Result = 0;
      var s = "";
      var s2 = "";
      var s3 = "";
      var sl = null;
      var sl2 = null;
      var p = 0;
      var p2 = 0;
      function ParseValue(AValue) {
        var Result = 0;
        Result = pas.SysUtils.StrToInt(pas.SysUtils.Trim(pas.SysUtils.StringReplace(AValue,"rgb(","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll))));
        return Result;
      };
      Result = -1;
      if (AValue !== "") {
        s = pas.SysUtils.LowerCase(pas.SysUtils.StringReplace(AValue," ","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
        if (pas.System.Pos("linear-gradient",s) === 1) {
          p = pas.System.Pos("rgb",s);
          if (p === 0) p = pas.System.Pos("#",s);
          p2 = $impl.Pos(")",s,p);
          s2 = pas.System.Copy(s,p,(p2 - p) + 1);
          p = $impl.Pos("rgb",s,p2);
          if (p === 0) p = pas.System.Pos("#",s);
          p2 = $impl.Pos(")",s,p);
          s3 = pas.System.Copy(s,p,(p2 - p) + 1);
          Result = $Self.ExtractColor(s2);
        } else if (pas.System.Pos("rgb",s) === 1) {
          sl = pas.Classes.TStringList.$create("Create$1");
          try {
            sl.SetDelimiter(",");
            sl.SetDelimitedText(s);
            Result = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(ParseValue(sl.Get(0)),ParseValue(sl.Get(1)),ParseValue(sl.Get(2)));
          } finally {
            sl = rtl.freeLoc(sl);
          };
        } else if (pas.System.Pos("#",s) === 1) Result = pas["WEBLib.Graphics"].HexToColor(s);
      };
      return Result;
    };
    this.ExtractColorTo = function (AValue) {
      var $Self = this;
      var Result = 0;
      var s = "";
      var s2 = "";
      var s3 = "";
      var sl = null;
      var sl2 = null;
      var p = 0;
      var p2 = 0;
      function ParseValue(AValue) {
        var Result = 0;
        Result = pas.SysUtils.StrToInt(pas.SysUtils.Trim(pas.SysUtils.StringReplace(AValue,"rgb(","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll))));
        return Result;
      };
      Result = -1;
      if (AValue !== "") {
        s = pas.SysUtils.LowerCase(pas.SysUtils.StringReplace(AValue," ","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
        if (pas.System.Pos("linear-gradient",s) === 1) {
          p = pas.System.Pos("rgb",s);
          if (p === 0) p = pas.System.Pos("#",s);
          p2 = $impl.Pos(")",s,p);
          s2 = pas.System.Copy(s,p,(p2 - p) + 1);
          p = $impl.Pos("rgb",s,p2);
          if (p === 0) p = pas.System.Pos("#",s);
          p2 = $impl.Pos(")",s,p);
          s3 = pas.System.Copy(s,p,(p2 - p) + 1);
          Result = $Self.ExtractColor(s3);
        } else if (pas.System.Pos("rgb",s) === 1) {
          sl = pas.Classes.TStringList.$create("Create$1");
          try {
            sl.SetDelimiter(",");
            sl.SetDelimitedText(s);
            Result = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(ParseValue(sl.Get(0)),ParseValue(sl.Get(1)),ParseValue(sl.Get(2)));
          } finally {
            sl = rtl.freeLoc(sl);
          };
        } else if (pas.System.Pos("#",s) === 1) Result = pas["WEBLib.Graphics"].HexToColor(s);
      };
      return Result;
    };
    this.ExtractFontName = function (AValue) {
      var Result = "";
      Result = AValue;
      return Result;
    };
    this.GetStyleBackgroundFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCGridStyle","background");
      return Result;
    };
    this.GetStyleBackgroundStroke = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCGridStyle","border-color");
      return Result;
    };
    this.GetStyleDefaultButtonFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCButtonStyle","background");
      return Result;
    };
    this.GetStyleDefaultButtonStroke = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCButtonStyle","border-color");
      return Result;
    };
    this.GetStyleEditTextColor = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCEditStyle","--foreground");
      return Result;
    };
    this.GetStyleEditFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCEditStyle","background");
      return Result;
    };
    this.GetStyleEditStroke = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCStyle","border-color");
      return Result;
    };
    this.GetStyleHeaderFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCHeaderItemStyle","background");
      return Result;
    };
    this.GetStyleHeaderStroke = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCHeaderItemStyle","border-color");
      return Result;
    };
    this.GetStyleSelectionFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCGridStyle","--selection");
      return Result;
    };
    this.GetStyleAlternativeSelectionFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCMemoStyle","--selection");
      return Result;
    };
    this.GetStyleAlternativeBackgroundFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCMemoStyle","background");
      return Result;
    };
    this.GetStyleAlternativeBackgroundStroke = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCMemoStyle","border-color");
      return Result;
    };
    this.GetStyleFocusFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCGridStyle","--focus");
      return Result;
    };
    this.GetStyleLineFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCGridStyle","--linefill");
      return Result;
    };
    this.GetStyleTextFont = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCHeaderItemStyle","font-family");
      return Result;
    };
    this.GetStyleTextColor = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCHeaderItemStyle","color");
      return Result;
    };
    this.GetStyleAlternateBackgroundFill = function () {
      var Result = "";
      Result = this.FindCSSStyleProperty(".TMSFNCGridStyle","--alternatingrowbackground");
      return Result;
    };
    this.FindCSSStyleRule = function (ARuleName) {
      var Result = null;
      var s = "";
      var f = "";
      Result = null;
      s = ARuleName;
      f = $mod.CSSStyleFileName;
      for (var i = 0; i < document.styleSheets.length; i++){
        var fn = document.styleSheets[i].href;
        if (fn != null) {
        if (f == fn.substring(fn.lastIndexOf('/')+1)){
          var classes = document.styleSheets[i].rules || document.styleSheets[i].cssRules;
          for (var x = 0; x < classes.length; x++) {
              if (classes[x].selectorText.startsWith(s)) {
                  return classes[x];
              }
          }
         }
        }
      };
      return Result;
    };
    this.FindCSSStyleProperty = function (ARuleName, APropertyName) {
      var Result = "";
      var j = null;
      var s = "";
      var v = "";
      Result = "";
      j = this.FindCSSStyleRule(ARuleName);
      if (j != null) {
        s = APropertyName;
        v = j.style.getPropertyValue(s);
        Result = v;
      };
      return Result;
    };
    this.StyleServicesEnabled = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.GetStyleLineFillColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleLineFill();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleBackgroundFillColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleBackgroundFill();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleBackgroundFillColorTo = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleBackgroundFill();
        if (f !== "") {
          c = this.ExtractColorTo(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleAlternativeBackgroundFillColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleAlternativeBackgroundFill();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleAlternativeBackgroundFillColorTo = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleAlternativeBackgroundFill();
        if (f !== "") {
          c = this.ExtractColorTo(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleBackgroundStrokeColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleBackgroundStroke();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleHeaderFillColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleHeaderFill();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleHeaderFillColorTo = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleHeaderFill();
        if (f !== "") {
          c = this.ExtractColorTo(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleHeaderStrokeColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleHeaderStroke();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleSelectionFillColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleSelectionFill();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleSelectionFillColorTo = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleSelectionFill();
        if (f !== "") {
          c = this.ExtractColorTo(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleTextFontColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleTextColor();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleAlternativeTextFontColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleEditTextColor();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleDefaultButtonFillColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleDefaultButtonFill();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
    this.GetStyleDefaultButtonStrokeColor = function (AColor) {
      var Result = false;
      var f = "";
      var c = 0;
      Result = false;
      if (this.StyleServicesEnabled()) {
        f = this.GetStyleDefaultButtonStroke();
        if (f !== "") {
          c = this.ExtractColor(f);
          AColor.set(c);
          Result = c !== -1;
        };
      };
      return Result;
    };
  });
  this.CSSStyleFileName = "";
},["SysUtils"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.Pos = function (Search, InString, Offset) {
    return InString.indexOf(Search, Offset)+1;
  };
});
rtl.module("WEBLib.TMSFNCUndo",["System","Classes","WEBLib.TMSFNCTypes"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TTMSFNCUndoStackItem",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FActionName = "";
      this.FState = null;
      this.FObj = null;
    };
    this.$final = function () {
      this.FState = undefined;
      this.FObj = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.call(this,ACollection);
      this.FState = pas["WEBLib.TMSFNCTypes"].TMemoryStream.$create("Create");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FState");
      pas.Classes.TCollectionItem.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TTMSFNCUndoManager",pas.Classes.TCollection,function () {
    this.$init = function () {
      pas.Classes.TCollection.$init.call(this);
      this.FCurrent = 0;
      this.FObject = null;
      this.FMaxStackCount = 0;
    };
    this.$final = function () {
      this.FObject = undefined;
      pas.Classes.TCollection.$final.call(this);
    };
    this.GetStackItem = function (Index) {
      var Result = null;
      Result = null;
      if ((Index > -1) && (Index < this.GetCount())) Result = this.GetItem(Index);
      return Result;
    };
    this.NextUndoAction = function () {
      var Result = "";
      Result = "";
      if ((this.FCurrent > -1) && (this.FCurrent < this.GetCount())) Result = this.GetItem(this.FCurrent).FActionName;
      return Result;
    };
    this.NextRedoAction = function () {
      var Result = "";
      Result = "";
      if ((this.FCurrent >= -1) && (this.FCurrent < (this.GetCount() - 1))) Result = this.GetItem(this.FCurrent + 1).FActionName;
      return Result;
    };
    this.CanUndo = function () {
      var Result = false;
      Result = (this.FCurrent > 0) && (this.GetCount() > 0);
      return Result;
    };
    this.CanRedo = function () {
      var Result = false;
      Result = (this.FCurrent < (this.GetCount() - 1)) && (this.GetCount() > 0);
      return Result;
    };
    this.Undo = function () {
      var p = null;
      try {
        if ((this.FCurrent > 0) && (this.FCurrent <= this.GetCount())) {
          var $with1 = this.GetItem(this.FCurrent - 1);
          $with1.FState.FPosition = 0;
          if (pas.SysUtils.Supports$3(this.FObject,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence.$guid,{get: function () {
              return p;
            }, set: function (v) {
              p = v;
            }})) {
            p.LoadSettingsFromStream($with1.FState)}
           else pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.LoadSettingsFromStream(this.FObject,$with1.FState);
          this.FCurrent -= 1;
        };
      } finally {
        rtl._Release(p);
      };
    };
    this.Redo = function () {
      var p = null;
      try {
        if ((this.FCurrent >= -1) && (this.FCurrent < (this.GetCount() - 1))) {
          var $with1 = this.GetItem(this.FCurrent + 1);
          $with1.FState.FPosition = 0;
          if (pas.SysUtils.Supports$3(this.FObject,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence.$guid,{get: function () {
              return p;
            }, set: function (v) {
              p = v;
            }})) {
            p.LoadSettingsFromStream($with1.FState)}
           else pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.LoadSettingsFromStream(this.FObject,$with1.FState);
          this.FCurrent += 1;
        };
      } finally {
        rtl._Release(p);
      };
    };
    this.ClearUndoStack = function () {
      this.Clear();
      this.FCurrent = -1;
      this.PushState("");
    };
    this.PushState = function (AActionName) {
      var p = null;
      var it = null;
      try {
        while (this.FCurrent < (this.GetCount() - 1)) {
          it = this.GetItem(this.GetCount() - 1);
          it = rtl.freeLoc(it);
        };
        var $with1 = this.Add();
        $with1.FActionName = AActionName;
        if (pas.SysUtils.Supports$3(this.FObject,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence.$guid,{get: function () {
            return p;
          }, set: function (v) {
            p = v;
          }})) {
          p.SaveSettingsToStream($with1.FState,false)}
         else pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.SaveSettingsToStream(this.FObject,$with1.FState);
        this.FCurrent += 1;
        if (this.GetCount() > this.FMaxStackCount) {
          this.Delete(0);
          this.FCurrent -= 1;
        };
      } finally {
        rtl._Release(p);
      };
    };
    this.Create$2 = function (AObject) {
      pas.Classes.TCollection.Create$1.call(this,$mod.TTMSFNCUndoStackItem);
      this.FObject = AObject;
      this.FMaxStackCount = 20;
      this.FCurrent = -1;
      return this;
    };
  });
},["SysUtils","WEBLib.TMSFNCPersistence"]);
rtl.module("WEBLib.TMSFNCCustomControl",["System","Classes","WEBLib.Controls","WEBLib.TMSFNCGraphics","WEBLib.Graphics","WEBLib.TMSFNCStyles","WEBLib.TMSFNCPersistence","WEBLib.TMSFNCUndo","Types","WEBLib.TMSFNCGraphicsTypes","WEBLib.TMSFNCTypes","TypInfo","WEBLib.Forms"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TTMSFNCCustomDesignerForm",pas["WEBLib.Forms"].TForm,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$Class("TTMSFNCCustomControl");
  this.TTMSFNCControlAlignment = {"0": "caNone", caNone: 0, "1": "caTop", caTop: 1, "2": "caBottom", caBottom: 2, "3": "caLeft", caLeft: 3, "4": "caRight", caRight: 4, "5": "caClient", caClient: 5};
  $mod.$rtti.$Enum("TTMSFNCControlAlignment",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: this.TTMSFNCControlAlignment});
  rtl.createClass($mod,"TTMSFNCCustomControlBaseCommon",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FAllowFocus = false;
      this.FShortCutHint = "";
      this.FAllowGetChildren = false;
      this.FAdaptToStyle = false;
      this.FAdaptedToStyle = false;
      this.FTransparent = false;
      this.FBufferedPainting = false;
      this.FNativeCanvas = false;
      this.FAntiAliasing = false;
      this.FOptimizedHTMLDrawing = false;
      this.FShowAcceleratorChar = false;
      this.FTextQuality = 0;
      this.FOnInternalDblClick = null;
      this.FOnInternalMouseDown = null;
      this.FOnInternalMouseMove = null;
      this.FOnInternalMouseUp = null;
    };
    this.$final = function () {
      this.FOnInternalDblClick = undefined;
      this.FOnInternalMouseDown = undefined;
      this.FOnInternalMouseMove = undefined;
      this.FOnInternalMouseUp = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.GetAllowFocus = function () {
      var Result = false;
      Result = this.FAllowFocus;
      return Result;
    };
    this.GetShortCutHint = function () {
      var Result = "";
      Result = this.FShortCutHint;
      return Result;
    };
    this.GetControlAlignment = function () {
      var Result = 0;
      Result = $mod.TTMSFNCControlAlignment.caNone;
      var $tmp1 = this.FAlign;
      if ($tmp1 === pas["WEBLib.Controls"].TAlign.alNone) {
        Result = $mod.TTMSFNCControlAlignment.caNone}
       else if ($tmp1 === pas["WEBLib.Controls"].TAlign.alTop) {
        Result = $mod.TTMSFNCControlAlignment.caTop}
       else if ($tmp1 === pas["WEBLib.Controls"].TAlign.alBottom) {
        Result = $mod.TTMSFNCControlAlignment.caBottom}
       else if ($tmp1 === pas["WEBLib.Controls"].TAlign.alLeft) {
        Result = $mod.TTMSFNCControlAlignment.caLeft}
       else if ($tmp1 === pas["WEBLib.Controls"].TAlign.alRight) {
        Result = $mod.TTMSFNCControlAlignment.caRight}
       else if ($tmp1 === pas["WEBLib.Controls"].TAlign.alClient) Result = $mod.TTMSFNCControlAlignment.caClient;
      return Result;
    };
    this.SetAllowFocus = function (Value) {
      this.FAllowFocus = Value;
    };
    this.SetControlAlignment = function (Value) {
      var $tmp1 = Value;
      if ($tmp1 === $mod.TTMSFNCControlAlignment.caNone) {
        this.SetAlign(pas["WEBLib.Controls"].TAlign.alNone)}
       else if ($tmp1 === $mod.TTMSFNCControlAlignment.caTop) {
        this.SetAlign(pas["WEBLib.Controls"].TAlign.alTop)}
       else if ($tmp1 === $mod.TTMSFNCControlAlignment.caBottom) {
        this.SetAlign(pas["WEBLib.Controls"].TAlign.alBottom)}
       else if ($tmp1 === $mod.TTMSFNCControlAlignment.caLeft) {
        this.SetAlign(pas["WEBLib.Controls"].TAlign.alLeft)}
       else if ($tmp1 === $mod.TTMSFNCControlAlignment.caRight) {
        this.SetAlign(pas["WEBLib.Controls"].TAlign.alRight)}
       else if ($tmp1 === $mod.TTMSFNCControlAlignment.caClient) this.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
    };
    this.SetAntiAliasing = function (Value) {
      if (this.FAntiAliasing !== Value) {
        this.FAntiAliasing = Value;
        this.Invalidate();
      };
    };
    this.SetOptimizedHTMLDrawing = function (Value) {
      if (this.FOptimizedHTMLDrawing !== Value) {
        this.FOptimizedHTMLDrawing = Value;
        this.Invalidate();
      };
    };
    this.SetShowAcceleratorChar = function (Value) {
      if (this.FShowAcceleratorChar !== Value) {
        this.FShowAcceleratorChar = Value;
        this.Invalidate();
      };
    };
    this.SetNativeCanvas = function (Value) {
      if (this.FNativeCanvas !== Value) {
        this.FNativeCanvas = Value;
        this.Invalidate();
      };
    };
    this.SetTextQuality = function (Value) {
      if (this.FTextQuality !== Value) {
        this.FTextQuality = Value;
        this.Invalidate();
      };
    };
    this.SetShortCutHint = function (Value) {
      this.FShortCutHint = Value;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = "";
      return Result;
    };
    this.GetDocURL = function () {
      var Result = "";
      Result = pas["WEBLib.TMSFNCTypes"].TTMSFNCBaseDocURL;
      return Result;
    };
    this.GetTipsURL = function () {
      var Result = "";
      Result = pas["WEBLib.TMSFNCTypes"].TTMSFNCBaseTipsURL;
      return Result;
    };
    this.HandleDesignHitTest = function (APoint) {
      var Result = false;
      Result = false;
      return Result;
    };
    this.GetClientMousePos = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      Result.$assign(this.ConvertScreenToClient(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetMousePos())));
      return Result;
    };
    this.ConvertScreenToClient = function (APoint) {
      var Result = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var p = pas.Types.TPoint.$new();
      p.$assign(this.ScreenToClient(pas.Types.Point(Math.round(APoint.X),Math.round(APoint.Y))));
      Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(p.x,p.y));
      return Result;
    };
    this.ConvertClientToScreen = function (APoint) {
      var Result = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var p = pas.Types.TPoint.$new();
      p.$assign(this.ClientToScreen(pas.Types.Point(Math.round(APoint.X),Math.round(APoint.Y))));
      Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(p.x,p.y));
      return Result;
    };
    this.GetDragObjectScreenShot = function () {
      var Result = null;
      Result = null;
      return Result;
    };
    this.GetAdaptToStyle = function () {
      var Result = false;
      Result = this.FAdaptToStyle;
      return Result;
    };
    this.ChangeDPIScale = function (M, D) {
    };
    this.SetDefaultGraphicColors = function () {
      var c = 0;
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupFillColor = c}
       else pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupFillColor = 16777215;
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundStrokeColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupStrokeColor = c}
       else pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupStrokeColor = 12632256;
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleDefaultButtonFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColor = c}
       else pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColor = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(225,225,225);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleLineFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColor = c}
       else pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColor = 11119017;
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleTextFontColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultTextFontColor = c}
       else pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultTextFontColor = 0;
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleSelectionFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultSelectionFillColor = c;
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColorFocused = pas["WEBLib.TMSFNCGraphicsTypes"].Blend(c,pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColor,25);
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColorFocused = pas["WEBLib.TMSFNCGraphicsTypes"].Blend(c,pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColor,30);
      } else {
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultSelectionFillColor = 0;
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColorFocused = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(229,241,251);
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColorFocused = pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(60,127,177);
      };
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonStrokeColorDisabled = 11119017;
      pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultButtonFillColorDisabled = 13882323;
    };
    this.SetAdaptToStyle = function (Value) {
      this.FAdaptToStyle = Value;
      this.InitializeStyle();
    };
    this.CancelHint = function () {
    };
    this.BeginDrag = function () {
    };
    this.InitializeStyle = function () {
      this.SetDefaultGraphicColors();
      this.DestroyGraphicElements();
      if (this.GetAdaptToStyle()) {
        this.FAdaptedToStyle = true;
        this.ApplyStyle();
      } else if (this.FAdaptedToStyle) {
        this.ResetToDefaultStyle();
        this.FAdaptedToStyle = false;
      };
      this.Invalidate();
    };
    this.ApplyStyle = function () {
    };
    this.ResetToDefaultStyle = function () {
    };
    this.HandleMouseLeave = function () {
    };
    this.HandleMouseEnter = function () {
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
    };
    this.HandleMouseMove = function (Shift, X, Y) {
    };
    this.HandleDblClick = function (X, Y) {
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
    };
    this.HandleKeyPress = function (Key) {
    };
    this.HandleKeyDown = function (Key, Shift) {
    };
    this.HandleDialogKey = function (Key, Shift) {
    };
    this.HandleKeyUp = function (Key, Shift) {
    };
    this.HandleMouseWheel = function (Shift, WheelDelta, Handled) {
    };
    this.HandleDragOver = function (Source, Point, Accept) {
    };
    this.HandleDragDrop = function (Source, Point) {
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      this.SetDefaultGraphicColors();
      this.FAdaptToStyle = false;
      this.FAdaptedToStyle = false;
      this.FTransparent = false;
      this.FNativeCanvas = false;
      this.FBufferedPainting = false;
      this.FAntiAliasing = true;
      this.FOptimizedHTMLDrawing = true;
      this.FShowAcceleratorChar = true;
      this.FTextQuality = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextQuality.gtqAntiAliasing;
      this.FAllowFocus = true;
      return this;
    };
    this.Destroy = function () {
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.SetControlMargins = function (ALeft, ATop, ARight, ABottom) {
      this.SetAlignWithMargins(true);
      this.FMargins.SetLeft(Math.round(ALeft));
      this.FMargins.SetTop(Math.round(ATop));
      this.FMargins.SetRight(Math.round(ARight));
      this.FMargins.SetBottom(Math.round(ABottom));
    };
    this.GetControlMargins = function (ALeft, ATop, ARight, ABottom) {
      if (!this.FAlignWithMargins) return;
      ALeft.set(this.FMargins.FLeft);
      ATop.set(this.FMargins.FTop);
      ARight.set(this.FMargins.FRight);
      ABottom.set(this.FMargins.FBottom);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCCustomControlBase",$mod.TTMSFNCCustomControlBaseCommon,function () {
    this.$init = function () {
      $mod.TTMSFNCCustomControlBaseCommon.$init.call(this);
      this.FStored = false;
      this.FHitTest = false;
    };
    this.MouseWheel = function (Shift, WheelDelta, Handled) {
      this.HandleMouseWheel(rtl.refSet(Shift),WheelDelta,Handled);
    };
    this.DoMouseLeave = function () {
      pas["WEBLib.Controls"].TControl.DoMouseLeave.call(this);
      this.HandleMouseLeave();
    };
    this.DoMouseEnter = function () {
      pas["WEBLib.Controls"].TControl.DoMouseEnter.call(this);
      this.HandleMouseEnter();
    };
    this.GetLocalRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight()));
      return Result;
    };
    this.GetHintString = function () {
      var Result = "";
      Result = "";
      return Result;
    };
    this.HasHint = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.MouseDown = function (Button, Shift, X, Y) {
      pas["WEBLib.Controls"].TControl.MouseDown.apply(this,arguments);
      this.HandleMouseDown(Button,rtl.refSet(Shift),X,Y);
      if (this.FOnInternalMouseDown != null) this.FOnInternalMouseDown(this);
    };
    this.MouseMove = function (Shift, X, Y) {
      pas["WEBLib.Controls"].TControl.MouseMove.apply(this,arguments);
      this.HandleMouseMove(rtl.refSet(Shift),X,Y);
      if (this.FOnInternalMouseMove != null) this.FOnInternalMouseMove(this);
    };
    this.MouseUp = function (Button, Shift, X, Y) {
      pas["WEBLib.Controls"].TControl.MouseUp.apply(this,arguments);
      this.HandleMouseUp(Button,rtl.refSet(Shift),X,Y);
      if (this.FOnInternalMouseUp != null) this.FOnInternalMouseUp(this);
    };
    this.DragOver = function (Source, X, Y, State, Accept) {
      pas["WEBLib.Controls"].TControl.DragOver.apply(this,arguments);
      this.HandleDragOver(Source,pas["WEBLib.TMSFNCTypes"].PointF(X,Y),Accept);
    };
    this.KeyDown = function (Key, Shift) {
      var Ctrl = null;
      pas["WEBLib.Controls"].TControl.KeyDown.apply(this,arguments);
      this.HandleDialogKey(Key,rtl.refSet(Shift));
      this.HandleKeyDown(Key,rtl.refSet(Shift));
      if (Key.get() === 9) ;
    };
    this.KeyPress = function (Key) {
      pas["WEBLib.Controls"].TControl.KeyPress.apply(this,arguments);
      this.HandleKeyPress(Key);
    };
    this.KeyUp = function (Key, Shift) {
      pas["WEBLib.Controls"].TControl.KeyUp.apply(this,arguments);
      this.HandleKeyUp(Key,rtl.refSet(Shift));
    };
    this.DblClick = function () {
      var pf = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      pas["WEBLib.Controls"].TControl.DblClick.call(this);
      pf.$assign(this.ConvertScreenToClient(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetMousePos())));
      this.HandleDblClick(pf.X,pf.Y);
      if (this.FOnInternalDblClick != null) this.FOnInternalDblClick(this);
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomControlBaseCommon.Create$1.apply(this,arguments);
      this.FHitTest = true;
      this.FStored = true;
      this.FControlStyle = rtl.unionSet(this.FControlStyle,rtl.createSet(pas["WEBLib.Controls"].TControlStyleValue.csAcceptsControls));
      return this;
    };
    this.BeginUpdate = function () {
      pas["WEBLib.Controls"].TControl.BeginUpdate.call(this);
    };
    this.EndUpdate = function () {
      pas["WEBLib.Controls"].TControl.EndUpdate.call(this);
    };
    this.DragDrop = function (Source, X, Y) {
      pas["WEBLib.Controls"].TControl.DragDrop.apply(this,arguments);
      this.HandleDragDrop(Source,pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
    };
    this.CanFocus = function () {
      var Result = false;
      Result = pas["WEBLib.Controls"].TControl.CanFocus.call(this);
      Result = Result && this.GetAllowFocus();
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$MethodVar("TTMSFNCCustomControlBeforeDrawEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomControlAfterDrawEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomControlCanSavePropertyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AObject",pas.System.$rtti["TObject"]],["APropertyName",rtl.string],["APropertyType",pas.TypInfo.$rtti["TTypeKind"]],["ACanSave",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomControlCanLoadPropertyEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AObject",pas.System.$rtti["TObject"]],["APropertyName",rtl.string],["APropertyType",pas.TypInfo.$rtti["TTypeKind"]],["ACanLoad",rtl.boolean,1]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomControl",$mod.TTMSFNCCustomControlBase,function () {
    this.FBlockPersistenceInterface = false;
    this.$init = function () {
      $mod.TTMSFNCCustomControlBase.$init.call(this);
      this.FAppearancePersisting = false;
      this.FExporting = false;
      this.FExportRect = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      this.FBlockInvalidate = false;
      this.FPopupMenu = null;
      this.FOnBeforeDraw = null;
      this.FOnAfterDraw = null;
      this.FOnCanSaveProperty = null;
      this.FOnCanLoadProperty = null;
      this.FCheckedChk = null;
      this.FUnCheckedChk = null;
      this.FCheckedFocusChk = null;
      this.FUnCheckedFocusChk = null;
      this.FCheckedDisabledChk = null;
      this.FUnCheckedDisabledChk = null;
      this.FCheckedRd = null;
      this.FUnCheckedRd = null;
      this.FCheckedFocusRd = null;
      this.FUnCheckedFocusRd = null;
      this.FCheckedDisabledRd = null;
      this.FUnCheckedDisabledRd = null;
      this.FDownBtn = null;
      this.FNormalBtn = null;
      this.FDownFocusBtn = null;
      this.FNormalFocusBtn = null;
      this.FNormalDisabledBtn = null;
      this.FFill = null;
      this.FStroke = null;
      this.FDataPointer = null;
      this.FDataBoolean = false;
      this.FDataString = "";
      this.FDataObject = null;
      this.FDataInteger = 0;
      this.FUndoManager = null;
    };
    this.$final = function () {
      this.FExportRect = undefined;
      this.FPopupMenu = undefined;
      this.FOnBeforeDraw = undefined;
      this.FOnAfterDraw = undefined;
      this.FOnCanSaveProperty = undefined;
      this.FOnCanLoadProperty = undefined;
      this.FCheckedChk = undefined;
      this.FUnCheckedChk = undefined;
      this.FCheckedFocusChk = undefined;
      this.FUnCheckedFocusChk = undefined;
      this.FCheckedDisabledChk = undefined;
      this.FUnCheckedDisabledChk = undefined;
      this.FCheckedRd = undefined;
      this.FUnCheckedRd = undefined;
      this.FCheckedFocusRd = undefined;
      this.FUnCheckedFocusRd = undefined;
      this.FCheckedDisabledRd = undefined;
      this.FUnCheckedDisabledRd = undefined;
      this.FDownBtn = undefined;
      this.FNormalBtn = undefined;
      this.FDownFocusBtn = undefined;
      this.FNormalFocusBtn = undefined;
      this.FNormalDisabledBtn = undefined;
      this.FFill = undefined;
      this.FStroke = undefined;
      this.FDataObject = undefined;
      this.FUndoManager = undefined;
      $mod.TTMSFNCCustomControlBase.$final.call(this);
    };
    this.GetUndoManager = function () {
      var Result = null;
      if (!(this.FUndoManager != null)) this.FUndoManager = pas["WEBLib.TMSFNCUndo"].TTMSFNCUndoManager.$create("Create$2",[this]);
      Result = this.FUndoManager;
      return Result;
    };
    this.SetFill = function (Value) {
      this.FFill.Assign(Value);
    };
    this.SetStroke = function (Value) {
      this.FStroke.Assign(Value);
    };
    this.GetVersionNumber = function (AMaj, AMin, ARel, ABld) {
      var Result = "";
      Result = "";
      return Result;
    };
    this.IsAppearanceProperty = function (AObject, APropertyName, APropertyType) {
      var Result = false;
      var Prop = null;
      var pName = "";
      var cn = "";
      Result = false;
      Prop = pas.TypInfo.GetPropInfo$2(AObject,APropertyName);
      if (Prop != null) {
        pName = pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.GetPropInfoName(Prop);
        cn = pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.GetPropInfoTypeName(Prop);
        Result = (cn === "TAlphaColor") || (cn === "TColor") || (cn === "TGraphicsColor") || (cn === "TTMSFNCGraphicsFill") || (cn === "TTMSFNCGraphicsStroke") || (pas.System.Pos("Appearance",pName) > 0);
      };
      return Result;
    };
    this.CanSaveProperty = function (AObject, APropertyName, APropertyType) {
      var Result = false;
      if ((AObject === this) && !this.FBlockPersistenceInterface) {
        Result = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IndexOfTextInArray(APropertyName,pas["WEBLib.TMSFNCPersistence"].ExcludePropertyList) === -1}
       else Result = true;
      if (this.FAppearancePersisting) Result = Result && this.IsAppearanceProperty(AObject,APropertyName,APropertyType);
      this.DoCanSaveProperty(AObject,APropertyName,APropertyType,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.CanLoadProperty = function (AObject, APropertyName, APropertyType) {
      var Result = false;
      if ((AObject === this) && !this.FBlockPersistenceInterface) {
        Result = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.IndexOfTextInArray(APropertyName,pas["WEBLib.TMSFNCPersistence"].ExcludePropertyList) === -1}
       else Result = true;
      this.DoCanLoadProperty(AObject,APropertyName,APropertyType,{get: function () {
          return Result;
        }, set: function (v) {
          Result = v;
        }});
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = "";
      return Result;
    };
    this.LocalToScreenEx = function (APoint) {
      var Result = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var pt = pas.Types.TPoint.$new();
      pt.$assign(this.ClientToScreen(pas.Types.Point(Math.round(APoint.X),Math.round(APoint.Y))));
      Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(pt.x,pt.y));
      return Result;
    };
    this.ScreenToLocalEx = function (APoint) {
      var Result = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var pt = pas.Types.TPoint.$new();
      pt.$assign(this.ScreenToClient(pas.Types.Point(Math.round(APoint.X),Math.round(APoint.Y))));
      Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(pt.x,pt.y));
      return Result;
    };
    this.GetContentRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign(this.GetControlRect());
      return Result;
    };
    this.GetControlRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (this.IsExporting()) {
        Result.$assign(this.FExportRect)}
       else Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight()));
      return Result;
    };
    this.GetLocalRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (this.IsExporting()) {
        Result.$assign(this.FExportRect)}
       else Result.$assign($mod.TTMSFNCCustomControlBase.GetLocalRect.call(this));
      return Result;
    };
    this.IsExporting = function () {
      var Result = false;
      Result = this.FExporting;
      return Result;
    };
    this.SetColor = function (AValue) {
      pas["WEBLib.Controls"].TControl.SetColor.apply(this,arguments);
      if (this.FFill != null) this.FFill.SetColor(AValue);
      this.Invalidate();
    };
    this.ChangeDPIScale = function (M, D) {
      $mod.TTMSFNCCustomControlBaseCommon.ChangeDPIScale.apply(this,arguments);
      this.CreateCheckBoxBitmaps();
      this.CreateRadioButtonBitmaps();
    };
    this.RegisterRuntimeClasses = function () {
    };
    this.Export = function (AGraphics, ARect) {
      this.FExporting = true;
      this.FExportRect.$assign(ARect);
      this.BeforeExport();
      this.Draw(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
      this.FExporting = false;
      this.AfterExport();
    };
    this.BeforeExport = function () {
    };
    this.AfterExport = function () {
    };
    this.ApplyStyle = function () {
      var c = 0;
      $mod.TTMSFNCCustomControlBaseCommon.ApplyStyle.call(this);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FFill.SetColor(c);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleLineFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FStroke.SetColor(c);
    };
    this.ResetToDefaultStyle = function () {
      $mod.TTMSFNCCustomControlBaseCommon.ResetToDefaultStyle.call(this);
      this.FFill.SetColor(16777215);
      this.FStroke.SetColor(12632256);
    };
    this.DestroyGraphicElements = function () {
      if (this.FDownBtn != null) {
        rtl.free(this,"FDownBtn");
        this.FDownBtn = null;
      };
      if (this.FNormalBtn != null) {
        rtl.free(this,"FNormalBtn");
        this.FNormalBtn = null;
      };
      if (this.FDownFocusBtn != null) {
        rtl.free(this,"FDownFocusBtn");
        this.FDownFocusBtn = null;
      };
      if (this.FNormalFocusBtn != null) {
        rtl.free(this,"FNormalFocusBtn");
        this.FNormalFocusBtn = null;
      };
      if (this.FNormalDisabledBtn != null) {
        rtl.free(this,"FNormalDisabledBtn");
        this.FNormalDisabledBtn = null;
      };
      if (this.FCheckedChk != null) {
        rtl.free(this,"FCheckedChk");
        this.FCheckedChk = null;
      };
      if (this.FCheckedFocusChk != null) {
        rtl.free(this,"FCheckedFocusChk");
        this.FCheckedFocusChk = null;
      };
      if (this.FUnCheckedDisabledChk != null) {
        rtl.free(this,"FUnCheckedDisabledChk");
        this.FUnCheckedDisabledChk = null;
      };
      if (this.FCheckedDisabledChk != null) {
        rtl.free(this,"FCheckedDisabledChk");
        this.FCheckedDisabledChk = null;
      };
      if (this.FUnCheckedChk != null) {
        rtl.free(this,"FUnCheckedChk");
        this.FUnCheckedChk = null;
      };
      if (this.FUnCheckedFocusChk != null) {
        rtl.free(this,"FUnCheckedFocusChk");
        this.FUnCheckedFocusChk = null;
      };
      if (this.FCheckedRd != null) {
        rtl.free(this,"FCheckedRd");
        this.FCheckedRd = null;
      };
      if (this.FCheckedFocusRd != null) {
        rtl.free(this,"FCheckedFocusRd");
        this.FCheckedFocusRd = null;
      };
      if (this.FUnCheckedRd != null) {
        rtl.free(this,"FUnCheckedRd");
        this.FUnCheckedRd = null;
      };
      if (this.FUnCheckedFocusRd != null) {
        rtl.free(this,"FUnCheckedFocusRd");
        this.FUnCheckedFocusRd = null;
      };
      if (this.FUnCheckedDisabledRd != null) {
        rtl.free(this,"FUnCheckedDisabledRd");
        this.FUnCheckedDisabledRd = null;
      };
      if (this.FCheckedDisabledRd != null) {
        rtl.free(this,"FCheckedDisabledRd");
        this.FCheckedDisabledRd = null;
      };
    };
    this.UpdateControlAfterResize = function () {
    };
    this.CreateCheckBoxBitmaps = function () {
      var g = null;
      var bmp = null;
      var sc = 0.0;
      sc = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null);
      if (this.FCheckedFocusChk != null) {
        rtl.free(this,"FCheckedFocusChk");
        this.FCheckedFocusChk = null;
      };
      if (this.FUnCheckedChk != null) {
        rtl.free(this,"FUnCheckedChk");
        this.FUnCheckedChk = null;
      };
      if (this.FCheckedChk != null) {
        rtl.free(this,"FCheckedChk");
        this.FCheckedChk = null;
      };
      if (this.FUnCheckedFocusChk != null) {
        rtl.free(this,"FUnCheckedFocusChk");
        this.FUnCheckedFocusChk = null;
      };
      if (this.FUnCheckedDisabledChk != null) {
        rtl.free(this,"FUnCheckedDisabledChk");
        this.FUnCheckedDisabledChk = null;
      };
      if (this.FCheckedDisabledChk != null) {
        rtl.free(this,"FCheckedDisabledChk");
        this.FCheckedDisabledChk = null;
      };
      bmp = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
      g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[bmp.GetCanvas(),false]);
      try {
        bmp.SetSize(Math.round(16 * sc),Math.round(16 * sc));
        this.FUnCheckedChk = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FUnCheckedChk.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawCheckBox(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),false,false,true);
        this.FUnCheckedChk.Assign(bmp);
        this.FCheckedChk = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FCheckedChk.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawCheckBox(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),true,false,true);
        this.FCheckedChk.Assign(bmp);
        this.FUnCheckedFocusChk = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FUnCheckedFocusChk.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawCheckBox(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),false,true,true);
        this.FUnCheckedFocusChk.Assign(bmp);
        this.FCheckedFocusChk = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FCheckedFocusChk.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawCheckBox(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),true,true,true);
        this.FCheckedFocusChk.Assign(bmp);
        this.FUnCheckedDisabledChk = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FUnCheckedDisabledChk.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawCheckBox(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),false,false,false);
        this.FUnCheckedDisabledChk.Assign(bmp);
        this.FCheckedDisabledChk = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FCheckedDisabledChk.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawCheckBox(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),true,false,false);
        this.FCheckedDisabledChk.Assign(bmp);
      } finally {
        g = rtl.freeLoc(g);
        bmp = rtl.freeLoc(bmp);
      };
    };
    this.CreateRadioButtonBitmaps = function () {
      var g = null;
      var bmp = null;
      var sc = 0.0;
      sc = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null);
      if (this.FCheckedFocusRd != null) {
        rtl.free(this,"FCheckedFocusRd");
        this.FCheckedFocusRd = null;
      };
      if (this.FUnCheckedRd != null) {
        rtl.free(this,"FUnCheckedRd");
        this.FUnCheckedRd = null;
      };
      if (this.FCheckedRd != null) {
        rtl.free(this,"FCheckedRd");
        this.FCheckedRd = null;
      };
      if (this.FUnCheckedFocusRd != null) {
        rtl.free(this,"FUnCheckedFocusRd");
        this.FUnCheckedFocusRd = null;
      };
      if (this.FUnCheckedDisabledRd != null) {
        rtl.free(this,"FUnCheckedDisabledRd");
        this.FUnCheckedDisabledRd = null;
      };
      if (this.FCheckedDisabledRd != null) {
        rtl.free(this,"FCheckedDisabledRd");
        this.FCheckedDisabledRd = null;
      };
      bmp = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
      g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[bmp.GetCanvas(),false]);
      try {
        bmp.SetSize(Math.round(16 * sc),Math.round(16 * sc));
        this.FUnCheckedRd = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FUnCheckedRd.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawRadioButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),false,false,true);
        this.FUnCheckedRd.Assign(bmp);
        this.FCheckedRd = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FCheckedRd.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawRadioButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),true,false,true);
        this.FCheckedRd.Assign(bmp);
        this.FUnCheckedFocusRd = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FUnCheckedFocusRd.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawRadioButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),false,true,true);
        this.FUnCheckedFocusRd.Assign(bmp);
        this.FCheckedFocusRd = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FCheckedFocusRd.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawRadioButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),true,true,true);
        this.FCheckedFocusRd.Assign(bmp);
        this.FUnCheckedDisabledRd = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FUnCheckedDisabledRd.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawRadioButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),false,false,false);
        this.FUnCheckedDisabledRd.Assign(bmp);
        this.FCheckedDisabledRd = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FCheckedDisabledRd.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawRadioButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),true,false,false);
        this.FCheckedDisabledRd.Assign(bmp);
      } finally {
        g = rtl.freeLoc(g);
        bmp = rtl.freeLoc(bmp);
      };
    };
    this.CreateButtonBitmaps = function (AWidth, AHeight) {
      var g = null;
      var bmp = null;
      var sc = 0.0;
      sc = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(null);
      if (this.FDownBtn != null) {
        rtl.free(this,"FDownBtn");
        this.FDownBtn = null;
      };
      if (this.FNormalBtn != null) {
        rtl.free(this,"FNormalBtn");
        this.FNormalBtn = null;
      };
      if (this.FDownFocusBtn != null) {
        rtl.free(this,"FDownFocusBtn");
        this.FDownFocusBtn = null;
      };
      if (this.FNormalFocusBtn != null) {
        rtl.free(this,"FNormalFocusBtn");
        this.FNormalFocusBtn = null;
      };
      if (this.FNormalDisabledBtn != null) {
        rtl.free(this,"FNormalDisabledBtn");
        this.FNormalDisabledBtn = null;
      };
      bmp = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
      g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[bmp.GetCanvas(),false]);
      try {
        bmp.SetSize(Math.round(AWidth * sc),Math.round(AHeight * sc));
        this.FNormalBtn = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FNormalBtn.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),false,false,true,this.GetAdaptToStyle());
        this.FNormalBtn.Assign(bmp);
        this.FDownBtn = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FDownBtn.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),true,false,true,this.GetAdaptToStyle());
        this.FDownBtn.Assign(bmp);
        this.FNormalFocusBtn = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FNormalFocusBtn.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),true,true,true,this.GetAdaptToStyle());
        this.FNormalFocusBtn.Assign(bmp);
        this.FDownFocusBtn = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FDownFocusBtn.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),false,true,true,this.GetAdaptToStyle());
        this.FDownFocusBtn.Assign(bmp);
        this.FNormalDisabledBtn = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
        this.FNormalDisabledBtn.FOnChange = rtl.createCallback(this,"DoBitmapChanged");
        g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        g.FFill.SetColor(16777215);
        g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        g.FStroke.SetColor(16777215);
        g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        g.DrawButton(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(0,0,bmp.GetWidth(),bmp.GetHeight())),false,false,false,this.GetAdaptToStyle());
        this.FNormalDisabledBtn.Assign(bmp);
      } finally {
        g = rtl.freeLoc(g);
        bmp = rtl.freeLoc(bmp);
      };
    };
    this.DoBeforeDraw = function (AGraphics, ARect, ADefaultDraw) {
      if (this.FOnBeforeDraw != null) this.FOnBeforeDraw(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),ADefaultDraw);
    };
    this.DoAfterDraw = function (AGraphics, ARect) {
      if (this.FOnAfterDraw != null) this.FOnAfterDraw(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
    };
    this.DoCanSaveProperty = function (AObject, APropertyName, APropertyType, ACanSave) {
      if (this.FOnCanSaveProperty != null) this.FOnCanSaveProperty(this,AObject,APropertyName,APropertyType,ACanSave);
    };
    this.DoCanLoadProperty = function (AObject, APropertyName, APropertyType, ACanLoad) {
      if (this.FOnCanLoadProperty != null) this.FOnCanLoadProperty(this,AObject,APropertyName,APropertyType,ACanLoad);
    };
    this.DrawBackground = function (AGraphics, ARect) {
      AGraphics.FFill.Assign(this.FFill);
      AGraphics.FFill.SetColor(this.FColor);
      AGraphics.FStroke.Assign(this.FStroke);
      AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.StrokeChanged = function (Sender) {
      this.Invalidate();
    };
    this.FillChanged = function (Sender) {
      if ((this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone) && (this.FFill.FKind !== pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkTexture) && (this.FFill.FColor !== -1)) {
        this.SetColor(this.FFill.FColor)}
       else this.SetColor(-1);
      this.Invalidate();
    };
    this.Draw = function (AGraphics, ARect) {
    };
    this.DrawControl = function () {
      var g = null;
      var gbmp = null;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var df = false;
      var bmp = null;
      if (this.FBufferedPainting) {
        g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[this.GetWidth(),this.GetHeight(),this.FNativeCanvas,true]);
        g.BeginScene();
      } else g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[this.GetCanvas(),this.FNativeCanvas]);
      g.FOptimizedHTMLDrawing = this.FOptimizedHTMLDrawing;
      g.GetContext().SetSize(this.GetWidth(),this.GetHeight());
      g.GetContext().SetAntiAliasing(this.FAntiAliasing);
      g.GetContext().SetShowAcceleratorChar(this.FShowAcceleratorChar);
      g.GetContext().SetTextQuality(this.FTextQuality);
      try {
        r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth(),this.GetHeight()));
        df = true;
        this.DoBeforeDraw(g,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),{get: function () {
            return df;
          }, set: function (v) {
            df = v;
          }});
        if (df) {
          this.DrawBackground(g,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
          this.Draw(g,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
          this.DoAfterDraw(g,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
        };
        if (this.FBufferedPainting) g.EndScene();
        g.GetContext().Render();
        if (this.FBufferedPainting) {
          bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
          try {
            bmp.Assign(g.FBitmap);
            gbmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[this.GetCanvas(),false]);
            try {
              gbmp.GetContext().SetSize(this.GetWidth(),this.GetHeight());
              gbmp.GetContext().SetAntiAliasing(this.FAntiAliasing);
              gbmp.GetContext().SetShowAcceleratorChar(this.FShowAcceleratorChar);
              gbmp.GetContext().SetTextQuality(this.FTextQuality);
              gbmp.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,true,false,true,false);
            } finally {
              gbmp = rtl.freeLoc(gbmp);
            };
          } finally {
            bmp = rtl.freeLoc(bmp);
          };
        };
      } finally {
        g = rtl.freeLoc(g);
      };
    };
    this.DoBitmapChanged = function (Sender) {
      if (this.FBlockInvalidate) return;
      this.FBlockInvalidate = true;
      this.Invalidate();
      this.FBlockInvalidate = false;
    };
    this.CaptureEx = function () {
      this.Capture();
    };
    this.ReleaseCaptureEx = function () {
      this.ReleaseCapture();
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomControl.isPrototypeOf(Source)) {
        this.FFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomControl).FFill);
        this.FStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomControl).FStroke);
      } else pas["WEBLib.Controls"].TControl.Assign.apply(this,arguments);
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomControlBase.Create$1.apply(this,arguments);
      this.SetColor(16777215);
      this.FLinkTouchEvents = true;
      this.SetTabStop(true);
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      if (!this.IsDesignerForm()) this.RegisterRuntimeClasses();
      return this;
    };
    this.Destroy = function () {
      if (this.FUndoManager != null) {
        rtl.free(this,"FUndoManager");
        this.FUndoManager = null;
      };
      if (this.FDownBtn != null) {
        rtl.free(this,"FDownBtn");
        this.FDownBtn = null;
      };
      if (this.FNormalBtn != null) {
        rtl.free(this,"FNormalBtn");
        this.FNormalBtn = null;
      };
      if (this.FDownFocusBtn != null) {
        rtl.free(this,"FDownFocusBtn");
        this.FDownFocusBtn = null;
      };
      if (this.FNormalFocusBtn != null) {
        rtl.free(this,"FNormalFocusBtn");
        this.FNormalFocusBtn = null;
      };
      if (this.FNormalDisabledBtn != null) {
        rtl.free(this,"FNormalDisabledBtn");
        this.FNormalDisabledBtn = null;
      };
      if (this.FCheckedChk != null) {
        rtl.free(this,"FCheckedChk");
        this.FCheckedChk = null;
      };
      if (this.FCheckedFocusChk != null) {
        rtl.free(this,"FCheckedFocusChk");
        this.FCheckedFocusChk = null;
      };
      if (this.FUnCheckedDisabledChk != null) {
        rtl.free(this,"FUnCheckedDisabledChk");
        this.FUnCheckedDisabledChk = null;
      };
      if (this.FCheckedDisabledChk != null) {
        rtl.free(this,"FCheckedDisabledChk");
        this.FCheckedDisabledChk = null;
      };
      if (this.FUnCheckedChk != null) {
        rtl.free(this,"FUnCheckedChk");
        this.FUnCheckedChk = null;
      };
      if (this.FUnCheckedFocusChk != null) {
        rtl.free(this,"FUnCheckedFocusChk");
        this.FUnCheckedFocusChk = null;
      };
      if (this.FCheckedRd != null) {
        rtl.free(this,"FCheckedRd");
        this.FCheckedRd = null;
      };
      if (this.FCheckedFocusRd != null) {
        rtl.free(this,"FCheckedFocusRd");
        this.FCheckedFocusRd = null;
      };
      if (this.FUnCheckedRd != null) {
        rtl.free(this,"FUnCheckedRd");
        this.FUnCheckedRd = null;
      };
      if (this.FUnCheckedFocusRd != null) {
        rtl.free(this,"FUnCheckedFocusRd");
        this.FUnCheckedFocusRd = null;
      };
      if (this.FUnCheckedDisabledRd != null) {
        rtl.free(this,"FUnCheckedDisabledRd");
        this.FUnCheckedDisabledRd = null;
      };
      if (this.FCheckedDisabledRd != null) {
        rtl.free(this,"FCheckedDisabledRd");
        this.FCheckedDisabledRd = null;
      };
      rtl.free(this,"FFill");
      rtl.free(this,"FStroke");
      $mod.TTMSFNCCustomControlBaseCommon.Destroy.call(this);
    };
    this.GetCheckBoxBitmap = function (AChecked, AFocused, AEnabled) {
      var Result = null;
      if (!(this.FCheckedChk != null) || !(this.FCheckedFocusChk != null) || !(this.FUnCheckedChk != null) || !(this.FUnCheckedFocusChk != null) || !(this.FCheckedDisabledChk != null) || !(this.FUnCheckedDisabledChk != null)) this.CreateCheckBoxBitmaps();
      if (AChecked) {
        if (AEnabled) {
          if (AFocused) {
            Result = this.FCheckedFocusChk}
           else Result = this.FCheckedChk;
        } else Result = this.FCheckedDisabledChk;
      } else {
        if (AEnabled) {
          if (AFocused) {
            Result = this.FUnCheckedFocusChk}
           else Result = this.FUnCheckedChk;
        } else Result = this.FUnCheckedDisabledChk;
      };
      return Result;
    };
    this.GetRadioButtonBitmap = function (AChecked, AFocused, AEnabled) {
      var Result = null;
      if (!(this.FCheckedRd != null) || !(this.FCheckedFocusRd != null) || !(this.FUnCheckedRd != null) || !(this.FUnCheckedFocusRd != null) || !(this.FCheckedDisabledRd != null) || !(this.FUnCheckedDisabledRd != null)) this.CreateRadioButtonBitmaps();
      if (AChecked) {
        if (AEnabled) {
          if (AFocused) {
            Result = this.FCheckedFocusRd}
           else Result = this.FCheckedRd;
        } else Result = this.FCheckedDisabledRd;
      } else {
        if (AEnabled) {
          if (AFocused) {
            Result = this.FUnCheckedFocusRd}
           else Result = this.FUnCheckedRd;
        } else Result = this.FUnCheckedDisabledRd;
      };
      return Result;
    };
    this.GetButtonBitmap = function (AWidth, AHeight, ADown, AFocused, AEnabled) {
      var Result = null;
      this.CreateButtonBitmaps(AWidth,AHeight);
      if (ADown) {
        if (AEnabled) {
          if (AFocused) {
            Result = this.FDownFocusBtn}
           else Result = this.FDownBtn;
        } else Result = this.FNormalDisabledBtn;
      } else {
        if (AEnabled) {
          if (AFocused) {
            Result = this.FNormalFocusBtn}
           else Result = this.FNormalBtn;
        } else Result = this.FNormalDisabledBtn;
      };
      return Result;
    };
    this.IsDesignTime = function () {
      var Result = false;
      Result = false;
      if (this.FOwner != null) Result = (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && !((pas.Classes.TComponentStateItem.csReading in this.FOwner.FComponentState) || (pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState));
      return Result;
    };
    this.IsLoading = function () {
      var Result = false;
      Result = false;
      if (this.FOwner != null) Result = pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState;
      return Result;
    };
    this.IsReading = function () {
      var Result = false;
      Result = false;
      if (this.FOwner != null) Result = pas.Classes.TComponentStateItem.csReading in this.FOwner.FComponentState;
      return Result;
    };
    this.IsDesigning = function () {
      var Result = false;
      Result = pas.Classes.TComponentStateItem.csDesigning in this.FComponentState;
      return Result;
    };
    this.IsDesignerForm = function () {
      var Result = false;
      var frm = null;
      frm = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetOwnerForm(this);
      Result = this.IsDesigning();
      if (frm != null) Result = Result || $mod.TTMSFNCCustomDesignerForm.isPrototypeOf(frm);
      return Result;
    };
    this.IsDestroying = function () {
      var Result = false;
      Result = pas.Classes.TComponentStateItem.csDestroying in this.FComponentState;
      return Result;
    };
    this.SaveSettingsToFile = function (AFileName, AAppearanceOnly) {
      this.FAppearancePersisting = AAppearanceOnly;
      pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.SaveSettingsToFile(this,AFileName);
      this.FAppearancePersisting = false;
    };
    this.LoadSettingsFromFile = function (AFileName) {
      pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.LoadSettingsFromFile(this,AFileName);
    };
    this.SaveSettingsToStream = function (AStream, AAppearanceOnly) {
      this.FAppearancePersisting = AAppearanceOnly;
      pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.SaveSettingsToStream(this,AStream);
      this.FAppearancePersisting = false;
    };
    this.LoadSettingsFromStream = function (AStream) {
      pas["WEBLib.TMSFNCPersistence"].TTMSFNCPersistence.LoadSettingsFromStream(this,AStream);
    };
    this.DisableBackground = function () {
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
      this.SetColor(-1);
    };
    this.EnableBackground = function () {
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
    };
    this.DisableFill = function () {
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
    };
    this.EnableFill = function () {
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
    };
    this.DisableStroke = function () {
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
    };
    this.EnableStroke = function () {
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
    };
    this.Resize = function () {
      pas["WEBLib.Controls"].TCustomControl.Resize.call(this);
      this.UpdateControlAfterResize();
    };
    this.Paint = function () {
      pas["WEBLib.Controls"].TCustomControl.Paint.call(this);
      this.DrawControl();
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("AdaptToStyle",3,rtl.boolean,"GetAdaptToStyle","SetAdaptToStyle",{Default: false});
    $r.addProperty("AllowFocus",3,rtl.boolean,"GetAllowFocus","SetAllowFocus",{Default: true});
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("DoubleBuffered",0,rtl.boolean,"FDoubleBuffered","FDoubleBuffered",{Default: false});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("ParentDoubleBuffered",0,rtl.boolean,"FParentDoubleBuffered","FParentDoubleBuffered",{Default: true});
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("OnMouseWheel",0,pas["WEBLib.Controls"].$rtti["TMouseWheelEvent"],"FOnMouseWheel","FOnMouseWheel");
    $r.addProperty("PopupMenu",0,pas["WEBLib.Forms"].$rtti["TPopupMenu"],"FPopupMenu","FPopupMenu");
    $r.addProperty("ShowAcceleratorChar",2,rtl.boolean,"FShowAcceleratorChar","SetShowAcceleratorChar",{Default: true});
    $r.addProperty("OnBeforeDraw",0,$mod.$rtti["TTMSFNCCustomControlBeforeDrawEvent"],"FOnBeforeDraw","FOnBeforeDraw");
    $r.addProperty("OnAfterDraw",0,$mod.$rtti["TTMSFNCCustomControlAfterDrawEvent"],"FOnAfterDraw","FOnAfterDraw");
    $r.addProperty("OnCanSaveProperty",0,$mod.$rtti["TTMSFNCCustomControlCanSavePropertyEvent"],"FOnCanSaveProperty","FOnCanSaveProperty");
    $r.addProperty("OnCanLoadProperty",0,$mod.$rtti["TTMSFNCCustomControlCanLoadPropertyEvent"],"FOnCanLoadProperty","FOnCanLoadProperty");
  });
  $mod.$rtti.$ClassRef("TTMSFNCCustomControlClass",{instancetype: $mod.$rtti["TTMSFNCCustomControl"]});
  rtl.createClass($mod,"TTMSFNCControl",$mod.TTMSFNCCustomControl,function () {
    this.RegisterRuntimeClasses = function () {
      $mod.TTMSFNCCustomControl.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCControl);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
},["WEBLib.TMSFNCUtils","SysUtils","WEBLib.StdCtrls"]);
rtl.module("WEBLib.TMSFNCCustomSelector",["System","Classes","WEBLib.TMSFNCTypes","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCGraphicsTypes","WEBLib.TMSFNCCustomControl","WEBLib.Controls"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 0;
  $mod.$rtti.$Class("TTMSFNCCustomSelector");
  this.TTMSFNCCustomSelectorItemState = {"0": "isNormal", isNormal: 0, "1": "isHover", isHover: 1, "2": "isDown", isDown: 2, "3": "isSelected", isSelected: 3, "4": "isDisabled", isDisabled: 4};
  $mod.$rtti.$Enum("TTMSFNCCustomSelectorItemState",{minvalue: 0, maxvalue: 4, ordtype: 1, enumtype: this.TTMSFNCCustomSelectorItemState});
  rtl.createClass($mod,"TTMSFNCCustomSelectorItem",pas.Classes.TCollectionItem,function () {
    this.$init = function () {
      pas.Classes.TCollectionItem.$init.call(this);
      this.FOwner = null;
      this.FRowSpan = 0;
      this.FColumnSpan = 0;
      this.FVisible = false;
      this.FText = "";
      this.FEnabled = false;
      this.FSeparator = false;
      this.FSeparatorHeight = 0.0;
      this.FMargins = null;
      this.FCanDeselect = false;
      this.FCanSelect = false;
      this.FVerticalTextAlign = 0;
      this.FHorizontalTextAlign = 0;
      this.FHint = "";
      this.FDataBoolean = false;
      this.FDataString = "";
      this.FDataObject = null;
      this.FDataInteger = 0;
      this.FDataPointer = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FMargins = undefined;
      this.FDataObject = undefined;
      pas.Classes.TCollectionItem.$final.call(this);
    };
    this.SetColumnSpan = function (Value) {
      if (this.FColumnSpan !== Value) {
        this.FColumnSpan = Value;
        this.FOwner.CalculateItems();
      };
    };
    this.SetRowSpan = function (Value) {
      if (this.FRowSpan !== Value) {
        this.FRowSpan = Value;
        this.FOwner.CalculateItems();
      };
    };
    this.SetVisible = function (Value) {
      if (this.FVisible !== Value) {
        this.FVisible = Value;
        this.FOwner.CalculateItems();
      };
    };
    this.SetText = function (Value) {
      if (this.FText !== Value) {
        this.FText = Value;
        this.FOwner.InvalidateItems();
      };
    };
    this.SetEnabled = function (Value) {
      if (this.FEnabled !== Value) {
        this.FEnabled = Value;
        this.FOwner.InvalidateItems();
      };
    };
    this.SetSeparator = function (Value) {
      if (this.FSeparator !== Value) {
        this.FSeparator = Value;
        this.FOwner.CalculateItems();
      };
    };
    this.SetSeparatorHeight = function (Value) {
      if (this.FSeparatorHeight !== Value) {
        this.FSeparatorHeight = Value;
        this.FOwner.InvalidateItems();
      };
    };
    this.SetMargins = function (Value) {
      this.FMargins.Assign(Value);
    };
    this.SetCanDeselect = function (Value) {
      this.FCanDeselect = Value;
    };
    this.SetCanSelect = function (Value) {
      this.FCanSelect = Value;
    };
    this.SetHorizontalTextAlign = function (Value) {
      if (this.FHorizontalTextAlign !== Value) {
        this.FHorizontalTextAlign = Value;
        this.FOwner.InvalidateItems();
      };
    };
    this.SetVerticalTextAlign = function (Value) {
      if (this.FVerticalTextAlign !== Value) {
        this.FVerticalTextAlign = Value;
        this.FOwner.InvalidateItems();
      };
    };
    this.IsSeparatorHeightStored = function () {
      var Result = false;
      Result = this.FSeparatorHeight !== 5;
      return Result;
    };
    this.MarginsChanged = function (Sender) {
      this.FOwner.CalculateItems();
    };
    this.Create$1 = function (ACollection) {
      pas.Classes.TCollectionItem.Create$1.apply(this,arguments);
      if (this.FCollection != null) this.FOwner = rtl.as(this.FCollection,$mod.TTMSFNCCustomSelectorItems).FOwner$1;
      this.FSeparator = false;
      this.FColumnSpan = 1;
      this.FCanDeselect = true;
      this.FCanSelect = true;
      this.FRowSpan = 1;
      this.FMargins = pas["WEBLib.TMSFNCTypes"].TTMSFNCMargins.$create("Create$1");
      this.FMargins.FOnChange = rtl.createCallback(this,"MarginsChanged");
      this.FEnabled = true;
      this.FSeparatorHeight = 5;
      this.FVisible = true;
      if (this.FOwner != null) this.FOwner.CalculateItems();
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomSelectorItem.isPrototypeOf(Source)) {
        this.FRowSpan = rtl.as(Source,$mod.TTMSFNCCustomSelectorItem).FRowSpan;
        this.FColumnSpan = rtl.as(Source,$mod.TTMSFNCCustomSelectorItem).FColumnSpan;
        this.FVisible = rtl.as(Source,$mod.TTMSFNCCustomSelectorItem).FVisible;
        this.FText = rtl.as(Source,$mod.TTMSFNCCustomSelectorItem).FText;
        this.FEnabled = rtl.as(Source,$mod.TTMSFNCCustomSelectorItem).FEnabled;
        this.FSeparator = rtl.as(Source,$mod.TTMSFNCCustomSelectorItem).FSeparator;
        this.FSeparatorHeight = rtl.as(Source,$mod.TTMSFNCCustomSelectorItem).FSeparatorHeight;
        this.FMargins.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorItem).FMargins);
        this.FCanDeselect = rtl.as(Source,$mod.TTMSFNCCustomSelectorItem).FCanDeselect;
        this.FCanSelect = rtl.as(Source,$mod.TTMSFNCCustomSelectorItem).FCanSelect;
        this.FHint = rtl.as(Source,$mod.TTMSFNCCustomSelectorItem).FHint;
      };
    };
    this.State = function () {
      var Result = 0;
      Result = $mod.TTMSFNCCustomSelectorItemState.isNormal;
      if (!this.FSeparator) {
        if (this.FEnabled) {
          if (this.GetIndex() === this.FOwner.FDownItemIndex) {
            Result = $mod.TTMSFNCCustomSelectorItemState.isDown}
           else if (this.GetIndex() === this.FOwner.FHoveredItemIndex) {
            Result = $mod.TTMSFNCCustomSelectorItemState.isHover}
           else if (this.GetIndex() === this.FOwner.FSelectedItemIndex) Result = $mod.TTMSFNCCustomSelectorItemState.isSelected;
        } else Result = $mod.TTMSFNCCustomSelectorItemState.isDisabled;
      };
      return Result;
    };
    this.Destroy = function () {
      rtl.free(this,"FMargins");
      pas.Classes.TCollectionItem.Destroy.call(this);
      if (this.FOwner != null) this.FOwner.CalculateItems();
    };
    var $r = this.$rtti;
    $r.addProperty("CanSelect",2,rtl.boolean,"FCanSelect","SetCanSelect",{Default: true});
    $r.addProperty("CanDeselect",2,rtl.boolean,"FCanDeselect","SetCanDeselect",{Default: true});
    $r.addProperty("ColumnSpan",2,rtl.longint,"FColumnSpan","SetColumnSpan",{Default: 1});
    $r.addProperty("RowSpan",2,rtl.longint,"FRowSpan","SetRowSpan",{Default: 1});
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Separator",2,rtl.boolean,"FSeparator","SetSeparator",{Default: false});
    $r.addProperty("SeparatorHeight",14,rtl.double,"FSeparatorHeight","SetSeparatorHeight",{stored: "IsSeparatorHeightStored"});
    $r.addProperty("Margins",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCMargins"],"FMargins","SetMargins");
    $r.addProperty("Text",2,rtl.string,"FText","SetText");
    $r.addProperty("HorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FHorizontalTextAlign","SetHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("VerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FVerticalTextAlign","SetVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("Hint",0,rtl.string,"FHint","FHint");
  });
  rtl.createClass($mod,"TTMSFNCCustomSelectorItems",pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$init.call(this);
      this.FOwner$1 = null;
    };
    this.$final = function () {
      this.FOwner$1 = undefined;
      pas["WEBLib.TMSFNCTypes"].TTMSFNCOwnedCollection.$final.call(this);
    };
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItem$1 = function (Index, Value) {
      this.SetItem(Index,Value);
    };
    this.CreateItemClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCCustomSelectorItem;
      return Result;
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner$1;
      return Result;
    };
    this.Create$3 = function (AOwner) {
      pas.Classes.TOwnedCollection.Create$2.call(this,AOwner,this.CreateItemClass());
      this.FOwner$1 = AOwner;
      return this;
    };
    this.Add$1 = function () {
      var Result = null;
      Result = pas.Classes.TCollection.Add.call(this);
      return Result;
    };
    this.Insert$1 = function (Index) {
      var Result = null;
      Result = pas.Classes.TCollection.Insert.call(this,Index);
      return Result;
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomSelectorAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FStrokeHover = null;
      this.FFillDown = null;
      this.FVerticalSpacing = 0.0;
      this.FStrokeDown = null;
      this.FFillSelected = null;
      this.FHorizontalSpacing = 0.0;
      this.FStrokeSelected = null;
      this.FFill = null;
      this.FFillHover = null;
      this.FStroke = null;
      this.FFillDisabled = null;
      this.FStrokeDisabled = null;
      this.FSeparatorStroke = null;
      this.FFont = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FStrokeHover = undefined;
      this.FFillDown = undefined;
      this.FStrokeDown = undefined;
      this.FFillSelected = undefined;
      this.FStrokeSelected = undefined;
      this.FFill = undefined;
      this.FFillHover = undefined;
      this.FStroke = undefined;
      this.FFillDisabled = undefined;
      this.FStrokeDisabled = undefined;
      this.FSeparatorStroke = undefined;
      this.FFont = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetFill = function (Value) {
      this.FFill.Assign(Value);
    };
    this.SetFillDown = function (Value) {
      this.FFillDown.Assign(Value);
    };
    this.SetFillHover = function (Value) {
      this.FFillHover.Assign(Value);
    };
    this.SetFillSelected = function (Value) {
      this.FFillSelected.Assign(Value);
    };
    this.SetHorizontalSpacing = function (Value) {
      if (this.FHorizontalSpacing !== Value) {
        this.FHorizontalSpacing = Value;
        this.Changed();
      };
    };
    this.SetStroke = function (Value) {
      this.FStroke.Assign(Value);
    };
    this.SetStrokeDown = function (Value) {
      this.FStrokeDown.Assign(Value);
    };
    this.SetStrokeHover = function (Value) {
      this.FStrokeHover.Assign(Value);
    };
    this.SetStrokeSelected = function (Value) {
      this.FStrokeSelected.Assign(Value);
    };
    this.SetVerticalSpacing = function (Value) {
      if (this.FVerticalSpacing !== Value) {
        this.FVerticalSpacing = Value;
        this.Changed();
      };
    };
    this.SetFillDisabled = function (Value) {
      this.FFillDisabled.Assign(Value);
    };
    this.SetStrokeDisabled = function (Value) {
      this.FStrokeDisabled.Assign(Value);
    };
    this.SetSeparatorStroke = function (Value) {
      this.FSeparatorStroke.Assign(Value);
    };
    this.SetFont = function (Value) {
      this.FFont.AssignSource(Value);
    };
    this.IsHorizontalSpacingStored = function () {
      var Result = false;
      Result = this.FHorizontalSpacing !== 4;
      return Result;
    };
    this.IsVerticalSpacingStored = function () {
      var Result = false;
      Result = this.FVerticalSpacing !== 4;
      return Result;
    };
    this.Changed = function () {
      this.FOwner.CalculateItems();
    };
    this.FontChanged = function (Sender) {
      this.FOwner.InvalidateItems();
    };
    this.FillChanged = function (Sender) {
      this.FOwner.InvalidateItems();
    };
    this.StrokeChanged = function (Sender) {
      this.FOwner.InvalidateItems();
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(13882323,50));
      this.FFillHover = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FFillHover.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(10061943,50));
      this.FFillDown = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FFillDown.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(9470064,50));
      this.FFillSelected = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FFillSelected.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(9470064,50));
      this.FFillDisabled = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FFillDisabled.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(8421504,50));
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FStroke.SetColor(11119017);
      this.FStrokeHover = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FStrokeHover.SetColor(10061943);
      this.FStrokeDown = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FStrokeDown.SetColor(9470064);
      this.FStrokeSelected = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FStrokeSelected.SetColor(5197615);
      this.FStrokeDisabled = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FStrokeDisabled.SetColor(11119017);
      this.FSeparatorStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,12632256]);
      this.FSeparatorStroke.SetColor(11119017);
      this.FFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FFont.FOnChanged = rtl.createCallback(this,"FontChanged");
      this.FSeparatorStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FFont.FOnChanged = rtl.createCallback(this,"FontChanged");
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FFillDown.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FFillHover.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FFillSelected.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FFillDisabled.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FStrokeHover.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FStrokeDown.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FStrokeDisabled.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FStrokeSelected.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FHorizontalSpacing = 4;
      this.FVerticalSpacing = 4;
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomSelectorAppearance.isPrototypeOf(Source)) {
        this.FFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FFill);
        this.FFillHover.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FFillHover);
        this.FFillSelected.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FFillSelected);
        this.FFillDisabled.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FFillDisabled);
        this.FFillDown.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FFillDown);
        this.FStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FStroke);
        this.FStrokeHover.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FStrokeHover);
        this.FStrokeSelected.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FStrokeSelected);
        this.FStrokeDown.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FStrokeDown);
        this.FStrokeDisabled.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FStrokeDisabled);
        this.FVerticalSpacing = rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FVerticalSpacing;
        this.FHorizontalSpacing = rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FHorizontalSpacing;
        this.FSeparatorStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FSeparatorStroke);
        this.FFont.AssignSource(rtl.as(Source,$mod.TTMSFNCCustomSelectorAppearance).FFont);
      };
    };
    this.Destroy = function () {
      rtl.free(this,"FFont");
      rtl.free(this,"FFill");
      rtl.free(this,"FFillDown");
      rtl.free(this,"FFillSelected");
      rtl.free(this,"FFillHover");
      rtl.free(this,"FFillDisabled");
      rtl.free(this,"FSeparatorStroke");
      rtl.free(this,"FStroke");
      rtl.free(this,"FStrokeDown");
      rtl.free(this,"FStrokeSelected");
      rtl.free(this,"FStrokeHover");
      rtl.free(this,"FStrokeDisabled");
      pas.System.TObject.Destroy.call(this);
    };
    var $r = this.$rtti;
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("StrokeHover",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStrokeHover","SetStrokeHover");
    $r.addProperty("FillHover",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFillHover","SetFillHover");
    $r.addProperty("StrokeDown",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStrokeDown","SetStrokeDown");
    $r.addProperty("FillDown",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFillDown","SetFillDown");
    $r.addProperty("StrokeSelected",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStrokeSelected","SetStrokeSelected");
    $r.addProperty("FillSelected",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFillSelected","SetFillSelected");
    $r.addProperty("StrokeDisabled",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStrokeDisabled","SetStrokeDisabled");
    $r.addProperty("FillDisabled",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFillDisabled","SetFillDisabled");
    $r.addProperty("VerticalSpacing",14,rtl.double,"FVerticalSpacing","SetVerticalSpacing",{stored: "IsVerticalSpacingStored"});
    $r.addProperty("HorizontalSpacing",14,rtl.double,"FHorizontalSpacing","SetHorizontalSpacing",{stored: "IsHorizontalSpacingStored"});
    $r.addProperty("SeparatorStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FSeparatorStroke","SetSeparatorStroke");
    $r.addProperty("Font",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FFont","SetFont");
  });
  rtl.recNewT($mod,"TTMSFNCCustomSelectorPositionItem",function () {
    this.TileSet = false;
    this.$eq = function (b) {
      return this.TileSet === b.TileSet;
    };
    this.$assign = function (s) {
      this.TileSet = s.TileSet;
      return this;
    };
    var $r = $mod.$rtti.$Record("TTMSFNCCustomSelectorPositionItem",{});
    $r.addField("TileSet",rtl.boolean);
  });
  rtl.recNewT($mod,"TTMSFNCCustomSelectorDisplayItem",function () {
    this.Item = null;
    this.PageIndex = 0;
    this.Column = 0;
    this.Row = 0;
    this.ColumnSpan = 0;
    this.RowSpan = 0;
    this.$new = function () {
      var r = Object.create(this);
      r.Rect = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      return r;
    };
    this.$eq = function (b) {
      return this.Rect.$eq(b.Rect) && (this.Item === b.Item) && (this.PageIndex === b.PageIndex) && (this.Column === b.Column) && (this.Row === b.Row) && (this.ColumnSpan === b.ColumnSpan) && (this.RowSpan === b.RowSpan);
    };
    this.$assign = function (s) {
      this.Rect.$assign(s.Rect);
      this.Item = s.Item;
      this.PageIndex = s.PageIndex;
      this.Column = s.Column;
      this.Row = s.Row;
      this.ColumnSpan = s.ColumnSpan;
      this.RowSpan = s.RowSpan;
      return this;
    };
    var $r = $mod.$rtti.$Record("TTMSFNCCustomSelectorDisplayItem",{});
    $r.addField("Rect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]);
    $r.addField("Item",$mod.$rtti["TTMSFNCCustomSelectorItem"]);
    $r.addField("PageIndex",rtl.longint);
    $r.addField("Column",rtl.longint);
    $r.addField("Row",rtl.longint);
    $r.addField("ColumnSpan",rtl.longint);
    $r.addField("RowSpan",rtl.longint);
  });
  $mod.$rtti.$DynArray("TTMSFNCCustomSelectorItemPosArray$a",{eltype: $mod.$rtti["TTMSFNCCustomSelectorPositionItem"]});
  $mod.$rtti.$DynArray("TTMSFNCCustomSelectorItemPosArray",{eltype: $mod.$rtti["TTMSFNCCustomSelectorItemPosArray$a"]});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorItemSelected",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItemIndex",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorItemDeselected",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItemIndex",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorItemClick",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItemIndex",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorItemBeforeDrawBackground",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItemIndex",rtl.longint],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorItemAfterDrawBackground",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItemIndex",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorItemBeforeDrawContent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItemIndex",rtl.longint],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorItemAfterDrawContent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItemIndex",rtl.longint]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorItemBeforeDrawText",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItemIndex",rtl.longint],["AText",rtl.string,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorItemAfterDrawText",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AItemIndex",rtl.longint],["AText",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorBeforeDraw",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorAfterDraw",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomSelectorDisplayList",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = $mod.TTMSFNCCustomSelectorDisplayItem.$new();
      Result.$assign(rtl.getObject(this.Get(Index)));
      return Result;
    };
    this.SetItem = function (Index, Value) {
      var v = $mod.TTMSFNCCustomSelectorDisplayItem.$new();
      v.$assign(Value);
      this.Put(Index,v);
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomSelector",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FDisplayList = null;
      this.FUpdateCount$1 = 0;
      this.FItems = null;
      this.FRows = 0;
      this.FColumns = 0;
      this.FPageCount = 0;
      this.FAppearance = null;
      this.FSelectedItemIndex = 0;
      this.FFocusedItemIndex = 0;
      this.FHoveredItemIndex = 0;
      this.FDownItemIndex = 0;
      this.FOnItemBeforeDrawText = null;
      this.FOnAfterDraw$1 = null;
      this.FOnItemAfterDrawBackground = null;
      this.FOnItemSelected = null;
      this.FOnItemAfterDrawText = null;
      this.FOnBeforeDraw$1 = null;
      this.FOnItemBeforeDrawBackground = null;
      this.FOnItemDeselected = null;
      this.FOnItemClick = null;
      this.FOnItemBeforeDrawContent = null;
      this.FOnItemAfterDrawContent = null;
      this.FBlockChange = false;
      this.FClosedRemotely = false;
    };
    this.$final = function () {
      this.FDisplayList = undefined;
      this.FItems = undefined;
      this.FAppearance = undefined;
      this.FOnItemBeforeDrawText = undefined;
      this.FOnAfterDraw$1 = undefined;
      this.FOnItemAfterDrawBackground = undefined;
      this.FOnItemSelected = undefined;
      this.FOnItemAfterDrawText = undefined;
      this.FOnBeforeDraw$1 = undefined;
      this.FOnItemBeforeDrawBackground = undefined;
      this.FOnItemDeselected = undefined;
      this.FOnItemClick = undefined;
      this.FOnItemBeforeDrawContent = undefined;
      this.FOnItemAfterDrawContent = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetItems = function (Value) {
      this.FItems.Assign(Value);
    };
    this.SetColumns = function (Value) {
      if (this.FColumns !== Value) {
        this.FColumns = Value;
        this.UpdateCalculations();
        this.CalculateItems();
      };
    };
    this.SetRows = function (Value) {
      if (this.FRows !== Value) {
        this.FRows = Value;
        this.UpdateCalculations();
        this.CalculateItems();
      };
    };
    this.SetAppearance = function (Value) {
      this.FAppearance.Assign(Value);
    };
    this.SetSelectedItemIndex = function (Value) {
      if (this.FSelectedItemIndex !== Value) {
        this.FSelectedItemIndex = Value;
        this.FFocusedItemIndex = Value;
        this.InvalidateItems();
      };
    };
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCCustomSelector);
    };
    this.GetHintString = function () {
      var Result = "";
      var it = null;
      Result = pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBase.GetHintString.call(this);
      if ((this.FHoveredItemIndex >= 0) && (this.FHoveredItemIndex <= (this.FItems.GetCount() - 1))) {
        it = this.FItems.GetItem$1(this.FHoveredItemIndex);
        Result = it.FHint;
      };
      return Result;
    };
    this.HasHint = function () {
      var Result = false;
      var it = null;
      Result = false;
      if ((this.FHoveredItemIndex >= 0) && (this.FHoveredItemIndex <= (this.FItems.GetCount() - 1))) {
        it = this.FItems.GetItem$1(this.FHoveredItemIndex);
        Result = it.FHint !== "";
      };
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,0);
      return Result;
    };
    this.GetDisplayItem = function (AItemIndex) {
      var Result = $mod.TTMSFNCCustomSelectorDisplayItem.$new();
      var I = 0;
      var it = null;
      Result.Rect.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      Result.Item = null;
      Result.PageIndex = -1;
      Result.Row = -1;
      Result.Column = -1;
      Result.ColumnSpan = -1;
      Result.RowSpan = -1;
      for (var $l1 = 0, $end2 = this.FDisplayList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = this.FDisplayList.GetItem(I).Item;
        if ((it != null) && (it.GetIndex() === AItemIndex)) {
          Result.$assign(this.FDisplayList.GetItem(I));
          break;
        };
      };
      return Result;
    };
    this.GetNextSelectableItem = function () {
      var Result = 0;
      var I = 0;
      var it = null;
      Result = this.FFocusedItemIndex;
      for (var $l1 = 0, $end2 = this.FDisplayList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = this.FDisplayList.GetItem(I).Item;
        if ((it != null) && it.FEnabled && !it.FSeparator && (it.GetIndex() > this.FFocusedItemIndex)) {
          Result = it.GetIndex();
          break;
        };
      };
      return Result;
    };
    this.GetPreviousSelectableItem = function () {
      var Result = 0;
      var I = 0;
      var it = null;
      Result = this.FFocusedItemIndex;
      for (var $l1 = this.FDisplayList.GetCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        it = this.FDisplayList.GetItem(I).Item;
        if ((it != null) && it.FEnabled && !it.FSeparator && (it.GetIndex() < this.FFocusedItemIndex)) {
          Result = it.GetIndex();
          break;
        };
      };
      return Result;
    };
    this.GetNextSelectableRowItem = function () {
      var Result = 0;
      var I = 0;
      var it = null;
      var disp = $mod.TTMSFNCCustomSelectorDisplayItem.$new();
      Result = this.FFocusedItemIndex;
      if (Result === -1) {
        Result = this.GetNextSelectableItem();
        return Result;
      };
      disp.$assign(this.GetDisplayItem(this.FFocusedItemIndex));
      for (var $l1 = 0, $end2 = this.FDisplayList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = this.FDisplayList.GetItem(I).Item;
        if ((it != null) && it.FEnabled && !it.FSeparator && (it.GetIndex() > this.FFocusedItemIndex) && (disp.Column >= this.FDisplayList.GetItem(I).Column) && (disp.Column <= (this.FDisplayList.GetItem(I).Column + (this.FDisplayList.GetItem(I).ColumnSpan - 1))) && (this.FDisplayList.GetItem(I).Row > disp.Row)) {
          Result = it.GetIndex();
          break;
        };
      };
      return Result;
    };
    this.GetPreviousSelectableRowItem = function () {
      var Result = 0;
      var I = 0;
      var it = null;
      var disp = $mod.TTMSFNCCustomSelectorDisplayItem.$new();
      Result = this.FFocusedItemIndex;
      if (Result === -1) {
        Result = this.GetPreviousSelectableItem();
        return Result;
      };
      disp.$assign(this.GetDisplayItem(this.FFocusedItemIndex));
      for (var $l1 = this.FDisplayList.GetCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        it = this.FDisplayList.GetItem(I).Item;
        if ((it != null) && it.FEnabled && !it.FSeparator && (it.GetIndex() < this.FFocusedItemIndex) && (disp.Column >= this.FDisplayList.GetItem(I).Column) && (disp.Column <= (this.FDisplayList.GetItem(I).Column + (this.FDisplayList.GetItem(I).ColumnSpan - 1))) && (this.FDisplayList.GetItem(I).Row < disp.Row)) {
          Result = it.GetIndex();
          break;
        };
      };
      return Result;
    };
    this.GetFirstSelectableItem = function () {
      var Result = 0;
      var I = 0;
      var it = null;
      Result = this.FFocusedItemIndex;
      for (var $l1 = 0, $end2 = this.FDisplayList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = this.FDisplayList.GetItem(I).Item;
        if ((it != null) && it.FEnabled && !it.FSeparator) {
          Result = it.GetIndex();
          break;
        };
      };
      return Result;
    };
    this.GetLastSelectableItem = function () {
      var Result = 0;
      var I = 0;
      var it = null;
      Result = this.FFocusedItemIndex;
      for (var $l1 = this.FDisplayList.GetCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        it = this.FDisplayList.GetItem(I).Item;
        if ((it != null) && it.FEnabled && !it.FSeparator) {
          Result = it.GetIndex();
          break;
        };
      };
      return Result;
    };
    this.CreateItemsCollection = function () {
      var Result = null;
      Result = $mod.TTMSFNCCustomSelectorItems.$create("Create$3",[this]);
      return Result;
    };
    this.CalculateItems = function () {
      var $Self = this;
      var itposarr = [];
      var r = 0;
      var newr = 0;
      var c = 0;
      var newc = 0;
      var AItemIndex = 0;
      var AItem = null;
      var cspan = 0;
      var rspan = 0;
      var newcspan = 0;
      var newrspan = 0;
      var I = 0;
      var K = 0;
      var sepc = 0;
      var f = false;
      var APageIndex = 0;
      var hs = 0.0;
      var vs = 0.0;
      var iw = 0.0;
      var ih = 0.0;
      var w = 0.0;
      var h = 0.0;
      var exw = 0.0;
      var exh = 0.0;
      var tx = 0.0;
      var ty = 0.0;
      var pw = 0.0;
      var ph = 0.0;
      var offs = 0.0;
      var itd = $mod.TTMSFNCCustomSelectorDisplayItem.$new();
      function FindNewPos(AItem, ANewR, ANewC, AFound, ARows, ACurRow, AColumns, ACurCol, PosArr) {
        var i = 0;
        var k = 0;
        var cspan = 0;
        var rspan = 0;
        var J = 0;
        var L = 0;
        AFound.set(false);
        for (var $l1 = ANewR.get(), $end2 = ARows - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          for (var $l3 = ANewC.get(), $end4 = AColumns - 1; $l3 <= $end4; $l3++) {
            k = $l3;
            cspan = AItem.FColumnSpan;
            cspan = Math.min(cspan,$Self.FColumns - ANewC.get());
            rspan = AItem.FRowSpan;
            rspan = Math.min(rspan,$Self.FRows - ANewR.get());
            AFound.set(true);
            for (var $l5 = 0, $end6 = rspan - 1; $l5 <= $end6; $l5++) {
              J = $l5;
              for (var $l7 = 0, $end8 = cspan - 1; $l7 <= $end8; $l7++) {
                L = $l7;
                if (PosArr[i + J][k + L].TileSet) AFound.set(false);
              };
            };
            if (AFound.get()) break;
            ANewC.set(ANewC.get() + 1);
          };
          if (AFound.get()) break;
          ANewC.set(0);
          ANewR.set(ANewR.get() + 1);
        };
      };
      if ((pas.Classes.TComponentStateItem.csDestroying in $Self.FComponentState) || ($Self.FUpdateCount$1 > 0)) return;
      $Self.FDisplayList.Clear();
      if ($Self.FItems.GetCount() === 0) return;
      pw = $Self.GetCalculationWidth();
      ph = $Self.GetCalculationHeight();
      hs = $Self.FAppearance.FHorizontalSpacing;
      vs = $Self.FAppearance.FVerticalSpacing;
      w = pw - vs;
      iw = w;
      if ($Self.FColumns > 0) iw = (w - ($Self.FColumns * hs)) / $Self.FColumns;
      h = ph - vs - $Self.GetTotalSeparatorHeight();
      sepc = $Self.GetTotalSeparatorCount();
      ih = h;
      if (($Self.FRows - sepc) > 0) ih = (h - (($Self.FRows - sepc) * vs)) / ($Self.FRows - sepc);
      AItemIndex = 0;
      APageIndex = 0;
      offs = 0;
      while (AItemIndex <= ($Self.FItems.GetCount() - 1)) {
        c = 0;
        r = 0;
        itposarr = rtl.arraySetLength(itposarr,$mod.TTMSFNCCustomSelectorPositionItem,0,0);
        itposarr = rtl.arraySetLength(itposarr,$mod.TTMSFNCCustomSelectorPositionItem,$Self.FRows,$Self.FColumns);
        while (r < $Self.FRows) {
          while (c < $Self.FColumns) {
            if ((AItemIndex >= 0) && (AItemIndex <= ($Self.FItems.GetCount() - 1)) && (APageIndex === 0)) {
              AItem = $Self.FItems.GetItem$1(AItemIndex);
              if (!AItem.FVisible) {
                AItemIndex += 1;
                continue;
              };
              if (AItem.FSeparator) {
                cspan = $Self.FColumns;
                rspan = 1;
              } else {
                cspan = AItem.FColumnSpan;
                rspan = AItem.FRowSpan;
              };
              cspan = Math.min(cspan,$Self.FColumns - c);
              rspan = Math.min(rspan,$Self.FRows - r);
              exw = (iw * cspan) + (hs * (cspan - 1));
              if (AItem.FSeparator) {
                exh = AItem.FSeparatorHeight}
               else exh = (ih * rspan) + (vs * (rspan - 1));
              tx = (pw * APageIndex) + hs + (iw * c) + (hs * c);
              ty = offs + vs + (ih * r) + (vs * r) + $Self.GetTopOffset();
              itd.Rect.$assign(pas["WEBLib.TMSFNCTypes"].RectF(tx + AItem.FMargins.FLeft,ty + AItem.FMargins.FTop,(tx + exw) - AItem.FMargins.FRight,(ty + exh) - AItem.FMargins.FBottom));
              itd.Item = AItem;
              itd.PageIndex = APageIndex;
              itd.Column = c;
              itd.Row = r;
              itd.ColumnSpan = cspan;
              itd.RowSpan = rspan;
              $Self.FDisplayList.Add($mod.TTMSFNCCustomSelectorDisplayItem.$clone(itd));
              newcspan = c;
              newrspan = r;
              newcspan = (newcspan + cspan) - 1;
              newrspan = (newrspan + rspan) - 1;
              for (var $l1 = r, $end2 = newrspan; $l1 <= $end2; $l1++) {
                I = $l1;
                for (var $l3 = c, $end4 = newcspan; $l3 <= $end4; $l3++) {
                  K = $l3;
                  itposarr[I][K].TileSet = true;
                };
              };
              if (AItem.FSeparator) offs = ((offs + AItem.FSeparatorHeight) - (ih * rspan)) + (vs * (rspan - 1));
            };
            AItemIndex += 1;
            c += 1;
            newc = c;
            newr = r;
            f = false;
            if ((AItemIndex >= 0) && (AItemIndex <= ($Self.FItems.GetCount() - 1))) FindNewPos($Self.FItems.GetItem$1(AItemIndex),{get: function () {
                return newr;
              }, set: function (v) {
                newr = v;
              }},{get: function () {
                return newc;
              }, set: function (v) {
                newc = v;
              }},{get: function () {
                return f;
              }, set: function (v) {
                f = v;
              }},$Self.FRows,newr,$Self.FColumns,newc,itposarr);
            c = newc;
            r = newr;
            if ((c >= $Self.FColumns) || (r >= $Self.FRows)) break;
          };
          c = 0;
          r += 1;
          newc = c;
          newr = r;
          f = false;
          if ((AItemIndex >= 0) && (AItemIndex <= ($Self.FItems.GetCount() - 1))) FindNewPos($Self.FItems.GetItem$1(AItemIndex),{get: function () {
              return newr;
            }, set: function (v) {
              newr = v;
            }},{get: function () {
              return newc;
            }, set: function (v) {
              newc = v;
            }},{get: function () {
              return f;
            }, set: function (v) {
              f = v;
            }},$Self.FRows,newr,$Self.FColumns,newc,itposarr);
          c = newc;
          r = newr;
          if (r >= $Self.FRows) break;
        };
        APageIndex += 1;
      };
      $Self.FPageCount = APageIndex;
      $Self.InvalidateItems();
    };
    this.UpdateCalculations = function () {
    };
    this.ApplyStyle = function () {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ApplyStyle.call(this);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FFill.SetColor(c);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundStrokeColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FStroke.SetColor(c);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleDefaultButtonFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FAppearance.FFill.SetColor(c);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleSelectionFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FFillSelected.SetColor(c);
        this.FAppearance.FFillDown.SetColor(c);
        this.FAppearance.FFillHover.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Blend(c,this.FAppearance.FFill.FColor,25));
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleDefaultButtonStrokeColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FStroke.SetColor(c);
        this.FAppearance.FStrokeSelected.SetColor(c);
        this.FAppearance.FStrokeDown.SetColor(c);
        this.FAppearance.FStrokeHover.SetColor(c);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleTextFontColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FAppearance.FFont.SetColor(c);
    };
    this.ResetToDefaultStyle = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ResetToDefaultStyle.call(this);
      this.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FFill.SetColor(16777215);
      this.FStroke.SetColor(12632256);
      this.FAppearance.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(13882323,50));
      this.FAppearance.FFillHover.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(10061943,50));
      this.FAppearance.FFillDown.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(9470064,50));
      this.FAppearance.FFillSelected.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(9470064,50));
      this.FAppearance.FFillDisabled.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Lighter(8421504,50));
      this.FAppearance.FStroke.SetColor(11119017);
      this.FAppearance.FStrokeHover.SetColor(10061943);
      this.FAppearance.FStrokeDown.SetColor(9470064);
      this.FAppearance.FStrokeSelected.SetColor(5197615);
      this.FAppearance.FStrokeDisabled.SetColor(11119017);
      this.FAppearance.FFont.SetColor(0);
      this.FAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FAppearance.FFillHover.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FAppearance.FFillDown.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FAppearance.FFillSelected.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FAppearance.FFillDisabled.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FAppearance.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FStrokeHover.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FStrokeDown.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FStrokeSelected.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FStrokeDisabled.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FSeparatorStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
    };
    this.GetTopOffset = function () {
      var Result = 0.0;
      Result = 0;
      return Result;
    };
    this.GetCalculationWidth = function () {
      var Result = 0.0;
      Result = this.GetWidth();
      return Result;
    };
    this.GetCalculationHeight = function () {
      var Result = 0.0;
      Result = this.GetHeight() - this.GetTopOffset();
      return Result;
    };
    this.GetTotalSeparatorHeight = function () {
      var Result = 0.0;
      var I = 0;
      Result = 0;
      for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (this.FItems.GetItem$1(I).FSeparator) Result = Result + this.FItems.GetItem$1(I).FSeparatorHeight + this.FAppearance.FVerticalSpacing;
      };
      return Result;
    };
    this.GetTotalSeparatorCount = function () {
      var Result = 0;
      var I = 0;
      Result = 0;
      for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (this.FItems.GetItem$1(I).FSeparator) Result += 1;
      };
      return Result;
    };
    this.DoItemSelected = function (AItemIndex) {
      if (this.FOnItemSelected != null) this.FOnItemSelected(this,AItemIndex);
    };
    this.DoItemClick = function (AItemIndex) {
      if (this.FOnItemClick != null) this.FOnItemClick(this,AItemIndex);
    };
    this.DoItemDeselected = function (AItemIndex) {
      if (this.FOnItemDeselected != null) this.FOnItemDeselected(this,AItemIndex);
    };
    this.DoItemBeforeDrawBackground = function (AGraphics, ARect, AItemIndex, ADefaultDraw) {
      if (this.FOnItemBeforeDrawBackground != null) this.FOnItemBeforeDrawBackground(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AItemIndex,ADefaultDraw);
    };
    this.DoItemAfterDrawBackground = function (AGraphics, ARect, AItemIndex) {
      if (this.FOnItemAfterDrawBackground != null) this.FOnItemAfterDrawBackground(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AItemIndex);
    };
    this.DoItemBeforeDrawContent = function (AGraphics, ARect, AItemIndex, ADefaultDraw) {
      if (this.FOnItemBeforeDrawContent != null) this.FOnItemBeforeDrawContent(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AItemIndex,ADefaultDraw);
    };
    this.DoItemAfterDrawContent = function (AGraphics, ARect, AItemIndex) {
      if (this.FOnItemAfterDrawContent != null) this.FOnItemAfterDrawContent(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AItemIndex);
    };
    this.DoItemBeforeDrawText = function (AGraphics, ARect, AItemIndex, AText, ADefaultDraw) {
      if (this.FOnItemBeforeDrawText != null) this.FOnItemBeforeDrawText(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AItemIndex,AText,ADefaultDraw);
    };
    this.DoItemAfterDrawText = function (AGraphics, ARect, AItemIndex, AText) {
      if (this.FOnItemAfterDrawText != null) this.FOnItemAfterDrawText(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AItemIndex,AText);
    };
    this.DoBeforeDraw$1 = function (AGraphics, ARect, ADefaultDraw) {
      if (this.FOnBeforeDraw$1 != null) this.FOnBeforeDraw$1(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),ADefaultDraw);
    };
    this.DoAfterDraw$1 = function (AGraphics, ARect) {
      if (this.FOnAfterDraw$1 != null) this.FOnAfterDraw$1(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
    };
    this.DrawItems = function (AGraphics) {
      var I = 0;
      for (var $l1 = 0, $end2 = this.FDisplayList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        this.DrawItem(AGraphics,$mod.TTMSFNCCustomSelectorDisplayItem.$clone(this.FDisplayList.GetItem(I)));
      };
    };
    this.Draw = function (AGraphics, ARect) {
      var a = false;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      a = true;
      this.DoBeforeDraw$1(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),{get: function () {
          return a;
        }, set: function (v) {
          a = v;
        }});
      if (a) {
        this.DrawItems(AGraphics);
        this.DoAfterDraw$1(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
      };
    };
    this.DrawItem = function (AGraphics, ADisplayItem) {
      this.DrawItemBackGround(AGraphics,$mod.TTMSFNCCustomSelectorDisplayItem.$clone(ADisplayItem));
      this.DrawItemContent(AGraphics,$mod.TTMSFNCCustomSelectorDisplayItem.$clone(ADisplayItem));
      this.DrawItemText(AGraphics,$mod.TTMSFNCCustomSelectorDisplayItem.$clone(ADisplayItem));
    };
    this.DrawItemBackGround = function (AGraphics, ADisplayItem) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var it = null;
      var a = false;
      var fr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      it = ADisplayItem.Item;
      if (it != null) {
        if (!it.FSeparator) {
          AGraphics.FFill.Assign(this.FAppearance.FFill);
          AGraphics.FStroke.Assign(this.FAppearance.FStroke);
          if (it.FEnabled) {
            if (it.GetIndex() === this.FDownItemIndex) {
              AGraphics.FFill.Assign(this.FAppearance.FFillDown);
              AGraphics.FStroke.Assign(this.FAppearance.FStrokeDown);
            } else if (it.GetIndex() === this.FHoveredItemIndex) {
              AGraphics.FFill.Assign(this.FAppearance.FFillHover);
              AGraphics.FStroke.Assign(this.FAppearance.FStrokeHover);
            } else if (it.GetIndex() === this.FSelectedItemIndex) {
              AGraphics.FFill.Assign(this.FAppearance.FFillSelected);
              AGraphics.FStroke.Assign(this.FAppearance.FStrokeSelected);
            };
          } else {
            AGraphics.FFill.Assign(this.FAppearance.FFillDisabled);
            AGraphics.FStroke.Assign(this.FAppearance.FStrokeDisabled);
          };
        } else AGraphics.FStroke.Assign(this.FAppearance.FSeparatorStroke);
        r.$assign(ADisplayItem.Rect);
        a = true;
        this.DoItemBeforeDrawBackground(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ADisplayItem.Rect),it.GetIndex(),{get: function () {
            return a;
          }, set: function (v) {
            a = v;
          }});
        if (a) {
          if (it.FSeparator) {
            AGraphics.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,pas["WEBLib.TMSFNCTypes"].CenterPointEx(r).Y)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right,pas["WEBLib.TMSFNCTypes"].CenterPointEx(r).Y)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown)}
           else {
            AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
            if (this.IsFocused() && (this.FFocusedItemIndex === it.GetIndex())) {
              fr.$assign(r);
              pas["WEBLib.TMSFNCTypes"].InflateRectEx(fr,-2,-2);
              AGraphics.DrawFocusRectangle$3(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(fr),0,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
            };
          };
          this.DoItemAfterDrawBackground(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ADisplayItem.Rect),it.GetIndex());
        };
      };
    };
    this.DrawItemContent = function (AGraphics, ADisplayItem) {
      var it = null;
      var a = false;
      it = ADisplayItem.Item;
      if (it != null) {
        a = true;
        this.DoItemBeforeDrawContent(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ADisplayItem.Rect),it.GetIndex(),{get: function () {
            return a;
          }, set: function (v) {
            a = v;
          }});
        if (a) this.DoItemAfterDrawContent(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ADisplayItem.Rect),it.GetIndex());
      };
    };
    this.DrawItemText = function (AGraphics, ADisplayItem) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var it = null;
      var str = "";
      var a = false;
      it = ADisplayItem.Item;
      if ((it != null) && (it.FText !== "")) {
        r.$assign(ADisplayItem.Rect);
        str = it.FText;
        a = true;
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-2,-2);
        AGraphics.FFont.AssignSource(this.FAppearance.FFont);
        this.DoItemBeforeDrawText(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ADisplayItem.Rect),it.GetIndex(),{get: function () {
            return str;
          }, set: function (v) {
            str = v;
          }},{get: function () {
            return a;
          }, set: function (v) {
            a = v;
          }});
        if (a) {
          AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),str,false,it.FHorizontalTextAlign,it.FVerticalTextAlign,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
          this.DoItemAfterDrawText(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ADisplayItem.Rect),it.GetIndex(),str);
        };
      };
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseDown.apply(this,arguments);
      this.CaptureEx();
      this.FDownItemIndex = this.XYToItem(X,Y);
      this.InvalidateItems();
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
      var s = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseUp.apply(this,arguments);
      this.ReleaseCaptureEx();
      s = this.XYToItem(X,Y);
      if ((s === this.FDownItemIndex) && (this.FDownItemIndex !== -1)) {
        this.ProcessSelection(s);
        if (s !== -1) this.DoItemClick(s);
      };
      this.FDownItemIndex = -1;
      this.FHoveredItemIndex = -1;
      this.InvalidateItems();
    };
    this.HandleMouseMove = function (Shift, X, Y) {
      var h = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseMove.apply(this,arguments);
      if (this.FDownItemIndex > -1) return;
      h = this.XYToItem(X,Y);
      if (h !== this.FHoveredItemIndex) {
        this.FHoveredItemIndex = h;
        this.CancelHint();
        this.InvalidateItems();
      };
    };
    this.HandleKeyDown = function (Key, Shift) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleKeyDown.apply(this,arguments);
      var $tmp1 = Key.get();
      if ($tmp1 === 38) {
        this.FFocusedItemIndex = this.GetPreviousSelectableRowItem();
        this.InvalidateItems();
      } else if ($tmp1 === 37) {
        this.FFocusedItemIndex = this.GetPreviousSelectableItem();
        this.InvalidateItems();
      } else if ($tmp1 === 40) {
        this.FFocusedItemIndex = this.GetNextSelectableRowItem();
        this.InvalidateItems();
      } else if ($tmp1 === 39) {
        this.FFocusedItemIndex = this.GetNextSelectableItem();
        this.InvalidateItems();
      } else if ($tmp1 === 36) {
        this.FFocusedItemIndex = this.GetFirstSelectableItem();
        this.InvalidateItems();
      } else if ($tmp1 === 35) {
        this.FFocusedItemIndex = this.GetLastSelectableItem();
        this.InvalidateItems();
      };
      if (Key.get() === 13) {
        this.FDownItemIndex = this.FFocusedItemIndex;
        this.InvalidateItems();
      };
    };
    this.HandleKeyUp = function (Key, Shift) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleKeyUp.apply(this,arguments);
      if (Key.get() === 13) {
        this.FDownItemIndex = -1;
        this.ProcessSelection(this.FFocusedItemIndex);
        this.InvalidateItems();
      };
    };
    this.HandleMouseLeave = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseLeave.call(this);
      this.FHoveredItemIndex = -1;
      this.InvalidateItems();
    };
    this.ProcessSelection = function (AItemIndex) {
      var it = null;
      var prev = 0;
      if ((AItemIndex >= 0) && (AItemIndex <= (this.FItems.GetCount() - 1))) {
        it = this.FItems.GetItem$1(AItemIndex);
        if (it.FCanSelect) {
          prev = this.FSelectedItemIndex;
          if (it.FCanDeselect && (it.GetIndex() === this.FSelectedItemIndex)) {
            this.FSelectedItemIndex = -1}
           else this.FSelectedItemIndex = it.GetIndex();
          if (this.FSelectedItemIndex !== -1) this.FFocusedItemIndex = this.FSelectedItemIndex;
          if (it.FCanDeselect && (prev !== -1)) this.DoItemDeselected(prev);
          if (this.FSelectedItemIndex !== -1) this.DoItemSelected(this.FSelectedItemIndex);
        };
      };
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.FColumns = 4;
      this.FRows = 4;
      this.FItems = this.CreateItemsCollection();
      this.FDisplayList = $mod.TTMSFNCCustomSelectorDisplayList.$create("Create$1");
      this.FAppearance = $mod.TTMSFNCCustomSelectorAppearance.$create("Create$1",[this]);
      this.FSelectedItemIndex = -1;
      this.FFocusedItemIndex = -1;
      this.FHoveredItemIndex = -1;
      this.FDownItemIndex = -1;
      if (this.IsDesignTime()) this.InitializeDefault();
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FAppearance");
      rtl.free(this,"FDisplayList");
      rtl.free(this,"FItems");
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.call(this);
    };
    this.Assign = function (Source) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomSelector.isPrototypeOf(Source)) {
        this.FItems.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelector).FItems);
        this.FAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomSelector).FAppearance);
        this.FRows = rtl.as(Source,$mod.TTMSFNCCustomSelector).FRows;
        this.FColumns = rtl.as(Source,$mod.TTMSFNCCustomSelector).FColumns;
      };
    };
    this.BeginUpdate = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBase.BeginUpdate.call(this);
      this.FUpdateCount$1 += 1;
    };
    this.EndUpdate = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBase.EndUpdate.call(this);
      this.FUpdateCount$1 -= 1;
      if (this.FUpdateCount$1 === 0) this.CalculateItems();
    };
    this.InvalidateItems = function () {
      this.Invalidate();
    };
    this.UpdateControlAfterResize = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.UpdateControlAfterResize.call(this);
      this.CalculateItems();
    };
    this.InitializeDefault = function () {
    };
    this.XYToItem = function (X, Y) {
      var Result = 0;
      var I = 0;
      var it = null;
      Result = -1;
      for (var $l1 = 0, $end2 = this.FDisplayList.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.FDisplayList.GetItem(I).Rect,pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
          it = this.FDisplayList.GetItem(I).Item;
          if ((it != null) && it.FEnabled && !it.FSeparator) {
            Result = it.GetIndex();
            break;
          };
        };
      };
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCDefaultSelector",$mod.TTMSFNCCustomSelector,function () {
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
  });
  $mod.$init = function () {
    pas.Classes.RegisterClass($mod.TTMSFNCCustomSelector);
  };
},["Math","WEBLib.TMSFNCUtils","WEBLib.TMSFNCStyles"]);
rtl.module("WEBLib.TMSFNCBitmapSelector",["System","Classes","WEBLib.TMSFNCCustomSelector","WEBLib.TMSFNCTypes","WEBLib.TMSFNCBitmapContainer","WEBLib.TMSFNCGraphics"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 0;
  $mod.$rtti.$Class("TTMSFNCCustomBitmapSelector");
  this.TTMSFNCBitmapSelectorBitmapAlign = {"0": "baLeft", baLeft: 0, "1": "baCenter", baCenter: 1, "2": "baRight", baRight: 2};
  $mod.$rtti.$Enum("TTMSFNCBitmapSelectorBitmapAlign",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCBitmapSelectorBitmapAlign});
  rtl.createClass($mod,"TTMSFNCBitmapSelectorItem",pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItem,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItem.$init.call(this);
      this.FOwner$1 = null;
      this.FBitmap = null;
      this.FBitmapAlign = 0;
      this.FBitmapName = "";
      this.FBitmapSize = 0.0;
    };
    this.$final = function () {
      this.FOwner$1 = undefined;
      this.FBitmap = undefined;
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItem.$final.call(this);
    };
    this.SetBitmap = function (Value) {
      if (this.FBitmap !== Value) {
        this.FBitmap.Assign(Value);
        this.FOwner$1.InvalidateItems();
      };
    };
    this.SetBitmapAlign = function (Value) {
      if (this.FBitmapAlign !== Value) {
        this.FBitmapAlign = Value;
        this.FOwner$1.InvalidateItems();
      };
    };
    this.SetBitmapName = function (Value) {
      if (this.FBitmapName !== Value) {
        this.FBitmapName = Value;
        this.FOwner$1.InvalidateItems();
      };
    };
    this.SetBitmapSize = function (Value) {
      if (this.FBitmapSize !== Value) {
        this.FBitmapSize = Value;
        this.FOwner$1.InvalidateItems();
      };
    };
    this.GetBitmapContainer = function () {
      var Result = null;
      Result = this.FOwner$1.GetBitmapContainer();
      return Result;
    };
    this.IsBitmapSizeStored = function () {
      var Result = false;
      Result = this.FBitmapSize !== 0;
      return Result;
    };
    this.GetDisplayBitmap = function () {
      var Result = null;
      Result = null;
      if ((this.FBitmap != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(this.FBitmap)) {
        Result = this.FBitmap}
       else if ((this.FOwner$1.GetBitmapContainer() != null) && (this.FBitmapName !== "")) Result = this.FOwner$1.GetBitmapContainer().FindBitmap$1(this.FBitmapName);
      return Result;
    };
    this.BitmapChanged = function (Sender) {
      this.FOwner$1.InvalidateItems();
    };
    this.Create$1 = function (ACollection) {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItem.Create$1.apply(this,arguments);
      if (this.FCollection != null) this.FOwner$1 = rtl.as(this.FCollection,$mod.TTMSFNCBitmapSelectorItems).FOwner$2;
      this.FBitmapAlign = $mod.TTMSFNCBitmapSelectorBitmapAlign.baCenter;
      this.FBitmapSize = 0;
      this.FBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FBitmap");
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItem.Destroy.call(this);
    };
    this.Assign = function (Source) {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItem.Assign.apply(this,arguments);
      if ($mod.TTMSFNCBitmapSelectorItem.isPrototypeOf(Source)) {
        this.FBitmap.Assign(rtl.as(Source,$mod.TTMSFNCBitmapSelectorItem).FBitmap);
        this.FBitmapName = rtl.as(Source,$mod.TTMSFNCBitmapSelectorItem).FBitmapName;
        this.FBitmapSize = rtl.as(Source,$mod.TTMSFNCBitmapSelectorItem).FBitmapSize;
        this.FBitmapAlign = rtl.as(Source,$mod.TTMSFNCBitmapSelectorItem).FBitmapAlign;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Bitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FBitmap","SetBitmap");
    $r.addProperty("BitmapName",2,rtl.string,"FBitmapName","SetBitmapName");
    $r.addProperty("BitmapAlign",2,$mod.$rtti["TTMSFNCBitmapSelectorBitmapAlign"],"FBitmapAlign","SetBitmapAlign",{Default: $mod.TTMSFNCBitmapSelectorBitmapAlign.baCenter});
    $r.addProperty("BitmapSize",14,rtl.double,"FBitmapSize","SetBitmapSize",{stored: "IsBitmapSizeStored"});
  });
  rtl.createClass($mod,"TTMSFNCBitmapSelectorItems",pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems.$init.call(this);
      this.FOwner$2 = null;
    };
    this.$final = function () {
      this.FOwner$2 = undefined;
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems.$final.call(this);
    };
    this.GetItem$2 = function (Index) {
      var Result = null;
      Result = this.GetItem$1(Index);
      return Result;
    };
    this.SetItem$2 = function (Index, Value) {
      this.SetItem$1(Index,Value);
    };
    this.CreateItemClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCBitmapSelectorItem;
      return Result;
    };
    this.Create$3 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems.Create$3.apply(this,arguments);
      this.FOwner$2 = rtl.as(AOwner,$mod.TTMSFNCCustomBitmapSelector);
      return this;
    };
    this.Add$2 = function () {
      var Result = null;
      Result = pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems.Add$1.call(this);
      return Result;
    };
    this.Insert$2 = function (Index) {
      var Result = null;
      Result = pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems.Insert$1.call(this,Index);
      return Result;
    };
  });
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorBitmapSelected",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ABitmap",pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorBitmapDeselected",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ABitmap",pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"]]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomBitmapSelector",pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCDefaultSelector,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCDefaultSelector.$init.call(this);
      this.FOnBitmapSelected = null;
      this.FOnBitmapDeselected = null;
      this.FBitmapContainer = null;
    };
    this.$final = function () {
      this.FOnBitmapSelected = undefined;
      this.FOnBitmapDeselected = undefined;
      this.FBitmapContainer = undefined;
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCDefaultSelector.$final.call(this);
    };
    this.GetSelectedBitmap = function () {
      var Result = null;
      Result = this.FindBitmapByItem(this.FSelectedItemIndex);
      return Result;
    };
    this.SetBitmapContainer = function (Value) {
      this.FBitmapContainer = Value;
      this.InvalidateItems();
    };
    this.GetItems = function () {
      var Result = null;
      Result = this.FItems;
      return Result;
    };
    this.SetItems$1 = function (Value) {
      this.GetItems().Assign(Value);
    };
    this.GetBitmapContainer = function () {
      var Result = null;
      Result = this.FBitmapContainer;
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,0);
      return Result;
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FBitmapContainer)) this.FBitmapContainer = null;
    };
    this.DoItemSelected = function (AItemIndex) {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.DoItemSelected.apply(this,arguments);
      if (this.FOnBitmapSelected != null) this.FOnBitmapSelected(this,this.FindBitmapByItem(AItemIndex));
    };
    this.DoItemDeselected = function (AItemIndex) {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.DoItemDeselected.apply(this,arguments);
      if (this.FOnBitmapDeselected != null) this.FOnBitmapDeselected(this,this.FindBitmapByItem(AItemIndex));
    };
    this.CreateItemsCollection = function () {
      var Result = null;
      Result = $mod.TTMSFNCBitmapSelectorItems.$create("Create$3",[this]);
      return Result;
    };
    this.DrawItemContent = function (AGraphics, ADisplayItem) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var it = null;
      var itbmp = null;
      var a = false;
      var sz = 0.0;
      var bmp = null;
      var bmpr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var w = 0.0;
      var h = 0.0;
      var bmpdr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      it = ADisplayItem.Item;
      if ((it != null) && $mod.TTMSFNCBitmapSelectorItem.isPrototypeOf(it)) {
        r.$assign(ADisplayItem.Rect);
        a = true;
        this.DoItemBeforeDrawContent(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),it.GetIndex(),{get: function () {
            return a;
          }, set: function (v) {
            a = v;
          }});
        if (a) {
          itbmp = rtl.as(it,$mod.TTMSFNCBitmapSelectorItem);
          bmp = itbmp.GetDisplayBitmap();
          if (bmp != null) {
            pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-2,-2);
            sz = r.Bottom - r.Top;
            if (itbmp.FBitmapSize > 0) sz = itbmp.FBitmapSize;
            var $tmp1 = itbmp.FBitmapAlign;
            if ($tmp1 === $mod.TTMSFNCBitmapSelectorBitmapAlign.baLeft) {
              bmpr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Left + sz,r.Bottom))}
             else if ($tmp1 === $mod.TTMSFNCBitmapSelectorBitmapAlign.baCenter) {
              bmpr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + ((r.Right - r.Left - sz) / 2),r.Top,r.Left + ((r.Right - r.Left - sz) / 2) + sz,r.Bottom))}
             else if ($tmp1 === $mod.TTMSFNCBitmapSelectorBitmapAlign.baRight) bmpr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Right - sz,r.Top,r.Right,r.Bottom));
            w = 0;
            h = 0;
            $mod.GetAspectSize({get: function () {
                return w;
              }, set: function (v) {
                w = v;
              }},{get: function () {
                return h;
              }, set: function (v) {
                h = v;
              }},bmp.GetWidth(),bmp.GetHeight(),bmpr.Right - bmpr.Left,bmpr.Bottom - bmpr.Top,bmpr.Right - bmpr.Left,bmpr.Bottom - bmpr.Top,true,false,false);
            bmpdr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(bmpr.Left + ((bmpr.Right - bmpr.Left - w) / 2),bmpr.Top + ((bmpr.Bottom - bmpr.Top - h) / 2),bmpr.Left + ((bmpr.Right - bmpr.Left - w) / 2) + w,bmpr.Top + ((bmpr.Bottom - bmpr.Top - h) / 2) + h));
            bmpdr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Math.round(bmpdr.Left),Math.round(bmpdr.Top),Math.round(bmpdr.Right),Math.round(bmpdr.Bottom)));
            AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(bmpdr),bmp,true,false,true,false);
          };
          this.DoItemAfterDrawContent(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),it.GetIndex());
        };
      };
    };
    this.DrawItemText = function (AGraphics, ADisplayItem) {
      var it = null;
      var bmp = null;
      var dps = pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorDisplayItem.$new();
      var sz = 0.0;
      if ((ADisplayItem.Item != null) && $mod.TTMSFNCBitmapSelectorItem.isPrototypeOf(ADisplayItem.Item)) {
        it = rtl.as(ADisplayItem.Item,$mod.TTMSFNCBitmapSelectorItem);
        bmp = it.GetDisplayBitmap();
        if (bmp != null) {
          dps.$assign(ADisplayItem);
          sz = dps.Rect.Bottom - dps.Rect.Top;
          if (it.FBitmapSize > 0) sz = it.FBitmapSize;
          var $tmp1 = it.FBitmapAlign;
          if ($tmp1 === $mod.TTMSFNCBitmapSelectorBitmapAlign.baLeft) {
            dps.Rect.Left = dps.Rect.Left + sz + 4}
           else if ($tmp1 === $mod.TTMSFNCBitmapSelectorBitmapAlign.baRight) dps.Rect.Right = dps.Rect.Right - sz - 4;
          pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.DrawItemText.call(this,AGraphics,pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorDisplayItem.$clone(dps));
        } else pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.DrawItemText.apply(this,arguments);
      } else pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.DrawItemText.apply(this,arguments);
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.Create$1.apply(this,arguments);
      this.SetWidth(135);
      this.SetHeight(135);
      return this;
    };
    this.LoadFromBitmapContainer = function () {
      var I = 0;
      var it = null;
      if (!(this.GetBitmapContainer() != null)) return;
      this.BeginUpdate();
      this.GetItems().Clear();
      for (var $l1 = 0, $end2 = this.GetBitmapContainer().GetItems().GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = this.GetItems().Add$2();
        it.SetBitmapName(this.GetBitmapContainer().GetItems().GetItemEx(I).FName);
      };
      this.EndUpdate();
    };
    this.FindItemByBitmap = function (ABitmap) {
      var Result = 0;
      var I = 0;
      var it = null;
      Result = -1;
      for (var $l1 = 0, $end2 = this.GetItems().GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = rtl.as(this.GetItems().GetItem$2(I),$mod.TTMSFNCBitmapSelectorItem);
        if (it.GetDisplayBitmap() === ABitmap) {
          Result = it.GetIndex();
          break;
        };
      };
      return Result;
    };
    this.FindBitmapByItem = function (AItem) {
      var Result = null;
      var I = 0;
      var it = null;
      Result = null;
      for (var $l1 = 0, $end2 = this.GetItems().GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = rtl.as(this.GetItems().GetItem$2(I),$mod.TTMSFNCBitmapSelectorItem);
        if (it.GetIndex() === AItem) {
          Result = it.GetDisplayBitmap();
          break;
        };
      };
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCBitmapSelector",$mod.TTMSFNCCustomBitmapSelector,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClasses([$mod.TTMSFNCBitmapSelector,$mod.TTMSFNCBitmapSelectorItem]);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Appearance",2,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorAppearance"],"FAppearance","SetAppearance");
    $r.addProperty("Rows",2,rtl.longint,"FRows","SetRows",{Default: 4});
    $r.addProperty("Columns",2,rtl.longint,"FColumns","SetColumns",{Default: 4});
    $r.addProperty("Items",3,$mod.$rtti["TTMSFNCBitmapSelectorItems"],"GetItems","SetItems$1");
    $r.addProperty("OnBitmapSelected",0,$mod.$rtti["TTMSFNCCustomSelectorBitmapSelected"],"FOnBitmapSelected","FOnBitmapSelected");
    $r.addProperty("OnBitmapDeselected",0,$mod.$rtti["TTMSFNCCustomSelectorBitmapDeselected"],"FOnBitmapDeselected","FOnBitmapDeselected");
    $r.addProperty("BitmapContainer",3,pas["WEBLib.TMSFNCBitmapContainer"].$rtti["TTMSFNCBitmapContainer"],"GetBitmapContainer","SetBitmapContainer");
    $r.addProperty("OnItemSelected",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemSelected"],"FOnItemSelected","FOnItemSelected");
    $r.addProperty("SelectedItemIndex",2,rtl.longint,"FSelectedItemIndex","SetSelectedItemIndex",{Default: -1});
    $r.addProperty("OnItemBeforeDrawBackground",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemBeforeDrawBackground"],"FOnItemBeforeDrawBackground","FOnItemBeforeDrawBackground");
    $r.addProperty("OnItemAfterDrawBackground",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemAfterDrawBackground"],"FOnItemAfterDrawBackground","FOnItemAfterDrawBackground");
    $r.addProperty("OnItemBeforeDrawContent",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemBeforeDrawContent"],"FOnItemBeforeDrawContent","FOnItemBeforeDrawContent");
    $r.addProperty("OnItemAfterDrawContent",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemAfterDrawContent"],"FOnItemAfterDrawContent","FOnItemAfterDrawContent");
    $r.addProperty("OnBeforeDraw",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorBeforeDraw"],"FOnBeforeDraw$1","FOnBeforeDraw$1");
    $r.addProperty("OnAfterDraw",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorAfterDraw"],"FOnAfterDraw$1","FOnAfterDraw$1");
    $r.addProperty("OnItemBeforeDrawText",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemBeforeDrawText"],"FOnItemBeforeDrawText","FOnItemBeforeDrawText");
    $r.addProperty("OnItemAfterDrawText",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemAfterDrawText"],"FOnItemAfterDrawText","FOnItemAfterDrawText");
  });
  this.GetAspectSize = function (w, h, ow, oh, nw, nh, crw, crh, asp, st, cr) {
    var arc = 0.0;
    var ar = 0.0;
    if (asp) {
      if ((ow > 0) && (oh > 0) && (nw > 0) && (nh > 0)) {
        if ((ow < nw) && (oh < nh) && !st) {
          w.set(ow);
          h.set(oh);
        } else {
          if ((ow / oh) < (nw / nh)) {
            h.set(nh);
            w.set((nh * ow) / oh);
          } else {
            w.set(nw);
            h.set((nw * oh) / ow);
          };
        };
      } else {
        w.set(0);
        h.set(0);
      };
    } else {
      if (st) {
        w.set(nw);
        h.set(nh);
      } else {
        w.set(ow);
        h.set(oh);
        if (cr) {
          if ((w.get() >= h.get()) && (w.get() > 0)) {
            h.set((crw / w.get()) * h.get());
            w.set(crw);
          } else if ((h.get() >= w.get()) && (h.get() > 0)) {
            w.set((crh / h.get()) * w.get());
            h.set(crh);
          };
          if (h.get() === 0) {
            ar = 1}
           else ar = w.get() / h.get();
          if (crh === 0) {
            arc = 1}
           else arc = crw / crh;
          if ((ar < 1) || (arc > ar)) {
            h.set(crw / ar);
            w.set(crw);
          } else {
            w.set(ar * crh);
            h.set(crh);
          };
        };
      };
    };
  };
},["WEBLib.TMSFNCUtils","Types"]);
rtl.module("WEBLib.TMSFNCPopup",["System","Classes","WEBLib.Controls","WEBLib.TMSFNCCustomComponent","WEBLib.TMSFNCGraphics","WEBLib.Graphics","WEBLib.TMSFNCTypes","WEBLib.TMSFNCGraphicsTypes","WEBLib.Forms","WEBLib.ExtCtrls","Types"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 3;
  this.TTMSFNCPopupPlacement = {"0": "ppBottom", ppBottom: 0, "1": "ppTop", ppTop: 1, "2": "ppLeft", ppLeft: 2, "3": "ppRight", ppRight: 3, "4": "ppCenter", ppCenter: 4, "5": "ppBottomCenter", ppBottomCenter: 5, "6": "ppTopCenter", ppTopCenter: 6, "7": "ppLeftCenter", ppLeftCenter: 7, "8": "ppRightCenter", ppRightCenter: 8, "9": "ppAbsolute", ppAbsolute: 9, "10": "ppMouse", ppMouse: 10, "11": "ppMouseCenter", ppMouseCenter: 11, "12": "ppAboveMouse", ppAboveMouse: 12, "13": "ppAboveMouseCenter", ppAboveMouseCenter: 13};
  $mod.$rtti.$Enum("TTMSFNCPopupPlacement",{minvalue: 0, maxvalue: 13, ordtype: 1, enumtype: this.TTMSFNCPopupPlacement});
  $mod.$rtti.$MethodVar("TTMSFNCPopupPaint",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]]]), methodkind: 0});
  $mod.$rtti.$Class("TTMSFNCCustomPopupForm");
  $mod.$rtti.$ClassRef("TTMSFNCCustomPopupFormClass",{instancetype: $mod.$rtti["TTMSFNCCustomPopupForm"]});
  $mod.$rtti.$Class("TTMSFNCCustomPopup");
  rtl.createClass($mod,"TTMSFNCCustomPopupForm",pas["WEBLib.Forms"].TCustomForm,function () {
    this.$init = function () {
      pas["WEBLib.Forms"].TCustomForm.$init.call(this);
      this.FPreferedDisplayIndex = 0;
      this.FHintWindow = false;
      this.FTimer = null;
      this.FFirstShow = false;
      this.FOwner$1 = null;
      this.FShowModal = false;
      this.FPlacement = 0;
      this.FRealPlacement = 0;
      this.FPlacementControl = null;
      this.FOffset = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      this.FSize = pas["WEBLib.TMSFNCTypes"].TSizeF.$new();
      this.FPlacementRectangle = null;
      this.FScreenPlacementRect = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      this.FPlacementChanged = false;
      this.FDragWithParent = false;
      this.FOnBeforeClose = null;
      this.FOnBeforeShow = null;
      this.FScreenContentRect = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      this.FContentPadding = null;
      this.FContentControl = null;
      this.FOnRealPlacementChanged = null;
      this.FOnPopupPaint = null;
    };
    this.$final = function () {
      this.FTimer = undefined;
      this.FOwner$1 = undefined;
      this.FPlacementControl = undefined;
      this.FOffset = undefined;
      this.FSize = undefined;
      this.FPlacementRectangle = undefined;
      this.FScreenPlacementRect = undefined;
      this.FOnBeforeClose = undefined;
      this.FOnBeforeShow = undefined;
      this.FScreenContentRect = undefined;
      this.FContentPadding = undefined;
      this.FContentControl = undefined;
      this.FOnRealPlacementChanged = undefined;
      this.FOnPopupPaint = undefined;
      pas["WEBLib.Forms"].TCustomForm.$final.call(this);
    };
    this.SetOffset = function (Value) {
      if ((this.FOffset.X !== Value.X) || (this.FOffset.Y !== Value.Y)) {
        this.FOffset.$assign(Value);
        this.ApplyPlacement();
      };
    };
    this.SetSize = function (Value) {
      if ((this.FSize.cx !== Value.cx) || (this.FSize.cy !== Value.cy)) {
        this.FSize.$assign(Value);
        this.ApplyPlacement();
      };
    };
    this.TimerProc = function (Sender) {
      if ((this.FVisible || this.FHintWindow) && (this.FFirstShow || this.FDragWithParent)) this.ApplyPlacement();
      if ((this.FVisible || this.FHintWindow) && this.FFirstShow) {
        this.FFirstShow = false;
      };
    };
    this.SetPlacementRectangle = function (Value) {
      this.FPlacementRectangle.Assign(Value);
    };
    this.SetPlacement = function (Value) {
      if (this.FPlacement !== Value) {
        this.FPlacement = Value;
        this.ApplyPlacement();
      };
    };
    this.SetPlacementControl = function (Value) {
      if (this.FPlacementControl !== Value) {
        if (this.FPlacementControl !== null) this.FPlacementControl.RemoveFreeNotification(this);
        this.FPlacementControl = Value;
        if (this.FPlacementControl !== null) this.FPlacementControl.FreeNotification(this);
      };
    };
    this.SetDragWithParent = function (Value) {
      this.FDragWithParent = Value;
    };
    this.SetContentPadding = function (Value) {
      this.FContentPadding.Assign(Value);
    };
    this.SetContentControl = function (Value) {
      if (this.FContentControl !== Value) {
        if (this.FContentControl !== null) this.FContentControl.RemoveFreeNotification(this);
        this.FContentControl = Value;
        if (this.FContentControl !== null) {
          this.FContentControl.FreeNotification(this);
          try {
            this.FContentControl.SetParent(this);
            this.FContentControl.SetAlign(pas["WEBLib.Controls"].TAlign.alNone);
            this.FContentControl.SetVisible(true);
          } finally {
          };
        };
      };
    };
    this.GetPopup = function () {
      var Result = null;
      Result = null;
      if ($mod.TTMSFNCCustomPopup.isPrototypeOf(this.FOwner$1)) Result = rtl.as(this.FOwner$1,$mod.TTMSFNCCustomPopup);
      return Result;
    };
    this.DoBeforeShow = function () {
      this.FHintWindow = false;
      if (this.FOnBeforeShow != null) this.FOnBeforeShow(this);
      this.FFirstShow = true;
      if (!(this.FTimer != null)) this.FTimer = pas["WEBLib.ExtCtrls"].TTimer.$create("Create$1",[this]);
      this.FTimer.SetInterval(20);
      this.FTimer.FOnTimer = rtl.createCallback(this,"TimerProc");
      this.FTimer.SetEnabled(true);
    };
    this.DoBeforeClose = function () {
      if (this.FOnBeforeClose != null) this.FOnBeforeClose(this);
    };
    this.UpdateBounds = function (LRect) {
      this.SetBounds(Math.round(LRect.Left),Math.round(LRect.Top),Math.round(LRect.Right - LRect.Left),Math.round(LRect.Bottom - LRect.Top));
    };
    this.DoClose = function (CloseAction) {
      CloseAction.set(pas["WEBLib.Forms"].TCloseAction.caFree);
      pas["WEBLib.Forms"].TCustomForm.DoClose.apply(this,arguments);
      if (CloseAction.get() !== pas["WEBLib.Forms"].TCloseAction.caNone) {
        if (this.FTimer != null) this.FTimer.SetEnabled(false);
      };
    };
    this.DoApplyPlacement = function () {
      var $Self = this;
      var pt = pas.Types.TPoint.$new();
      var Pos = pas.Types.TPoint.$new();
      var AbsolutePos = pas.Types.TPoint.$new();
      var LRect = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var LPlacement = 0;
      var LOffset = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var LStep = 0;
      var LSoGood = false;
      var SourceSize = pas["WEBLib.TMSFNCTypes"].TSizeF.$new();
      var PlacementByTarget = false;
      function UpdateRectByScreen(R, cs) {
        var Result = false;
        var WorkareaRect = pas.Types.TRect.$new();
        var WorkareaRectF = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
        var W = 0.0;
        var H = 0.0;
        var P = pas.Types.TPoint.$new();
        Result = true;
        R.Left = Math.round(R.Left);
        R.Top = Math.round(R.Top);
        R.Right = Math.round(R.Right);
        R.Bottom = Math.round(R.Bottom);
        WorkareaRect.Left = 0;
        WorkareaRect.Top = 0;
        WorkareaRect.Right = window.innerWidth;
        WorkareaRect.Bottom = window.innerHeight;
        WorkareaRectF.$assign(pas["WEBLib.TMSFNCTypes"].RectF(WorkareaRect.Left - $Self.FContentPadding.FLeft,WorkareaRect.Top - $Self.FContentPadding.FTop,WorkareaRect.Right + $Self.FContentPadding.FRight,WorkareaRect.Bottom + $Self.FContentPadding.FBottom));
        if (!(pas.Classes.TComponentStateItem.csDesigning in cs)) {
          W = R.Right - R.Left;
          H = R.Bottom - R.Top;
          if (R.Left > WorkareaRectF.Left) {
            if (R.Left > (WorkareaRectF.Right - W)) {
              R.Left = WorkareaRectF.Right - W;
              if (LPlacement === $mod.TTMSFNCPopupPlacement.ppRight) {
                LPlacement = $mod.TTMSFNCPopupPlacement.ppLeft;
                Result = false;
              };
              if (LPlacement === $mod.TTMSFNCPopupPlacement.ppRightCenter) {
                LPlacement = $mod.TTMSFNCPopupPlacement.ppLeftCenter;
                Result = false;
              };
            };
          } else {
            R.Left = WorkareaRectF.Left;
            if (LPlacement === $mod.TTMSFNCPopupPlacement.ppLeft) {
              LPlacement = $mod.TTMSFNCPopupPlacement.ppRight;
              Result = false;
            };
            if (LPlacement === $mod.TTMSFNCPopupPlacement.ppLeftCenter) {
              LPlacement = $mod.TTMSFNCPopupPlacement.ppRightCenter;
              Result = false;
            };
          };
          if (R.Top > WorkareaRectF.Top) {
            if (R.Top > (WorkareaRectF.Bottom - H)) {
              R.Top = WorkareaRectF.Bottom - H;
              if (LPlacement === $mod.TTMSFNCPopupPlacement.ppBottom) {
                LPlacement = $mod.TTMSFNCPopupPlacement.ppTop;
                Result = false;
              };
              if (LPlacement === $mod.TTMSFNCPopupPlacement.ppBottomCenter) {
                LPlacement = $mod.TTMSFNCPopupPlacement.ppTopCenter;
                Result = false;
              };
            };
          } else {
            R.Top = WorkareaRectF.Top;
            if (LPlacement === $mod.TTMSFNCPopupPlacement.ppTop) {
              LPlacement = $mod.TTMSFNCPopupPlacement.ppBottom;
              Result = false;
            };
            if (LPlacement === $mod.TTMSFNCPopupPlacement.ppTopCenter) {
              LPlacement = $mod.TTMSFNCPopupPlacement.ppBottomCenter;
              Result = false;
            };
          };
          R.Right = R.Left + W;
          R.Bottom = R.Top + H;
        };
        return Result;
      };
      $Self.FPlacementChanged = false;
      LOffset.$assign($Self.FOffset);
      LPlacement = $Self.FPlacement;
      LStep = 0;
      do {
        LRect.$assign(pas["WEBLib.TMSFNCTypes"].RectF($Self.FPlacementRectangle.FLeft,$Self.FPlacementRectangle.FTop,$Self.FPlacementRectangle.FRight,$Self.FPlacementRectangle.FBottom));
        if (($Self.FPlacementControl !== null) && $Self.FPlacementRectangle.Empty()) LRect.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,$Self.FPlacementControl.GetWidth(),$Self.FPlacementControl.GetHeight()));
        if (($Self.FPlacementControl === null) && $Self.FPlacementRectangle.Empty() && !(LPlacement in rtl.createSet($mod.TTMSFNCPopupPlacement.ppAbsolute,$mod.TTMSFNCPopupPlacement.ppMouse,$mod.TTMSFNCPopupPlacement.ppMouseCenter,$mod.TTMSFNCPopupPlacement.ppAboveMouse,$mod.TTMSFNCPopupPlacement.ppAboveMouseCenter))) ;
        $Self.FScreenPlacementRect.$assign(LRect);
        if (LPlacement in rtl.createSet($mod.TTMSFNCPopupPlacement.ppTop,$mod.TTMSFNCPopupPlacement.ppTopCenter)) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,0,$Self.FContentPadding.FBottom - LOffset.Y)}
         else pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,0,LOffset.Y - $Self.FContentPadding.FTop);
        if (LPlacement in rtl.createSet($mod.TTMSFNCPopupPlacement.ppLeft,$mod.TTMSFNCPopupPlacement.ppLeftCenter)) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,$Self.FContentPadding.FRight - LOffset.X,0)}
         else pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,LOffset.X - $Self.FContentPadding.FLeft,0);
        PlacementByTarget = !(LPlacement in rtl.createSet($mod.TTMSFNCPopupPlacement.ppAbsolute,$mod.TTMSFNCPopupPlacement.ppMouse,$mod.TTMSFNCPopupPlacement.ppMouseCenter,$mod.TTMSFNCPopupPlacement.ppAboveMouse,$mod.TTMSFNCPopupPlacement.ppAboveMouseCenter));
        SourceSize.$assign($Self.FSize);
        var $tmp1 = LPlacement;
        if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppBottom) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,0,LRect.Bottom - LRect.Top)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppTop) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,0,-SourceSize.cy)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppLeft) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,-SourceSize.cx,0)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppRight) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,LRect.Right - LRect.Top,0)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppCenter) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,(LRect.Right - LRect.Top - SourceSize.cx) / 2,(LRect.Bottom - LRect.Top - SourceSize.cy) / 2)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppBottomCenter) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,(LRect.Right - LRect.Top - SourceSize.cx) / 2,LRect.Bottom - LRect.Top)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppTopCenter) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,(LRect.Right - LRect.Top - SourceSize.cx) / 2,-SourceSize.cy)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppLeftCenter) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,-SourceSize.cx,(LRect.Bottom - LRect.Top - SourceSize.cy) / 2)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppRightCenter) {
          pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,LRect.Right - LRect.Top,(LRect.Bottom - LRect.Top - SourceSize.cy) / 2)}
         else if ($tmp1 === $mod.TTMSFNCPopupPlacement.ppAbsolute) {
          if ($Self.FPlacementRectangle.Empty()) {
            LRect.$assign(pas["WEBLib.TMSFNCTypes"].RectF($Self.FPlacementRectangle.Rect().Left,$Self.FPlacementRectangle.Rect().Top,$Self.FPlacementRectangle.Rect().Left + SourceSize.cx,$Self.FPlacementRectangle.Rect().Top + SourceSize.cy))}
           else LRect.$assign($Self.FPlacementRectangle.Rect());
        } else if (($tmp1 === $mod.TTMSFNCPopupPlacement.ppMouse) || ($tmp1 === $mod.TTMSFNCPopupPlacement.ppMouseCenter) || ($tmp1 === $mod.TTMSFNCPopupPlacement.ppAboveMouse) || ($tmp1 === $mod.TTMSFNCPopupPlacement.ppAboveMouseCenter)) {
          LRect.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Pos.x,Pos.y,Pos.x + SourceSize.cx,Pos.y + SourceSize.cy));
          if (LPlacement === $mod.TTMSFNCPopupPlacement.ppMouseCenter) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,-SourceSize.cx / 2,-SourceSize.cy / 2);
          if (LPlacement === $mod.TTMSFNCPopupPlacement.ppAboveMouseCenter) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,-SourceSize.cx / 2,-SourceSize.cy - 5);
          if (LPlacement === $mod.TTMSFNCPopupPlacement.ppAboveMouse) pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(LRect,0,-SourceSize.cy - 5);
        };
        if (PlacementByTarget) {
          AbsolutePos.$assign(pas.Types.Point(Math.round(LRect.Left),Math.round(LRect.Top)));
          if ($Self.FPlacementControl !== null) {
            AbsolutePos.$assign($Self.FPlacementControl.ClientToScreen(AbsolutePos));
            pt.$assign(pas.Types.Point(Math.round($Self.FScreenPlacementRect.Left),Math.round($Self.FScreenPlacementRect.Top)));
            pt.$assign($Self.FPlacementControl.ClientToScreen(pt));
            $Self.FScreenPlacementRect.Left = pt.x;
            $Self.FScreenPlacementRect.Top = pt.y;
            pt.$assign(pas.Types.Point(Math.round($Self.FScreenPlacementRect.Right),Math.round($Self.FScreenPlacementRect.Bottom)));
            pt.$assign($Self.FPlacementControl.ClientToScreen(pt));
            $Self.FScreenPlacementRect.Right = pt.x;
            $Self.FScreenPlacementRect.Bottom = pt.y;
          };
          LRect.$assign(pas["WEBLib.TMSFNCTypes"].RectF(AbsolutePos.x,AbsolutePos.y,AbsolutePos.x + $Self.FSize.cx,AbsolutePos.y + $Self.FSize.cy));
        };
        LSoGood = UpdateRectByScreen(LRect,rtl.refSet($Self.FComponentState));
        LStep += 1;
      } while (!(LSoGood || (LStep > 1)));
      $Self.FScreenContentRect.$assign(LRect);
      $Self.FScreenContentRect.$assign(pas["WEBLib.TMSFNCTypes"].RectF($Self.FScreenContentRect.Left + $Self.FContentPadding.FLeft,$Self.FScreenContentRect.Top + $Self.FContentPadding.FTop,$Self.FScreenContentRect.Right - $Self.FContentPadding.FRight,$Self.FScreenContentRect.Bottom - $Self.FContentPadding.FBottom));
      $Self.FRealPlacement = LPlacement;
      $Self.UpdateBounds(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(LRect));
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TControl.Loaded.call(this);
      if (this.FPlacementChanged) this.ApplyPlacement();
    };
    this.Updated = function () {
      pas.Classes.TComponent.Updated.call(this);
      if (this.FPlacementChanged) this.ApplyPlacement();
    };
    this.HandleFocusedControl = function () {
      if (this.GetPopup() != null) this.GetPopup().HandleFocusedControl();
    };
    this.GetPopupParent = function () {
      var Result = null;
      Result = null;
      if ((this.FOwner$1 != null) && $mod.TTMSFNCCustomPopup.isPrototypeOf(this.FOwner$1)) Result = rtl.as(this.FOwner$1,$mod.TTMSFNCCustomPopup).GetParent();
      return Result;
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if (Operation === pas.Classes.TOperation.opRemove) {
        if (AComponent === this.FPlacementControl) {
          this.FPlacementControl = null;
          this.ApplyPlacement();
        };
        if (AComponent === this.FContentControl) this.FContentControl = null;
      };
    };
    this.DoRealPlacementChanged = function () {
      if (this.FOnRealPlacementChanged != null) this.FOnRealPlacementChanged(this);
    };
    this.CreateNew = function (AOwner, Dummy) {
      var $Self = this;
      function FindUniqueFormName(Name) {
        var Result = "";
        var I = 0;
        I = 0;
        Result = Name;
        while ((pas["WEBLib.Controls"].FindGlobalComponent(Result) !== null) || ((AOwner !== null) && (AOwner.FindComponent(Result) !== null))) {
          I += 1;
          Result = pas.SysUtils.Format("%s_%d",[Name,I]);
        };
        return Result;
      };
      $Self.SetName(FindUniqueFormName("CustomPopupForm"));
      pas["WEBLib.Forms"].TCustomForm.CreateNew.apply($Self,arguments);
      $Self.FPreferedDisplayIndex = -1;
      $Self.FOwner$1 = AOwner;
      $Self.FDragWithParent = true;
      $Self.FPlacementRectangle = pas["WEBLib.TMSFNCTypes"].TTMSFNCMargins.$create("Create$1");
      $Self.FContentPadding = pas["WEBLib.TMSFNCTypes"].TTMSFNCMargins.$create("Create$1");
      $Self.FSize.cx = 320;
      $Self.FSize.cy = 200;
      $Self.FPlacement = $mod.TTMSFNCPopupPlacement.ppBottom;
      $Self.FRealPlacement = $Self.FPlacement;
      $Self.SetVisible(false);
      try {
        $Self.SetBorder(pas["WEBLib.Forms"].TFormBorderStyle.fbNone);
      } finally {
      };
      return this;
    };
    this.Create$7 = function (AOwner, APlacementControl) {
      this.CreateNew(AOwner,0);
      try {
        if (APlacementControl !== null) this.FPlacementControl = APlacementControl;
        if (this.FPlacementControl !== null) this.FPlacementControl.FreeNotification(this);
      } finally {
      };
      return this;
    };
    this.Destroy = function () {
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FTimer;
        }, set: function (v) {
          this.p.FTimer = v;
        }});
      if (this.FPlacementControl !== null) {
        this.FPlacementControl.RemoveFreeNotification(this);
        this.FPlacementControl = null;
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FContentPadding;
        }, set: function (v) {
          this.p.FContentPadding = v;
        }});
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FPlacementRectangle;
        }, set: function (v) {
          this.p.FPlacementRectangle = v;
        }});
      pas["WEBLib.Forms"].TCustomForm.Destroy.call(this);
    };
    this.ApplyPlacement = function () {
      var OldRect = pas.Types.TRect.$new();
      var NewRect = pas.Types.TRect.$new();
      var OldRealPlacement = 0;
      OldRect.$assign(pas.Types.Rect(this.GetLeft(),this.GetTop(),this.GetLeft() + this.GetWidth(),this.GetTop() + this.GetHeight()));
      OldRealPlacement = this.FRealPlacement;
      this.DoApplyPlacement();
      NewRect.$assign(pas.Types.Rect(this.GetLeft(),this.GetTop(),this.GetLeft() + this.GetWidth(),this.GetTop() + this.GetHeight()));
      if ((NewRect.Left !== OldRect.Left) || (NewRect.Top !== OldRect.Top) || (NewRect.Bottom !== OldRect.Bottom) || (NewRect.Right !== OldRect.Right) || (OldRealPlacement !== this.FRealPlacement)) this.DoRealPlacementChanged();
    };
    this.KeyDown = function (Key, Shift) {
      pas["WEBLib.Controls"].TControl.KeyDown.apply(this,arguments);
      if (rtl.neSet(Shift,{})) return;
      var $tmp1 = Key.get();
      if (($tmp1 === 27) || ($tmp1 === 115)) this.Close();
    };
    this.CloseQuery = function () {
      var Result = false;
      Result = pas["WEBLib.Forms"].TCustomForm.CloseQuery.call(this);
      if (Result && !(pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) this.DoBeforeClose();
      return Result;
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCCustomPopup",pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$init.call(this);
      this.FCloseTime = 0;
      this.FCheckTime = false;
      this.FDestroyingPopup = false;
      this.FOwner$1 = null;
      this.FCustomOwner = null;
      this.FPlacementControl = null;
      this.FPopupForm = null;
      this.FStaysOpen = false;
      this.FPlacement = 0;
      this.FPlacementRectangle = null;
      this.FHorizontalOffset = 0.0;
      this.FVerticalOffset = 0.0;
      this.FDragWithParent = false;
      this.FModalResult = 0;
      this.FModal = false;
      this.FOnClosePopup = null;
      this.FOnPopup = null;
      this.FPopupFormSize = pas["WEBLib.TMSFNCTypes"].TSizeF.$new();
      this.FContentControl = null;
      this.FDropDownHeight = 0.0;
      this.FDropDownWidth = 0.0;
      this.FFocusable = false;
      this.FFocusedControl = null;
      this.FOnPopupPaint = null;
      this.FOnPopupShown = null;
      this.FIsOpen = false;
    };
    this.$final = function () {
      this.FOwner$1 = undefined;
      this.FCustomOwner = undefined;
      this.FPlacementControl = undefined;
      this.FPopupForm = undefined;
      this.FPlacementRectangle = undefined;
      this.FOnClosePopup = undefined;
      this.FOnPopup = undefined;
      this.FPopupFormSize = undefined;
      this.FContentControl = undefined;
      this.FFocusedControl = undefined;
      this.FOnPopupPaint = undefined;
      this.FOnPopupShown = undefined;
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.$final.call(this);
    };
    this.SetIsOpen = function (Value) {
      if (this.FIsOpen !== Value) {
        if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
          this.FIsOpen = false;
          return;
        };
        if (Value) {
          this.DoCreatePopup(false)}
         else {
          if (this.HasPopupForm()) {
            this.FPopupForm.Close()}
           else this.FIsOpen = Value;
        };
      };
    };
    this.SetPlacementRectangle = function (Value) {
      this.FPlacementRectangle.Assign(Value);
    };
    this.SetModalResult = function (Value) {
      this.FModalResult = Value;
      if (this.FPopupForm != null) this.FPopupForm.SetModalResult(this.FModalResult);
    };
    this.SetPlacementControl = function (Value) {
      if (this.FPlacementControl !== Value) {
        if (this.FPlacementControl !== null) this.FPlacementControl.RemoveFreeNotification(this);
        this.FPlacementControl = Value;
        if (this.HasPopupForm()) this.FPopupForm.SetPlacementControl(this.FPlacementControl);
        if (this.FPlacementControl !== null) this.FPlacementControl.FreeNotification(this);
      };
    };
    this.SetPlacement = function (Value) {
      if (this.FPlacement !== Value) {
        this.FPlacement = Value;
        if (this.HasPopupForm()) this.FPopupForm.SetPlacement(this.FPlacement);
      };
    };
    this.SetDragWithParent = function (Value) {
      if (this.FDragWithParent !== Value) {
        this.FDragWithParent = Value;
        if (this.HasPopupForm()) this.FPopupForm.SetDragWithParent(this.FDragWithParent);
      };
    };
    this.BeforeShowProc = function (Sender) {
      this.FIsOpen = true;
      this.DoPopup();
    };
    this.BeforeCloseProc = function (Sender) {
      this.FIsOpen = false;
    };
    this.CloseProc = function (Sender, CloseAction) {
      this.ClosePopup();
    };
    this.ShowProc = function (Sender) {
      if ((this.FPopupForm != null) && this.FPopupForm.FShowModal) this.HandleFocusedControl();
      this.DoPopupShown();
    };
    this.DeactivateProc = function (Sender) {
      if ((this.FPopupForm != null) && !this.FPopupForm.FShowModal && !this.FStaysOpen) {
        this.FPopupForm.SetVisible(false);
        this.FPopupForm.Close();
        this.FCloseTime = $impl.GetTickCountX();
        this.FCheckTime = true;
      };
    };
    this.SetPopupFormSize = function (Value) {
      if ((this.FPopupFormSize.cx !== Value.cx) || (this.FPopupFormSize.cy !== Value.cy)) {
        this.FPopupFormSize.$assign(Value);
        this.UpdatePopupSize();
      };
    };
    this.UpdatePopupSize = function () {
      var LSize = pas["WEBLib.TMSFNCTypes"].TSizeF.$new();
      if (this.FPopupForm !== null) {
        if (this.FPopupFormSize.cx > 0) {
          LSize.cx = this.FPopupFormSize.cx}
         else LSize.cx = this.FDropDownWidth;
        if (this.FPopupFormSize.cy > 0) {
          LSize.cy = this.FPopupFormSize.cy}
         else LSize.cy = this.FDropDownHeight;
        this.FPopupForm.SetSize(LSize);
      };
    };
    this.SetContentControl = function (Value) {
      if (Value === null) {
        if (this.FContentControl != null) this.FContentControl.SetVisible(true);
      };
      this.FContentControl = Value;
      if (this.FContentControl != null) {
        this.FContentControl.SetVisible(false);
        this.SetDropDownWidth(this.FContentControl.GetWidth());
        this.SetDropDownHeight(this.FContentControl.GetHeight());
      };
    };
    this.SetDropDownHeight = function (Value) {
      if (this.FDropDownHeight !== Value) {
        this.FDropDownHeight = Value;
        if (this.FPopupForm != null) this.FPopupForm.SetHeight(Math.round(Value));
      };
    };
    this.SetDropDownWidth = function (Value) {
      if (this.FDropDownWidth !== Value) {
        this.FDropDownWidth = Value;
        if (this.FPopupForm != null) this.FPopupForm.SetWidth(Math.round(Value));
      };
    };
    this.GetInstance = function () {
      var Result = 0;
      Result = pas["WEBLib.TMSFNCTypes"].HInstance();
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,3);
      return Result;
    };
    this.SetAdaptToStyle = function (Value) {
      var ia = null;
      var $ir = rtl.createIntfRefs();
      try {
        pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.SetAdaptToStyle.apply(this,arguments);
        if (this.FContentControl != null) {
          if (pas.SysUtils.Supports$1($ir.ref(1,rtl.queryIntfT(this.FContentControl,pas.System.IUnknown)),rtl.getIntfGUIDR(pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle),{get: function () {
              return ia;
            }, set: function (v) {
              ia = v;
            }})) ia.SetAdaptToStyle(this.FAdaptToStyle);
        };
      } finally {
        $ir.free();
        rtl._Release(ia);
      };
    };
    this.ShowPopup = function (AModal) {
      if (AModal) {
        this.FModalResult = this.FPopupForm.ShowModal()}
       else {
        this.FPopupForm.Show();
        this.HandleFocusedControl();
      };
    };
    this.HandleFocusedControl = function () {
      var frm = null;
      if ((this.FPopupForm != null) && (this.FFocusedControl != null)) {
        if (!this.FPopupForm.FShowModal) {
          frm = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetParentForm(this.FFocusedControl);
          if ((frm != null) && (frm !== this.FPopupForm)) {
            frm.SetFocus();
          };
        };
        if (pas["WEBLib.Controls"].TControl.isPrototypeOf(this.FFocusedControl)) {
          if (rtl.as(this.FFocusedControl,pas["WEBLib.Controls"].TControl).CanFocus()) rtl.as(this.FFocusedControl,pas["WEBLib.Controls"].TControl).SetFocus();
        };
      };
    };
    this.FormPaint = function (Sender) {
      var g = null;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (this.FPopupForm != null) {
        g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[this.FPopupForm.GetCanvas(),false]);
        try {
          g.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
          g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
          g.FFill.SetColor(pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupFillColor);
          g.FStroke.SetColor(pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultPopupStrokeColor);
          r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.FPopupForm.GetWidth(),this.FPopupForm.GetHeight()));
          g.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
          if (this.FOnPopupPaint != null) this.FOnPopupPaint(this,g,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
        } finally {
          g = rtl.freeLoc(g);
        };
      };
    };
    this.DoPopupPaint = function (Sender, AGraphics, ARect) {
      if (this.FOnPopupPaint != null) this.FOnPopupPaint(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if (Operation === pas.Classes.TOperation.opRemove) {
        if (AComponent === this.FContentControl) this.FContentControl = null;
        if (AComponent === this.FFocusedControl) this.FFocusedControl = null;
        if (AComponent === this.FPopupForm) this.FPopupForm = null;
        if (AComponent === this.FPlacementControl) {
          this.FPlacementControl = null;
          if (this.HasPopupForm()) this.FPopupForm.SetPlacementControl(null);
        };
      };
    };
    this.MarginsChanged = function (Sender) {
      if (this.FPopupForm !== null) this.FPopupForm.SetPlacementRectangle(this.FPlacementRectangle);
    };
    this.DoClosePopup = function () {
      if (this.FOnClosePopup != null) this.FOnClosePopup(this);
    };
    this.DoPopup = function () {
      if (this.FOnPopup != null) this.FOnPopup(this);
    };
    this.DoPopupShown = function () {
      if (this.FOnPopupShown != null) this.FOnPopupShown(this);
    };
    this.ClosePopup = function () {
      var p = null;
      if (!this.HasPopupForm() || this.FDestroyingPopup) return;
      this.FDestroyingPopup = true;
      if (this.FModal && (this.FModalResult === 0)) {
        this.SetModalResult(2);
        return;
      };
      this.FIsOpen = false;
      if (this.FContentControl != null) {
        p = this.GetParent();
        this.FContentControl.SetVisible(false);
        if ((p != null) && pas["WEBLib.Controls"].TWinControl.isPrototypeOf(p)) {
          this.FContentControl.SetParent(rtl.as(p,pas["WEBLib.Controls"].TWinControl))}
         else this.FContentControl.SetParent(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetParentForm(this));
      };
      if (!(pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) {
        if (this.HasPopupForm()) {
          if ($mod.TTMSFNCNonFocusablePopup.isPrototypeOf(this)) rtl.free(this,"FPopupForm");
          this.DoClosePopup();
          this.FPopupForm = null;
        };
      };
      this.FDestroyingPopup = false;
    };
    this.DoCreatePopup = function (AShowModal) {
      var ia = null;
      var $ir = rtl.createIntfRefs();
      try {
        if ((($impl.GetTickCountX() - this.FCloseTime) < 200) && this.FCheckTime) {
          this.FCheckTime = false;
          return;
        };
        if (this.FIsOpen) return;
        if (this.HasPopupForm()) this.FPopupForm.Close();
        this.FPopupForm = this.CreatePopupForm();
        try {
          try {
            this.FPopupForm.SetFormStyle(pas["WEBLib.Forms"].TFormStyle.fsStayOnTop);
            this.FPopupForm.FOnPaint = rtl.createCallback(this,"FormPaint");
            this.FPopupForm.FOnPopupPaint = rtl.createCallback(this,"DoPopupPaint");
            this.FPopupForm.FreeNotification(this);
            this.FPopupForm.SetPlacement(this.FPlacement);
            this.FPopupForm.SetOffset(pas["WEBLib.TMSFNCTypes"].PointF(this.FHorizontalOffset,this.FVerticalOffset));
            this.FPopupForm.SetPlacementRectangle(this.FPlacementRectangle);
            this.FPopupForm.SetDragWithParent(this.FDragWithParent);
            this.UpdatePopupSize();
            this.FPopupForm.FOnDeactivate = rtl.createCallback(this,"DeactivateProc");
            this.FPopupForm.FOnBeforeShow = rtl.createCallback(this,"BeforeShowProc");
            this.FPopupForm.FOnBeforeClose = rtl.createCallback(this,"BeforeCloseProc");
            this.FPopupForm.FOnClose = rtl.createCallback(this,"CloseProc");
            this.FPopupForm.FOnShow = rtl.createCallback(this,"ShowProc");
            this.FPopupForm.FShowModal = AShowModal;
            this.FPopupForm.SetContentControl(this.FContentControl);
            if (pas.SysUtils.Supports$1($ir.ref(1,rtl.queryIntfT(this.FContentControl,pas.System.IUnknown)),rtl.getIntfGUIDR(pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle),{get: function () {
                return ia;
              }, set: function (v) {
                ia = v;
              }})) ia.SetAdaptToStyle(this.FAdaptToStyle);
            if (this.FContentControl != null) this.FContentControl.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
          } finally {
          };
        } catch ($e) {
          pas.SysUtils.FreeAndNil({p: this, get: function () {
              return this.p.FPopupForm;
            }, set: function (v) {
              this.p.FPopupForm = v;
            }});
          throw $e;
        };
        if (!(pas.Classes.TComponentStateItem.csDestroying in this.FComponentState)) this.FPopupForm.DoBeforeShow();
        this.ShowPopup(AShowModal);
      } finally {
        $ir.free();
        rtl._Release(ia);
      };
    };
    this.GetPopupFormClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCCustomPopupForm;
      return Result;
    };
    this.GetParent = function () {
      var Result = null;
      Result = this.FPlacementControl;
      if (!(Result != null) && pas["WEBLib.Controls"].TControl.isPrototypeOf(this.FOwner$1)) Result = rtl.as(this.FOwner$1,pas["WEBLib.Controls"].TControl);
      return Result;
    };
    this.CreatePopupForm = function () {
      var Result = null;
      var NewForm = null;
      var cls = null;
      NewForm = null;
      try {
        cls = this.GetPopupFormClass();
        NewForm = cls.$create("Create$7",[this,this.FPlacementControl]);
      } catch ($e) {
        pas.SysUtils.FreeAndNil({get: function () {
            return NewForm;
          }, set: function (v) {
            NewForm = v;
          }});
        throw $e;
      };
      Result = NewForm;
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.Create$1.call(this,AOwner);
      this.FOwner$1 = AOwner;
      this.FPlacement = $mod.TTMSFNCPopupPlacement.ppBottom;
      this.FFocusable = true;
      this.FStaysOpen = false;
      this.FPlacementRectangle = pas["WEBLib.TMSFNCTypes"].TTMSFNCMargins.$create("Create$1");
      this.FPlacementRectangle.FOnChange = rtl.createCallback(this,"MarginsChanged");
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomPopup.isPrototypeOf(Source)) {
        this.FModalResult = rtl.as(Source,$mod.TTMSFNCCustomPopup).FModalResult;
        this.FPopupFormSize.$assign(rtl.as(Source,$mod.TTMSFNCCustomPopup).FPopupFormSize);
        this.FDragWithParent = rtl.as(Source,$mod.TTMSFNCCustomPopup).FDragWithParent;
        this.FStaysOpen = rtl.as(Source,$mod.TTMSFNCCustomPopup).FStaysOpen;
        this.FDropDownHeight = rtl.as(Source,$mod.TTMSFNCCustomPopup).FDropDownHeight;
        this.FDropDownWidth = rtl.as(Source,$mod.TTMSFNCCustomPopup).FDropDownWidth;
        this.FHorizontalOffset = rtl.as(Source,$mod.TTMSFNCCustomPopup).FHorizontalOffset;
        this.FPlacementControl = rtl.as(Source,$mod.TTMSFNCCustomPopup).FPlacementControl;
        this.FPlacement = rtl.as(Source,$mod.TTMSFNCCustomPopup).FPlacement;
        this.FPlacementRectangle.Assign(rtl.as(Source,$mod.TTMSFNCCustomPopup).FPlacementRectangle);
        this.FVerticalOffset = rtl.as(Source,$mod.TTMSFNCCustomPopup).FVerticalOffset;
        this.FFocusedControl = rtl.as(Source,$mod.TTMSFNCCustomPopup).FFocusedControl;
        this.FContentControl = rtl.as(Source,$mod.TTMSFNCCustomPopup).FContentControl;
      };
    };
    this.Destroy = function () {
      this.FContentControl = null;
      this.ClosePopup();
      if (this.HasPopupForm()) {
        pas.SysUtils.FreeAndNil({p: this, get: function () {
            return this.p.FPopupForm;
          }, set: function (v) {
            this.p.FPopupForm = v;
          }});
      };
      pas.SysUtils.FreeAndNil({p: this, get: function () {
          return this.p.FPlacementRectangle;
        }, set: function (v) {
          this.p.FPlacementRectangle = v;
        }});
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.HasPopupForm = function () {
      var Result = false;
      Result = this.FPopupForm !== null;
      return Result;
    };
    this.PointInPopup = function (APoint) {
      var Result = false;
      Result = false;
      if (this.FPopupForm != null) Result = pas["WEBLib.TMSFNCTypes"].PtInRectEx(pas["WEBLib.TMSFNCTypes"].RectF(this.FPopupForm.GetLeft(),this.FPopupForm.GetTop(),this.FPopupForm.GetLeft() + this.FPopupForm.GetWidth(),this.FPopupForm.GetTop() + this.FPopupForm.GetHeight()),APoint);
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCPopup",$mod.TTMSFNCCustomPopup,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomComponent"].TTMSFNCCustomComponent.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCPopup);
    };
    this.PopupModal = function () {
      var Result = 0;
      var LStaysOpen = false;
      Result = 0;
      if (this.FIsOpen) return Result;
      if (this.HasPopupForm()) this.FPopupForm.Close();
      LStaysOpen = this.FStaysOpen;
      try {
        this.FStaysOpen = true;
        this.Popup(true);
        Result = this.FModalResult;
        this.SetIsOpen(false);
      } finally {
        this.FStaysOpen = LStaysOpen;
      };
      return Result;
    };
    this.Popup = function (AShowModal) {
      this.DoCreatePopup(AShowModal);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("StaysOpen",0,rtl.boolean,"FStaysOpen","FStaysOpen",{Default: false});
    $r.addProperty("DropDownHeight",2,rtl.double,"FDropDownHeight","SetDropDownHeight");
    $r.addProperty("DropDownWidth",2,rtl.double,"FDropDownWidth","SetDropDownWidth");
    $r.addProperty("HorizontalOffset",0,rtl.double,"FHorizontalOffset","FHorizontalOffset");
    $r.addProperty("Placement",2,$mod.$rtti["TTMSFNCPopupPlacement"],"FPlacement","SetPlacement",{Default: $mod.TTMSFNCPopupPlacement.ppBottom});
    $r.addProperty("PlacementRectangle",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCMargins"],"FPlacementRectangle","SetPlacementRectangle");
    $r.addProperty("PlacementControl",2,pas["WEBLib.Controls"].$rtti["TControl"],"FPlacementControl","SetPlacementControl");
    $r.addProperty("VerticalOffset",0,rtl.double,"FVerticalOffset","FVerticalOffset");
    $r.addProperty("FocusedControl",0,pas["WEBLib.Controls"].$rtti["TControl"],"FFocusedControl","FFocusedControl");
    $r.addProperty("ContentControl",2,pas["WEBLib.Controls"].$rtti["TControl"],"FContentControl","SetContentControl");
    $r.addProperty("OnClosePopup",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClosePopup","FOnClosePopup");
    $r.addProperty("OnPopupPaint",0,$mod.$rtti["TTMSFNCPopupPaint"],"FOnPopupPaint","FOnPopupPaint");
    $r.addProperty("OnPopup",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnPopup","FOnPopup");
    $r.addProperty("OnPopupShown",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnPopupShown","FOnPopupShown");
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
  });
  rtl.createClass($mod,"TTMSFNCCustomNonFocusablePopupForm",$mod.TTMSFNCCustomPopupForm,function () {
    this.UpdateBounds = function (LRect) {
      $mod.TTMSFNCCustomPopupForm.UpdateBounds.apply(this,arguments);
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCCustomNonFocusablePopup",$mod.TTMSFNCCustomPopup,function () {
    this.ActivatePreviousWindow = function () {
    };
    this.ShowPopup = function (AModal) {
      $mod.TTMSFNCCustomPopup.ShowPopup.apply(this,arguments);
      this.FIsOpen = true;
    };
    this.GetPopupFormClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCCustomNonFocusablePopupForm;
      return Result;
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomPopup.Create$1.apply(this,arguments);
      this.FStaysOpen = true;
      return this;
    };
    this.Destroy = function () {
      $mod.TTMSFNCCustomPopup.Destroy.call(this);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCNonFocusablePopup",$mod.TTMSFNCCustomNonFocusablePopup,function () {
    this.Deactivate = function () {
      this.ClosePopup();
    };
    this.Activate = function () {
      this.DoCreatePopup(false);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("ContentControl",2,pas["WEBLib.Controls"].$rtti["TControl"],"FContentControl","SetContentControl");
    $r.addProperty("Placement",2,$mod.$rtti["TTMSFNCPopupPlacement"],"FPlacement","SetPlacement",{Default: $mod.TTMSFNCPopupPlacement.ppBottom});
    $r.addProperty("PlacementRectangle",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCMargins"],"FPlacementRectangle","SetPlacementRectangle");
    $r.addProperty("PlacementControl",2,pas["WEBLib.Controls"].$rtti["TControl"],"FPlacementControl","SetPlacementControl");
  });
},["SysUtils","WEBLib.TMSFNCUtils","Math","WEBLib.TMSFNCStyles","Web"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.GetTickCountX = function () {
    var Result = 0;
    var h = 0;
    var m = 0;
    var s = 0;
    var ms = 0;
    pas.SysUtils.DecodeTime(pas.SysUtils.Now(),{get: function () {
        return h;
      }, set: function (v) {
        h = v;
      }},{get: function () {
        return m;
      }, set: function (v) {
        m = v;
      }},{get: function () {
        return s;
      }, set: function (v) {
        s = v;
      }},{get: function () {
        return ms;
      }, set: function (v) {
        ms = v;
      }});
    Result = ms + (s * 1000) + (m * 60 * 1000) + (h * 60 * 60 * 1000);
    return Result;
  };
});
rtl.module("WEBLib.TMSFNCImage",["System","Classes","WEBLib.TMSFNCCustomControl","WEBLib.TMSFNCBitmapContainer","WEBLib.TMSFNCTypes","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCGraphicsTypes"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 0;
  rtl.createClass($mod,"TTMSFNCCustomImage",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FBitmap = null;
      this.FBitmapContainer = null;
      this.FStretch = false;
      this.FBitmaps = null;
      this.FCropping = false;
      this.FCenter = false;
      this.FAutoSize = false;
      this.FAspectRatio = false;
      this.FOnBitmapChanged = null;
    };
    this.$final = function () {
      this.FBitmap = undefined;
      this.FBitmapContainer = undefined;
      this.FBitmaps = undefined;
      this.FOnBitmapChanged = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetBitmapContainer = function (Value) {
      this.FBitmapContainer = Value;
      this.ApplyAutoSize();
      this.Invalidate();
    };
    this.SetStretch = function (Value) {
      this.FStretch = Value;
      this.Invalidate();
    };
    this.SetBitmaps = function (Value) {
      this.FBitmaps.Assign(Value);
      this.Invalidate();
    };
    this.SetCropping = function (Value) {
      this.FCropping = Value;
      this.Invalidate();
    };
    this.SetCenter = function (Value) {
      this.FCenter = Value;
      this.Invalidate();
    };
    this.SetAS = function (Value) {
      this.FAutoSize = Value;
      this.ApplyAutoSize();
      this.Invalidate();
    };
    this.SetAspectRatio = function (Value) {
      this.FAspectRatio = Value;
      this.Invalidate();
    };
    this.SetBitmap = function (Value) {
      this.FBitmap.Assign(Value);
      this.Invalidate();
    };
    this.GetBitmapContainer = function () {
      var Result = null;
      Result = this.FBitmapContainer;
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,0);
      return Result;
    };
    this.ApplyAutoSize = function () {
      var bmp = null;
      bmp = this.GetBitmap();
      if (bmp != null) {
        if (this.FAutoSize && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) {
          this.SetWidth(bmp.GetWidth());
          this.SetHeight(bmp.GetHeight());
        };
      };
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FBitmapContainer)) this.FBitmapContainer = null;
    };
    this.BitmapChanged = function (Sender) {
      if (this.FOnBitmapChanged != null) this.FOnBitmapChanged(this);
      this.ApplyAutoSize();
      this.Invalidate();
    };
    this.Clear = function () {
      this.FBitmaps.Clear();
    };
    this.GetPaintRectangle = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var bmp = null;
      var rdest = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var w = 0.0;
      var h = 0.0;
      var x = 0.0;
      var y = 0.0;
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      bmp = this.GetBitmap();
      if (bmp != null) {
        x = 0;
        y = 0;
        w = 0;
        h = 0;
        pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetAspectSize({get: function () {
            return w;
          }, set: function (v) {
            w = v;
          }},{get: function () {
            return h;
          }, set: function (v) {
            h = v;
          }},bmp.GetWidth(),bmp.GetHeight(),this.GetWidth(),this.GetHeight(),this.FAspectRatio,this.FStretch,this.FCropping);
        if (this.FCenter || this.FCropping) {
          x = (this.GetWidth() - w) / 2;
          y = (this.GetHeight() - h) / 2;
        };
        rdest.$assign(pas["WEBLib.TMSFNCTypes"].RectF(x,y,x + w,y + h));
        Result.$assign(rdest);
      };
      return Result;
    };
    this.GetBitmap = function () {
      var Result = null;
      if (!pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(this.FBitmap)) {
        Result = this.FBitmap}
       else Result = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FBitmaps,0,this.FBitmapContainer);
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      if (this.IsDesignTime()) this.DisableBackground();
      this.FCenter = true;
      this.FStretch = false;
      this.FAspectRatio = true;
      this.FCropping = false;
      this.FBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FBitmaps.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.SetWidth(100);
      this.SetHeight(100);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FBitmap");
      rtl.free(this,"FBitmaps");
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.call(this);
    };
    this.Draw = function (AGraphics, ARect) {
      var bmp = null;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskDot);
        AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      };
      bmp = this.GetBitmap();
      if (bmp != null) AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),bmp,this.FAspectRatio,this.FStretch,this.FCenter,this.FCropping);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCImage",$mod.TTMSFNCCustomImage,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCImage);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("AspectRatio",2,rtl.boolean,"FAspectRatio","SetAspectRatio",{Default: true});
    $r.addProperty("Bitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FBitmap","SetBitmap");
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
    $r.addProperty("Bitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FBitmaps","SetBitmaps");
    $r.addProperty("BitmapContainer",3,pas["WEBLib.TMSFNCBitmapContainer"].$rtti["TTMSFNCBitmapContainer"],"GetBitmapContainer","SetBitmapContainer");
    $r.addProperty("Stretch",2,rtl.boolean,"FStretch","SetStretch",{Default: false});
    $r.addProperty("Cropping",2,rtl.boolean,"FCropping","SetCropping",{Default: false});
    $r.addProperty("Center",2,rtl.boolean,"FCenter","SetCenter",{Default: true});
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAS",{Default: false});
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
  });
},["WEBLib.Controls","WEBLib.Graphics","WEBLib.TMSFNCUtils"]);
rtl.module("WEBLib.TMSFNCColorWheelResources",["System"],function () {
  "use strict";
  var $mod = this;
  this.GetColorWheelResource = function () {
    var Result = "";
    Result = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAJYAAACWCAYAAAA8AXHiAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMjHxIGmVAACqeElEQVR4Xuz9BbhVZdjufQM2onR3SSPdId0h3d0p3VLSISkp3S3S3SIhKSmpgISUNDLn9" + "xvP5j3e3N+u59nv3vt9psdfFnOOcd\/3uK9znec1FmvNFeH\/i49aEUJxa0YIpawdIZS6foTQ+EYRQ+OboVXE0LG2EcPhjpHC4c7ohl7oi\/4YhCEYgdH4FhMw2TlTnTvTGLMw15iLjR+wNEIo9ttp\/\/3xv9qjVIRw8TIRQiUqRAxt+zJi6HC1SKG\/ahFEvXfC4YZo+m443AKt0f69cPgrdEUP9H4\/HP4aA\/ENhmEUxnptPCZhCqY793vMwXxjLsJS" + "c6yIFLq72pxrI4ZWrreGTRFCRd4u698f\/zM+CkYItSwcMTy8eMTww1IKXE6hKyl6FdQghDqoTyCNPwiHm6EV2n7IrdAZ3T7iVuiL\/hiMoRiB0RiHifjOsdMwE7ONMQ8LscTYy82xCj+Ycx02WsPmSKHQNmvaGSHUa3eEULO3y\/33x\/+oj88jhBJmixCqkytiaGk+QiqkiEUVs4TClkEFha6s4NUIoBbqEkVDNI3MrdD6Y26Fr6JwK\/RAb3yNgZ9" + "wKwzDKIz13HhMwhTMwCznzsECYy3GMmOvxBpz\/YgN5t5sDVutZQd2W9s+a\/zJWn+OGPr+sLWfjhCO9\/Zy\/v3x\/+YjVYRQorQRQlUyRAzt+TxS6J8cCpVHwQooXGFFLKaYpRS1nAJXUuwqqKH4tQmhPhoTSTO0+pRboWNUboVu6BWNW6E\/BmMoRmA0xmEivsM0x87EbMwzxkIsMeYKrDLHD1hnzo3m3oLt1rLLmvZa2wFr\/Nlaj1jzMWs\/ESn07J" + "RrORMhVPKCa3t7mf\/++O\/1SBYhVBijU0cKPUmnIJkUJqsC5VSovApWUOGKKGAJhSyjqOUVt7JCV1P0mqhLBA2JoglaROdWaB+DW6EresTkVvgaA\/ENhmMUxmI8JmEqZmCWc+ZiARYbaxlWGnsNfjTXBnNuxjZr2Gkte6xpv7UdtMZD1nrUmo9b+ynXcMa1nHdNF13blQjhAVcjhPK\/vex\/f\/zbPMLvxrbJCSKGtifRp6S0+WkUIoOCfK4w2RUot" + "0LlV7TCilcUJRWzLCoqbhVFrq7gtRW\/PhoRRLNY4XBLtI0dDndAZ3SLw63QFwPicisMxQiMwThMxHden4aZmIP5zl2EpVhhzNVYa4715tqIrebeYQ27rGWvNR3Az9Z4BMes+aS1\/+oazrmWC67pkmu76hqvu9abrvlmhHD2cIRwpLeb8e+Pf41H1AjhL2JGDB2Ipx9J5DM6mU1PpQBpFSKjgmTx2Z9DcfJwhAIK9oXiFVfE0opZXlEro6pC10Rd" + "hW9ACE3QgkBao308boWu8bkVeuPrBNwKQzAcozAW4zEZUzEDsxw7Fwuw2BjLsNKYa7DOHBuw2ZzbzL2T0PZYy34ctLbD1viLtZ6w5lPWfsY1nHctv7mmK67tumv8w7Xecs13XPtfEUM77kUI5Xq7Lf\/++K99fBAhVOzjiKGz0Xzmxra58W1yYpud3MZ\/pgDpFSKzz\/hsCpNLgfIpVCEFK6pwJRWxrGJWUNQvFbe6QtdW9HpoRATNiKIl2ibkVui" + "ciFuhV2Juhf4YjKEYkYRbYRwm4jvPTcf3mIP5zluEpVhhrNVYa+z12GSurebcgd3WsM9afrKmQ9Z21BqPWetJa\/7V2s+5houu5bJruurafneNNwnstmu+59of2INH74TePIkYOvgsQrjA223698d\/3iP8boQIoXzvRQzv+kgMfGIzY9jUODY3AUEltdkpbXoan+EZFOFzxcihMLkVqIBCFVawYgpXSgHLKWQlBa2quDUVuY6CN1D8JmhOEK2JpB" + "2+Ssqt0CMZt8LXGJicW2E4RmEsJmAypmIGZmGuYxdiCZYbYxV+MOY6bDTHFnNtxy5z77WG\/dZy0JoOW9sv1njCWk9b81lrv+AaLrmWK67pumu74Rr\/dK13XPNfBPbQHvxtL57Zkxf25rU9CnGwf4\/I\/9Tjo1DCiO+GFkXiUO\/bvMg2MarNjElQ8WxuIp\/JyWx2Khufzmd4JkXIqiA5FSavAhVUqCKKVkLxyihiBcX8UlGro5Yi11PsRgrflAhao" + "i1hdEDnFNwqJbdCXwxIxa0wFCMxBuNScytM8fF0fI85mI9FzlmKFcZZjbXGXI\/N5tiKHebcbe591vCTtRzCUes7bp2n8CuRnbP2i67hsmu55pr+cG23XONt13rPNT9w7Y\/twVMCe25PXtmbN\/YpHCkUDkV8OZHAEr7dxX9\/\/J8eUUKVIn0UfviOjXvPxn2AKD6OZjNj2dT4NjexTU5usz\/zmZ3e5mdWiGwKklth8hNUYUUqRkylFK6sIlZUzCqK" + "WkNx6yh0AzRW+OZE0Jog2uErYumCHp9xK3ydhlthCIan5Vb4FhMwGVMxE7MxzzELsQTLnbsKPxhrHTYaewu2m2uXOfea+4B1\/Iwj1nTM2k5Y42lrPWvNF6z9kmu46lp+d003XNufrvGua73vmh+59if24Jm9eGlP\/rE3IXsUfu9NOPzOq3Ao0rP7oQhPSr3dzX9\/EFTsiFFDV9+xce+y\/\/dt3oc2L7II+AQx\/D2O1xLY3KQ2OaXNTmPTM9r8LAq" + "RQ0Hy+OwvoDhfKFRxBSutcOUVsLJiVlPUWopbV5EbKnhTtCSANsTQAZ0IpFs6boW+6bkVBmMoRmbgVhiHSZiC6fgeczDfMYuwDCudvwY\/YoMxNxt7G3aaa4859+OgNRyylqPWdNzaTlnjGWs9b82\/Wftl13DNtfzhmm65tjuu8S\/X+sA1P3btT+3BC3vxyp6E7E04cshmvbZpL2zeU+J6HApFfHgqHOFG5Le7+\/\/RR+xQ\/UixQ+feYf\/v2bwPbN" + "5HIuBjGxjFBkZFTB\/H9VwiryezyalsdjqbnsnmZ1WInD7j8ypKQQUqqlAlFayswlVUwCoKWV1BaytufUVurODNFb4VIbTDV8TRJSO3Qm98nYlbYUhmboVR+BYTMBnTMBOzMQ8LsQTLnbMKPxhjPTYadwt2mGOX+fbigLl\/toYj1nLMmk5a26\/WeM5aL1jzJWu\/6hp+dy03XdNt13bPNd53rY9c8xPX\/twevLQX\/9iTsE\/CcJR\/bNZLm\/bM5j2xi" + "Y+4133ReO9sKMKfdd7u8v+HHmlCn0RMGN71ToJQ6F2foe\/bwA9tYGQxEMUmfmoToxFbdBsZC\/H8PbHnkzvmM8emt+mZbX52n+m5FSO\/whRWoGIKVUrByilcJQWsqpA1FbWuAjdEU8VuofBtiKADQXRCt8\/D4Z7om8WdIAZn5VYYiTEYl41bYQqmYxbmYoHXFmMZVmKNc3\/EBmNtxjZj7zTPHuw350FzH7aGX3DCmk5Z2xlrPG+tv1nzFWu\/7hpu" + "ENgt13THtf3lGh+61r9d8zPX\/sIevLYXIXsSji4Co72yWdwqylOb99gmPrCZ97jXHe5181Uowu9rNfbvvd31\/8UfyUM5IyYL\/fSODXzPBn5gAz\/yWfqxTfzEJkYltOg2MoaNjEVocWxmAh8n8VxKr6dxXEbnZHFuDoLKoxgFFaaIApVQqDIKVkHhvlTA6opZW1HrK24jhW6m4K3QjgA6EkMXAumB3tm5FQbm4FYYjlE5uRUmYDKmYSZmYx4WYSl" + "WOHY11mK9MTZhqzF3YLc59pnrJ3P+jKPWcMxaTlrTr9Z2zhovcrLL1nzN2n93DTcJ7LZruufaHrjGx671iWt+7tpf2YM39iIcRwTGEoExuFV0bvXp3zbvoU28bzPv2tQ\/be4N7nWde13ZHYpwKefb3f9f9JE2VCJS6tCbd23g+8TwoU2MbBOj4FNCi4oYNjOmzYxNbHFtaHwbmpDYkvk4lefTeT2TTc\/qnJzGyGesQgpTVIFKElRZBauocFUUsI" + "ZC1lHQBorbRJFbKHZrhW+PToTQjTB65uJW6J+bW2EoRubhVhiHSZiSl1thFuZigecWYxlWYo1zfsQGbDHWduw09l5z7DfXQRw29y\/WcMJaTlvTWWu7YI2\/WesVArtu7Tdcw5+u5a5r+su1PXKNf7vWZ675pWv\/xx6E7EU4PreKy61iP7dZIjA6t4rKrT7lVlFu29SbNvcPm3yNuC5zr4tPQhEu5Hlbhf+FHoXD70bIEJofKV3o5Xs28QOb+KFN\/" + "Bif2MioPluj2cyYNjMWscWxofGQgNAS2dQkNjW5Pz+zyek9n9lx2Z2T27n5jVHYmMUJqrRClVewygpXTQFrKWQ9BW2ksM0UuaVit1X0jgTQhSC6ozeh9MvHrfANhufnVvgWEwpwK0zDTMzGPCzCUqxwzGqsxXrnbsJW4+3AbmPvM89POGTOo+Y+bg2nrOWMNZ2ztovWeNlar1nzH9Z+yzXcdi33XNMD1\/bYnjx1rS9c8yvX\/sYehBNzq4TcKoEI" + "jMet4nCrWNwq5l828Q5xcatPuFXk6zb5is3+TTSeJ66zf4cinJ4hGiO+rcr\/Ao8soRWRbOB7+MAmfmQTP8YnPluj2szoNjMmYhNcXJsa36YmJJzENjapjU1GbClsbhofZ\/B8Fq\/ncGwe5xR0fhFjlTBuGYWqoGBfKlwNBaytkPUVtLHiNkdrxW6v6J0IoCsx9CSOvuhfkFthaCFuhTGFuRUmYQqmYxbmYgEWYzlW4Qesc85GbDHGduwy5l4cMMf" + "P5jpizl\/MfdIaTuOsNV2wtkvWeNVaf7fmm9b+p2u461ruu6ZHru2JvXjmWl\/ah3\/sQdgehJNp2JNwq8TcKiG3iq9hjysCY4vAmNwqOreK+rvNvWqTL9nsizb9HHH9Gg5HOhkORTi28G1V\/id+pAp9EDFHeNk7NvE9m\/gBPrKRH9vITxHNZsYgtlg2NA7i2dQExJbIxiaxscmIJ7nNTWlzUxNUWn9m8vesXsvluHyOL+S8osYpabxyxq9krqoKV1" + "MB6ypmQ0VtqrgtFbmNYndAZ8XvTgi9iaLfF9wK3xThVhhVlFthAiZjWjFuhdmYj0VYihVeW4212IBNzt2KncbaY9x9+Mkch8111JzHccoazljLeWv6zdqucLJr1vqHNd+y9juu4S\/X8tA1PXZtT13jC9f62jWHXHs4tQhMya2Sc6ukGvYkIjARt0rAreJxqzi3bKYIjCECo3GrT7nVx+dt+hmbf0oRjovGX\/Rdh6ZwrnfeVul\/skf68PsR84ZWv" + "mMT37eJHyKyYkdBVBsazYbGsKGxEdemxie4hDY2MZLa3OQEl9IGp7LBn9ngtMSW3iZn9mc2z+X2Wn7HfeG84s4vbZzyxq1s\/OrmqqWA9RWysYI2U9zWitxOsb9S+K4E0BN9CKI\/kQzG0OLh8IgS3ArjMKkkt8IMzMJcLMASLMcq\/IB1jt2ILdhujF3G2osDxv7ZHEdwzJwnzf2rNZyzlovWdMnarlrj79Z605pvW\/s913DftTyyB09c23PX+Mq1" + "vnHN4XQiMC23+kzDnkoEpuRWyblVUm6VmFslFIHxRWBcbhWbW8XgVtEuENdZm37a5p9UhGPEdYS4fiauA9\/\/TxmLEQuFlr9jI9+3kR8iss38xGZGRXQbGhOxiS6ujY1vYxMhic1NSnApbHAqG5yaaNLY5HQ2OQOhZbLRnyOHv+fxWkHHFHF8CeeVMU5F41Uxbg1z1TFnA\/M3UdAWCttGgTsodmdF70YAvQihHwYSxzeluBVGleZWmFAmHP4O0zA" + "Ts8tyKyzCUqzw3Gr8iA3Y7Jxt2GmMPdhvzIPGPoxfzHXCnKfMfdYazlvLb9Z0xdquW+MNa71lzXes\/S\/X8NC1\/O2anrm2F679tWsNueZwRm6VQQSm41ZpuFVqbpVSw55cw56UWyURgYm4VXxuFfeyzRWBMblVdG4VlVtF4VaRjyrGIeL6ibj2EdfuRW\/L9T\/BozqnKkZUNvJ9fGgzI9vMKIhqQ6Mjpk2Ng3g2NoGNTURsSZDMBqe0wals8GdIa5" + "PTI6ONzkxsWWx2VoLK6c98nivktaKOK+Wccs6vZKyqxqxljnrma2TuZtbQSmHbKXBHhe6i6D0Uvw8hfE0UgzCUWEaU41YYV55bYQpmVOBWmIsFWILlWIUfsM4xG7EVO5y7C\/uM9ZMxf8YRcxw310lz\/mruc9Zw0VouW9M1a\/vdGm9a621rvmftD1zDY9fyxDU9d22vXPMb1xrOyq2yiMBM3Cojt0qvYU8rAj\/jVqm4VQpulYxbJdGwJxKBCbhVP" + "G4Vh1vF5FbRT9j8XxThsGL8rCgHiGsvce0iru0a+mX\/g8diaT1VafFnM9+3mR8isg2Ngqg2NTpi2tg4iGdzE9jcxEhqg5Pb4JTElhppbHQ6G53BRmcits9tdlabnY2r5bDhuZHfx4U9X9wxpR1b3nlfGqO68Wobu745GpuvublbW097Re6k2N0UvhcB9MMAgviGQIZV5FYYW4lbYTKmVeZWmIP5WPQlt8JKH6\/Bj9iAzY7dhp3YY4z9OGjMw8b+" + "xRwncNqcZ819wRouWcsVa7pubTes8U9rvWvNf1n7Q9fwt2t55ppeurZ\/XGPItYZzcKts3Cqrhv1zEZhJBGbgVum4VRoNe2pulVIEJheBSblVYm6VQMMeT8MeRwTG5FbRuVVUbhWFW0Xepzi7iWsHcW0lrk3E1f9\/3O+QiFheo24j38eHNjMyPkFUmxrDpsZCXBsbHwmJLjGS2uTkNjkVPrPRaW10ehudkdgyI4sNz2bDsxNbTpue26bnJbYCKOL" + "vJbxW1jEVnVPFuTWMU9eYDY3d1Hwtzd3WGjpaUxfF7q7ovRX\/a0IYhCHEMYJgxmBcFW6FKVXdCWJWNW6FhViC5ViFtVjv9U3Yih3O2Y19xvgJh4x51NjHccpcZ8x5ztwXreGytVyzpj+s7ZY13rHWe9b8wNofu4anruWFa3rl2t64xnBebpWbW+UUgdlFYDZu9Tm3yqxhzygC02vY03Krz7hVKm6VXMOeVAQmFoEJRWB8bhWXW8XiVjEOKsZ+4t" + "qjODsVaRtxbSGujcS1\/n\/AWAy+TlU5tOIdG\/q+zfwQkW1oFES1qTEQy8bGRXybmxBJbHAypLDJqWzyZ0hLcBlsdiabnRlZbXh2Ysth03PZ9DyEls\/GF7DxhVDUx6U8X87rlRxbzTm1jFHPWI2M28w8rczZzvxfWUtX6+ppjX0VfwAhDCaKYRhFKGOrcytMrsGtMLMmt8J8LMIyrMQa\/IgN2Ixtjt2Fvc49gJ+NdcSYx3DSHKfNddacF8x9yRquW" + "svv1nTTtf9pjXet9b41P7L2J67huWt56Tr\/cW1hn0zh\/Br2fNwqD7fKxa1ycKtsIjCLCMzMrTJxq\/TcKi23+kwEphKBKbhVMm6VhFsl1LDH17DHFYGxRGAMbhWVW0XhVpG3KtYm4lpPXGvDoQirZv+PFYvVQvMj2dD38KENjYwoiGpjYyCWzY2L+DY4IZLY5GRIYaNT2+g0SGezMxBCJnxu07Pa9Ow2PSdy2\/i8BJff5he0+YWJ7QsFKI7S\/l7e" + "8186prpjazu3vjGaGLOF8duYp4M5O5u\/uzX1xtfWOZAIhhDECOIYjXG1uFVtboUZdbgV5mJhXW6F5ViNtVjv+U3Yih3Y7Zx9+MkYh4x1FMeNfcocZ8x13py\/4Yo1XLOWP6zplrXdcc1\/WetDa35s7U9dwwvX8to1hVxb+AsRWJhbFeRW+blVXg17bm6Vk1tl51ZZudXnGvZMGvYM3Codt0rDrVJzqxTcKpkITCICE4rA+CIwLreKxa1icKuo3Cr" + "KZsXaoGg\/Kt4P4XCklcS1dOTbqv6\/\/KgVKhGpVujlezb1A0S2qZ8gqo2NjliIa4PjI6FNTmKDkyEFUhNdGpudDhlteGYbngXZbHoOwsiFPDY\/n80vYPMLEdsXClBUAYoRWglFKOPjip6r4vUajqvrnIbOb2q8lsZta46O5upi\/p7W0sfa+lvnYEIYhpGEMZZYJtTjVpiGmfW5FeY34FZYhpVYg3XYiC3Y7phd2OucA\/jZOEdwzJgnjf0rzpnvIi" + "6Z+6rr\/91ablrTbWu7Z40PrPWRNT+x9ueu4ZVreeOawiVEYDFuVUTD\/oWGvZAILMCt8nGrPNwql4Y9hwjMJgKzcKvM3CoDt0qnYU+jYU8tAlNwq2QiMAm3Ssit4mvY4+5SlO2KIwKjbiSudYq2VvFWh8PvrgiHIi1+FoqwKPfb6v6\/9GgUyhmpXujNezb1A3yEKDY2KqLb3JiIi\/g2OCGSKGgypLDRqZHGZqdDRkXPbNOzILuNz4ncNj+Pzc9v8" + "wsSW2EUUYSiilCc2EoqRGmFKEdslXxc1fO1vF7P8Y2c19wYrY3X3tidzNXNvL2soZ\/1DLS+IdY6nChGYxyRTGzIrTC9EbfC3MbcCkuwHKubcCus9\/EmbMNO7Hbsfhx07mH8YqwTxjyFM+Y4b67fzHnF3Net4Ya13LKmu9b2lzU+tNa\/rfmZtb90Da9dS8g1hUtzq5IisLgILMqtinCrQhr2ghr2\/CIwjwjMxa1ycqtsGvYsGvbMIjCDCEwnAtNw" + "q1TcKgW3SsatkojAhCIwvgiMIwJjisDo3Coqt4qyRvFWKuIy4lqs31rwJhRhbo63Vf7v\/GgS+iRi49BP79rcD2zsR\/gYUW1udMREHJscHwltchIks9EpkNpmp0E6ZLTpmW16FmSz8TltfG7kJbgCClAQhRWhqCIUI7YSClFKIcoQWjnFqKAYlf1Z3XO1vdbAcU0c38L5bYzTwbhdzNHDXH3M\/bV1DLKmodY30nrHWv94TCaaaU25FWY341ZYhGV" + "Y2ZxbYR02YovntmMX9uKAc37GEWMcM9ZJ\/Grsc+a4aK7L5rxm7j+s4aa13Had96ztgTU+ttan1vzc2l+5hjeuJVyeW5UTgWVEYCluVYJbFROBRUVgYW5VkFsV4FZ5uVVuEZhTBGbjVlm4VWZulYFbpdOwp+FWqTTsKbhVMhGYhFsl5FbxuFUcbhWTW0UXgZ+uUrzlirhEk7xQvzWPuOZsE4sfva32f79HxGbhXe\/Y1PfxIT7GpzY3GmIijk2Oh4" + "RIYqOTIYXNTo00NjwdMtr0z5HVxmdHTpufG3kVoIACFMIXhFFUIYorREmFKI2yxFZeQSoqSCViq6IoNXxc13MNvd7Usa2c1875Xxmvq7F7mqevOQeY\/xtrGW5do63zW+ueSCxTML0Ft2rJrbAQS1pxK6zGWqzHZmzDTuxxzH4cxGHn\/mKMEzhtzLPGvmCOS+a6as7r5r5hDX9ay11rum9tj6zxb2t9Zs0vrf0f1xByLeFK3KoityrPrcpq2EuLw" + "JLcqji3KsqtvuBWhTTsBURgXhGYm1vl5FbZuVVWbvW5CMyoYU\/HrdJwq9TcKgW3SsatknCrhNwqnoY9jgiMKQKjrVC8pYq4SDHnK+oc4vpevzV98dty\/3d6tAnVf6dVKPSezf0QH+MTRLPBMRAb8Wx0AiRGMpudAqlteBqkQ0Yb\/zmy2vwcyKUAeZBPEQoqQiF8oRDFFKIESilGGYIrpyAVFKQSsX2pKFUUpRqh1fJnPX9v7LXmjmvt+PbO62Sc" + "7sbsbeyvzTPQ3EOsZYR1jbHO8Zhs7VNbcyvMacOtsKgtt8JKrME6bMQWbMdu7MNPjj2Eo849jlPGOmPMc7hojsvmu4Y\/zH3LGu5Yyz1remhtj63xqet5Yc2vrf2NawhX41ZVuFVlblVJBFbgVuW4VRluVUrDXkLDXoxbfSECC3GrAtwqn4Y9j4Y9l4Y9uwjMKgI\/51YZuVU6DXsabpVKw55Cw55Mw55YBCYQgfFEYGxuFUMERlusiNwq8jxFnaW" + "Zn6nfmvomFOG78m+r\/m\/8aB+KHald6Ny77UQgIuMTRLXJMRAbcW10AiRGUpudAqmRxqanQ0ab\/jmy2vjsyIU8ip1PAQqiMMEVQXHFKKEYpVBWQcorSEViq6woVVBVYaoTUU3Fqa049f3ZxHMtHNPGsR2d18UYPYzVx\/j9zTPYvMOsYZT1fGt9E6z3O0x3Dd+351ZY2IFbYQVWd+RWWI\/N2Iad2OO1\/TiIw875BSeMcdpYZ3HB2JfMcdVcv5vzpr" + "lvu7a71nLfmh65nifW+Nx1vLTmf6w97BrCNTXs1TXsVblVFW5ViVtV1LCXF4FlRGApblWCWxXjVkW4VWERWFAE5uNWebhVLm6VnVtl1bBnFoEZNOzpRGAaEZhKBKbgVklFYGJulYBbxeVWsblVDG4VlVt9wq0if6+40\/VbU0TipF9DEcbEeFv9f7tHxK9CV9\/5ilviI0RBVBsdHbEQF\/FtdiIkRXIbngppkM7GZ0RmZLX5OZBLAfIgnyIURGGFK" + "ILiilFSMUqjLFGUV5SK+FJhqipMNaKpoTi1FKcOIdVToIZo6u8tvdbOMV85vqtzexqrnzEHGn+IuUaYd4w1jLOmSdY41Zpnuo7ZmN+JW2EZVnYOh3\/AOmzEFuzAbuzDT445hKM47txTOGOs88b8zdhXzHHNXDfMecvcd6zhL9fz0Jr+tran1vjCWl9bc8jaw\/VEYB1uVYtb1eBW1TTsVUVgZRFYkVuV51ZlNeyluVVJDXtxEViEWxXmVgW5VT5u" + "lYdb5RKB2UVgVhGYmVtlEIHpuFUabpWKWyXnVkm5VSINe3xuFZdbxVqgiHNFIreKMkNxpyryZJE4gbi+Pf62\/P9Gj66hSu905ZL4EB\/jU0TrIqoRB\/GRyKYnQXKksumfIR0y2vjMyILsCpALeRQhHwqisGIUUYziKKkgpVFOUSooSiV8qTBViaS64tRUnNqoq0D1ia2hIjVSpOb+bO259l7r7NjuzultjK+NNci4Q80x0lxjzT3BOr6zrunW+b1" + "1z8UC17Okm94Kq7EW67tzK2zDTuzx3AH8jCOOP4aTzj2Nc8a6aMxLxr5qjt\/NddOct819zxoeWMsja3pibc+t8ZW1vrHmcCMR2JBb1edWdTXstUVgTW5VnVtV5VZfcqtKIrCChr0styotAktyq+LcqoiGvbCGvaCGPR+3ysOtcnGr7NwqC7fKzK0ycKt0GvbPuFVKDXtyEZhEw55Iwx5fBMYRgTFnK+ZMRZ2muN8p8kTFHicSR4fCEUb\/G\/3kde" + "9Qwkg9ww\/f7cklERmf9OBWiInYiIeENj4JkiGljf8MaZHB5mdGFmRDTkXIg3wKURCFFaMIiitISZRWlHKooDCVFKYKqilODcWphToKVI\/YGihSI0VqTGxNFaoF2vi4o+e7OKaHY\/s4d4BxvjHecGOPNt84c0\/CFGubgdnWO8\/6F2GZa1uJH3pxK2zEVuzAbuzDTzjkmKM47pxTOGOM88b6zfVdMfZ13DDXn+a8a+6\/rOGha\/jbmp5Z+0trfG2tI" + "WsON+VWjTXsjURgA25Vj1vV4Va1uFUNDXs1EfilCKzErSpwq7LcqrSGvaQILC4Ci3CrwtyqILfKx63ycKucGvZs3CqLhj2zCEyvYU8rAj8TgSlFYDIRmFgEJhSB8URgbBEYQwRGnaK4kxR5vGKPFYmjuNbwP8IR+kd5q4Z\/pUf\/8LsR+4YWvdOXO+IjROljfsRALMRFgt7WiaRIidQ2Py0yIBOyKEJ25FSE3MiHgopRGEVQXFFKoozClENFhams" + "MFVQjehqoLYi1VWk+orUgGAao4liNVOsFoTUSsHa+fMrf+\/mtV6O6+ecgc4dYpwRxh1jjvHmm2z+adbzvbXNwQJrXuI6lmO1a1yLDdiMbdiFvTiAn3EExxx7Er8695wxLuKyMa8Z+w9z3DTXHddxz9wPrOGxtTy1pufW9soa31hvuBW3aiECm4nAJtyqMbdqoGGvr2Gvy61qicAa3Koat6qiYa\/MrSqKwHIisAy3KsmtinOrIhr2whr2ghr2fCI" + "wt4Y9pwjMJgKziMBMIjC9CEwrAlOLwBQiMKkITCwCE3CruCIwlgiMIQI\/naDI3yr2aEUfIRKHEtfgaWHd0FtV\/Cs8+ofyRRrAFfEhPu5vXkRHTMRB\/K+5KpIiBVIhTT\/XgUz4HNkUIidyI69iFERhFFGU4iipKGVQXmEqorLiVEV1BaqJ2opUlzDqK1RDNFGsporVXLFaEltrBWurYO3R2cfdPd\/b6187drDzhhljlPG+NfZE80wx5wzzz7Keed" + "a3CEuteyXWuKZ12Oh6t2IHdmMffsJhr\/2CE449jbPOvYBLxrpqzOvGvmGOP81115z3rf2RNfxtLc+s6aW1\/WONYZ8U4bbcqjW3asmtmmvYm4rAJiKwIbeqz63qcqva3KqmCKyuYa\/CrSpzq4rcqjy3KqNhLykCi4vAIiKwsAgswK3yisDcIjAnt8rGrT4XgZm4VTpulUYEpuJWyblVEm6VSATG51ZxuFVMERh9HNcao9gjFX2Y4n8TDkcaGA5F6" + "J\/trSr+2x8RB4d3vTuYKyIyoiAaYiD2IC6KhEiC5EiFzwZaPzIis0JkRQ7kRl4FKYBCKKIoxVESpRWmHCoqTmVUVaDqqKlIdVBPoRooVCM0UaxmhNJCwVopWBu0U7QOitYRXdDD3\/t6foDjvnH8cOePMc44Y042\/lRzzTTvHOtYYF2LrXU5Vlv\/WmxwfZuxDbuwFwfwM47gmGNO4oxzzuGiMS4b65ox\/zD2LXPcMddf5nxo7sfW8NRaXljTa2t7" + "Y43hjtyqA7dqx63aiMBWIrAFt2rGrZpo2BtxqwYa9noisDa3qsmtqnOrKtyqsoa9oggsJwJLi8CS3Kq4CCzCrQpxqwLcKi+3ysWtcnCrrNwqM7fKyK3ScavPuFVKbpVMw56EWyXkVvFEYGxuFYNbRR2l2MMVfQjXcqHv9OdafTe+lcV\/42NIqFikYaHQe0QbCPdjfIroiDWUeyIBEiMZUiK1daRFBmRGVmLPjlzIgwKKUghfoLj1lkRplFOciqi" + "sQFVRXZFqoo5C1UMDxWqEpgrWXMFaorWitVW09sTWUeE6KVxnYuumeL183M9zA70+1HEjnTfW+ROM9Z1xp5tjlnnnWcdCLLW2lda7Butcx0ZsxQ7Xuhv7cRCHPfcLTuC0Y8\/ignMvGeMqfjfmTWPfNsddc9035yNzP7GG59byypr+sbawNYY7a9g7adg7isD23Kott2rNrVqKwOYa9qbcqhG3asCt6nGr2hr2mhr26iKwigisLAIriMBy3Ko0ty" + "rJrYpp2L\/gVoW4VQENex4Ney5ulV3DnkXDnplbZdCwp9WwpxaBKbhVMg17Yg17Am4Vl1vFEoHRReCnLvJjFxVE1Xv9NPK9X4Ui9Pxv\/7fEiKNCZ\/Vu4Q8QGZ8gGneMiTiIj0RIiuRIZS1pkB6ZkAXZiT4n8iA\/CirOFyiGEtZdGuVQQYEqoyqqK1RN1HFN9dBAsRqhKeE1d40t0Ubh2ilce4X7Cp0JrQu6KWAPBeyNr\/19sKIO8\/oox3\/rvEnGm" + "WrMmcafY6755l5sLcuxyvrWWvMGbHY927ALe3EAh3AUx3HKMWdw3jm\/OfcKrhvrhjFvGfuOOf4y10Nz\/m3uZ9bwwlpeW1\/I2sI9RGA3EdiFW3XiVl9xq\/Ya9nYisA23asmtmnOrptyqkYa9gQisJwJrc6ua3Ko6t6rCrSpzqwoa9nLcqrQILKFhL6Zh\/0IEFhSB+TXseURgThGYTcP+uQjMJALTi8A0GvZUIjC5CEzCrRJq2ONr2OModEwXFs2F" + "fGLTI9voD2ymu7dQxG7b38rjv\/LxbfiLd8zxXtDD+TMKoiI6YiMeEiCJKE6GlPgM6ZARnxN9NuRAbuSz1oIojKIooTilUBYVFKgSqqC666mJOqinWA0UqxGaormitXStbdBO4TooXCd0du1dFbC7Ava0B70Vsa8iDvDnN54b7rUxjhvvnMnGmGas74091xwLzbnUGlZY0xqss9aN1r8VO7Ab+13nQRz28S84gdM469iLzrmEq8b43Vg3jXnb2Pf" + "M8cA6H5nzibmfW8Mra3ljTeE+IrA3t+rJrbpzq64a9s4i8CsR2IFbteNWbTTsLTXszblVUxHYiFs14Fb1uFVtblWTW1XnVlVEYCUNewURWFYElhKBJURgURFYWAQWFIH5RGBuEZhDBGYTgZlFYEYRmE4EfiYCU2rYk4nAxIqdwEXFdSGxbFR0C49q0R\/bzA99NrzXnWt1CYUidP7srUr+Cx873QlOCB1411wfIDI+QTTERBzEJ+5ESIoUSI20yI" + "DM3DQrsiMX8qKANRdGURRHKYUqi\/KopEhVUA01XVcd1EMDBWuEporWAq1cbxu0V7yOitcJXRSwmz3ooYi90Ech+9mP\/sQ2UDGH+Hik58Y6ZoJjpzh3hjFmG2++sReZZ5l5V1nHWutaj83Wuw27XMteHMAhHMVxnPLaGZx37G+44tzrxrhhrD+NedfY983x0Fx\/m\/OZuV9awz\/WErKm8Nfcqh+36qNh7yUCe3CrbtyqC7fqpGHvIALbicA23KoVt" + "2rBrZpyq0Ya9gYa9noa9toa9poisJoI\/JJbVRKB5blVWW5VilsVF4FFuFUhEVhABOblVrlEYHYRmFUEZhKBGURgWhGYWgSmcEFJXUQQQfFtbBwLjmmx0XwmfMJmI8vwD+T3u524VodN\/3V3iFNC+SOZ7z18hCiIiuBONDbiISGSIDlSIQ0nTYdMyIJsyIk8yG\/dhVAExVCSMMugPCriS8Wqhhqo7frqoYGCNUJTtFC4VmjrutujowJ2RldF7G4f" + "eipib\/RVyK\/tyQDFHKiY3xDaMH+O8tw4r01y7FTnzHTuHOMsMOYSc63AGnOvs5aN1rcFO6x7N\/bjIA7jGE7iV5xzzEVcds415\/5hjFu4Y8x7xn5gjsfmemrOF+Z+ZU1vrCU8mFsN1LAPEIH9uFVfbtWbW\/XgVt1EYFcR2JlbdeRW7TXsbblVKw17CxHYVAQ2EoENuFU9EVhbBNbgVtW41ZfcqiK3Ks+tynCrktyqGLcqwq0Kcqv83CqPCMzJrbJ" + "xqywiMKMIDIqWxgWksvDkFpzEYhNaaFyfBbHZf\/A1pU81sR9rXj90K\/6eW\/BI7dwhtvz8rVr+8x8Rp4W2v0vMHyAyPkE0xEQcxEciJEUKThq4aVpkQGZkRQ7ktu58KIgvUBQlCLQ0yqEiviTKqqiB2qjrOhugkaI1RXO0Ury2aO\/6O6KzAnZFd6LrZT96o69i9lfMgRikmN9gKLENt09jfDzenk12zHTHznLePOMsMuYy468y3w\/mXo\/N1rTNOn" + "dhLw64jkM4iuM45bmzOI\/fHHvVOddxwxh\/GuuuMe8b+5E5npjrmTlfmvsfawlZS3got\/pGBA7iVgO51dca9r4a9t7cqie36s6tunKrTiKwo4a9vQhsKwJbicDm3Kopt2rErRpwq7rcqpaGvQa3qqphr6xhr6BhL8etSmvYS3CrotzqCw17QW6Vj1vl5lY5RGBWxcts4RksOK3FprZxKSwyqc+ARNwqvgiMIwJjisBo7jY+cSsb+SuiaM+1WnOtF" + "pveyuU\/8\/F9qHCk790J6us+wsccMypiIDbiISGSIDlSIQ3SI5P1ZkF25EJeFEBhFPUJUhylUBYVUNm1VUV11EJdhauPRmiK5orXEm0UsD06orO96IruCtlLIfugn73pr5gDMZjghtinYYo6QlFH2a+x\/pzo71O8NsMxs50z3\/mLjbPcmKvN8aP5NlrDFuywtt3Yb90HcRjHcBK\/4pzXLuKyY6\/hD+feMsYdY\/1lzIfG\/tuanprrhTlfmztkHeFR" + "3GoEtxrGrYZo2AeLwIHcqj+36set+nCrnhr27iKwqwjsLAI7cqv2IrANt2rJrZpr2Jtyq0bcqr4IrKthryUCq4vAKiKwkoa9gggsq2EvpWEvLgKLaNgLcav8Gva8iprL4rNbcBYbkckC09ugND77UrH25Gw+iT4ioQiMJwKDf1aJIQI\/7UQMHbhWG67VUq\/V1B1i4\/+CO8Q5odHvmP8DREbwD97REBNxEB+JkDS4U8VnSIeMyIxsyIngEyMfxy2" + "EL1AMJVEG5V1bJVRBNdREHcKsj4ZoguYK2BJt0N4+dERnReyK7uilmH3sTT8MUNBB+EZRhyrqcPs1EqMVdizG2btJ\/pzque+9PtexC5231BgrjfWDsdebZ5N5t1nLTuy1zgM4hKM4jtM4iwu45Jir+N05N5172xj3jHXfmI+M\/cQcz831ypz\/mDv8LVGN1bCP5lYjReBwETiUW33DrQZp2Ptr2PuJwD4isCe36s6tunKrztyqI7dqp2FvIwJbat" + "iba9ibiMCGIrC+CKwjAmuKwGoisIoIrCQCy4vAMiKwpAgspmH\/QgQWtPB8FpvbInNYXFYLy0z1GVlqWnYafK0ohQhMyq0SicD4IjCOCIwpAqOJwE\/aEkWrcPj95uHwO03EYYO+b1Xzn3jMDyWKtCD05D3r+BAf41NCj47YiIfgn5aSIPiibSqkQXoEd7BZEPSGuZAXBVAYRVECpVHO9VXEl6iKGqhNqPXQAE3QDC0Jsw3aoaP96Iyu6K6YvdBHQ" + "fthgH0ahG8UdqjCjrBnozBGcb9V3PHENsEeTsY0f5\/l+XmOW+T4Zc5bbYy1xt2ALebaYe7d2G9dB3HEmo\/hJH7FOc\/9hiuOuYY\/nHPLuXfwl7EeGvNvYz8zxwtzvTZnyNzhCSJwvIb9W241mluN4lYjNOxDReA3InAQt+rPrfpxqz7cqie36q5h78qtOonADiKwnQhsw61aiMBmIrAxt2ogAuuJwNoisIYIrCoCK4vACiKwrAgsLQKDzS9qoYUt" + "sICF5bUpuSg+O2vPwkqDrw2lF4FpRGAqDXtybpVEBCYQgXFFYCwRGL0dMbQmihbE0ZRrNeJa9W6EIzSM9lY9\/38ei0NV3iHw9\/ERoiAqYiIO4iMRkiL4p6bUHDYtMiAzsiEn8iA\/CiFw4eKurRTKoAIqoQqqoxbx1kUDNEZTtCDQ1miHDvakE7qiO3opah\/0U9QBGGy\/hmCYwo4guFEYY\/\/GKfAETLSPkzGF2Gb4c7aiL\/D6EsetcM4aY6wz3iZ" + "jbzPfTuy1hgM4ZH1HcQKncRYXcMlrV\/G7Y2867zbuGeOBsR4b84mxn5vjlbnemDM8hVtNFoETudV4bjWOW40RgaNE4AhuNYxbDeFWg7nVAA17Pw17HxHYU8PenVt1EYFficAO3Kott2rNrVpwq6YisDG3asCt6nKrWiKwOreqIgIricDyNr+MRZaysGIW9YUFFaL24G4qN7fKIQKzisDMIjCDCEwrAlNr2FOIwKQiMJEIjC8C44jAGCIwakuiaE" + "YcjYmkAdeqw7Vq\/KffeyvistCedwn9A0TGp4jOTWMhLhIgMZIjFdIgPTIhC7IjF\/KigOsqjKIogdIoh4r4EtV8MtVEHdRHIzRBc4JthbZoj072pgu6o5ei9kE\/DFDYwRhi34ZhpOKOxlgFHmcfJ2ASwX2n0FPt6XSFnom5Pl7o+aVeX+X4tc7dYJwtxtxujt3m3I+D1nIEx3ASZ3Aev+EKrjvmBv50zl3n3jfGQ2P9bcxnxn5pjn\/MFTJneDq3m" + "sqtvtOwT9KwTxCB47jVWG41mluN1LAP07APEYGDRWB\/EdiPW\/XhVj25VTdu1YVbfaVhb8+t2nKrVhr25tyqCbdqxK3qc6s63Komt6qmAF9aXEWLCiKitE0o4bOsqM+uwtyqAFHlFYG5RGDwFewsIjCTCExPVGk07ClFYDIRmFgEJhCBcUVgLBEYTQR+0oQ4iOqDupr4Wpr46ivfyuc\/8lgaShhpVeif96zrQ3yMqIiB4DtY4yEhkiIFUiMtMojy" + "4J+gsiIH8iA\/CiG40y2OUiiLCqjsk6kqaqA26qEhGqMZIbdEG7THV\/anM7qhJ3oTZD8MwCDFHYJhGGkPRyvwWIxX5ImYbE+nKPQ0hZ6B7xV7NuZhsb8v99pqx\/3onI3O32qcncbdY54D5j6Eo9Z0AqdxFhdwCde89gduOva2c+4594ExHhvrqTFfGPuVOd6YKzyLW33PrWaIwGkicAq3msytJnKr8Rr2sSJwtAgcKQKHcash3GoQt+rPrfpp2Ht" + "zqx7cqpsI7Kxh76hhby8C23Crlhr2Zhr2xhr2htyqroY92NQaFhVEQmWLqEDhZam7FOssLpe\/4FaFRGB+EZhbBOYQgVlFYPCPuhmIKviWlNQiMLkITEJUCUVgPBEYWwTGEIHBT8x8XI9IaovDGuKwyutQhNIfvFXR\/8NjbajOO9b2Pj7CJ8QfDTERB\/GRGMkQfK\/YZ0iHTMiC7Aj+SSovCqAwinLlEiiNcqiIL1ENNVEH9e1FIzRFC7RGO3Qk2s" + "7oih7oTZR90R+D7N03GIaRCjwaYxV5PCba08mYqtjTFXsmZin4HPs8l9gWKPoSH6\/w3BrHrHfsZudtN9Zu7DP+QfMdtoZjOIkzOI\/fcAXXccMxfzr2rnPum\/+RMZ4Y65kxXxr7H3OEzRWeq2GfIwK\/51YzudV0bjVFwz5ZBE4UgeO51VhuNZpbjeRWw7jVNxr2QSKwv4a9r4a9twjsIQK7isBOIrCDhr2dCGwtAluIwKYa9kbBZlpQHQup6aKrm" + "fxLyq7INsuJwNIisIRmr6g7mcIisIAIzCsCg3\/EzSYCg29BySgC04nAz0RgSn1VMhEYfI95fBEYRwTGFIHR6ovDOkRSk1iqisPK4XCE8pXfquj\/\/oi4PrT0XcL\/AB\/jU0RHLAQ\/1JEQSZAcqZAGGZCZA2dFDuRGPhREEQRf\/C2FsqiAyqiKGvahNuqhIZqgOVqhLToQdid0QXf0Ql9C7Y+B+MYeDsUIjFbksRiPiYo9GVPt73QFn4nZij7XXs\/D" + "AoVfZM+XKv4qH6\/12gbHbHHODufvMd4B4x\/CUXOewGnrOYuLuIxrnvsDtxxzx\/F\/4aFz\/zbnU2O9MOZrY4fMEV7ErRaIwHncai63mq1hnykCp4vAqdxqMreayK3Gc6uxGvbRGvYRInCoCPxGBA4UgV+LwL4isJcI7C4Cu4jAr0RgBxHYVgS2sqHNLaaJi2ho8nomru0zKLgrqioCK4vACiKwrAgsJQKLicAvRGBBEZhPBOYWgTlEYFZ3gZlFYHo" + "RmEYEpiKq5CIwiQhMIALjElUsERhdBH5aSxxWI5YvxWFFcVj2P\/4TPZE46nsIfpw\/CqIiBmIjPhIhKYLvx0+NdMiIz5ENwbf95EEBFEZRlEDp4Ot1qIgvUQ01URcN0BjN0AJtfPK1R0d0Rjf0RB8C\/hoDMRhD7eUIjMJYjFfwiZis4FMx3T7PxGxFn4v5Cr\/Ivi9W\/KWKv9z+r\/bnj57b5LVtjt3lvH3G+Ml4h81xDCfNfQbn8Ruu4Hfc9Npt3H" + "Psfec8cu4TYzw31itjvjF2eDlRLeVWi7nVQg37fBE4l1vN4lYzudV0bjVVwz5Zwz5RBI7nVmNF4CgROIJbDRWBg0XgQG7Vj1v1EYE9RWA3EdhZBHa0ue0sorXJA6tvZtJGFF2fVdYRgTVFYDUR+KUIDL4SXW6CYnCrEiKwqAgsLALzi8A8\/RVPBGYTgZ+LwIxElVYEphaBwU\/CJCWq4Of44onA2CIwhgiMWp37VCGWSkRTThyWevFWRv+Xx7ZQy" + "3c46\/v4CFEQDTERBwmQGMmQEp8hPTK5vuA7X7MjN\/KhIL5A8A\/sJVEGFVAZVVEDtVEPDX3SBb1nc7QKPgERfCJ2Qlf04PS90Q8DMAhD7OdwjMIYjCPIiZis4FMxHd\/b7zmYp\/ALFH4Rltj\/ZYq\/AqvU4Qes9\/Fmr2133G7H73fuz8Y6atwT5jqNs7hoLZdxzcd\/4BbuOOYvxz50zt\/OfWaMl+Z4bcyQscOrNOwruNUyEbiEWy3kVgu41TxuNVvD" + "PlMETheBU0TgZG41kVuNE4FjuNUobjWcWw3hVoO4VX9u1VcE9uZWPWx8VwvoZOIOFt\/WZ04rnzHNWXITdtyQWwVfu6ktAmuIwKoisJIILE9UZURgSREYfGvJFyKwoL4qrwjMJQKzi8As+qpMIjB9e0UWgSlFYDJ9VeJG3EUExhGBMWsQhwiMIgI\/Kk80ZcRhSXeHxRu\/VdP\/\/oi4Mzz8XbH9AYJ3uPkU0RELcZEQSZAcwY+opUEGZEZW5EAe5Ef" + "wPWZFUBylUc4nWEV8iWqoiTqoj8ZohpYIetH2+ApdOH139EJf9MdAfGNPh2EkxmAcJhDoZEzFdMWfiTn2fR4WYDEBLCWA5VihFquJ4AciWKsmG\/y51XM7vbbXcT85\/rDzfzHWSWOfwXnzXsJV\/I6bnruNe4554NjHznni3OfGeGWsN8YMr+VWP2jYV3OrFdxqObdaqmFfpGFfIALnicDZ3Gomt5rOraZq2CdzqwncapyGfTS3GsmthmnYv9GwD+" + "RWX3OrPhbQ06TdTdbFRF9RcTsW2ZoFtxSBTblVI25VXwTWEYE1RWA1ERj8Y2xFEVhWBJYSgcWJqoi+qpAIzCcC84jAHPqqrJ0UVQRmEIFpiCqVviq5CEwiAhMQVVx9VSwRGJ2oPqlALGWJppQ4LEZYRfq9ldP\/\/oi4J\/wweJO3D\/ExPkUMxPZJEg+JkBQpkBrpkBGfIxtyIi8KoDCKogTKoDwqoQqqozbqIfiicRM0t1+t0BYd0Ald0QN90A8Df" + "KIOxlCMwGh8iwmEOwlTMB0ziXI25mGBGizGUiJYTgSrsEZNfiCEH7GeGDapzzZ\/7vL8PscddPwR5x7HaeOdNcdFXMY13MCfuOu1+455iL+d88zYL43xj7FCxgyv51Y\/cqsfuNUaDftKEbhcBC4VgYu41QJuNY9bzeJWM0XgdA37FG41SQSO17B\/q2EfLQJHiMChGvbBNmqASftZZGDhPXx2dGWPnVhjBxHYVgS2csfQnKiaiMDgny\/qisBaRFXd" + "XWAVd4GVRGB5EVhGBJbQVxUVgYVFYAERmFdflVMEZhOBnxNVBn1VWhGYWgSmEIFJ9FUJ9VXxRGBsfVWMikRSjliI6sPihFVEn1XwzFs5vX0cCBePxGnfw0eIgqiIgTiIj0RIhpT4DOmRCVmQHbmRDwXxBYqhFMrakwqojKqoiTqoj0ZoipZog\/b4Cl3QHb18kvZFfwzCEAzHKIwl+vGYiO8wDTPt\/WzMxQJiXIylRLAcK7FGXdYSwjpsIIZNarS" + "FILb7c4+\/H\/D8Icf94ryTxjhjzPP4zXxX8Ttu4rbn7nn9AR479qlzXjj3tTHeGC+8hVtt4lYbNOzrROBabrWGW63kVsu51VJutUjDvkDDPlcEzhKBMzTs00TgdyJwoggcLwLHisBRNnG4CYeYZJAJ+lNvX7bYi912F4FdRGBHEdhOBLYWgS1EYFMR2EgE1heBdYiqpgisKgIri8AKIrCsvqqkCCwmAr8gquAnWvKJwFwiMLu+Kou+KlML7iECPy" + "OqlPqqZPqqREQVX18VR18VQwRGLU0sJYimKPEUDocj5eda+TO8VZXHT6ES77iG9xG8ReUniIZYCN6vKwESIzlSIQ3SIzOCH7jNgdzIj0IoguD7+ksj+I7ZivgS1VELdRH8w3xjNEcrn5TBF5M7oBO6Iriz7o2gZx2AwRiGkRgjGb7FBEzGVMzALDWYi\/lYRJhLsRwriWEN1qrPOmwkiM0EsRXb1Wsnwe3150+eP+L144495byzxrlo3Mu4jhv4E" + "3dx32uPHPPEsc+d89K5\/xgjbKzwdg37VhG4WQRu5FbruNVabrWGW63UsC8XgUtF4EIROF8EzhGBs7jVDBE4VQROFoETRGBwkaNNMMJCh1LuYKodwA77icDeIjD4GkxXEdhJBHYQgW3dBbYSgc1EYGMRGHyLSF0RWEsEVhOBXxJVRREYfA94KRFYXAQW0VcVEoH5RWBufVUOfVVWEZiZqNLrq9Loq1KJwGT6qsT6qgQiMA5RxdRXRStJLET1EVG9" + "X0CflZewcv7vwop4JLTtXdfyAYI31v0UwVtWxkI8JETw\/l3JkRppkcEn1OfIhpzIgwIojKIogTIoj0qoihoIvjetHhqiCVqgNYJ\/AuuIzuiOXuiL\/hgkEYZgOEZhLMZjEqZguhp8jzmYh0VYQrDLsQpriHEt1qnTRmwmiq3YQRi71G03YezDz\/5+1PMnHPOr48879zdjXcXv5rmJOz7+Cw+99rdjnjr2hXNeOzdkjPBuEbhLBO7gVlu51WYN+0Y" + "N+zoN+1oRuEYEruRWy7nVEhG4UATO41ZzROD3InC6CAwuapLBxxt0LMWOotbhbHWICBwkAvuLwL4isJcI7CYCO4vAjiIw+EfV1iKwBVE1cRfY0F1gPRFYWwRWF4FVhiiGCCwvAssQVQl9VVERGPxQZwF9VR4RmFMEZtNXZdZXZdBXpSWq4D2nkuurkojAhPqquPqqWCIwejHC+oJoiOqDvOIwlzjMvuCtrAjreOjwuz5RPsTH+BQxEBvxkAhJkQ" + "KpkQ4Z8TmC96DIhbwogC9QDCVRFhVQGVVRE3VQH8H3qjXj+C3RBu3xFbqiB3qjHwZgMIZiJMZgHIK0+E4NpmEmZmMuFmAx4S\/DCqzBWuJch43qtQXbCGMHdhHHHvXbRxwHcMjHxzx3yjFnHX\/BuZdx3Zg38Cfu4r7nHnn9CZ479pVz3jg3fEAE7uNWe7jVLm61QwRuE4FbuNVGbrWOW63lVqu51QputYxbLeZWCzTsc7nVLJsyw6BTDTiZWidQ6" + "jg2OEYEjhCBQ0XgYBE4QAT2E4G9RWAPouoy3+aJwPYisI0IbElUwTeyNRKB9UVgHaKqqa+qKgIrE1UFfVVZEVhSBBbTV32hryogAvOKwFz6qmz6qs9FYEZ9VTp9VWoRmIKokuqrgvf5jEdUsfVV0YsQS0GiyUc8uQkrO2Fl+fE\/qOpkKG6kk6G\/3nNdHyIKgrcFj4E4iI9ESIaU+AzpkQlZkB25kQ\/B2wcUQXGUQjlUxJeohlqoiwZojOZohbbo" + "gM7ohp7og68xCEOCO28Ed+BjMR6TMAXT8T3mYD4W+aRfihVYjR+wTr02YjO2EeRO7CaQvdhPJD+p5c8EcgTHfXza8+cc85vjrzr\/d9zCHfyFh\/jba88c89Kxr50Tcm74Z271E7far2HfKwJ3i8Cd3Gobt9rMrTZyq3Ua9h807Ku51QputVQELuJW8w06x2CB9U6n8imsdJIIHC8Cx4rAUSJwuAj8RgQOFIFfi8A+IrCnvqqrCAy+9aMDUbXVV7U" + "Sgc1EYGOiaqCvqisCaxJVNX3Vl\/qqir0Ji6hK6auCHz3\/QgQGb5yRT1+VWwRmJ6os+qpM+qp0RPWZviqlviopUSXSV8XXV8UmqhiFiCU\/YRHVhzn0WVkJK9ONUIRUH0SIcCqUMpJPmPcQ\/GaMKIiGmIiDBAjegDcZUiEN0iMzsiIHgnfQyY9CKIISKI3gB3UrIfgRuOoIfrikHhqiCYLvtG2NduiILuiOXuiL4J\/KBmMoRuhrR+NbTAx6XAS97k" + "zMxjwsxBIsxyq1+gE\/YgM2E+hW7MBuAtyLA2p5EIeI5AiR\/KKuJ\/x5xnMXvH7ZsdecewN\/4i4e4DGeeu25Y1459o1zwr9wqyMa9kMi8KAIPMCt9nKr3Rr2HRr2rRr2zSJwgwj8UcO+RsO+SgQGi11ioIUGmUehs1nfTBE4TQROFoETROC3InC0CBwhAoeKwMEisD9R9dVX9RKB3UVgF31VRxHYzl1gaxHYXF\/VRF\/VcLhNF4G19FXV9VVVRGBFf" + "VXwo+alRWAJoiqiryqkr8pPVLn1VTn0VVmJKpO+Kr2+Kg1RpdRXJdNXJSaq+PqqOPqqmEQVNQ\/R5CSerESUWQOfXp+V+eMIEX4LpX6HG7+Pj\/AJoiEW4iIBkiA5UiF479QMyIxsyIk8KIDCKIoSKIPyqISqqIHaqI9GaIqWaIP2+Apd0AO90Q8D8A2GYSTGYDwmYQqm43sEve98NVqEpViB1ViL9diErYxhB3ZhLw4Q60EcUtejOEYsx4nllBqf" + "9fFFz13x+u+OveX8O\/gLD\/G355557aVj\/nFsyDnh4yLwGLc6wq0OcauD3Gq\/CNwrAneJwB0icKsI3CQC14vAtRa92iArTLqUshexzvncao4I\/F4ETheBU0TgJKIaLwLHiMCRIjD4x9Fv9FUDRGA\/EdhbBPbQV3WZZhNFYHuiaqOvaqGvaioCGxFVfX1VbRFYg6iq6qsq6avKE1UZfVUJfVVRoiqsr8qvr8pDVDn1VVn1VZmJKoNmPXj34VRElVy" + "znlhflYCo4uqrYuqrgt9d80k24vmciDJo4NMSVqpPI0S4GBr\/Dlf+AJHxCaIjFuIiIZIgOVIjLTLic2RDLgRvKlcAX6AYSqIMKqAyqqIm6qA+GqMZWqItOqATuqEn+uBrDLL\/wT\/0D8cojMUETEbw9cQZmIV5WIglWI5V+AHrsJExbMF27MIe7MdBKXQIR9X3GE4QzCmC+VWtz\/nzkr9f8\/oN\/On4e3iAx3jquRd47Zg3jg3\/yq1OcasT3OoYtz" + "qiYT\/ErQ6KwP0icA+32iUCt4vALS5so5PXOTGw1FUsbzmrXCJLF4rAuSJwlgicIQKn6qsmbyIsEThWBI4SgcP1VUMWi0MR+LUI7KOv6iECu4rATvqqDvqqNiKwJVE101c1FoH1RWAdfVVNfVVVERi8IUYFfVUZfVVJzXoxfVVhfVUBzXrwdorB+3Vm06x\/rq\/KQFRpNeup9VXJiSqJZj2BviouUcXKRSzZiYaoImckrLSElZqwUo6PEPFKaPy7r" + "vcDRManiI7g9\/zEQ0IkRQqkRjpkxOfIjlzIh4L4AsH7gZVC8E47FfElqiF424G6CH6gtzGCH5VrhbboiM7ohl7oi\/4YjKEYgeAf\/sdhIr7DNMzEHMzHIkawFEFPvBo\/YgMCg9iGndiNfVLoJxzCURxT5xM4TYRncI5wLqr7ZR9f9\/xNx9zBX859hCc+fo6XXvvHMWHHhs9xqzMa9lMa9hPc6hi3OsKtDnGrn7jVPhG4m1vtMMBWEwQWup7drWV1" + "q0XgChG4VAQGXyOZLwJni8CZInAaUX0nAieKwG+JKvgWjhEicKgIHERU\/fVVfUVgT6Lqpq\/qrK\/qSFRt9VWt9FXNiaoxUQU\/Ql5XXxW8AUY1fdWXRFWBqMrqq0oRVTGi+kJfVZCo8mrWc+mrshPV55r1jPqq4A34U2vWU+irkhBVQs16PKKKRVTRsxANUUVOR0SfEVYKfVZSwrpOWD6ZPsDH+BQxEBvxkAhJEfxGjc+QDhmRBdmRG\/lQEEVQHKV" + "QDhURvPNOddRCPTREEzRHawQ\/OvcVuqA7eqEfBmAwgu99G4kxGIdJmILgn9hmYS4WYDGWYRV+QNAjb8QWbMcudd2LA\/gZR3AMJ7Q8p3EW5wn0otpfIpyr\/vzD3\/\/0\/D3HPcBjPMULz732Wsgx4Usa9osi8LwIPMOtTnGrExr2Y9zqCLf6WcN+wAL2OmEXJW5nj1vY4kYRGNxV\/CACV7oLXCYCF4vABSJwDlF9LwKDf\/ScQlST9FXjROAYEThSBA" + "7VVwXfNjtABPbTV\/XSV3UXgV30VR31Ve30Va2\/scn6qiZE1ZCo6uqrahFVdc36l\/qqikRVVrNeSl9VnKiKaNYL6qvyEVUuzXp2fVUWosqoWU9HVKmJKoVmPam+KqFmPZ5mPTZRRc9ENOmJh6g+SOnOMClhJSKsbceOvcupP8THiIoYiI34SIRkSInPEPyGjUzIghzIjXwohCII3iKzNMqhEqqgOmqjHhqiKVqgNdrjK3RBD\/RGPwzENxiGUQi+F" + "248gu8ymYoZ6jUr+FcRLMQSrMBqrMV6bMI27MAe7MdBHMYvWp7jOIUzOM9ULuIyDVzBNQK64c87nvvL64+c8wTPffzKc2+8Fr4mAq9wq8vc6iK3Oq9hPyMCT2nYj2vYj1roIQcfpMT91LqbvQWN3lYRuEkErheBa\/VVq0TgchG4RAQu1FfNE4Gz3AXO0FdN1VdNWuniRWDwXYwj9VXD9FXfENVAfVU\/fVVvouqhr+pCVF8RVTt9VWuiaqFZb6qv" + "aqivqqdZr6Wvqk5UVTTrFfVV5YiqtGa9uL6qCFEV0qznI6rcRJVds56FqIJfE5JOs\/4ZUaUkqqSa9UREFU+zHpuoYhDVp2mIh6g+TEZYicPHIsY6FiGi638PHyIKoiIG4iA+EiMZUiIN0iMTsiIHciM\/CqEoSqA0yqMSqqAGaqMeGqEpWiJ4e4L26ISu6IE++BoDMQTDMQrfYgImYxpmYjbmYxGWYgXW4EdswGZsxy7sZR4HAgNBYCTHcBK\/4hw" + "uSqzLuIrr9HCDiG7hro8feP1vPMNL\/OO5kNfCf3Cr69zqKre6LAIvisBzIvBXEXjSQMeoMLDGn1nbARG4VwTuEoHbROBmotqgr\/pRBK4RgStE4FJ91aKthCUCZ+urgu\/7mSoCJxPVBH3VWH3VKKIarq8aQlQDieprfVVvouqhWe+qr+pEVO0168EbW7QgqqZE1UizXo+oamvWaxBVFaKqpFkvp1kvTVQlNOtFiKqQZj14Y\/3cRJVDs56VqDIRVX" + "rN+mdElZKokmnWExFVfHeAsYkqBlFFTUVYRPVhYmJKEA5HjBOOEMkn13v4EFEQFcGvF46D+EiMZEiFNEiP4PcDZUUO5EF+FEbwNuQlELzBb3lUQlXUQB0E7yPWCME79LREG3RAJ3RDT\/TB1xiEIRiB0fgWwXfyfodp+B5zMB+LsQzBP8X9gHXYiC3YgeCOfx9+wmH8ghM4jbO4ILUu4Qqu4wZu0cZtgvzLn4\/8\/Qme4xXeeC58m1vd0rDf0LBfF" + "4FXROAlERgMdpb6TlPeCbZ2lKgOach+EoH7ROBuEbhDBG7RV20UgetE4BqiWqmvWiYCFxHVfH3VHBE4k6im6au+01dNIKpv9VWj9VXDNetD9FWDiOprzXoffVXwo+BdNeud9FUdiKqNZr2lZr0pUTXSrAfvVFfbHWANzXpVoqpEVOU166WJqoRmvahmvRBR5des5yGqHO4As2rWMxFVeneAaYgqJVElcweYmKjiuwOMQ1QxiCpqcuJJQkRE9V7c" + "cDhSTMLySfYePkIURENMxEECJEbwizxTIQ3SIzOyIifyID8KoyhKogzKozKqIngrzTqoj8ZohpYI3rGnAzqhG3qiL\/pjEIIfuRuBMRiHiZiC4Dt7v8ccLMBiLMcqKfQD1mMTtmIH9mA\/DuIIjuEkfsU5\/IYruIYbuEUft3GP+dzHYx8\/8\/xL\/OPjsOfCd0XgbW51i1v9IQKvWcAVL1ykxnMs7VcReFIEBncHh0XgQRG4XwTuIaod+qqtInATUQX" + "\/ePmDvmoVUS3TVy0mqgVENUdf9b2+ajpRfadZn0hU44hqtGZ9BFEN0awP0qz3J6q+mvWemvVuRNVJs95BXxW8t1NLzXozomqkWa+vWa9DVDU061WJqhJRldeslyGqkkRVVLNemKjyuwPMQ1Q5iSqrO8DMRJXeHWAaokpFVMncASYmqvjuAOMEvyGeqKISVRSi+oio3otFWNEIi4O\/h48QBdEQ\/Mb9uEiAxEiOVEiLDMiMrMiJPCiAwiiKkiiDCq" + "iMaqiJOmiAxmiGVmiLDuiMbgjeG6Mv+mMwhmIkxmAcgh9umYLpmIW5WIAlWI7VWIv12Ixt2Ingi+AH8DOO4jhO4Qwu4BKu4nf6uInbuIf7eMiInuCFj18j5OPwQ251n1vd41a3udVNT\/5OcVdZ2SUReD5o3IjqlL7quAg8IgJ\/JqrgK7J7ROBOotqmr9qkr1pPVGv1Vav0Vcs160v0VQv0VXOJapZmfTpRTdGsT9SsBz\/PNkazPkKzPpSoBmnW+" + "xNVX6LqqVnvRlSdiaqDZr0tUbXSrDcjqsZEVZ+o6hBVTXeAVYmqMlGVdwdYhqhKElXwu2QKE1UBd4B5iConUWV1B5iZqDK4A0xDVKmIKpk7wMRElYCo4hBVTKKKmpB4iOojonovOmF9Qlg+4d7HR4iCaIiJuEiA4JelJ0cqpEUGZEY25ETw284KoDCKoSTKoAIqoxpqoi4aoDGaoRXaoiM6oxt6oS8GYDCGYiTGYDwmYQpmYBbmYiGWYAVWYy02" + "YDO2YRf24iccwlGcwGmcxQVcxjX8gcCA7uI+HuJvPflTvPTxPwg\/Jaq\/udVDDft9L9yhtlus7A8ReE0EXhaBF\/RVZ0Vg8DWM40QVfAX2kL7qAFHt1Vft0ldtI6rgWyw26KvWEtVqzfpyolpCVAs163OJKvgJkOlENYWoJmnWxxHVGKIaQVRDiWqwZn2AZr0vUfXSrHcjqs5E1ZGo2hJVK3eAzYiqsTvA+u4A6xBVTXeAVYmqMlGVdwdYhqhKVlQ" + "8d4CFiaqAO8Dg9\/flJKpsRJWZqDJkJyyiSkVUyYgqMVElSEFYRBWTqKLGIx6i+oio3v+EsCITFjd\/Hx\/hE0RDTMRFAgS\/iT85UiEtgl9LnBnBL\/zMibwogMIohuD3CpVFBVRGNdREXTRA8MbAzdEKbdERndEdvdAXAzAYwzASYxD8APEkBD+aNwOzMA8LsQTBdwCvRvC9dRuwGdsRfKPBPgT\/hHcIv+AETuMcgq8UXEbQg99AkG738ACP8RQv8B" + "ohhF9o2IMnH1PZAzZ3l6j+1KjdEIFB1x\/cVl68anCiOh185VVfdZSoDh2zCH3VXqLapVnfRlSbiWqDZv1HolqtWQ++Z3oJUS3UrM8jqlnuAGcQ1RSimqRZH0dUY9wBjtSsDyWqwUQ1gKj6ElUvd4DdiapzD5tKVG2JqpU7wGZEFbyldAOiqkNUNesRFlFVJqoK7gDLElXwG6+KEVVhoipQRFGJKmc+RSaqzESVIQthEVWqdMRAVImJKkFSwiKqm" + "EQVLTbxENVHnxJTZML6gLB8Ar6Pj\/AJoiEm4iIBkiA5UiMtMiAzsiEngl8AWgCFUQwlURYV8CWC3+BRE3XRAE3QHMEbBbdF8BacndEdvdAXAxC8088wjMRYjMckTMUMBD+qNw8LsQQrsBo\/YgOC77Xbjl3Yh59wGME\/6Z3AaZzDRVzBddxE0JPfQ5B2f+M5XuENPYXf+OClCHwmAv8mqof6qqARC7r8G0R1XV91JfhimL7qHFGdJqoTmvVfiOoQ" + "Uf1EVHuJapdmfTtRBd9luEGz\/iNRrSaqFUS1hKgWEtU8oprlDnAGUU0hqklENZ6oxhDVSKIaSlSD3QEOIKq+RNWLqLoTVeeuNpWognf5Dd5CujlRNW5q84mqDlHVrE1YRFWZqCoQVVmiKlla8YiqMFEVIKrgV9jmzK3IRJWZqDIQVRqiSvUZMRBVYqJKQFRxiComUUUjqk+I6qOPiekDwnqXsMJvwu\/jI3yCaIiJuEiAJEiO1EiLDMiMbMiJvCi" + "AwiiGkiiLCvgS1VATddEATdAcrdAWHdEZ3dELfTEAgzEMIzEW4zEJUzEDszAPC7EEK7AaP2IDtmA7dmEffsJh\/IITOI1zuIgruI6buI17eIi\/8RyvEPwXDonA1yLwRZCPIvARt7ovAu+IwFv6qj9EYPCV1Uv6qgsi8Iy+6pS+6rgIPKKv+llftV+zvkdftUNftVUEbtJXrROBwU92rNJXLdOsL9ZXzReBczTr3+urpmnWv9OsTxCB32rWR+urhr" + "sDHKJZD95Z7mt3gH006z1EYFfNeid9VXt3gG30VcEb3zfVrDfUV9VzB1hbs169ajhcxR1gJX1VOX1Vac16cX1VEXeABTXr+URgbs16Dn1VFneAmTTr6dwBfuYOMKW+KmnicDiRZj1enHA4dsxwOHq0cPhTEfjxR+HwB++Hw+9GCoT1irBeEdYrwnpFWK8I6xVhvSKsV4T1irBehVMhLTIgM7IhJ\/KiAAqjGEqiLCqgMqqhJuqiARqjOVqhLTqiM" + "7qjF\/piAAZjGEZiDMZjEqZiBmZhHhZiCVZgNX7EBmzGduzCPvyEQ\/gFJ3Aa53ARl3EdN3Ab9\/AAj\/EUL8Ivw68RQvgNt3qlYX8edPUa9kca9r807HcI6xZh\/R582Z6wgn9sPE9YwbdKnHQXeIywjhDWQcLaT1i73QXucBcY\/CTHRsJaR1g\/ENZKwlpGWMGPas8nrDmENZOwphHW5HHERVjfEtYowhpOWEMIayBhfU1YvQmrB2F1Iazgje7bE1ab" + "ZsRFWE0JqyFhBb\/JqhZhBb+HrwphVSSscoRVirCKE1bwi7YLElY+wspFWNkJKwthZSSsdIT1GWGlIKykhJWQsOIRVuyoxBWFuAgrMmF98C\/Cek5YzwnreTgKoiEm4iIBEiM5UiEtMiAzsiEn8qAACqMYSqIMKqAyqqEm6qABGqMZWqEtOqIzuqEX+mIABmMoRmIMxmMSpmAGZmEuFmIJVmA11mIDNmMbdmEvfsIhHMUJnMZZXMBlXAs\/C\/+BW7i" + "L+3iIv\/HUfy\/9+Q9YlS6eWwVfe3gmBv8Wgw\/F4D0xeNudYPCPi79fEIlnw+HfCOv88XD4V8I6+TNxHZDHhHWQsIKf3NhNWDvWi8S1xEVY65aH\/+VHs1cS1tK54fAiwpo\/PRyeTVgzCWsaYQXvHDdhhP6AsEYR1vD+4fA3hBW8NXS\/bsRFWD0IqwthfUVY7QmrNWG1qK8PIayGhFWPsGoRVvXy+pUyxEVY5QirFGEVJ6wv8hAXYeUjrFyElZ2wsh" + "BWRsJKl0xfRFgpCCspYSUkrHiEFYuwohPWp4QV+V+E9Xf4PXyEKIiGmIiDBEiM5EiFtMiAzMiKnMiDAiiMoiiJMqiAyqiKmqiDBmiMZmiFtuiAzuiGXuiL\/hiMoRiJMRiHSZiC6ZiFuViAJViO1ViL9diMbdiJPTiAn3EEx3EKZ3ABl3AVv+MmbuMu7vOsh3iC5\/7+Gm98HA4R1WuiesGtnorBx+4EH2ja7wb\/uKi\/uqG\/uq6\/Cr6h6yJhndNf\/" + "UpYJwjrF\/3V4Z36LcLap7\/aRVjbCSv4UewNhPXjYuJaoN8irKWEFbzX0jzCCt4pbgZhTSWsyYQ1nrDGDiIuwhpGWN\/01G8RVj\/C6t1Bv0VYXQgr+E1V7QirNWE1J6wmNYiLsOoSVi3CqkZYXxJWxaL6LcIqRVjFCesLwiqYlbgIKxdhZSeszwkrI2GlJazUhJWCsJIQVkLCikdYsQgr+nv6rX8R1iPCekRYjwjrEWE9IqxHhPWIsB4R1iPCekRY" + "j8JpkB6ZkRU5kQf5URhFURJlUB6VURU1UQf10RjN0BJt0QGd0A090Rf9MQhDMQJjMA4TMQXT8T3mYAEWYzlWkcEPWI9N2Iod2IP9OIgjOIaT+BXn8Buu4Br+EIK3cBv3SCv477GPA\/96iX98rLHiWkT1iqiec6u\/udUjbnWfW90Rg8E3cP3xazh8zd3gJY37hcPh8FmN+2mN+3HCOqpxP6Rx\/4mw9mrcd2nctxNW8AYSGwhrLWGt1riv+F4zT1g" + "LvyMuwppFWDNGa+YJa5LGfTxhjSGs4A3shxHWYMIa0Im4CKsXYXVvqZknrI6NiIuwWhFWc8JqQlgNKhEXYdUkrODX\/39JWBUIq2x+4iKsYoT1BWEVIKy86YmLsLIR1ueElYGw0sYnLsJKHoO4CCshYcUlrFiEFe1fhPUXYf0V\/hBREBUxEQfxkRjJkAppkB6ZkRU5kAf5URhFUQJlUB6VUBU1UAf10QjN0BJt0AGd0BU90QdfYxCGYARG41tMxH" + "eYhu8xB\/OxGMuwEmuwDhuxBTuwG\/vwEw7jF5zAaZwlnwu4hCu4zqtu4Fb4DnHd8cwdcrrLte5xraD7usu1xF+IqF4T1QuiCr7l4bGm\/QG3uicGb4vBm2Lwd251VQxe0l+d11+d2aeZ301chHVE4x78yPUBwgreMGKnO8JthLXJHeF6d4RrCSt4R7jl7giXENYCd4Rz3RHOIqzp7ginEFbwhvXj3BGO6RMOjyCsoe4IBxNW8Bup+rYhLsLq5o6wM" + "2F1JKy27ghbEVYzwmpMWA0Iq447wpqEVY2wKhciLsIqS1glcxAXYRXORFyElZewcqYkLsLKTFgZCCstYaUirOSElYSwEnxIXIQVi7Ai2qT38CGiICpiIA7iIxGSISXSID0yIStyIDfyoxCKogRKozwqoQpqoDbqoRGaoiXaoD06oSt6oA++xkAMwXCMwreYgMmYhpmYjXlYhKVYgTX4ERuwGduxC3vJ5AB+xhEcw0n8inO4GP5Tr\/WnSLxFXLc4" + "103\/v\/kvEnvg+ceOeYaXPv7HcyGvhd8Q1Suiei4CnxDVI251n1vd5VZ\/cqsb3Oq6GLwiBi+KweCHFH8Vg8GPWB\/TXx3RuB\/UuO\/XX+3RuO9YqpknrOAd4NbN1swT1qqpmvnJmnnCCt7iee4od4qENZ2wpgwMhycS1rje7hR7EBdhDf0qHB7UPhzuT1h9WoTDPQmrG2F1qhf+l1+Q3bZ6ONyyCnERVuNy4XB9wqpDWDWLhMNVCasyYZXPHQ6XIay" + "ShFWUsAoTVoHPwuE8hJWTsLImIi7CyhA7HE5DWKkIK\/nH4XBiwkpAWHEiElbo5rF3bdSH+BhREQOxER+JkAwp8RnSIROyIAdyIx8KoQhKoDTKoRKqoDpqox4aoilaoDXa4yt0QQ\/0Rj8MxDcYhlEYi\/GYjKmYobCzMA8LsQTLsRprsR6bsBU7sAf7cRCH8QtfOo5TOIPzpHQRl3VaV3CNvG7487bn\/vLRIzzBc7zy3BuvhUPi7x9OFXzX3zOi+l" + "tv9VBv9Zfe6g63usWt\/uBW18TgZTF4gVud5VanxeAJMfiL\/uqQ\/uonMbhPf7Vb475d476FsDbqr9a5I1xDWCs17svG67cIa747wjnDNPPfaOYJ67t+mnnC+pawRnfRzBPWkHbE1dqdImH1IayeDcPhroTVqRZxEVYbwmpZ0Z0iYTUirPrFw+HahFWDsKrkC4crEVb57MSVJRwuQVhF04XDhQgrP2HlSRoO5yCsrPGIi7DSE1aaT8PhlISVjLASv" + "xsOxY94jLCuj3\/XJn2Aj\/EpYiA24iERkiIFPkM6ZEQWZEdu5ENBFEFxlEI5VMSXqI5aqIuGaILmaI12+Apd0B290A8DMBjDMBJjMA6TMAXTMQtzsQCLsQwr8QPWYSO2YDt2EcpeHMDPOIJjOEFCp3CGV53HRbK6RF5X\/fmH\/\/\/ptbuOe4DHeIoXnnvttZDjwm+I6jVRvSCqp0T1mKgenBCJ3Oq23uomt\/qdW13lVpfcDQZvBHFGDJ4Sg8fF4FEx" + "eEgMHhCDe\/VXu\/RX28TgZv3VBv3VWo37Gv1V8Eb0SzXuiwhrnsZ9tjvCmQM08\/qrye4IJ3TXzBPWKHeEwwnrG437wObE1UQzT1jBr\/HvSlhfEVb7L4mLsFqUJa5SmnnCqvcFcRV0p0hYVXIRF2GVI6zSGYmLsIqkJq4UxEVYuRMSF2FlIaxM0YmLsD4jrJQfEBdhJYo4nrCuENZVwroajoxPER2xEQ8JkRQpkBrpkBGfIztyIS8K4gsUQymURUV" + "8iWqoibpogMZojlZoi47ojG7ohb7oj8EYihEYjXGYiO8wDTMxB\/OxiBCWYgVWYy02YBO2Yid2Yx8x\/IRDOIJjZHQCp7TwZ8jqHC7477I\/r3v+po\/u4C\/nPsITHwdfoHjptX8cw4a4lvh7SVTPiOoJUT0iqvsi8C63Cn50+obe6jq3usKtfuNW57jVr9zqJLcK3tntiBj8WQzuF4N79Fc7xeA2MbhJf7Vef7VWDK7SXy3XXy3RuC8Ug\/P0V7M07j" + "MIa6r+apLGfbw7wrH6q5Ea9+AXX39DWAPcEfZrQFyE1b2mO8VqxOWOsF0Fd4qE1YKwmhQjLsKqR1i18hIXYX1JWBU\/Jy7CKpXWnSJhFSGsgkncKRJWbsLKHou4CCsTYaWLTFyElfKdcCgpYUUIXRz\/jk36AJHxCaIjFuIiIZIgOVIjLTLgc2RDLuRFARRGMZREGVRAZVRFTdRBfTRGM7REW3RAJ3RFT\/TB1xik2EMwHKMwFhMwGVMxA7MwDwuxB" + "MuxCj9gncJvxBZsxy7swX5iOIhDOMKnjpHTCZzSyv9KXuf8ecn\/r3nthmP+dM49PMBjPPXcC6+9dswbx4ZDeqrXRPWCqJ4S1WOiekhU90TgbRF4y53g79zqmt4qeC+kC9zqLLc67W7whBj8RQwe5lY\/cat9c0WiGNwhBreKwU36q3Vi8AcxuEp\/tUx\/tZiwFojBufqr7zXu08XgFP3VRI37OMIao78aqXEf6o5wMGEN0Lj3dUfYi7C6a9w7E1ZH" + "wmrnjrBVSXeKhNXEHWGDAu4UCauWO8Jq2YjLHWHFDJp5wipFWMWSu1MkrIIJNPNx3SkSVnbC+vyTcDgjYaV7350iYaWMEAjrAo2dD7+Pj\/AJoiEW4iIBkiA5UiENMiAzsiEn8qAACqMoSqAMyqMSqqIGaqM+GqEpWqIN2uMrdEEP9EY\/DMA3GIaRGIPxmIQpmI7vMQfzFXkRlmIFVmMt1mOT4m\/FDuzCXuI5gIM4REpH3B8ew3HSOqWlP+vji56" + "\/4vXf\/e2WMe7gLwRfoPjbc8+89tIx\/zg25JzwGz3VK6J6TlRPiOoRUd0nqrsiMHh7mhsi8Dq3usKtfuNW57lV8P6Tp7jVcW51lFsd4lYHxOBeMbhLDG4Xg5vF4EYx+KMYXCMGV+qvlumvFonB+fqrOfqrmYQ1TQx+p7+aqHEPfj3\/aP3VCP3VEI37IP1Vf417H3eEPQmrm8a9szvCDoTVVuPeyh1hM8JqrHFv4I6wDmHV1LhXI6zKhFXBHWGZVJ" + "p5wirmjvALwipAWHljauajuVMkrM8\/0swTVlrCyhzhY8I6lTKSTXoPHyEKoiEm4iABEiMZUiEN0iMTsiIHciM\/CqEISqA0yqESqqA6aqMeGqIJWqA12qEjuqA7eqEv+mMwhmKEIo7Gt5iA7zANMzEb87AQS7BcsVfhB\/yIDdhMMluxA7sJYS\/286mDOERSR0jrF\/+d8OcZ\/7\/g9cuOvebcG\/gTd\/EAj\/DUa88d88q5b5wTDmnUX+upXhLVM6L6m" + "6geEtVfIvCOCLxFVME7tl1zJxi83+RFvdU5bvUrtzrJrY5p2oM3lP9ZDB4Qg3u41U5utU0MbhaD68Vg8PvuVnOrFWJwiRhcKAbn6a+CX2g9UwwGv45\/sv5qgsZ9rBgcpb8arr8aIgYH6q++1l\/10bj30F911bh30rh3IKw2GveWGvdmhNVI417fHWEdwqqhca\/qjrASYZXXuJdxR1iSsIq6IywcR79FWHncEeaMQlyEldkdYYZI\/5uwLsSOFDp5" + "9z0b9SGiICpiIA7iIxGSISU+QzpkQhZkR27kQ0EUQXGUQjlUxJeohpqoiwZojGYK0wpt0QGd0Q090QdfYxC+wXCMwliMxyRMwXQi+B5zMB+LsBQrsFrRf8A6bFT8zdiGnQS0G3vDR4nriJ7riIb+sP8f\/heJnfb8Ocf95m9X8buxbuEOgq+APfRc8PX7Z4556djXzgmRZ\/iNRv2Vnuo5UT0lqkdE9YCo7onA20R1k6h+F4FXReAlorpAVGe51Wl" + "udYJb\/cKtDnGrg9xqP7cKfkPUDjG4VQxuEoPruNUP3GqVGFwuBoNfYL1AfzVXDM4SgzPE4BT91ST91XgxOEYMjtRfDSOsb8TgQP1VP417b8Lqob\/qor\/6SuPeXn\/VWn\/VQuPeVH\/VUH9VT+Nem7BqaNyruCOsRFjlNe6l3RGWIKwiGvdC7gjzE1ZujXsOd4RZ3wuHMkW8HkoV4T+8g3LE0PHD79qoD23Ux\/gUMRAb8ZAISZECqZEOGfE5siMX8q" + "IAvkAxlERZVEBlVEVN1EF9NEIztEQbtMdX6IIe6I1+GIDBGEoIIzEG4zAR32EaZmIW5iryAizGMqzAGkVfi3XYSDhbsI0IdmAXOe3hWftI6wAO+fiY50766Kzjgg7ssjGu44bx\/8RdH9\/HI689cUzwL5CvnPPGuaxGI69RD97T6Jn4+5uoHhLVfaK6S1R\/EtUNERi85fIVEfibO8Hz3OqM3uqU3ir4nSpH9VY\/c6sD3Govt9rFrbZzqy3caoO7w" + "XXuBteIwZVicJkYXCwG54vBOWLwezE4XQx+p7+aKAbHicEx+qsR+quhYnCwGBygv+qrv+pFWN31V130Vx0Jq53+qrX+qjlhNdFfNdS419W419JfVddffalxr0hY5TTupTTuxQmriP6qkMY9H2Hl1rhnd0eYJeLbNwXxiBg6svJdG\/UBIuNTREcsxENCJEFypEZaZMDnyIacyIMCKIyiKIEyKI9KqIoaqI16aIgmaIHWCtQOHdEZ3dALfdEfgzAE" + "wzEKYzFeQSdhCqbje8zBPEVeiCVYjpUKvgZrCWcdNmIzAWzlVTuwi6x28659+Nnfj3rthGN+dc55z\/xmzKv4HTdxG395\/iEeO+apY18457VzQ8YIh7jUa6J6oad6Kv6C95F8QFTBu+DeIapbIvCPlSKRqC4vEYki8JwI\/JVbnRSBx7jVEW4V\/B67\/dxqD7faya22ado3i8ENYnAtt1rNrVZwq6XuBheJwflicLYYnCkGp4nB78TgBDH4rf5qtP5" + "qhBgcIgYH6a\/666\/6iMGeYrCb\/qqz\/qqjGGyrv2qlv2pOWI31Vw30V3UJq6b+qpr+6kuNewXCKqu\/KqVxL0ZYX+ivCmrc8xJWLv1V9giT38rKI\/RTiXds1PuIjE8QDTERFwmQGMmQCmmQHpmRFTmQG\/lRCEVQHKVtfDlUxJeohlqoiwZojGZohbbogE7oih7ojX4KNwCDMRQjMBrfYgImK+pUzMD3mIv5irwQS7GcZFZijaKvxToetRGbyWkrWW" + "0XjMF\/e338k+eO+OiY408596yxLiL4AsU13MCfuOu5+3jkmCeODb5\/4qVz\/zGG7OJaXOoVUT0jqidE9Yio7hPVXU51m6huiMDrIvAqUf0mAs8T1VkReIpbBb+37hdudYhb\/cSt9nGr3dxqB7fayq02cat13OoHbrWKWy0Xg0vE4EIxOFcMzuJWM8TgVDE4SQxOEINj9VejxOBwMThEDA7UX30tBvuIwR76q676q05isL3+qo3+qqX+qhlhNdJf1" + "ddf1SGsmvqrqvqryhr3CvqrMvqrkhr3YoRVWH9VQOOel7ByRvg\/vKNfaF+RSKH9ofds1EeIgqiIgTiIj0RIhpT4DOmRCVmQHbmRDwXxBYqhFMqiAiqjKmqiDuqjEZqiBdooUDt8hS7ojl7oi\/4YhCEYroijMBbjMRHfYRqxzMRszMUChV6EpYq9HCuJZw3WKvw6ctqATUJxC3ltxx7\/P\/A2IIMO7KRnfsV5Y\/+Gq\/gdN3Eb97z2AI8d+9S4L5wb" + "fAfYG2OFQ1u4lru\/F0T1lKj+JqqHnOovorpDVLeI6g991TUReFkEXhSB54jq12lc6zuu5U7wiDvBn90JHuBWe7nVLm61nVtt0bRv1LT\/qGlfo2lfKQaXcavF3GoBt5rjbvB7MThdDE4Rg5O41Tj91RgxOFIMDhODg8XgADHYTwz2FoPd9VddCOsrMdhef9Vaf9VCf9VUf9VQf1VPf1VbDNbQX1XRX1UirPL6qzL6qxIa96L6q8L6q\/yR3oRyR0j" + "3VlX\/4RExvOfhezbqQ3yMTxEDsREPiZAUKZAa6ZARnyMbciIvCqAwiqIEyqC8za+EKqiOWqiHhmiC5miFtuiATuiKHorcG\/0wAIMxFCMwWjG\/xXhMwhSFnY6ZmKXA87AAi4hnKZYr+EoyWo0f+NWPZLWedwX\/bfPxLs\/vc8xBfztijOM4bdzgCxTBV8Au4xr+wJ+447Xgn7iD758IvkHnmXNfGuMfY4WMGX6znmu5+3uuUX\/CqR4R1QOiukdUt4" + "nqJlH9TlRXieqSCLwgAs8S1WkReEIE\/iICD3Org9xqP7faw612cqtt3Gozt9rArdZyq9XcagW3WsqtFmna54nBOWJwJreaxq2+41YTxeC3YnC0GBzBrYaKwcFisL8Y7CsGe+mvuonBzmKwoxhsp79qLQabi8Em+quG+qu6YrCWGKyuv6qiv6ooBsvpr0rrr4oTVhH9VcGI\/5c3tw0eoZ293rVZHyAyPkV0xEJcJEASJEcqpEEGm5oZWZEDeZAfh" + "VAExVEaZVERX6IaaqIO6qMRmhFAS7RGe3yFLuiOXuiDrxVvIL7BMIzEaIxT0AmYjCkKOx0zMZt45mGBQi\/CUsVezqdWYDVJreFba8lrgz+3+PtOr+91XNCBBS3+L8Y7afwzOI\/frOEqfvfxTdzGPcc8cOxj5zxx7nNjvDLWG2OGQ1zqNZd66e7vmUb9bz3VQ6L6i6juENWf+qobs0UiUV0hqt\/0VedF4BkReEoEHieq4NflH3In+JM7wX3uBHfr" + "rXborbbqrTZyq\/V6qx+41SputZxbLRGDC7nVPG41i1vN0LRP5VaTxeB4MfitGBzFrYaLwSFicJAY\/FoM9uFWPcVgVzHYSQx2EINtCaulGGwmBhvrrxoQVl0xWFN\/VU1\/9SVhVRSDZfVXpfRXxcVg0QhfvVXT\/+ER2tbsHZv1Pj5CFERDTMRBfCRGMqTEZzY1PTIhC7IjF\/KhIL5AMZREGZRHZVRFDdRGPUVpiCZojlZoiw7ohK4K1gO90Q8DMEg" + "Bh2A4RmGMYo7DREwmk6mYjpkKPBvzFHkBAS3EElJaxq9WkNUq8lrzLxIL\/GstyazjkeuF8gbd4UZN\/CZN\/CautZlrbeZaW7jWFq61mWttDt\/y2h0E36Dz0DnBtxc+M8ZLY702ZsjY4TdE9YpLvSCqpxr1x3qqB0QV\/P6520R1k6j+IKqrRHWZqIJfMH1OBP4qAk+KwGMi8IgI\/FkEHhCBe0XgLm61jVtt5lYbuNWP3GoNt1rJrZZxq8XcaoGmfY" + "6m\/XsxON3d4BQxOIlbjdO0jykjEsXgMDH4jRgcIAb7uRvsLQZ7iMGuYvArMdheDLYRgy3FYFP9VSP9VX0xWEcM1tBfVdVfVRaD5fVXZfRXJQmrWIQGb9X0f35EslHv4UNEQVTEQGzERyIkRQqkRlpkxOfIhpzIgwIojKIogdI2vxwq4ktUQ03UQX00RjO0UKDWaIeO6Ixu6KlofdAPAzFYAYdiBEYRzFiMx0RFnYypCjsdM0lnFuYq8nxSWojFA" + "nEpaS3332p\/\/ui5TT7a5vhdzt3nmeD+8TCOmeuk+c\/gPH5D8C+Qv3v+Bv50zF3cd84j5z4xV\/AN0q+MGfx4RzhEVP9wqZeLuRZR\/a1Rf0RU98XfXaL6k6huEFXwC6WvENUlojovAs8Q1WkReEIE\/iICD3OrgyJwP7faza12uBPcyq02cav13Gott1qtt1rBrZZyq4Xcaj63ms2tZnKradzqO241UQyOE4OjxeAIMTiUWw12NzhADPYVg73EYHcx" + "2JlbfSUG24nB1mKwhf6qqRhsKAbricHa+qsaYrCKGKwkBsvrr8pEevFWRv\/3R8TQuu\/ftWEf4GN8iuiIhbhIiCRIjlRIg\/TIbHOzIgdyIx8KogiKoxTKogIqoypqKEZt1ENDNEFztEJbReqATuiC7uil8H3xNQbiG0UcihEYrZhjMV5BJ2Iy8UzBdMWdiVlENIdXzSOpBXxrEXkt9ecq\/1\/7NiC3OH6HZ\/YY7wAOmeOoV48j+Pr9WVzEZVzz3B+" + "45ZjgO8D+MvcD5z42xlNjvTDma2OHzBMOib7XXOqF6Hvq7i\/4LZkPiOovorpDVLeI6g+iukZUl4nqogg8R1S\/EtVJEXicqI6KwJ+51QEN+z4RuEvDvv0rjXx7kdjGXSK3+oFbreJWy7nVEm61kFvN5VazuNUMTftUTftkMTiBW33LrUZxq+HcaogYHCQG+4vBPmKwJ7fq5m6wsxjsIAbbisFWYrC5GGwsBhuIwbpisBZhVReDX4rBivqrchFnvp" + "XR\/8MjtLbOOzbsfXyET2xcNMREHMRHYiRDSnyGdMiELMiOXMiLAiiMoja+BEqjHCriS1RDTdRBfYVphKZogdZoh46K1Qld0QO9Fa4v+mOQAn6DYRipkKMxlnjGY6KiTsZU4pmuuDMwi5zm8Ky5pLWAfy3x8QrPrfHResdudt52Y+z2bPAFioPmO4xj1nESZ3AevyH4\/onrXruBPx171zn3nfvIGE+M9cx8L439jzlYB9fiUi+J6vn3Gnl3f4+I6" + "j5R3SWq20R1k6h+J6qrRHVJX3VBX3WWqE6LwBMi8BeiOiwCD4rA\/SJwjwjcKQK3cavN3GoDt\/qRW63hViu51TJutZhbzedWc7jV99xqOreawq0mcavx3GqMpn2kpn2YGPyGWw3kVv24Ve+MIlEMdhWDncRgBzHYRgy2FIPNxGBjMVhfDNYRgzXFYDUxWPkdrhXhP\/5r5SKEl8WLFFr17D0b9iE+RlTEQGzEQ0IkRQqkRlpksLmZkRU5kAf5UQhF" + "UBylUBYVFKEyqqIGaqMeGqKx4jRDS7RBe3ylWJ3RDT3QW+H6oT8GEcUQDFPIkRitmGMxXkEnYjIJTVHYabxqBkl9T1qzMQ+L\/H+511Y77kd\/2+j8rcbaadw95jmAQ444iuAfiE7jLC7gkueuIvgOsJu47Zx7zn1gjMfGemreF8YOfkDtjbnCIS71mku9IKqn00Siu7+HRPUXUd0hqltE9QdRXSeqK0T1m77qPFGdIapTIvA4UR0lqkMi8CcRuE8" + "E7uZWO7jVVg37pmYisbFIdCe42p3gCm61lFstdCc4j1vN5lYzudU0bvUdt5rIrcZxq9FicAS3GsqtBnOrAZr2vmKwlxjsLga7cKuO3Kq9GGwtBluIwaZisFFUkSgGa4vBGmKwSqS\/w9UjvP9WRf\/Pj4ihZXvetWkfIDI+tXHREQtxkQCJkQwpkQbpkQlZkB25kNdmF0BhFEUJlEY5VMSXClENNVEH9dEITRSnOVqhLdor1Ffogm7oSQh90E\/x+m" + "MwhijiMIxUyNEENBbjFHQCGU3Cd\/xqKllNF4zBf4HEFnp+qWNW+tsPzl1vnM2eDb5AEXwFbL+5D1rPYRzDSQT\/xH0ewTfoXPH6ddxw7J+449z7xnhorODnh54Z+6U5XpsrRNbhN1zq1VSuRVRPJnEtd38PiOoeUd0mqptE9TtRXSWqy0R1kajOEdWv+qqT+qpjRHVEBP4sAg8Q1V4N+y4RuF0EbhGBG0XgOhH4A7daxa2WcavF3GoBt5rLrWZxq" + "xncaiq3msytJnCrb7nVKE37cE37EE37IDHYn1v15VY9uVU3btWZW3UUg23FYCsx2JxbNXE32FAM1hODtcRg9Yj\/iV\/dGzxCi\/X3i8XhYnG4WBO\/mGstFoeLxeFicbhYE7+Yay3mWou51iKutYhrLeJai7jWIk38Iq61iGst4lqL3CEu5FoLudZCd4gL3SEuDFdCFVRXjFqoiwZojKaK0wKt0Q4dCKYTuqK7ovVEH4XrhwGKNxhDiGcYRijkKIwh" + "oHEKOp6cJvKsyaQ1BTMw23MLvL7EcUEHtsYz64y1yfjbsNOcex1xAIes8SiO4zTO4gIuee0qfnds8A3St3HPGA+M9diYT4z93ByvzBX8\/HY4JPr+4VIvudSz8VzrW67l7u++Rv2unupPorpBVNeJ6soArkVU54nqDFGd1ledIKpfiOqwCDxIVPuJao8I3CkCt4nAzSJwA7daW0skVheJ3GqpO8FF7gTnuxOcU0okcqvp3GqKpn2S3mo8txrDrUZ" + "yq2Hc6htuNZBbfc2t+mjae2jauyYSiWKwA7dqw61acqtmYrCxGGwgBjVPoVr\/x6+2\/8ceofmJIoUWPHnPpn2Ij\/GpzYuO2IiHhEiC5EiFNEiPTMiC7DY5F\/KiAAqjKEqgNFGUQ0VURlXUQG1FqYcGaIJmCtQSbdBOoTqgM7oqWHf0RB+F64f+5DJIAb\/BUCIaoZCjMJqUvuVX48lqAu+ajEBiszw\/z0eLHL\/MuauMsdZ4G7wSfAVsh\/l3Y791Hc" + "RhRx\/DSQTfoHPOcxdxxTHX8Idzbjn3jjH+MtZDYwY\/\/fjMGl6Y67U5Q+YOv+FSr7jUCy71lEs9JqoHRHVPo35HT3WLqP7gVNeI6jJRXSSqc0T1q77qpL7qGFEd0Vcd0lcdIKq9InC3CNwuArdyq00icL0I\/EHDvkoELheBS0TgQm41j1vN5lYzudU0bvUdt5rIrb7lVqO51QhuNVTTPljTPkDT3k8M9uJW3blVF271Fbdqp2lvo2lvIQabisFGY" + "rBexBvhhhGi\/Qfx\/Kce4bkD3rFhHyAyPkE0xEQcxEciJLWhKZAaaZERmZEVOZAb+Wx4QXyBYiiJMiivCJVQBdVQE3UUpT4aooniNEdLtFGkduiITgTRFd0VrSf6KFw\/9CegQQr4DYYq4nA+NZKcRpPVWN4V\/DfJx1M9N9NHcx230HlBi7\/SeMEXKNaZa5NXt2Gn9ey1zgM4hKM4jlM4iwu45JjgG6R\/xw3n3jbGXWPdN2bwE5BPzBH8\/PYrc\/5j" + "blXkWlzqJVE9E31PhotEorpPVHeJ6k+iukFUvxPVVaK6RFQXiOosUZ3WV50gql+I6rC+6qAI3E9Ue0TgTqLaJgI3i8ANIvBHbrVGBK7kVsu41WK91QJuNZdbzdJbzeBWU7nVZG41nluN5VajuNVwbjWEWw3iVv25VV9u1ZNbddO0d9a0dxSD7cRgK27VnFs14VYNInR6q5r\/jEdodv5IoZmh92zchzbtY0RFDMRGPCREEiRHKqSxsemRCVmQHbm" + "QF\/lR2KYXQXGUQllUUIRKqIrqqKUgdVEfjRSmKZqjJdG0QXuF6ojO6Kpg3dGTgPooXD\/0V7yBBDRYAYdgGEmNEIqjyGssJvj\/lLcBOdvf5jt\/sbGWG3u1V34070ZssZbgH4h2Yz8OOuMwjuEkfvXcOVzEZcdec84fuGWMO8b6y5gPrOuxOZ6a64W1vDZ3yBrCIS71mku9EH1PRd\/jwSJxoEaeqO4Q1S2i+oOorhHVZaK6SFTnieqMvuqUZv04UR" + "0lqkP6qp9E4D4RuFsE7iCqrSJwE1GtF4FrudVqbrVCBC4tLhKLiEQROEfD\/j23mu5OcIo7wYncahy3GqO3GsmthnGrb7jVQE17P27VW9PeQwx25VaduFUHbtWWW7XkVk0jvQo1iZDjrWr+8x4RQ9O2v2vTPkBkfIJoiIk4NjE+EiEpUiA10iIDMiOrTc6B3MiHgvgCRW18CZRGOVRUhMqoihqopdh10QCNFKcpmqOVIrVFe4XqiM4E0hXdFa2no" + "vVGXyL6WvEGktIgfvUNhvKu4L8xJDbe85N9NN2xs5w3zzPBPWTwBYpV5vsB6x2xybq2YZf17sUBBN+gcxTHcQpncd4xv+GKc64794Zx\/rTGu8a8b22PzPHEXM+s6aW5\/7GGkLWE33Cpl1zqOZd6QlSPvuZafUWiu7\/bRHWTqH4nqqtEdYmoLhDVWaI6ra86SVTHiOoIUf0sAg8Q1V591S4RuF0EbhGBG4lqnYb9BxG4SgQuF4FLROBCbjWPW83m" + "VjO41TRu9R23msCtvuVWo7nVCG41lFsN5lYDuFVfbtWLW3XnVl241Vea9vaa9taa9hYRN72Vy3\/BI\/xd9kg27D18iCiIihiIjXhIiCRIblNTIg3SISOyIJuNzok8yI9CKIJiNr8kyqA8KirEl6iGGgpSG\/XQQGEaoanitEAromiL9grVEZ0Uqwu6EVAPReutaH3Rj1f1J6mBfGsweQ3z5yh\/H+e1SW87sJnOn2OsBcZdYo4VXg2+xPqj9WzEFuv" + "cgd3O2I+DOIxfEHz\/6q9eO4eLjr2Ma879wxg3jXXbmPeM\/cAcj8311JwvzP3KGt5YSzjEpV4T1Asu9YxL\/U1UD4nqrx5cy93fnxr1G0R1naiuENVvRHWeqM4Q1SmiOk5UvxDVYRF4UF+1n6j2iMCd7gK3icDNInADUf0oAteIwJUicBlRLeZWC\/KIRG41i1tN\/5xrZdTIc6vx7gTHuhMcxa2Gc6sh3GqQ3qo\/t+rDrXpyq27cqjO36vieSIwUDr" + "WN8NlbtfwXPML9I0UMTdjxrk37AJHxic2LhpiIg\/hIhKRIgdQ2Ni0yIBOyIjty2ey8KIBCKGrji6MUyqC8IlTCl6imGDVRG\/UUpQEaEU5TtFCgVmijSO3QgWS+Uqwu6KZgPYioFyn14Vd9yepr94wDMeRf\/GuwmYa4iqG8ZrhAGyEOgy9QjOJao7nWGK41VhM\/lmt9G95s3cE\/ce\/CXhxwfYdw1MfHcQpncN6xvznnCq4b44ax\/jTmHWPfN8dDa" + "wze3uSZuV9aw2trCVlT+A2XekVQz0Xfk14ikageENU9orrt7u+mRv13PdU1orpMVBeJ6pw7wF+J6iRRHSOqo0T1swg8QFT7iGq3CNxBVFv1VZtE4DoRuFYErhaBKzTsS0XgIg37PA37HBH4vQicxq2+41YTudU4bjWGW43kVsO41WBuNZBbfc2tenOrHtyqK7fqxK06RFz9Vin\/FY\/QmFzvhMa+ec+mfYgoiIroiI14NjIBEiMZUuIzpLO5GfE5" + "siEHctvsfCiIwihq40ugFMqigiJUQhVUV\/iaqK0o9dBAYRqhqeI0R0sCaoN2CtVBob4in87oqmDdeVVPkurNt\/r6b4A\/v\/HccB+Ncex45wQt\/jTjfW\/suV5ZaM6l1hB8DX+Ntf1ovRux1Rk7sBv7cRCHEXyD9AmcdsxZXHDOJedexe\/GumnM28a+Z60PzPXInE\/MHbxB0ytreWNN4RBB\/cOlXoq+Z6Lvb9H3qLNIJKq7RPUnUd3QqF\/XU10lqku" + "c6gJRnSWq00R1gqh+IarD+qqDRLWfqPaIwJ36qm1EtUUEbhCBP4rAH7jVSqJaJgIXi8AFInCuCJzFrWZwq6ncajK3mpBMJLoTHM2tRnCroe4EB3Or\/tyqL7fqxa266606R3odah8h0VuV\/Nc9IoZGHnzXhn2AyPgE0RATcRAfCW1mEiRHKqRBepubCZ8jG3Iij83Oj4L4QmGLoQRKo6wiVEBlhaiC6qipILVRT1EaoBHxNFWc5mipQG0IqC3aK1" + "RHIurEq7qQVDe+1YO8er+VWOBfwxwzyjnfOneScaYad4Y5gq+AzTf\/Yix31CrrXIv1rmEztmGXa9yLA\/gZRz13HKdwxrHn8ZtzrxjjmvH+QPAGAXfM\/Je5Hprzbyt5ag0vrOW1NYWsLfyGS73mUi+41FPR91j0PRB999qKRKK6RVR\/ENU1orpMVBeJ6hxRnSGqU0R1nKiOatYP6at+Iqp9RLVbBO4gqq1EtUkErieqtfqq1SJwhQhcKgIXicD53" + "GpOeq6lYZ+uYZ8iAieJwPEJRSK3GsWthnOrIdxqILf6mlv14VY9uVXX\/xa3+t8e4eEFIoWGukMcxrWGuUMcFv7UBkZHLMRFAiRGUhuaEqmRFhmQ2QZnQXbkQh4FLYBC+MLGF0NJlFaAsqiIygpRBdUJoSZqK0o9NFCYRgrTFM2JqIUCtSaitmivUB3I6Sue1Zm0uvqvl4\/7eW6gj4Y6dqTzxnpmgrG+M+50c8zy6jzzL7Sepda30prXYB02Omsr" + "dmA39uMgDuMXnHDMaZzFBedeMsZVY\/1uzBvGvm2Ou+a6b85H1vvEGoK3l3tlTf9Ym1zhWlzqJZd6zqWeENUjorov+u624FpEdZOofieqq0R1iaguENVZojpNVCeJ6heiOkJUPxPVAaLaq6\/apa\/aTlRbROBGfdU6ovpBBK4SgctF4BJutVAEzhOBs0XgTBE4TQR+x60mcqtx3GoMtxrBrYZxq8HcagC36setekd6EeoRIetbdfy3PSKGB+96x6Z" + "9gMiIgmiIYRNjIx4SIgmS29SU+AzpkBGZbXJW5EAum50XBVAIRWx8cZS0+aVRTvErojKqKEZ1xaiJ2gpSDw0IqJHCNEEzxWlBRK0UqA2vakdSHfhWR\/Lq4s8e\/t\/3bUB+42\/DnT\/aWOOMO8krU80309xzrGOBoxZb63Ksdh1rsR6bXec2BN+\/uhcH8DOOeO0Ygh9QO+Occ7hojMvGumbMP4x9yxzB++fcM+cD635sDU+t5YU1vbbWN9YYDnGp1w" + "T1QvQ91U89JqqHRPVXM67VmGsR1Q2iuk5UV4jqN6I6T1RniOoUUR3XrB91B3iIqA4S1T6i2qOv2klU24hqswjcQFQ\/isA1InAlUS0TgYtF4AIROFcEzhKBM7jVVG41OZ5I1LB\/G4NrReVaUbgWtxr0vkh8JxzqG3HjW1n8KzxC\/XNFsmnv4UMb9zE+RXTERBwbGR+JkBTJbWoqpEF6ZLLBnyMbctro3MiLAja8MIqguKKXRBkFKIeKilAZVRSiO" + "moSUG0FqYv6BNNQYRorTFM0J6SW5NSarNryruC\/Tj7u7vnePvra8YOdN8wYo4wZfIFiormmeHWGdcyyrnnWuQhLHb0Sa1zXOmx0zVuxA7uxDz95Pvj5oV9wwrGncda5F4xzCVeNed3YN8zxp7numvO+uR9aw9\/W8syaXlrvP9YY8ukQfkNQr0Tfc9H3hEs90qTfJ6p7DTXy9blWXa5FVFeJ6hJRXSSqc0T1K1GdJKpjmvUjRPUzUR0gqr36qt2a" + "9R1EtVVftUkErieqtSJwNVGtIKqlInCRCJwvAucQ1fca9ukicIoInCgCx4nAMSJwJLcaxq2+cSc40J1g\/wiZ36riX+HxL3eIfSa+Y9Pex0eIYvM+RXTEQlwksJmJkRQpkNrGpkV6ZLLBWZANOW10buRDQeUvjCI2vjhK2vwyKKcAFVCZgKqgmmLUIJRaqKso9RWlAQE1Vpgm5NSMZ7UgrVZoh688181HvRwXdGADnT\/EOCOMOcb448052fzTEPw" + "D0RxHLrDmJVjuWla7xrVYj83Yhp3YiwP4GUdwzLEnnfMrzhnjorEuG\/Ma\/jDHTXPdNuc9cz+whsfW8tSanltb8Pa+b6w1HOJS\/3CpF1zqmej7m0s95FJ\/cam7RPVnLa5Vg2u5+7uiUf+NqM6Lv7NEdZqoThDVL0R1mKgOEtV+otqjr9pJVNuIaou+aoMIXKev+kFftYqolovAJSJwoQicJwJni8AZInCqCPxOBE4Qgd9yq9EfiURuNZRbDYo4+K" + "0i\/hUfod4JI4V63H\/Xxn2AyPjE5kVFTMRGPBuZEEmQDCmV9jOkRQYbnBlZkM1G50Qem50PBVHYphdBcZIoidIKUA4VFKESAX2JaopRQzFqEVEd1FOUBqTUiF81JqumvKsFAol19HwXr\/dwfB\/nDTDON54dbuzR5hvn1YmYYj0zrG+29c5z9CIsc20r8QPWEctGbMEO7Ebw80M\/ee0QjuK4c04heIOA88b6zZhXjH3dPDdcU\/AOYHfNHbx\/4UNrC" + "d599Zm1vbTG19YasubwGy71iks951JPudRjonpQh2txqdtEdZOo\/iCqa+7+LhPVRT3VOfF3hqhOEtVxojpKVIeI6iei2qev2k1UO4hqK1FtEoHriWqtvmq1CFxBVEtF4GKimk9Uc0TgLBE4XQROEYGTuNV4EThWwz5Kwz484vVw\/whR3qrhX\/kR6l4qUqirRr6rSOwqErtyrS76rS7E1UUkdhGJnUViZ+LqLBI7i8ROxNVJv9WJuL4irq+Iq6Nm" + "vqN+qyNxdSCuDsTVnrjaE1c74mpHXG2Jqw1xtSGu1sTVirhahasSUXXFqKkYtflUXXKqj4Z8qxF5NfNna\/9v7\/VOju3unKDFD+4fBxl3qFdGmm+suSdYy3eOmmad31v7XCxwTUuwnEBWYy3WG2UztmEn9nhuPw7iiGOP4aRzT+OcsS4a85Kxgzdo+t1cN81529z3rOGBtTyypifW9twaX1l78O734RCX+odLvSSoZ1zqb9H3iKjui767VbkWUd0" + "gqutEdZWoLhHVBaI6S1SnieoEUR1zB3iEqH4mqgP6qr2a9V1EtZ2otmjWN4rAdUT1g75qlQhcLgKX6KsWisB5InC2CJwpAqdxq+9E4EQROE7DPibS69CYCLnequDf5hEx1OnUOzbtfXyEKPjUBkZHLMS1kfGRCEmR3KamQhqks7kZkNkGZ0V25CKcPDY7HwqisE0vYtOLoyQBlUZZBShPLBUVobIiVEE1IqpBSrVIqg7fqkteDd9KrKXng4D8yt" + "+6OrenMfoZd6Dxh5hvhHnHOGKcNU2yxqnWPQOznTGfKBZhGVYSyRqsw0ZswXbsxj785JhDOOq84zhljDPGO4\/fjH3FHNfM9Yc5g\/cvDN4g8y9reWhNf1vbU2t8Ya2vrTlk7eE3BPWaS70QfU+51GMu9VA\/9Zfou6OfulWeaxHVNaK6TFS\/EdV5ojpDVKc41XGiOkpUh4jqJ6Lap6\/aQ1Q7iWobUW0WgRuI6keiWiMCV+qrlhHVYhG4QATOFYGzi" + "GqGCJwqAieLwAki8NsI+9+W\/9\/wEW4ROWKo\/dl3bdoHiIxPbF5UxEBsxLWRCZAYSW1oCqRW2DRIhww2+HNktcnZkctG50E+4imIwja9iE0vhhIEVMrml0V5BahARJUUoYogrEpO1VGTdwX\/1SexJp5v4aM2ju3onC6e6WG8Psbt75XB5h1mDaOs6VtHTcB31hx8\/8T3mEsQCwljCZYj+AbptViPzdiGndjjtf0Ifn77sHN+ce4JnDbWWWNewCVz" + "BG8v97s5b7q+P63hrrXct6ZH1vbEGp9b60tr\/sfaw64h\/A+XesmlnnOpJ0T1iEvd51J3ieq2fupmKY18Ca5FVJeI6gJRnSWqX4nqJFEdI6ojRPUzUR0gqr1EtYuothPVVs36JhG4jqjWEtVqEbiCqJYS1SIROF8EzhGB34vA6SJwigicGPF0eNl\/4rtD\/9UeoVZ1IoVavXrPpn2IyPjE5kVDDMRWwHhIgMQ2NBlSILWNTYN0NjcjPrfBWZEduQg" + "oj83OhwI2vBC+IKJiNr6EjS9FQGVQTgEqKEAlXlWZpKrwrWrkVdOf9fy\/kdeaO6a1v7V3bifjdPNsb+N\/bZ7gS6xDrGGEo8ZY33jrnWz9U50xE8F3gM3HIgJZhpVYg3XYiOAH1LZjF\/bhJ8cewlHnHjPOKZwx5jljXzTHZXNdM+cf5r5lDcHb+95zXQ+s7bE1PrXWF9Yc\/P6ON64hHOJSrwnqBZd6yqX+JqqHmvS\/uNQdorpFVDeKisQvNPKFuB" + "ZRnSeqM0R1iqhOENUvRHXYHeBBd4D7iWoPUe0kqm1EtVlftYGofiSqNfqqVfqq5US1WAQuJKp5RDVbBM4UgVMjPQ9NjlDubdX\/Oz1Czde+Y9Pex4f42OZ9imiIiTg2Mh4S2swkSIYUNjUV0ih2OmS0wZmR1SZnR04bnZt48qKADS9kw79AUSIqbuNL2vjSRFSWlMrzqwpkVUnnVQU1\/L+u5xv6qKljWzqvnTGCe8jgCxQ9zdPXqwPM\/421DLe2U" + "Y781tqD75\/4DtOJYRbmOnshlhDJcqzGWqzHJmzFTuxxzH4cdM5h\/GKMEzhtzLPGvmCO38x1xZzXzX3DGv60lrvWdN\/aHlpj8OsVnlnzS2v\/xzWEXEv4DZd6RVDPudQT0feYqB6IvnvFuRZR3SSq34nqWn6RmFcj7+7vnEb9V6I6SVTHOdURojpEVD8R1T6i2k1UO4hqq2Z9E1GtJ6q1RLVaX7WCqJaKwEX6qvlENVcEfi8Cp0eY9rba\/x0f4Rbv" + "RQw12v2OTfsAH9m4j\/EpotvAmIiD+DYyIZIQTTKkQCobm8bGpkMGZLbBWYgnG3La6Nw2Oi8KEFFBG16YiIqgmI0vYeNL8aoyJFVW11WevCr7s7r\/1\/ZaA8cFHVgL57cxVgdjdjZHd3P2NvfX1hL8A9FQ6xxp3WMVfjwmO2sqMczEbMwnjkVYhpVYQzDBD6gFPwG5BduxC3sdewA\/I3j\/nGPGOolfjX3OHBfNddmc18wdvL3vTau8bU33rO2BNT6" + "21qfW\/Nzag98+9Ma1hEME9Q9BvRB9z7jU31zqoej7S\/TdFX1\/atJvENV1orpCVL8R1QV3f2c16qeJ6oT4+4WoDhPVQaI6QFR7iWoXUW3XrG8hqo1EtY6oftBXrSKq5US1RF+1kKjmEdXsiOvdBb77ttr\/nR+hRjkjheo\/edemfYCPbFwUREV0xYyJuIhvMxMiiQ1NhhQ2NTXS2Nh0yEAWmW1wFmSzyTkJKBfy2Oz8NrsgERWy4UWIqCiKk1NJsi" + "pNXuX+RWLlnFXByBWtorKSfkkCVYVTNXFYXRwGX16tFe5lDf2sZ6D1DXHkcAUfjeAbdCYSwRRMd\/YszMVCAlmC5ViNtViPTdiKnY7ZjeDtTX5y7iEcNdZxY54y\/hnznMdv5rxi7uvWcMNagjcov2ttwa9XeGitwS+HeWbtL1zDa9cSck3hN1zqFZd6zqWecqnHXOoBl7pHVHdE303R94fou0ZUl4nqIlGdI6pfieoUUR0nqqNEdYiofiKqfUS1m" + "6h2aNa3uQPcRFQbiOpHfdUazfpKolqmr1qsr1oQ8Ulo7n\/hN\/D9qz9CdfNECtX6+12b9oFNi4woiEow0RHLJsZFfBuZEElsZjKkIJxUSGNj0yGDzc1MIlmQzSbnsMm5CCgP8tnsAoRU0IZ\/QU5FeFYx0irhvzI+rui5Kl6v4bi6zmvomabGaWnctl7paL4u5u5hHX2sLfgXyMHWO1SxRyr6WGeNx2RimIbgG6TnYD4WYRmxrMQa\/Ijg57e3YDt2" + "Ya9zDuBnYxxB8PZyJ439qznOmuuClV0yd\/D+0b9by01rum1t96zxvrU+suYn1v7cNbxyLf+4pnCIS\/3DpV5yqWdc6m+CeqSfus+l7hLVn0R1I4dIFH1XieoSUV0gqrNE9StRnSCqY0R1hKh+JqoDRLWXqHYR1XbN+hai2khU64lqrb5qNVGtIKolke6HlkTI+La6\/y8\/QtVnRLJp79m0DxHZxkVBVMSwgbEQl3DiI6HNTIJkNjSFDU2FNMSTDul" + "tbiab+zmykkx2m5zTJucmorxElB8FSaoQ3\/oCxVHa38t7vrLjqvtbbefWN04Tz7YwRxtzdfBqZ2vobj29re9rax3o6CEKPkLhg+8AG0cEkzDFCNMxizjmYiGCH1BbjlX4AeuxCVuxw7G7sc+5P+GQsY7iuLFPmeOMuYK39\/3N3Fes4Zq1\/GFNt6wt+P0df1nrQ2t+bO1PXecL1\/LaNb1xbeE3XOo1l3pBVE9F32Oieij6\/uJSd\/RTt4jqD036tU" + "wiMb1IJKrzRHWGqE4R1XGiOkpUh4nqIFHtJ6o9RLVTs75N\/G0mqg1E9aO+6of3uFakcGh5hH+Dr67\/1z7CESJGCFVe+I5Ne8+mfYjINi4KohJODMSyiXER30YmRBKbmQwpCCiVTf0MaYkjvc3NZHMzIwvpZLPJOWxyLj6Vh5zy6bjyk1bwX1Efl\/RcOR9Vcmw159QyRj1jNTJuM+O3Mmc7839lLV0d1dMa+ypw8P0TgxV8GEY5cywRTEDwDdLTM" + "BNzCGQ+FmEZViL4+e0fscHrm7ENu5y3Fwfws7EOG\/MXnDDHaXOdNecFc1+yhqvWEvx6hZvW9qc13rXW+67ikbU\/ca3PXctL1\/SPawv7NAr\/Q1CvRN9zLvWESz3iUvdF310udZtL3dSk\/05UV9Nyrc+4VkqRSFS\/EtVJojpGVEeI6meiOkBU+4hqN6faQVRbiWoTUa0nKrdioTURvntb0f+xHhFD5aa8Y9Pes2kfIrKNi4KoiGEDYyl6HMSzkQmR" + "2GYmJYjkSGlTP7OpaZGOiDLa3Mw293MCyobswjAnSeVGXvIqgCL+X8JrZR1X0fFVnFvDOHU828D4Tc3V0txtHRH8A1FnIuuusL0d\/TUGKXbwHWAjFD\/4\/tVxRpiEKUQxHbMQ\/IDaQizBcqzCD1iPTQjeP2eHc4J3\/9pnjJ+MdwhHjX3cHCdxxpznzH3RGi5byzV78Ye13bLG29Z6z5ofWPtj1\/DUtbxwTcGvF33jGsMhLvWaS73gUs+41N9c6iG" + "X+ouo7hDVn1zqBpe6TlRXiOq35FwrKddKpJF393dCo\/4LUR0mqoNEtZ+o9hDVLqLaTlRbiGojUa0P3vT\/f9RHuPo7EUOl3KiWIq6SxFWSuEoQVwniKq7nKq6hL0ZcRYmraDgBaSS2mUmR3IamtKGpfZamQTobm4GIMtnczKSUlV9lI6scvCv4L5BYYc8X91Fpx5Z3bmXPVDdW8AWK+uZp7NXm5m5tHe2tqRORdVPYXuiryAOc9Y2iD8MoAhiLCQ" + "QxGcHPD8004hzMxyIsRfAGAWvwIzY4ZjO2Yadz9yB4\/8KDOGzsX8xxwlyncdYqL1jDb9ZyxZquW9sNa\/zTWu9ac\/D70x667uC3Pz5zzS9d2z+uMeTTKfyGS73iUs+51FOCeiz6Huin7hHVbaK6mVokcqlrRHWZqC4S1Tmi+pWoTrr7O65RP6qn+v+1d5\/RUpTZGse7G5CcBSQKShIRkSAYBgczRlRUFFFEFBFFJIgwhIsgQxDJIjmIBEFykAySJ" + "MeD5HDIOWeovr\/y8mHWXWu+3GuAkWL94Zzuqvfdez9P77fo06dqieVvEVPNZ6q5TDWbqaYz1Y\/RdvFw1bmmNwFGg4eHJlGwZEjBPKkULg3SK15GZGaCrIp4C3IoZC7myIO8CnqbguZnooKKWpiBiqAoO92F4vrWPexV2r\/3+76c5x623xOOedrxzxvrJWO+ao4q5qtm7hr2eJ+AtQn5MUHrE7aRI\/5B6OaM9jnCz6+2Q0ejdEZ3puiJ3gh\/A3IQ" + "owzBcIzEaI+Nw0RMwXTHzMIcY8zHImMuxjJzrDTXGnMmmHuDGDaLZZuYdoptlxj3yuKAmA+L\/ZgcTsrltJzOye2iHMO7b8cDXeqyLnWBoc7qUqcsfcctfUd1qUPOp\/Yz1R5LX2IeXYuptjLVJqb6hanWMdVqplqhUy1lqsVMtZCp5iWLB3OSBMHMaPdr31T\/skWDcn2SKFgypFC0VEijcOlZIiMyK2AWBsqG7AqZSyFzs8ytyKegtzNPAUUtxEp" + "3sNSdFsWietfdCC1W1uMP2qe87x5zbAVjPGfMF439inleN++bRKvOZO8R8AN71iFoPcKGH9Bp7Khm+C+ityZ+W3RghE7oih5G7IW+GMAs32IoRmCUx8ZgAibbdypmYLYxfsICY\/5s7KVYYa7V5lxr7vD2ChvFskVM28WWKMY9Yg3vn3ZQ7EfkcFwup+R0Vm7n5XhJroGc41cY6pIudV6XOqNLndSljln6DutSB3Wpfc6ndjuf2ul8als2XYupNj" + "LVeqZay1SrmGo5Uy1hqkU61QKdak60+1W5rqPt12XxPua6j7nKMldZ5irDXPfG0yEDA2VSwCzIpojZmSinQuZWyDzskxe36VP5UZClCutd4Z9iLFbCY2V89YB9H3LMo45\/0jjPGLeiZyqZq7J5qxIs\/AFR+BPI9wn5ob3rErYBGhH5H8RuQfTwA9JtjNIOHZmhM7ozR0\/0Rvj724MwBMMwEqMxzn4TMQXTHDsTc4w1DwuNHV4\/epm5wqvfrzF3g" + "hg2iGWTmLaKLby91S6x7hXzAfU4JIejcgnvX3tabuHdty\/I9bKc415e8cu61AVd6qwudVqXOqFLHdWlDjHVAV1qD1PtYqodzqe2Op\/alEHXsvwlMNUaplrJVMuYajFTLbgelr9\/t8UjsWhQyrJYirlKxpMjJVukVrh0yKB4mRjoZgXMilsUMQcT5VLIPEyUVzHzsdTt+lYB9irs37v8fY\/nStvvft+Vc9zDxnnco08b+3lzhW+xvspkVYj2FvHe" + "sWdNNvyAoHUQfgLsU0c2JnYztCR8ayZoiw4If0GtK3qgF5P0xQB8i6EYgVGeG4PxmOyYHxFeIHM2wsv7zscicywx13JzrjJ\/eP+O9QjvPrSFmbaJcadYd4t5n9jD24sekctxOZ2U2xl1OK8Gl+QcyD8e6FKXdKnzutQZXeokUx239B1hqoOWvn1O0ncz1U6m2s5UW5hqY2pdK6WuldySyFQrmGpptMv1a6p\/3YLiA2IMlFTBkiOloqVmjLQKlx4" + "ZGSWzAmZRwGzMkx05WSk38uhZefWu8E8hX9\/pseK+KmXfso77m0fKGy98g6KCOZ4lzgtEepmJX7NX+BPItwn4LiFrOeIjRvuEuA0I\/RnCD0i3MMrnaMMI7dERnRmjO3qiN\/pjEIZgGL7HDxhn34mYgmnGmIk5xpxn7IVYbK5l5lxh7tViWCeWX8S0SWxbxbhDrLvEvEfs++VwSC5H5RTefTu8vftZuV6Q82Uvr7gaxC\/rUhcZ6pwuddrSd0KXOq" + "pLHbb0HbD07bX07bL07UirazHVZqbawFQJSXWtWDxYeY2+pfB\/2iyLkaBo+1hQ5GxSBroJKRQtlaKlRTqvxgyKl4lxblbArAp4i16Vg6VyOuvKzV75\/FvQ30U8V8x+4RlYGcc+YJyHPPooMZ5k1mc8W5FI4Q+IKhPsDcJVs\/c7hKxJ0PATYB87sj4+JXYTojdDSwZojbZG7IBO6MogPdALfTEA4fVzhiK8+tco+4zBeExy7I+YbqxZmGvs+eZYZ" + "L4lWG7uVWII7z6UIKYNYtssxm1i3clMu8W+Tw4H1OawnI7J7aQcz8j1nJwvyv2KGsQDhrrEUOd1qbO61Cld6rgudUSXOqhL7del9jBVoqVvu6Vvy02WxKTxYH3saLDuWnrz87fcggJlokGBK0kU6yakYKJUipZG0dIxUXpkYqLMyMJO2SyK2dkr568Wy+WIPMp+KxnykeU2UuUnZQG9opAFqbDl8A6n1kWcxBd1En+Xk\/hiTuLvdhJf3El8+Omv" + "ErpWCV2rpK5VStcqrWuVjjclfAu0YoQ2aM8UHdEZ3dGTUXqjHwZhiMeG4XuE1y8c65gJmGyMaZhpzNn4yRzh7RV+NudSrBDDarGsE9MvYtskxi3MtF3MiWLfI4f9Xj6H5BTe3v24HE\/J9aycL8j9shoEahG\/oktd1KXO6VJndKmTutQxXeowUx1wPrWXqXYz1U6m2mbp2xw9Hay\/Vn5M83ttwW2lokHeGUkUKxmSK1hKJkqtaGlZKJ3CZWSnTHr" + "WzayV1Z8c\/s3jsds9X+jqGVhxx5ZS9LKK\/zfP\/J0YjxGlgj2eJdALxHrZnq\/hDQJWI2QNvE\/UDx39MZHr41OCNyF+M7REa6O2RQfG6ISu6IFe6IsBGIzvMAKj7DsG4x07CT9iujHDq9\/PxXxzLTJneIOY5VgpljViSsAGZtos1m1i3iH2XXLYK5cDcjost2NyPCnX03I+pwoX1eCKWsQDXeqyLnVBlzqrS51iqBO61FFL3yFL335L3x7nU4lMtS" + "06KdjyZ\/9A+Y\/aglwpI0HOYbEgx5WkinUTE6VQsFRIw0hp9av0+lZG3IzQYrk9ns\/zBe1fhMGKKXZJRS+j+OE7YA959hGiPOGV\/jSBnrfnSwR7lXBVCPiWo6oT8z3d7APi1sEnRmlI9M\/QlAFaoBUztEF7dERnJumGnuiNfhiIIZ4bhu8RXn11rGMnYLKxphp3Bmab4ycsMOfP5l4qhhViWSWmtWJbL8aNYt0i5u1iT5TDbrnsk9NBGR+R43GGO" + "iXns3I\/rwaX1CJQk\/gVXeqSLnWeoc7oUid1qWO61BFd6qClb2\/sXLA70is++8\/66MufuQXZnokGWRKSKFYyxUquT6Vkp9TOuNKwVnr9K7Ovs3ksl6\/yMlx+xb3j1\/8\/ZidnDj0jl8Upt66Vx3KY13KYz3J4m+Xwdl0rv65VQNcq6CS+kJP4wk7iww9Hh5++LxKvS+z6aET4Jmhu1Jb4Am0ZowM6oSt6ILxAUx+El5cbjO8w3L4jMRrjjDEJU4w5" + "DTPNMcdc88y7EOHtrZaJJbw53xqxJYhxg1g3iXmr2HfIYZdc9sppv9wOy\/GoXE\/I+bTcz6nBBbW4rCZxtYlfZqgLutRZXeq0LnVClzqqSx2Krgv2\/dGf\/LzWtiBdpmiQflUsSB8kVaybWCoFUrFXWmT0d1YWy6GYtzLe7YpbSJGLerQ4y5VS\/LKefVAX+ztRHiXOk\/Z8hlAVCVaJcJUdVYWQbxH0HdQk7gdGqYNPCB7+gtpnDNAULZihFdqgPXN" + "0RHj9nG7oid7oh4EIL5A5FOHlfX9w7FhMMNZkTDX2DMw2V3j3ofnm\/xlLxLJcTKvEFt5edL1Yw5sjbxH7NjnslMtuOe2T20E5HpHrMTmfVIkzanBejS6qSaA28UCXuqRLndelzuhSJ2OXgmORBfH4H\/UZ9ethi6d5MBqk2J2ErZLpXeGf0GIZWOxmRcyumLkVNZ9HCjJY+AZFMc+UUPx7ifCAV3Y5e4U\/gXyCQE\/Z+zmCvYhXCPg6qjo6\/ID0u8" + "SthQ8JXZfo9dEITYzcHC0Z4gu0RQd8ha7ogW\/QBwMwGN9huGNGIrxA+ThMxBRjTzPHTMwx5zxzLxTDYkYK7\/64AqvFuE6sv4h5k9i3ymGHXBKZaY\/c9svxEEMdlfMJuZ9Sg7NqcUFNLqtN4GUYv6JLXdSlzkUTgzO\/869oXbdbPJImGiTpFYvHlCyJ8iXTq5Ir7\/+cgeVS1LyKm1+RCyv2XYp+D5OVJkL4A6K\/MVl5ez5GoAqEepZgLxCukiMrE" + "\/ENYlYj7DuoaaTaxA5\/Qa0e4RviMyZoihZoZZY2aI+O6Ixu+Bq90Q8D8a19h2IERhljDMYbM7x\/x1RzTDfXLMw193wxLBLLEjEtF9sqMa4Va4KYN4h9sxy2yWWnnHbLbZ8cD8j1sJyPyf2kGpxWi3NqclFtrqhRPIjFg0vRVrrU7\/TLpP8pW\/iOcBApkSyITkkZxC6mjSdV5mTKnpwUKciTioSp9Ynw7dV0TpXTWw4zOInPpGtldhJ\/s5P4LLpW" + "Vifx2ZzE3+IkPruulUPXyhl\/E9WJ+y6Ra+FDI9ZFfeI3QhNmaI6WaI226MAkX6ErwusXfuOxPuiPQRiC4Y4didHGGoeJxp6Caeaaac45mCeG8O6PP4tpqdhWiHG1WNeJ+Rexb5TDFrlsl1Oi3PbIcb9cD8r5iNyPq8EptTirJueD2PmLanQh+C2vpfAX2VIGkTJpgujMDEEsyKKY2RU1t+LmU+SCil1E0YtZMEsQ4F5i3E+Ucl7pDxPocUI9RbB" + "nCfcCAV\/Ga8R8g6jVjFQDNQldG3WIXg8NmaAxmpqlBVohvEBTO4SXl+uMbvgavdAPA\/GtY4ZihDFGYYwxx2OSOcLbW0035yxzzxXDfCwS02KxLRNjePftNWJOEPsGOWyWyzY57ZDbLv+V2SvXA3I+LPejanAiiF06HUTHMNRvcymhv\/KWNogUzBxEf8xmicyluHkVOXyLtbCiF1X84kxWihBlCfKgV3r4AZ1HCfUkwZ4h3PN4iYivErMKUd9EdQ" + "K\/S+xa+IjwddEAjRihCcLr57RkjtZoiw74Cl3QA9+gj336YxCGOHYYvscPxhyLCeaYbK6pmGHu2WIIby+6QFw\/Y6kYV4h3NdaKfb0cNspli5y2yy1Rjrvluk\/OB+V+mKEOB\/\/PK+nd2P7XZonMEkTuzsFgeSyRtzu\/KKTodyr+3V7RJQlRhiAPEKYcgR4m1ONe\/U8RLfyA9ItEfJmYr6EqcasRuQZqErw26hC\/HhqiMUM0RXiBplZog3boiM7oh" + "q8RXj+6LwY6Jry9wlCMMNYojDb2eEwy1xRzTscsMcwRyzwxLRTbYjEuE+tKMa8Re4IcNshlk5y2ym2HHBPlulfOB724rlbixvZ7bXktkWiaP4jtuUPx7\/KKvocQpQlyH2HCT4CVJ9RjBKtAuGcIWJGQlfAqUcNfUHsL1Qn9HsFr4SPUZYIGaIQmTNEcLdEabdEBXyG8vG939LRfH\/THIAwxxjCEdx\/6wdhjzTEBk8051dwzMFss4c2RF4htkRiX" + "iHW5mFeJfa0c1stlo5w2B9E924PIJzuDv8q75tfQdms8kqFwEClbNIj+cLdzj5IEKUuYBwj0EKEeIdgThHuagM\/hRWK+QtTXUJXA1QhdA+8TvjbqoB4jNERjNEULhNcvbIN2+NL3ndANX6MXwtsrDHDsYHyH4cYcidHmGGeuiZhi7mlimCmeOZgntoViXCzWZWJeIfbVQezUOrkkBJE7t8vtapo3tj9zyx9EkpeMRyreG0SH3e9\/TOUIVZ5gj6E" + "C8Z4lYkViViJqZVQh8luoTvD3UIv4H6EuGjBEIzRBc7Rkktb4Jzr4Prx+dBd0R0\/0cUx\/DMQQYw3D98b+AWPNNd68kzFVDNPFMktMc8U3H4vEujiI9l0p9nU33ti89rcHg8jb5YNIs0eC6PonnPg+TcTnCfoiXiHu66hK6LdRg+jvozYTfIx6aMgUjRFev7AFPkcbtMOX6ISu+Nq+vdAXA4wxGN8ZczhGmmM0xplzovmnYGoQuzJDTHODSN15wb" + "+5h\/KN7frYnrC0PPsr0SEvBNEJlZy\/VGa2KoR+C9XxHvFr4SNGqIsGaIQmDNIMLdEa\/0R7fOW5LuiOnujt2H4YaKxvMRQjzDEqiCaONee4INJjihgmBpE7roZ1Y\/tP2560bL4RRFJXCSLpqgaRLtWCaJcaqBlEV9aOR3WtmK4V07ViulZM14rpWjFdKxb\/Au3wJTqhK3o4pqdjexujPwYZc7DxQ7qY6+q0f6EtEvlvLj6dTNsMZuwAAAAASUVOR" + "K5CYII=";
    return Result;
  };
  this.GetColorWheelResource125 = function () {
    var Result = "";
    Result = "TTMSFNCCOLORWHEELPICTURE125";
    return Result;
  };
  this.GetColorWheelResource150 = function () {
    var Result = "";
    Result = "TTMSFNCCOLORWHEELPICTURE150";
    return Result;
  };
  this.GetColorWheelResource175 = function () {
    var Result = "";
    Result = "TTMSFNCCOLORWHEELPICTURE175";
    return Result;
  };
  this.GetColorWheelResource200 = function () {
    var Result = "";
    Result = "TTMSFNCCOLORWHEELPICTURE200";
    return Result;
  };
});
rtl.module("WEBLib.TMSFNCColorWheel",["System","WEBLib.ExtCtrls","WEBLib.Controls","Web","Classes","Types","WEBLib.Graphics","WEBLib.TMSFNCCustomControl","WEBLib.TMSFNCImage","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCGraphicsTypes","WEBLib.TMSFNCTypes","WEBLib.TMSFNCEdit","WEBLib.TMSFNCStyles","WEBLib.TMSFNCUtils"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 0;
  rtl.createClass($mod,"TTMSFNCRGBTrackBar",pas["WEBLib.ExtCtrls"].TWebTrackBar,function () {
    this.SetValue = function (Value) {
      this.SetPosition(Math.round(Value));
    };
    this.GetV = function () {
      var Result = 0.0;
      Result = this.GetPosition();
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      this.SetMax(255);
      this.SetWidth(100);
      return this;
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCImageColor",pas["WEBLib.TMSFNCImage"].TTMSFNCImage,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCImage"].TTMSFNCImage.$init.call(this);
      this.FMouseDown = false;
      this.FImageLoaded = false;
      this.FPixelColor = 0;
      this.FOnColorChanged = null;
      this.FX = 0.0;
      this.FY = 0.0;
      this.FImgDt = null;
      this.FOffS = 0;
      this.Fsc = 0.0;
    };
    this.$final = function () {
      this.FOnColorChanged = undefined;
      this.FImgDt = undefined;
      pas["WEBLib.TMSFNCImage"].TTMSFNCImage.$final.call(this);
    };
    this.SetPixelColor = function (Value) {
      if (this.FPixelColor !== Value) this.FPixelColor = Value;
    };
    this.SetX = function (Value) {
      if (this.FX !== Value) this.FX = Value;
    };
    this.SetY = function (Value) {
      if (this.FY !== Value) this.FY = Value;
    };
    this.SetCoordinates = function (AX, AY) {
      var a = 0.0;
      var b = 0.0;
      var angle = 0.0;
      var r = 0.0;
      var cp = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      cp.$assign(this.GetCenterPoint());
      r = this.GetRadius() - (1 * this.Fsc);
      a = Math.abs(cp.X - AY);
      b = Math.abs(cp.Y - AX);
      if (a === 0) a = 1;
      if (b === 0) b = 1;
      angle = (Math.atan(a / b) * 180) / Math.PI;
      if ((AX >= cp.X) && (AY <= cp.Y)) {
        angle = 360 - angle}
       else if ((AX <= cp.X) && (AY >= cp.Y)) {
        angle = 180 - angle}
       else if ((AX <= cp.X) && (AY <= cp.Y)) angle = 180 + angle;
      angle = pas.Math.DegToRad(angle);
      this.FX = (cp.X - 0.5) + (r * Math.cos(angle));
      this.FY = (cp.Y - 0.5) + (r * Math.sin(angle));
    };
    this.PtInColorWheel = function (X, Y) {
      var Result = false;
      Result = (pas.System.Sqr$1(X - (75 * this.GetDPIScale())) + pas.System.Sqr$1(Y - (75 * this.GetDPIScale()))) <= pas.System.Sqr$1(74 * this.GetDPIScale());
      return Result;
    };
    this.ColorChanged = function () {
      if (this.FOnColorChanged != null) this.FOnColorChanged(this);
    };
    this.BitmapLoaded = function (Sender) {
      this.FImageLoaded = true;
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseDown.apply(this,arguments);
      this.CaptureEx();
      this.FMouseDown = true;
      if (this.PtInColorWheel(X,Y)) {
        this.SetPixelColor(this.XYToColor(X,Y));
        this.ColorChanged();
        this.Invalidate();
      };
    };
    this.HandleMouseMove = function (Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseMove.apply(this,arguments);
      if (this.FMouseDown) {
        if (this.PtInColorWheel(X,Y)) {
          this.SetPixelColor(this.XYToColor(X,Y));
        } else {
          this.SetCoordinates(X,Y);
          this.SetPixelColor(this.XYToColor(this.FX,this.FY));
        };
        this.ColorChanged();
        this.Invalidate();
      };
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseUp.apply(this,arguments);
      this.FMouseDown = false;
      this.ReleaseCaptureEx();
    };
    this.GetDPIScale = function () {
      var Result = 0.0;
      Result = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetDPIScale(this);
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCImage"].TTMSFNCCustomImage.Create$1.apply(this,arguments);
      this.SetWidth(150);
      this.SetHeight(150);
      this.SetX((this.GetWidth() / 2) * this.GetDPIScale());
      this.SetY((this.GetHeight() / 2) * this.GetDPIScale());
      this.FImageLoaded = false;
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
      this.FOnBitmapChanged = rtl.createCallback(this,"BitmapLoaded");
      return this;
    };
    this.Destroy = function () {
      this.UnmapPixels();
      pas["WEBLib.TMSFNCImage"].TTMSFNCCustomImage.Destroy.call(this);
    };
    this.Draw = function (AGraphics, ARect) {
      pas["WEBLib.TMSFNCImage"].TTMSFNCCustomImage.Draw.apply(this,arguments);
      if (this.FImageLoaded) {
        this.FImageLoaded = false;
        this.MapPixels();
      };
      AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
      AGraphics.FStroke.SetColor(0);
      AGraphics.DrawEllipse(this.FX - 5,this.FY - 5,this.FX + 5,this.FY + 5,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      AGraphics.FStroke.SetColor(16777215);
      AGraphics.DrawEllipse(this.FX - 4,this.FY - 4,this.FX + 4,this.FY + 4,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.MapPixels = function () {
      if (this.GetWidth() !== 0) {
        this.Fsc = Math.round((this.GetCanvas().FElementCanvas.width / this.GetWidth()) * 100) / 100}
       else this.Fsc = 1.0;
      this.FImgDt = this.GetCanvas().FContext.getImageData(0,0,Math.round(this.GetWidth() * this.Fsc),Math.round(this.GetHeight() * this.Fsc));
    };
    this.UnmapPixels = function () {
    };
    this.XYToColor = function (X, Y) {
      var Result = 0;
      this.FOffS = (Math.round(X * this.Fsc) + (Math.round(Y * this.Fsc) * Math.round(this.GetWidth() * this.Fsc))) * 4;
      Result = pas["WEBLib.Graphics"].RGB(this.FImgDt.data[this.FOffS + 0],this.FImgDt.data[this.FOffS + 1],this.FImgDt.data[this.FOffS + 2]);
      return Result;
    };
    this.GetCenterPoint = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].PointF(this.GetWidth() / 2,this.GetHeight() / 2));
      return Result;
    };
    this.GetRadius = function () {
      var Result = 0.0;
      Result = this.GetWidth() / 2;
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.recNewT($mod,"TTMSFNCColorWheelHSColor",function () {
    this.Hue = 0.0;
    this.Saturation = 0.0;
    this.$eq = function (b) {
      return (this.Hue === b.Hue) && (this.Saturation === b.Saturation);
    };
    this.$assign = function (s) {
      this.Hue = s.Hue;
      this.Saturation = s.Saturation;
      return this;
    };
    var $r = $mod.$rtti.$Record("TTMSFNCColorWheelHSColor",{});
    $r.addField("Hue",rtl.double);
    $r.addField("Saturation",rtl.double);
  });
  $mod.$rtti.$MethodVar("TTMSFNCCustomColorWheelBeforeDrawSelectedColorPanelEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARectF",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ASelectedColor",pas["WEBLib.Graphics"].$rtti["TColor"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomColorWheelAfterDrawSelectedColorPanelEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARectF",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ASelectedColor",pas["WEBLib.Graphics"].$rtti["TColor"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomColorWheelSelectedColorChangedEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ASelectedColor",pas["WEBLib.Graphics"].$rtti["TColor"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomColorWheelRValueChangedEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AR",rtl.longint],["ASelectedColor",pas["WEBLib.Graphics"].$rtti["TColor"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomColorWheelGValueChangedEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AG",rtl.longint],["ASelectedColor",pas["WEBLib.Graphics"].$rtti["TColor"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomColorWheelBValueChangedEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AB",rtl.longint],["ASelectedColor",pas["WEBLib.Graphics"].$rtti["TColor"]]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomColorWheel",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FImage = null;
      this.FREdit = null;
      this.FGEdit = null;
      this.FBEdit = null;
      this.FHEXEdit = null;
      this.FRTrackBar = null;
      this.FGTrackBar = null;
      this.FBTrackBar = null;
      this.FSelectedColor = 0;
      this.FGValue = 0;
      this.FRValue = 0;
      this.FBValue = 0;
      this.FHSColor = $mod.TTMSFNCColorWheelHSColor.$new();
      this.FOnBValueChanged = null;
      this.FOnGValueChanged = null;
      this.FOnAfterDrawSelectedColorPanel = null;
      this.FOnSelectedColorChanged = null;
      this.FOnRValueChanged = null;
      this.FOnBeforeDrawSelectedColorPanel = null;
    };
    this.$final = function () {
      this.FImage = undefined;
      this.FREdit = undefined;
      this.FGEdit = undefined;
      this.FBEdit = undefined;
      this.FHEXEdit = undefined;
      this.FRTrackBar = undefined;
      this.FGTrackBar = undefined;
      this.FBTrackBar = undefined;
      this.FHSColor = undefined;
      this.FOnBValueChanged = undefined;
      this.FOnGValueChanged = undefined;
      this.FOnAfterDrawSelectedColorPanel = undefined;
      this.FOnSelectedColorChanged = undefined;
      this.FOnRValueChanged = undefined;
      this.FOnBeforeDrawSelectedColorPanel = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetSelectedColor = function (Value) {
      if (this.FSelectedColor !== Value) {
        this.FSelectedColor = Value;
        this.FRValue = this.ColorToRValue(this.FSelectedColor);
        this.FREdit.SetT(pas.SysUtils.IntToStr(this.FRValue));
        this.FGValue = this.ColorToGValue(this.FSelectedColor);
        this.FGEdit.SetT(pas.SysUtils.IntToStr(this.FGValue));
        this.FBValue = this.ColorToBValue(this.FSelectedColor);
        this.FBEdit.SetT(pas.SysUtils.IntToStr(this.FBValue));
        this.FHEXEdit.SetT(pas.SysUtils.IntToHex(this.FRValue,2) + pas.SysUtils.IntToHex(this.FGValue,2) + pas.SysUtils.IntToHex(this.FBValue,2));
        this.FRTrackBar.FOnChange = null;
        if (this.FRTrackBar.GetV() !== this.FRValue) {
          this.FRTrackBar.SetValue(this.FRValue);
          this.DoRValueChanged(this.FRValue,this.FSelectedColor);
        };
        this.FRTrackBar.FOnChange = rtl.createCallback(this,"RTrackBarChanged");
        this.FGTrackBar.FOnChange = null;
        if (this.FGTrackBar.GetV() !== this.FGValue) {
          this.FGTrackBar.SetValue(this.FGValue);
          this.DoGValueChanged(this.FGValue,this.FSelectedColor);
        };
        this.FGTrackBar.FOnChange = rtl.createCallback(this,"GTrackBarChanged");
        this.FBTrackBar.FOnChange = null;
        if (this.FBTrackBar.GetV() !== this.FBValue) {
          this.FBTrackBar.SetValue(this.FBValue);
          this.DoBValueChanged(this.FBValue,this.FSelectedColor);
        };
        this.FBTrackBar.FOnChange = rtl.createCallback(this,"BTrackBarChanged");
        this.FHSColor.$assign(this.RGBToHS(this.FRValue,this.FGValue,this.FBValue));
        this.SetIndicator();
        this.DoSelectedColorChanged(this.FSelectedColor);
        this.Invalidate();
      };
    };
    this.SetBValue = function (Value) {
      if (this.FBValue !== Value) {
        this.FBValue = Value;
        this.FBEdit.SetT(pas.SysUtils.IntToStr(Value));
        this.FHEXEdit.SetT(pas.SysUtils.IntToHex(this.FRValue,2) + pas.SysUtils.IntToHex(this.FGValue,2) + pas.SysUtils.IntToHex(this.FBValue,2));
        this.FBTrackBar.SetValue(this.FBValue);
        this.FSelectedColor = this.RGBToGraphicsColor(this.FRValue,this.FGValue,this.FBValue);
        this.FHSColor.$assign(this.RGBToHS(this.FRValue,this.FGValue,this.FBValue));
        this.SetIndicator();
        this.DoBValueChanged(this.FBValue,this.FSelectedColor);
        this.DoSelectedColorChanged(this.FSelectedColor);
        this.Invalidate();
      };
    };
    this.SetGValue = function (Value) {
      if (this.FGValue !== Value) {
        this.FGValue = Value;
        this.FGEdit.SetT(pas.SysUtils.IntToStr(Value));
        this.FHEXEdit.SetT(pas.SysUtils.IntToHex(this.FRValue,2) + pas.SysUtils.IntToHex(this.FGValue,2) + pas.SysUtils.IntToHex(this.FBValue,2));
        this.FGTrackBar.SetValue(this.FGValue);
        this.FSelectedColor = this.RGBToGraphicsColor(this.FRValue,this.FGValue,this.FBValue);
        this.FHSColor.$assign(this.RGBToHS(this.FRValue,this.FGValue,this.FBValue));
        this.SetIndicator();
        this.DoGValueChanged(this.FGValue,this.FSelectedColor);
        this.DoSelectedColorChanged(this.FSelectedColor);
        this.Invalidate();
      };
    };
    this.SetRValue = function (Value) {
      if (this.FRValue !== Value) {
        this.FRValue = Value;
        this.FREdit.SetT(pas.SysUtils.IntToStr(Value));
        this.FHEXEdit.SetT(pas.SysUtils.IntToHex(this.FRValue,2) + pas.SysUtils.IntToHex(this.FGValue,2) + pas.SysUtils.IntToHex(this.FBValue,2));
        this.FRTrackBar.SetValue(this.FRValue);
        this.FSelectedColor = this.RGBToGraphicsColor(this.FRValue,this.FGValue,this.FBValue);
        this.FHSColor.$assign(this.RGBToHS(this.FRValue,this.FGValue,this.FBValue));
        this.SetIndicator();
        this.DoRValueChanged(this.FRValue,this.FSelectedColor);
        this.DoSelectedColorChanged(this.FSelectedColor);
        this.Invalidate();
      };
    };
    this.SetHEXValue = function (Value) {
      var str = "";
      var r = 0;
      var g = 0;
      var b = 0;
      if (Value.length === 6) {
        str = pas.System.Copy(Value,1,2);
        r = pas.SysUtils.StrToInt("$" + str);
        str = pas.System.Copy(Value,3,2);
        g = pas.SysUtils.StrToInt("$" + str);
        str = pas.System.Copy(Value,5,2);
        b = pas.SysUtils.StrToInt("$" + str);
        this.SetSelectedColor(this.RGBToGraphicsColor(r,g,b));
        this.FHSColor.$assign(this.RGBToHS(r,g,b));
        this.SetIndicator();
      };
    };
    this.GetHEXValue = function () {
      var Result = "";
      Result = this.FHEXEdit.GetT();
      return Result;
    };
    this.IsHEXValueStored = function () {
      var Result = false;
      Result = this.GetHEXValue() !== "FFFFFF";
      return Result;
    };
    this.Draw = function (AGraphics, ARect) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      this.DrawColorPanel(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
      this.DrawText(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
    };
    this.DrawColorPanel = function (AGraphics, ARect) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var b = false;
      var df = false;
      var h = 0.0;
      h = 35 + this.FREdit.GetHeight() + this.FBEdit.GetHeight() + this.FGEdit.GetHeight() + this.FHEXEdit.GetHeight();
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,25,25));
      pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(r,30 + this.FImage.GetWidth(),h);
      r.Right = this.FREdit.GetLeft() + this.FREdit.GetWidth();
      AGraphics.FFill.SetColor(this.FSelectedColor);
      b = true;
      df = true;
      this.DoBeforeDrawSelectedColorPanel(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FSelectedColor,{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        this.DoAfterDrawSelectedColorPanel(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FSelectedColor);
      };
    };
    this.DrawText = function (AGraphics, ARect) {
      AGraphics.DrawText(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(30 + this.FImage.GetWidth(),this.FREdit.GetTop() + 7)),"R",0,true,false,-1,-1);
      AGraphics.DrawText(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(30 + this.FImage.GetWidth(),this.FGEdit.GetTop() + 7)),"G",0,true,false,-1,-1);
      AGraphics.DrawText(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(30 + this.FImage.GetWidth(),this.FBEdit.GetTop() + 7)),"B",0,true,false,-1,-1);
      AGraphics.DrawText(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(30 + this.FImage.GetWidth(),this.FHEXEdit.GetTop() + 7)),"HEX",0,true,false,-1,-1);
    };
    this.RFieldKeyDown = function (Sender, Key, Shift) {
      var v = 0;
      if (Key.get() === 13) {
        v = this.FREdit.GetInt();
        if (v < 0) {
          v = 0}
         else if (v > 255) v = 255;
        if (v === this.FRValue) {
          this.FREdit.SetT(pas.SysUtils.IntToStr(v));
        } else {
          this.SetSelectedColor(this.RGBToGraphicsColor(v,this.FGValue,this.FBValue));
          this.FHSColor.$assign(this.RGBToHS(v,this.FGValue,this.FBValue));
          this.SetIndicator();
        };
      };
    };
    this.GFieldKeyDown = function (Sender, Key, Shift) {
      var v = 0;
      if (Key.get() === 13) {
        v = this.FGEdit.GetInt();
        if (v < 0) {
          v = 0}
         else if (v > 255) v = 255;
        if (v === this.FGValue) {
          this.FGEdit.SetT(pas.SysUtils.IntToStr(v));
        } else {
          this.SetSelectedColor(this.RGBToGraphicsColor(this.FRValue,v,this.FBValue));
          this.FHSColor.$assign(this.RGBToHS(this.FRValue,v,this.FBValue));
          this.SetIndicator();
        };
      };
    };
    this.BFieldKeyDown = function (Sender, Key, Shift) {
      var v = 0;
      if (Key.get() === 13) {
        v = this.FBEdit.GetInt();
        if (v < 0) {
          v = 0}
         else if (v > 255) v = 255;
        if (v === this.FBValue) {
          this.FBEdit.SetT(pas.SysUtils.IntToStr(v));
        } else {
          this.SetSelectedColor(this.RGBToGraphicsColor(this.FRValue,this.FGValue,v));
          this.FHSColor.$assign(this.RGBToHS(this.FRValue,this.FGValue,v));
          this.SetIndicator();
        };
      };
    };
    this.HEXFieldKeyDown = function (Sender, Key, Shift) {
      var str = "";
      var r = 0;
      var g = 0;
      var b = 0;
      if ((Key.get() === 13) && (this.FHEXEdit.GetT().length === 6)) {
        str = pas.System.Copy(this.FHEXEdit.GetT(),1,2);
        r = pas.SysUtils.StrToInt("$" + str);
        str = pas.System.Copy(this.FHEXEdit.GetT(),3,2);
        g = pas.SysUtils.StrToInt("$" + str);
        str = pas.System.Copy(this.FHEXEdit.GetT(),5,2);
        b = pas.SysUtils.StrToInt("$" + str);
        this.SetSelectedColor(this.RGBToGraphicsColor(r,g,b));
        this.FHSColor.$assign(this.RGBToHS(r,g,b));
        this.SetIndicator();
      };
    };
    this.DoBeforeDrawSelectedColorPanel = function (AGraphics, ARectF, ASelectedColor, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawSelectedColorPanel != null) this.FOnBeforeDrawSelectedColorPanel(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARectF),ASelectedColor,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawSelectedColorPanel = function (AGraphics, ARectF, ASelectedColor) {
      if (this.FOnAfterDrawSelectedColorPanel != null) this.FOnAfterDrawSelectedColorPanel(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARectF),ASelectedColor);
    };
    this.DoSelectedColorChanged = function (ASelectedColor) {
      if (this.FOnSelectedColorChanged != null) this.FOnSelectedColorChanged(this,ASelectedColor);
    };
    this.DoRValueChanged = function (AR, ASelectedColor) {
      if (this.FOnRValueChanged != null) this.FOnRValueChanged(this,AR,ASelectedColor);
    };
    this.DoGValueChanged = function (AG, ASelectedColor) {
      if (this.FOnGValueChanged != null) this.FOnGValueChanged(this,AG,ASelectedColor);
    };
    this.DoBValueChanged = function (AB, ASelectedColor) {
      if (this.FOnBValueChanged != null) this.FOnBValueChanged(this,AB,ASelectedColor);
    };
    this.ColorChanged = function (Sender) {
      this.SetSelectedColor(this.FImage.FPixelColor);
    };
    this.RTrackBarChanged = function (Sender) {
      this.SetRValue(Math.round(this.FRTrackBar.GetV()));
    };
    this.GTrackBarChanged = function (Sender) {
      this.SetGValue(Math.round(this.FGTrackBar.GetV()));
    };
    this.BTrackBarChanged = function (Sender) {
      this.SetBValue(Math.round(this.FBTrackBar.GetV()));
    };
    this.FillColorChanged = function (Sender) {
      this.FillChanged(this);
      this.FImage.FFill.SetColor(this.FColor);
    };
    this.ApplyStyle = function () {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ApplyStyle.call(this);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FFill.SetColor(c);
    };
    this.ResetToDefaultStyle = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ResetToDefaultStyle.call(this);
      this.FFill.SetColor(16777215);
    };
    this.UpdateControlAfterResize = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.UpdateControlAfterResize.call(this);
      if (this.FImage != null) this.FImage.SetTop(Math.round((this.GetHeight() / 2) - (this.FImage.GetHeight() / 2)));
    };
    this.SetIndicator = function () {
      var angle = 0.0;
      var r = 0.0;
      var cp = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      cp.$assign(this.FImage.GetCenterPoint());
      r = this.FImage.GetRadius() - 0.5;
      angle = pas.Math.DegToRad(this.FHSColor.Hue);
      this.FImage.SetX(cp.X + (r * this.FHSColor.Saturation * Math.cos(angle)));
      this.FImage.SetY(cp.Y + (r * this.FHSColor.Saturation * Math.sin(angle)));
      this.FImage.Invalidate();
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,0);
      return Result;
    };
    this.RGBToHS = function (AR, AG, AB) {
      var Result = $mod.TTMSFNCColorWheelHSColor.$new();
      var minRGB = 0.0;
      var maxRGB = 0.0;
      var delta = 0.0;
      var h = 0.0;
      var s = 0.0;
      h = 0.0;
      maxRGB = Math.max(Math.max(AR,AG),AB);
      minRGB = Math.min(Math.min(AR,AG),AB);
      delta = maxRGB - minRGB;
      if (maxRGB === 0) {
        s = 0.0}
       else s = delta / maxRGB;
      if (delta === 0) {
        h = 0.0}
       else if (maxRGB === AR) {
        h = (AG - AB) / delta}
       else if (maxRGB === AG) {
        h = ((AB - AR) / delta) + 2}
       else if (maxRGB === AB) h = ((AR - AG) / delta) + 4;
      h = 60 * h;
      Result.Hue = h;
      Result.Saturation = s;
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.SetWidth(350);
      this.SetHeight(175);
      this.FRValue = 255;
      this.FGValue = 255;
      this.FBValue = 255;
      this.FSelectedColor = 16777215;
      this.FFill.FOnChanged = rtl.createCallback(this,"FillColorChanged");
      this.FImage = $mod.TTMSFNCImageColor.$create("Create$1",[this]);
      this.FImage.SetParent(this);
      this.FImage.FBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCColorWheelResources"].GetColorWheelResource(),pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FImage.SetTop(Math.round((this.GetHeight() / 2) - (this.FImage.GetHeight() / 2)));
      this.FImage.SetLeft(10);
      this.FImage.FOnColorChanged = rtl.createCallback(this,"ColorChanged");
      this.FREdit = pas["WEBLib.TMSFNCEdit"].TTMSFNCEdit.$create("Create$1",[this]);
      this.FREdit.SetParent(this);
      this.FREdit.SetWidth(35);
      this.FREdit.SetLeft(this.GetWidth() - this.FREdit.GetWidth() - 15);
      this.FREdit.SetTop(15);
      this.FREdit.SetEditType$1(pas["WEBLib.TMSFNCEdit"].TTMSFNCEditType.etNumeric);
      this.FREdit.FOnKeyDown = rtl.createCallback(this,"RFieldKeyDown");
      this.FREdit.SetMaxLength(3);
      this.FREdit.SetT("255");
      this.FGEdit = pas["WEBLib.TMSFNCEdit"].TTMSFNCEdit.$create("Create$1",[this]);
      this.FGEdit.SetParent(this);
      this.FGEdit.SetWidth(35);
      this.FGEdit.SetLeft(this.GetWidth() - this.FGEdit.GetWidth() - 15);
      this.FGEdit.SetTop(45);
      this.FGEdit.SetEditType$1(pas["WEBLib.TMSFNCEdit"].TTMSFNCEditType.etNumeric);
      this.FGEdit.FOnKeyDown = rtl.createCallback(this,"GFieldKeyDown");
      this.FGEdit.SetMaxLength(3);
      this.FGEdit.SetT("255");
      this.FBEdit = pas["WEBLib.TMSFNCEdit"].TTMSFNCEdit.$create("Create$1",[this]);
      this.FBEdit.SetParent(this);
      this.FBEdit.SetWidth(35);
      this.FBEdit.SetLeft(this.GetWidth() - this.FBEdit.GetWidth() - 15);
      this.FBEdit.SetTop(75);
      this.FBEdit.SetEditType$1(pas["WEBLib.TMSFNCEdit"].TTMSFNCEditType.etNumeric);
      this.FBEdit.FOnKeyDown = rtl.createCallback(this,"BFieldKeyDown");
      this.FBEdit.SetMaxLength(3);
      this.FBEdit.SetT("255");
      this.FHEXEdit = pas["WEBLib.TMSFNCEdit"].TTMSFNCEdit.$create("Create$1",[this]);
      this.FHEXEdit.SetParent(this);
      this.FHEXEdit.SetWidth(125);
      this.FHEXEdit.SetLeft(210);
      this.FHEXEdit.SetTop(105);
      this.FHEXEdit.SetEditType$1(pas["WEBLib.TMSFNCEdit"].TTMSFNCEditType.etHex);
      this.FHEXEdit.FOnKeyDown = rtl.createCallback(this,"HEXFieldKeyDown");
      this.FHEXEdit.SetMaxLength(6);
      this.FHEXEdit.SetT("FFFFFF");
      this.FRTrackBar = $mod.TTMSFNCRGBTrackBar.$create("Create$1",[this]);
      this.FRTrackBar.SetParent(this);
      this.FRTrackBar.SetLeft(195);
      this.FRTrackBar.SetTop(this.FREdit.GetTop() - 1);
      this.FRTrackBar.SetValue(255);
      this.FRTrackBar.FOnChange = rtl.createCallback(this,"RTrackBarChanged");
      this.FGTrackBar = $mod.TTMSFNCRGBTrackBar.$create("Create$1",[this]);
      this.FGTrackBar.SetParent(this);
      this.FGTrackBar.SetLeft(195);
      this.FGTrackBar.SetTop(this.FGEdit.GetTop() - 1);
      this.FGTrackBar.SetValue(255);
      this.FGTrackBar.FOnChange = rtl.createCallback(this,"GTrackBarChanged");
      this.FBTrackBar = $mod.TTMSFNCRGBTrackBar.$create("Create$1",[this]);
      this.FBTrackBar.SetParent(this);
      this.FBTrackBar.SetLeft(195);
      this.FBTrackBar.SetTop(this.FBEdit.GetTop() - 1);
      this.FBTrackBar.SetValue(255);
      this.FBTrackBar.FOnChange = rtl.createCallback(this,"BTrackBarChanged");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FImage");
      rtl.free(this,"FREdit");
      rtl.free(this,"FGEdit");
      rtl.free(this,"FBEdit");
      rtl.free(this,"FRTrackBar");
      rtl.free(this,"FGTrackBar");
      rtl.free(this,"FBTrackBar");
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.call(this);
    };
    this.ColorToRValue = function (AColor) {
      var Result = 0;
      Result = AColor & 0xFF;
      return Result;
    };
    this.ColorToGValue = function (AColor) {
      var Result = 0;
      Result = Math.floor((AColor & 0xFF00) / 256);
      return Result;
    };
    this.ColorToBValue = function (AColor) {
      var Result = 0;
      Result = Math.floor((AColor & 0xFF0000) / 65536);
      return Result;
    };
    this.RGBToGraphicsColor = function (R, G, B) {
      var Result = 0;
      Result = pas["WEBLib.Graphics"].RGB(R,G,B);
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCColorWheel",$mod.TTMSFNCCustomColorWheel,function () {
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
    $r.addProperty("SelectedColor",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FSelectedColor","SetSelectedColor",{Default: 16777215});
    $r.addProperty("RValue",2,rtl.longint,"FRValue","SetRValue",{Default: 255});
    $r.addProperty("BValue",2,rtl.longint,"FBValue","SetBValue",{Default: 255});
    $r.addProperty("GValue",2,rtl.longint,"FGValue","SetGValue",{Default: 255});
    $r.addProperty("HEXValue",15,rtl.string,"GetHEXValue","SetHEXValue",{stored: "IsHEXValueStored"});
    $r.addProperty("OnBeforeDrawSelectedColorPanel",0,$mod.$rtti["TTMSFNCCustomColorWheelBeforeDrawSelectedColorPanelEvent"],"FOnBeforeDrawSelectedColorPanel","FOnBeforeDrawSelectedColorPanel");
    $r.addProperty("OnAfterDrawSelectedColorPanel",0,$mod.$rtti["TTMSFNCCustomColorWheelAfterDrawSelectedColorPanelEvent"],"FOnAfterDrawSelectedColorPanel","FOnAfterDrawSelectedColorPanel");
    $r.addProperty("OnSelectedColorChanged",0,$mod.$rtti["TTMSFNCCustomColorWheelSelectedColorChangedEvent"],"FOnSelectedColorChanged","FOnSelectedColorChanged");
    $r.addProperty("OnRValueChanged",0,$mod.$rtti["TTMSFNCCustomColorWheelRValueChangedEvent"],"FOnRValueChanged","FOnRValueChanged");
    $r.addProperty("OnGValueChanged",0,$mod.$rtti["TTMSFNCCustomColorWheelGValueChangedEvent"],"FOnGValueChanged","FOnGValueChanged");
    $r.addProperty("OnBValueChanged",0,$mod.$rtti["TTMSFNCCustomColorWheelBValueChangedEvent"],"FOnBValueChanged","FOnBValueChanged");
  });
},["Math","SysUtils","WEBLib.TMSFNCColorWheelResources"]);
rtl.module("WEBLib.TMSFNCColorSelector",["System","Classes","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCCustomControl","WEBLib.TMSFNCCustomSelector","WEBLib.Controls","WEBLib.TMSFNCTypes","WEBLib.ExtCtrls","WEBLib.TMSFNCGraphicsTypes","WEBLib.StdCtrls","Types"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 0;
  this.TMSFNCColorSelectorColorSetCount = 15;
  this.TMSFNCColorSelectorColorSet = [0,128,32768,32896,8388608,8388736,8421376,12632256,8421504,255,65280,65535,16711680,16711935,16776960,16777215];
  this.TMSFNCColorSelectorExtendedColorSetCount = 39;
  this.TMSFNCColorSelectorExtendedColorSet = [0,0x993300,0x333300,0x3300,0x3366,8388608,0x333335,0x333333,0x80,0x66FF,0x8080,0x8000,0x808000,0xFF0000,0x996666,0x808080,0xFF,0x99FF,0xCC99,0x669933,0xCCCC33,0xFF6633,0x800080,0x999999,0xFF00FF,0xCCFF,0xFFFF,0xFF00,0xFFFF00,0xFFCC00,0x663399,0xC0C0C0,0xCC99FF,0x99CCFF,0x99FFFF,0xCCFFCC,0xFFFFCC,0xFFCC99,0xFF99CC,0xFFFFFF];
  $mod.$rtti.$Class("TTMSFNCCustomColorSelector");
  rtl.createClass($mod,"TTMSFNCColorSelectorItem",pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItem,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItem.$init.call(this);
      this.FOwner$1 = null;
      this.FColor = 0;
    };
    this.$final = function () {
      this.FOwner$1 = undefined;
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItem.$final.call(this);
    };
    this.SetColor = function (Value) {
      if (this.FColor !== Value) {
        this.FColor = Value;
        if (this.FOwner$1 != null) this.FOwner$1.InvalidateItems();
      };
    };
    this.Create$1 = function (ACollection) {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItem.Create$1.apply(this,arguments);
      if (this.FCollection != null) this.FOwner$1 = rtl.as(this.FCollection,$mod.TTMSFNCColorSelectorItems).FOwner$2;
      return this;
    };
    this.Assign = function (Source) {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItem.Assign.apply(this,arguments);
      if ($mod.TTMSFNCColorSelectorItem.isPrototypeOf(Source)) this.FColor = rtl.as(Source,$mod.TTMSFNCColorSelectorItem).FColor;
    };
    var $r = this.$rtti;
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor",{Default: -1});
  });
  rtl.createClass($mod,"TTMSFNCColorSelectorItems",pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems.$init.call(this);
      this.FOwner$2 = null;
    };
    this.$final = function () {
      this.FOwner$2 = undefined;
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems.$final.call(this);
    };
    this.GetItem$2 = function (Index) {
      var Result = null;
      Result = this.GetItem$1(Index);
      return Result;
    };
    this.SetItem$2 = function (Index, Value) {
      this.SetItem$1(Index,Value);
    };
    this.CreateItemClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCColorSelectorItem;
      return Result;
    };
    this.Create$3 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems.Create$3.apply(this,arguments);
      this.FOwner$2 = rtl.as(AOwner,$mod.TTMSFNCCustomColorSelector);
      return this;
    };
    this.Add$2 = function () {
      var Result = null;
      Result = pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems.Add$1.call(this);
      return Result;
    };
    this.Insert$2 = function (Index) {
      var Result = null;
      Result = pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelectorItems.Insert$1.call(this,Index);
      return Result;
    };
  });
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorColorSelected",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AColor",pas["WEBLib.Graphics"].$rtti["TColor"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorColorDeselected",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AColor",pas["WEBLib.Graphics"].$rtti["TColor"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSelectorColorClick",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AColor",pas["WEBLib.Graphics"].$rtti["TColor"]]]), methodkind: 0});
  this.TTMSFNCCustomColorSelectorMode = {"0": "csmSimple", csmSimple: 0, "1": "csmExtended", csmExtended: 1, "2": "csmExtendedMore", csmExtendedMore: 2};
  $mod.$rtti.$Enum("TTMSFNCCustomColorSelectorMode",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCCustomColorSelectorMode});
  rtl.createClass($mod,"TTMSFNCCustomColorSelector",pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCDefaultSelector,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCDefaultSelector.$init.call(this);
      this.w = 0.0;
      this.h = 0.0;
      this.FColorWheel = null;
      this.FPanel = null;
      this.FBackButton = null;
      this.FOnColorSelected = null;
      this.FOnColorDeselected = null;
      this.FMode = 0;
    };
    this.$final = function () {
      this.FColorWheel = undefined;
      this.FPanel = undefined;
      this.FBackButton = undefined;
      this.FOnColorSelected = undefined;
      this.FOnColorDeselected = undefined;
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCDefaultSelector.$final.call(this);
    };
    this.SetSelectedColor = function (Value) {
      var $tmp1 = this.FMode;
      if ($tmp1 === $mod.TTMSFNCCustomColorSelectorMode.csmExtendedMore) {
        if (this.GetItems().GetCount() > 0) this.GetItems().GetItem$2(this.GetItems().GetCount() - 1).SetColor(Value);
      };
      this.SetSelectedItemIndex(this.FindItemByColor(Value));
    };
    this.GetSelectedColor = function () {
      var Result = 0;
      Result = this.FindColorByItem(this.FSelectedItemIndex);
      return Result;
    };
    this.GetItems = function () {
      var Result = null;
      Result = this.FItems;
      return Result;
    };
    this.SetItems$1 = function (Value) {
      this.GetItems().Assign(Value);
    };
    this.SetMode = function (Value) {
      if (this.FMode !== Value) {
        this.FMode = Value;
        var $tmp1 = this.FMode;
        if ($tmp1 === $mod.TTMSFNCCustomColorSelectorMode.csmSimple) {
          this.SetWidth(135);
          this.SetHeight(135);
        } else if ($tmp1 === $mod.TTMSFNCCustomColorSelectorMode.csmExtended) {
          this.SetWidth(200);
          this.SetHeight(135);
        } else if ($tmp1 === $mod.TTMSFNCCustomColorSelectorMode.csmExtendedMore) {
          this.SetWidth(200);
          this.SetHeight(175);
        };
        this.AddColors();
      };
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,0,0);
      return Result;
    };
    this.BackButtonClicked = function (Sender) {
      if (this.FPanel != null) {
        this.FPanel.SetVisible(false);
        this.FPanel.SetParent(null);
        this.SetWidth(Math.round(this.w));
        this.SetHeight(Math.round(this.h));
        this.WrapperSizeChanged(this.w,this.h);
        this.Invalidate();
      };
    };
    this.ColorWheelChange = function (Sender, AColor) {
      if (this.FBlockChange) return;
      this.FBlockChange = true;
      this.SetSelectedItemIndex(-1);
      this.GetItems().GetItem$2(this.GetItems().GetCount() - 1).SetColor($impl.AsColorWheel(this.FColorWheel).FSelectedColor);
      this.SetSelectedColor($impl.AsColorWheel(this.FColorWheel).FSelectedColor);
      this.DoItemSelected(this.FSelectedItemIndex);
      this.Invalidate();
      this.FBlockChange = false;
    };
    this.DoItemClick = function (AItemIndex) {
      var l = 0.0;
      var t = 0.0;
      var r = 0.0;
      var b = 0.0;
      var nw = 0.0;
      var nh = 0.0;
      if (this.FClosedRemotely) {
        this.FClosedRemotely = false;
        pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.DoItemClick.apply(this,arguments);
        return;
      };
      if ((this.FMode === $mod.TTMSFNCCustomColorSelectorMode.csmExtendedMore) && (this.FPanel != null) && (AItemIndex === (this.GetItems().GetCount() - 2))) {
        this.w = this.GetWidth();
        this.h = this.GetHeight();
        l = 0;
        t = 0;
        r = 0;
        b = 0;
        this.FColorWheel.GetControlMargins({get: function () {
            return l;
          }, set: function (v) {
            l = v;
          }},{get: function () {
            return t;
          }, set: function (v) {
            t = v;
          }},{get: function () {
            return r;
          }, set: function (v) {
            r = v;
          }},{get: function () {
            return b;
          }, set: function (v) {
            b = v;
          }});
        nh = 205 + this.FBackButton.GetHeight() + t + b;
        this.SetHeight(Math.round(nh));
        nw = 350;
        this.SetWidth(Math.round(nw));
        this.WrapperSizeChanged(nw,nh);
        this.FBlockChange = true;
        $impl.AsColorWheel(this.FColorWheel).SetSelectedColor(this.FindColorByItem(AItemIndex + 1));
        this.FBlockChange = false;
        this.FPanel.SetVisible(true);
        this.FPanel.SetParent(this);
      };
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.DoItemClick.apply(this,arguments);
    };
    this.WrapperSizeChanged = function (AWidth, AHeight) {
    };
    this.DoItemSelected = function (AItemIndex) {
      var c = 0;
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.DoItemSelected.apply(this,arguments);
      c = this.FindColorByItem(AItemIndex);
      if ((this.FColorWheel != null) && !this.FBlockChange) {
        this.FBlockChange = true;
        $impl.AsColorWheel(this.FColorWheel).SetSelectedColor(c);
        if ((this.FMode === $mod.TTMSFNCCustomColorSelectorMode.csmExtendedMore) && (this.GetItems().GetCount() > 0)) this.GetItems().GetItem$2(this.GetItems().GetCount() - 1).SetColor(c);
        this.FBlockChange = false;
      };
      if (this.FOnColorSelected != null) this.FOnColorSelected(this,c);
    };
    this.DoItemDeselected = function (AItemIndex) {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.DoItemDeselected.apply(this,arguments);
      if (this.FOnColorDeselected != null) this.FOnColorDeselected(this,this.FindColorByItem(AItemIndex));
    };
    this.CreateItemsCollection = function () {
      var Result = null;
      Result = $mod.TTMSFNCColorSelectorItems.$create("Create$3",[this]);
      return Result;
    };
    this.DoItemBeforeDrawContent = function (AGraphics, ARect, AItemIndex, ADefaultDraw) {
      if (this.FMode === $mod.TTMSFNCCustomColorSelectorMode.csmExtendedMore) {
        if ((AItemIndex >= 0) && (AItemIndex <= (this.GetItems().GetCount() - 1))) ADefaultDraw.set(!this.GetItems().GetItem$2(AItemIndex).FDataBoolean);
      };
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.DoItemBeforeDrawContent.apply(this,arguments);
    };
    this.DrawItemContent = function (AGraphics, ADisplayItem) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var it = null;
      var a = false;
      it = ADisplayItem.Item;
      if ((it != null) && $mod.TTMSFNCColorSelectorItem.isPrototypeOf(it)) {
        r.$assign(ADisplayItem.Rect);
        a = true;
        this.DoItemBeforeDrawContent(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ADisplayItem.Rect),it.GetIndex(),{get: function () {
            return a;
          }, set: function (v) {
            a = v;
          }});
        if (a) {
          var $tmp1 = this.FMode;
          if ($tmp1 === $mod.TTMSFNCCustomColorSelectorMode.csmSimple) {
            pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-5,-5)}
           else if (($tmp1 === $mod.TTMSFNCCustomColorSelectorMode.csmExtended) || ($tmp1 === $mod.TTMSFNCCustomColorSelectorMode.csmExtendedMore)) pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-3,-3);
          AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
          AGraphics.FFill.SetColor(rtl.as(it,$mod.TTMSFNCColorSelectorItem).FColor);
          AGraphics.FStroke.SetColor(AGraphics.FFill.FColor);
          AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
          this.DoItemAfterDrawContent(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ADisplayItem.Rect),it.GetIndex());
        };
      };
    };
    this.AddColors = function () {
      var I = 0;
      var it = null;
      this.BeginUpdate();
      this.GetItems().Clear();
      var $tmp1 = this.FMode;
      if ($tmp1 === $mod.TTMSFNCCustomColorSelectorMode.csmSimple) {
        this.SetColumns(4);
        this.SetRows(4);
        for (I = 0; I <= 15; I++) this.GetItems().Add$2().SetColor($mod.TMSFNCColorSelectorColorSet[I]);
      } else if ($tmp1 === $mod.TTMSFNCCustomColorSelectorMode.csmExtended) {
        this.SetColumns(8);
        this.SetRows(5);
        for (I = 0; I <= 39; I++) this.GetItems().Add$2().SetColor($mod.TMSFNCColorSelectorExtendedColorSet[I]);
      } else if ($tmp1 === $mod.TTMSFNCCustomColorSelectorMode.csmExtendedMore) {
        this.SetColumns(8);
        this.SetRows(7);
        for (I = 0; I <= 39; I++) this.GetItems().Add$2().SetColor($mod.TMSFNCColorSelectorExtendedColorSet[I]);
        it = this.GetItems().Insert$2(0);
        it.SetColor(0);
        it.SetColumnSpan(8);
        it.SetText("Automatic");
        it.FDataBoolean = true;
        it = this.GetItems().Add$2();
        it.SetColumnSpan(8);
        it.SetText("More Colors...");
        it.SetCanSelect(false);
        it.FDataBoolean = true;
        this.GetItems().Add$2().SetVisible(false);
      };
      this.EndUpdate();
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.Create$1.apply(this,arguments);
      this.SetWidth(135);
      this.SetHeight(135);
      this.FMode = $mod.TTMSFNCCustomColorSelectorMode.csmSimple;
      this.FPanel = pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$create("Create$1",[this]);
      this.FPanel.SetVisible(false);
      this.FPanel.FStored = false;
      this.FPanel.SetControlAlignment(pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caClient);
      this.FBackButton = pas["WEBLib.StdCtrls"].TButton.$create("Create$1",[this.FPanel]);
      this.FBackButton.SetAlignWithMargins(true);
      this.FBackButton.FMargins.SetTop(3);
      this.FBackButton.FMargins.SetLeft(3);
      this.FBackButton.FMargins.SetBottom(3);
      this.FBackButton.FMargins.SetRight(3);
      this.FBackButton.SetCaption("Back");
      this.FBackButton.SetAlign(pas["WEBLib.Controls"].TAlign.alTop);
      this.FBackButton.SetParent(this.FPanel);
      this.FBackButton.FOnClick = rtl.createCallback(this,"BackButtonClicked");
      this.FColorWheel = pas["WEBLib.TMSFNCColorWheel"].TTMSFNCColorWheel.$create("Create$1",[this.FPanel]);
      $impl.AsColorWheel(this.FColorWheel).SetControlAlignment(pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caClient);
      $impl.AsColorWheel(this.FColorWheel).SetControlMargins(3,0,3,3);
      $impl.AsColorWheel(this.FColorWheel).SetParent(this.FPanel);
      $impl.AsColorWheel(this.FColorWheel).FOnSelectedColorChanged = rtl.createCallback(this,"ColorWheelChange");
      return this;
    };
    this.FindItemByColor = function (AColor) {
      var Result = 0;
      var I = 0;
      var it = null;
      Result = -1;
      for (var $l1 = 0, $end2 = this.GetItems().GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = rtl.as(this.GetItems().GetItem$2(I),$mod.TTMSFNCColorSelectorItem);
        if ((it.FColor === AColor) && it.FCanSelect) {
          Result = it.GetIndex();
          break;
        };
      };
      return Result;
    };
    this.FindColorByItem = function (AItem) {
      var Result = 0;
      var I = 0;
      var it = null;
      Result = -1;
      for (var $l1 = 0, $end2 = this.GetItems().GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        it = rtl.as(this.GetItems().GetItem$2(I),$mod.TTMSFNCColorSelectorItem);
        if (it.GetIndex() === AItem) {
          Result = it.FColor;
          break;
        };
      };
      return Result;
    };
    this.ColorWheelActive = function () {
      var Result = false;
      Result = (this.FPanel != null) && (this.FPanel.FParent != null) && this.FPanel.FVisible && (this.FColorWheel != null) && (this.FColorWheel.FParent != null) && this.FColorWheel.FVisible;
      return Result;
    };
    this.InitializeDefault = function () {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.InitializeDefault.call(this);
      this.AddColors();
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCColorSelector",$mod.TTMSFNCCustomColorSelector,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomSelector"].TTMSFNCCustomSelector.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClasses([$mod.TTMSFNCColorSelector,$mod.TTMSFNCColorSelectorItem]);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Appearance",2,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorAppearance"],"FAppearance","SetAppearance");
    $r.addProperty("Rows",2,rtl.longint,"FRows","SetRows",{Default: 4});
    $r.addProperty("Columns",2,rtl.longint,"FColumns","SetColumns",{Default: 4});
    $r.addProperty("Items",3,$mod.$rtti["TTMSFNCColorSelectorItems"],"GetItems","SetItems$1");
    $r.addProperty("Mode",2,$mod.$rtti["TTMSFNCCustomColorSelectorMode"],"FMode","SetMode",{Default: $mod.TTMSFNCCustomColorSelectorMode.csmSimple});
    $r.addProperty("OnColorSelected",0,$mod.$rtti["TTMSFNCCustomSelectorColorSelected"],"FOnColorSelected","FOnColorSelected");
    $r.addProperty("OnColorDeselected",0,$mod.$rtti["TTMSFNCCustomSelectorColorDeselected"],"FOnColorDeselected","FOnColorDeselected");
    $r.addProperty("SelectedColor",3,pas["WEBLib.Graphics"].$rtti["TColor"],"GetSelectedColor","SetSelectedColor",{Default: -1});
    $r.addProperty("OnItemSelected",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemSelected"],"FOnItemSelected","FOnItemSelected");
    $r.addProperty("OnItemDeselected",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemDeselected"],"FOnItemDeselected","FOnItemDeselected");
    $r.addProperty("OnItemClick",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemClick"],"FOnItemClick","FOnItemClick");
    $r.addProperty("SelectedItemIndex",2,rtl.longint,"FSelectedItemIndex","SetSelectedItemIndex",{Default: -1});
    $r.addProperty("OnItemBeforeDrawBackground",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemBeforeDrawBackground"],"FOnItemBeforeDrawBackground","FOnItemBeforeDrawBackground");
    $r.addProperty("OnItemAfterDrawBackground",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemAfterDrawBackground"],"FOnItemAfterDrawBackground","FOnItemAfterDrawBackground");
    $r.addProperty("OnItemBeforeDrawContent",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemBeforeDrawContent"],"FOnItemBeforeDrawContent","FOnItemBeforeDrawContent");
    $r.addProperty("OnItemAfterDrawContent",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemAfterDrawContent"],"FOnItemAfterDrawContent","FOnItemAfterDrawContent");
    $r.addProperty("OnBeforeDraw",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorBeforeDraw"],"FOnBeforeDraw$1","FOnBeforeDraw$1");
    $r.addProperty("OnAfterDraw",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorAfterDraw"],"FOnAfterDraw$1","FOnAfterDraw$1");
    $r.addProperty("OnItemBeforeDrawText",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemBeforeDrawText"],"FOnItemBeforeDrawText","FOnItemBeforeDrawText");
    $r.addProperty("OnItemAfterDrawText",0,pas["WEBLib.TMSFNCCustomSelector"].$rtti["TTMSFNCCustomSelectorItemAfterDrawText"],"FOnItemAfterDrawText","FOnItemAfterDrawText");
  });
},["SysUtils","WEBLib.TMSFNCUtils","WEBLib.TMSFNCColorWheel"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.AsColorWheel = function (AColorWheel) {
    var Result = null;
    Result = rtl.as(AColorWheel,pas["WEBLib.TMSFNCColorWheel"].TTMSFNCColorWheel);
    return Result;
  };
});
rtl.module("WEBLib.TMSFNCToolBarRes",["System"],function () {
  "use strict";
  var $mod = this;
  this.TMSFNCTOOLBAREXPAND = "data:image\/PNG;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAABGdBTUEAALGPC\/xhBQAAAAlwSFlzAAAOvwAADr8B" + "OAVTJAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4zjOaXUAAAACVJREFUGFdj+P\/\/P07MEBYW9h8Xxi8J" + "AjglYACnBAzglMAEDAwARZ1DA4NRF38AAAAASUVORK5CYII=";
  this.TMSFNCTOOLBAREXPANDLARGE = $mod.TMSFNCTOOLBAREXPAND;
  this.TMSFNCTOOLBAREXPAND2 = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAABGdBTUEAALGPC\/xhBQAAAAlwSFlzAAAOvgAADr4" + "B6kKxwAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xNkRpr\/UAAAA3SURBVBhXY3j69KktLgyS\/I8LE5RsQxeE4jaQpCKIgSQIlgBi" + "RQYQADGgAqgSMABVkI2QYGAAANnukE\/t\/B6ZAAAAAElFTkSuQmCC";
  this.TMSFNCTOOLBAREXPAND2LARGE = $mod.TMSFNCTOOLBAREXPAND;
  this.TMSFNCTOOLBAROPTIONSMENU = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAJCAYAAAD+WDajAAAABGdBTUEAALGPC\/xhBQAAAAlwSFlzAAAOvwA" + "ADr8BOAVTJAAAABh0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4zjOaXUAAAACpJREFUKFNjwAvCwsL+48IM\/\/\/jxvh1YhOEYZz2giVg" + "AKcEDOCUwAQMDAAqj1EKDJG5XAAAAABJRU5ErkJggg==";
  this.TMSFNCTOOLBAROPTIONSMENULARGE = $mod.TMSFNCTOOLBAROPTIONSMENU;
  this.TMSFNCTOOLBARQUICKMENU = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAABGdBTUEAALGPC\/xhBQAAAAlwSFlzAAAOwgAADs" + "IBFShKgAAAABl0RVh0U29mdHdhcmUAcGFpbnQubmV0IDQuMC4xNkRpr\/UAAAAlSURBVBhXYwCC\/9gwEAApKAMbJl4SnY0igCQIw3gkcUowMP" + "wHALBNZJw15C+yAAAAAElFTkSuQmCC";
  this.TMSFNCTOOLBARQUICKMENU2 = "data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAcAAAAHCAYAAADEUlfTAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAA" + "AAJcEhZcwAADsMAAA7DAcdvqGQAAAAZdEVYdFNvZnR3YXJlAHBhaW50Lm5ldCA0LjAuMTZEaa\/1AAAAL0lEQVQYV2P4jxswwCRBNAYGESCA" + "IQHCIAIEYAIgAGejC8D4YEBQEqvE\/\/\/\/\/wMA7H6pV7j5gXMAAAAASUVORK5CYII=";
  $mod.$init = function () {
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCTOOLBAREXPAND);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCTOOLBAREXPAND2);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCTOOLBAROPTIONSMENU);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCTOOLBARQUICKMENU);
    pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.CreateFromResource($mod.TMSFNCTOOLBARQUICKMENU2);
  };
},["WEBLib.TMSFNCTypes"]);
rtl.module("WEBLib.Menus",["System","Classes","SysUtils","WEBLib.Controls","WEBLib.Graphics","Web"],function () {
  "use strict";
  var $mod = this;
  $mod.$rtti.$Class("TMainMenu");
  $mod.$rtti.$Class("TMenuItem");
  this.TMenuItemAutoFlag = {"0": "maAutomatic", maAutomatic: 0, "1": "maManual", maManual: 1, "2": "maParent", maParent: 2};
  $mod.$rtti.$Enum("TMenuItemAutoFlag",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TMenuItemAutoFlag});
  this.TMenuBreak = {"0": "mbNone", mbNone: 0, "1": "mbBreak", mbBreak: 1, "2": "mbBarBreak", mbBarBreak: 2};
  $mod.$rtti.$Enum("TMenuBreak",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TMenuBreak});
  $mod.$rtti.$Int("THelpContext",{minvalue: -2147483647, maxvalue: 2147483647, ordtype: 4});
  $mod.$rtti.$Int("TShortCut",{minvalue: 0, maxvalue: 65535, ordtype: 5});
  this.TMainMenuHamburgerMenuVisible = {"0": "hmAlways", hmAlways: 0, "1": "hmNever", hmNever: 1, "2": "hmResponsive", hmResponsive: 2};
  $mod.$rtti.$Enum("TMainMenuHamburgerMenuVisible",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TMainMenuHamburgerMenuVisible});
  $mod.$rtti.$MethodVar("TMainMenuChangeEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Source",$mod.$rtti["TMenuItem"]],["Rebuild",rtl.boolean]]), methodkind: 0});
  rtl.createClass($mod,"TMenuItem",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FOwner$1 = null;
      this.FCaption = "";
      this.FItems = null;
      this.FParentItem = null;
      this.FUpdateCount = 0;
      this.FOnClick = null;
      this.FChecked = false;
      this.FEnabled = false;
      this.FDefault = false;
      this.FAutoCheck = false;
      this.FHint = "";
      this.FAutoHotkeys = 0;
      this.FRadioItem = false;
      this.FGroupIndex = 0;
      this.FVisible = false;
      this.FShortCut = 0;
      this.FBreak = 0;
      this.FImageIndex = 0;
      this.FAutoLineReduction = 0;
      this.FHelpContext = 0;
      this.FElementClassName = "";
      this.FParentMenu = null;
    };
    this.$final = function () {
      this.FOwner$1 = undefined;
      this.FItems = undefined;
      this.FParentItem = undefined;
      this.FOnClick = undefined;
      this.FParentMenu = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.SetChecked = function (Value) {
      var Item = null;
      var OtherItem = null;
      var MenuOwner = null;
      var I = 0;
      if (this.FChecked !== Value) {
        this.FChecked = Value;
        if (this.FOwner != null) {
          MenuOwner = this.FOwner;
          if ($mod.TMenuItem.isPrototypeOf(this.FOwner) && Value) {
            Item = this.FOwner;
            for (var $l1 = 0, $end2 = Item.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
              I = $l1;
              OtherItem = rtl.getObject(Item.FItems.Get(I));
              if (OtherItem.FRadioItem && (OtherItem !== this)) OtherItem.SetChecked(false);
            };
          };
          while (!$mod.TCustomMainMenu.isPrototypeOf(MenuOwner) && (MenuOwner != null)) {
            MenuOwner = MenuOwner.FOwner;
          };
          if ($mod.TCustomMainMenu.isPrototypeOf(MenuOwner)) MenuOwner.UpdateElement();
        };
      };
    };
    this.SetCaption = function (Value) {
      var pm = null;
      this.FCaption = Value;
      pm = this.GetParentMenu();
      if (pm != null) pm.UpdateElement();
    };
    this.SetImageIndex = function (Value) {
      var pm = null;
      this.FImageIndex = Value;
      pm = this.GetParentMenu();
      if (pm != null) pm.UpdateElement();
    };
    this.SetEnabled = function (Value) {
      if (this.FEnabled !== Value) {
        this.FEnabled = Value;
        this.GetParentMenu().UpdateElement();
      };
    };
    this.GetCount = function () {
      var Result = 0;
      if (this.FItems === null) {
        Result = 0}
       else Result = this.FItems.GetCount();
      return Result;
    };
    this.Create$1 = function (AOwner) {
      this.FParentMenu = null;
      if ($mod.TMainMenu.isPrototypeOf(AOwner)) this.FParentMenu = AOwner;
      pas.Classes.TComponent.Create$1.call(this,AOwner);
      this.FAutoHotkeys = $mod.TMenuItemAutoFlag.maParent;
      this.FAutoLineReduction = $mod.TMenuItemAutoFlag.maParent;
      this.FImageIndex = -1;
      this.FHint = "";
      this.FCaption = "";
      this.FChecked = false;
      this.FEnabled = true;
      this.FDefault = false;
      this.FRadioItem = false;
      this.FVisible = true;
      this.FOwner$1 = AOwner;
      return this;
    };
    this.Assign = function (Source) {
      var i = 0;
      var srcmenu = null;
      var mnu = null;
      var pm = null;
      if ($mod.TMenuItem.isPrototypeOf(Source)) {
        srcmenu = rtl.as(Source,$mod.TMenuItem);
        this.FAutoCheck = srcmenu.FAutoCheck;
        this.FAutoHotkeys = srcmenu.FAutoHotkeys;
        this.FAutoLineReduction = srcmenu.FAutoLineReduction;
        this.FBreak = srcmenu.FBreak;
        this.FCaption = srcmenu.FCaption;
        this.FChecked = srcmenu.FChecked;
        this.FDefault = srcmenu.FDefault;
        this.FEnabled = srcmenu.FEnabled;
        this.FGroupIndex = srcmenu.FGroupIndex;
        this.FHelpContext = srcmenu.FHelpContext;
        this.FHint = srcmenu.FHint;
        this.FImageIndex = srcmenu.FImageIndex;
        this.FRadioItem = srcmenu.FRadioItem;
        this.FShortCut = srcmenu.FShortCut;
        this.FVisible = srcmenu.FVisible;
        this.FElementClassName = srcmenu.FElementClassName;
        pm = this.GetParentMenu();
        if (this.FParentItem != null) this.SetName(pm.GetUniqueName(srcmenu.FCaption));
        if (srcmenu.FItems != null) {
          if (this.FItems != null) {
            for (var $l1 = this.FItems.GetCount() - 1; $l1 >= 0; $l1--) {
              i = $l1;
              this.RemoveItem(this.GetParentMenu().FParent,rtl.getObject(this.FItems.Get(i)));
            };
            this.FItems.Clear();
          } else this.FItems = pas.Classes.TList.$create("Create$1");
          for (var $l2 = 0, $end3 = srcmenu.FItems.GetCount() - 1; $l2 <= $end3; $l2++) {
            i = $l2;
            mnu = $mod.TMenuItem.$create("Create$1",[pm.FOwner]);
            mnu.FParentMenu = pm;
            mnu.FParentItem = this;
            mnu.Assign(rtl.getObject(srcmenu.FItems.Get(i)));
            this.FItems.Add(mnu);
          };
        };
      };
    };
    this.BeginUpdate$1 = function () {
      this.FUpdateCount += 1;
    };
    this.EndUpdate$1 = function () {
      if (this.FUpdateCount > 0) {
        this.FUpdateCount -= 1;
        if (this.FUpdateCount === 0) this.GetParentMenu().UpdateElement();
      };
    };
    this.SetParentComponent = function (Value) {
      pas.Classes.TComponent.SetParentComponent.apply(this,arguments);
      this.FParentMenu = Value;
      if (Value !== null) if ($mod.TCustomMainMenu.isPrototypeOf(Value)) {
        Value.FItems.Add(this)}
       else if ($mod.TMenuItem.isPrototypeOf(Value)) Value.Add(this);
    };
    this.Add = function (Item) {
      this.Insert$1(this.GetCount(),Item);
    };
    this.Insert$1 = function (Index, Item) {
      if (this.FItems === null) this.FItems = pas.Classes.TList.$create("Create$1");
      this.FItems.Insert(Index,Item);
      Item.FParentItem = this;
      Item.GetParentMenu().UpdateElement();
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner$1;
      return Result;
    };
    this.GetParentMenu = function () {
      var Result = null;
      var AOwner = null;
      Result = null;
      AOwner = this.FParentMenu;
      while ((AOwner != null) && $mod.TMenuItem.isPrototypeOf(AOwner)) {
        AOwner = AOwner.FParentMenu;
      };
      if (AOwner != null) Result = AOwner;
      return Result;
    };
    this.GetChildren = function (Proc, Root) {
      var I = 0;
      if (this.FItems != null) for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        Proc(rtl.getObject(this.FItems.Get(I)));
      };
    };
    this.SetChildOrder = function (Child, Order) {
      var idx = 0;
      idx = this.FItems.IndexOf(Child);
      if ((idx >= 0) && (Order < this.FItems.GetCount())) {
        this.FItems.Move(idx,Order);
      };
    };
    this.RemoveItem = function (AOwner, AItem) {
      var I = 0;
      if (AItem.FItems != null) {
        for (var $l1 = AItem.FItems.GetCount() - 1; $l1 >= 0; $l1--) {
          I = $l1;
          this.RemoveItem(AOwner,rtl.getObject(AItem.FItems.Get(I)));
        };
      };
      AOwner.RemoveComponent(AItem);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("AutoCheck",0,rtl.boolean,"FAutoCheck","FAutoCheck",{Default: false});
    $r.addProperty("AutoHotkeys",0,$mod.$rtti["TMenuItemAutoFlag"],"FAutoHotkeys","FAutoHotkeys",{Default: $mod.TMenuItemAutoFlag.maParent});
    $r.addProperty("AutoLineReduction",0,$mod.$rtti["TMenuItemAutoFlag"],"FAutoLineReduction","FAutoLineReduction",{Default: $mod.TMenuItemAutoFlag.maParent});
    $r.addProperty("Break",0,$mod.$rtti["TMenuBreak"],"FBreak","FBreak",{Default: $mod.TMenuBreak.mbNone});
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("Checked",2,rtl.boolean,"FChecked","SetChecked",{Default: false});
    $r.addProperty("Default",0,rtl.boolean,"FDefault","FDefault",{Default: false});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("GroupIndex",0,rtl.byte,"FGroupIndex","FGroupIndex",{Default: 0});
    $r.addProperty("HelpContext",0,$mod.$rtti["THelpContext"],"FHelpContext","FHelpContext",{Default: 0});
    $r.addProperty("Hint",0,rtl.string,"FHint","FHint");
    $r.addProperty("ImageIndex",2,rtl.longint,"FImageIndex","SetImageIndex",{Default: -1});
    $r.addProperty("RadioItem",0,rtl.boolean,"FRadioItem","FRadioItem",{Default: false});
    $r.addProperty("ShortCut",0,$mod.$rtti["TShortCut"],"FShortCut","FShortCut",{Default: 0});
    $r.addProperty("Visible",0,rtl.boolean,"FVisible","FVisible",{Default: true});
    $r.addProperty("ElementClassName",0,pas["WEBLib.Controls"].$rtti["TElementClassName"],"FElementClassName","FElementClassName");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
  });
  $mod.$rtti.$Class("TMainMenuAppearance");
  rtl.createClass($mod,"THamburgerMenu",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FVisible = 0;
      this.FCaption = "";
      this.FBackgroundColor = 0;
      this.FCaptionColor = 0;
      this.FResponsiveMaxWidth = 0;
    };
    this.$final = function () {
      this.FOwner = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetVisible = function (Value) {
      if (this.FVisible !== Value) {
        this.FVisible = Value;
        this.FOwner.FOwner.UpdateElement();
      };
    };
    this.SetBackgroundColor = function (Value) {
      if (this.FBackgroundColor !== Value) {
        this.FBackgroundColor = Value;
        this.FOwner.FOwner.UpdateElement();
      };
    };
    this.SetCaption = function (Value) {
      if (this.FCaption !== Value) {
        this.FCaption = Value;
        this.FOwner.FOwner.UpdateElement();
      };
    };
    this.SetCaptionColor = function (Value) {
      if (this.FCaptionColor !== Value) {
        this.FCaptionColor = Value;
        this.FOwner.FOwner.UpdateElement();
      };
    };
    this.SetResponsiveMaxWidth = function (Value) {
      if (this.FResponsiveMaxWidth !== Value) {
        this.FResponsiveMaxWidth = Value;
        this.FOwner.FOwner.UpdateElement();
      };
    };
    this.Create$1 = function (AOwner) {
      this.FBackgroundColor = 12632256;
      this.FCaption = "Menu";
      this.FCaptionColor = 16777215;
      this.FVisible = $mod.TMainMenuHamburgerMenuVisible.hmResponsive;
      this.FResponsiveMaxWidth = 768;
      this.FOwner = AOwner;
      return this;
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
    this.Assign = function (Source) {
      pas.Classes.TPersistent.Assign.apply(this,arguments);
      if ($mod.THamburgerMenu.isPrototypeOf(Source)) {
        this.FBackgroundColor = rtl.as(Source,$mod.THamburgerMenu).FBackgroundColor;
        this.FCaption = rtl.as(Source,$mod.THamburgerMenu).FCaption;
        this.FCaptionColor = rtl.as(Source,$mod.THamburgerMenu).FCaptionColor;
        this.FVisible = rtl.as(Source,$mod.THamburgerMenu).FVisible;
        this.FResponsiveMaxWidth = rtl.as(Source,$mod.THamburgerMenu).FResponsiveMaxWidth;
      };
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner;
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("Caption",2,rtl.string,"FCaption","SetCaption");
    $r.addProperty("CaptionColor",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FCaptionColor","SetCaptionColor",{Default: 16777215});
    $r.addProperty("BackgroundColor",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FBackgroundColor","SetBackgroundColor",{Default: 12632256});
    $r.addProperty("Visible",2,$mod.$rtti["TMainMenuHamburgerMenuVisible"],"FVisible","SetVisible",{Default: $mod.TMainMenuHamburgerMenuVisible.hmResponsive});
    $r.addProperty("ResponsiveMaxWidth",2,rtl.longint,"FResponsiveMaxWidth","SetResponsiveMaxWidth",{Default: 768});
  });
  rtl.createClass($mod,"TMainMenuAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FBackgroundColor = 0;
      this.FHoverFontColor = 0;
      this.FHoverColor = 0;
      this.FImageURLs = null;
      this.FHamburgerMenu = null;
      this.FImageSize = 0;
      this.FSubmenuIndicator = "";
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FImageURLs = undefined;
      this.FHamburgerMenu = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetBackgroundColor = function (Value) {
      if (this.FBackgroundColor !== Value) {
        this.FBackgroundColor = Value;
        this.FOwner.UpdateElement();
      };
    };
    this.SetHoverColor = function (Value) {
      if (this.FHoverColor !== Value) {
        this.FHoverColor = Value;
        this.FOwner.UpdateElement();
      };
    };
    this.SetHoverFontColor = function (Value) {
      if (this.FHoverFontColor !== Value) {
        this.FHoverFontColor = Value;
        this.FOwner.UpdateElement();
      };
    };
    this.SetImageURLs = function (Value) {
      this.FImageURLs.Assign(Value);
    };
    this.SetImageSize = function (Value) {
      if (this.FImageSize !== Value) {
        this.FImageSize = Value;
        this.FOwner.UpdateElement();
      };
    };
    this.SetSubmenuIndicator = function (Value) {
      if (this.FSubmenuIndicator !== Value) {
        this.FSubmenuIndicator = Value;
        this.FOwner.UpdateElement();
      };
    };
    this.HandleImageURLsChanged = function (Sender) {
      this.FOwner.UpdateElement();
    };
    this.Create$1 = function (AOwner) {
      this.FBackgroundColor = 0xF0F0F0;
      this.FHoverColor = 14120960;
      this.FHoverFontColor = 197379;
      this.FHamburgerMenu = $mod.THamburgerMenu.$create("Create$1",[this]);
      this.FImageURLs = pas.Classes.TStringList.$create("Create$1");
      this.FImageURLs.FOnChange = rtl.createCallback(this,"HandleImageURLsChanged");
      this.FImageSize = 16;
      this.FSubmenuIndicator = "&#9658;";
      this.FOwner = AOwner;
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FHamburgerMenu");
      rtl.free(this,"FImageURLs");
      pas.System.TObject.Destroy.call(this);
    };
    this.Assign = function (Source) {
      pas.Classes.TPersistent.Assign.apply(this,arguments);
      if ($mod.TMainMenu.isPrototypeOf(Source)) {
        this.FBackgroundColor = rtl.as(Source,$mod.TMainMenuAppearance).FBackgroundColor;
        this.FHoverColor = rtl.as(Source,$mod.TMainMenuAppearance).FHoverColor;
        this.FHoverFontColor = rtl.as(Source,$mod.TMainMenuAppearance).FHoverFontColor;
        this.FHamburgerMenu.Assign(rtl.as(Source,$mod.TMainMenuAppearance).FHamburgerMenu);
        this.FImageURLs.Assign(rtl.as(Source,$mod.TMainMenuAppearance).FImageURLs);
        this.FImageSize = rtl.as(Source,$mod.TMainMenuAppearance).FImageSize;
        this.FSubmenuIndicator = rtl.as(Source,$mod.TMainMenuAppearance).FSubmenuIndicator;
      };
    };
    this.GetOwner = function () {
      var Result = null;
      Result = this.FOwner;
      return Result;
    };
    var $r = this.$rtti;
    $r.addProperty("BackgroundColor",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FBackgroundColor","SetBackgroundColor",{Default: 15790320});
    $r.addProperty("HamburgerMenu",0,$mod.$rtti["THamburgerMenu"],"FHamburgerMenu","FHamburgerMenu");
    $r.addProperty("HoverColor",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FHoverColor","SetHoverColor",{Default: 14120960});
    $r.addProperty("HoverFontColor",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FHoverFontColor","SetHoverFontColor",{Default: 197379});
    $r.addProperty("ImageURLs",2,pas.Classes.$rtti["TStringList"],"FImageURLs","SetImageURLs");
    $r.addProperty("ImageSize",2,rtl.longint,"FImageSize","SetImageSize",{Default: 16});
    $r.addProperty("SubmenuIndicator",2,rtl.string,"FSubmenuIndicator","SetSubmenuIndicator");
  });
  rtl.createClass($mod,"TCustomMainMenu",pas["WEBLib.Controls"].TCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.Controls"].TCustomControl.$init.call(this);
      this.FItems = null;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FItems = undefined;
      this.FOnChange = undefined;
      pas["WEBLib.Controls"].TCustomControl.$final.call(this);
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
      if (this.IsUpdating()) return;
      if (this.GetElementHandle() != null) this.UpdateElement();
    };
    this.UpdateElement = function () {
      pas["WEBLib.Controls"].TControl.UpdateElement.call(this);
      if (this.IsUpdating()) return;
    };
    this.CreateInitialize = function () {
      pas["WEBLib.Controls"].TCustomControl.CreateInitialize.call(this);
      this.FItems = $mod.TMenuItem.$create("Create$1",[this]);
      this.FItems.FParentMenu = this;
    };
    this.Destroy = function () {
      rtl.free(this,"FItems");
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.GetChildren = function (Proc, Root) {
      var I = 0;
      if ((this.FItems != null) && (this.FItems.FItems != null)) {
        for (var $l1 = 0, $end2 = this.FItems.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          Proc(rtl.getObject(this.FItems.FItems.Get(I)));
        };
      };
    };
    this.SetChildOrder = function (Child, Order) {
      var idx = 0;
      idx = this.FItems.FItems.IndexOf(Child);
      if ((idx >= 0) && (Order < this.FItems.FItems.GetCount())) {
        this.FItems.FItems.Move(idx,Order);
      };
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Items",0,$mod.$rtti["TMenuItem"],"FItems","");
    $r.addProperty("OnChange",0,$mod.$rtti["TMainMenuChangeEvent"],"FOnChange","FOnChange");
  });
  rtl.createClass($mod,"TMainMenu",$mod.TCustomMainMenu,function () {
    this.$init = function () {
      $mod.TCustomMainMenu.$init.call(this);
      this.FMenu = null;
      this.FMainMenu = false;
      this.FMenuIndex = 0;
      this.FAppearance = null;
      this.FContainer$1 = null;
    };
    this.$final = function () {
      this.FMenu = undefined;
      this.FAppearance = undefined;
      this.FContainer$1 = undefined;
      $mod.TCustomMainMenu.$final.call(this);
    };
    this.HandleChange = function (Event) {
      var Result = false;
      var h = null;
      var it = null;
      Result = true;
      h = Event.target;
      it = this.GetItemByName(this.FItems,h.id);
      if (it != null) {
        if (this.FOnChange != null) this.FOnChange(this,it,false);
        if (it.FOnClick != null) it.FOnClick(it);
      };
      return Result;
    };
    this.Loaded = function () {
      $mod.TCustomMainMenu.Loaded.call(this);
      if (this.IsUpdating()) return;
      if (this.GetElementHandle() != null) this.UpdateElement();
    };
    this.UpdateElement = function () {
      var MenuStyle = "";
      var MenuColorStyle = "";
      var MenuResponsiveStyle = "";
      var MenuImageSize = "";
      var ElHandle = null;
      var ElLabel = null;
      var ElSpan = null;
      var ElIcon = null;
      var ElCheckBox = null;
      var ElStyle = null;
      var ElScript = null;
      var ElItems = null;
      $mod.TCustomMainMenu.UpdateElement.call(this);
      if (this.IsUpdating()) return;
      if (!(this.GetElementHandle() != null) && !(this.FContainer$1 != null)) return;
      if (this.FContainer$1 != null) {
        ElHandle = this.FContainer$1.GetElementHandle();
        this.SetVisible(false);
      } else {
        ElHandle = this.GetElementHandle();
        ElHandle.style.setProperty("top","0");
        ElHandle.style.setProperty("left","0");
        if ((pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && !(this.FContainer$1 != null)) this.GetElementHandle().style.setProperty("background-color","silver");
      };
      this.FMenu = document.getElementById(this.FName + "menu");
      if (this.FMenu != null) this.FMenu.parentElement.removeChild(this.FMenu);
      this.FMenu = document.createElement("NAV");
      this.FMenu.setAttribute("id",this.FName + "menu");
      this.FMenu.innerHTML = "";
      if (this.FContainer$1 != null) {
        this.FMenu.style.setProperty("top","0");
        this.FMenu.style.setProperty("left","0");
        this.FMenu.style.setProperty("position","absolute");
        this.FMenu.style.setProperty("width","100%");
      };
      ElHandle.innerHTML = "";
      ElHandle.style.setProperty("overflow","visible");
      if (this.FAppearance.FHamburgerMenu.FVisible !== $mod.TMainMenuHamburgerMenuVisible.hmAlways) {
        MenuResponsiveStyle = "  #" + this.FName + "menu .main-menu {\r" + "    display: block;\r" + "  }\r" + "  #toggle-menu {\r" + "    display: none;\r" + "  }\r" + "  #" + this.FName + "menu ul span.drop-label {\r" + "    display: inline-block;\r" + "  }\r" + "  #" + this.FName + "menu li {\r" + "    float: left;\r" + "    border-width: 0 1px 0 0;\r" + "  }\r" + "  #" + this.FName + "menu .sub-menu li {\r" + "    float: none;\r" + "  }\r" + "  #" + this.FName + "menu .sub-menu {\r" + "    border-width: 0;\r" + "    margin: 0;\r" + "    position: absolute;\r" + "    top: 100%;\r" + "    left: 0;\r" + "    min-width: 12em;\r" + "    z-index: 9999999;\r" + "\t   white-space: nowrap;\r" + "  }\r" + "  #" + this.FName + "menu .sub-menu,\r" + "  #" + this.FName + 'menu input[type="checkbox"]:checked + .sub-menu {\r' + "    display: none;\r" + "  }\r" + "  #" + this.FName + "menu .sub-menu li {\r" + "    border-width: 1px;\r" + "  }\r" + "  #" + this.FName + "menu .sub-menu .sub-menu {\r" + "    top: 0;\r" + "    left: 100%;\r" + "  }\r" + "  #" + this.FName + 'menu li:hover > input[type="checkbox"] + .sub-menu {\r' + "    display: block;\r" + "  }\r";
        if (this.FAppearance.FHamburgerMenu.FVisible === $mod.TMainMenuHamburgerMenuVisible.hmResponsive) {
          MenuResponsiveStyle = "@media only screen and (min-width: " + pas.SysUtils.IntToStr(this.FAppearance.FHamburgerMenu.FResponsiveMaxWidth) + "px) {\r" + MenuResponsiveStyle + "}";
        };
      };
      if (this.FAppearance.FImageSize > 0) {
        MenuImageSize = "  width: " + pas.SysUtils.IntToStr(this.FAppearance.FImageSize) + "px;\r" + "  height: " + pas.SysUtils.IntToStr(this.FAppearance.FImageSize) + "px;\r";
      };
      MenuStyle = "#" + this.FName + "menu ul {\r" + "  margin: 0;\r" + "  padding: 0;\r" + "}\r" + "#" + this.FName + "menu .main-menu {\r" + "  display: none;\r" + "}\r" + "#" + this.FName + "menu label img.icon," + "#" + this.FName + "menu label span.checked {\r" + MenuImageSize + "  margin-right: 10px;\r" + "  float: left;\r" + "}\r" + "#tm:checked + .main-menu {\r" + "  display: block;\r" + "}\r" + "#" + this.FName + 'menu input[type="checkbox"],\r' + "#" + this.FName + "menu ul span.drop-label {\r" + "  display: none;\r" + "}\r" + "#" + this.FName + "menu li,\r" + "#toggle-menu,\r" + "#" + this.FName + "menu .sub-menu {\r" + "  border-width: 1px;\r" + "  border-style: solid;\r" + "  border-color: rgba(0, 0, 0, .05);\r" + "  border-bottom: 0px;\r" + "  border-top: 0px;\r" + "}\r" + "#" + this.FName + "menu li,\r" + "#toggle-menu {\r" + "  border-width: 0 0 3px;\r" + "}\r" + "#" + this.FName + "menu .sub-menu {\r" + "  border-width: 1px 1px 0;\r" + "  margin: 0 1em;\r" + "}\r" + "#" + this.FName + "menu .sub-menu li:first-child {\r" + "  border-top: 1px solid;\r" + "  border-color: rgba(0, 0, 0, .05);\r" + "}\r" + "#" + this.FName + "menu .sub-menu li:last-child {\r" + "  border-bottom: 1px solid;\r" + "  border-color: rgba(0, 0, 0, .05);\r" + "}\r" + "#" + this.FName + "menu li,\r" + "#toggle-menu,\r" + "#" + this.FName + "menu li label {\r" + "  position: relative;\r" + "  display: block;\r" + "}\r" + "#toggle-menu,\r" + "#" + this.FName + "menu li label { \r" + "  padding: 0.75em 1.5em;\r" + "  text-decoration: none;\r" + "}\r" + "#" + this.FName + "menu li span.menu-separator { \r" + "  display: block;\r" + "  width: 100%;\r" + "  height: 1px;\r" + "  background-color: rgba(0, 0, 0, .05);\r" + "}\r" + "#" + this.FName + "menu .sub-menu {\r" + "  display: none;\r" + "}\r" + "#" + this.FName + 'menu input[type="checkbox"]:checked + .sub-menu {\r' + "  display: block;\r" + "  z-index: 3000;\r" + "}\r" + "#" + this.FName + "menu span.drop-icon {\r" + "  float: right;\r" + "  margin-left: 10px;\r" + "}\r" + "#" + this.FName + "menu span.hamburger-icon {\r" + "  float: right;\r" + "  padding: 0;\r" + "  margin: 0;\r" + "  font-weight: 900;\r" + "}\r" + "@media only screen and (max-width: 64em) and (min-width: 52.01em) {\r" + "  #" + this.FName + "menu li {\r" + "\/*    width: 33.333%;*\/\r" + "    width: auto;\r" + "  }\r" + "  #" + this.FName + "menu .sub-menu li {\r" + "    width: auto;\r" + "  }\r" + "}\r";
      if (this.FElementClassName === "") {
        MenuColorStyle = "" + "#" + this.FName + "menu .sub-menu {\r" + "  background-color: " + pas["WEBLib.Graphics"].ColorToHTML(this.FAppearance.FHamburgerMenu.FBackgroundColor) + ";\r" + "}\r" + "#" + this.FName + "menu li,\r" + "#toggle-menu,\r" + "#" + this.FName + "menu li label {\r" + "}\r" + "#toggle-menu {\r" + "  background-color: " + pas["WEBLib.Graphics"].ColorToHTML(this.FAppearance.FHamburgerMenu.FBackgroundColor) + ";\r" + "  color: " + pas["WEBLib.Graphics"].ColorToHTML(this.FAppearance.FHamburgerMenu.FCaptionColor) + ";\r" + "}\r" + "#" + this.FName + "menu .main-menu li label {\r" + "  background-color: " + pas["WEBLib.Graphics"].ColorToHTML(this.FAppearance.FBackgroundColor) + ";\r" + "}\r" + "#" + this.FName + "menu li label:hover {\r" + "  background-color: " + pas["WEBLib.Graphics"].ColorToHTML(this.FAppearance.FHoverColor) + ";\r" + "  color: " + pas["WEBLib.Graphics"].ColorToHTML(this.FAppearance.FHoverFontColor) + ";\r" + "}\r" + "#" + this.FName + "menu .sub-menu label:hover {\r" + "  background-color: " + pas["WEBLib.Graphics"].ColorToHTML(this.FAppearance.FHoverColor) + ";\r" + "  color: " + pas["WEBLib.Graphics"].ColorToHTML(this.FAppearance.FHoverFontColor) + ";\r" + "}\r";
      };
      MenuStyle = MenuStyle + MenuColorStyle + MenuResponsiveStyle;
      this.FMainMenu = true;
      this.FMenuIndex = 0;
      ElStyle = document.createElement("STYLE");
      ElStyle.innerHTML = MenuStyle;
      ElScript = document.createElement("SCRIPT");
      ElScript.innerHTML = "function " + this.FName + "MenuClick(ctrl){" + "  el = ctrl.parentElement.parentElement;" + '  el.style.display = "none";' + '  setTimeout(function(){el.style.removeProperty("display")}, 25);' + "}";
      ElLabel = document.createElement("LABEL");
      ElLabel.setAttribute("for","tm");
      ElLabel.setAttribute("id","toggle-menu");
      ElLabel.innerHTML = this.FAppearance.FHamburgerMenu.FCaption;
      ElSpan = document.createElement("SPAN");
      ElSpan.setAttribute("class","drop-label");
      ElLabel.appendChild(ElSpan);
      ElIcon = document.createElement("SPAN");
      ElIcon.setAttribute("class","hamburger-icon");
      ElIcon.innerHTML = "&#9776;";
      ElSpan.appendChild(ElIcon);
      ElCheckBox = document.createElement("INPUT");
      ElCheckBox.setAttribute("type","checkbox");
      ElCheckBox.setAttribute("id","tm");
      this.FMenu.appendChild(ElStyle);
      this.FMenu.appendChild(ElScript);
      this.FMenu.appendChild(ElLabel);
      this.FMenu.appendChild(ElCheckBox);
      ElItems = this.GetMenuSource(this.FItems);
      if (ElItems !== null) this.FMenu.appendChild(ElItems);
      ElHandle.appendChild(this.FMenu);
    };
    this.GetMenuSource = function (Item) {
      var Result = null;
      var I = 0;
      var it = null;
      var MenuClass = "";
      var ElListItem = null;
      var ElLabel = null;
      var ElCheckBox = null;
      var ElSymbol = null;
      Result = null;
      if ((Item.FItems != null) && (Item.FItems.GetCount() > 0)) {
        Result = document.createElement("UL");
        if (this.FMainMenu) {
          this.FMainMenu = false;
          MenuClass = "main-menu";
        } else MenuClass = "sub-menu";
        this.FMenuIndex = this.FMenuIndex + 1;
        Result.setAttribute("class",MenuClass);
        for (var $l1 = 0, $end2 = Item.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          it = rtl.getObject(Item.FItems.Get(I));
          if (it.FVisible) {
            ElListItem = document.createElement("LI");
            if (it.FCaption !== "-") {
              ElLabel = document.createElement("LABEL");
              ElLabel.setAttribute("class","drop-label");
              if ((it.FImageIndex >= 0) && (this.FAppearance.FImageURLs.GetCount() > it.FImageIndex)) {
                ElLabel.innerHTML = '<img class="icon" src="' + this.FAppearance.FImageURLs.Get(it.FImageIndex) + '">'}
               else if (it.FChecked) {
                if (it.FRadioItem) {
                  ElLabel.innerHTML = '<span class="checked">&#9679;<\/span>'}
                 else ElLabel.innerHTML = '<span class="checked">&#10004;<\/span>';
              };
              ElLabel.innerHTML = ElLabel.innerHTML + it.FCaption;
            } else {
              ElLabel = document.createElement("SPAN");
              ElLabel.setAttribute("class","menu-separator");
              ElLabel.innerHTML = "";
            };
            if ((it.FItems != null) && (it.FItems.GetCount() > 0)) {
              ElSymbol = document.createElement("SPAN");
              ElSymbol.setAttribute("class","drop-icon");
              ElSymbol.innerHTML = this.FAppearance.FSubmenuIndicator;
              ElLabel.setAttribute("for","sm" + pas.SysUtils.IntToStr(this.FMenuIndex));
              ElLabel.appendChild(ElSymbol);
              ElCheckBox = document.createElement("INPUT");
              ElCheckBox.setAttribute("type","checkbox");
              ElCheckBox.setAttribute("id","sm" + pas.SysUtils.IntToStr(this.FMenuIndex));
              ElListItem.appendChild(ElLabel);
              ElListItem.appendChild(ElCheckBox);
              ElListItem.appendChild(this.GetMenuSource(it));
            } else {
              ElLabel.setAttribute("for","tm");
              ElLabel.setAttribute("id",it.FName);
              if (it.FEnabled) {
                if (MenuClass === "sub-menu") {
                  if (it.FEnabled) ElLabel.setAttribute("onMouseUp",this.FName + "MenuClick(this);");
                };
                ElLabel.addEventListener("click",rtl.createCallback(this,"HandleChange"));
              } else ElLabel.style.setProperty("color","gray");
              ElListItem.appendChild(ElLabel);
            };
            Result.appendChild(ElListItem);
          };
        };
      };
      return Result;
    };
    this.GetItemByName = function (AMenu, Name) {
      var Result = null;
      var I = 0;
      var it = null;
      Result = null;
      if (AMenu.FItems != null) {
        for (var $l1 = 0, $end2 = AMenu.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          it = rtl.getObject(AMenu.FItems.Get(I));
          if (it.FName === Name) {
            Result = it;
            if (it.FOnClick != null) Result.FOnClick = it.FOnClick;
            return Result;
          };
          if (!(Result != null)) Result = this.GetItemByName(it,Name);
        };
      };
      return Result;
    };
    this.GetUniqueName = function (AName) {
      var Result = "";
      var i = 0;
      var j = 0;
      var id = 0;
      var found = false;
      id = 1;
      if (AName === "") AName = this.FName + "item";
      do {
        j = pas.System.Pos(" ",AName);
        if (j > 0) pas.System.Delete({get: function () {
            return AName;
          }, set: function (v) {
            AName = v;
          }},j,1);
      } while (!(j === 0));
      do {
        Result = AName + pas.SysUtils.IntToStr(id);
        found = true;
        for (var $l1 = 0, $end2 = this.FOwner.GetComponentCount() - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          if (this.FOwner.GetComponent(i).FName === Result) {
            found = false;
            id += 1;
            break;
          };
        };
      } while (!found);
      return Result;
    };
    this.CreateInitialize = function () {
      $mod.TCustomMainMenu.CreateInitialize.call(this);
      this.FAppearance = $mod.TMainMenuAppearance.$create("Create$1",[this]);
      this.FContainer$1 = null;
      this.FMainMenu = true;
      this.FMenuIndex = 0;
      this.SetTop(0);
      this.SetLeft(0);
      this.SetWidth(100);
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        this.SetElementPosition(pas["WEBLib.Controls"].TElementPosition.epRelative);
        this.SetWidthPercent(100);
        this.SetWidthStyle(pas["WEBLib.Controls"].TSizeStyle.ssPercent);
      };
    };
    this.CreateElement = function () {
      var Result = null;
      var LLabel = null;
      if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
        Result = document.createElement("DIV");
        LLabel = document.createElement("DIV");
        LLabel.innerHTML = "TWebMainMenu";
        this.SetBorderStyle(pas["WEBLib.Controls"].TBorderStyle.bsSingle);
        LLabel.setAttribute("align","center");
        LLabel.style.setProperty("border","1px solid gray");
        LLabel.style.setProperty("vertical-align","middle");
        LLabel.style.setProperty("display","table-cell");
        Result.appendChild(LLabel);
      } else {
        Result = document.createElement("DIV");
      };
      return Result;
    };
    this.Destroy = function () {
      rtl.free(this,"FAppearance");
      $mod.TCustomMainMenu.Destroy.call(this);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Appearance",0,$mod.$rtti["TMainMenuAppearance"],"FAppearance","FAppearance");
    $r.addProperty("Container",0,pas["WEBLib.Controls"].$rtti["TControl"],"FContainer$1","FContainer$1");
  });
  rtl.createClass($mod,"TWebMainMenu",$mod.TMainMenu,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
});
rtl.module("WEBLib.TMSFNCToolBar",["System","Classes","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCCustomControl","WEBLib.Controls","Types","WEBLib.TMSFNCBitmapSelector","WEBLib.TMSFNCPopup","WEBLib.TMSFNCTypes","WEBLib.TMSFNCBitmapContainer","WEBLib.StdCtrls","WEBLib.TMSFNCColorSelector","WEBLib.TMSFNCToolBarRes","WEBLib.TMSFNCGraphicsTypes","contnrs","WEBLib.Menus","WEBLib.ExtCtrls"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 1;
  this.BLD_VER = 4;
  $mod.$rtti.$Class("TTMSFNCCustomToolBar");
  $mod.$rtti.$Class("TTMSFNCCustomDockPanel");
  $mod.$rtti.$Class("TTMSFNCCustomToolBarSeparator");
  $mod.$rtti.$Class("TTMSFNCDefaultToolBarButton");
  $mod.$rtti.$Class("TTMSFNCToolBarButton");
  $mod.$rtti.$Class("TTMSFNCToolBarDropDownButton");
  rtl.createClass($mod,"TTMSFNCToolBarCustomButtonAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FHoverStroke = null;
      this.FDownFill = null;
      this.FNormalFill = null;
      this.FDownStroke = null;
      this.FDisabledFill = null;
      this.FNormalStroke = null;
      this.FDisabledStroke = null;
      this.FHoverFill = null;
      this.FCorners = {};
      this.FRounding = 0.0;
      this.FTransparent = false;
      this.FShowInnerStroke = false;
      this.FInnerStroke = null;
      this.FFlatStyle = false;
      this.FOnChange = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FHoverStroke = undefined;
      this.FDownFill = undefined;
      this.FNormalFill = undefined;
      this.FDownStroke = undefined;
      this.FDisabledFill = undefined;
      this.FNormalStroke = undefined;
      this.FDisabledStroke = undefined;
      this.FHoverFill = undefined;
      this.FCorners = undefined;
      this.FInnerStroke = undefined;
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetDisabledFill = function (Value) {
      this.FDisabledFill.Assign(Value);
    };
    this.SetDisabledStroke = function (Value) {
      this.FDisabledStroke.Assign(Value);
    };
    this.SetDownFill = function (Value) {
      this.FDownFill.Assign(Value);
    };
    this.SetDownStroke = function (Value) {
      this.FDownStroke.Assign(Value);
    };
    this.SetHoverFill = function (Value) {
      this.FHoverFill.Assign(Value);
    };
    this.SetHoverStroke = function (Value) {
      this.FHoverStroke.Assign(Value);
    };
    this.SetNormalFill = function (Value) {
      this.FNormalFill.Assign(Value);
    };
    this.SetNormalStroke = function (Value) {
      this.FNormalStroke.Assign(Value);
    };
    this.SetCorners = function (Value) {
      if (rtl.neSet(this.FCorners,Value)) {
        this.FCorners = rtl.refSet(Value);
        this.Changed();
      };
    };
    this.SetRounding = function (Value) {
      if (this.FRounding !== Value) {
        this.FRounding = Value;
        this.Changed();
      };
    };
    this.SetInnerStroke = function (Value) {
      this.FInnerStroke.Assign(Value);
    };
    this.SetShowInnerStroke = function (Value) {
      if (this.FShowInnerStroke !== Value) {
        this.FShowInnerStroke = Value;
        this.Changed();
      };
    };
    this.SetTransparent = function (Value) {
      if (this.FTransparent !== Value) {
        this.FTransparent = Value;
        this.Changed();
      };
    };
    this.IsRoundingStored = function () {
      var Result = false;
      Result = this.FRounding !== 3;
      return Result;
    };
    this.SetFlatStyle = function (Value) {
      var c = null;
      var I = 0;
      if (this.FFlatStyle !== Value) {
        this.FFlatStyle = Value;
        if (this.FOwner != null) {
          for (var $l1 = 0, $end2 = this.FOwner.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            c = this.FOwner.GetControls(I);
            if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FAppearance.SetFlatStyle(this.FFlatStyle);
            if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBar).FAppearance.SetFlatStyle(this.FFlatStyle);
          };
        };
        this.Changed();
      };
    };
    this.FillChanged = function (Sender) {
      this.Changed();
    };
    this.StrokeChanged = function (Sender) {
      this.Changed();
    };
    this.Changed = function () {
      if (this.FOwner != null) {
        this.FOwner.AppearanceChanged()}
       else if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCToolBarCustomButtonAppearance.isPrototypeOf(Source)) {
        this.FNormalFill.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FNormalFill);
        this.FDisabledFill.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FDisabledFill);
        this.FHoverFill.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FHoverFill);
        this.FDownFill.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FDownFill);
        this.FNormalStroke.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FNormalStroke);
        this.FDisabledStroke.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FDisabledStroke);
        this.FHoverStroke.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FHoverStroke);
        this.FDownStroke.Assign(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FDownStroke);
        this.FRounding = rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FRounding;
        this.FCorners = rtl.refSet(rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FCorners);
        this.FShowInnerStroke = rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FShowInnerStroke;
        this.FTransparent = rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FTransparent;
        this.FFlatStyle = rtl.as(Source,$mod.TTMSFNCToolBarCustomButtonAppearance).FFlatStyle;
      } else pas.Classes.TPersistent.Assign.apply(this,arguments);
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FCorners = rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight);
      this.FRounding = 3;
      this.FTransparent = false;
      this.FShowInnerStroke = true;
      this.FFlatStyle = false;
      this.FNormalFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient,16777215]);
      this.FHoverFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient,16777215]);
      this.FDownFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient,16777215]);
      this.FDisabledFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,13882323]);
      this.FNormalStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FInnerStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,16777215]);
      this.FHoverStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FDownStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FDisabledStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FNormalFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FHoverFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FDownFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FDisabledFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FInnerStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FNormalStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FHoverStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FDownStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FDisabledStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FNormalFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(249,251,252));
      this.FNormalFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(230,235,235));
      this.FNormalFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(220,220,236));
      this.FNormalFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(220,225,236));
      this.FHoverFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(229,231,232));
      this.FHoverFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(210,215,215));
      this.FHoverFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,200,216));
      this.FHoverFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,205,216));
      this.FDownFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(219,221,222));
      this.FDownFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,205,205));
      this.FDownFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(190,190,206));
      this.FDownFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(190,195,206));
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FNormalFill");
      rtl.free(this,"FHoverFill");
      rtl.free(this,"FDownFill");
      rtl.free(this,"FDisabledFill");
      rtl.free(this,"FInnerStroke");
      rtl.free(this,"FNormalStroke");
      rtl.free(this,"FHoverStroke");
      rtl.free(this,"FDownStroke");
      rtl.free(this,"FDisabledStroke");
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TTMSFNCToolBarButtonAppearance",$mod.TTMSFNCToolBarCustomButtonAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("Transparent",2,rtl.boolean,"FTransparent","SetTransparent",{Default: false});
    $r.addProperty("ShowInnerStroke",2,rtl.boolean,"FShowInnerStroke","SetShowInnerStroke",{Default: true});
    $r.addProperty("Rounding",14,rtl.double,"FRounding","SetRounding",{stored: "IsRoundingStored"});
    $r.addProperty("Corners",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsCorners"],"FCorners","SetCorners",{Default: rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight)});
    $r.addProperty("InnerStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FInnerStroke","SetInnerStroke");
    $r.addProperty("NormalFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FNormalFill","SetNormalFill");
    $r.addProperty("NormalStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FNormalStroke","SetNormalStroke");
    $r.addProperty("HoverFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FHoverFill","SetHoverFill");
    $r.addProperty("HoverStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FHoverStroke","SetHoverStroke");
    $r.addProperty("DownFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDownFill","SetDownFill");
    $r.addProperty("DownStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDownStroke","SetDownStroke");
    $r.addProperty("DisabledFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDisabledFill","SetDisabledFill");
    $r.addProperty("DisabledStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDisabledStroke","SetDisabledStroke");
    $r.addProperty("FlatStyle",2,rtl.boolean,"FFlatStyle","SetFlatStyle",{Default: false});
  });
  rtl.createClass($mod,"TTMSFNCToolBarCompactAppearance",$mod.TTMSFNCToolBarCustomButtonAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("NormalFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FNormalFill","SetNormalFill");
    $r.addProperty("NormalStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FNormalStroke","SetNormalStroke");
    $r.addProperty("HoverFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FHoverFill","SetHoverFill");
    $r.addProperty("HoverStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FHoverStroke","SetHoverStroke");
    $r.addProperty("DownFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDownFill","SetDownFill");
    $r.addProperty("DownStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDownStroke","SetDownStroke");
    $r.addProperty("DisabledFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDisabledFill","SetDisabledFill");
    $r.addProperty("DisabledStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDisabledStroke","SetDisabledStroke");
    $r.addProperty("FlatStyle",2,rtl.boolean,"FFlatStyle","SetFlatStyle",{Default: false});
  });
  rtl.createClass($mod,"TTMSFNCToolBarQuickMenuButtonAppearance",$mod.TTMSFNCToolBarCustomButtonAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("NormalFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FNormalFill","SetNormalFill");
    $r.addProperty("NormalStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FNormalStroke","SetNormalStroke");
    $r.addProperty("HoverFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FHoverFill","SetHoverFill");
    $r.addProperty("HoverStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FHoverStroke","SetHoverStroke");
    $r.addProperty("DownFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDownFill","SetDownFill");
    $r.addProperty("DownStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDownStroke","SetDownStroke");
    $r.addProperty("DisabledFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FDisabledFill","SetDisabledFill");
    $r.addProperty("DisabledStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FDisabledStroke","SetDisabledStroke");
    $r.addProperty("FlatStyle",2,rtl.boolean,"FFlatStyle","SetFlatStyle",{Default: false});
  });
  this.TTMSFNCToolBarElementState = {"0": "esNormal", esNormal: 0, "1": "esLarge", esLarge: 1};
  $mod.$rtti.$Enum("TTMSFNCToolBarElementState",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCToolBarElementState});
  rtl.createClass($mod,"TTMSFNCCustomToolBarElement",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FBlockUpdate = false;
      this.FOnUpdateToolBar = null;
      this.FOnUpdateToolBarControl = null;
      this.FCanCopy = false;
      this.FState = 0;
      this.FLastElement = false;
      this.FControlIndex = 0;
    };
    this.$final = function () {
      this.FOnUpdateToolBar = undefined;
      this.FOnUpdateToolBarControl = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetState = function (Value) {
      if (this.FState !== Value) {
        this.FState = Value;
        this.UpdateState();
      };
    };
    this.SetLastElement = function (Value) {
      if (this.FLastElement !== Value) {
        this.FLastElement = Value;
        this.UpdateToolBar();
      };
    };
    this.UpdateState = function () {
    };
    this.UpdateToolBar = function () {
      if ((this.FOnUpdateToolBar != null) && !this.FBlockUpdate) this.FOnUpdateToolBar(this);
    };
    this.UpdateToolBarControl = function () {
      if (this.FOnUpdateToolBarControl != null) this.FOnUpdateToolBarControl(this);
    };
    this.VisibleChanging = function () {
      pas["WEBLib.Controls"].TControl.VisibleChanging.call(this);
      this.UpdateToolBar();
    };
    this.UpdateControlAfterResize = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.UpdateControlAfterResize.call(this);
      this.UpdateToolBar();
    };
    this.Assign = function (Source) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(Source)) {
        this.FState = rtl.as(Source,$mod.TTMSFNCCustomToolBarElement).FState;
        this.FLastElement = rtl.as(Source,$mod.TTMSFNCCustomToolBarElement).FLastElement;
        this.FCanCopy = rtl.as(Source,$mod.TTMSFNCCustomToolBarElement).FCanCopy;
      };
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.DisableBackground();
      this.FLastElement = false;
      this.FCanCopy = true;
      this.FState = $mod.TTMSFNCToolBarElementState.esNormal;
      return this;
    };
    this.Destroy = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.call(this);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.TTMSFNCToolBarButtonBitmapPosition = {"0": "bbpLeft", bbpLeft: 0, "1": "bbpTop", bbpTop: 1};
  $mod.$rtti.$Enum("TTMSFNCToolBarButtonBitmapPosition",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCToolBarButtonBitmapPosition});
  this.TTMSFNCToolBarButtonLayout = {"0": "bblNone", bblNone: 0, "1": "bblBitmap", bblBitmap: 1, "2": "bblLabel", bblLabel: 2, "3": "bblLarge", bblLarge: 3};
  $mod.$rtti.$Enum("TTMSFNCToolBarButtonLayout",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCToolBarButtonLayout});
  rtl.createClass($mod,"TTMSFNCDefaultToolBarButton",$mod.TTMSFNCCustomToolBarElement,function () {
    this.$init = function () {
      $mod.TTMSFNCCustomToolBarElement.$init.call(this);
      this.FOldHeight = 0.0;
      this.FBitmapVisible = false;
      this.FText = "";
      this.FPopup = null;
      this.FPopupPlacement = 0;
      this.FDropDownHeight = 0.0;
      this.FDropDownWidth = 0.0;
      this.FDown = false;
      this.FHover = false;
      this.FPrevHover = false;
      this.FAppearance = null;
      this.FBitmapContainer = null;
      this.FBitmaps = null;
      this.FApplyName = false;
      this.FDropDownControl = null;
      this.FFont$1 = null;
      this.FOnBeforeDropDown = null;
      this.FCloseOnSelection = false;
      this.FDownState = false;
      this.FTextVisible = false;
      this.FOnCloseDropDown = null;
      this.FOnDropDown = null;
      this.FVerticalTextAlign = 0;
      this.FHorizontalTextAlign = 0;
      this.FWordWrapping = false;
      this.FTrimming = 0;
      this.FBitmapSize = 0.0;
      this.FStretchText = false;
      this.FDisabledBitmaps = null;
      this.FHoverBitmaps = null;
      this.FShowFocus$1 = false;
      this.FDropDownAutoWidth = false;
      this.FHoverFontColor = 0;
      this.FDownFontColor = 0;
      this.FDisabledFontColor = 0;
      this.FStretchBitmapIfNoText = false;
      this.FBitmapPosition = 0;
      this.FMaximumLayout = 0;
      this.FMinimumLayout = 0;
      this.FLayout = 0;
      this.FCompactLayout = 0;
      this.FLargeLayoutBitmapSize = 0.0;
      this.FLargeLayoutBitmaps = null;
      this.FLargeLayoutHoverBitmaps = null;
      this.FLargeLayoutDisabledBitmaps = null;
      this.FAutoBitmapSize = false;
      this.FLargeLayoutAutoBitmapSize = false;
    };
    this.$final = function () {
      this.FPopup = undefined;
      this.FAppearance = undefined;
      this.FBitmapContainer = undefined;
      this.FBitmaps = undefined;
      this.FDropDownControl = undefined;
      this.FFont$1 = undefined;
      this.FOnBeforeDropDown = undefined;
      this.FOnCloseDropDown = undefined;
      this.FOnDropDown = undefined;
      this.FDisabledBitmaps = undefined;
      this.FHoverBitmaps = undefined;
      this.FLargeLayoutBitmaps = undefined;
      this.FLargeLayoutHoverBitmaps = undefined;
      this.FLargeLayoutDisabledBitmaps = undefined;
      $mod.TTMSFNCCustomToolBarElement.$final.call(this);
    };
    this.SetAppearance = function (Value) {
      this.FAppearance.Assign(Value);
    };
    this.SetBitmapContainer = function (Value) {
      this.FBitmapContainer = Value;
      this.UpdateLayout();
      this.Invalidate();
    };
    this.SetBitmaps = function (Value) {
      this.FBitmaps.Assign(Value);
    };
    this.SetText = function (Value) {
      if (this.FText !== Value) {
        this.FText = Value;
        this.FTextVisible = Value !== "";
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetDropDownHeight = function (Value) {
      this.FDropDownHeight = Value;
      if ((this.FPopup != null) && !this.FDropDownAutoWidth) this.FPopup.SetDropDownHeight(this.FDropDownHeight);
    };
    this.SetDropDownWidth = function (Value) {
      this.FDropDownWidth = Value;
      if (this.FPopup != null) this.FPopup.SetDropDownWidth(this.FDropDownWidth);
    };
    this.SetBitmapVisible = function (Value) {
      this.FBitmapVisible = Value;
      this.UpdateLayout();
      this.Invalidate();
    };
    this.SetTextVisible = function (Value) {
      if (this.FTextVisible !== Value) {
        this.FTextVisible = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetFont$1 = function (Value) {
      this.FFont$1.Assign(Value);
    };
    this.SetDropDownControl = function (Value) {
      this.FDropDownControl = Value;
      if (this.FDropDownControl != null) {
        if (!(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState)) {
          if (this.FPopup != null) {
            this.FPopup.SetContentControl(this.FDropDownControl);
            this.FPopup.FFocusedControl = this.FDropDownControl;
          };
        } else if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) {
          this.SetDropDownHeight(this.FDropDownControl.GetHeight());
          this.SetDropDownWidth(this.FDropDownControl.GetWidth());
        };
      };
    };
    this.SetCloseOnSelection = function (Value) {
      if (this.FCloseOnSelection !== Value) {
        this.FCloseOnSelection = Value;
      };
    };
    this.SetDownState = function (Value) {
      this.FDownState = Value;
      this.Invalidate();
    };
    this.IsDropDownHeightStored = function () {
      var Result = false;
      Result = this.FDropDownHeight !== 135;
      return Result;
    };
    this.IsDropDownWidthStored = function () {
      var Result = false;
      Result = this.FDropDownWidth !== 135;
      return Result;
    };
    this.SetHorizontalTextAlign = function (Value) {
      if (this.FHorizontalTextAlign !== Value) {
        this.FHorizontalTextAlign = Value;
        this.Invalidate();
      };
    };
    this.SetVerticalTextAlign = function (Value) {
      if (this.FVerticalTextAlign !== Value) {
        this.FVerticalTextAlign = Value;
        this.Invalidate();
      };
    };
    this.SetWordWrapping = function (Value) {
      if (this.FWordWrapping !== Value) {
        this.FWordWrapping = Value;
        this.Invalidate();
      };
    };
    this.SetTrimming = function (Value) {
      if (this.FTrimming !== Value) {
        this.FTrimming = Value;
        this.Invalidate();
      };
    };
    this.IsBitmapSizeStored = function () {
      var Result = false;
      Result = this.FBitmapSize !== 24;
      return Result;
    };
    this.SetBitmapSize = function (Value) {
      if (this.FBitmapSize !== Value) {
        this.FBitmapSize = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetStretchText = function (Value) {
      if (this.FStretchText !== Value) {
        this.FStretchText = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetDisabledBitmaps = function (Value) {
      this.FDisabledBitmaps.Assign(Value);
    };
    this.SetHoverBitmaps = function (Value) {
      this.FHoverBitmaps.Assign(Value);
    };
    this.GetBitmapContainer = function () {
      var Result = null;
      Result = this.FBitmapContainer;
      return Result;
    };
    this.SetShowFocus$1 = function (Value) {
      if (this.FShowFocus$1 !== Value) {
        this.FShowFocus$1 = Value;
        this.Invalidate();
      };
    };
    this.SetDropDownAutoWidth = function (Value) {
      if (this.FDropDownAutoWidth !== Value) {
        this.FDropDownAutoWidth = Value;
        if (this.FPopup != null) {
          if (this.FDropDownAutoWidth) {
            this.FPopup.SetDropDownWidth(this.GetWidth())}
           else this.FPopup.SetDropDownWidth(this.FDropDownWidth);
        };
      };
    };
    this.SetDisabledFontColor = function (Value) {
      if (this.FDisabledFontColor !== Value) {
        this.FDisabledFontColor = Value;
        this.Invalidate();
      };
    };
    this.SetDownFontColor = function (Value) {
      if (this.FDownFontColor !== Value) {
        this.FDownFontColor = Value;
        this.Invalidate();
      };
    };
    this.SetHoverFontColor = function (Value) {
      if (this.FHoverFontColor !== Value) {
        this.FHoverFontColor = Value;
        this.Invalidate();
      };
    };
    this.SetStretchBitmapIfNoText = function (Value) {
      if (this.FStretchBitmapIfNoText !== Value) {
        this.FStretchBitmapIfNoText = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetBitmapPosition = function (Value) {
      if (this.FBitmapPosition !== Value) {
        this.FBitmapPosition = Value;
        this.Invalidate();
      };
    };
    this.SetMaximumLayout = function (Value) {
      if (this.FMaximumLayout !== Value) {
        this.FMaximumLayout = Value;
        this.UpdateToolBar();
      };
    };
    this.SetMinimumLayout = function (Value) {
      if (this.FMinimumLayout !== Value) {
        this.FMinimumLayout = Value;
        this.UpdateToolBar();
      };
    };
    this.SetLayout = function (Value) {
      if (this.FLayout !== Value) {
        this.FLayout = Value;
        this.UpdateLayout();
      };
    };
    this.SetCompactLayout = function (Value) {
      if (this.FCompactLayout !== Value) this.FCompactLayout = Value;
    };
    this.IsLargeLayoutBitmapSizeStored = function () {
      var Result = false;
      Result = this.FLargeLayoutBitmapSize !== 32;
      return Result;
    };
    this.SetLargeLayoutBitmaps = function (Value) {
      this.FLargeLayoutBitmaps.Assign(Value);
    };
    this.SetLargeLayoutBitmapSize = function (Value) {
      if (this.FLargeLayoutBitmapSize !== Value) {
        this.FLargeLayoutBitmapSize = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetLargeLayoutDisabledBitmaps = function (Value) {
      this.FLargeLayoutDisabledBitmaps.Assign(Value);
    };
    this.SetLargeLayoutHoverBitmaps = function (Value) {
      this.FLargeLayoutHoverBitmaps.Assign(Value);
    };
    this.SetAutoBitmapSize = function (Value) {
      if (this.FAutoBitmapSize !== Value) {
        this.FAutoBitmapSize = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.SetLargeLayoutAutoBitmapSize = function (Value) {
      if (this.FLargeLayoutAutoBitmapSize !== Value) {
        this.FLargeLayoutAutoBitmapSize = Value;
        this.UpdateLayout();
        this.Invalidate();
      };
    };
    this.CanDrawDesignTime = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.HasHint = function () {
      var Result = false;
      Result = this.FHint !== "";
      return Result;
    };
    this.GetHintString = function () {
      var Result = "";
      Result = this.FHint;
      return Result;
    };
    this.GetText = function () {
      var Result = "";
      Result = this.FText;
      return Result;
    };
    this.GetTextSize = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TSizeF.$new();
      var g = null;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.cx = 0;
      Result.cy = 0;
      if (this.FTextVisible && (this.GetText() !== "")) {
        g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[1,1,this.FNativeCanvas,true]);
        g.FBitmapContainer = this.GetBitmapContainer();
        g.FOptimizedHTMLDrawing = this.FOptimizedHTMLDrawing;
        try {
          r.$assign(this.GetLocalRect());
          pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-2,-2);
          Result.$assign(g.CalculateTextSize(this.GetText(),pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FWordWrapping,true));
        } finally {
          g = rtl.freeLoc(g);
        };
      };
      return Result;
    };
    this.UpdateControlAfterResize = function () {
      $mod.TTMSFNCCustomToolBarElement.UpdateControlAfterResize.call(this);
      if (this.FLayout === $mod.TTMSFNCToolBarButtonLayout.bblLarge) this.FOldHeight = this.GetHeight();
    };
    this.ApplyStyle = function () {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ApplyStyle.call(this);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FNormalFill.SetColor(c);
        this.FAppearance.FNormalFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FAppearance.FDisabledFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Blend(c,11119017,20));
        this.FAppearance.FDisabledFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FAppearance.FInnerStroke.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Blend(this.FAppearance.FNormalFill.FColor,this.FAppearance.FNormalStroke.FColor,75));
        this.FAppearance.FInnerStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleTextFontColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) this.FFont$1.SetColor(c);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundStrokeColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FNormalStroke.SetColor(c);
        this.FAppearance.FDownStroke.SetColor(c);
        this.FAppearance.FDisabledStroke.SetColor(c);
        this.FAppearance.FNormalStroke.SetColor(c);
        this.FAppearance.FDownStroke.SetColor(c);
        this.FAppearance.FDisabledStroke.SetColor(c);
        this.FAppearance.FHoverStroke.SetColor(c);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleSelectionFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FHoverFill.SetColor(c);
        this.FAppearance.FHoverFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FAppearance.FDownFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].Blend(c,this.FFill.FColor,20));
        this.FAppearance.FDownFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      };
    };
    this.ResetToDefaultStyle = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ResetToDefaultStyle.call(this);
      this.FFont$1.SetColor(0);
      this.FAppearance.FNormalFill.SetColor(16777215);
      this.FAppearance.FHoverFill.SetColor(16777215);
      this.FAppearance.FDownFill.SetColor(16777215);
      this.FAppearance.FDisabledFill.SetColor(13882323);
      this.FAppearance.FNormalStroke.SetColor(8421504);
      this.FAppearance.FInnerStroke.SetColor(16777215);
      this.FAppearance.FHoverStroke.SetColor(8421504);
      this.FAppearance.FDownStroke.SetColor(8421504);
      this.FAppearance.FDisabledStroke.SetColor(8421504);
      this.FAppearance.FNormalFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
      this.FAppearance.FHoverFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
      this.FAppearance.FDownFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
      this.FAppearance.FDisabledFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      this.FAppearance.FNormalStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FInnerStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FHoverStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FDownStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FDisabledStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FNormalFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(249,251,252));
      this.FAppearance.FNormalFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(230,235,235));
      this.FAppearance.FNormalFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(220,220,236));
      this.FAppearance.FNormalFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(220,225,236));
      this.FAppearance.FHoverFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(229,231,232));
      this.FAppearance.FHoverFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(210,215,215));
      this.FAppearance.FHoverFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,200,216));
      this.FAppearance.FHoverFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,205,216));
      this.FAppearance.FDownFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(219,221,222));
      this.FAppearance.FDownFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(200,205,205));
      this.FAppearance.FDownFill.SetColorMirror(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(190,190,206));
      this.FAppearance.FDownFill.SetColorMirrorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(190,195,206));
    };
    this.SetAdaptToStyle = function (Value) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.SetAdaptToStyle.apply(this,arguments);
      if (this.FPopup != null) this.FPopup.SetAdaptToStyle(this.GetAdaptToStyle());
    };
    this.BitmapsChanged = function (Sender) {
      var bmp = null;
      bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FBitmaps,0,this.GetBitmapContainer());
      this.SetBitmapVisible((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp));
      if (!this.FBitmapVisible && (this.FLayout === $mod.TTMSFNCToolBarButtonLayout.bblLarge)) {
        bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FLargeLayoutBitmaps,0,this.GetBitmapContainer());
        this.SetBitmapVisible((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp));
      };
      this.Invalidate();
    };
    this.DoFontChanged = function (Sender) {
      this.Invalidate();
    };
    this.UpdateLayout = function () {
      var sz = pas["WEBLib.TMSFNCTypes"].TSizeF.$new();
      var w = 0.0;
      if ((this.FLayout === $mod.TTMSFNCToolBarButtonLayout.bblNone) || this.FBlockUpdate) return;
      this.FBlockUpdate = true;
      var $tmp1 = this.FLayout;
      if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblBitmap) {
        this.SetTextVisible(false);
        this.SetBitmapPosition($mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft);
        this.SetStretchText(false);
        this.SetHeight(Math.round(this.GetBitmapSize() + 6));
        this.SetWidth(Math.round(this.GetBitmapSize() + 6));
      } else if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblLabel) {
        this.SetTextVisible(true);
        this.SetBitmapPosition($mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft);
        this.SetStretchText(false);
        sz.$assign(this.GetTextSize());
        if (this.FBitmapVisible) {
          this.SetHeight(Math.round(Math.max(this.GetBitmapSize(),sz.cy) + 6));
          this.SetWidth(Math.round(this.GetBitmapSize() + sz.cx + 12));
        } else if (this.FTextVisible && (this.GetText() !== "")) {
          this.SetHeight(Math.round(sz.cy + 6));
          this.SetWidth(Math.round(sz.cx + 6));
        } else {
          this.SetWidth(75);
          this.SetHeight(24);
        };
      } else if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblLarge) {
        this.SetTextVisible(true);
        this.SetBitmapPosition($mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop);
        this.SetStretchText(!this.FBitmapVisible);
        sz.$assign(this.GetTextSize());
        w = 30;
        if (this.FBitmapVisible) w = Math.max(w,this.GetLargeLayoutBitmapSize() + 6);
        if (this.FTextVisible && (this.GetText() !== "")) w = Math.max(w,sz.cx + 12);
        this.SetWidth(Math.round(w));
        if (this.FOldHeight !== -1) this.SetHeight(Math.round(this.FOldHeight));
      };
      this.FBlockUpdate = false;
      this.UpdateToolBar();
    };
    this.DoClosePopup = function (Sender) {
      if (this.FOnCloseDropDown != null) this.FOnCloseDropDown(this);
    };
    this.DoPopup = function (Sender) {
      this.InitializePopup();
    };
    this.InitializePopup = function () {
    };
    this.UpdateState = function () {
      var f = 0.0;
      $mod.TTMSFNCCustomToolBarElement.UpdateState.call(this);
      var $tmp1 = this.FState;
      if ($tmp1 === $mod.TTMSFNCToolBarElementState.esNormal) {
        f = 0.8}
       else if ($tmp1 === $mod.TTMSFNCToolBarElementState.esLarge) {
        f = 1.25}
       else {
        f = 1;
      };
      if (!(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) {
        this.SetDropDownWidth(this.FDropDownWidth * f);
        this.SetDropDownHeight(this.FDropDownHeight * f);
        this.FFont$1.SetSize(Math.round(this.FFont$1.FSize * f));
        this.SetBounds(this.GetLeft(),this.GetTop(),Math.round(this.GetWidth() * f),Math.round(this.GetHeight() * f));
      };
    };
    this.ChangeDPIScale = function (M, D) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ChangeDPIScale.apply(this,arguments);
      this.SetBitmapSize(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivSingle(this.FBitmapSize,M,D));
      this.SetLargeLayoutBitmapSize(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivSingle(this.FLargeLayoutBitmapSize,M,D));
    };
    this.AppearanceChanged = function () {
      this.Invalidate();
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FBitmapContainer)) this.FBitmapContainer = null;
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FDropDownControl)) this.FDropDownControl = null;
    };
    this.SetName = function (Value) {
      var ChangeText = false;
      ChangeText = !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState) && (this.FName === this.GetText()) && (!(this.FOwner != null) || !pas.Classes.TComponent.isPrototypeOf(this.FOwner) || !(pas.Classes.TComponentStateItem.csLoading in this.FOwner.FComponentState));
      pas["WEBLib.Controls"].TCustomControl.SetName.call(this,Value);
      if (ChangeText && this.FApplyName && this.CanChangeText()) this.SetText(pas.SysUtils.StringReplace(this.GetText(),"TMSFNCToolBar","",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll)));
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseDown.apply(this,arguments);
      if (this.CanFocus()) this.SetFocus();
      this.FDown = true;
      this.Invalidate();
    };
    this.HandleMouseMove = function (Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseMove.apply(this,arguments);
      this.FHover = true;
      if (this.FPrevHover !== this.FHover) this.Invalidate();
      this.FPrevHover = this.FHover;
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseUp.apply(this,arguments);
      this.FDown = false;
      this.Invalidate();
    };
    this.HandleKeyUp = function (Key, Shift) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleKeyUp.apply(this,arguments);
      if (rtl.neSet(Shift,{})) return;
      var $tmp1 = Key.get();
      if (($tmp1 === 13) || ($tmp1 === 115)) {
        if (this.CanDropDown()) this.DropDown();
      };
    };
    this.HandleKeyDown = function (Key, Shift) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleKeyDown.apply(this,arguments);
      var $tmp1 = Key.get();
      if ($tmp1 === 36) {
        this.SelectFirstValue()}
       else if ($tmp1 === 35) {
        this.SelectLastValue()}
       else if (($tmp1 === 38) || ($tmp1 === 37)) {
        this.SelectPreviousValue()}
       else if (($tmp1 === 40) || ($tmp1 === 39)) {
        this.SelectNextValue()}
       else if ($tmp1 === 32) this.Click();
    };
    this.HandleKeyPress = function (Key) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleKeyPress.apply(this,arguments);
      if ((Key.get() >= " ") && !(Key.get().charCodeAt() in rtl.createSet(113,13,32,27,36,35,38,37,40,39))) this.SelectValueWithCharacter(Key.get());
    };
    this.HandleMouseEnter = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseEnter.call(this);
    };
    this.HandleMouseLeave = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseLeave.call(this);
      this.FDown = false;
      this.FHover = false;
      this.FPrevHover = false;
      this.Invalidate();
    };
    this.SelectFirstValue = function () {
    };
    this.SelectValueWithCharacter = function (ACharacter) {
    };
    this.SelectLastValue = function () {
    };
    this.SelectNextValue = function () {
    };
    this.SelectPreviousValue = function () {
    };
    this.DrawText = function (AGraphics) {
      var tr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var st = null;
      if (!this.FTextVisible || (this.GetText() === "")) return;
      tr.$assign(this.GetTextRect());
      st = AGraphics.SaveState(false);
      try {
        AGraphics.ClipRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(tr));
        AGraphics.FFont.Assign(this.FFont$1);
        if (this.FEnabled) {
          if ((this.FDown || this.FDownState) && (this.FDownFontColor !== -1)) {
            AGraphics.FFont.SetColor(this.FDownFontColor)}
           else if (this.FHover && (this.FHoverFontColor !== -1)) AGraphics.FFont.SetColor(this.FHoverFontColor);
        } else if (this.FDisabledFontColor !== -1) AGraphics.FFont.SetColor(this.FDisabledFontColor);
        AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(tr),this.GetText(),this.FWordWrapping,this.FHorizontalTextAlign,this.FVerticalTextAlign,this.FTrimming,0,-1,-1,true,false,-1,-1);
      } finally {
        AGraphics.RestoreState(st,false);
      };
    };
    this.DrawBitmap = function (AGraphics, ARect) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var bmpa = null;
      var bmp = null;
      var g = null;
      if (!this.FBitmapVisible) return;
      r.$assign(this.GetBitmapRect$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect)));
      if ($mod.TTMSFNCToolBarDropDownButton.isPrototypeOf(this) && this.GetAdaptToStyle()) {
        bmpa = pas["WEBLib.Graphics"].TBitmap.$create("Create$3");
        bmpa.SetSize(7,7);
        g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("Create$1",[bmpa.GetCanvas(),false]);
        try {
          g.BeginScene();
          g.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
          g.FStroke.SetColor(pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.DefaultSelectionFillColor);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(0,1)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(6,1)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(0,2)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(6,2)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(1,3)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(5,3)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(2,4)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(4,4)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          g.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(3,5)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(3,5)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
        } finally {
          g.EndScene();
          g = rtl.freeLoc(g);
        };
        try {
          bmp = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
          try {
            bmp.Assign(bmpa);
            AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,true,false,true,false);
          } finally {
            bmp = rtl.freeLoc(bmp);
          };
        } finally {
          bmpa = rtl.freeLoc(bmpa);
        };
      } else {
        AGraphics.FBitmapContainer = this.GetBitmapContainer();
        var $tmp1 = this.FLayout;
        if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblLarge) {
          if (this.FEnabled) {
            if (this.FHover && (this.FLargeLayoutHoverBitmaps.GetCount() > 0)) {
              AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FLargeLayoutHoverBitmaps,0,true,false,true,false)}
             else if (this.FHover && (this.FHoverBitmaps.GetCount() > 0)) {
              AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FHoverBitmaps,0,true,false,true,false)}
             else if (this.FLargeLayoutBitmaps.GetCount() > 0) {
              AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FLargeLayoutBitmaps,0,true,false,true,false)}
             else AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FBitmaps,0,true,false,true,false);
          } else {
            if (this.FLargeLayoutDisabledBitmaps.GetCount() > 0) {
              AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FLargeLayoutDisabledBitmaps,0,true,false,true,false)}
             else if (this.FDisabledBitmaps.GetCount() > 0) {
              AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FDisabledBitmaps,0,true,false,true,false)}
             else AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FBitmaps,0,true,false,true,false);
          };
        } else {
          if (this.FEnabled) {
            if (this.FHover && (this.FHoverBitmaps.GetCount() > 0)) {
              AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FHoverBitmaps,0,true,false,true,false)}
             else AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FBitmaps,0,true,false,true,false);
          } else if (this.FDisabledBitmaps.GetCount() > 0) {
            AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FDisabledBitmaps,0,true,false,true,false)}
           else AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FBitmaps,0,true,false,true,false);
        };
      };
    };
    this.DrawButton = function (AGraphics) {
    };
    this.CanDropDown = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.CanChangeText = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.GetTextRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var bmpr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var dr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(this.GetLocalRect());
      bmpr.$assign(this.GetBitmapRect());
      dr.$assign(this.GetDropDownRect());
      if (!this.FStretchText) {
        var $tmp1 = this.FBitmapPosition;
        if ($tmp1 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(bmpr.Right + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3))}
         else if ($tmp1 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,bmpr.Bottom + 3,dr.Left - 3,r.Bottom - 3));
      } else Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3));
      return Result;
    };
    this.GetDropDownRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(this.GetLocalRect());
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Right,r.Top,r.Right,r.Bottom));
      return Result;
    };
    this.GetBitmapRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign(this.GetBitmapRect$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(this.GetLocalRect())));
      return Result;
    };
    this.GetBitmapRect$1 = function (ARect) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var bs = 0.0;
      bs = this.GetBitmapSize();
      var $tmp1 = this.FLayout;
      if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblLarge) bs = this.GetLargeLayoutBitmapSize();
      r.$assign(ARect);
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Left,r.Bottom));
      if (this.FBitmapVisible) {
        var $tmp2 = this.FBitmapPosition;
        if ($tmp2 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,Result.Left + 3 + bs,Result.Bottom - 3))}
         else if ($tmp2 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,Result.Right - 3,Result.Top + 3 + bs));
      };
      return Result;
    };
    this.GetBitmapSize = function () {
      var Result = 0.0;
      var bmp = null;
      Result = this.FBitmapSize;
      if (this.FAutoBitmapSize) {
        bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FBitmaps,0,this.GetBitmapContainer());
        if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) Result = Math.max(bmp.GetHeight(),bmp.GetWidth());
      };
      return Result;
    };
    this.GetLargeLayoutBitmapSize = function () {
      var Result = 0.0;
      var bmp = null;
      Result = this.FLargeLayoutBitmapSize;
      if (this.FLargeLayoutAutoBitmapSize) {
        bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FLargeLayoutBitmaps,0,this.GetBitmapContainer());
        if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) Result = Math.max(bmp.GetHeight(),bmp.GetWidth());
      };
      return Result;
    };
    this.Assign = function (Source) {
      $mod.TTMSFNCCustomToolBarElement.Assign.apply(this,arguments);
      if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(Source)) {
        this.FLayout = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLayout;
        this.FCompactLayout = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FCompactLayout;
        this.FMinimumLayout = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FMinimumLayout;
        this.FMaximumLayout = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FMaximumLayout;
        this.FBitmapPosition = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FBitmapPosition;
        this.FBitmapSize = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FBitmapSize;
        this.FLargeLayoutBitmapSize = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLargeLayoutBitmapSize;
        this.FAutoBitmapSize = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FAutoBitmapSize;
        this.FLargeLayoutAutoBitmapSize = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLargeLayoutAutoBitmapSize;
        this.FStretchBitmapIfNoText = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FStretchBitmapIfNoText;
        this.FAppearance.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FAppearance);
        this.FBitmapContainer = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).GetBitmapContainer();
        this.FBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FBitmaps);
        this.FDisabledBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDisabledBitmaps);
        this.FLargeLayoutHoverBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLargeLayoutHoverBitmaps);
        this.FLargeLayoutBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLargeLayoutBitmaps);
        this.FLargeLayoutDisabledBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FLargeLayoutDisabledBitmaps);
        this.FHoverBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FHoverBitmaps);
        this.FBitmapVisible = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FBitmapVisible;
        this.FText = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).GetText();
        this.FTextVisible = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FTextVisible;
        this.FDropDownHeight = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDropDownHeight;
        this.FDropDownWidth = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDropDownWidth;
        this.FDropDownAutoWidth = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDropDownAutoWidth;
        this.FWordWrapping = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FWordWrapping;
        this.FHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FHorizontalTextAlign;
        this.FVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FVerticalTextAlign;
        this.FTrimming = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FTrimming;
        this.FFont$1.Assign(rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FFont$1);
        this.FHoverFontColor = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FHoverFontColor;
        this.FDownFontColor = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDownFontColor;
        this.FDisabledFontColor = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FDisabledFontColor;
        this.FStretchText = rtl.as(Source,$mod.TTMSFNCDefaultToolBarButton).FStretchText;
        this.Invalidate();
      };
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomToolBarElement.Create$1.apply(this,arguments);
      this.FOldHeight = -1;
      this.FLayout = $mod.TTMSFNCToolBarButtonLayout.bblNone;
      this.FCompactLayout = $mod.TTMSFNCToolBarButtonLayout.bblNone;
      this.FMinimumLayout = $mod.TTMSFNCToolBarButtonLayout.bblBitmap;
      this.FMaximumLayout = $mod.TTMSFNCToolBarButtonLayout.bblLarge;
      this.FFont$1 = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FFont$1.FOnChanged = rtl.createCallback(this,"DoFontChanged");
      this.FHoverFontColor = -1;
      this.FDownFontColor = -1;
      this.FDisabledFontColor = -1;
      this.FDownState = false;
      this.FApplyName = true;
      this.FCloseOnSelection = true;
      this.FBitmapSize = 24;
      this.FLargeLayoutBitmapSize = 32;
      this.FAutoBitmapSize = false;
      this.FLargeLayoutAutoBitmapSize = false;
      this.FStretchBitmapIfNoText = true;
      this.FStretchText = false;
      this.FDropDownWidth = 135;
      this.FDropDownHeight = 135;
      this.FDropDownAutoWidth = false;
      this.FPopup = pas["WEBLib.TMSFNCPopup"].TTMSFNCPopup.$create("Create$1",[this]);
      this.FPopup.SetPlacementControl(this);
      this.FPopup.SetDragWithParent(true);
      this.FPopup.SetDropDownWidth(this.FDropDownWidth);
      this.FPopup.SetDropDownHeight(this.FDropDownHeight);
      this.FPopup.FOnPopup = rtl.createCallback(this,"DoPopup");
      this.FPopup.FOnClosePopup = rtl.createCallback(this,"DoClosePopup");
      this.FPopupPlacement = pas["WEBLib.TMSFNCPopup"].TTMSFNCPopupPlacement.ppBottom;
      this.FBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FDisabledBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FDisabledBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FHoverBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FHoverBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FLargeLayoutBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FLargeLayoutBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FLargeLayoutDisabledBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FLargeLayoutDisabledBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FLargeLayoutHoverBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FLargeLayoutHoverBitmaps.FOnChange = rtl.createCallback(this,"BitmapsChanged");
      this.FAppearance = $mod.TTMSFNCToolBarButtonAppearance.$create("Create$1",[this]);
      this.FTextVisible = true;
      this.FBitmapVisible = false;
      this.FWordWrapping = false;
      this.FHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FTrimming = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttCharacter;
      this.FBitmapPosition = $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft;
      this.SetWidth(100);
      this.SetHeight(24);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FFont$1");
      rtl.free(this,"FPopup");
      rtl.free(this,"FBitmaps");
      rtl.free(this,"FDisabledBitmaps");
      rtl.free(this,"FHoverBitmaps");
      rtl.free(this,"FLargeLayoutBitmaps");
      rtl.free(this,"FLargeLayoutDisabledBitmaps");
      rtl.free(this,"FLargeLayoutHoverBitmaps");
      rtl.free(this,"FAppearance");
      $mod.TTMSFNCCustomToolBarElement.Destroy.call(this);
    };
    this.Draw = function (AGraphics, ARect) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      if (!this.FAppearance.FTransparent) {
        if (this.FEnabled) {
          if (this.FDown || this.FDownState) {
            AGraphics.FFill.Assign(this.FAppearance.FDownFill);
            AGraphics.FStroke.Assign(this.FAppearance.FDownStroke);
          } else if (this.FHover) {
            AGraphics.FFill.Assign(this.FAppearance.FHoverFill);
            AGraphics.FStroke.Assign(this.FAppearance.FHoverStroke);
          } else {
            AGraphics.FFill.Assign(this.FAppearance.FNormalFill);
            AGraphics.FStroke.Assign(this.FAppearance.FNormalStroke);
          };
        } else {
          AGraphics.FFill.Assign(this.FAppearance.FDisabledFill);
          AGraphics.FStroke.Assign(this.FAppearance.FDisabledStroke);
        };
        r.$assign(this.GetLocalRect());
        if (this.FAppearance.FFlatStyle) {
          AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
          AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        } else AGraphics.DrawRoundRectangle$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FAppearance.FRounding,rtl.refSet(this.FAppearance.FCorners),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        if (this.FAppearance.FShowInnerStroke && !this.FAppearance.FFlatStyle) {
          pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-1,-1);
          AGraphics.FStroke.Assign(this.FAppearance.FInnerStroke);
          AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
          AGraphics.DrawRoundRectangle$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FAppearance.FRounding,rtl.refSet(this.FAppearance.FCorners),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        };
      };
      this.DrawBitmap(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
      this.DrawText(AGraphics);
      this.DrawButton(AGraphics);
      if (this.FShowFocus$1 && this.IsFocused()) {
        r.$assign(this.GetTextRect());
        AGraphics.DrawFocusRectangle$3(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),0,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      };
      if (this.IsDesignTime() && this.CanDrawDesignTime()) AGraphics.DrawFocusRectangle$3(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),0,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.DropDown = function () {
      if (!(this.FPopup != null)) return;
      if (!this.FPopup.FIsOpen) {
        if (this.FOnBeforeDropDown != null) this.FOnBeforeDropDown(this);
        if (this.FDropDownAutoWidth) this.FPopup.SetDropDownWidth(this.GetWidth());
        this.FPopup.SetPlacement(this.FPopupPlacement);
        this.FPopup.SetIsOpen(true);
        if (this.FOnDropDown != null) this.FOnDropDown(this);
      } else this.FPopup.SetIsOpen(false);
    };
    this.CloseDropDown = function () {
      if (!(this.FPopup != null)) return;
      if (this.FPopup.FIsOpen) this.FPopup.SetIsOpen(false);
    };
    this.GetPopupControl = function () {
      var Result = null;
      Result = this.FPopup;
      return Result;
    };
    this.GetBitmap = function () {
      var Result = null;
      Result = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FBitmaps,0,this.FBitmapContainer);
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.TTMSFNCToolBarButtonDropDownKind = {"0": "ddkNormal", ddkNormal: 0, "1": "ddkDropDown", ddkDropDown: 1, "2": "ddkDropDownButton", ddkDropDownButton: 2};
  $mod.$rtti.$Enum("TTMSFNCToolBarButtonDropDownKind",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCToolBarButtonDropDownKind});
  this.TTMSFNCToolBarButtonDropDownPosition = {"0": "ddpRight", ddpRight: 0, "1": "ddpBottom", ddpBottom: 1};
  $mod.$rtti.$Enum("TTMSFNCToolBarButtonDropDownPosition",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCToolBarButtonDropDownPosition});
  rtl.createClass($mod,"TTMSFNCToolBarDropDownButton",$mod.TTMSFNCDefaultToolBarButton,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCToolBarDropDownButton);
    };
    this.GetBitmapRect$1 = function (ARect) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(ARect);
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,r.Bottom - 3));
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Font",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FFont$1","SetFont$1");
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus$1","SetShowFocus$1",{Default: false});
    $r.addProperty("TextVisible",2,rtl.boolean,"FTextVisible","SetTextVisible",{Default: true});
    $r.addProperty("StretchText",2,rtl.boolean,"FStretchText","SetStretchText",{Default: false});
    $r.addProperty("WordWrapping",2,rtl.boolean,"FWordWrapping","SetWordWrapping",{Default: false});
    $r.addProperty("HorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FHorizontalTextAlign","SetHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("VerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FVerticalTextAlign","SetVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("Trimming",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextTrimming"],"FTrimming","SetTrimming",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttCharacter});
    $r.addProperty("Bitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FBitmaps","SetBitmaps");
    $r.addProperty("DisabledBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FDisabledBitmaps","SetDisabledBitmaps");
    $r.addProperty("HoverBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FHoverBitmaps","SetHoverBitmaps");
    $r.addProperty("BitmapVisible",2,rtl.boolean,"FBitmapVisible","SetBitmapVisible",{Default: false});
    $r.addProperty("BitmapContainer",3,pas["WEBLib.TMSFNCBitmapContainer"].$rtti["TTMSFNCBitmapContainer"],"GetBitmapContainer","SetBitmapContainer");
    $r.addProperty("State",2,$mod.$rtti["TTMSFNCToolBarElementState"],"FState","SetState",{Default: $mod.TTMSFNCToolBarElementState.esNormal});
    $r.addProperty("LastElement",2,rtl.boolean,"FLastElement","SetLastElement",{Default: false});
    $r.addProperty("Appearance",2,$mod.$rtti["TTMSFNCToolBarButtonAppearance"],"FAppearance","SetAppearance");
  });
  $mod.$rtti.$ClassRef("TTMSFNCToolBarDropDownButtonClass",{instancetype: $mod.$rtti["TTMSFNCToolBarDropDownButton"]});
  rtl.createClass($mod,"TTMSFNCCustomToolBarButton",$mod.TTMSFNCDefaultToolBarButton,function () {
    this.$init = function () {
      $mod.TTMSFNCDefaultToolBarButton.$init.call(this);
      this.FDropDownButton = null;
      this.FDropDownKind = 0;
      this.FDropDownPosition = 0;
      this.FHidden = false;
      this.FAutoOptionsMenuText = "";
    };
    this.$final = function () {
      this.FDropDownButton = undefined;
      $mod.TTMSFNCDefaultToolBarButton.$final.call(this);
    };
    this.SetDropDownKind = function (Value) {
      if (this.FDropDownKind !== Value) {
        this.FDropDownKind = Value;
        if (this.FDropDownButton != null) {
          var $tmp1 = this.FDropDownKind;
          if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal) {
            this.FDropDownButton.SetVisible(false);
            this.FDropDownButton.SetParent(null);
            this.FDropDownButton.FAppearance.SetTransparent(false);
          } else if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDown) {
            this.FDropDownButton.SetVisible(false);
            this.FDropDownButton.SetParent(this);
            this.FDropDownButton.FAppearance.SetTransparent(true);
          } else if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDownButton) {
            this.FDropDownButton.SetVisible(true);
            this.FDropDownButton.SetParent(this);
            this.FDropDownButton.FAppearance.SetTransparent(false);
          };
        };
        this.Invalidate();
      };
    };
    this.SetDropDownPosition = function (Value) {
      if (this.FDropDownPosition !== Value) {
        this.FDropDownPosition = Value;
        if (this.FDropDownButton != null) {
          var $tmp1 = Value;
          if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
            this.FDropDownButton.SetAlign(pas["WEBLib.Controls"].TAlign.alRight);
            this.FDropDownButton.SetWidth(17);
            this.FDropDownButton.FAppearance.SetCorners(rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight));
          } else if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) {
            this.FDropDownButton.SetAlign(pas["WEBLib.Controls"].TAlign.alBottom);
            this.FDropDownButton.SetHeight(10);
            this.FDropDownButton.FAppearance.SetCorners(rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight));
          };
        };
      };
    };
    this.SetHidden = function (Value) {
      if (this.FHidden !== Value) {
        this.FHidden = Value;
        this.UpdateToolBarControl();
      };
    };
    this.SetAdaptToStyle = function (Value) {
      $mod.TTMSFNCDefaultToolBarButton.SetAdaptToStyle.apply(this,arguments);
      if (this.FDropDownButton != null) this.FDropDownButton.SetAdaptToStyle(this.GetAdaptToStyle());
    };
    this.DoFontChanged$1 = function (Sender) {
      this.Invalidate();
    };
    this.AppearanceChanged = function () {
      $mod.TTMSFNCDefaultToolBarButton.AppearanceChanged.call(this);
      this.UpdateDropDownButton();
    };
    this.UpdateDropDownButton = function () {
      if (this.FDropDownButton != null) this.FDropDownButton.FAppearance.SetRounding(this.FAppearance.FRounding);
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      $mod.TTMSFNCDefaultToolBarButton.HandleMouseDown.apply(this,arguments);
      if (this.FDropDownKind === $mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDown) this.DropDown();
    };
    this.DropDownButtonClick = function (Sender) {
      this.DropDown();
    };
    this.DrawButton = function (AGraphics) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      $mod.TTMSFNCDefaultToolBarButton.DrawButton.apply(this,arguments);
      if ((this.FDropDownButton != null) && (this.FDropDownKind === $mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDown)) {
        var $tmp1 = this.FDropDownPosition;
        if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
          r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(this.GetWidth() - this.FDropDownButton.GetWidth(),0,this.GetWidth(),this.GetHeight()))}
         else if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,this.GetHeight() - this.FDropDownButton.GetHeight(),this.GetWidth(),this.GetHeight()));
        this.FDropDownButton.DrawBitmap(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
      };
    };
    this.SetEnabled = function (Value) {
      var d = null;
      pas["WEBLib.Controls"].TControl.SetEnabled.apply(this,arguments);
      d = this.GetDropDownButtonControl();
      if (d != null) d.SetEnabled(Value);
    };
    this.GetDropDownButtonClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarDropDownButton;
      return Result;
    };
    this.GetDropDownRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign($mod.TTMSFNCDefaultToolBarButton.GetDropDownRect.call(this));
      if ((this.FDropDownButton != null) && (this.FDropDownKind !== $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal)) {
        if (this.FDropDownKind === $mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDown) {
          var $tmp1 = this.FDropDownPosition;
          if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
            Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(this.GetWidth() - this.FDropDownButton.GetWidth(),0,this.GetWidth(),this.GetHeight()))}
           else if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,this.GetHeight() - this.FDropDownButton.GetHeight(),this.GetWidth(),this.GetHeight()));
        } else {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(this.FDropDownButton.GetLeft(),this.FDropDownButton.GetTop(),this.FDropDownButton.GetLeft() + this.FDropDownButton.GetWidth(),this.FDropDownButton.GetTop() + this.FDropDownButton.GetHeight()));
        };
      };
      return Result;
    };
    this.GetTextRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var bmpr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var dr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(this.GetLocalRect());
      bmpr.$assign(this.GetBitmapRect$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r)));
      dr.$assign(this.GetDropDownRect());
      if (this.FDropDownKind !== $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal) {
        if (!this.FStretchText) {
          var $tmp1 = this.FBitmapPosition;
          if ($tmp1 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
            var $tmp2 = this.FDropDownPosition;
            if ($tmp2 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
              Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(bmpr.Right + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3))}
             else if ($tmp2 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(bmpr.Right + 3,r.Top + 3,r.Right - 3,dr.Top - 3));
          } else if ($tmp1 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) {
            var $tmp3 = this.FDropDownPosition;
            if ($tmp3 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
              Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,bmpr.Bottom + 3,dr.Left - 3,r.Bottom - 3))}
             else if ($tmp3 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,bmpr.Bottom + 3,r.Right - 3,dr.Top - 3));
          };
        } else {
          var $tmp4 = this.FDropDownPosition;
          if ($tmp4 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
            Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3))}
           else if ($tmp4 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,dr.Top - 3));
        };
      } else {
        if (!this.FStretchText) {
          var $tmp5 = this.FBitmapPosition;
          if ($tmp5 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
            Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(bmpr.Right + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3))}
           else if ($tmp5 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,bmpr.Bottom + 3,dr.Left - 3,r.Bottom - 3));
        } else Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,dr.Left - 3,r.Bottom - 3));
      };
      return Result;
    };
    this.GetBitmapRect$1 = function (ARect) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var dr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var bs = 0.0;
      bs = this.GetBitmapSize();
      var $tmp1 = this.FLayout;
      if ($tmp1 === $mod.TTMSFNCToolBarButtonLayout.bblLarge) bs = this.GetLargeLayoutBitmapSize();
      r.$assign(ARect);
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Left,r.Bottom));
      if (this.FBitmapVisible) {
        if (this.FDropDownKind !== $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal) {
          dr.$assign(this.GetDropDownRect());
          var $tmp2 = this.FBitmapPosition;
          if ($tmp2 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
            var $tmp3 = this.FDropDownPosition;
            if ($tmp3 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
              Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,Result.Left + 3 + bs,Result.Bottom - 3))}
             else if ($tmp3 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,Result.Left + 3 + bs,dr.Top - 3));
          } else if ($tmp2 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) {
            var $tmp4 = this.FDropDownPosition;
            if ($tmp4 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
              Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,dr.Left - 3,Result.Top + 3 + bs))}
             else if ($tmp4 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,r.Right - 3,Result.Top + 3 + bs));
          };
        } else if (!this.FTextVisible || (this.GetText() === "")) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,r.Bottom - 3));
          if ((bs !== -1) && !this.FStretchBitmapIfNoText) {
            Result.Left = Math.round(r.Left + ((r.Right - r.Left - bs) / 2));
            Result.Top = Math.round(r.Top + ((r.Bottom - r.Top - bs) / 2));
            Result.Right = Result.Left + bs;
            Result.Bottom = Result.Top + bs;
          };
        } else if (this.FTextVisible && !(this.GetText() === "")) {
          var $tmp5 = this.FBitmapPosition;
          if ($tmp5 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft) {
            Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Left + 3 + bs,r.Bottom - 3))}
           else if ($tmp5 === $mod.TTMSFNCToolBarButtonBitmapPosition.bbpTop) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,r.Top + 3 + bs));
        };
      };
      return Result;
    };
    this.GetBitmapRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign($mod.TTMSFNCDefaultToolBarButton.GetBitmapRect.call(this));
      return Result;
    };
    this.CanDropDown = function () {
      var Result = false;
      Result = this.FDropDownKind !== $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal;
      return Result;
    };
    this.Assign = function (Source) {
      $mod.TTMSFNCDefaultToolBarButton.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomToolBarButton.isPrototypeOf(Source)) {
        this.FDropDownKind = rtl.as(Source,$mod.TTMSFNCCustomToolBarButton).FDropDownKind;
        this.FDropDownPosition = rtl.as(Source,$mod.TTMSFNCCustomToolBarButton).FDropDownPosition;
        this.FAutoOptionsMenuText = rtl.as(Source,$mod.TTMSFNCCustomToolBarButton).FAutoOptionsMenuText;
        this.FHidden = rtl.as(Source,$mod.TTMSFNCCustomToolBarButton).FHidden;
        this.Invalidate();
      };
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCDefaultToolBarButton.Create$1.apply(this,arguments);
      this.FHidden = false;
      this.FDropDownPosition = $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight;
      this.FDropDownButton = this.GetDropDownButtonClass().$create("Create$1",[this]);
      this.FDropDownButton.SetTabStop(false);
      this.FDropDownButton.SetText("");
      this.FDropDownButton.FOnClick = rtl.createCallback(this,"DropDownButtonClick");
      this.FDropDownButton.SetVisible(false);
      this.FDropDownButton.SetWidth(17);
      this.FDropDownButton.FAppearance.SetCorners(rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight));
      this.FDropDownButton.SetAlign(pas["WEBLib.Controls"].TAlign.alRight);
      this.FDropDownButton.FStored = false;
      this.FDropDownButton.FBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPAND,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FDropDownButton.FBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPANDLARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FDropDownButton.FDisabledBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPAND,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FDropDownButton.FDisabledBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPANDLARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FDropDownButton.FHoverBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPAND,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FDropDownButton.FHoverBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPANDLARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FDropDownButton");
      $mod.TTMSFNCDefaultToolBarButton.Destroy.call(this);
    };
    this.GetDropDownButtonControl = function () {
      var Result = null;
      Result = this.FDropDownButton;
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCCustomToolBarSeparatorAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FStroke = null;
      this.FInnerStroke = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FStroke = undefined;
      this.FInnerStroke = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetStroke = function (Value) {
      this.FStroke.Assign(Value);
    };
    this.SetInnerStroke = function (Value) {
      this.FInnerStroke.Assign(Value);
    };
    this.StrokeChanged = function (Sender) {
      this.FOwner.Invalidate();
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomToolBarSeparatorAppearance.isPrototypeOf(Source)) {
        this.FStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBarSeparatorAppearance).FStroke);
        this.FInnerStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBarSeparatorAppearance).FInnerStroke);
      } else pas.Classes.TPersistent.Assign.apply(this,arguments);
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FInnerStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,16777215]);
      this.FInnerStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FInnerStroke");
      rtl.free(this,"FStroke");
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TTMSFNCToolBarSeparatorAppearance",$mod.TTMSFNCCustomToolBarSeparatorAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
    $r.addProperty("InnerStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FInnerStroke","SetInnerStroke");
  });
  rtl.createClass($mod,"TTMSFNCCustomToolBarSeparator",$mod.TTMSFNCCustomToolBarElement,function () {
    this.$init = function () {
      $mod.TTMSFNCCustomToolBarElement.$init.call(this);
      this.FAppearance = null;
    };
    this.$final = function () {
      this.FAppearance = undefined;
      $mod.TTMSFNCCustomToolBarElement.$final.call(this);
    };
    this.SetAppearance = function (Value) {
      this.FAppearance.Assign(Value);
    };
    this.UpdateState = function () {
      var f = 0.0;
      $mod.TTMSFNCCustomToolBarElement.UpdateState.call(this);
      var $tmp1 = this.FState;
      if ($tmp1 === $mod.TTMSFNCToolBarElementState.esNormal) {
        f = 0.8}
       else if ($tmp1 === $mod.TTMSFNCToolBarElementState.esLarge) {
        f = 1.25}
       else {
        f = 1;
      };
      if (!(pas.Classes.TComponentStateItem.csLoading in this.FComponentState)) {
        this.SetBounds(this.GetLeft(),this.GetTop(),this.GetWidth(),Math.round(this.GetHeight() * f));
      };
    };
    this.Assign = function (Source) {
      $mod.TTMSFNCCustomToolBarElement.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomToolBarSeparator.isPrototypeOf(Source)) {
        this.FAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBarSeparator).FAppearance);
        this.Invalidate();
      };
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomToolBarElement.Create$1.apply(this,arguments);
      this.SetWidth(2);
      this.SetHeight(30);
      this.FAppearance = $mod.TTMSFNCToolBarSeparatorAppearance.$create("Create$1",[this]);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FAppearance");
      $mod.TTMSFNCCustomToolBarElement.Destroy.call(this);
    };
    this.Draw = function (AGraphics, ARect) {
      var cp = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      r.$assign(this.GetLocalRect());
      cp.$assign(pas["WEBLib.TMSFNCTypes"].PointF(r.Left,r.Top));
      AGraphics.FStroke.Assign(this.FAppearance.FStroke);
      AGraphics.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(cp.X,r.Top)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(cp.X,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      AGraphics.FStroke.Assign(this.FAppearance.FInnerStroke);
      AGraphics.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(cp.X + 1,r.Top)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(cp.X + 1,r.Bottom)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCToolBarButton",$mod.TTMSFNCCustomToolBarButton,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCToolBarButton);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Font",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FFont$1","SetFont$1");
    $r.addProperty("AutoOptionsMenuText",0,rtl.string,"FAutoOptionsMenuText","FAutoOptionsMenuText");
    $r.addProperty("DropDownAutoWidth",2,rtl.boolean,"FDropDownAutoWidth","SetDropDownAutoWidth",{Default: false});
    $r.addProperty("DropDownKind",2,$mod.$rtti["TTMSFNCToolBarButtonDropDownKind"],"FDropDownKind","SetDropDownKind",{Default: $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal});
    $r.addProperty("DropDownPosition",2,$mod.$rtti["TTMSFNCToolBarButtonDropDownPosition"],"FDropDownPosition","SetDropDownPosition",{Default: $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight});
    $r.addProperty("DropDownHeight",14,rtl.double,"FDropDownHeight","SetDropDownHeight",{stored: "IsDropDownHeightStored"});
    $r.addProperty("DropDownWidth",14,rtl.double,"FDropDownWidth","SetDropDownWidth",{stored: "IsDropDownWidthStored"});
    $r.addProperty("DropDownControl",2,pas["WEBLib.Controls"].$rtti["TControl"],"FDropDownControl","SetDropDownControl");
    $r.addProperty("OnBeforeDropDown",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnBeforeDropDown","FOnBeforeDropDown");
    $r.addProperty("OnDropDown",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDropDown","FOnDropDown");
    $r.addProperty("OnCloseDropDown",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnCloseDropDown","FOnCloseDropDown");
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
    $r.addProperty("ShowFocus",2,rtl.boolean,"FShowFocus$1","SetShowFocus$1",{Default: false});
    $r.addProperty("TextVisible",2,rtl.boolean,"FTextVisible","SetTextVisible",{Default: true});
    $r.addProperty("StretchText",2,rtl.boolean,"FStretchText","SetStretchText",{Default: false});
    $r.addProperty("StretchBitmapIfNoText",2,rtl.boolean,"FStretchBitmapIfNoText","SetStretchBitmapIfNoText",{Default: true});
    $r.addProperty("HorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FHorizontalTextAlign","SetHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("VerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FVerticalTextAlign","SetVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("Trimming",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextTrimming"],"FTrimming","SetTrimming",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttCharacter});
    $r.addProperty("Bitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FBitmaps","SetBitmaps");
    $r.addProperty("LargeLayoutBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FLargeLayoutBitmaps","SetLargeLayoutBitmaps");
    $r.addProperty("Layout",2,$mod.$rtti["TTMSFNCToolBarButtonLayout"],"FLayout","SetLayout",{Default: $mod.TTMSFNCToolBarButtonLayout.bblNone});
    $r.addProperty("CompactLayout",2,$mod.$rtti["TTMSFNCToolBarButtonLayout"],"FCompactLayout","SetCompactLayout",{Default: $mod.TTMSFNCToolBarButtonLayout.bblNone});
    $r.addProperty("MinimumLayout",2,$mod.$rtti["TTMSFNCToolBarButtonLayout"],"FMinimumLayout","SetMinimumLayout",{Default: $mod.TTMSFNCToolBarButtonLayout.bblBitmap});
    $r.addProperty("MaximumLayout",2,$mod.$rtti["TTMSFNCToolBarButtonLayout"],"FMaximumLayout","SetMaximumLayout",{Default: $mod.TTMSFNCToolBarButtonLayout.bblLarge});
    $r.addProperty("BitmapPosition",2,$mod.$rtti["TTMSFNCToolBarButtonBitmapPosition"],"FBitmapPosition","SetBitmapPosition",{Default: $mod.TTMSFNCToolBarButtonBitmapPosition.bbpLeft});
    $r.addProperty("DisabledBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FDisabledBitmaps","SetDisabledBitmaps");
    $r.addProperty("HoverBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FHoverBitmaps","SetHoverBitmaps");
    $r.addProperty("LargeLayoutDisabledBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FLargeLayoutDisabledBitmaps","SetLargeLayoutDisabledBitmaps");
    $r.addProperty("LargeLayoutHoverBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FLargeLayoutHoverBitmaps","SetLargeLayoutHoverBitmaps");
    $r.addProperty("BitmapVisible",2,rtl.boolean,"FBitmapVisible","SetBitmapVisible",{Default: false});
    $r.addProperty("BitmapContainer",3,pas["WEBLib.TMSFNCBitmapContainer"].$rtti["TTMSFNCBitmapContainer"],"GetBitmapContainer","SetBitmapContainer");
    $r.addProperty("BitmapSize",14,rtl.double,"FBitmapSize","SetBitmapSize",{stored: "IsBitmapSizeStored"});
    $r.addProperty("AutoBitmapSize",2,rtl.boolean,"FAutoBitmapSize","SetAutoBitmapSize",{Default: false});
    $r.addProperty("LargeLayoutBitmapSize",14,rtl.double,"FLargeLayoutBitmapSize","SetLargeLayoutBitmapSize",{stored: "IsLargeLayoutBitmapSizeStored"});
    $r.addProperty("LargeLayoutAutoBitmapSize",2,rtl.boolean,"FLargeLayoutAutoBitmapSize","SetLargeLayoutAutoBitmapSize",{Default: false});
    $r.addProperty("State",2,$mod.$rtti["TTMSFNCToolBarElementState"],"FState","SetState",{Default: $mod.TTMSFNCToolBarElementState.esNormal});
    $r.addProperty("LastElement",2,rtl.boolean,"FLastElement","SetLastElement",{Default: false});
    $r.addProperty("Appearance",2,$mod.$rtti["TTMSFNCToolBarButtonAppearance"],"FAppearance","SetAppearance");
    $r.addProperty("WordWrapping",2,rtl.boolean,"FWordWrapping","SetWordWrapping",{Default: false});
  });
  $mod.$rtti.$ClassRef("TTMSFNCToolBarButtonClass",{instancetype: $mod.$rtti["TTMSFNCToolBarButton"]});
  rtl.createClass($mod,"TTMSFNCToolBarSeparator",$mod.TTMSFNCCustomToolBarSeparator,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCToolBarSeparator);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("State",2,$mod.$rtti["TTMSFNCToolBarElementState"],"FState","SetState",{Default: $mod.TTMSFNCToolBarElementState.esNormal});
    $r.addProperty("LastElement",2,rtl.boolean,"FLastElement","SetLastElement",{Default: false});
    $r.addProperty("Appearance",2,$mod.$rtti["TTMSFNCToolBarSeparatorAppearance"],"FAppearance","SetAppearance");
  });
  $mod.$rtti.$ClassRef("TTMSFNCToolBarSeparatorClass",{instancetype: $mod.$rtti["TTMSFNCToolBarSeparator"]});
  $mod.$rtti.$MethodVar("TTMSFNCToolBarItemPickerItemSelected",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AItemIndex",rtl.longint]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCToolBarCustomItemPicker",$mod.TTMSFNCToolBarButton,function () {
    this.$init = function () {
      $mod.TTMSFNCToolBarButton.$init.call(this);
      this.FEdit = null;
      this.FTimer = null;
      this.FItemIndex = 0;
      this.FItems = null;
      this.FKeyboardUsed = false;
      this.FItemSelector = null;
      this.FOnItemSelected = null;
      this.FEditable = false;
      this.FOnEditChange = null;
    };
    this.$final = function () {
      this.FEdit = undefined;
      this.FTimer = undefined;
      this.FItems = undefined;
      this.FItemSelector = undefined;
      this.FOnItemSelected = undefined;
      this.FOnEditChange = undefined;
      $mod.TTMSFNCToolBarButton.$final.call(this);
    };
    this.GetSelectedItemIndex = function () {
      var Result = 0;
      Result = this.FItemIndex;
      return Result;
    };
    this.SetSelectedItemIndex = function (Value) {
      this.FItemIndex = Value;
      this.Invalidate();
    };
    this.GetSelectedItem = function () {
      var Result = "";
      Result = "";
      if ((this.FItems != null) && (this.FItemIndex >= 0) && (this.FItemIndex <= (this.FItems.GetCount() - 1))) Result = this.FItems.Get(this.FItemIndex);
      return Result;
    };
    this.SetSelectedItem = function (Value) {
      this.FItemIndex = this.FItems.IndexOf(Value);
      this.Invalidate();
    };
    this.SetItems = function (Value) {
      this.FItems.Assign(Value);
    };
    this.SetEditable = function (Value) {
      if (this.FEditable !== Value) {
        this.FEditable = Value;
        if (this.FEdit != null) {
          if (this.FEditable) {
            this.FEdit.SetParent(this);
          } else this.FEdit.SetParent(null);
          this.FEdit.SetVisible(this.FEditable);
        };
        this.Invalidate();
      };
    };
    this.CanChangeText = function () {
      var Result = false;
      Result = !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState) && !(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState);
      return Result;
    };
    this.GetText = function () {
      var Result = "";
      if (this.FEditable) {
        Result = this.FEdit.GetText()}
       else Result = this.GetSelectedItem();
      return Result;
    };
    this.EnterTimerChanged = function (Sender) {
      this.FEdit.SetFocus();
      this.FTimer.SetEnabled(false);
    };
    this.EditChange = function (Sender) {
      this.SetSelectedItem(this.FEdit.GetText());
      if (this.FOnEditChange != null) this.FOnEditChange(this);
    };
    this.HandleDialogKey = function (Key, Shift) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleDialogKey.apply(this,arguments);
      if (rtl.neSet(Shift,{})) return;
      if (this.FEditable && this.FEdit.IsFocused()) {
        var $tmp1 = Key.get();
        if ($tmp1 === 115) {
          if (!(pas["WEBLib.Controls"].TShiftState$a.ssAlt in Shift)) this.DropDown();
        };
      };
    };
    this.InitializePopup = function () {
      this.FItemSelector.FItems.Clear();
      this.FItemSelector.FItems.Assign(this.FItems);
      this.FItemSelector.SetItemIndex(this.FItemIndex);
    };
    this.SelectValueWithString = function (AValue) {
      var I = 0;
      for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MatchStrEx(AValue + "*",this.FItems.Get(I),false)) {
          this.FItemIndex = I;
          this.DoItemSelected();
          this.Invalidate();
          break;
        };
      };
    };
    this.SelectValueWithCharacter = function (ACharacter) {
      var I = 0;
      $mod.TTMSFNCDefaultToolBarButton.SelectValueWithCharacter.apply(this,arguments);
      for (var $l1 = 0, $end2 = this.FItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MatchStrEx(ACharacter + "*",this.FItems.Get(I),false)) {
          this.FItemIndex = I;
          this.DoItemSelected();
          this.Invalidate();
          break;
        };
      };
    };
    this.SelectFirstValue = function () {
      $mod.TTMSFNCDefaultToolBarButton.SelectFirstValue.call(this);
      this.FItemIndex = 0;
      this.DoItemSelected();
      this.Invalidate();
    };
    this.SelectLastValue = function () {
      $mod.TTMSFNCDefaultToolBarButton.SelectLastValue.call(this);
      this.FItemIndex = this.FItems.GetCount() - 1;
      this.DoItemSelected();
      this.Invalidate();
    };
    this.SelectNextValue = function () {
      $mod.TTMSFNCDefaultToolBarButton.SelectNextValue.call(this);
      if (this.FItemIndex === -1) {
        this.FItemIndex = 0}
       else this.FItemIndex = Math.min(this.FItems.GetCount() - 1,this.FItemIndex + 1);
      this.DoItemSelected();
      this.Invalidate();
    };
    this.SelectPreviousValue = function () {
      $mod.TTMSFNCDefaultToolBarButton.SelectPreviousValue.call(this);
      if (this.FItemIndex === -1) {
        this.FItemIndex = 0}
       else this.FItemIndex = Math.max(0,this.FItemIndex - 1);
      this.DoItemSelected();
      this.Invalidate();
    };
    this.ItemKeyUp = function (Sender, Key, Shift) {
      if ((Key.get() === 13) || (Key.get() === 32)) {
        this.FItemIndex = this.FItemSelector.GetItemIndex();
        if (this.FCloseOnSelection) this.DropDown();
        this.DoItemSelected();
        this.Invalidate();
      };
      this.FKeyboardUsed = false;
    };
    this.ItemKeyDown = function (Sender, Key, Shift) {
      this.FKeyboardUsed = true;
    };
    this.ItemSelected = function (Sender) {
      if (this.FKeyboardUsed) return;
      this.FItemIndex = this.FItemSelector.GetItemIndex();
      if (this.FCloseOnSelection) this.DropDown();
      this.DoItemSelected();
      this.Invalidate();
    };
    this.DoItemSelected = function () {
      if ((this.FEdit != null) && this.FEdit.HandleAllocated()) {
        this.FEdit.SetText(this.GetSelectedItem());
        this.FEdit.SetSelStart(this.FEdit.GetText().length);
      };
      if (this.FOnItemSelected != null) this.FOnItemSelected(this,this.GetSelectedItemIndex());
    };
    this.DoEnter = function () {
      pas["WEBLib.Controls"].TControl.DoEnter.call(this);
      this.FTimer.SetEnabled(this.FEditable);
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomToolBarButton.Create$1.apply(this,arguments);
      this.FTimer = pas["WEBLib.ExtCtrls"].TTimer.$create("Create$1",[this]);
      this.FTimer.SetInterval(1);
      this.FTimer.FOnTimer = rtl.createCallback(this,"EnterTimerChanged");
      this.FTimer.SetEnabled(false);
      this.FEdit = pas["WEBLib.StdCtrls"].TEdit.$create("Create$1",[this]);
      this.FEdit.SetTabStop(true);
      this.FEdit.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
      this.FEdit.FOnChange = rtl.createCallback(this,"EditChange");
      this.SetWidth(100);
      this.SetHeight(24);
      this.SetHorizontalTextAlign(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading);
      this.FItemIndex = -1;
      this.FItemSelector = pas["WEBLib.StdCtrls"].TListBox.$create("Create$1",[this]);
      this.FItemSelector.SetWidth(200);
      this.FItemSelector.SetHeight(150);
      this.FItemSelector.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
      this.FItemSelector.FOnClick = rtl.createCallback(this,"ItemSelected");
      this.FItemSelector.FOnKeyUp = rtl.createCallback(this,"ItemKeyUp");
      this.FItemSelector.FOnKeyDown = rtl.createCallback(this,"ItemKeyDown");
      this.SetDropDownControl(this.FItemSelector);
      this.SetDropDownKind($mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDownButton);
      this.SetDropDownWidth(this.FItemSelector.GetWidth());
      this.SetDropDownHeight(this.FItemSelector.GetHeight());
      this.FItems = pas.Classes.TStringList.$create("Create$1");
      return this;
    };
    this.Draw = function (AGraphics, ARect) {
      if (!this.FEditable) $mod.TTMSFNCDefaultToolBarButton.Draw.apply(this,arguments);
    };
    this.Destroy = function () {
      rtl.free(this,"FTimer");
      rtl.free(this,"FItems");
      $mod.TTMSFNCCustomToolBarButton.Destroy.call(this);
    };
    this.DropDown = function () {
      $mod.TTMSFNCDefaultToolBarButton.DropDown.call(this);
      if (!(this.FPopup != null)) return;
      if (this.FPopup.FIsOpen && (this.FItemSelector != null)) {
        this.FItemSelector.SetItemIndex(-1);
        this.FItemSelector.SetItemIndex(this.GetSelectedItemIndex());
      };
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCToolBarItemPicker",$mod.TTMSFNCToolBarCustomItemPicker,function () {
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("OnItemSelected",0,$mod.$rtti["TTMSFNCToolBarItemPickerItemSelected"],"FOnItemSelected","FOnItemSelected");
    $r.addProperty("SelectedItemIndex",3,rtl.longint,"GetSelectedItemIndex","SetSelectedItemIndex",{Default: -1});
    $r.addProperty("Items",2,pas.Classes.$rtti["TStringList"],"FItems","SetItems");
    $r.addProperty("Editable",2,rtl.boolean,"FEditable","SetEditable",{Default: false});
    $r.addProperty("OnEditChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEditChange","FOnEditChange");
  });
  $mod.$rtti.$MethodVar("TTMSFNCToolBarFontNamePickerFontNameSelected",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AFontName",rtl.string]]), methodkind: 0});
  $mod.$rtti.$ClassRef("TTMSFNCToolBarItemPickerClass",{instancetype: $mod.$rtti["TTMSFNCToolBarItemPicker"]});
  rtl.createClass($mod,"TTMSFNCToolBarFontNamePicker",$mod.TTMSFNCToolBarCustomItemPicker,function () {
    this.$init = function () {
      $mod.TTMSFNCToolBarCustomItemPicker.$init.call(this);
      this.FOnFontNameSelected = null;
    };
    this.$final = function () {
      this.FOnFontNameSelected = undefined;
      $mod.TTMSFNCToolBarCustomItemPicker.$final.call(this);
    };
    this.GetSelectedFontName = function () {
      var Result = "";
      Result = this.GetSelectedItem();
      return Result;
    };
    this.SetSelectedFontName = function (Value) {
      this.SetSelectedItem(Value);
    };
    this.RegisterRuntimeClasses = function () {
      $mod.TTMSFNCToolBarButton.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCToolBarFontNamePicker);
    };
    this.DoItemSelected = function () {
      $mod.TTMSFNCToolBarCustomItemPicker.DoItemSelected.call(this);
      if (this.FOnFontNameSelected != null) this.FOnFontNameSelected(this,this.GetSelectedFontName());
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCToolBarCustomItemPicker.Create$1.apply(this,arguments);
      this.FAutoOptionsMenuText = "Font Name";
      pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.GetFonts(this.FItems);
      return this;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("OnFontNameSelected",0,$mod.$rtti["TTMSFNCToolBarFontNamePickerFontNameSelected"],"FOnFontNameSelected","FOnFontNameSelected");
    $r.addProperty("CloseOnSelection",2,rtl.boolean,"FCloseOnSelection","SetCloseOnSelection",{Default: true});
    $r.addProperty("Editable",2,rtl.boolean,"FEditable","SetEditable",{Default: false});
    $r.addProperty("OnEditChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEditChange","FOnEditChange");
  });
  $mod.$rtti.$MethodVar("TTMSFNCToolBarFontSizePickerFontSizeSelected",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AFontSize",rtl.double]]), methodkind: 0});
  $mod.$rtti.$ClassRef("TTMSFNCToolBarFontNamePickerClass",{instancetype: $mod.$rtti["TTMSFNCToolBarFontNamePicker"]});
  rtl.createClass($mod,"TTMSFNCToolBarFontSizePicker",$mod.TTMSFNCToolBarCustomItemPicker,function () {
    this.$init = function () {
      $mod.TTMSFNCToolBarCustomItemPicker.$init.call(this);
      this.FOnFontSizeSelected = null;
    };
    this.$final = function () {
      this.FOnFontSizeSelected = undefined;
      $mod.TTMSFNCToolBarCustomItemPicker.$final.call(this);
    };
    this.GetSelectedFontSize = function () {
      var Result = 0.0;
      var s = "";
      Result = -1;
      s = this.GetSelectedItem();
      if (s !== "") Result = pas.SysUtils.StrToFloat(this.GetSelectedItem());
      return Result;
    };
    this.SetSelectedFontSize = function (Value) {
      this.SetSelectedItem(pas.SysUtils.FloatToStr(Value));
    };
    this.RegisterRuntimeClasses = function () {
      $mod.TTMSFNCToolBarButton.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCToolBarFontSizePicker);
    };
    this.DoItemSelected = function () {
      $mod.TTMSFNCToolBarCustomItemPicker.DoItemSelected.call(this);
      if (this.FOnFontSizeSelected != null) this.FOnFontSizeSelected(this,this.GetSelectedFontSize());
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCToolBarCustomItemPicker.Create$1.apply(this,arguments);
      this.FAutoOptionsMenuText = "Font Size";
      this.FItems.Add("8");
      this.FItems.Add("9");
      this.FItems.Add("10");
      this.FItems.Add("11");
      this.FItems.Add("12");
      this.FItems.Add("14");
      this.FItems.Add("16");
      this.FItems.Add("18");
      this.FItems.Add("20");
      this.FItems.Add("22");
      this.FItems.Add("24");
      this.FItems.Add("26");
      this.FItems.Add("28");
      this.FItems.Add("36");
      this.FItems.Add("48");
      this.FItems.Add("72");
      return this;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("OnFontSizeSelected",0,$mod.$rtti["TTMSFNCToolBarFontSizePickerFontSizeSelected"],"FOnFontSizeSelected","FOnFontSizeSelected");
    $r.addProperty("CloseOnSelection",2,rtl.boolean,"FCloseOnSelection","SetCloseOnSelection",{Default: true});
    $r.addProperty("Editable",2,rtl.boolean,"FEditable","SetEditable",{Default: false});
    $r.addProperty("OnEditChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEditChange","FOnEditChange");
  });
  $mod.$rtti.$MethodVar("TTMSFNCToolBarColorPickerColorSelected",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AColor",pas["WEBLib.Graphics"].$rtti["TColor"]]]), methodkind: 0});
  $mod.$rtti.$ClassRef("TTMSFNCToolBarFontSizePickerClass",{instancetype: $mod.$rtti["TTMSFNCToolBarFontSizePicker"]});
  rtl.createClass($mod,"TTMSFNCToolBarColorPicker",$mod.TTMSFNCToolBarButton,function () {
    this.$init = function () {
      $mod.TTMSFNCToolBarButton.$init.call(this);
      this.FColorSelector = null;
      this.FOnColorSelected = null;
    };
    this.$final = function () {
      this.FColorSelector = undefined;
      this.FOnColorSelected = undefined;
      $mod.TTMSFNCToolBarButton.$final.call(this);
    };
    this.GetSelectedColor = function () {
      var Result = 0;
      Result = this.FColorSelector.GetSelectedColor();
      return Result;
    };
    this.SetSelectedColor = function (Value) {
      this.FColorSelector.SetSelectedColor(Value);
      this.Invalidate();
    };
    this.GetSelectedItemIndex = function () {
      var Result = 0;
      Result = this.FColorSelector.FSelectedItemIndex;
      return Result;
    };
    this.SetSelectedItemIndex = function (Value) {
      this.FColorSelector.SetSelectedItemIndex(Value);
      this.Invalidate();
    };
    this.GetItems = function () {
      var Result = null;
      Result = this.FColorSelector.GetItems();
      return Result;
    };
    this.SetItems = function (Value) {
      this.FColorSelector.GetItems().Assign(Value);
    };
    this.RegisterRuntimeClasses = function () {
      $mod.TTMSFNCToolBarButton.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCToolBarColorPicker);
    };
    this.SetAdaptToStyle = function (Value) {
      $mod.TTMSFNCCustomToolBarButton.SetAdaptToStyle.apply(this,arguments);
      if (this.FColorSelector != null) this.FColorSelector.SetAdaptToStyle(this.GetAdaptToStyle());
    };
    this.DrawColor = function (AColor, ARect, AGraphics) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var I = 0;
      var J = 0;
      var st = null;
      r.$assign(ARect);
      pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-3.5,-3.5);
      pas["WEBLib.TMSFNCTypes"].OffsetRectEx$1(r,0.5,0.5);
      st = AGraphics.SaveState(false);
      try {
        AGraphics.ClipRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
        AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        AGraphics.FStroke.SetWidth(1);
        AGraphics.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(255,255,255));
        AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
        AGraphics.FFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(211,211,211));
        for (var $l1 = 0, $end2 = pas.System.Trunc((r.Right - r.Left) / 5) + 1; $l1 <= $end2; $l1++) {
          I = $l1;
          for (var $l3 = 0, $end4 = pas.System.Trunc((r.Bottom - r.Top) / 5) + 1; $l3 <= $end4; $l3++) {
            J = $l3;
            if (pas.System.Odd(I + J)) AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(I * 5,J * 5,(I + 1) * 5,(J + 1) * 5)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmNone);
          };
        };
        AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        AGraphics.FFill.SetColor(AColor);
        AGraphics.FStroke.SetColor(0);
        AGraphics.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
        AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      } finally {
        AGraphics.RestoreState(st,false);
      };
    };
    this.ColorSelected = function (Sender, AColor) {
      if (this.FCloseOnSelection && !this.BlockChange()) this.CloseDropDown();
      this.DoColorSelected(AColor);
      this.Invalidate();
    };
    this.DoColorSelected = function (AColor) {
      if (this.FOnColorSelected != null) this.FOnColorSelected(this,AColor);
    };
    this.CanChangeText = function () {
      var Result = false;
      Result = !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState) && !(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState);
      return Result;
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomToolBarButton.Create$1.apply(this,arguments);
      this.SetWidth(40);
      this.SetHeight(24);
      this.FAutoOptionsMenuText = "Color";
      this.FColorSelector = pas["WEBLib.TMSFNCColorSelector"].TTMSFNCColorSelector.$create("Create$1",[this]);
      this.FColorSelector.FAppearance.SetHorizontalSpacing(2);
      this.FColorSelector.FAppearance.SetVerticalSpacing(2);
      this.FColorSelector.SetMode(pas["WEBLib.TMSFNCColorSelector"].TTMSFNCCustomColorSelectorMode.csmExtended);
      this.FColorSelector.SetWidth(175);
      this.FColorSelector.SetHeight(125);
      this.FColorSelector.FStored = false;
      this.FColorSelector.SetSelectedColor(0);
      this.FColorSelector.FOnColorSelected = rtl.createCallback(this,"ColorSelected");
      this.SetDropDownControl(this.FColorSelector);
      this.SetDropDownWidth(this.FColorSelector.GetWidth());
      this.SetDropDownHeight(this.FColorSelector.GetHeight());
      this.SetDropDownKind($mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDownButton);
      return this;
    };
    this.BlockChange = function () {
      var Result = false;
      Result = this.FColorSelector.FBlockChange;
      return Result;
    };
    this.ColorSelector = function () {
      var Result = null;
      Result = this.FColorSelector;
      return Result;
    };
    this.Draw = function (AGraphics, ARect) {
      $mod.TTMSFNCDefaultToolBarButton.Draw.apply(this,arguments);
      this.DrawSelectedColor(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
    };
    this.DrawSelectedColor = function (AGraphics, ARect) {
      var R = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var c = 0;
      var ct = null;
      ct = this.GetDropDownButtonControl();
      if (ct != null) {
        R.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,this.GetWidth() - ct.GetWidth(),this.GetHeight()));
        c = this.GetSelectedColor();
        this.DrawColor(c,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(R),AGraphics);
      };
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("OnColorSelected",0,$mod.$rtti["TTMSFNCToolBarColorPickerColorSelected"],"FOnColorSelected","FOnColorSelected");
    $r.addProperty("SelectedColor",3,pas["WEBLib.Graphics"].$rtti["TColor"],"GetSelectedColor","SetSelectedColor",{Default: -1});
    $r.addProperty("SelectedItemIndex",3,rtl.longint,"GetSelectedItemIndex","SetSelectedItemIndex");
    $r.addProperty("Items",3,pas["WEBLib.TMSFNCColorSelector"].$rtti["TTMSFNCColorSelectorItems"],"GetItems","SetItems");
    $r.addProperty("CloseOnSelection",2,rtl.boolean,"FCloseOnSelection","SetCloseOnSelection",{Default: true});
  });
  $mod.$rtti.$MethodVar("TTMSFNCToolBarBitmapPickerBitmapSelected",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ABitmap",pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"]]]), methodkind: 0});
  $mod.$rtti.$ClassRef("TTMSFNCToolBarColorPickerClass",{instancetype: $mod.$rtti["TTMSFNCToolBarColorPicker"]});
  rtl.createClass($mod,"TTMSFNCToolBarBitmapPicker",$mod.TTMSFNCToolBarButton,function () {
    this.$init = function () {
      $mod.TTMSFNCToolBarButton.$init.call(this);
      this.FBitmapSelector = null;
      this.FOnBitmapSelected = null;
    };
    this.$final = function () {
      this.FBitmapSelector = undefined;
      this.FOnBitmapSelected = undefined;
      $mod.TTMSFNCToolBarButton.$final.call(this);
    };
    this.GetSelectedBitmap = function () {
      var Result = null;
      Result = this.FBitmapSelector.GetSelectedBitmap();
      return Result;
    };
    this.GetSelectedItemIndex = function () {
      var Result = 0;
      Result = this.FBitmapSelector.FSelectedItemIndex;
      return Result;
    };
    this.SetSelectedItemIndex = function (Value) {
      this.FBitmapSelector.SetSelectedItemIndex(Value);
      this.FBitmaps.Clear();
      this.FDisabledBitmaps.Clear();
      this.FHoverBitmaps.Clear();
      this.FBitmaps.AddBitmap(this.GetSelectedBitmap(),1.0);
      this.FDisabledBitmaps.AddBitmap(this.GetSelectedBitmap(),1.0);
      this.FHoverBitmaps.AddBitmap(this.GetSelectedBitmap(),1.0);
      this.Invalidate();
    };
    this.GetItems = function () {
      var Result = null;
      Result = this.FBitmapSelector.GetItems();
      return Result;
    };
    this.SetItems = function (Value) {
      if (this.FBitmapSelector != null) this.FBitmapSelector.GetItems().Assign(Value);
    };
    this.SetBitmapContainer = function (Value) {
      $mod.TTMSFNCDefaultToolBarButton.SetBitmapContainer.apply(this,arguments);
      if (this.FBitmapSelector != null) this.FBitmapSelector.SetBitmapContainer(Value);
    };
    this.GetBitmapRect$1 = function (ARect) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var dr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(ARect);
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Right,r.Bottom));
      if (this.FBitmapVisible) {
        if (this.FDropDownKind !== $mod.TTMSFNCToolBarButtonDropDownKind.ddkNormal) {
          dr.$assign(this.GetDropDownRect());
          var $tmp1 = this.FDropDownPosition;
          if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpRight) {
            Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,dr.Left - 3,Result.Bottom - 3))}
           else if ($tmp1 === $mod.TTMSFNCToolBarButtonDropDownPosition.ddpBottom) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,Result.Right - 3,dr.Top - 3));
        } else Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(Result.Left + 3,Result.Top + 3,Result.Right - 3,Result.Bottom - 3));
      };
      return Result;
    };
    this.CanChangeText = function () {
      var Result = false;
      Result = !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState) && !(pas.Classes.TComponentStateItem.csDesigning in this.FComponentState);
      return Result;
    };
    this.RegisterRuntimeClasses = function () {
      $mod.TTMSFNCToolBarButton.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCToolBarBitmapPicker);
    };
    this.SetAdaptToStyle = function (Value) {
      $mod.TTMSFNCCustomToolBarButton.SetAdaptToStyle.apply(this,arguments);
      if (this.FBitmapSelector != null) this.FBitmapSelector.SetAdaptToStyle(this.GetAdaptToStyle());
    };
    this.BitmapSelected = function (Sender, ABitmap) {
      this.FBitmaps.Clear();
      this.FDisabledBitmaps.Clear();
      this.FHoverBitmaps.Clear();
      this.FBitmaps.AddBitmap(ABitmap,1.0);
      this.FDisabledBitmaps.AddBitmap(ABitmap,1.0);
      this.FHoverBitmaps.AddBitmap(ABitmap,1.0);
      if (this.FCloseOnSelection && !this.BlockChange()) this.CloseDropDown();
      this.DoBitmapSelected(ABitmap);
    };
    this.DoBitmapSelected = function (ABitmap) {
      if (this.FOnBitmapSelected != null) this.FOnBitmapSelected(this,ABitmap);
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomToolBarButton.Create$1.apply(this,arguments);
      this.SetWidth(40);
      this.SetHeight(24);
      this.FAutoOptionsMenuText = "Bitmap";
      this.FBitmapSelector = pas["WEBLib.TMSFNCBitmapSelector"].TTMSFNCBitmapSelector.$create("Create$1",[this]);
      this.FBitmapSelector.FAppearance.SetHorizontalSpacing(2);
      this.FBitmapSelector.FAppearance.SetVerticalSpacing(2);
      this.FBitmapSelector.FStored = false;
      this.FBitmapSelector.FOnBitmapSelected = rtl.createCallback(this,"BitmapSelected");
      this.SetDropDownControl(this.FBitmapSelector);
      this.SetDropDownWidth(this.FBitmapSelector.GetWidth());
      this.SetDropDownHeight(this.FBitmapSelector.GetHeight());
      this.SetDropDownKind($mod.TTMSFNCToolBarButtonDropDownKind.ddkDropDownButton);
      return this;
    };
    this.BlockChange = function () {
      var Result = false;
      Result = this.FBitmapSelector.FBlockChange;
      return Result;
    };
    this.BitmapSelector = function () {
      var Result = null;
      Result = this.FBitmapSelector;
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("OnBitmapSelected",0,$mod.$rtti["TTMSFNCToolBarBitmapPickerBitmapSelected"],"FOnBitmapSelected","FOnBitmapSelected");
    $r.addProperty("SelectedItemIndex",3,rtl.longint,"GetSelectedItemIndex","SetSelectedItemIndex");
    $r.addProperty("Items",3,pas["WEBLib.TMSFNCBitmapSelector"].$rtti["TTMSFNCBitmapSelectorItems"],"GetItems","SetItems");
    $r.addProperty("CloseOnSelection",2,rtl.boolean,"FCloseOnSelection","SetCloseOnSelection",{Default: true});
  });
  $mod.$rtti.$ClassRef("TTMSFNCToolBarBitmapPickerClass",{instancetype: $mod.$rtti["TTMSFNCToolBarBitmapPicker"]});
  rtl.createClass($mod,"TTMSFNCCustomToolBarAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FFill = null;
      this.FStroke = null;
      this.FVerticalSpacing = 0.0;
      this.FHorizontalSpacing = 0.0;
      this.FDragGripColor = 0;
      this.FDragGrip = false;
      this.FFlatStyle = false;
      this.FFont = null;
      this.FSeparatorStroke = null;
      this.FSeparator = false;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FFill = undefined;
      this.FStroke = undefined;
      this.FFont = undefined;
      this.FSeparatorStroke = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetFill = function (Value) {
      this.FFill.Assign(Value);
    };
    this.SetStroke = function (Value) {
      this.FStroke.Assign(Value);
    };
    this.SetHorizontalSpacing = function (Value) {
      if (this.FHorizontalSpacing !== Value) {
        this.FHorizontalSpacing = Value;
        this.FOwner.UpdateControls();
      };
    };
    this.SetVerticalSpacing = function (Value) {
      if (this.FVerticalSpacing !== Value) {
        this.FVerticalSpacing = Value;
        this.FOwner.UpdateControls();
      };
    };
    this.SetDragGrip = function (Value) {
      if (this.FDragGrip !== Value) {
        this.FDragGrip = Value;
        this.FOwner.UpdateControls();
      };
    };
    this.SetDragGripColor = function (Value) {
      if (this.FDragGripColor !== Value) {
        this.FDragGripColor = Value;
        this.FOwner.Invalidate();
      };
    };
    this.IsHorizontalSpacingStored = function () {
      var Result = false;
      Result = this.FHorizontalSpacing !== 3;
      return Result;
    };
    this.IsVerticalSpacingStored = function () {
      var Result = false;
      Result = this.FVerticalSpacing !== 3;
      return Result;
    };
    this.SetFlatStyle = function (Value) {
      if (this.FFlatStyle !== Value) {
        this.FFlatStyle = Value;
        if (this.FOwner != null) this.FOwner.ApplyFlatStyle();
      };
    };
    this.SetSeparator = function (Value) {
      if (this.FSeparator !== Value) {
        this.FSeparator = Value;
        this.FOwner.Invalidate();
      };
    };
    this.SetSeparatorStroke = function (Value) {
      this.FSeparatorStroke.Assign(Value);
    };
    this.FillChanged = function (Sender) {
      this.FOwner.Invalidate();
    };
    this.StrokeChanged = function (Sender) {
      this.FOwner.Invalidate();
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomToolBarAppearance.isPrototypeOf(Source)) {
        this.FSeparatorStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FSeparatorStroke);
        this.FSeparator = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FSeparator;
        this.FFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FFill);
        this.FStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FStroke);
        this.FHorizontalSpacing = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FHorizontalSpacing;
        this.FVerticalSpacing = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FVerticalSpacing;
        this.FDragGripColor = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FDragGripColor;
        this.FDragGrip = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FDragGrip;
        this.FFlatStyle = rtl.as(Source,$mod.TTMSFNCCustomToolBarAppearance).FFlatStyle;
      };
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FFlatStyle = false;
      this.FHorizontalSpacing = 3;
      this.FVerticalSpacing = 3;
      this.FDragGrip = true;
      this.FDragGripColor = 13882323;
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient,16777215]);
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FFill.SetColor(16777215);
      this.FFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(230,230,230));
      this.FSeparatorStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,16777215]);
      this.FSeparatorStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FSeparatorStroke");
      rtl.free(this,"FFont");
      rtl.free(this,"FFill");
      rtl.free(this,"FStroke");
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TTMSFNCToolBarAppearance",$mod.TTMSFNCCustomToolBarAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("FlatStyle",2,rtl.boolean,"FFlatStyle","SetFlatStyle",{Default: false});
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
    $r.addProperty("Separator",2,rtl.boolean,"FSeparator","SetSeparator",{Default: false});
    $r.addProperty("SeparatorStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FSeparatorStroke","SetSeparatorStroke");
    $r.addProperty("HorizontalSpacing",14,rtl.double,"FHorizontalSpacing","SetHorizontalSpacing",{stored: "IsHorizontalSpacingStored"});
    $r.addProperty("VerticalSpacing",14,rtl.double,"FVerticalSpacing","SetVerticalSpacing",{stored: "IsVerticalSpacingStored"});
    $r.addProperty("DragGrip",2,rtl.boolean,"FDragGrip","SetDragGrip",{Default: true});
    $r.addProperty("DragGripColor",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FDragGripColor","SetDragGripColor",{Default: 13882323});
  });
  rtl.createClass($mod,"TTMSFNCToolBarOptionMenuItem",pas["WEBLib.Menus"].TMenuItem,function () {
    this.$init = function () {
      pas["WEBLib.Menus"].TMenuItem.$init.call(this);
      this.FControl = null;
      this.FGlyphWidth = 0.0;
      this.FCalculate = false;
    };
    this.$final = function () {
      this.FControl = undefined;
      pas["WEBLib.Menus"].TMenuItem.$final.call(this);
    };
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCToolBarControl",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FControlIndex = 0;
      this.FControl = null;
      this.FLayout = 0;
      this.FBitmap = null;
    };
    this.$final = function () {
      this.FControl = undefined;
      this.FBitmap = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.Create$1 = function () {
      this.FBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FBitmap");
      pas.System.TObject.Destroy.call(this);
    };
  });
  $mod.$rtti.$ClassRef("TControlClass",{instancetype: pas["WEBLib.Controls"].$rtti["TControl"]});
  $mod.$rtti.$MethodVar("TTMSFNCToolBarCustomizeOptionsMenu",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["APopupMenu",pas["WEBLib.TMSFNCTypes"].$rtti["TPopupMenu"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCToolBarCustomizeOptionsMenuItem",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AControl",pas["WEBLib.Controls"].$rtti["TControl"]],["AMenuItem",pas["WEBLib.Menus"].$rtti["TMenuItem"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCToolBarCanShowOptionsMenuItem",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AControl",pas["WEBLib.Controls"].$rtti["TControl"]],["ACanShowItem",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCToolBarOptionsMenuItemClick",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AControl",pas["WEBLib.Controls"].$rtti["TControl"]],["AMenuItem",pas["WEBLib.Menus"].$rtti["TMenuItem"]],["AExecuteDefaultAction",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCToolBarIsLastElement",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AControl",pas["WEBLib.Controls"].$rtti["TControl"]],["AIsLastElement",rtl.boolean,1]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomToolBarOptionsMenu",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FShowItemText = false;
      this.FShowItemBitmap = false;
      this.FShowButton = false;
      this.FItemBitmapWidth = 0.0;
      this.FAutoItemBitmapWidth = false;
    };
    this.$final = function () {
      this.FOwner = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetShowButton = function (Value) {
      if (this.FShowButton !== Value) {
        this.FShowButton = Value;
        this.FOwner.FOptionsMenuButton.SetVisible(this.FShowButton);
        if (this.FShowButton) {
          this.FOwner.FOptionsMenuButton.SetParent(this.FOwner)}
         else this.FOwner.FOptionsMenuButton.SetParent(null);
        this.FOwner.UpdateControls();
      };
    };
    this.SetShowItemBitmap = function (Value) {
      if (this.FShowItemBitmap !== Value) {
        this.FShowItemBitmap = Value;
      };
    };
    this.SetShowItemText = function (Value) {
      if (this.FShowItemText !== Value) {
        this.FShowItemText = Value;
      };
    };
    this.SetAutoItemBitmapWidth = function (Value) {
      if (this.FAutoItemBitmapWidth !== Value) {
        this.FAutoItemBitmapWidth = Value;
      };
    };
    this.SetItemBitmapWidth = function (Value) {
      if (this.FItemBitmapWidth !== Value) {
        this.FItemBitmapWidth = Value;
      };
    };
    this.IsItemBitmapWidthStored = function () {
      var Result = false;
      Result = this.FItemBitmapWidth !== 50;
      return Result;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomToolBarOptionsMenu.isPrototypeOf(Source)) {
        this.FShowItemText = rtl.as(Source,$mod.TTMSFNCCustomToolBarOptionsMenu).FShowItemText;
        this.FShowItemBitmap = rtl.as(Source,$mod.TTMSFNCCustomToolBarOptionsMenu).FShowItemBitmap;
        this.FShowButton = rtl.as(Source,$mod.TTMSFNCCustomToolBarOptionsMenu).FShowButton;
        this.FAutoItemBitmapWidth = rtl.as(Source,$mod.TTMSFNCCustomToolBarOptionsMenu).FAutoItemBitmapWidth;
        this.FItemBitmapWidth = rtl.as(Source,$mod.TTMSFNCCustomToolBarOptionsMenu).FItemBitmapWidth;
      };
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FShowItemText = true;
      this.FShowButton = true;
      this.FShowItemBitmap = true;
      this.FAutoItemBitmapWidth = true;
      this.FItemBitmapWidth = 50;
      return this;
    };
    this.Destroy = function () {
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TTMSFNCToolBarOptionsMenu",$mod.TTMSFNCCustomToolBarOptionsMenu,function () {
    var $r = this.$rtti;
    $r.addProperty("ShowButton",2,rtl.boolean,"FShowButton","SetShowButton",{Default: true});
    $r.addProperty("ShowItemBitmap",2,rtl.boolean,"FShowItemBitmap","SetShowItemBitmap",{Default: true});
    $r.addProperty("ShowItemText",2,rtl.boolean,"FShowItemText","SetShowItemText",{Default: true});
    $r.addProperty("AutoItemBitmapWidth",2,rtl.boolean,"FAutoItemBitmapWidth","SetAutoItemBitmapWidth",{Default: true});
    $r.addProperty("ItemBitmapWidth",14,rtl.double,"FItemBitmapWidth","SetItemBitmapWidth",{stored: "IsItemBitmapWidthStored"});
  });
  rtl.createClass($mod,"TTMSFNCToolBarControlObjectList",pas.contnrs.TObjectList,function () {
    this.GetItem$1 = function (Index) {
      var Result = null;
      Result = this.GetItem(Index);
      return Result;
    };
    this.SetItem$1 = function (Index, Value) {
      this.SetItem(Index,Value);
    };
  });
  rtl.createClass($mod,"TTMSFNCToolBarControlList",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.Get(Index));
      return Result;
    };
    this.SetItem = function (Index, Value) {
      this.Put(Index,Value);
    };
  });
  rtl.createClass($mod,"TTMSFNCControlList",pas.Classes.TList,function () {
    this.GetItem = function (Index) {
      var Result = null;
      Result = rtl.getObject(this.Get(Index));
      return Result;
    };
    this.SetItem = function (Index, Value) {
      this.Put(Index,Value);
    };
  });
  $mod.$rtti.$MethodVar("TTMSFNCToolBarDragGripMovingEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["DeltaX",rtl.double],["DeltaY",rtl.double]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCToolBarPopup",pas["WEBLib.TMSFNCPopup"].TTMSFNCNonFocusablePopup,function () {
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCCustomToolBar",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FCompactToolbar = null;
      this.FCompactPopup = null;
      this.FHover = false;
      this.FHoverP = false;
      this.FQuickMenuButtonHover = false;
      this.FQuickMenuButtonHoverP = false;
      this.FDown = false;
      this.FQuickMenuButtonDown = false;
      this.FOldWidth = 0.0;
      this.FOldMenuButtonState = false;
      this.FBitmapContainer = null;
      this.FInsideDrag = false;
      this.FDragGripMoving = false;
      this.FDragGripDown = false;
      this.FDragGripDownPt = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      this.FTotalOptionsMenuWidth = 0.0;
      this.FHiddenControls = null;
      this.FCompactControls = null;
      this.FBlockUpdate = false;
      this.FBlockResize = false;
      this.FAutoSize = false;
      this.FAppearance = null;
      this.FAutoAlign = false;
      this.FOptionsMenuButton = null;
      this.FAutoOptionsMenu = null;
      this.FOnOptionsMenuCustomize = null;
      this.FOnOptionsMenuItemCustomize = null;
      this.FOnOptionsMenuButtonClick = null;
      this.FOptionsMenu = null;
      this.FCustomOptionsMenu = null;
      this.FOnOptionsMenuItemCanShow = null;
      this.FState = 0;
      this.FOnOptionsMenuItemClick = null;
      this.FOnOptionsMenuItemApplyStyle = null;
      this.FOnUpdateDockPanel = null;
      this.FOnUpdateControls = null;
      this.FOnIsLastElement = null;
      this.FOnDragGripMoving = null;
      this.FAutoMoveToolBar = false;
      this.FOnInternalDblClick$1 = null;
      this.FOnInternalMouseDown$1 = null;
      this.FOnInternalMouseMove$1 = null;
      this.FOnInternalMouseUp$1 = null;
      this.FAutoHeight = false;
      this.FAutoWidth = false;
      this.FOnInternalInsertControl = null;
      this.FAutoStretchHeight = false;
      this.FText = "";
      this.FFont$1 = null;
      this.FVerticalTextAlign = 0;
      this.FTrimming = 0;
      this.FHorizontalTextAlign = 0;
      this.FWordWrapping = false;
      this.FTextVisible = false;
      this.FMinimumWidth = 0.0;
      this.FCompact = false;
      this.FCanCompact = false;
      this.FCompactWidth = 0.0;
      this.FCompactAppearance = null;
      this.FCompactBitmaps = null;
      this.FOnCompactClick = null;
      this.FCompactBitmapSize = 0.0;
      this.FCompactBitmapVisible = false;
      this.FCompactExpanderBitmaps = null;
      this.FQuickMenuButton = false;
      this.FQuickMenuButtonAppearance = null;
      this.FOnQuickMenuButtonClick = null;
      this.FQuickMenuButtonBitmaps = null;
      this.FQuickMenuButtonHint = "";
      this.FCompactAutoBitmapSize = false;
    };
    this.$final = function () {
      this.FCompactToolbar = undefined;
      this.FCompactPopup = undefined;
      this.FBitmapContainer = undefined;
      this.FDragGripDownPt = undefined;
      this.FHiddenControls = undefined;
      this.FCompactControls = undefined;
      this.FAppearance = undefined;
      this.FOptionsMenuButton = undefined;
      this.FAutoOptionsMenu = undefined;
      this.FOnOptionsMenuCustomize = undefined;
      this.FOnOptionsMenuItemCustomize = undefined;
      this.FOnOptionsMenuButtonClick = undefined;
      this.FOptionsMenu = undefined;
      this.FCustomOptionsMenu = undefined;
      this.FOnOptionsMenuItemCanShow = undefined;
      this.FOnOptionsMenuItemClick = undefined;
      this.FOnOptionsMenuItemApplyStyle = undefined;
      this.FOnUpdateDockPanel = undefined;
      this.FOnUpdateControls = undefined;
      this.FOnIsLastElement = undefined;
      this.FOnDragGripMoving = undefined;
      this.FOnInternalDblClick$1 = undefined;
      this.FOnInternalMouseDown$1 = undefined;
      this.FOnInternalMouseMove$1 = undefined;
      this.FOnInternalMouseUp$1 = undefined;
      this.FOnInternalInsertControl = undefined;
      this.FFont$1 = undefined;
      this.FCompactAppearance = undefined;
      this.FCompactBitmaps = undefined;
      this.FOnCompactClick = undefined;
      this.FCompactExpanderBitmaps = undefined;
      this.FQuickMenuButtonAppearance = undefined;
      this.FOnQuickMenuButtonClick = undefined;
      this.FQuickMenuButtonBitmaps = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetAppearance = function (Value) {
      this.FAppearance.Assign(Value);
    };
    this.SetAS = function (Value) {
      if (this.FAutoSize !== Value) {
        this.FAutoSize = Value;
        this.UpdateControls();
      };
    };
    this.SetAutoAlign = function (Value) {
      if (this.FAutoAlign !== Value) {
        this.FAutoAlign = Value;
        this.UpdateControls();
      };
    };
    this.SetOptionsMenu = function (Value) {
      this.FOptionsMenu.Assign(Value);
    };
    this.SetState = function (Value) {
      var I = 0;
      var c = null;
      if (this.FState !== Value) {
        this.FState = Value;
        for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          c = this.GetControls(I);
          if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBarElement).SetState(this.FState);
        };
      };
    };
    this.SetAutoHeight = function (Value) {
      if (this.FAutoHeight !== Value) {
        this.FAutoHeight = Value;
        this.UpdateControls();
      };
    };
    this.SetAutoWidth = function (Value) {
      if (this.FAutoWidth !== Value) {
        this.FAutoWidth = Value;
        this.UpdateControls();
      };
    };
    this.SetAutoStretchHeight = function (Value) {
      if (this.FAutoStretchHeight !== Value) {
        this.FAutoStretchHeight = Value;
        this.UpdateControls();
      };
    };
    this.SetText = function (Value) {
      if (this.FText !== Value) {
        this.FText = Value;
        this.UpdateControls();
      };
    };
    this.GetBitmapContainer = function () {
      var Result = null;
      Result = this.FBitmapContainer;
      return Result;
    };
    this.SetBitmapContainer = function (Value) {
      var I = 0;
      var c = null;
      var b = null;
      var $ir = rtl.createIntfRefs();
      try {
        this.FBitmapContainer = Value;
        for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          if (pas.SysUtils.Supports$1($ir.ref(1,rtl.queryIntfT(c,pas.System.IUnknown)),rtl.getIntfGUIDR(pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer),{get: function () {
              return b;
            }, set: function (v) {
              b = v;
            }})) b.SetBitmapContainer(Value);
        };
        this.Invalidate();
      } finally {
        $ir.free();
        rtl._Release(b);
      };
    };
    this.SetFont$1 = function (Value) {
      this.FFont$1.Assign(Value);
    };
    this.SetHorizontalTextAlign = function (Value) {
      if (this.FHorizontalTextAlign !== Value) {
        this.FHorizontalTextAlign = Value;
        this.Invalidate();
      };
    };
    this.SetTrimming = function (Value) {
      if (this.FTrimming !== Value) {
        this.FTrimming = Value;
        this.UpdateControls();
      };
    };
    this.SetVerticalTextAlign = function (Value) {
      if (this.FVerticalTextAlign !== Value) {
        this.FVerticalTextAlign = Value;
        this.UpdateControls();
      };
    };
    this.SetWordWrapping = function (Value) {
      if (this.FWordWrapping !== Value) {
        this.FWordWrapping = Value;
        this.UpdateControls();
      };
    };
    this.SetTextVisible = function (Value) {
      if (this.FTextVisible !== Value) {
        this.FTextVisible = Value;
        this.UpdateControls();
      };
    };
    this.IsMinimumWidthStored = function () {
      var Result = false;
      Result = this.FMinimumWidth !== 30;
      return Result;
    };
    this.SetMinimumWidth = function (Value) {
      if (this.FMinimumWidth !== Value) {
        this.FMinimumWidth = Value;
        this.UpdateControls();
      };
    };
    this.SetCompact = function (Value) {
      if (this.FCompact !== Value) {
        if (this.FCanCompact) {
          this.FCompact = Value;
          if (this.FCompact) {
            this.FOldMenuButtonState = this.FOptionsMenu.FShowButton;
            this.FOptionsMenu.SetShowButton(false);
            this.FOldWidth = this.GetWidth();
            this.CompactControls();
            this.SetWidth(Math.round(this.FCompactWidth));
          } else {
            this.SetWidth(Math.round(this.FOldWidth));
            this.UncompactControls();
            this.FOptionsMenu.SetShowButton(this.FOldMenuButtonState);
          };
          this.UpdateControls();
        };
      };
    };
    this.SetCanCompact = function (Value) {
      if (this.FCanCompact !== Value) this.FCanCompact = Value;
    };
    this.IsCompactWidthStored = function () {
      var Result = false;
      Result = this.FCompactWidth !== 50;
      return Result;
    };
    this.SetCompactWidth = function (Value) {
      if (this.FCompactWidth !== Value) {
        this.FCompactWidth = Value;
        if (this.FCompact) this.SetWidth(Math.round(this.FCompactWidth));
      };
    };
    this.SetCompactAppearance = function (Value) {
      this.FCompactAppearance.Assign(Value);
    };
    this.SetCompactBitmaps = function (Value) {
      this.FCompactBitmaps.Assign(Value);
    };
    this.IsCompactBitmapSizeStored = function () {
      var Result = false;
      Result = this.FCompactBitmapSize !== 24;
      return Result;
    };
    this.SetCompactBitmapSize = function (Value) {
      if (this.FCompactBitmapSize !== Value) {
        this.FCompactBitmapSize = Value;
        this.Invalidate();
      };
    };
    this.SetCompactBitmapVisible = function (Value) {
      if (this.FCompactBitmapVisible !== Value) {
        this.FCompactBitmapVisible = Value;
        this.Invalidate();
      };
    };
    this.SetCompactExpanderBitmaps = function (Value) {
      this.FCompactExpanderBitmaps.Assign(Value);
    };
    this.SetQuickMenuButton = function (Value) {
      if (this.FQuickMenuButton !== Value) {
        this.FQuickMenuButton = Value;
        this.Invalidate();
      };
    };
    this.SetQuickMenuButtonAppearance = function (Value) {
      this.FQuickMenuButtonAppearance.Assign(Value);
    };
    this.SetQuickMenuButtonBitmaps = function (Value) {
      this.FQuickMenuButtonBitmaps.Assign(Value);
    };
    this.SetCompactAutoBitmapSize = function (Value) {
      if (this.FCompactAutoBitmapSize !== Value) {
        this.FCompactAutoBitmapSize = Value;
        this.Invalidate();
      };
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,1,4);
      return Result;
    };
    this.CanDrawDesignTime = function () {
      var Result = false;
      Result = false;
      return Result;
    };
    this.CanBuildControls = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.GetOptionsMenuButtonClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarDropDownButton;
      return Result;
    };
    this.GetBitmapPickerClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarBitmapPicker;
      return Result;
    };
    this.GetToolBarButtonClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarButton;
      return Result;
    };
    this.GetColorPickerClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarColorPicker;
      return Result;
    };
    this.GetItemPickerClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarItemPicker;
      return Result;
    };
    this.GetFontNamePickerClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarFontNamePicker;
      return Result;
    };
    this.GetFontSizePickerClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarFontSizePicker;
      return Result;
    };
    this.GetToolBarSeparatorClass = function () {
      var Result = null;
      Result = $mod.TTMSFNCToolBarSeparator;
      return Result;
    };
    this.GetTextSize = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TSizeF.$new();
      var g = null;
      var sz = 0.0;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.cx = 0;
      Result.cy = 0;
      if (this.FTextVisible && (this.FText !== "")) {
        g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[1,1,this.FNativeCanvas,true]);
        g.FBitmapContainer = this.GetBitmapContainer();
        g.FOptimizedHTMLDrawing = this.FOptimizedHTMLDrawing;
        try {
          sz = 0;
          if (this.FAppearance.FDragGrip) {
            if (this.FState === $mod.TTMSFNCToolBarElementState.esLarge) {
              sz = 3}
             else sz = 2;
          };
          r.$assign(this.GetLocalRect());
          r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + sz,r.Top,r.Right,r.Bottom));
          pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-2,-2);
          Result.$assign(g.CalculateTextSize(this.FText,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FWordWrapping,true));
        } finally {
          g = rtl.freeLoc(g);
        };
      };
      return Result;
    };
    this.GetHiddenControl = function (AControl) {
      var Result = null;
      var I = 0;
      Result = null;
      for (var $l1 = 0, $end2 = this.FHiddenControls.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (this.FHiddenControls.GetItem$1(I).FControl === AControl) {
          Result = this.FHiddenControls.GetItem$1(I);
          break;
        };
      };
      return Result;
    };
    this.GetCompactControl = function (AControl) {
      var Result = null;
      var I = 0;
      Result = null;
      for (var $l1 = 0, $end2 = this.FCompactControls.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if (this.FCompactControls.GetItem$1(I).FControl === AControl) {
          Result = this.FCompactControls.GetItem$1(I);
          break;
        };
      };
      return Result;
    };
    this.GetHiddenControlCount = function (AControl) {
      var Result = 0;
      var I = 0;
      var lst = null;
      lst = $mod.TTMSFNCToolBarControlList.$create("Create$1");
      for (var $l1 = 0, $end2 = this.FHiddenControls.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        lst.Add(this.FHiddenControls.GetItem$1(I));
      };
      Result = 0;
      for (var $l3 = 0, $end4 = lst.GetCount() - 1; $l3 <= $end4; $l3++) {
        I = $l3;
        if (lst.GetItem(I).FControl === AControl) {
          break}
         else Result += 1;
      };
      lst = rtl.freeLoc(lst);
      return Result;
    };
    this.GetCompactControlCount = function () {
      var Result = 0;
      Result = this.FCompactControls.GetCount();
      return Result;
    };
    this.GetCompactTextRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var bmpr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(this.GetLocalRect());
      bmpr.$assign(this.GetCompactBitmapRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r)));
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,bmpr.Bottom + 3,r.Right - 3,r.Bottom - 23));
      return Result;
    };
    this.GetCompactBitmapRect = function (ARect) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var bs = 0.0;
      r.$assign(ARect);
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Right,r.Top));
      if (this.FCompactBitmapVisible) {
        bs = this.GetCompactBitmapSize();
        if (!this.FTextVisible || (this.FText === "")) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,r.Bottom - 3));
          if (bs !== -1) {
            Result.Left = Math.round(r.Left + ((r.Right - r.Left - bs) / 2));
            Result.Top = Math.round(r.Top + ((r.Bottom - r.Top - bs) / 2));
            Result.Right = Result.Left + bs;
            Result.Bottom = Result.Top + bs;
          };
        } else if (this.FTextVisible && !(this.FText === "")) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Right - 3,r.Top + bs));
      };
      return Result;
    };
    this.GetCompactBitmapSize = function () {
      var Result = 0.0;
      var bmp = null;
      Result = this.FCompactBitmapSize;
      if (this.FCompactAutoBitmapSize) {
        bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FCompactBitmaps,0,this.GetBitmapContainer());
        if ((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp)) Result = Math.max(bmp.GetHeight(),bmp.GetWidth());
      };
      return Result;
    };
    this.GetQuickMenuButtonRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(this.GetWidth() - 16,this.GetHeight() - 16,this.GetWidth(),this.GetHeight()));
      if (this.FAppearance.FSeparator) {
        Result.Left = Result.Left - this.FAppearance.FSeparatorStroke.FWidth;
        Result.Right = Result.Right - this.FAppearance.FSeparatorStroke.FWidth;
      };
      return Result;
    };
    this.HasHint = function () {
      var Result = false;
      Result = pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBase.HasHint.call(this);
      if (this.FQuickMenuButtonHover) Result = this.FQuickMenuButtonHint !== "";
      return Result;
    };
    this.GetHintString = function () {
      var Result = "";
      Result = pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBase.GetHintString.call(this);
      if (this.FQuickMenuButtonHover) Result = this.FQuickMenuButtonHint;
      return Result;
    };
    this.ChangeDPIScale = function (M, D) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ChangeDPIScale.apply(this,arguments);
      this.FFont$1.SetHeight(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.MulDivInt(this.FFont$1.FHeight,M,D));
    };
    this.HandleQuickMenuButton = function () {
      if (this.FOnQuickMenuButtonClick != null) this.FOnQuickMenuButtonClick(this);
    };
    this.CompactAppearanceChanged = function (Sender) {
      this.Invalidate();
    };
    this.QuickMenuButtonAppearanceChanged = function (Sender) {
      this.Invalidate();
    };
    this.CompactBitmapsChanged = function (Sender) {
      var bmp = null;
      bmp = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.GetScaledBitmap(this.FCompactBitmaps,0,this.GetBitmapContainer());
      this.SetCompactBitmapVisible((bmp != null) && !pas["WEBLib.TMSFNCTypes"].IsBitmapEmpty(bmp));
      this.Invalidate();
    };
    this.CompactExpanderBitmapsChanged = function (Sender) {
      this.Invalidate();
    };
    this.QuickMenuButtonBitmapsChanged = function (Sender) {
      this.Invalidate();
    };
    this.ApplyFlatStyle = function () {
      var I = 0;
      var c = null;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        c = this.GetControls(I);
        if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FAppearance.SetFlatStyle(this.FAppearance.FFlatStyle);
        if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBar).FAppearance.SetFlatStyle(this.FAppearance.FFlatStyle);
      };
      this.Invalidate();
    };
    this.SetAdaptToStyle = function (Value) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.SetAdaptToStyle.apply(this,arguments);
      this.UpdateControls();
    };
    this.ApplyStyle = function () {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ApplyStyle.call(this);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleHeaderFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FAppearance.FFill.SetColor(c);
      };
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleHeaderFillColorTo({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FAppearance.FFill.SetColorTo(c);
      };
    };
    this.ResetToDefaultStyle = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ResetToDefaultStyle.call(this);
      this.FAppearance.SetDragGripColor(13882323);
      this.FAppearance.FFill.SetColor(16777215);
      this.FAppearance.FStroke.SetColor(8421504);
      this.FAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
      this.FAppearance.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FFill.SetColor(16777215);
      this.FAppearance.FFill.SetColorTo(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(230,230,230));
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseDown.apply(this,arguments);
      if (this.FAppearance.FDragGrip && !this.FDragGripMoving) {
        this.FDragGripDown = pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetDragGripRect(true),pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
        this.FDragGripDownPt.$assign(pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
      };
      if (!this.FDragGripDown) {
        if (this.FCompact) {
          this.FDown = true;
          this.Invalidate();
          this.CaptureEx();
        } else if (this.FQuickMenuButton) {
          this.FQuickMenuButtonDown = pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetQuickMenuButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
          if (this.FQuickMenuButtonDown) {
            this.Invalidate();
            this.CaptureEx();
          };
        };
      };
      if ((this.FOnInternalMouseDown$1 != null) && !(Button === pas["WEBLib.Controls"].TMouseButton.mbRight)) this.FOnInternalMouseDown$1(this);
    };
    this.HandleMouseMove = function (Shift, X, Y) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var absx = 0.0;
      var absy = 0.0;
      var pt = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var d = null;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseMove.apply(this,arguments);
      if (this.FCompact) {
        this.FHoverP = this.FHover;
        this.FHover = true;
        if (this.FHover !== this.FHoverP) this.Invalidate();
      } else if (this.FQuickMenuButton) {
        this.FQuickMenuButtonHoverP = this.FQuickMenuButtonHover;
        this.FQuickMenuButtonHover = pas["WEBLib.TMSFNCTypes"].PtInRectEx(this.GetQuickMenuButtonRect(),pas["WEBLib.TMSFNCTypes"].PointF(X,Y));
        if (this.FQuickMenuButtonHover !== this.FQuickMenuButtonHoverP) this.Invalidate();
      };
      if (this.FAppearance.FDragGrip) {
        if (this.FDragGripDown) {
          if (!this.FDragGripMoving) {
            this.CaptureEx();
            this.FDragGripMoving = true;
          };
          if (this.FDragGripMoving) {
            absx = this.FDragGripDownPt.X - X;
            absy = this.FDragGripDownPt.Y - Y;
            if (this.FAutoMoveToolBar) {
              pt.$assign(pas["WEBLib.TMSFNCTypes"].PointF(this.GetLeft() - absx,this.GetTop() - absy));
              if ($mod.TTMSFNCCustomDockPanel.isPrototypeOf(this.FParent)) {
                d = rtl.as(this.FParent,$mod.TTMSFNCCustomDockPanel);
                if (d.FAutoAlign) {
                  if (pt.Y < d.FAppearance.FMargins.FTop) pt.Y = Math.round(d.FAppearance.FMargins.FTop);
                  if (pt.X < d.FAppearance.FMargins.FLeft) {
                    pt.X = Math.round(d.FAppearance.FMargins.FLeft)}
                   else if ((pt.X + this.GetWidth()) > (d.GetWidth() - d.FAppearance.FMargins.FRight)) pt.X = Math.round(d.GetWidth() - d.FAppearance.FMargins.FRight - this.GetWidth());
                  this.SetBounds(Math.round(pt.X),Math.round(pt.Y),this.GetWidth(),this.GetHeight());
                };
              };
            };
            this.FDragGripDownPt.$assign(pas["WEBLib.TMSFNCTypes"].PointF(X + absx,Y + absy));
            this.DoDragGripMoving(absx,absy);
          };
        } else {
          r.$assign(this.GetDragGripRect(true));
          if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(r,pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
            if (!this.FInsideDrag) {
              this.FInsideDrag = true;
              this.SetControlCursor(5);
            };
          } else if (this.FInsideDrag) {
            this.FInsideDrag = false;
            this.SetControlCursor(0);
          };
        };
      };
      if (this.FOnInternalMouseMove$1 != null) this.FOnInternalMouseMove$1(this);
    };
    this.HandleMouseLeave = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseLeave.call(this);
      this.FHover = false;
      this.FQuickMenuButtonHover = false;
      this.SetControlCursor(0);
      this.FInsideDrag = false;
      this.Invalidate();
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseUp.apply(this,arguments);
      if (this.FDragGripDown) {
        this.ReleaseCaptureEx()}
       else if (this.FDown && this.FCompact) {
        this.Invalidate();
        this.ReleaseCaptureEx();
        this.HandleCompact();
      } else if (this.FQuickMenuButtonDown && this.FQuickMenuButton && !this.FCompact) {
        this.Invalidate();
        this.ReleaseCaptureEx();
        this.HandleQuickMenuButton();
      };
      this.FDragGripDown = false;
      this.FDragGripMoving = false;
      this.FDown = false;
      this.FQuickMenuButtonDown = false;
      if ((this.FOnInternalMouseUp$1 != null) && !(Button === pas["WEBLib.Controls"].TMouseButton.mbRight)) this.FOnInternalMouseUp$1(this);
    };
    this.HandleCompact = function () {
      var I = 0;
      var cc = null;
      this.DeactivateAllPopups();
      if (this.FCompactToolbar != null) {
        rtl.free(this,"FCompactToolbar");
        this.FCompactToolbar = null;
      };
      this.FCompactToolbar = $mod.TTMSFNCCustomToolBar.$create("Create$1",[this.FCompactPopup]);
      this.FCompactToolbar.Assign(this);
      this.FCompactToolbar.SetCompact(false);
      this.FCompactToolbar.SetAS(true);
      this.FCompactToolbar.SetAutoHeight(false);
      this.FCompactToolbar.SetAutoWidth(true);
      this.FCompactToolbar.SetAutoStretchHeight(false);
      this.FCompactToolbar.FAppearance.SetSeparator(false);
      this.FCompactToolbar.SetControlMargins(1,1,1,1);
      this.FCompactToolbar.SetHeight(this.GetHeight() + 2);
      for (var $l1 = this.FCompactControls.GetCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        cc = this.FCompactControls.GetItem$1(I);
        if (cc.FControl != null) {
          if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc.FControl)) rtl.as(cc.FControl,$mod.TTMSFNCDefaultToolBarButton).SetLayout(rtl.as(cc.FControl,$mod.TTMSFNCDefaultToolBarButton).FCompactLayout);
          cc.FControl.SetVisible(true);
          cc.FControl.SetParent(this.FCompactToolbar);
        };
      };
      this.FCompactToolbar.UpdateControls();
      this.FCompactPopup.SetContentControl(this.FCompactToolbar);
      this.FCompactPopup.Activate();
      this.DoCompactClick();
    };
    this.DeactivateAllPopups = function () {
      var I = 0;
      if ((this.FParent != null) && pas["WEBLib.Controls"].TWinControl.isPrototypeOf(this.FParent)) for (var $l1 = 0, $end2 = rtl.as(this.FParent,pas["WEBLib.Controls"].TWinControl).GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(rtl.as(this.FParent,pas["WEBLib.Controls"].TWinControl).GetControls(I))) rtl.as(rtl.as(this.FParent,pas["WEBLib.Controls"].TWinControl).GetControls(I),$mod.TTMSFNCCustomToolBar).CloseCompactPopup();
      };
    };
    this.DoCompactClick = function () {
      if (this.FOnCompactClick != null) this.FOnCompactClick(this);
    };
    this.HandleDblClick = function (X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleDblClick.apply(this,arguments);
      if (this.FOnInternalDblClick$1 != null) this.FOnInternalDblClick$1(this);
    };
    this.UpdateDockPanel = function () {
      if (this.FOnUpdateDockPanel != null) this.FOnUpdateDockPanel(this);
    };
    this.InsertToolBarControl = function (AControl, AIndex) {
      AControl.SetParent(this);
      if (AIndex > -1) this.SetChildOrder(AControl,AIndex);
      if (this.FOnInternalInsertControl != null) this.FOnInternalInsertControl(AControl);
    };
    this.DoDragGripMoving = function (ADeltaX, ADeltaY) {
      if (this.FOnDragGripMoving != null) this.FOnDragGripMoving(this,ADeltaX,ADeltaY);
    };
    this.VisibleChanging = function () {
      pas["WEBLib.Controls"].TControl.VisibleChanging.call(this);
      this.UpdateDockPanel();
    };
    this.GetDragGripRect = function (AInteraction) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var f = 0.0;
      r.$assign(this.GetLocalRect());
      f = 1;
      if (this.FState === $mod.TTMSFNCToolBarElementState.esLarge) f = 1.75;
      if (AInteraction) {
        Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top,r.Left + (8 * f),r.Bottom))}
       else Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + 3,r.Top + 3,r.Left + (6 * f),r.Bottom - 3));
      return Result;
    };
    this.CompactControls = function () {
      var I = 0;
      var cc = null;
      var c = null;
      this.FBlockUpdate = true;
      this.FCompactControls.Clear();
      for (var $l1 = this.GetControlsCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        c = this.GetControls(I);
        if (c !== this.FOptionsMenuButton) {
          cc = $mod.TTMSFNCToolBarControl.$create("Create$1");
          cc.FControl = c;
          if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c)) {
            cc.FLayout = rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FLayout;
            if ((rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FCompactLayout === $mod.TTMSFNCToolBarButtonLayout.bblNone) && (rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FLayout !== $mod.TTMSFNCToolBarButtonLayout.bblNone)) rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).SetCompactLayout(rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FMaximumLayout);
          };
          if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) {
            cc.FControlIndex = rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FControlIndex}
           else cc.FControlIndex = c.FTag$1;
          c.SetParent(null);
          c.SetVisible(false);
          this.FCompactControls.Add$1(cc);
        };
      };
      this.FBlockUpdate = true;
      this.UpdateControls();
      this.Invalidate();
    };
    this.UncompactControls = function () {
      var I = 0;
      var cc = null;
      var c = null;
      this.FBlockUpdate = true;
      for (var $l1 = this.FCompactControls.GetCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        cc = this.FCompactControls.GetItem$1(I);
        c = cc.FControl;
        if (c != null) {
          if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FBlockUpdate = true;
          c.SetParent(this);
          c.SetVisible(true);
          if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FBlockUpdate = false;
        };
      };
      this.FBlockUpdate = false;
      this.UpdateControls();
      this.Invalidate();
    };
    this.DoCustomizeOptionsMenu = function () {
      if (this.FOnOptionsMenuCustomize != null) this.FOnOptionsMenuCustomize(this,this.FAutoOptionsMenu);
    };
    this.DoCustomizeOptionsMenuItem = function (AControl, AMenuItem) {
      if (this.FOnOptionsMenuItemCustomize != null) this.FOnOptionsMenuItemCustomize(this,AControl,AMenuItem);
    };
    this.DoCanShowOptionsMenuItem = function (AControl, ACanShowItem) {
      if (this.FOnOptionsMenuItemCanShow != null) this.FOnOptionsMenuItemCanShow(this,AControl,ACanShowItem);
    };
    this.UpdateToolBar = function (Sender) {
      this.UpdateControls();
    };
    this.DoIsLastElement = function (AControl, ALastElement) {
      if (this.FOnIsLastElement != null) this.FOnIsLastElement(this,AControl,ALastElement);
    };
    this.UpdateToolBarControl = function (Sender) {
      var tb = null;
      var bmp = null;
      var c = null;
      var tc = null;
      var tci = 0;
      if (!(Sender != null)) return;
      this.FBlockUpdate = true;
      c = rtl.as(Sender,pas["WEBLib.Controls"].TControl);
      tb = this.GetHiddenControl(c);
      if (tb != null) {
        tc = tb.FControl;
        tci = Math.max(0,Math.min(this.GetControlsCount(),tb.FControlIndex - this.GetHiddenControlCount(tc)));
        this.FHiddenControls.Remove$1(tb);
        this.InsertToolBarControl(tc,tci);
        tc.SetVisible(true);
      } else {
        tb = $mod.TTMSFNCToolBarControl.$create("Create$1");
        if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) {
          tb.FControlIndex = rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FControlIndex}
         else tb.FControlIndex = c.FTag$1;
        tb.FControl = c;
        this.FBlockUpdate = true;
        bmp = c.MakeScreenshot();
        this.FBlockUpdate = false;
        tb.FBitmap.Assign(bmp);
        bmp = rtl.freeLoc(bmp);
        this.FHiddenControls.Add$1(tb);
        c.SetParent(null);
        c.SetVisible(false);
      };
      this.FBlockUpdate = false;
      this.UpdateControls();
    };
    this.OptionMenuItemClick = function (Sender) {
      var a = false;
      var c = null;
      a = true;
      c = null;
      if ($mod.TTMSFNCToolBarOptionMenuItem.isPrototypeOf(Sender)) c = rtl.as(Sender,$mod.TTMSFNCToolBarOptionMenuItem).FControl;
      if ((this.FOnOptionsMenuItemClick != null) && pas["WEBLib.Menus"].TMenuItem.isPrototypeOf(Sender)) this.FOnOptionsMenuItemClick(this,c,rtl.as(Sender,pas["WEBLib.Menus"].TMenuItem),{get: function () {
          return a;
        }, set: function (v) {
          a = v;
        }});
      if (a) this.UpdateToolBarControl(c);
    };
    this.OptionsButtonClick = function (Sender) {
      var pt = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      if (this.FOnOptionsMenuButtonClick != null) {
        this.FOnOptionsMenuButtonClick(this)}
       else {
        pt.$assign(pas["WEBLib.TMSFNCTypes"].PointF(this.FOptionsMenuButton.GetLeft(),this.FOptionsMenuButton.GetTop()));
        pt.$assign(this.LocalToScreenEx(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(pt.X,pt.Y + this.FOptionsMenuButton.GetHeight()))));
        this.ShowOptionsMenu(pt.X,pt.Y);
      };
    };
    this.DoCloseCompactPopup = function (Sender) {
      var I = 0;
      var cc = null;
      this.FCompactPopup.SetContentControl(null);
      for (var $l1 = 0, $end2 = this.FCompactControls.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        cc = this.FCompactControls.GetItem$1(I);
        if (cc.FControl != null) {
          if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc.FControl)) rtl.as(cc.FControl,$mod.TTMSFNCDefaultToolBarButton).SetLayout(cc.FLayout);
          cc.FControl.SetParent(null);
          cc.FControl.SetVisible(false);
        };
      };
      if (this.FCompactToolbar != null) {
        rtl.free(this,"FCompactToolbar");
        this.FCompactToolbar = null;
      };
    };
    this.Notification = function (AComponent, Operation) {
      pas.Classes.TComponent.Notification.apply(this,arguments);
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FBitmapContainer)) this.FBitmapContainer = null;
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FCustomOptionsMenu)) this.FCustomOptionsMenu = null;
    };
    this.AlignControls = function (AControl, Rect) {
      pas["WEBLib.Controls"].TControl.AlignControls.apply(this,arguments);
      this.UpdateControls();
    };
    this.UpdateControlAfterResize = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.UpdateControlAfterResize.call(this);
      this.UpdateDockPanel();
    };
    this.UpdateControls = function () {
      var $Self = this;
      var I = 0;
      var c = null;
      var idx = 0;
      var fu = false;
      var hc = null;
      var maxx = 0;
      var x = 0;
      var w = 0;
      var y = 0;
      var h = 0;
      var hs = 0;
      var hsm = 0;
      var vs = 0;
      var xs = 0;
      var ys = 0;
      var txth = 0;
      var txtw = 0;
      var mgr = null;
      var l = false;
      var ia = null;
      var sz = pas["WEBLib.TMSFNCTypes"].TSizeF.$new();
      var cn = null;
      var lm = 0.0;
      var tm = 0.0;
      var rm = 0.0;
      var bm = 0.0;
      function GetControl(AIndex) {
        var Result = null;
        Result = null;
        if ((AIndex >= 0) && (AIndex <= ($Self.GetControlsCount() - 1))) {
          if ($Self.GetControls(AIndex).FVisible) {
            Result = $Self.GetControls(AIndex);
            return Result;
          };
        };
        while ((AIndex >= 0) && (AIndex <= ($Self.GetControlsCount() - 1))) {
          AIndex += 1;
          if ((AIndex >= 0) && (AIndex <= ($Self.GetControlsCount() - 1))) {
            if ($Self.GetControls(AIndex).FVisible) {
              Result = $Self.GetControls(AIndex);
              return Result;
            };
          };
        };
        return Result;
      };
      var $ir = rtl.createIntfRefs();
      try {
        if ($Self.FBlockUpdate || $Self.FBlockResize || $Self.IsLoading() || $Self.IsDestroying() || !$Self.CanBuildControls()) return;
        $Self.FBlockUpdate = true;
        hs = Math.round($Self.FAppearance.FHorizontalSpacing);
        vs = Math.round($Self.FAppearance.FVerticalSpacing);
        x = hs;
        if ($Self.FAppearance.FDragGrip) {
          x = x + Math.round($Self.GetDragGripRect(false).Right);
          if (hs === 0) x = x + 3;
        };
        y = vs;
        xs = x;
        ys = y;
        hsm = 30;
        txth = 0;
        txtw = 0;
        sz.$assign($Self.GetTextSize());
        if (sz.cy > 0) txth = Math.round(sz.cy + 4);
        if (sz.cx > 0) txtw = Math.round(sz.cx + 8);
        w = txtw;
        maxx = 0;
        h = 0;
        idx = 0;
        fu = false;
        for (var $l1 = 0, $end2 = $Self.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          c = $Self.GetControls(I);
          hc = $Self.GetHiddenControl(c);
          fu = !(hc != null);
          if (fu) break;
        };
        l = false;
        for (var $l3 = 0, $end4 = $Self.GetControlsCount() - 1; $l3 <= $end4; $l3++) {
          I = $l3;
          c = $Self.GetControls(I);
          if (pas.SysUtils.Supports$1($ir.ref(1,rtl.queryIntfT(c,pas.System.IUnknown)),rtl.getIntfGUIDR(pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle),{get: function () {
              return ia;
            }, set: function (v) {
              ia = v;
            }})) ia.SetAdaptToStyle($Self.GetAdaptToStyle());
          if (l) {
            x = xs;
            y = (ys + h) - vs;
            ys = y;
          };
          l = false;
          if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) {
            l = rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FLastElement;
            rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FOnUpdateToolBar = rtl.createCallback($Self,"UpdateToolBar");
            rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FOnUpdateToolBarControl = rtl.createCallback($Self,"UpdateToolBarControl");
          };
          $Self.DoIsLastElement(c,{get: function () {
              return l;
            }, set: function (v) {
              l = v;
            }});
          if (l) l = true;
          if (!(c === $Self.FOptionsMenuButton)) {
            if (fu) {
              if ($mod.TTMSFNCCustomToolBarElement.isPrototypeOf(c)) {
                rtl.as(c,$mod.TTMSFNCCustomToolBarElement).FControlIndex = idx}
               else c.FTag$1 = idx;
            };
            if (c.FVisible) {
              if (c.FAlignWithMargins) {
                if ($Self.FAutoAlign) {
                  c.SetLeft(x + c.FMargins.FLeft);
                  c.SetTop(y + c.FMargins.FTop);
                };
                if ($Self.FAutoStretchHeight || ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c) && (rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FLayout === $mod.TTMSFNCToolBarButtonLayout.bblLarge))) {
                  h = $Self.GetHeight() - c.FMargins.FBottom - txth - y;
                  c.SetHeight(h);
                } else h = Math.max(h,c.GetTop() + c.GetHeight() + vs + c.FMargins.FBottom);
                cn = GetControl(I + 1);
                if ((cn != null) && $mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cn)) {
                  var $tmp5 = rtl.as(cn,$mod.TTMSFNCDefaultToolBarButton).FLayout;
                  if (($tmp5 === $mod.TTMSFNCToolBarButtonLayout.bblBitmap) || ($tmp5 === $mod.TTMSFNCToolBarButtonLayout.bblLabel)) {
                    y = Math.max(y,c.GetTop() + c.GetHeight() + vs + c.FMargins.FBottom);
                    if ((y + cn.FMargins.FTop + cn.GetHeight()) > ($Self.GetHeight() - cn.FMargins.FBottom - txth)) {
                      x = Math.max(x,Math.max(maxx,c.GetLeft() + c.GetWidth() + hs + c.FMargins.FRight));
                      y = ys;
                    } else {
                      c.SetLeft(x + c.FMargins.FLeft);
                      maxx = Math.max(x,Math.max(maxx,c.GetLeft() + c.GetWidth() + hs + c.FMargins.FRight));
                    };
                  } else if (($tmp5 === $mod.TTMSFNCToolBarButtonLayout.bblNone) || ($tmp5 === $mod.TTMSFNCToolBarButtonLayout.bblLarge)) {
                    x = Math.max(x,c.GetLeft() + c.GetWidth() + hs + c.FMargins.FRight);
                    y = ys;
                  };
                } else {
                  x = Math.max(x,Math.max(maxx,c.GetLeft() + c.GetWidth() + hs + c.FMargins.FRight));
                  y = ys;
                };
              } else {
                if ($Self.FAutoAlign) {
                  c.SetLeft(x);
                  c.SetTop(y);
                };
                if ($Self.FAutoStretchHeight || ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c) && (rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FLayout === $mod.TTMSFNCToolBarButtonLayout.bblLarge))) {
                  h = $Self.GetHeight() - txth - y;
                  c.SetHeight(h);
                } else h = Math.max(h,c.GetTop() + c.GetHeight() + vs);
                cn = GetControl(I + 1);
                if ((cn != null) && $mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cn)) {
                  var $tmp6 = rtl.as(cn,$mod.TTMSFNCDefaultToolBarButton).FLayout;
                  if (($tmp6 === $mod.TTMSFNCToolBarButtonLayout.bblBitmap) || ($tmp6 === $mod.TTMSFNCToolBarButtonLayout.bblLabel)) {
                    y = Math.max(y,c.GetTop() + c.GetHeight() + vs);
                    if ((y + cn.GetHeight()) > ($Self.GetHeight() - txth)) {
                      x = Math.max(x,Math.max(maxx,c.GetLeft() + c.GetWidth() + hs));
                      y = ys;
                    } else {
                      c.SetLeft(x);
                      maxx = Math.max(x,Math.max(maxx,c.GetLeft() + c.GetWidth() + hs));
                    };
                  } else if (($tmp6 === $mod.TTMSFNCToolBarButtonLayout.bblNone) || ($tmp6 === $mod.TTMSFNCToolBarButtonLayout.bblLarge)) {
                    x = Math.max(x,c.GetLeft() + c.GetWidth() + hs);
                    y = ys;
                  };
                } else {
                  x = Math.max(x,Math.max(maxx,c.GetLeft() + c.GetWidth() + hs));
                  y = ys;
                };
              };
              w = Math.max(w,x);
            };
            idx += 1;
          };
        };
        if (h === 0) h = hsm;
        $Self.FOptionsMenuButton.SetVisible($Self.FOptionsMenu.FShowButton);
        if ($Self.FOptionsMenu.FShowButton) {
          $Self.FOptionsMenuButton.SetParent($Self)}
         else $Self.FOptionsMenuButton.SetParent(null);
        if ($Self.FOptionsMenuButton.FVisible) {
          $Self.FOptionsMenuButton.FControlIndex = $Self.GetControlsCount() - 1;
          $Self.FOptionsMenuButton.SetTop($Self.FOptionsMenuButton.FMargins.FTop);
          mgr = $Self.FOptionsMenuButton.FMargins;
          if (!$Self.FOptionsMenuButton.FAlignWithMargins) {
            mgr.SetLeft(0);
            mgr.SetTop(0);
            mgr.SetRight(0);
            mgr.SetBottom(0);
          };
          if ($Self.FAutoSize) {
            $Self.FOptionsMenuButton.SetLeft(w + mgr.FLeft);
            if ($Self.FAutoHeight) {
              $Self.FOptionsMenuButton.SetHeight(h - mgr.FBottom - mgr.FTop)}
             else if ($Self.FAutoStretchHeight) $Self.FOptionsMenuButton.SetHeight($Self.GetHeight() - mgr.FBottom - txth - mgr.FTop);
          } else {
            $Self.FOptionsMenuButton.SetLeft($Self.GetWidth() - $Self.FOptionsMenuButton.GetWidth() - mgr.FRight);
            $Self.FOptionsMenuButton.SetHeight($Self.GetHeight() - mgr.FBottom - mgr.FTop - txth);
          };
          w = w + $Self.FOptionsMenuButton.GetWidth() + mgr.FRight + mgr.FLeft;
        };
        if ($Self.FAutoSize) {
          if ($Self.FAppearance.FSeparator) w = w + Math.round($Self.FAppearance.FSeparatorStroke.FWidth);
          w = Math.round(Math.max($Self.FMinimumWidth,w));
          if ($Self.GetControlAlignment() === pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caNone) {
            lm = 0;
            rm = 0;
            tm = 0;
            bm = 0;
            $Self.GetControlMargins({get: function () {
                return lm;
              }, set: function (v) {
                lm = v;
              }},{get: function () {
                return tm;
              }, set: function (v) {
                tm = v;
              }},{get: function () {
                return rm;
              }, set: function (v) {
                rm = v;
              }},{get: function () {
                return bm;
              }, set: function (v) {
                bm = v;
              }});
            w = w + Math.round(lm + rm);
          };
          h = h + txth;
          if ($Self.FAutoHeight && $Self.FAutoWidth && ($Self.GetControlAlignment() === pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caNone)) {
            $Self.SetBounds($Self.GetLeft(),$Self.GetTop(),w,h)}
           else if ($Self.FAutoHeight && !($Self.GetControlAlignment() in rtl.createSet(pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caLeft,pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caRight,pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caClient))) {
            $Self.SetBounds($Self.GetLeft(),$Self.GetTop(),$Self.GetWidth(),h)}
           else if ($Self.FAutoWidth && !($Self.GetControlAlignment() in rtl.createSet(pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caTop,pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caBottom,pas["WEBLib.TMSFNCCustomControl"].TTMSFNCControlAlignment.caClient))) $Self.SetBounds($Self.GetLeft(),$Self.GetTop(),w,$Self.GetHeight());
        };
        if ($Self.FOnUpdateControls != null) $Self.FOnUpdateControls($Self);
        $Self.FBlockUpdate = false;
      } finally {
        $ir.free();
        rtl._Release(ia);
      };
    };
    this.InitializeOptionsMenu = function () {
    };
    this.DrawDragGrip = function (AGraphics) {
      var $Self = this;
      var cnt = 0;
      function DrawDots(ARect) {
        var i = 0;
        var rdg = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
        var sz = 0;
        if ($Self.FState === $mod.TTMSFNCToolBarElementState.esLarge) {
          sz = 3}
         else sz = 2;
        ARect.Left = ARect.Left;
        ARect.Top = ARect.Top;
        cnt = Math.floor(Math.round(ARect.Bottom) / (Math.round(sz) * 2));
        for (var $l1 = 1, $end2 = cnt; $l1 <= $end2; $l1++) {
          i = $l1;
          rdg.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left + ((ARect.Right - ARect.Left - sz) / 2),ARect.Top + 1,ARect.Left + sz + ((ARect.Right - ARect.Left - sz) / 2),ARect.Top + 1 + sz));
          rdg.$assign(pas["WEBLib.TMSFNCTypes"].RectF(pas.System.Int(rdg.Left),pas.System.Int(rdg.Top),pas.System.Int(rdg.Right),pas.System.Int(rdg.Bottom)));
          AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(rdg),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
          ARect.Top = ARect.Top + (sz * 2);
        };
      };
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      AGraphics.FFill.SetColor($Self.FAppearance.FDragGripColor);
      AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      r.$assign($Self.GetDragGripRect(false));
      DrawDots(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
    };
    this.DrawText = function (AGraphics) {
      var sz = 0.0;
      var h = 0.0;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (this.FTextVisible && (this.FText !== "")) {
        sz = 0;
        if (this.FAppearance.FDragGrip) {
          if (this.FState === $mod.TTMSFNCToolBarElementState.esLarge) {
            sz = 3}
           else sz = 2;
        };
        r.$assign(this.GetLocalRect());
        r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left + sz,r.Top,r.Right,r.Bottom));
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-2,-2);
        AGraphics.FFont.Assign(this.FFont$1);
        h = this.GetTextSize().cy;
        r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Bottom - h,r.Right,r.Bottom));
        AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FText,this.FWordWrapping,this.FHorizontalTextAlign,this.FVerticalTextAlign,this.FTrimming,0,-1,-1,true,false,-1,-1);
      };
    };
    this.DrawCompactBitmap = function (AGraphics, ARect) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(this.GetCompactBitmapRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect)));
      AGraphics.FBitmapContainer = this.GetBitmapContainer();
      AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FCompactBitmaps,0,true,false,true,false);
    };
    this.DrawCompactText = function (AGraphics) {
      var tr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var st = null;
      if (!this.FTextVisible || (this.FText === "")) return;
      tr.$assign(this.GetCompactTextRect());
      st = AGraphics.SaveState(false);
      try {
        AGraphics.ClipRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(tr));
        AGraphics.FFont.Assign(this.FFont$1);
        AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(tr),this.FText,this.FWordWrapping,this.FHorizontalTextAlign,this.FVerticalTextAlign,this.FTrimming,0,-1,-1,true,false,-1,-1);
      } finally {
        AGraphics.RestoreState(st,false);
      };
    };
    this.DrawCompactExpander = function (AGraphics) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      r.$assign(this.GetLocalRect());
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Bottom - 20,r.Right,r.Bottom));
      pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-2,-2);
      AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FCompactExpanderBitmaps,0,true,false,true,false);
    };
    this.ShowOptionsMenu = function (X, Y) {
    };
    this.Assign = function (Source) {
      var c = null;
      var cc = null;
      var I = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(Source)) {
        this.FCompactAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactAppearance);
        this.FQuickMenuButtonAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FQuickMenuButtonAppearance);
        this.FQuickMenuButton = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FQuickMenuButton;
        this.FCompactBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactBitmaps);
        this.FCompact = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompact;
        this.FCanCompact = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCanCompact;
        this.FMinimumWidth = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FMinimumWidth;
        this.FCompactWidth = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactWidth;
        this.FCompactBitmapSize = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactBitmapSize;
        this.FCompactAutoBitmapSize = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactAutoBitmapSize;
        this.FCompactExpanderBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactExpanderBitmaps);
        this.FQuickMenuButtonBitmaps.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FQuickMenuButtonBitmaps);
        this.FCompactBitmapVisible = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FCompactBitmapVisible;
        this.FText = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FText;
        this.FTextVisible = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FTextVisible;
        this.FWordWrapping = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FWordWrapping;
        this.FHorizontalTextAlign = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FHorizontalTextAlign;
        this.FVerticalTextAlign = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FVerticalTextAlign;
        this.FTrimming = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FTrimming;
        this.FFont$1.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FFont$1);
        this.FAutoSize = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoSize;
        this.FAutoHeight = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoHeight;
        this.FAutoWidth = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoWidth;
        this.FAutoAlign = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoAlign;
        this.FAutoStretchHeight = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoStretchHeight;
        this.FAutoMoveToolBar = rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAutoMoveToolBar;
        this.FAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomToolBar).FAppearance);
        for (var $l1 = 0, $end2 = rtl.as(Source,$mod.TTMSFNCCustomToolBar).GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          cc = rtl.as(Source,$mod.TTMSFNCCustomToolBar).GetControls(I);
          if (($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc) && rtl.as(cc,$mod.TTMSFNCDefaultToolBarButton).FCanCopy) || !($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc) && pas["WEBLib.Controls"].TControl.isPrototypeOf(cc))) {
            if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc)) rtl.as(cc,$mod.TTMSFNCDefaultToolBarButton).FApplyName = false;
            c = rtl.as(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.Clone(cc),pas["WEBLib.Controls"].TControl);
            if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(cc)) rtl.as(cc,$mod.TTMSFNCDefaultToolBarButton).FApplyName = true;
            this.AddCustomControl(c,-1);
          };
        };
        this.Invalidate();
      } else pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
    };
    this.Create$1 = function (AOwner) {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.FHiddenControls = $mod.TTMSFNCToolBarControlObjectList.$create("Create$2");
      this.FCompactControls = $mod.TTMSFNCToolBarControlObjectList.$create("Create$2");
      this.FState = $mod.TTMSFNCToolBarElementState.esNormal;
      this.FAppearance = $mod.TTMSFNCToolBarAppearance.$create("Create$1",[this]);
      this.FCompactAppearance = $mod.TTMSFNCToolBarCompactAppearance.$create("Create$1",[null]);
      this.FCompactAppearance.FOnChange = rtl.createCallback(this,"CompactAppearanceChanged");
      this.FQuickMenuButtonAppearance = $mod.TTMSFNCToolBarQuickMenuButtonAppearance.$create("Create$1",[null]);
      this.FQuickMenuButtonAppearance.FOnChange = rtl.createCallback(this,"QuickMenuButtonAppearanceChanged");
      this.FCompactBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FCompactBitmaps.FOnChange = rtl.createCallback(this,"CompactBitmapsChanged");
      this.FOptionsMenu = $mod.TTMSFNCToolBarOptionsMenu.$create("Create$1",[this]);
      this.FMinimumWidth = 30;
      this.FCompactWidth = 50;
      this.FCompactBitmapSize = 24;
      this.FCompactAutoBitmapSize = false;
      this.FCompactBitmapVisible = false;
      this.FCompactExpanderBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FCompactExpanderBitmaps.FOnChange = rtl.createCallback(this,"CompactExpanderBitmapsChanged");
      this.FQuickMenuButtonBitmaps = pas["WEBLib.TMSFNCTypes"].TTMSFNCScaledBitmaps.$create("Create$3",[this]);
      this.FQuickMenuButtonBitmaps.FOnChange = rtl.createCallback(this,"QuickMenuButtonBitmapsChanged");
      this.FCanCompact = true;
      this.FQuickMenuButton = false;
      this.FCompact = false;
      this.FAutoSize = true;
      this.FAutoWidth = true;
      this.FAutoHeight = true;
      this.FAutoAlign = true;
      this.FAutoStretchHeight = false;
      this.FAutoMoveToolBar = true;
      this.FOptionsMenuButton = this.GetOptionsMenuButtonClass().$create("Create$1",[this]);
      this.FOptionsMenuButton.FAppearance.FNormalFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
      c = 13882323;
      this.FOptionsMenuButton.FAppearance.FNormalFill.SetColor(c);
      this.FOptionsMenuButton.FAppearance.SetShowInnerStroke(false);
      this.FOptionsMenuButton.FAppearance.SetRounding(0);
      this.FOptionsMenuButton.FAppearance.FHoverFill.Assign(this.FOptionsMenuButton.FAppearance.FNormalFill);
      this.FOptionsMenuButton.FAppearance.FDisabledFill.Assign(this.FOptionsMenuButton.FAppearance.FNormalFill);
      this.FOptionsMenuButton.FAppearance.FDownFill.Assign(this.FOptionsMenuButton.FAppearance.FNormalFill);
      this.FOptionsMenuButton.FAppearance.FHoverFill.SetColor(15128749);
      this.FOptionsMenuButton.FAppearance.FDownFill.SetColor(14599344);
      this.FOptionsMenuButton.FAppearance.FDisabledFill.SetColor(13882323);
      this.FOptionsMenuButton.SetAlignWithMargins(true);
      this.FOptionsMenuButton.FMargins.SetTop(3);
      this.FOptionsMenuButton.FMargins.SetBottom(3);
      this.FOptionsMenuButton.FMargins.SetRight(3);
      this.FOptionsMenuButton.FCanCopy = false;
      this.FAutoOptionsMenu = pas["WEBLib.TMSFNCTypes"].TPopupMenu.$create("Create$1",[this]);
      this.FOptionsMenuButton.FOnClick = rtl.createCallback(this,"OptionsButtonClick");
      this.FOptionsMenuButton.SetWidth(17);
      this.FOptionsMenuButton.SetText("");
      this.FOptionsMenuButton.FStored = false;
      this.FOptionsMenuButton.FBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENU,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FOptionsMenuButton.FBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENULARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FOptionsMenuButton.FDisabledBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENU,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FOptionsMenuButton.FDisabledBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENULARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FOptionsMenuButton.FHoverBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENU,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FOptionsMenuButton.FHoverBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAROPTIONSMENULARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FHorizontalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FVerticalTextAlign = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter;
      this.FTrimming = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttCharacter;
      this.FWordWrapping = false;
      this.FTextVisible = true;
      this.FFont$1 = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FCompactPopup = $mod.TTMSFNCToolBarPopup.$create("Create$1",[this]);
      this.FCompactPopup.FOnClosePopup = rtl.createCallback(this,"DoCloseCompactPopup");
      this.FCompactPopup.SetPlacementControl(this);
      this.FCompactExpanderBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCGraphics"].TMSFNCGRAPHICSDOWN,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FQuickMenuButtonBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBARQUICKMENU,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FQuickMenuButtonBitmaps");
      rtl.free(this,"FCompactExpanderBitmaps");
      rtl.free(this,"FCompactPopup");
      rtl.free(this,"FQuickMenuButtonAppearance");
      rtl.free(this,"FCompactAppearance");
      rtl.free(this,"FCompactBitmaps");
      rtl.free(this,"FFont$1");
      rtl.free(this,"FOptionsMenu");
      rtl.free(this,"FAppearance");
      rtl.free(this,"FHiddenControls");
      rtl.free(this,"FCompactControls");
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.call(this);
    };
    this.Build = function () {
      this.UpdateControls();
    };
    this.Draw = function (AGraphics, ARect) {
      var qr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var w = 0.0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      r.$assign(this.GetLocalRect());
      if (this.FCompact) {
        if (this.FDown) {
          AGraphics.FFill.Assign(this.FCompactAppearance.FDownFill);
          AGraphics.FStroke.Assign(this.FCompactAppearance.FDownStroke);
        } else if (this.FHover) {
          AGraphics.FFill.Assign(this.FCompactAppearance.FHoverFill);
          AGraphics.FStroke.Assign(this.FCompactAppearance.FHoverStroke);
        } else {
          AGraphics.FFill.Assign(this.FCompactAppearance.FNormalFill);
          AGraphics.FStroke.Assign(this.FCompactAppearance.FNormalStroke);
        };
        if (this.FCompactAppearance.FFlatStyle) AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top + 2,r.Right - 3,r.Bottom - 2)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      } else {
        AGraphics.FFill.Assign(this.FAppearance.FFill);
        AGraphics.FStroke.Assign(this.FAppearance.FStroke);
        if (this.FAppearance.FFlatStyle) AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
      };
      if (this.FCompact) {
        this.DrawCompactBitmap(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
        this.DrawCompactText(AGraphics);
        this.DrawCompactExpander(AGraphics);
      } else {
        if (this.FAppearance.FDragGrip) this.DrawDragGrip(AGraphics);
        this.DrawText(AGraphics);
        if (this.FQuickMenuButton) {
          if (this.FQuickMenuButtonDown) {
            AGraphics.FFill.Assign(this.FQuickMenuButtonAppearance.FDownFill);
            AGraphics.FStroke.Assign(this.FQuickMenuButtonAppearance.FDownStroke);
          } else if (this.FQuickMenuButtonHover) {
            AGraphics.FFill.Assign(this.FQuickMenuButtonAppearance.FHoverFill);
            AGraphics.FStroke.Assign(this.FQuickMenuButtonAppearance.FHoverStroke);
          } else {
            AGraphics.FFill.Assign(this.FQuickMenuButtonAppearance.FNormalFill);
            AGraphics.FStroke.Assign(this.FQuickMenuButtonAppearance.FNormalStroke);
          };
          if (this.FQuickMenuButtonAppearance.FFlatStyle) AGraphics.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
          qr.$assign(this.GetQuickMenuButtonRect());
          AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(qr),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
          pas["WEBLib.TMSFNCTypes"].InflateRectEx(qr,-2,-2);
          AGraphics.DrawScaledBitmap(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(qr),this.FQuickMenuButtonBitmaps,0,true,false,true,false);
        };
      };
      if (this.FAppearance.FSeparator) {
        AGraphics.FStroke.Assign(this.FAppearance.FSeparatorStroke);
        w = this.FAppearance.FSeparatorStroke.FWidth;
        AGraphics.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - w,r.Top + 4)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(r.Right - w,r.Bottom - 4)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
      };
      if (this.IsDesignTime() && this.CanDrawDesignTime()) AGraphics.DrawFocusRectangle$3(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),0,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.CanExpand = function () {
      var Result = false;
      var I = 0;
      var c = null;
      var btn = null;
      Result = false;
      if (this.FCompact) {
        Result = true;
        return Result;
      };
      for (var $l1 = this.GetControlsCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        c = this.GetControls(I);
        if (c !== this.FOptionsMenuButton) {
          if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c)) {
            btn = rtl.as(c,$mod.TTMSFNCDefaultToolBarButton);
            if ((btn.FLayout < btn.FMaximumLayout) && (btn.FLayout !== $mod.TTMSFNCToolBarButtonLayout.bblNone)) {
              Result = true;
              break;
            };
          };
        };
      };
      return Result;
    };
    this.CanShrink = function () {
      var Result = false;
      var I = 0;
      var c = null;
      var btn = null;
      Result = false;
      if (!this.FCompact && this.FCanCompact) {
        Result = true;
        return Result;
      };
      for (var $l1 = this.GetControlsCount() - 1; $l1 >= 0; $l1--) {
        I = $l1;
        c = this.GetControls(I);
        if (c !== this.FOptionsMenuButton) {
          if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c)) {
            btn = rtl.as(c,$mod.TTMSFNCDefaultToolBarButton);
            if ((btn.FLayout > btn.FMinimumLayout) && (btn.FLayout !== $mod.TTMSFNCToolBarButtonLayout.bblNone)) {
              Result = true;
              break;
            };
          };
        };
      };
      return Result;
    };
    this.DropDownActive = function () {
      var Result = false;
      var I = 0;
      var c = null;
      Result = false;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        c = this.GetControls(I);
        if ($mod.TTMSFNCDefaultToolBarButton.isPrototypeOf(c)) {
          if (rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FPopup != null) {
            Result = rtl.as(c,$mod.TTMSFNCDefaultToolBarButton).FPopup.FIsOpen;
            if (Result) break;
          };
        };
      };
      return Result;
    };
    this.CloseCompactPopup = function () {
      if (this.FCompactPopup != null) this.FCompactPopup.Deactivate();
    };
    this.AddCustomControl = function (AControl, AIndex) {
      this.FBlockUpdate = true;
      this.InsertToolBarControl(AControl,AIndex);
      this.FBlockUpdate = false;
      this.UpdateControls();
    };
    this.AddCustomControlClass = function (AControlClass, AIndex) {
      var Result = null;
      this.FBlockUpdate = true;
      Result = AControlClass.$create("Create$1",[this]);
      this.InsertToolBarControl(Result,AIndex);
      this.FBlockUpdate = false;
      this.UpdateControls();
      return Result;
    };
    this.AddButton = function (AWidth, AHeight, AResource, AResourceLarge, AText, AIndex) {
      var Result = null;
      this.FBlockUpdate = true;
      Result = this.GetToolBarButtonClass().$create("Create$1",[this]);
      Result.FAppearance.SetFlatStyle(this.FAppearance.FFlatStyle);
      Result.SetText(AText);
      if (AWidth !== -1) {
        Result.SetWidth(Math.round(AWidth));
      };
      if (AHeight !== -1) {
        Result.SetHeight(Math.round(AHeight));
      };
      if (AResource !== "") {
        Result.FBitmaps.AddBitmapFromResource$1(AResource,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
        Result.FDisabledBitmaps.AddBitmapFromResource$1(AResource,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
        Result.FHoverBitmaps.AddBitmapFromResource$1(AResource,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      };
      if (AResourceLarge !== "") {
        Result.FBitmaps.AddBitmapFromResource$1(AResourceLarge,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
        Result.FDisabledBitmaps.AddBitmapFromResource$1(AResourceLarge,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
        Result.FHoverBitmaps.AddBitmapFromResource$1(AResourceLarge,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      };
      this.InsertToolBarControl(Result,AIndex);
      this.FBlockUpdate = false;
      this.UpdateControls();
      return Result;
    };
    this.AddSeparator = function (AIndex) {
      var Result = null;
      this.FBlockUpdate = true;
      Result = this.GetToolBarSeparatorClass().$create("Create$1",[this]);
      this.InsertToolBarControl(Result,AIndex);
      this.FBlockUpdate = false;
      this.UpdateControls();
      return Result;
    };
    this.AddFontNamePicker = function (AIndex) {
      var Result = null;
      this.FBlockUpdate = true;
      Result = this.GetFontNamePickerClass().$create("Create$1",[this]);
      Result.FAppearance.SetFlatStyle(this.FAppearance.FFlatStyle);
      this.InsertToolBarControl(Result,AIndex);
      this.FBlockUpdate = false;
      this.UpdateControls();
      return Result;
    };
    this.AddFontSizePicker = function (AIndex) {
      var Result = null;
      this.FBlockUpdate = true;
      Result = this.GetFontSizePickerClass().$create("Create$1",[this]);
      Result.FAppearance.SetFlatStyle(this.FAppearance.FFlatStyle);
      this.InsertToolBarControl(Result,AIndex);
      this.FBlockUpdate = false;
      this.UpdateControls();
      return Result;
    };
    this.AddColorPicker = function (AIndex) {
      var Result = null;
      this.FBlockUpdate = true;
      Result = this.GetColorPickerClass().$create("Create$1",[this]);
      Result.FAppearance.SetFlatStyle(this.FAppearance.FFlatStyle);
      this.InsertToolBarControl(Result,AIndex);
      this.FBlockUpdate = false;
      this.UpdateControls();
      return Result;
    };
    this.AddItemPicker = function (AIndex) {
      var Result = null;
      this.FBlockUpdate = true;
      Result = this.GetItemPickerClass().$create("Create$1",[this]);
      Result.FAppearance.SetFlatStyle(this.FAppearance.FFlatStyle);
      this.InsertToolBarControl(Result,AIndex);
      this.FBlockUpdate = false;
      this.UpdateControls();
      return Result;
    };
    this.AddBitmapPicker = function (AIndex) {
      var Result = null;
      this.FBlockUpdate = true;
      Result = this.GetBitmapPickerClass().$create("Create$1",[this]);
      Result.FAppearance.SetFlatStyle(this.FAppearance.FFlatStyle);
      this.InsertToolBarControl(Result,AIndex);
      this.FBlockUpdate = false;
      this.UpdateControls();
      return Result;
    };
    this.GetOptionsMenuButtonControl = function () {
      var Result = null;
      Result = this.FOptionsMenuButton;
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCToolBar",$mod.TTMSFNCCustomToolBar,function () {
    this.RegisterRuntimeClasses = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.RegisterRuntimeClasses.call(this);
      pas.Classes.RegisterClass($mod.TTMSFNCToolBar);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("OnOptionsMenuButtonClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnOptionsMenuButtonClick","FOnOptionsMenuButtonClick");
    $r.addProperty("OnOptionsMenuItemCanShow",0,$mod.$rtti["TTMSFNCToolBarCanShowOptionsMenuItem"],"FOnOptionsMenuItemCanShow","FOnOptionsMenuItemCanShow");
    $r.addProperty("OnOptionsMenuCustomize",0,$mod.$rtti["TTMSFNCToolBarCustomizeOptionsMenu"],"FOnOptionsMenuCustomize","FOnOptionsMenuCustomize");
    $r.addProperty("OnOptionsMenuItemCustomize",0,$mod.$rtti["TTMSFNCToolBarCustomizeOptionsMenuItem"],"FOnOptionsMenuItemCustomize","FOnOptionsMenuItemCustomize");
    $r.addProperty("OnOptionsMenuItemApplyStyle",0,$mod.$rtti["TTMSFNCToolBarCustomizeOptionsMenuItem"],"FOnOptionsMenuItemApplyStyle","FOnOptionsMenuItemApplyStyle");
    $r.addProperty("OnOptionsMenuItemClick",0,$mod.$rtti["TTMSFNCToolBarOptionsMenuItemClick"],"FOnOptionsMenuItemClick","FOnOptionsMenuItemClick");
    $r.addProperty("OnIsLastElement",0,$mod.$rtti["TTMSFNCToolBarIsLastElement"],"FOnIsLastElement","FOnIsLastElement");
    $r.addProperty("OnDragGripMoving",0,$mod.$rtti["TTMSFNCToolBarDragGripMovingEvent"],"FOnDragGripMoving","FOnDragGripMoving");
    $r.addProperty("OnQuickMenuButtonClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnQuickMenuButtonClick","FOnQuickMenuButtonClick");
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
    $r.addProperty("AutoHeight",2,rtl.boolean,"FAutoHeight","SetAutoHeight",{Default: true});
    $r.addProperty("AutoWidth",2,rtl.boolean,"FAutoWidth","SetAutoWidth",{Default: true});
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAS",{Default: true});
    $r.addProperty("AutoAlign",2,rtl.boolean,"FAutoAlign","SetAutoAlign",{Default: true});
    $r.addProperty("AutoStretchHeight",2,rtl.boolean,"FAutoStretchHeight","SetAutoStretchHeight",{Default: false});
    $r.addProperty("AutoMoveToolBar",0,rtl.boolean,"FAutoMoveToolBar","FAutoMoveToolBar",{Default: true});
    $r.addProperty("Appearance",2,$mod.$rtti["TTMSFNCToolBarAppearance"],"FAppearance","SetAppearance");
    $r.addProperty("CanCompact",2,rtl.boolean,"FCanCompact","SetCanCompact",{Default: true});
    $r.addProperty("OnCompactClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnCompactClick","FOnCompactClick");
    $r.addProperty("CompactBitmapVisible",2,rtl.boolean,"FCompactBitmapVisible","SetCompactBitmapVisible",{Default: false});
    $r.addProperty("CompactBitmaps",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCScaledBitmaps"],"FCompactBitmaps","SetCompactBitmaps");
    $r.addProperty("Compact",2,rtl.boolean,"FCompact","SetCompact",{Default: false});
    $r.addProperty("CompactWidth",14,rtl.double,"FCompactWidth","SetCompactWidth",{stored: "IsCompactWidthStored"});
    $r.addProperty("CompactAppearance",2,$mod.$rtti["TTMSFNCToolBarCompactAppearance"],"FCompactAppearance","SetCompactAppearance");
    $r.addProperty("CompactBitmapSize",14,rtl.double,"FCompactBitmapSize","SetCompactBitmapSize",{stored: "IsCompactBitmapSizeStored"});
    $r.addProperty("CompactAutoBitmapSize",2,rtl.boolean,"FCompactAutoBitmapSize","SetCompactAutoBitmapSize",{Default: false});
    $r.addProperty("QuickMenuButtonHint",0,rtl.string,"FQuickMenuButtonHint","FQuickMenuButtonHint");
    $r.addProperty("QuickMenuButton",2,rtl.boolean,"FQuickMenuButton","SetQuickMenuButton",{Default: false});
    $r.addProperty("QuickMenuButtonAppearance",2,$mod.$rtti["TTMSFNCToolBarQuickMenuButtonAppearance"],"FQuickMenuButtonAppearance","SetQuickMenuButtonAppearance");
    $r.addProperty("MinimumWidth",14,rtl.double,"FMinimumWidth","SetMinimumWidth",{stored: "IsMinimumWidthStored"});
    $r.addProperty("WordWrapping",2,rtl.boolean,"FWordWrapping","SetWordWrapping",{Default: false});
    $r.addProperty("Text",2,rtl.string,"FText","SetText");
    $r.addProperty("Trimming",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextTrimming"],"FTrimming","SetTrimming",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttCharacter});
    $r.addProperty("HorizontalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FHorizontalTextAlign","SetHorizontalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("VerticalTextAlign",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsTextAlign"],"FVerticalTextAlign","SetVerticalTextAlign",{Default: pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter});
    $r.addProperty("Font",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FFont$1","SetFont$1");
    $r.addProperty("OptionsMenu",2,$mod.$rtti["TTMSFNCToolBarOptionsMenu"],"FOptionsMenu","SetOptionsMenu");
    $r.addProperty("CustomOptionsMenu",0,pas["WEBLib.TMSFNCTypes"].$rtti["TPopupMenu"],"FCustomOptionsMenu","FCustomOptionsMenu");
    $r.addProperty("State",2,$mod.$rtti["TTMSFNCToolBarElementState"],"FState","SetState",{Default: $mod.TTMSFNCToolBarElementState.esNormal});
  });
  rtl.createClass($mod,"TTMSFNCCustomDockPanelAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FFill = null;
      this.FStroke = null;
      this.FMargins = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FFill = undefined;
      this.FStroke = undefined;
      this.FMargins = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetFill = function (Value) {
      this.FFill.Assign(Value);
    };
    this.SetStroke = function (Value) {
      this.FStroke.Assign(Value);
    };
    this.SetMargins = function (Value) {
      this.FMargins.Assign(Value);
    };
    this.FillChanged = function (Sender) {
      this.FOwner.Invalidate();
    };
    this.StrokeChanged = function (Sender) {
      this.FOwner.Invalidate();
    };
    this.MarginsChanged = function (Sender) {
      this.FOwner.UpdateControls();
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FMargins = pas["WEBLib.TMSFNCTypes"].TTMSFNCMargins.$create("Create$1");
      this.FMargins.SetLeft(3);
      this.FMargins.SetTop(3);
      this.FMargins.SetBottom(3);
      this.FMargins.SetRight(3);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FMargins");
      rtl.free(this,"FFill");
      rtl.free(this,"FStroke");
      pas.System.TObject.Destroy.call(this);
    };
  });
  rtl.createClass($mod,"TTMSFNCDockPanelAppearance",$mod.TTMSFNCCustomDockPanelAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
  });
  rtl.createClass($mod,"TTMSFNCCustomDockPanel",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FBlockUpdate = false;
      this.FAppearance = null;
      this.FAutoSize = false;
      this.FAutoAlign = false;
      this.FState = 0;
    };
    this.$final = function () {
      this.FAppearance = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetAppearance = function (Value) {
      this.FAppearance.Assign(Value);
    };
    this.SetAutoAlign = function (Value) {
      if (this.FAutoAlign !== Value) {
        this.FAutoAlign = Value;
        this.UpdateControls();
      };
    };
    this.SetAS = function (Value) {
      if (this.FAutoSize !== Value) {
        this.FAutoSize = Value;
        this.UpdateControls();
      };
    };
    this.SetState = function (Value) {
      var I = 0;
      var c = null;
      if (this.FState !== Value) {
        this.FState = Value;
        for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
          I = $l1;
          c = this.GetControls(I);
          if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(c)) rtl.as(c,$mod.TTMSFNCCustomToolBar).SetState(this.FState);
        };
      };
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,1,4);
      return Result;
    };
    this.SetAdaptToStyle = function (Value) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.SetAdaptToStyle.apply(this,arguments);
      this.UpdateControls();
    };
    this.UpdateControls = function () {
      var I = 0;
      var h = 0;
      var hsm = 0;
      var c = null;
      var ia = null;
      var $ir = rtl.createIntfRefs();
      try {
        if (this.FBlockUpdate || this.IsLoading() || this.IsDestroying()) return;
        this.FBlockUpdate = true;
        h = 0;
        hsm = 30;
        if (this.FAutoAlign) {
          this.InitializeControls();
          this.RearrangeControls();
        };
        if (this.FAutoSize) {
          for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
            I = $l1;
            c = this.GetControls(I);
            if (pas.SysUtils.Supports$1($ir.ref(1,rtl.queryIntfT(c,pas.System.IUnknown)),rtl.getIntfGUIDR(pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle),{get: function () {
                return ia;
              }, set: function (v) {
                ia = v;
              }})) ia.SetAdaptToStyle(this.GetAdaptToStyle());
            if (c.FVisible) h = Math.round(Math.max(h,c.GetTop() + c.GetHeight() + this.FAppearance.FMargins.FBottom));
          };
          if (h === 0) h = hsm;
          if (pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) h = h + 15;
          this.SetBounds(this.GetLeft(),this.GetTop(),this.GetWidth(),h);
        };
        this.FBlockUpdate = false;
      } finally {
        $ir.free();
        rtl._Release(ia);
      };
    };
    this.InitializeControls = function () {
      var I = 0;
      var c = null;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        c = this.GetControls(I);
        if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(c)) {
          rtl.as(c,$mod.TTMSFNCCustomToolBar).FOnUpdateDockPanel = rtl.createCallback(this,"UpdateDockPanel");
          if (rtl.as(c,$mod.TTMSFNCCustomToolBar).FDragGripMoving) continue;
        };
        if (c.FVisible) {
          if (c.GetTop() < this.FAppearance.FMargins.FTop) c.SetTop(Math.round(this.FAppearance.FMargins.FTop));
          if (c.GetLeft() < this.FAppearance.FMargins.FLeft) {
            c.SetLeft(Math.round(this.FAppearance.FMargins.FLeft))}
           else if ((c.GetLeft() + c.GetWidth()) > (this.GetWidth() - this.FAppearance.FMargins.FRight)) c.SetLeft(Math.round(this.GetWidth() - this.FAppearance.FMargins.FRight - c.GetWidth()));
        };
      };
    };
    this.RearrangeControls = function () {
      var c = null;
      var cl = null;
      var cr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var clr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var I = 0;
      var J = 0;
      for (var $l1 = 0, $end2 = this.GetControlsCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        c = this.GetControls(I);
        if (!c.FVisible) continue;
        if ($mod.TTMSFNCCustomToolBar.isPrototypeOf(c)) {
          if (rtl.as(c,$mod.TTMSFNCCustomToolBar).FDragGripMoving) continue;
        };
        for (var $l3 = 0, $end4 = this.GetControlsCount() - 1; $l3 <= $end4; $l3++) {
          J = $l3;
          cl = this.GetControls(J);
          if ((cl === c) || !cl.FVisible) continue;
          cr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(c.GetLeft(),c.GetTop(),c.GetLeft() + c.GetWidth(),c.GetTop() + c.GetHeight()));
          clr.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cl.GetLeft(),cl.GetTop(),cl.GetLeft() + cl.GetWidth(),cl.GetTop() + cl.GetHeight()));
          if ((clr.Left >= (cr.Left - 3)) && (clr.Left <= (cr.Right + 3))) {
            if ((clr.Top < pas["WEBLib.TMSFNCTypes"].CenterPointEx(cr).Y) && (clr.Top >= (cr.Top - 3))) {
              cl.SetLeft(c.GetLeft() + c.GetWidth() + 3);
              cl.SetTop(c.GetTop());
            } else if ((clr.Top >= pas["WEBLib.TMSFNCTypes"].CenterPointEx(cr).Y) && (clr.Top <= (cr.Bottom + 3))) {
              cl.SetTop(c.GetTop() + c.GetHeight() + 3);
              cl.SetLeft(c.GetLeft());
            };
          };
        };
      };
    };
    this.UpdateDockPanel = function (Sender) {
      this.UpdateControls();
    };
    this.ApplyStyle = function () {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ApplyStyle.call(this);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleHeaderFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid);
        this.FAppearance.FFill.SetColor(c);
      };
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleHeaderFillColorTo({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkGradient);
        this.FAppearance.FFill.SetColorTo(c);
      };
    };
    this.ResetToDefaultStyle = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ResetToDefaultStyle.call(this);
    };
    this.AlignControls = function (AControl, Rect) {
      pas["WEBLib.Controls"].TControl.AlignControls.apply(this,arguments);
      this.UpdateControls();
    };
    this.Assign = function (Source) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
      if ($mod.TTMSFNCCustomDockPanel.isPrototypeOf(Source)) {
        this.FAppearance.Assign(rtl.as(Source,$mod.TTMSFNCCustomDockPanel).FAppearance);
        this.SetAS(rtl.as(Source,$mod.TTMSFNCCustomDockPanel).FAutoSize);
        this.SetAutoAlign(rtl.as(Source,$mod.TTMSFNCCustomDockPanel).FAutoAlign);
        this.SetState(rtl.as(Source,$mod.TTMSFNCCustomDockPanel).FState);
      } else pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Assign.apply(this,arguments);
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.FState = $mod.TTMSFNCToolBarElementState.esNormal;
      this.FAppearance = $mod.TTMSFNCDockPanelAppearance.$create("Create$1",[this]);
      this.FAutoSize = true;
      this.FAutoAlign = true;
      this.SetAlign(pas["WEBLib.Controls"].TAlign.alTop);
      this.SetHeight(40);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FAppearance");
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.call(this);
    };
    this.Draw = function (AGraphics, ARect) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      AGraphics.FFill.Assign(this.FAppearance.FFill);
      AGraphics.FStroke.Assign(this.FAppearance.FStroke);
      r.$assign(this.GetLocalRect());
      AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll);
    };
    this.AddToolBar = function (AIndex) {
      var Result = null;
      this.FBlockUpdate = true;
      Result = $mod.TTMSFNCToolBar.$create("Create$1",[this]);
      Result.SetParent(this);
      this.FBlockUpdate = false;
      this.UpdateControls();
      return Result;
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCDockPanel",$mod.TTMSFNCCustomDockPanel,function () {
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
    $r.addProperty("Appearance",2,$mod.$rtti["TTMSFNCDockPanelAppearance"],"FAppearance","SetAppearance");
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAS",{Default: true});
    $r.addProperty("AutoAlign",2,rtl.boolean,"FAutoAlign","SetAutoAlign",{Default: true});
    $r.addProperty("State",2,$mod.$rtti["TTMSFNCToolBarElementState"],"FState","SetState",{Default: $mod.TTMSFNCToolBarElementState.esNormal});
  });
  $mod.$init = function () {
    pas.Classes.RegisterClass($mod.TTMSFNCToolBarButton);
  };
},["Math","SysUtils","WEBLib.TMSFNCUtils","WEBLib.Graphics","strutils","WEBLib.TMSFNCStyles"]);
rtl.module("WEBLib.TMSFNCEdit",["System","Classes","WEBLib.TMSFNCToolBar","WEBLib.TMSFNCToolBarRes","WEBLib.TMSFNCCustomControl","WEBLib.TMSFNCTypes","WEBLib.TMSFNCPopup","WEBLib.ExtCtrls","WEBLib.StdCtrls","WEBLib.Graphics","WEBLib.Controls","WEBLib.TMSFNCGraphicsTypes","WEBLib.TMSFNCBitmapContainer"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 2;
  this.BLD_VER = 11;
  this.LOOKUPITEMHEIGHT = 18;
  this.TTMSFNCEditType = {"0": "etString", etString: 0, "1": "etNumeric", etNumeric: 1, "2": "etSignedNumeric", etSignedNumeric: 2, "3": "etFloat", etFloat: 3, "4": "etSignedFloat", etSignedFloat: 4, "5": "etUppercase", etUppercase: 5, "6": "etMixedCase", etMixedCase: 6, "7": "etLowerCase", etLowerCase: 7, "8": "etMoney", etMoney: 8, "9": "etHex", etHex: 9, "10": "etAlphaNumeric", etAlphaNumeric: 10, "11": "etValidChars", etValidChars: 11};
  $mod.$rtti.$Enum("TTMSFNCEditType",{minvalue: 0, maxvalue: 11, ordtype: 1, enumtype: this.TTMSFNCEditType});
  this.TTMSFNCEditPrecisionDisplay = {"0": "pdNormal", pdNormal: 0, "1": "pdShortest", pdShortest: 1};
  $mod.$rtti.$Enum("TTMSFNCEditPrecisionDisplay",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCEditPrecisionDisplay});
  $mod.$rtti.$Class("TTMSFNCEdit");
  rtl.createClass($mod,"TTMSFNCEditLookupSettings",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FDisplayList = null;
      this.FValueList = null;
      this.FDisplayCount = 0;
      this.FColor = 0;
      this.FEnabled = false;
      this.FNumChars = 0;
      this.FCaseSensitive = false;
      this.FHistory = false;
      this.FMulti = false;
      this.FSeparator = "";
      this.FAcceptOnTab = false;
      this.FWidth = 0;
      this.FHeight = 0;
      this.FUseValueList = false;
      this.FMinimumWidth = 0;
      this.FMinimumHeight = 0;
    };
    this.$final = function () {
      this.FDisplayList = undefined;
      this.FValueList = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetDisplayList = function (Value) {
      this.FDisplayList.Assign(Value);
    };
    this.SetValueList = function (Value) {
      this.FValueList.Assign(Value);
    };
    this.SetNumChars = function (Value) {
      if (Value > 0) this.FNumChars = Value;
    };
    this.SetHeight = function (Value) {
      this.FHeight = Value;
    };
    this.SetWidth = function (Value) {
      this.FWidth = Value;
    };
    this.SetMinimumHeight = function (Value) {
      this.FMinimumHeight = Value;
    };
    this.SetMinimumWidth = function (Value) {
      this.FMinimumWidth = Value;
    };
    this.Create$1 = function () {
      pas.System.TObject.Create.call(this);
      this.FUseValueList = true;
      this.FWidth = 0;
      this.FMinimumWidth = 0;
      this.FHeight = 0;
      this.FMinimumHeight = 0;
      this.FDisplayList = pas.Classes.TStringList.$create("Create$1");
      this.FDisplayList.SetSorted(true);
      this.FDisplayList.FDuplicates = pas.Types.TDuplicates.dupIgnore;
      this.FValueList = pas.Classes.TStringList.$create("Create$1");
      this.FColor = 16777215;
      this.FDisplayCount = 4;
      this.FNumChars = 2;
      this.FEnabled = false;
      this.FSeparator = ";";
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FValueList");
      rtl.free(this,"FDisplayList");
      pas.System.TObject.Destroy.call(this);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCEditLookupSettings.isPrototypeOf(Source)) {
        this.FAcceptOnTab = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FAcceptOnTab;
        this.FCaseSensitive = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FCaseSensitive;
        this.FColor = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FColor;
        this.FDisplayCount = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FDisplayCount;
        this.FDisplayList.Assign(rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FDisplayList);
        this.FEnabled = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FEnabled;
        this.FHistory = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FHistory;
        this.FNumChars = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FNumChars;
        this.FValueList.Assign(rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FValueList);
        this.FMulti = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FMulti;
        this.FSeparator = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FSeparator;
        this.FWidth = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FWidth;
        this.FHeight = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FHeight;
        this.FMinimumWidth = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FMinimumWidth;
        this.FMinimumHeight = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FMinimumHeight;
        this.FUseValueList = rtl.as(Source,$mod.TTMSFNCEditLookupSettings).FUseValueList;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("CaseSensitive",0,rtl.boolean,"FCaseSensitive","FCaseSensitive",{Default: false});
    $r.addProperty("DisplayCount",0,rtl.longint,"FDisplayCount","FDisplayCount",{Default: 4});
    $r.addProperty("DisplayList",2,pas.Classes.$rtti["TStringList"],"FDisplayList","SetDisplayList");
    $r.addProperty("Enabled",0,rtl.boolean,"FEnabled","FEnabled",{Default: false});
    $r.addProperty("History",0,rtl.boolean,"FHistory","FHistory",{Default: false});
    $r.addProperty("NumChars",2,rtl.longint,"FNumChars","SetNumChars",{Default: 2});
    $r.addProperty("ValueList",2,pas.Classes.$rtti["TStringList"],"FValueList","SetValueList");
    $r.addProperty("Multi",0,rtl.boolean,"FMulti","FMulti",{Default: false});
    $r.addProperty("Separator",0,rtl.char,"FSeparator","FSeparator");
    $r.addProperty("Width",2,rtl.longint,"FWidth","SetWidth",{Default: 0});
    $r.addProperty("Height",2,rtl.longint,"FHeight","SetHeight",{Default: 0});
    $r.addProperty("MinimumWidth",2,rtl.longint,"FMinimumWidth","SetMinimumWidth",{Default: 0});
    $r.addProperty("MinimumHeight",2,rtl.longint,"FMinimumHeight","SetMinimumHeight",{Default: 0});
    $r.addProperty("UseValueList",0,rtl.boolean,"FUseValueList","FUseValueList",{Default: true});
  });
  $mod.$rtti.$MethodVar("TTMSFNCEditLookupSelectEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Value",rtl.string,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCEditLookupIndexSelectEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Index",rtl.longint],["Value",rtl.string,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCEditLookupNeedDataEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["Value",rtl.string],["List",pas.Classes.$rtti["TStrings"]],["ItemIndex",rtl.longint,1]]), methodkind: 0});
  $mod.$rtti.$DynArray("TTMSFNCEditHexCharacterArray",{eltype: rtl.char});
  rtl.createClass($mod,"TTMSFNCLookupListBoxItem",pas.System.TObject,function () {
    this.$init = function () {
      pas.System.TObject.$init.call(this);
      this.FIdx = 0;
    };
    this.Create$1 = function (AIdx) {
      this.FIdx = AIdx;
      return this;
    };
  });
  rtl.createClass($mod,"TTMSFNCLookupList",pas.Classes.TList,function () {
  });
  rtl.createClass($mod,"TTMSFNCEdit",pas["WEBLib.StdCtrls"].TCustomEdit,function () {
    this.$init = function () {
      pas["WEBLib.StdCtrls"].TCustomEdit.$init.call(this);
      this.FLookupListBoxItems = null;
      this.FAllowFocus = false;
      this.FLookupFormTimer = null;
      this.FKeyDown = 0;
      this.FShiftState = {};
      this.FEditType$1 = 0;
      this.FValidChars = "";
      this.FLookupList = null;
      this.FLookupListBox = null;
      this.FLookup = null;
      this.FOnLookupSelect = null;
      this.FOnLookupIndexSelect = null;
      this.FSigned = false;
      this.FPrefix = "";
      this.FSuffix = "";
      this.FIsModified = false;
      this.FLengthLimit = 0;
      this.FFullTextSearch = false;
      this.FAutoThousandSeparator = false;
      this.FPrecision = 0;
      this.FPrecisionDisplay = 0;
      this.FBlockChange = false;
      this.FAllowNumericNullValue = false;
      this.FAutoComplete = false;
      this.FOnCloseWithEscape = null;
      this.FOnLookupNeedData = null;
      this.FAutoClose = false;
    };
    this.$final = function () {
      this.FLookupListBoxItems = undefined;
      this.FLookupFormTimer = undefined;
      this.FShiftState = undefined;
      this.FLookupList = undefined;
      this.FLookupListBox = undefined;
      this.FLookup = undefined;
      this.FOnLookupSelect = undefined;
      this.FOnLookupIndexSelect = undefined;
      this.FOnCloseWithEscape = undefined;
      this.FOnLookupNeedData = undefined;
      pas["WEBLib.StdCtrls"].TCustomEdit.$final.call(this);
    };
    this.CloseLookup = function () {
      if (this.CanFocus()) this.SetFocus();
      if (this.FLookupList != null) this.FLookupList.SetIsOpen(false);
    };
    this.DoneLookup = function () {
      var idx = 0;
      var vp = 0;
      var NewValue = "";
      var LookupText = "";
      var NewText = "";
      if (!(this.FLookupListBox != null)) return;
      if (this.FLookupListBox.GetItemIndex() !== -1) {
        idx = this.FLookupListBox.FItems.GetObject(this.FLookupListBox.GetItemIndex()).FIdx;
        if ((idx >= 0) && (idx < this.FLookup.FValueList.GetCount()) && this.FLookup.FUseValueList) {
          NewValue = this.FLookup.FValueList.Get(idx)}
         else NewValue = this.FLookupListBox.FItems.Get(this.FLookupListBox.GetItemIndex());
        if (this.FOnLookupSelect != null) this.FOnLookupSelect(this,{get: function () {
            return NewValue;
          }, set: function (v) {
            NewValue = v;
          }});
        if (this.FOnLookupIndexSelect != null) this.FOnLookupIndexSelect(this,idx,{get: function () {
            return NewValue;
          }, set: function (v) {
            NewValue = v;
          }});
        if (this.FLookup.FMulti) {
          NewValue = NewValue + this.FLookup.FSeparator;
          LookupText = this.GetT();
          NewText = "";
          vp = -1;
          while (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(this.FLookup.FSeparator,LookupText,{get: function () {
              return vp;
            }, set: function (v) {
              vp = v;
            }}) > 0) {
            NewText = NewText + pas.System.Copy(LookupText,1,vp);
            pas.System.Delete({get: function () {
                return LookupText;
              }, set: function (v) {
                LookupText = v;
              }},1,vp);
          };
          this.SetT(NewText + NewValue);
        } else this.SetT(NewValue);
        if (this.FLookup.FMulti) {
          this.SetSelStart(this.GetT().length)}
         else this.SelectAll();
        this.CloseLookup();
      };
    };
    this.UpdateLookup = function () {
      var i = 0;
      var cnt = 0;
      var mw = 0;
      var mh = 0;
      var tw = 0;
      var vp = 0;
      var LookupText = "";
      var ismatch = false;
      var idx = 0;
      var obj = null;
      if (!this.FLookup.FEnabled || !(this.FLookupListBox != null)) return;
      if (this.FLookup.FMulti) {
        LookupText = this.GetT();
        vp = -1;
        while (pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.VarPos(this.FLookup.FSeparator,LookupText,{get: function () {
            return vp;
          }, set: function (v) {
            vp = v;
          }}) > 0) pas.System.Delete({get: function () {
            return LookupText;
          }, set: function (v) {
            LookupText = v;
          }},1,vp);
      } else LookupText = this.GetT();
      if (LookupText.length >= this.FLookup.FNumChars) {
        mh = (18 * this.FLookup.FDisplayCount) + 4;
        this.FLookupListBox.SetParent(this);
        this.CleanupLookupList();
        this.FLookupListBox.FItems.Clear();
        for (var $l1 = 1, $end2 = this.FLookup.FDisplayList.GetCount(); $l1 <= $end2; $l1++) {
          i = $l1;
          if (this.FLookup.FCaseSensitive) {
            if (pas.System.Pos(LookupText,this.FLookup.FDisplayList.Get(i - 1)) === 1) {
              obj = $mod.TTMSFNCLookupListBoxItem.$create("Create$1",[i - 1]);
              this.FLookupListBox.FItems.AddObject($impl.CleanString(this.FLookup.FDisplayList.Get(i - 1)),obj);
              this.FLookupListBoxItems.Add(obj);
            };
          } else {
            vp = pas.System.Pos(pas.SysUtils.UpperCase(LookupText),pas.SysUtils.UpperCase(this.FLookup.FDisplayList.Get(i - 1)));
            if (this.FFullTextSearch) {
              ismatch = vp > 0}
             else ismatch = vp === 1;
            if (ismatch) {
              obj = $mod.TTMSFNCLookupListBoxItem.$create("Create$1",[i - 1]);
              this.FLookupListBox.FItems.AddObject($impl.CleanString(this.FLookup.FDisplayList.Get(i - 1)),obj);
              this.FLookupListBoxItems.Add(obj);
            };
          };
        };
        idx = 0;
        this.DoLookupNeedData(LookupText,this.FLookupListBox.FItems,{get: function () {
            return idx;
          }, set: function (v) {
            idx = v;
          }});
        cnt = this.FLookupListBox.FItems.GetCount();
        if ((this.FLookup.FDisplayList.GetCount() > 0) && (this.FLookupListBox.FItems.GetCount() > 0)) this.FLookupListBox.SetItemIndex(idx);
        if (cnt < this.FLookup.FDisplayCount) mh = (cnt * 18) + 4;
        this.FLookupListBox.SetSorted(true);
        mw = 50;
        this.FLookupList.SetDropDownWidth(0);
        if (cnt > 0) {
          for (var $l3 = 1, $end4 = cnt; $l3 <= $end4; $l3++) {
            i = $l3;
            tw = 0;
            if (this.FLookupListBox.GetCanvas() != null) tw = Math.round(this.FLookupListBox.GetCanvas().TextWidth(this.FLookupListBox.FItems.Get(i - 1)));
            if (tw > mw) mw = tw;
          };
          mw = mw + 26;
        };
        if (this.FLookup.FWidth > 0) mw = this.FLookup.FWidth;
        if (this.FLookup.FHeight > 0) mh = this.FLookup.FHeight;
        if (cnt > 0) {
          this.FLookupList.SetDropDownWidth(Math.max(this.FLookup.FMinimumWidth,mw));
          this.FLookupList.SetDropDownHeight(Math.max(this.FLookup.FMinimumHeight,mh));
          if (this.FLookupList.HasPopupForm()) {
            this.FLookupListBox.SetParent(this.FLookupList.FPopupForm);
            this.FLookupList.FPopupForm.SetWidth(Math.round(this.FLookupList.FDropDownWidth));
            this.FLookupList.FPopupForm.SetHeight(Math.round(this.FLookupList.FDropDownHeight));
          };
          this.FLookupList.SetIsOpen(true);
          this.FLookupFormTimer.SetEnabled(this.FAutoClose);
        } else this.FLookupList.SetIsOpen(false);
      } else this.FLookupList.SetIsOpen(false);
    };
    this.UpdateAutoComplete = function () {
      var s = "";
      var ms = "";
      var i = 0;
      var vp = 0;
      if (!this.FAutoComplete) return;
      s = this.GetT();
      ms = "";
      if (s.length >= 1) {
        for (var $l1 = 1, $end2 = this.FLookup.FDisplayList.GetCount(); $l1 <= $end2; $l1++) {
          i = $l1;
          if (this.FLookup.FCaseSensitive) {
            if (pas.System.Pos(s,this.FLookup.FDisplayList.Get(i - 1)) === 1) {
              ms = this.FLookup.FDisplayList.Get(i - 1);
              break;
            };
          } else {
            vp = pas.System.Pos(pas.SysUtils.UpperCase(s),pas.SysUtils.UpperCase(this.FLookup.FDisplayList.Get(i - 1)));
            if (vp === 1) {
              ms = this.FLookup.FDisplayList.Get(i - 1);
              break;
            };
          };
        };
        if (ms !== "") {
          this.SetT($impl.CleanString(ms));
          this.SetSelStart(s.length);
          this.SetSelLength(this.GetT().length - this.GetSelStart());
        };
      };
    };
    this.SetLookup = function (Value) {
      this.FLookup.Assign(Value);
    };
    this.AllowMin = function (ch) {
      var Result = false;
      Result = this.FSigned && (this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etFloat,$mod.TTMSFNCEditType.etSignedFloat,$mod.TTMSFNCEditType.etNumeric,$mod.TTMSFNCEditType.etSignedNumeric,$mod.TTMSFNCEditType.etMoney)) && (ch === "-");
      return Result;
    };
    this.FixedLength = function (s) {
      var Result = 0;
      var i = 0;
      s = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.StripThousandSep(s);
      i = pas.System.Pos(pas.SysUtils.FormatSettings.GetDecimalSeparator(),s);
      if (i > 0) {
        Result = i}
       else Result = s.length + 1;
      if (this.FSigned && (this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etFloat,$mod.TTMSFNCEditType.etSignedFloat,$mod.TTMSFNCEditType.etNumeric,$mod.TTMSFNCEditType.etSignedNumeric,$mod.TTMSFNCEditType.etMoney)) && (pas.System.Pos("-",s) > 0)) Result = Result - 1;
      return Result;
    };
    this.SetPrefix = function (Value) {
      this.FPrefix = Value;
    };
    this.SetSuffix = function (Value) {
      this.FSuffix = Value;
    };
    this.SetModified = function (Value) {
      if (pas.Classes.TComponentStateItem.csLoading in this.FComponentState) return;
      if (this.FReadOnly) return;
      this.FIsModified = Value;
    };
    this.DecimalPos = function () {
      var Result = 0;
      var i = 0;
      i = pas.System.Pos(pas.SysUtils.FormatSettings.GetDecimalSeparator(),this.GetT());
      if (i === 0) {
        Result = this.FPrefix.length + this.GetT().length + this.FSuffix.length + 1}
       else Result = this.FPrefix.length + i;
      return Result;
    };
    this.AutoSeparators = function () {
      var s = "";
      var si = "";
      var neg = "";
      var d = 0.0;
      var Diffl = 0;
      var OldSelStart = 0;
      var OldPrec = 0;
      s = this.GetT();
      Diffl = s.length;
      OldSelStart = this.GetSelStart();
      if (s === "") return;
      if (pas.System.Pos("-",s) === 1) {
        pas.System.Delete({get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }},1,1);
        neg = "-";
      } else neg = "";
      if (pas.System.Pos(pas.SysUtils.FormatSettings.GetDecimalSeparator(),s) > 0) {
        s = pas.System.Copy(s,pas.System.Pos(pas.SysUtils.FormatSettings.GetDecimalSeparator(),s),255)}
       else s = "";
      d = pas.System.Trunc(Math.abs(this.GetFloat()));
      if (this.FAutoThousandSeparator) {
        si = pas.SysUtils.Format("%n",[d])}
       else si = pas.SysUtils.Format("%f",[d]);
      si = pas.System.Copy(si,1,pas.System.Pos(pas.SysUtils.FormatSettings.GetDecimalSeparator(),si) - 1);
      OldPrec = this.FPrecision;
      this.FPrecision = 0;
      this.FBlockChange = this.GetT() !== (this.FPrefix + neg + si + s + this.FSuffix);
      if (this.FBlockChange) {
        pas["WEBLib.StdCtrls"].TCustomEdit.SetText.call(this,this.FPrefix + neg + si + s + this.FSuffix);
      };
      this.FBlockChange = false;
      this.FPrecision = OldPrec;
      Diffl = this.GetT().length - Diffl;
      this.SetSelStart(OldSelStart + Diffl);
      this.SetSelLength(0);
    };
    this.GetFloat = function () {
      var Result = 0.0;
      var s = "";
      var d = 0.0;
      var e = 0;
      Result = 0;
      var $tmp1 = this.FEditType$1;
      if ($tmp1 === $mod.TTMSFNCEditType.etHex) {
        if (this.GetT() !== "") Result = $impl.HexToInt(this.GetT())}
       else if ($tmp1 === $mod.TTMSFNCEditType.etString) {
        s = this.GetT();
        if (pas.SysUtils.FormatSettings.GetDecimalSeparator() === ",") s = pas.SysUtils.StringReplace(s,",",".",rtl.createSet(pas.SysUtils.TStringReplaceFlag.rfReplaceAll));
        pas.System.val$8(s,{get: function () {
            return d;
          }, set: function (v) {
            d = v;
          }},{get: function () {
            return e;
          }, set: function (v) {
            e = v;
          }});
        Result = d;
      } else if (($tmp1 === $mod.TTMSFNCEditType.etNumeric) || ($tmp1 === $mod.TTMSFNCEditType.etSignedNumeric) || ($tmp1 === $mod.TTMSFNCEditType.etFloat) || ($tmp1 === $mod.TTMSFNCEditType.etSignedFloat)) {
        if (this.GetT() !== "") {
          s = this.GetT();
          if (s === "-") {
            Result = 0}
           else Result = this.EStrToFloat(s);
        }}
       else if ($tmp1 === $mod.TTMSFNCEditType.etMoney) if (this.GetT() !== "") {
        s = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.StripThousandSep(this.GetT());
        if (pas.System.Pos(pas.SysUtils.FormatSettings.GetDecimalSeparator(),s) === s.length) pas.System.Delete({get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }},pas.System.Pos(pas.SysUtils.FormatSettings.GetDecimalSeparator(),s),1);
        if ((s === "") || (s === "-")) {
          Result = 0}
         else Result = this.EStrToFloat(s);
      };
      return Result;
    };
    this.SetFloat = function (Value) {
      var s = "";
      var $tmp1 = this.FEditType$1;
      if ($tmp1 === $mod.TTMSFNCEditType.etHex) {
        this.SetT(pas.SysUtils.IntToHex(pas.System.Trunc(Value),0))}
       else if (($tmp1 === $mod.TTMSFNCEditType.etNumeric) || ($tmp1 === $mod.TTMSFNCEditType.etSignedNumeric)) {
        if (this.FPrecision >= 0) {
          this.SetT(pas.SysUtils.Format("%." + pas.SysUtils.IntToStr(this.FPrecision) + "n",[Value]))}
         else this.SetT(pas.SysUtils.Format("%g",[Value]))}
       else if (($tmp1 === $mod.TTMSFNCEditType.etFloat) || ($tmp1 === $mod.TTMSFNCEditType.etSignedFloat) || ($tmp1 === $mod.TTMSFNCEditType.etString)) {
        if (this.FPrecision >= 0) {
          s = pas.SysUtils.Format("%." + pas.SysUtils.IntToStr(this.FPrecision) + "f",[Value]);
          this.SetT(s);
        } else this.SetT(pas.SysUtils.Format("%g",[Value]))}
       else if ($tmp1 === $mod.TTMSFNCEditType.etMoney) {
        if (this.FPrecision >= 0) {
          this.SetT(pas.SysUtils.Format("%." + pas.SysUtils.IntToStr(this.FPrecision) + "f",[Value]))}
         else this.SetT(pas.SysUtils.Format("%g",[Value]));
        this.AutoSeparators();
      };
      this.SetModified(true);
    };
    this.SetAutoThousandSeparator = function (Value) {
      this.FAutoThousandSeparator = Value;
      if (this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etNumeric,$mod.TTMSFNCEditType.etSignedNumeric,$mod.TTMSFNCEditType.etMoney,$mod.TTMSFNCEditType.etFloat,$mod.TTMSFNCEditType.etSignedFloat)) this.AutoSeparators();
    };
    this.SetPrecision = function (Value) {
      var at = 0;
      if ((this.FPrecision !== Value) && (this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etFloat,$mod.TTMSFNCEditType.etSignedFloat,$mod.TTMSFNCEditType.etMoney,$mod.TTMSFNCEditType.etString))) {
        this.FPrecision = Value;
        if ((this.GetT() !== "") || !this.FAllowNumericNullValue) {
          at = $impl.IsType(this.GetT());
          if (at in rtl.createSet($impl.TTMSFNCEditAutoType.atFloat,$impl.TTMSFNCEditAutoType.atNumeric)) {
            this.SetFloat(this.GetFloat())}
           else this.SetFloat(0.0);
        };
      };
    };
    this.SetPrecisionDisplay = function (Value) {
      if (this.FPrecisionDisplay !== Value) {
        this.FPrecisionDisplay = Value;
        this.SetFloat(this.GetFloat());
      };
    };
    this.EStrToFloat = function (s) {
      var Result = 0.0;
      Result = 0;
      if (pas.System.Pos(pas.SysUtils.FormatSettings.GetThousandSeparator(),s) > 0) s = pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.StripThousandSep(s);
      if ((this.FPrecision > 0) && (s.length > this.FPrecision)) if (s.charAt(s.length - this.FPrecision - 1) === pas.SysUtils.FormatSettings.GetThousandSeparator().charAt(-1)) s = rtl.setCharAt(s,s.length - this.FPrecision - 1,pas.SysUtils.FormatSettings.GetDecimalSeparator().charAt(-1));
      try {
        pas.SysUtils.TryStrToFloat(s,{get: function () {
            return Result;
          }, set: function (v) {
            Result = v;
          }});
      } catch ($e) {
        Result = 0;
      };
      return Result;
    };
    this.GetInt = function () {
      var Result = 0;
      Result = 0;
      var $tmp1 = this.FEditType$1;
      if ($tmp1 === $mod.TTMSFNCEditType.etHex) {
        if (this.GetT() !== "") Result = $impl.HexToInt(this.GetT())}
       else if (($tmp1 === $mod.TTMSFNCEditType.etSignedNumeric) || ($tmp1 === $mod.TTMSFNCEditType.etNumeric) || ($tmp1 === $mod.TTMSFNCEditType.etSignedFloat) || ($tmp1 === $mod.TTMSFNCEditType.etFloat)) {
        Result = $impl.ValStr(this.GetT())}
       else if ($tmp1 === $mod.TTMSFNCEditType.etMoney) Result = $impl.ValStr(pas["WEBLib.TMSFNCUtils"].TTMSFNCUtils.StripThousandSep(this.GetT()));
      return Result;
    };
    this.SetInt = function (Value) {
      var $tmp1 = this.FEditType$1;
      if ($tmp1 === $mod.TTMSFNCEditType.etHex) {
        this.SetT(pas.SysUtils.IntToHex(Value,0))}
       else if (($tmp1 === $mod.TTMSFNCEditType.etSignedNumeric) || ($tmp1 === $mod.TTMSFNCEditType.etNumeric) || ($tmp1 === $mod.TTMSFNCEditType.etSignedFloat) || ($tmp1 === $mod.TTMSFNCEditType.etFloat)) {
        this.SetT(pas.SysUtils.IntToStr(Value))}
       else if ($tmp1 === $mod.TTMSFNCEditType.etMoney) {
        this.SetT(pas.SysUtils.IntToStr(Value));
        this.AutoSeparators();
      };
      this.SetModified(true);
    };
    this.SetEditType$1 = function (Value) {
      var at = 0;
      if (this.FEditType$1 !== Value) {
        this.FEditType$1 = Value;
        if (pas.Classes.TComponentStateItem.csLoading in this.FComponentState) return;
        if ((this.GetT() !== "") || !this.FAllowNumericNullValue) {
          at = $impl.IsType(this.GetT());
          var $tmp1 = this.FEditType$1;
          if ($tmp1 === $mod.TTMSFNCEditType.etHex) {
            if (!(at in rtl.createSet($impl.TTMSFNCEditAutoType.atNumeric,$impl.TTMSFNCEditAutoType.atHex))) this.SetInt(0)}
           else if (($tmp1 === $mod.TTMSFNCEditType.etNumeric) || ($tmp1 === $mod.TTMSFNCEditType.etSignedNumeric)) {
            if (at !== $impl.TTMSFNCEditAutoType.atNumeric) this.SetInt(0)}
           else if (($tmp1 === $mod.TTMSFNCEditType.etFloat) || ($tmp1 === $mod.TTMSFNCEditType.etSignedFloat) || ($tmp1 === $mod.TTMSFNCEditType.etMoney)) if (!(at in rtl.createSet($impl.TTMSFNCEditAutoType.atFloat,$impl.TTMSFNCEditAutoType.atNumeric))) this.SetFloat(0.0);
        };
        if ((pas.Classes.TComponentStateItem.csDesigning in this.FComponentState) && !(pas.Classes.TComponentStateItem.csLoading in this.FComponentState) && ((this.FEditType$1 === $mod.TTMSFNCEditType.etFloat) || (this.FEditType$1 === $mod.TTMSFNCEditType.etSignedFloat)) && (this.FPrecision === 0)) this.SetPrecision(2);
      };
    };
    this.IsLookupListVisible = function () {
      var Result = false;
      Result = (this.FLookupList != null) && this.FLookupList.FIsOpen;
      return Result;
    };
    this.GetAllowFocus = function () {
      var Result = false;
      Result = this.FAllowFocus;
      return Result;
    };
    this.SetAllowFocus = function (Value) {
      this.FAllowFocus = Value;
    };
    this.GetVersionNumber = function (AMaj, AMin, ARel, ABld) {
      var Result = "";
      Result = "";
      return Result;
    };
    this.Validate = function (AValue) {
      var Result = false;
      var i = 0;
      var kch = "";
      var isValid = false;
      pas["WEBLib.StdCtrls"].TCustomEdit.Validate.apply(this,arguments);
      Result = true;
      for (var $l1 = 1, $end2 = AValue.length; $l1 <= $end2; $l1++) {
        i = $l1;
        kch = AValue.charAt(i - 1);
        isValid = true;
        var $tmp3 = this.FEditType$1;
        if ($tmp3 === $mod.TTMSFNCEditType.etNumeric) {
          if (!pas["WEBLib.TMSFNCTypes"].CharIsNumber(kch)) isValid = false;
        } else if ($tmp3 === $mod.TTMSFNCEditType.etFloat) {
          if (!(pas["WEBLib.TMSFNCTypes"].CharIsNumber(kch) || (kch === pas.SysUtils.FormatSettings.GetDecimalSeparator()))) isValid = false;
        } else if (($tmp3 === $mod.TTMSFNCEditType.etSignedFloat) || ($tmp3 === $mod.TTMSFNCEditType.etSignedNumeric)) {
          if (!(pas["WEBLib.TMSFNCTypes"].CharInArray(kch,["-"]) || pas["WEBLib.TMSFNCTypes"].CharIsNumber(kch) || (kch === pas.SysUtils.FormatSettings.GetDecimalSeparator()))) isValid = false;
        } else if ($tmp3 === $mod.TTMSFNCEditType.etMoney) {
          if (!(pas["WEBLib.TMSFNCTypes"].CharIsNumber(kch) || (kch === pas.SysUtils.FormatSettings.GetDecimalSeparator()) || (kch === pas.SysUtils.FormatSettings.GetThousandSeparator()))) isValid = false;
        } else if ($tmp3 === $mod.TTMSFNCEditType.etHex) {
          if (!pas["WEBLib.TMSFNCTypes"].CharIsHex(kch)) isValid = false;
        } else if ($tmp3 === $mod.TTMSFNCEditType.etAlphaNumeric) {
          if (!pas["WEBLib.TMSFNCTypes"].CharIsLetterOrNumber(kch)) isValid = false;
        };
        if (!isValid) {
          Result = false;
          break;
        };
      };
      return Result;
    };
    this.IsCustomEditor = function () {
      var Result = false;
      Result = true;
      return Result;
    };
    this.GetVersion = function () {
      var Result = "";
      Result = this.$class.GetVersionNumber(1,0,2,11);
      return Result;
    };
    this.DoLookupFormTimer = function (Sender) {
      if (!(this.FLookupList != null) || !(this.FLookupListBox != null)) {
        this.FLookupFormTimer.SetEnabled(false);
        return;
      };
      if (this.FLookupList.FPopupForm != null) this.FLookupList.FPopupForm.ApplyPlacement();
      if (!this.FLookupList.FIsOpen || (!this.IsFocused() && !this.FLookupList.IsFocused() && !this.FLookupListBox.Focused())) {
        this.FLookupList.SetIsOpen(false);
        this.FLookupFormTimer.SetEnabled(false);
      };
    };
    this.GetT = function () {
      var Result = "";
      var s = "";
      s = pas["WEBLib.StdCtrls"].TCustomEdit.GetText.call(this);
      if ((this.FPrefix !== "") && (pas.System.Pos(pas.SysUtils.UpperCase(this.FPrefix),pas.SysUtils.UpperCase(s)) === 1)) pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},1,this.FPrefix.length);
      if (this.FSuffix !== "") pas.System.Delete({get: function () {
          return s;
        }, set: function (v) {
          s = v;
        }},(s.length - this.FSuffix.length) + 1,this.FSuffix.length);
      Result = s;
      return Result;
    };
    this.GetCaretPosition = function () {
      var Result = 0;
      Result = this.GetSelStart();
      return Result;
    };
    this.CleanupLookupList = function () {
      var I = 0;
      var obj = null;
      if (!(this.FLookupListBoxItems != null)) return;
      for (var $l1 = 0, $end2 = this.FLookupListBoxItems.GetCount() - 1; $l1 <= $end2; $l1++) {
        I = $l1;
        obj = rtl.getObject(this.FLookupListBoxItems.Get(I));
        if (obj != null) obj = rtl.freeLoc(obj);
      };
      this.FLookupListBoxItems.Clear();
    };
    this.SetCaretPosition = function (ACaretPosition) {
      this.SetSelStart(ACaretPosition);
      this.SetSelLength(0);
    };
    this.SetT = function (Value) {
      var fmt = "";
      var f = 0.0;
      var v = "";
      v = Value;
      if (!((v === "") && this.FAllowNumericNullValue)) {
        var $tmp1 = this.FEditType$1;
        if ($tmp1 === $mod.TTMSFNCEditType.etFloat) {
          if (!($impl.IsType(v) in rtl.createSet($impl.TTMSFNCEditAutoType.atFloat,$impl.TTMSFNCEditAutoType.atNumeric))) v = "0"}
         else if ($tmp1 === $mod.TTMSFNCEditType.etMoney) {
          if (!($impl.IsType(v) in rtl.createSet($impl.TTMSFNCEditAutoType.atFloat,$impl.TTMSFNCEditAutoType.atNumeric))) v = "0"}
         else if ($tmp1 === $mod.TTMSFNCEditType.etHex) {
          if (!($impl.IsType(v) in rtl.createSet($impl.TTMSFNCEditAutoType.atHex,$impl.TTMSFNCEditAutoType.atNumeric))) v = "0"}
         else if ($tmp1 === $mod.TTMSFNCEditType.etNumeric) if (!($impl.IsType(v) in rtl.createSet($impl.TTMSFNCEditAutoType.atNumeric))) v = "0";
        if (this.FPrecisionDisplay === $mod.TTMSFNCEditPrecisionDisplay.pdNormal) {
          if (((this.FPrecision >= 0) || (this.FEditType$1 === $mod.TTMSFNCEditType.etMoney)) && (v !== "")) {
            if ((this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etMoney)) && (this.FPrecision >= 0)) {
              fmt = "%." + pas.SysUtils.IntToStr(this.FPrecision) + "n";
              v = pas.SysUtils.Format(fmt,[this.EStrToFloat(v)]);
            };
            if (this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etFloat,$mod.TTMSFNCEditType.etSignedFloat)) {
              fmt = "%." + pas.SysUtils.IntToStr(this.FPrecision) + "f";
              f = this.EStrToFloat(v);
              v = pas.SysUtils.Format(fmt,[f]);
            };
          };
        } else {
          if (this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etFloat,$mod.TTMSFNCEditType.etMoney,$mod.TTMSFNCEditType.etSignedFloat)) {
            f = this.EStrToFloat(v);
            v = pas.SysUtils.Format("%g",[f]);
          };
        };
      };
      if (this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etHex,$mod.TTMSFNCEditType.etUppercase)) {
        v = pas.SysUtils.UpperCase(v)}
       else if (this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etLowerCase)) v = pas.SysUtils.LowerCase(v);
      pas["WEBLib.StdCtrls"].TCustomEdit.SetText.call(this,this.FPrefix + v + this.FSuffix);
      this.SetModified(false);
    };
    this.InsertText = function (AText) {
      var TmpS = "";
      if (this.FReadOnly) return;
      TmpS = this.GetT();
      pas.System.Delete({get: function () {
          return TmpS;
        }, set: function (v) {
          TmpS = v;
        }},this.GetSelStart() + 1,this.GetSelLength());
      pas.System.Insert(AText,{get: function () {
          return TmpS;
        }, set: function (v) {
          TmpS = v;
        }},this.GetSelStart() + 1);
      if ((this.FMaxLength <= 0) || (TmpS.length <= this.FMaxLength)) {
        this.SetT(TmpS);
        this.SetCaretPosition(this.GetSelStart() + AText.length);
      };
      this.SetSelLength(0);
    };
    this.ListKeyUp = function (Sender, Key, Shift) {
      if (Key.get() === 13) this.DoneLookup();
      if ((Key.get() === 9) && this.FLookup.FAcceptOnTab) this.DoneLookup();
    };
    this.ListMouseUp = function (Sender, Button, Shift, X, Y) {
      this.DoneLookup();
    };
    this.KeyPress = function (Key) {
      var $Self = this;
      var s = "";
      var cl = "";
      var st = "";
      var stmin = "";
      var allowclip = false;
      var at = 0;
      var ismod = false;
      var d = 0;
      var kch = "";
      function EatKey() {
        if (!($Self.FKeyDown in rtl.createSet(38,40))) Key.set("\x00");
      };
      if (!($Self.FLookupListBox != null)) {
        pas["WEBLib.StdCtrls"].TCustomEdit.KeyPress.apply($Self,arguments);
        return;
      };
      s = Key.get();
      kch = Key.get();
      if (($Self.FKeyDown === 18) || ($Self.FKeyDown === 27)) {
        $Self.CloseLookup();
      };
      if (($Self.FKeyDown === 8) && ($Self.FPrefix !== "")) if (($Self.GetSelStart() <= $Self.FPrefix.length) && ($Self.GetSelLength() === 0)) return;
      if (($Self.FLengthLimit > 0) && ($Self.FixedLength($Self.GetT()) > $Self.FLengthLimit) && ($Self.GetSelLength() === 0) && ($Self.GetSelStart() < $Self.DecimalPos()) && ($Self.FKeyDown !== 8) && ($Self.FKeyDown !== pas.SysUtils.FormatSettings.GetDecimalSeparator().charCodeAt(0 - 1)) && !$Self.AllowMin(kch)) {
        EatKey();
        return;
      };
      if ($Self.FKeyDown in rtl.createSet(36,35,9,37,39,33,34,46,8)) {
        if ($Self.FKeyDown === 8) {
          s = $Self.GetT();
          if ($Self.GetSelLength() === 0) {
            pas.System.Delete({get: function () {
                return s;
              }, set: function (v) {
                s = v;
              }},$Self.GetSelStart() - $Self.FPrefix.length,1)}
           else pas.System.Delete({get: function () {
              return s;
            }, set: function (v) {
              s = v;
            }},Math.max(1,$Self.GetSelStart() - $Self.FPrefix.length),$Self.GetSelLength());
          ismod = (s !== $Self.GetT()) || $Self.FIsModified;
          $Self.SetModified(ismod);
          pas["WEBLib.StdCtrls"].TCustomEdit.KeyPress.apply($Self,arguments);
          if ($Self.FEditType$1 === $mod.TTMSFNCEditType.etMoney) $Self.AutoSeparators();
          if (($Self.GetT() === "") && ((s !== "") || ismod)) {
            $Self.Change();
          };
          $Self.SetModified(ismod);
          $Self.UpdateLookup();
          return;
        } else {
          if ($Self.FKeyDown in rtl.createSet(36,35,9,37,39,33,34)) {
            if ($Self.FAutoComplete && ($Self.GetSelLength() > 0) && $Self.IsLookupListVisible()) $Self.CloseLookup();
          };
          st = $Self.GetT();
          pas["WEBLib.StdCtrls"].TCustomEdit.KeyPress.apply($Self,arguments);
          if ($Self.GetT() !== st) $Self.SetModified(true);
        };
        return;
      };
      if (($Self.FKeyDown === 13) && $Self.IsLookupListVisible()) {
        $Self.DoneLookup();
        return;
      };
      if ($Self.FKeyDown in rtl.createSet(9,13,27)) {
        pas["WEBLib.StdCtrls"].TCustomEdit.KeyPress.apply($Self,arguments);
        return;
      };
      if (($Self.FKeyDown === 36) && $Self.IsLookupListVisible()) {
        if ($Self.FLookupListBox.FItems.GetCount() > 0) {
          $Self.FLookupListBox.SetItemIndex(0)}
         else $Self.FLookupListBox.SetItemIndex(-1);
        return;
      };
      if (($Self.FKeyDown === 35) && $Self.IsLookupListVisible()) {
        if ($Self.FLookupListBox.FItems.GetCount() > 0) {
          $Self.FLookupListBox.SetItemIndex($Self.FLookupListBox.FItems.GetCount() - 1)}
         else $Self.FLookupListBox.SetItemIndex(-1);
        return;
      };
      if (($Self.FKeyDown === 34) && $Self.IsLookupListVisible()) {
        if ($Self.FLookupListBox.FItems.GetCount() > 0) {
          if (($Self.FLookupListBox.GetItemIndex() + $Self.FLookup.FDisplayCount) < $Self.FLookupListBox.FItems.GetCount()) {
            $Self.FLookupListBox.SetItemIndex($Self.FLookupListBox.GetItemIndex() + $Self.FLookup.FDisplayCount)}
           else $Self.FLookupListBox.SetItemIndex($Self.FLookupListBox.FItems.GetCount() - 1);
        } else $Self.FLookupListBox.SetItemIndex(-1);
        return;
      };
      if (($Self.FKeyDown === 33) && $Self.IsLookupListVisible()) {
        if ($Self.FLookupListBox.FItems.GetCount() > 0) {
          if ($Self.FLookupListBox.GetItemIndex() > $Self.FLookup.FDisplayCount) {
            $Self.FLookupListBox.SetItemIndex($Self.FLookupListBox.GetItemIndex() - $Self.FLookup.FDisplayCount)}
           else $Self.FLookupListBox.SetItemIndex(0);
        } else $Self.FLookupListBox.SetItemIndex(-1);
        return;
      };
      if (($Self.FKeyDown === 38) && $Self.IsLookupListVisible()) {
        if ($Self.FLookupListBox.FItems.GetCount() > 0) {
          if ($Self.FLookupListBox.GetItemIndex() > 0) $Self.FLookupListBox.SetItemIndex($Self.FLookupListBox.GetItemIndex() - 1);
        } else $Self.FLookupListBox.SetItemIndex(-1);
        return;
      };
      if (($Self.FKeyDown === 40) && $Self.IsLookupListVisible()) {
        if ($Self.FLookupListBox.FItems.GetCount() > 0) {
          if (($Self.FLookupListBox.GetItemIndex() + 1) < $Self.FLookupListBox.FItems.GetCount()) $Self.FLookupListBox.SetItemIndex($Self.FLookupListBox.GetItemIndex() + 1);
        } else $Self.FLookupListBox.SetItemIndex(-1);
        return;
      };
      if (($Self.FKeyDown === 27) && $Self.IsLookupListVisible()) {
        $Self.CloseLookup();
        return;
      };
      if (($Self.FKeyDown === 46) && ($Self.GetSelStart() >= $Self.FPrefix.length)) {
        s = $Self.GetT();
        if ($Self.GetSelLength() === 0) {
          pas.System.Delete({get: function () {
              return s;
            }, set: function (v) {
              s = v;
            }},($Self.GetSelStart() - $Self.FPrefix.length) + 1,1)}
         else pas.System.Delete({get: function () {
            return s;
          }, set: function (v) {
            s = v;
          }},($Self.GetSelStart() - $Self.FPrefix.length) + 1,$Self.GetSelLength());
        if (($Self.FLengthLimit > 0) && (($Self.FixedLength(s) - 1) > $Self.FLengthLimit)) {
          EatKey();
          return;
        };
        $Self.SetModified(true);
      };
      if (($Self.FMaxLength > 0) && ($Self.GetSelLength() === 0) && ($Self.GetT().length >= $Self.FMaxLength)) return;
      if (($Self.FPrefix !== "") && ($Self.GetSelStart() < $Self.FPrefix.length)) $Self.SetSelStart($Self.FPrefix.length);
      if (rtl.eqSet($Self.FShiftState,rtl.createSet(pas["WEBLib.Controls"].TShiftState$a.ssCtrl)) && (kch === "\x16")) {
        cl = pas["WEBLib.TMSFNCUtils"].TTMSFNCClipBoard.GetText();
        at = $impl.IsType(cl);
        allowclip = true;
        var $tmp1 = $Self.FEditType$1;
        if ($tmp1 === $mod.TTMSFNCEditType.etNumeric) {
          allowclip = at === $impl.TTMSFNCEditAutoType.atNumeric}
         else if ($tmp1 === $mod.TTMSFNCEditType.etSignedNumeric) {
          allowclip = at === $impl.TTMSFNCEditAutoType.atNumeric}
         else if (($tmp1 === $mod.TTMSFNCEditType.etFloat) || ($tmp1 === $mod.TTMSFNCEditType.etSignedFloat)) {
          allowclip = at === $impl.TTMSFNCEditAutoType.atFloat}
         else if ($tmp1 === $mod.TTMSFNCEditType.etUppercase) {
          cl = pas.SysUtils.UpperCase(cl)}
         else if ($tmp1 === $mod.TTMSFNCEditType.etMixedCase) {
          cl = $impl.ShiftCase(cl)}
         else if ($tmp1 === $mod.TTMSFNCEditType.etLowerCase) {
          cl = pas.SysUtils.LowerCase(cl)}
         else if ($tmp1 === $mod.TTMSFNCEditType.etMoney) {
          allowclip = at === $impl.TTMSFNCEditAutoType.atFloat}
         else if ($tmp1 === $mod.TTMSFNCEditType.etHex) allowclip = at in rtl.createSet($impl.TTMSFNCEditAutoType.atHex,$impl.TTMSFNCEditAutoType.atNumeric);
        if (allowclip) $Self.InsertText(cl);
        EatKey();
        return;
      };
      var $tmp2 = $Self.FEditType$1;
      if ($tmp2 === $mod.TTMSFNCEditType.etString) {}
      else if ($tmp2 === $mod.TTMSFNCEditType.etNumeric) {
        if (!pas["WEBLib.TMSFNCTypes"].CharIsNumber(kch)) EatKey();
      } else if ($tmp2 === $mod.TTMSFNCEditType.etFloat) {
        if (!(pas["WEBLib.TMSFNCTypes"].CharIsNumber(kch) || (kch === pas.SysUtils.FormatSettings.GetDecimalSeparator()))) EatKey();
        if ((pas.System.Pos(pas.SysUtils.FormatSettings.GetDecimalSeparator(),$Self.GetT()) > 0) && (Key.get() === pas.SysUtils.FormatSettings.GetDecimalSeparator())) EatKey();
      } else if (($tmp2 === $mod.TTMSFNCEditType.etSignedFloat) || ($tmp2 === $mod.TTMSFNCEditType.etSignedNumeric)) {
        if (!(pas["WEBLib.TMSFNCTypes"].CharInArray(kch,["-"]) || pas["WEBLib.TMSFNCTypes"].CharIsNumber(kch) || (kch === pas.SysUtils.FormatSettings.GetDecimalSeparator()))) EatKey();
        if ((pas.System.Pos(pas.SysUtils.FormatSettings.GetDecimalSeparator(),$Self.GetT()) > 0) && (Key.get() === pas.SysUtils.FormatSettings.GetDecimalSeparator())) EatKey();
        if ((pas.System.Pos("-",$Self.GetT()) > 0) && (Key.get() === "-") && !($Self.GetSelLength() === $Self.GetT().length)) EatKey();
      } else if ($tmp2 === $mod.TTMSFNCEditType.etUppercase) {
        s = pas.SysUtils.UpperCase(s);
        kch = s.charAt(0);
        Key.set(kch);
      } else if ($tmp2 === $mod.TTMSFNCEditType.etLowerCase) {
        s = pas.SysUtils.LowerCase(s);
        kch = s.charAt(0);
        Key.set(kch);
      } else if ($tmp2 === $mod.TTMSFNCEditType.etMoney) {
        if (!(pas["WEBLib.TMSFNCTypes"].CharIsNumber(kch) || (kch === pas.SysUtils.FormatSettings.GetDecimalSeparator()) || (kch === pas.SysUtils.FormatSettings.GetThousandSeparator()))) EatKey();
      } else if ($tmp2 === $mod.TTMSFNCEditType.etHex) {
        if (!pas["WEBLib.TMSFNCTypes"].CharIsHex(kch)) EatKey();
      } else if ($tmp2 === $mod.TTMSFNCEditType.etAlphaNumeric) {
        if (!pas["WEBLib.TMSFNCTypes"].CharIsLetterOrNumber(kch)) EatKey();
      } else if ($tmp2 === $mod.TTMSFNCEditType.etValidChars) {
        if ($Self.FValidChars !== "") if (pas.System.Pos(pas.SysUtils.UpperCase(s),pas.SysUtils.UpperCase($Self.FValidChars)) === 0) EatKey();
      };
      s = $Self.GetT();
      pas["WEBLib.StdCtrls"].TCustomEdit.KeyPress.apply($Self,arguments);
      if ($Self.GetT() !== s) $Self.SetModified(true);
      if ($Self.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etMoney,$mod.TTMSFNCEditType.etSignedFloat,$mod.TTMSFNCEditType.etSignedNumeric)) {
        stmin = $Self.GetT();
        if (pas.System.Pos("-",stmin) > 1) {
          pas.System.Delete({get: function () {
              return stmin;
            }, set: function (v) {
              stmin = v;
            }},pas.System.Pos("-",stmin),1);
          $Self.SetT("-" + stmin);
        };
      };
      if ($Self.FEditType$1 === $mod.TTMSFNCEditType.etMoney) $Self.AutoSeparators();
      if ($Self.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etFloat,$mod.TTMSFNCEditType.etSignedFloat,$mod.TTMSFNCEditType.etMoney)) {
        d = $Self.GetT().length - s.length;
        if (d > 1) $Self.SetCaretPosition($Self.GetCaretPosition() + d);
      };
      if (rtl.eqSet($Self.FShiftState,{})) $Self.UpdateLookup();
    };
    this.KeyDown = function (Key, Shift) {
      pas["WEBLib.Controls"].TControl.KeyDown.apply(this,arguments);
      this.FKeyDown = Key.get();
      this.FShiftState = rtl.refSet(Shift);
    };
    this.KeyUp = function (Key, Shift) {
      var oldSelStart = 0;
      var kch = "";
      pas["WEBLib.Controls"].TControl.KeyUp.apply(this,arguments);
      kch = String.fromCharCode(Key.get());
      if ((Key.get() === 9) && this.IsLookupListVisible() && this.FLookup.FAcceptOnTab) this.DoneLookup();
      if (this.FEditType$1 === $mod.TTMSFNCEditType.etMixedCase) {
        oldSelStart = this.GetSelStart();
        this.SetT($impl.ShiftCase(this.GetT()));
        this.SetSelStart(oldSelStart);
      };
      if ((kch !== "") && (kch !== "\b")) this.UpdateAutoComplete();
    };
    this.DoLookupNeedData = function (Value, List, ItemIndex) {
      if (this.FOnLookupNeedData != null) this.FOnLookupNeedData(this,Value,List,ItemIndex);
    };
    this.DoExit = function () {
      var TT = "";
      var OldModified = false;
      pas["WEBLib.Controls"].TControl.DoExit.call(this);
      if (pas.Classes.TComponentStateItem.csLoading in this.FComponentState) return;
      if ((this.FPrecision >= 0) && (this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etFloat,$mod.TTMSFNCEditType.etSignedFloat,$mod.TTMSFNCEditType.etMoney))) {
        if ((this.GetT() !== "") || !this.FAllowNumericNullValue) {
          OldModified = this.FIsModified;
          this.SetFloat(this.GetFloat());
          this.SetModified(OldModified);
        };
      };
      if ((this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etNumeric,$mod.TTMSFNCEditType.etSignedNumeric)) && (this.GetT() === "") && !this.FAllowNumericNullValue) this.SetT("0");
      if ((this.FEditType$1 in rtl.createSet($mod.TTMSFNCEditType.etFloat,$mod.TTMSFNCEditType.etSignedFloat,$mod.TTMSFNCEditType.etMoney)) && (this.GetT() === "") && !this.FAllowNumericNullValue) this.SetFloat(0.0);
      TT = pas.SysUtils.Trim(this.GetT());
      if (this.FLookup.FEnabled && this.FLookup.FHistory && (TT !== "")) {
        if (this.FLookup.FDisplayList.IndexOf(TT) === -1) this.FLookup.FDisplayList.Add(TT);
      };
    };
    this.LookupListbox = function () {
      var Result = null;
      Result = this.FLookupListBox;
      return Result;
    };
    this.LookupList = function () {
      var Result = null;
      Result = this.FLookupList;
      return Result;
    };
    this.CanFocus = function () {
      var Result = false;
      Result = pas["WEBLib.Controls"].TControl.CanFocus.call(this);
      Result = Result && this.GetAllowFocus();
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.Controls"].TControl.Create$1.apply(this,arguments);
      this.FAutoClose = true;
      this.FAllowFocus = true;
      this.FLookupFormTimer = pas["WEBLib.ExtCtrls"].TTimer.$create("Create$1",[this]);
      this.FLookupFormTimer.FOnTimer = rtl.createCallback(this,"DoLookupFormTimer");
      this.FLookupFormTimer.SetEnabled(false);
      this.FLookupFormTimer.SetInterval(1);
      this.FAutoThousandSeparator = true;
      this.FLengthLimit = 0;
      this.FAutoComplete = false;
      this.FLookup = $mod.TTMSFNCEditLookupSettings.$create("Create$1");
      this.FLookupListBoxItems = $mod.TTMSFNCLookupList.$create("Create$1");
      this.FLookupList = pas["WEBLib.TMSFNCPopup"].TTMSFNCPopup.$create("Create$1",[this]);
      this.FLookupList.SetPlacementControl(this);
      this.FLookupList.FStaysOpen = true;
      this.FLookupListBox = pas["WEBLib.StdCtrls"].TListBox.$create("Create$1",[this]);
      this.FLookupListBox.SetItemHeight(18);
      this.FLookupListBox.FOnKeyUp = rtl.createCallback(this,"ListKeyUp");
      this.FLookupListBox.FOnMouseUp = rtl.createCallback(this,"ListMouseUp");
      this.FLookupListBox.SetVisible(false);
      this.FLookupListBox.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
      this.SetAutoSize(false);
      this.FLookupList.SetContentControl(this.FLookupListBox);
      this.FLookupList.FFocusedControl = this;
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FLookupFormTimer");
      rtl.free(this,"FLookup");
      this.CleanupLookupList();
      if (this.FLookupListBox != null) {
        rtl.free(this,"FLookupListBox");
        this.FLookupListBox = null;
      };
      rtl.free(this,"FLookupListBoxItems");
      if (this.FLookupList != null) {
        rtl.free(this,"FLookupList");
        this.FLookupList = null;
      };
      pas["WEBLib.Controls"].TCustomControl.Destroy.call(this);
    };
    this.DisplayLookup = function () {
      var i = 0;
      var cnt = 0;
      var mw = 0;
      var mh = 0;
      var tw = 0;
      var LookupText = "";
      var idx = 0;
      var obj = null;
      if (!this.FLookup.FEnabled || !(this.FLookupListBox != null)) return;
      mh = (18 * this.FLookup.FDisplayCount) + 4;
      this.FLookupListBox.SetParent(this);
      this.CleanupLookupList();
      this.FLookupListBox.FItems.Clear();
      for (var $l1 = 1, $end2 = this.FLookup.FDisplayList.GetCount(); $l1 <= $end2; $l1++) {
        i = $l1;
        obj = $mod.TTMSFNCLookupListBoxItem.$create("Create$1",[i - 1]);
        this.FLookupListBox.FItems.AddObject($impl.CleanString(this.FLookup.FDisplayList.Get(i - 1)),obj);
        this.FLookupListBoxItems.Add(obj);
      };
      idx = 0;
      this.DoLookupNeedData(LookupText,this.FLookupListBox.FItems,{get: function () {
          return idx;
        }, set: function (v) {
          idx = v;
        }});
      cnt = this.FLookupListBox.FItems.GetCount();
      if ((this.FLookup.FDisplayList.GetCount() > 0) && (this.FLookupListBox.FItems.GetCount() > 0)) this.FLookupListBox.SetItemIndex(idx);
      if (cnt < this.FLookup.FDisplayCount) mh = (cnt * 18) + 4;
      this.FLookupListBox.SetSorted(true);
      mw = 50;
      this.FLookupList.SetDropDownWidth(0);
      if (cnt > 0) {
        for (var $l3 = 1, $end4 = cnt; $l3 <= $end4; $l3++) {
          i = $l3;
          tw = 0;
          if (this.FLookupListBox.GetCanvas() != null) tw = Math.round(this.FLookupListBox.GetCanvas().TextWidth(this.FLookupListBox.FItems.Get(i - 1)));
          if (tw > mw) mw = tw;
        };
        mw = mw + 26;
      };
      if (this.FLookup.FWidth > 0) mw = this.FLookup.FWidth;
      if (this.FLookup.FHeight > 0) mh = this.FLookup.FHeight;
      if (cnt > 0) {
        this.FLookupList.SetDropDownWidth(Math.max(this.FLookup.FMinimumWidth,mw));
        this.FLookupList.SetDropDownHeight(Math.max(this.FLookup.FMinimumHeight,mh));
        if (this.FLookupList.HasPopupForm()) {
          this.FLookupListBox.SetParent(this.FLookupList.FPopupForm);
          this.FLookupList.FPopupForm.SetWidth(Math.round(this.FLookupList.FDropDownWidth));
          this.FLookupList.FPopupForm.SetHeight(Math.round(this.FLookupList.FDropDownHeight));
        };
        this.FLookupList.SetIsOpen(true);
        this.FLookupFormTimer.SetEnabled(this.FAutoClose);
      } else this.FLookupList.SetIsOpen(false);
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("AllowFocus",3,rtl.boolean,"GetAllowFocus","SetAllowFocus",{Default: true});
    $r.addProperty("Align",2,pas["WEBLib.Controls"].$rtti["TAlign"],"FAlign","SetAlign",{Default: pas["WEBLib.Controls"].TAlign.alNone});
    $r.addProperty("Alignment",2,pas.Classes.$rtti["TAlignment"],"FAlignment","SetAlignment");
    $r.addProperty("Anchors",2,pas["WEBLib.Controls"].$rtti["TAnchors"],"FAnchors","SetAnchors",{Default: rtl.createSet(pas["WEBLib.Controls"].TAnchorKind.akLeft,pas["WEBLib.Controls"].TAnchorKind.akTop)});
    $r.addProperty("AutoSelect",2,rtl.boolean,"FAutoSelect","SetAutoSelect");
    $r.addProperty("AutoSize",2,rtl.boolean,"FAutoSize","SetAutoSize");
    $r.addProperty("Hint",2,rtl.string,"FHint","SetHint");
    $r.addProperty("TextHint",2,rtl.string,"FTextHint","SetTextHint");
    $r.addProperty("BorderStyle",2,pas["WEBLib.Controls"].$rtti["TBorderStyle"],"FBorderStyle","SetBorderStyle",{Default: pas["WEBLib.Controls"].TBorderStyle.bsSingle});
    $r.addProperty("Color",2,pas["WEBLib.Graphics"].$rtti["TColor"],"FColor","SetColor");
    $r.addProperty("DoubleBuffered",0,rtl.boolean,"FDoubleBuffered","FDoubleBuffered",{Default: false});
    $r.addProperty("Enabled",2,rtl.boolean,"FEnabled","SetEnabled",{Default: true});
    $r.addProperty("Font",2,pas["WEBLib.Graphics"].$rtti["TFont"],"FFont","SetFont");
    $r.addProperty("HideSelection",2,rtl.boolean,"FHideSelection","SetHideSelection");
    $r.addProperty("MaxLength",2,rtl.longint,"FMaxLength","SetMaxLength");
    $r.addProperty("PasswordChar",2,rtl.char,"FPasswordChar","SetPasswordChar",{Default: "\x00"});
    $r.addProperty("ReadOnly",2,rtl.boolean,"FReadOnly","SetReadOnly",{Default: false});
    $r.addProperty("ShowHint",2,rtl.boolean,"FShowHint","SetShowHint",{Default: false});
    $r.addProperty("TabOrder",2,rtl.longint,"FTabOrder","SetTabOrder");
    $r.addProperty("TabStop",2,rtl.boolean,"FTabStop","SetTabStop",{Default: true});
    $r.addProperty("Visible",2,rtl.boolean,"FVisible","SetVisible",{Default: true});
    $r.addProperty("OnChange",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChange","FOnChange");
    $r.addProperty("OnClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnClick","FOnClick");
    $r.addProperty("OnDblClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnDblClick","FOnDblClick");
    $r.addProperty("OnEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnEnter","FOnEnter");
    $r.addProperty("OnExit",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnExit","FOnExit");
    $r.addProperty("OnKeyDown",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyDown","FOnKeyDown");
    $r.addProperty("OnKeyPress",0,pas["WEBLib.Controls"].$rtti["TKeyPressEvent"],"FOnKeyPress","FOnKeyPress");
    $r.addProperty("OnKeyUp",0,pas["WEBLib.Controls"].$rtti["TKeyEvent"],"FOnKeyUp","FOnKeyUp");
    $r.addProperty("OnMouseDown",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseDown","FOnMouseDown");
    $r.addProperty("OnMouseEnter",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseEnter","FOnMouseEnter");
    $r.addProperty("OnMouseLeave",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnMouseLeave","FOnMouseLeave");
    $r.addProperty("OnMouseMove",0,pas["WEBLib.Controls"].$rtti["TMouseMoveEvent"],"FOnMouseMove","FOnMouseMove");
    $r.addProperty("OnMouseUp",0,pas["WEBLib.Controls"].$rtti["TMouseEvent"],"FOnMouseUp","FOnMouseUp");
    $r.addProperty("Text",3,rtl.string,"GetT","SetT");
    $r.addProperty("Version",1,rtl.string,"GetVersion","");
    $r.addProperty("AutoComplete",0,rtl.boolean,"FAutoComplete","FAutoComplete",{Default: false});
    $r.addProperty("EditType",2,$mod.$rtti["TTMSFNCEditType"],"FEditType$1","SetEditType$1",{Default: $mod.TTMSFNCEditType.etString});
    $r.addProperty("Lookup",2,$mod.$rtti["TTMSFNCEditLookupSettings"],"FLookup","SetLookup");
    $r.addProperty("ValidChars",0,rtl.string,"FValidChars","FValidChars");
    $r.addProperty("AllowNumericNullValue",0,rtl.boolean,"FAllowNumericNullValue","FAllowNumericNullValue",{Default: false});
    $r.addProperty("AutoThousandSeparator",2,rtl.boolean,"FAutoThousandSeparator","SetAutoThousandSeparator",{Default: true});
    $r.addProperty("FullTextSearch",0,rtl.boolean,"FFullTextSearch","FFullTextSearch",{Default: false});
    $r.addProperty("LengthLimit",0,rtl.smallint,"FLengthLimit","FLengthLimit",{Default: 0});
    $r.addProperty("Precision",2,rtl.smallint,"FPrecision","SetPrecision",{Default: 0});
    $r.addProperty("PrecisionDisplay",2,$mod.$rtti["TTMSFNCEditPrecisionDisplay"],"FPrecisionDisplay","SetPrecisionDisplay",{Default: $mod.TTMSFNCEditPrecisionDisplay.pdNormal});
    $r.addProperty("OnLookupSelect",0,$mod.$rtti["TTMSFNCEditLookupSelectEvent"],"FOnLookupSelect","FOnLookupSelect");
    $r.addProperty("OnLookupIndexSelect",0,$mod.$rtti["TTMSFNCEditLookupIndexSelectEvent"],"FOnLookupIndexSelect","FOnLookupIndexSelect");
    $r.addProperty("OnLookupNeedData",0,$mod.$rtti["TTMSFNCEditLookupNeedDataEvent"],"FOnLookupNeedData","FOnLookupNeedData");
  });
  rtl.createClass($mod,"TTMSFNCEditButton",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FBlockDropDown = false;
      this.FPopup = null;
      this.FEdit = null;
      this.FButton = null;
      this.FPopupControl = null;
      this.FOnButtonClick = null;
      this.FModalPopup = false;
      this.FBitmap = null;
      this.FBitmapName = "";
      this.FButtonSize = 0;
      this.FBitmapContainer = null;
    };
    this.$final = function () {
      this.FPopup = undefined;
      this.FEdit = undefined;
      this.FButton = undefined;
      this.FPopupControl = undefined;
      this.FOnButtonClick = undefined;
      this.FBitmap = undefined;
      this.FBitmapContainer = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetPopupControl = function (Value) {
      this.FPopupControl = Value;
      this.FPopup.SetContentControl(this.FPopupControl);
    };
    this.GetText = function () {
      var Result = "";
      Result = this.FEdit.GetT();
      return Result;
    };
    this.SetText = function (Value) {
      this.FEdit.SetT(Value);
    };
    this.GetBitmapContainer = function () {
      var Result = null;
      Result = this.FBitmapContainer;
      return Result;
    };
    this.SetBitmap = function (Value) {
      this.FBitmap = Value;
      if (this.FButton != null) {
        this.FButton.FBitmaps.Clear();
        this.FButton.FBitmaps.AddBitmap(Value,1.0);
      };
    };
    this.SetBitmapContainer = function (Value) {
      this.FBitmapContainer = Value;
      if (this.FButton != null) this.FButton.SetBitmapContainer(Value);
    };
    this.SetBitmapName = function (Value) {
      this.FBitmapName = Value;
      if (this.FButton != null) {
        this.FButton.FBitmaps.Clear();
        this.FButton.FBitmaps.AddBitmapName(Value,1.0);
      };
    };
    this.SetButtonSize = function (Value) {
      this.FButtonSize = Value;
      if (this.FButton != null) this.FButton.SetWidth(Value);
    };
    this.SetAdaptToStyle = function (Value) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.SetAdaptToStyle.apply(this,arguments);
      if (this.FButton != null) this.FButton.SetAdaptToStyle(this.GetAdaptToStyle());
    };
    this.BeforeDropDown = function () {
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
      if ((this.FButton != null) && (this.FBitmapContainer != null) && (this.FBitmapName !== "")) {
        this.FButton.FBitmaps.Clear();
        this.FButton.FBitmaps.AddBitmapName(this.FBitmapName,1.0);
      };
    };
    this.KeyDown = function (Key, Shift) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBase.KeyDown.apply(this,arguments);
      if (Key.get() === 115) {
        this.DropDown();
        return;
      };
    };
    this.PopupKeyDown = function (Sender, Key, Shift) {
      var $tmp1 = Key.get();
      if ($tmp1 === 13) {
        this.DropDown();
      };
    };
    this.Notification = function (AComponent, Operation) {
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FPopupControl)) this.FPopupControl = null;
      if ((Operation === pas.Classes.TOperation.opRemove) && (AComponent === this.FBitmapContainer)) this.FBitmapContainer = null;
      pas.Classes.TComponent.Notification.apply(this,arguments);
    };
    this.ButtonClick = function (Sender) {
      if (!this.FBlockDropDown) this.DropDown();
      this.FBlockDropDown = false;
      if (this.FOnButtonClick != null) this.FOnButtonClick(this);
    };
    this.ButtonDblClick = function (Sender) {
      this.FBlockDropDown = true;
    };
    this.BitmapChanged = function (Sender) {
      if (this.FButton != null) {
        this.FButton.FBitmaps.Clear();
        this.FButton.FBitmaps.AddBitmap(this.FBitmap,1.0);
      };
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.FModalPopup = false;
      this.FButton = pas["WEBLib.TMSFNCToolBar"].TTMSFNCToolBarDropDownButton.$create("Create$1",[this]);
      this.FButton.SetTabStop(false);
      this.FButton.SetAllowFocus(false);
      this.FButton.FStored = false;
      this.FButton.SetWidth(18);
      this.FButton.FAppearance.SetRounding(0);
      this.FButton.SetAlign(pas["WEBLib.Controls"].TAlign.alRight);
      this.FButton.SetParent(this);
      this.FButton.FOnClick = rtl.createCallback(this,"ButtonClick");
      this.FButton.FOnDblClick = rtl.createCallback(this,"ButtonDblClick");
      this.FButton.FBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPAND,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FButton.FBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPANDLARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FButton.FDisabledBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPAND,pas["WEBLib.TMSFNCTypes"].HInstance(),1.0);
      this.FButton.FDisabledBitmaps.AddBitmapFromResource$1(pas["WEBLib.TMSFNCToolBarRes"].TMSFNCTOOLBAREXPANDLARGE,pas["WEBLib.TMSFNCTypes"].HInstance(),1.5);
      this.FEdit = $mod.TTMSFNCEdit.$create("Create$1",[this]);
      this.FEdit.SetParent(this);
      this.FEdit.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
      this.FPopup = pas["WEBLib.TMSFNCPopup"].TTMSFNCPopup.$create("Create$1",[this]);
      this.FPopup.SetPlacement(pas["WEBLib.TMSFNCPopup"].TTMSFNCPopupPlacement.ppBottom);
      this.FPopup.SetPlacementControl(this);
      this.FPopup.FStored = false;
      this.FPopup.SetDragWithParent(true);
      this.FPopup.SetWidth(240);
      this.FPopup.SetHeight(160);
      this.FButtonSize = 18;
      this.FBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.SetWidth(118);
      this.SetHeight(22);
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FButton");
      rtl.free(this,"FPopup");
      rtl.free(this,"FBitmap");
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.call(this);
    };
    this.DropDown = function () {
      if (this.FPopupControl != null) {
        if (!this.FPopup.FIsOpen) {
          this.BeforeDropDown();
          this.FPopup.Popup(this.FModalPopup);
        } else this.FPopup.SetIsOpen(false);
      };
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCBitmapContainer"].ITMSFNCBitmapContainer);
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("BitmapContainer",3,pas["WEBLib.TMSFNCBitmapContainer"].$rtti["TTMSFNCBitmapContainer"],"GetBitmapContainer","SetBitmapContainer");
    $r.addProperty("Bitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FBitmap","SetBitmap");
    $r.addProperty("BitmapName",2,rtl.string,"FBitmapName","SetBitmapName");
    $r.addProperty("ButtonSize",2,rtl.longint,"FButtonSize","SetButtonSize",{Default: 18});
    $r.addProperty("PopupControl",2,pas["WEBLib.Controls"].$rtti["TControl"],"FPopupControl","SetPopupControl");
    $r.addProperty("OnButtonClick",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnButtonClick","FOnButtonClick");
    $r.addProperty("Text",3,rtl.string,"GetText","SetText");
  });
  $mod.$init = function () {
    pas.Classes.RegisterClass($mod.TTMSFNCEditButton);
  };
},["SysUtils","Types","WEBLib.TMSFNCUtils","Math"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.TTMSFNCEditAutoType = {"0": "atNumeric", atNumeric: 0, "1": "atFloat", atFloat: 1, "2": "atString", atString: 2, "3": "atDate", atDate: 3, "4": "atTime", atTime: 4, "5": "atHex", atHex: 5};
  $mod.$rtti.$Enum("TTMSFNCEditAutoType",{minvalue: 0, maxvalue: 5, ordtype: 1, enumtype: $impl.TTMSFNCEditAutoType});
  rtl.createClass($impl,"TTMSFNCPopupOpen",pas["WEBLib.TMSFNCPopup"].TTMSFNCPopup,function () {
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $impl.CheckTerminator = function (ch) {
    var Result = false;
    Result = pas["WEBLib.TMSFNCTypes"].CharInArray(ch,[" ",",",".","\/","\\",":","*","$","-","(",")","[","]",'"',"'","&"]);
    return Result;
  };
  $impl.ShiftCase = function (AName) {
    var Result = "";
    var I = 0;
    var L = 0;
    var NewName = "";
    var First = false;
    First = true;
    NewName = AName;
    L = AName.length;
    for (var $l1 = 1, $end2 = L; $l1 <= $end2; $l1++) {
      I = $l1;
      if ($impl.CheckTerminator(NewName.charAt(I - 1))) {
        First = true}
       else if (First) {
        NewName = rtl.setCharAt(NewName,I - 1,pas.SysUtils.UpperCase(AName).charAt(I - 1));
        First = false;
      } else NewName = rtl.setCharAt(NewName,I - 1,pas.SysUtils.LowerCase(AName).charAt(I - 1));
      if ((pas.System.Copy(NewName,1,I) === "Mc") || (pas.System.Copy(NewName,1,I) === "Mac") || ((pas.System.Pos(" Mc",NewName) === (I - 2)) && (I > 2)) || ((I > (L - 3)) && ((pas.System.Copy(NewName,I - 1,2) === " I") || (pas.System.Copy(NewName,I - 2,3) === " II")))) First = true;
    };
    Result = NewName;
    return Result;
  };
  $impl.IsType = function (s) {
    var Result = 0;
    var i = 0;
    var isI = false;
    var isF = false;
    var isH = false;
    var th = 0;
    var de = 0;
    var mi = 0;
    Result = $impl.TTMSFNCEditAutoType.atString;
    isI = true;
    isF = true;
    isH = true;
    if (s === "") {
      isI = false;
      isF = false;
      isH = false;
    };
    th = -1;
    de = 0;
    mi = 0;
    for (var $l1 = 1, $end2 = s.length; $l1 <= $end2; $l1++) {
      i = $l1;
      if (!pas["WEBLib.TMSFNCTypes"].CharIsNumber(s.charAt(i - 1))) isI = false;
      if (!pas["WEBLib.TMSFNCTypes"].CharIsNumber(s.charAt(i - 1)) && !pas["WEBLib.TMSFNCTypes"].CharInArray(s.charAt(i - 1),[".",","])) isF = false;
      if (!pas["WEBLib.TMSFNCTypes"].CharIsNumber(s.charAt(i - 1)) && !pas["WEBLib.TMSFNCTypes"].CharIsLetter(s.charAt(i - 1))) isH = false;
      if ((s.charAt(i - 1) === pas.SysUtils.ThousandSeparator) && ((i - th) < 3)) isF = false;
      if (s.charAt(i - 1) === pas.SysUtils.ThousandSeparator) th = i;
      if (s.charAt(i - 1) === pas.SysUtils.DecimalSeparator) de += 1;
      if (s.charAt(i - 1) === "-") mi += 1;
    };
    if (isH && !isI) Result = $impl.TTMSFNCEditAutoType.atHex;
    if (isI) {
      Result = $impl.TTMSFNCEditAutoType.atNumeric}
     else {
      if (isF) Result = $impl.TTMSFNCEditAutoType.atFloat;
    };
    if ((mi > 1) || (de > 1)) Result = $impl.TTMSFNCEditAutoType.atString;
    return Result;
  };
  $impl.HexToInt = function (s) {
    var Result = 0;
    var i = 0;
    var r = 0;
    var m = 0;
    function CharVal(c) {
      var Result = 0;
      Result = 0;
      if ((c >= "0") && (c <= "9")) Result = c.charCodeAt() - "0".charCodeAt();
      if ((c >= "A") && (c <= "F")) Result = (c.charCodeAt() - "A".charCodeAt()) + 10;
      if ((c >= "a") && (c <= "f")) Result = (c.charCodeAt() - "a".charCodeAt()) + 10;
      return Result;
    };
    r = 0;
    m = 1;
    for (var $l1 = s.length; $l1 >= 1; $l1--) {
      i = $l1;
      r = r + (m * CharVal(s.charAt(i - 1)));
      m = m << 4;
    };
    Result = r;
    return Result;
  };
  $impl.ValStr = function (s) {
    var Result = 0;
    var err = 0;
    pas.System.val$6(s,{get: function () {
        return Result;
      }, set: function (v) {
        Result = v;
      }},{get: function () {
        return err;
      }, set: function (v) {
        err = v;
      }});
    return Result;
  };
  $impl.CleanString = function (s) {
    var Result = "";
    var i = 0;
    i = pas.System.Pos("\r",s);
    if (i > 0) pas.System.Delete({get: function () {
        return s;
      }, set: function (v) {
        s = v;
      }},i,1);
    i = pas.System.Pos("\n",s);
    if (i > 0) pas.System.Delete({get: function () {
        return s;
      }, set: function (v) {
        s = v;
      }},i,1);
    i = pas.System.Pos("\x0B",s);
    if (i > 0) pas.System.Delete({get: function () {
        return s;
      }, set: function (v) {
        s = v;
      }},i,1);
    Result = s;
    return Result;
  };
});
rtl.module("WEBLib.TMSFNCTrackBar",["System","Classes","Types","WEBLib.Controls","WEBLib.ExtCtrls","WEBLib.TMSFNCCustomControl","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCTypes","WEBLib.TMSFNCGraphicsTypes","WEBLib.TMSFNCEdit","WEBLib.TMSFNCStyles"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 2;
  rtl.recNewT($mod,"TTMSFNCCustomTrackBarBaseValues",function () {
    this.Left = 0.0;
    this.Right = 0.0;
    this.$eq = function (b) {
      return (this.Left === b.Left) && (this.Right === b.Right);
    };
    this.$assign = function (s) {
      this.Left = s.Left;
      this.Right = s.Right;
      return this;
    };
    var $r = $mod.$rtti.$Record("TTMSFNCCustomTrackBarBaseValues",{});
    $r.addField("Left",rtl.double);
    $r.addField("Right",rtl.double);
  });
  this.TTMSFNCTrackBarAppearanceTickMarkPosition = {"0": "tmpBoth", tmpBoth: 0, "1": "tmpBottomRight", tmpBottomRight: 1, "2": "tmpTopLeft", tmpTopLeft: 2, "3": "tmpNone", tmpNone: 3};
  $mod.$rtti.$Enum("TTMSFNCTrackBarAppearanceTickMarkPosition",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCTrackBarAppearanceTickMarkPosition});
  this.TTMSFNCTrackBarAppearanceButtonShape = {"0": "bsRounded", bsRounded: 0, "1": "bsRectangle", bsRectangle: 1, "2": "bsImage", bsImage: 2, "3": "bsNone", bsNone: 3};
  $mod.$rtti.$Enum("TTMSFNCTrackBarAppearanceButtonShape",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TTMSFNCTrackBarAppearanceButtonShape});
  this.TTMSFNCCustomTrackBarTrackLabelPosition = {"0": "tlpTopLeft", tlpTopLeft: 0, "1": "tlpTopCenter", tlpTopCenter: 1, "2": "tlpTopRight", tlpTopRight: 2, "3": "tlpBottomLeft", tlpBottomLeft: 3, "4": "tlpBottomCenter", tlpBottomCenter: 4, "5": "tlpBottomRight", tlpBottomRight: 5, "6": "tlpNone", tlpNone: 6};
  $mod.$rtti.$Enum("TTMSFNCCustomTrackBarTrackLabelPosition",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.TTMSFNCCustomTrackBarTrackLabelPosition});
  this.TTMSFNCCustomTrackBarBaseShape = {"0": "tsRectangle", tsRectangle: 0, "1": "tsEllipse", tsEllipse: 1, "2": "tsImage", tsImage: 2};
  $mod.$rtti.$Enum("TTMSFNCCustomTrackBarBaseShape",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCCustomTrackBarBaseShape});
  this.TTMSFNCCustomTrackBarBaseLineShape = {"0": "lsRectangle", lsRectangle: 0, "1": "lsRoundedRectangle", lsRoundedRectangle: 1, "2": "lsImage", lsImage: 2};
  $mod.$rtti.$Enum("TTMSFNCCustomTrackBarBaseLineShape",{minvalue: 0, maxvalue: 2, ordtype: 1, enumtype: this.TTMSFNCCustomTrackBarBaseLineShape});
  this.TTMSFNCCustomTrackBarOrientation = {"0": "tboHorizontal", tboHorizontal: 0, "1": "tboVertical", tboVertical: 1};
  $mod.$rtti.$Enum("TTMSFNCCustomTrackBarOrientation",{minvalue: 0, maxvalue: 1, ordtype: 1, enumtype: this.TTMSFNCCustomTrackBarOrientation});
  rtl.createClass($mod,"TTMSFNCCustomTrackBarBaseAppearance",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FButtonStroke = null;
      this.FButtonFill = null;
      this.FButtonSize = 0;
      this.FOnChange = null;
      this.FButtonSpacing = 0;
      this.FThumbFill = null;
      this.FThumbRightFill = null;
      this.FThumbHeight = 0;
      this.FThumbRightHeight = 0;
      this.FThumbStroke = null;
      this.FThumbRightStroke = null;
      this.FThumbWidth = 0;
      this.FThumbRightWidth = 0;
      this.FLineWidth = 0;
      this.FTickMarkSpacing = 0;
      this.FTickMarkSize = 0;
      this.FTickMarkStroke = null;
      this.FLineFill = null;
      this.FLineStroke = null;
      this.FButtonShape = 0;
      this.FButtonDownFill = null;
      this.FButtonDownStroke = null;
      this.FThumbDownFill = null;
      this.FThumbRightDownFill = null;
      this.FThumbDownStroke = null;
      this.FThumbRightDownStroke = null;
      this.FTickMarkPosition = 0;
      this.FValueFont = null;
      this.FThumbShape = 0;
      this.FTickMarkLabelFormat = "";
      this.FTrackLabelFormat = "";
      this.FTrackLabelPosition = 0;
      this.FTickMarkLabel = false;
      this.FTickMarkDivision = 0;
      this.FOrientation = 0;
      this.FMinButtonBitmap = null;
      this.FMinButtonDownBitmap = null;
      this.FPlusButtonBitmap = null;
      this.FPlusButtonDownBitmap = null;
      this.FLineBitmap = null;
      this.FLineShape = 0;
      this.FThumbBitmap = null;
      this.FThumbDownBitmap = null;
      this.FThumbRightBitmap = null;
      this.FThumbRightDownBitmap = null;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FButtonStroke = undefined;
      this.FButtonFill = undefined;
      this.FOnChange = undefined;
      this.FThumbFill = undefined;
      this.FThumbRightFill = undefined;
      this.FThumbStroke = undefined;
      this.FThumbRightStroke = undefined;
      this.FTickMarkStroke = undefined;
      this.FLineFill = undefined;
      this.FLineStroke = undefined;
      this.FButtonDownFill = undefined;
      this.FButtonDownStroke = undefined;
      this.FThumbDownFill = undefined;
      this.FThumbRightDownFill = undefined;
      this.FThumbDownStroke = undefined;
      this.FThumbRightDownStroke = undefined;
      this.FValueFont = undefined;
      this.FMinButtonBitmap = undefined;
      this.FMinButtonDownBitmap = undefined;
      this.FPlusButtonBitmap = undefined;
      this.FPlusButtonDownBitmap = undefined;
      this.FLineBitmap = undefined;
      this.FThumbBitmap = undefined;
      this.FThumbDownBitmap = undefined;
      this.FThumbRightBitmap = undefined;
      this.FThumbRightDownBitmap = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetButtonFill = function (AValue) {
      this.FButtonFill.Assign(AValue);
    };
    this.SetButtonSize = function (AValue) {
      if (this.FButtonSize !== AValue) {
        this.FButtonSize = AValue;
        this.Changed();
      };
    };
    this.SetButtonStroke = function (AValue) {
      this.FButtonStroke.Assign(AValue);
    };
    this.SetButtonSpacing = function (AValue) {
      if (this.FButtonSpacing !== AValue) {
        this.FButtonSpacing = AValue;
        this.Changed();
      };
    };
    this.SetThumbFill = function (AValue) {
      this.FThumbFill.Assign(AValue);
    };
    this.SetThumbHeight = function (AValue) {
      if (this.FThumbHeight !== AValue) {
        this.FThumbHeight = AValue;
        this.Changed();
      };
    };
    this.SetThumbRightFill = function (AValue) {
      this.FThumbRightFill.Assign(AValue);
    };
    this.SetThumbRightHeight = function (AValue) {
      if (this.FThumbRightHeight !== AValue) {
        this.FThumbRightHeight = AValue;
        this.Changed();
      };
    };
    this.SetThumbRightStroke = function (AValue) {
      this.FThumbRightStroke.Assign(AValue);
    };
    this.SetThumbRightWidth = function (AValue) {
      if (this.FThumbRightWidth !== AValue) {
        this.FThumbRightWidth = AValue;
        this.Changed();
      };
    };
    this.SetThumbStroke = function (AValue) {
      this.FThumbStroke.Assign(AValue);
    };
    this.SetThumbWidth = function (AValue) {
      if (this.FThumbWidth !== AValue) {
        this.FThumbWidth = AValue;
        this.Changed();
      };
    };
    this.SetLineWidth = function (AValue) {
      if (this.FLineWidth !== AValue) {
        this.FLineWidth = AValue;
        this.Changed();
      };
    };
    this.SetTickMarkSpacing = function (AValue) {
      if (this.FTickMarkSpacing !== AValue) {
        this.FTickMarkSpacing = AValue;
        this.Changed();
      };
    };
    this.SetTickMarkSize = function (AValue) {
      if (this.FTickMarkSize !== AValue) {
        this.FTickMarkSize = AValue;
        this.Changed();
      };
    };
    this.SetLineFill = function (AValue) {
      this.FLineFill.Assign(AValue);
    };
    this.SetLineStroke = function (AValue) {
      this.FLineStroke.Assign(AValue);
    };
    this.SetTickMarkStroke = function (AValue) {
      this.FTickMarkStroke.Assign(AValue);
    };
    this.SetButtonShape = function (AValue) {
      if (this.FButtonShape !== AValue) {
        this.FButtonShape = AValue;
        this.Changed();
      };
    };
    this.SetButtonDownFill = function (AValue) {
      this.FButtonDownFill.Assign(AValue);
    };
    this.SetButtonDownStroke = function (AValue) {
      this.FButtonDownStroke.Assign(AValue);
    };
    this.SetThumbDownFill = function (AValue) {
      this.FThumbDownFill.Assign(AValue);
    };
    this.SetThumbDownStroke = function (AValue) {
      this.FThumbDownStroke.Assign(AValue);
    };
    this.SetThumbRightDownFill = function (AValue) {
      this.FThumbRightDownFill.Assign(AValue);
    };
    this.SetThumbRightDownStroke = function (AValue) {
      this.FThumbRightDownStroke.Assign(AValue);
    };
    this.SetTickMarkPosition = function (AValue) {
      if (this.FTickMarkPosition !== AValue) {
        this.FTickMarkPosition = AValue;
        this.Changed();
      };
    };
    this.SetValueFont = function (AValue) {
      this.FValueFont.AssignSource(AValue);
    };
    this.SetThumbShape = function (AValue) {
      if (this.FThumbShape !== AValue) {
        this.FThumbShape = AValue;
        this.Changed();
      };
    };
    this.SetTickMarkLabelFormat = function (AValue) {
      if (this.FTickMarkLabelFormat !== AValue) {
        this.FTickMarkLabelFormat = AValue;
        this.Changed();
      };
    };
    this.SetTrackLabelFormat = function (AValue) {
      if (this.FTrackLabelFormat !== AValue) {
        this.FTrackLabelFormat = AValue;
        this.Changed();
      };
    };
    this.SetTrackLabelPosition = function (AValue) {
      if (this.FTrackLabelPosition !== AValue) {
        this.FTrackLabelPosition = AValue;
        this.Changed();
      };
    };
    this.SetTickMarkLabel = function (AValue) {
      if (this.FTickMarkLabel !== AValue) {
        this.FTickMarkLabel = AValue;
        this.Changed();
      };
    };
    this.SetTickMarkDivision = function (AValue) {
      if (this.FTickMarkDivision !== AValue) {
        this.FTickMarkDivision = AValue;
        this.Changed();
      };
    };
    this.SetOrientation = function (AValue) {
      if (this.FOrientation !== AValue) {
        this.FOrientation = AValue;
        if ((this.FOwner != null) && $mod.TTMSFNCCustomTrackBarBase.isPrototypeOf(this.FOwner)) {
          if (rtl.eqSet(rtl.intersectSet(this.FOwner.FComponentState,rtl.createSet(pas.Classes.TComponentStateItem.csLoading,pas.Classes.TComponentStateItem.csUpdating)),{})) {
            rtl.as(this.FOwner,$mod.TTMSFNCCustomTrackBarBase).SetBounds(rtl.as(this.FOwner,$mod.TTMSFNCCustomTrackBarBase).GetLeft(),rtl.as(this.FOwner,$mod.TTMSFNCCustomTrackBarBase).GetTop(),rtl.as(this.FOwner,$mod.TTMSFNCCustomTrackBarBase).GetHeight(),rtl.as(this.FOwner,$mod.TTMSFNCCustomTrackBarBase).GetWidth());
          };
        };
        this.Changed();
      };
    };
    this.IsTickMarkLabelFormatStored = function () {
      var Result = false;
      Result = this.FTickMarkLabelFormat !== "%g";
      return Result;
    };
    this.IsTrackLabelFormatStored = function () {
      var Result = false;
      Result = this.FTrackLabelFormat !== "Pos: %g";
      return Result;
    };
    this.SetMinButtonBitmap = function (Value) {
      this.FMinButtonBitmap.Assign(Value);
    };
    this.SetMinButtonDownBitmap = function (Value) {
      this.FMinButtonDownBitmap.Assign(Value);
    };
    this.SetPlusButtonBitmap = function (Value) {
      this.FPlusButtonBitmap.Assign(Value);
    };
    this.SetPlusButtonDownBitmap = function (Value) {
      this.FPlusButtonDownBitmap.Assign(Value);
    };
    this.SetLineBitmap = function (Value) {
      this.FLineBitmap.Assign(Value);
    };
    this.SetLineShape = function (Value) {
      if (this.FLineShape !== Value) {
        this.FLineShape = Value;
        this.Changed();
      };
    };
    this.SetThumbBitmap = function (Value) {
      this.FThumbBitmap.Assign(Value);
    };
    this.SetThumbDownBitmap = function (Value) {
      this.FThumbDownBitmap.Assign(Value);
    };
    this.SetThumbRightBitmap = function (Value) {
      this.FThumbRightBitmap.Assign(Value);
    };
    this.SetThumbRightDownBitmap = function (Value) {
      this.FThumbRightDownBitmap.Assign(Value);
    };
    this.Changed = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.FillChanged = function (Sender) {
      this.Changed();
    };
    this.StrokeChanged = function (Sender) {
      this.Changed();
    };
    this.FontChanged = function (Sender) {
      this.Changed();
    };
    this.BitmapChanged = function (Sender) {
      this.Changed();
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FButtonFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FButtonFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FButtonStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FButtonStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FButtonSize = 20;
      this.FButtonSpacing = 2;
      this.FThumbFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FThumbFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FThumbStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FThumbStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FThumbHeight = 16;
      this.FThumbWidth = 8;
      this.FThumbRightFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FThumbRightFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FThumbRightStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FThumbRightStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FThumbRightHeight = 16;
      this.FThumbRightWidth = 8;
      this.FLineShape = $mod.TTMSFNCCustomTrackBarBaseLineShape.lsRectangle;
      this.FLineWidth = 1;
      this.FLineFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FLineFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FLineStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FLineStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FTickMarkSize = 4;
      this.FTickMarkSpacing = 8;
      this.FTickMarkStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FTickMarkStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FButtonShape = $mod.TTMSFNCTrackBarAppearanceButtonShape.bsNone;
      this.FButtonDownFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FButtonDownFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FButtonDownStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FButtonDownStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FThumbDownFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FThumbDownFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FThumbDownStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FThumbDownStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FThumbRightDownFill = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFill.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkSolid,16777215]);
      this.FThumbRightDownFill.FOnChanged = rtl.createCallback(this,"FillChanged");
      this.FThumbRightDownStroke = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStroke.$create("Create$1",[pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid,8421504]);
      this.FThumbRightDownStroke.FOnChanged = rtl.createCallback(this,"StrokeChanged");
      this.FTickMarkPosition = $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpBottomRight;
      this.FValueFont = pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFont.$create("Create$2");
      this.FValueFont.FOnChanged = rtl.createCallback(this,"FontChanged");
      this.FThumbShape = $mod.TTMSFNCCustomTrackBarBaseShape.tsRectangle;
      this.FTickMarkLabelFormat = "%g";
      this.FTrackLabelFormat = "Pos: %g";
      this.FTrackLabelPosition = $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpNone;
      this.FTickMarkLabel = false;
      this.FTickMarkDivision = 5;
      this.FOrientation = $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal;
      this.FMinButtonBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FMinButtonBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FMinButtonDownBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FMinButtonDownBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FPlusButtonBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FPlusButtonBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FPlusButtonDownBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FPlusButtonDownBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FLineBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FLineBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FThumbBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FThumbBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FThumbDownBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FThumbDownBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FThumbRightBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FThumbRightBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      this.FThumbRightDownBitmap = pas["WEBLib.TMSFNCTypes"].TTMSFNCBitmap.$create("Create$3");
      this.FThumbRightDownBitmap.FOnChange = rtl.createCallback(this,"BitmapChanged");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FButtonFill");
      rtl.free(this,"FButtonStroke");
      rtl.free(this,"FThumbFill");
      rtl.free(this,"FThumbStroke");
      rtl.free(this,"FThumbRightFill");
      rtl.free(this,"FThumbRightStroke");
      rtl.free(this,"FLineFill");
      rtl.free(this,"FLineStroke");
      rtl.free(this,"FTickMarkStroke");
      rtl.free(this,"FButtonDownFill");
      rtl.free(this,"FButtonDownStroke");
      rtl.free(this,"FThumbDownFill");
      rtl.free(this,"FThumbDownStroke");
      rtl.free(this,"FThumbRightDownFill");
      rtl.free(this,"FThumbRightDownStroke");
      rtl.free(this,"FValueFont");
      rtl.free(this,"FMinButtonBitmap");
      rtl.free(this,"FMinButtonDownBitmap");
      rtl.free(this,"FPlusButtonBitmap");
      rtl.free(this,"FPlusButtonDownBitmap");
      rtl.free(this,"FLineBitmap");
      rtl.free(this,"FThumbBitmap");
      rtl.free(this,"FThumbDownBitmap");
      rtl.free(this,"FThumbRightBitmap");
      rtl.free(this,"FThumbRightDownBitmap");
      pas.System.TObject.Destroy.call(this);
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomTrackBarBaseAppearance.isPrototypeOf(Source)) {
        this.FButtonFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FButtonFill);
        this.FButtonStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FButtonStroke);
        this.FButtonSize = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FButtonSize;
        this.FButtonSpacing = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FButtonSpacing;
        this.FThumbFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbFill);
        this.FThumbStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbStroke);
        this.FThumbHeight = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbHeight;
        this.FThumbWidth = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbWidth;
        this.FThumbRightHeight = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbRightHeight;
        this.FThumbRightWidth = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbRightWidth;
        this.FThumbRightFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbRightFill);
        this.FThumbRightStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbRightStroke);
        this.FLineWidth = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FLineWidth;
        this.FLineShape = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FLineShape;
        this.FLineFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FLineFill);
        this.FLineStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FLineStroke);
        this.FTickMarkSize = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FTickMarkSize;
        this.FTickMarkSpacing = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FTickMarkSpacing;
        this.FTickMarkStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FTickMarkStroke);
        this.FButtonShape = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FButtonShape;
        this.FTickMarkPosition = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FTickMarkPosition;
        this.FValueFont.AssignSource(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FValueFont);
        this.FThumbShape = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbShape;
        this.FTickMarkLabelFormat = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FTickMarkLabelFormat;
        this.FTrackLabelFormat = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FTrackLabelFormat;
        this.FTrackLabelPosition = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FTrackLabelPosition;
        this.FTickMarkLabel = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FTickMarkLabel;
        this.FTickMarkDivision = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FTickMarkDivision;
        this.FOrientation = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FOrientation;
        this.FThumbDownFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbDownFill);
        this.FThumbDownStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbDownStroke);
        this.FThumbRightDownFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbRightDownFill);
        this.FThumbRightDownStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbRightDownStroke);
        this.FButtonDownFill.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FButtonDownFill);
        this.FButtonDownStroke.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FButtonDownStroke);
        this.FMinButtonBitmap.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FMinButtonBitmap);
        this.FMinButtonDownBitmap.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FMinButtonDownBitmap);
        this.FPlusButtonBitmap.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FPlusButtonBitmap);
        this.FPlusButtonDownBitmap.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FPlusButtonDownBitmap);
        this.FLineBitmap.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FLineBitmap);
        this.FThumbBitmap.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbBitmap);
        this.FThumbDownBitmap.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbDownBitmap);
        this.FThumbRightBitmap.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbRightBitmap);
        this.FThumbRightDownBitmap.Assign(rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseAppearance).FThumbRightDownBitmap);
      } else pas.Classes.TPersistent.Assign.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomTrackBarAppearance",$mod.TTMSFNCCustomTrackBarBaseAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("ButtonSize",2,rtl.longint,"FButtonSize","SetButtonSize",{Default: 20});
    $r.addProperty("ButtonFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FButtonFill","SetButtonFill");
    $r.addProperty("ButtonSpacing",2,rtl.longint,"FButtonSpacing","SetButtonSpacing",{Default: 2});
    $r.addProperty("ButtonStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FButtonStroke","SetButtonStroke");
    $r.addProperty("ButtonShape",2,$mod.$rtti["TTMSFNCTrackBarAppearanceButtonShape"],"FButtonShape","SetButtonShape",{Default: $mod.TTMSFNCTrackBarAppearanceButtonShape.bsNone});
    $r.addProperty("MinButtonBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FMinButtonBitmap","SetMinButtonBitmap");
    $r.addProperty("MinButtonDownBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FMinButtonDownBitmap","SetMinButtonDownBitmap");
    $r.addProperty("PlusButtonBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FPlusButtonBitmap","SetPlusButtonBitmap");
    $r.addProperty("PlusButtonDownBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FPlusButtonDownBitmap","SetPlusButtonDownBitmap");
    $r.addProperty("ButtonDownFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FButtonDownFill","SetButtonDownFill");
    $r.addProperty("ButtonDownStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FButtonDownStroke","SetButtonDownStroke");
    $r.addProperty("ThumbBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FThumbBitmap","SetThumbBitmap");
    $r.addProperty("ThumbFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FThumbFill","SetThumbFill");
    $r.addProperty("ThumbStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FThumbStroke","SetThumbStroke");
    $r.addProperty("ThumbHeight",2,rtl.longint,"FThumbHeight","SetThumbHeight",{Default: 16});
    $r.addProperty("ThumbWidth",2,rtl.longint,"FThumbWidth","SetThumbWidth",{Default: 8});
    $r.addProperty("ThumbDownBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FThumbDownBitmap","SetThumbDownBitmap");
    $r.addProperty("ThumbDownFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FThumbDownFill","SetThumbDownFill");
    $r.addProperty("ThumbDownStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FThumbDownStroke","SetThumbDownStroke");
    $r.addProperty("ThumbShape",2,$mod.$rtti["TTMSFNCCustomTrackBarBaseShape"],"FThumbShape","SetThumbShape",{Default: $mod.TTMSFNCCustomTrackBarBaseShape.tsRectangle});
    $r.addProperty("LineBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FLineBitmap","SetLineBitmap");
    $r.addProperty("LineShape",2,$mod.$rtti["TTMSFNCCustomTrackBarBaseLineShape"],"FLineShape","SetLineShape",{Default: $mod.TTMSFNCCustomTrackBarBaseLineShape.lsRectangle});
    $r.addProperty("LineWidth",2,rtl.longint,"FLineWidth","SetLineWidth",{Default: 1});
    $r.addProperty("LineStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FLineStroke","SetLineStroke");
    $r.addProperty("LineFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FLineFill","SetLineFill");
    $r.addProperty("Orientation",2,$mod.$rtti["TTMSFNCCustomTrackBarOrientation"],"FOrientation","SetOrientation",{Default: $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal});
    $r.addProperty("TickMarkPosition",2,$mod.$rtti["TTMSFNCTrackBarAppearanceTickMarkPosition"],"FTickMarkPosition","SetTickMarkPosition",{Default: $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpBottomRight});
    $r.addProperty("TickMarkSize",2,rtl.longint,"FTickMarkSize","SetTickMarkSize",{Default: 4});
    $r.addProperty("TickMarkSpacing",2,rtl.longint,"FTickMarkSpacing","SetTickMarkSpacing",{Default: 8});
    $r.addProperty("TickMarkStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FTickMarkStroke","SetTickMarkStroke");
    $r.addProperty("TickMarkLabelFormat",14,rtl.string,"FTickMarkLabelFormat","SetTickMarkLabelFormat",{stored: "IsTickMarkLabelFormatStored"});
    $r.addProperty("TickMarkLabel",2,rtl.boolean,"FTickMarkLabel","SetTickMarkLabel",{Default: false});
    $r.addProperty("TickMarkDivision",2,rtl.longint,"FTickMarkDivision","SetTickMarkDivision",{Default: 5});
    $r.addProperty("TrackLabelFormat",14,rtl.string,"FTrackLabelFormat","SetTrackLabelFormat",{stored: "IsTrackLabelFormatStored"});
    $r.addProperty("TrackLabelPosition",2,$mod.$rtti["TTMSFNCCustomTrackBarTrackLabelPosition"],"FTrackLabelPosition","SetTrackLabelPosition",{Default: $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpNone});
  });
  rtl.createClass($mod,"TTMSFNCCustomTrackBarBaseInteraction",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FOwner = null;
      this.FFrequency = 0.0;
      this.FOnChange = null;
      this.FEditable = false;
      this.FRepeatClick = false;
      this.FRepeatInterval = 0;
    };
    this.$final = function () {
      this.FOwner = undefined;
      this.FOnChange = undefined;
      pas.Classes.TPersistent.$final.call(this);
    };
    this.SetFrequency = function (AValue) {
      if (this.FFrequency !== AValue) {
        this.FFrequency = AValue;
        this.Changed();
      };
    };
    this.SetEditable = function (AValue) {
      if (this.FEditable !== AValue) {
        this.FEditable = AValue;
        this.Changed();
      };
    };
    this.SetRepeatClick = function (AValue) {
      if (this.FRepeatClick !== AValue) {
        this.FRepeatClick = AValue;
        this.Changed();
      };
    };
    this.SetRepeatInterval = function (AValue) {
      if (this.FRepeatInterval !== AValue) {
        this.FRepeatInterval = AValue;
        this.Changed();
      };
    };
    this.IsFrequencyStored = function () {
      var Result = false;
      Result = this.FFrequency !== 1.0;
      return Result;
    };
    this.Changed = function () {
      if (this.FOnChange != null) this.FOnChange(this);
    };
    this.Create$1 = function (AOwner) {
      this.FOwner = AOwner;
      this.FFrequency = 1;
      this.FEditable = true;
      this.FRepeatClick = false;
      this.FRepeatInterval = 100;
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TTMSFNCCustomTrackBarBaseInteraction.isPrototypeOf(Source)) {
        this.FFrequency = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseInteraction).FFrequency;
        this.FEditable = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseInteraction).FEditable;
        this.FRepeatClick = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseInteraction).FRepeatClick;
        this.FRepeatInterval = rtl.as(Source,$mod.TTMSFNCCustomTrackBarBaseInteraction).FRepeatInterval;
      } else pas.Classes.TPersistent.Assign.apply(this,arguments);
    };
  });
  rtl.createClass($mod,"TTMSFNCCustomTrackBarInteraction",$mod.TTMSFNCCustomTrackBarBaseInteraction,function () {
    var $r = this.$rtti;
    $r.addProperty("Frequency",14,rtl.double,"FFrequency","SetFrequency",{stored: "IsFrequencyStored"});
    $r.addProperty("RepeatClick",2,rtl.boolean,"FRepeatClick","SetRepeatClick",{Default: false});
    $r.addProperty("RepeatInterval",2,rtl.longint,"FRepeatInterval","SetRepeatInterval",{Default: 100});
  });
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBaseBeforeDrawButtonEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["APlus",rtl.boolean],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBaseAfterDrawButtonEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["APlus",rtl.boolean]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBaseBeforeDrawTrackLine",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBaseAfterDrawTrackLine",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBaseBeforeDrawTickMarks",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBaseAfterDrawTickMarks",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBaseValueChanged",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AValue",rtl.double],["ALeft",rtl.boolean]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBaseBeforeDrawTickLabel",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["APosition",pas["WEBLib.TMSFNCTypes"].$rtti["TPointF"]],["AValue",rtl.double],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBaseAfterDrawTickLabel",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["APosition",pas["WEBLib.TMSFNCTypes"].$rtti["TPointF"]],["AValue",rtl.double]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBaseBeforeDrawTrackLabel",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ALabel",rtl.string],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBaseAfterDrawTrackLabel",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["ALabel",rtl.string]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomTrackBarBase",pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$init.call(this);
      this.FMax = 0.0;
      this.FMin = 0.0;
      this.FMouseDown = false;
      this.FPlusDown = false;
      this.FMinusDown = false;
      this.FOldButtonColor = 0;
      this.FOldThumbColor = 0;
      this.FOldThumbRightColor = 0;
      this.FOldLineColor = 0;
      this.FOldTickMarkColor = 0;
      this.FOldButtonDownColor = 0;
      this.FOldThumbDownColor = 0;
      this.FOldThumbRightDownColor = 0;
      this.FOldButtonFill = 0;
      this.FOldThumbFill = 0;
      this.FOldThumbRightFill = 0;
      this.FOldLineFill = 0;
      this.FOldButtonDownFill = 0;
      this.FOldThumbDownFill = 0;
      this.FOldThumbRightDownFill = 0;
      this.FOnBeforeDrawButton = null;
      this.FOnAfterDrawTrackLine = null;
      this.FOnAfterDrawTickMarks = null;
      this.FOnAfterDrawButton = null;
      this.FOnBeforeDrawTrackLine = null;
      this.FOnBeforeDrawTickMarks = null;
      this.FOnChanged = null;
      this.FOnValuesChanged = null;
      this.FOnBeforeDrawTickLabel = null;
      this.FOnAfterDrawTickLabel = null;
      this.FOnBeforeDrawTrackLabel = null;
      this.FOnAfterDrawTrackLabel = null;
      this.FLeftSlider = false;
      this.FRightSlider = false;
      this.FValues = $mod.TTMSFNCCustomTrackBarBaseValues.$new();
      this.FAppearance = null;
      this.FInteraction = null;
    };
    this.$final = function () {
      this.FOnBeforeDrawButton = undefined;
      this.FOnAfterDrawTrackLine = undefined;
      this.FOnAfterDrawTickMarks = undefined;
      this.FOnAfterDrawButton = undefined;
      this.FOnBeforeDrawTrackLine = undefined;
      this.FOnBeforeDrawTickMarks = undefined;
      this.FOnChanged = undefined;
      this.FOnValuesChanged = undefined;
      this.FOnBeforeDrawTickLabel = undefined;
      this.FOnAfterDrawTickLabel = undefined;
      this.FOnBeforeDrawTrackLabel = undefined;
      this.FOnAfterDrawTrackLabel = undefined;
      this.FValues = undefined;
      this.FAppearance = undefined;
      this.FInteraction = undefined;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.$final.call(this);
    };
    this.SetMax = function (AValue) {
      if (this.FMax !== AValue) {
        this.FMax = AValue;
        if (this.FValues.Right > this.FMax) this.FValues.Right = this.FMax;
        this.DoChanged();
      };
    };
    this.SetMin = function (AValue) {
      if (this.FMin !== AValue) {
        this.FMin = AValue;
        if (this.FValues.Left < this.FMin) {
          this.FValues.Left = this.FMin;
          this.DoValuesChanged(this.FValues.Left,true);
        };
        this.DoChanged();
      };
    };
    this.SetAppearance = function (AValue) {
      this.FAppearance.Assign(AValue);
    };
    this.SetInteraction = function (AValue) {
      this.FInteraction.Assign(AValue);
    };
    this.SetValues = function (AValue) {
      this.FValues.$assign(AValue);
      this.DoChanged();
    };
    this.IsMaxStored = function () {
      var Result = false;
      Result = this.FMax !== 100.0;
      return Result;
    };
    this.IsMinStored = function () {
      var Result = false;
      Result = this.FMin !== 0.0;
      return Result;
    };
    this.SetEnabled = function (Value) {
      pas["WEBLib.Controls"].TControl.SetEnabled.apply(this,arguments);
      if (Value) {
        this.FAppearance.FButtonStroke.SetColor(this.FOldButtonColor);
        this.FAppearance.FThumbStroke.SetColor(this.FOldThumbColor);
        this.FAppearance.FThumbRightStroke.SetColor(this.FOldThumbRightColor);
        this.FAppearance.FLineStroke.SetColor(this.FOldLineColor);
        this.FAppearance.FTickMarkStroke.SetColor(this.FOldTickMarkColor);
        this.FAppearance.FButtonDownStroke.SetColor(this.FOldButtonDownColor);
        this.FAppearance.FThumbDownStroke.SetColor(this.FOldThumbDownColor);
        this.FAppearance.FThumbRightDownStroke.SetColor(this.FOldThumbRightDownColor);
        this.FAppearance.FButtonFill.SetColor(this.FOldButtonFill);
        this.FAppearance.FThumbFill.SetColor(this.FOldThumbFill);
        this.FAppearance.FThumbRightFill.SetColor(this.FOldThumbRightFill);
        this.FAppearance.FLineFill.SetColor(this.FOldLineFill);
        this.FAppearance.FButtonDownFill.SetColor(this.FOldButtonDownFill);
        this.FAppearance.FThumbDownFill.SetColor(this.FOldThumbDownFill);
        this.FAppearance.FThumbRightDownFill.SetColor(this.FOldThumbRightDownFill);
      } else {
        this.FOldButtonColor = this.FAppearance.FButtonStroke.FColor;
        this.FAppearance.FButtonStroke.SetColor(12632256);
        this.FOldThumbColor = this.FAppearance.FThumbStroke.FColor;
        this.FAppearance.FThumbStroke.SetColor(12632256);
        this.FOldThumbRightColor = this.FAppearance.FThumbRightStroke.FColor;
        this.FAppearance.FThumbRightStroke.SetColor(12632256);
        this.FOldLineColor = this.FAppearance.FLineStroke.FColor;
        this.FAppearance.FLineStroke.SetColor(12632256);
        this.FOldTickMarkColor = this.FAppearance.FTickMarkStroke.FColor;
        this.FAppearance.FTickMarkStroke.SetColor(12632256);
        this.FOldButtonDownColor = this.FAppearance.FButtonDownStroke.FColor;
        this.FAppearance.FButtonDownStroke.SetColor(12632256);
        this.FOldThumbDownColor = this.FAppearance.FThumbDownStroke.FColor;
        this.FAppearance.FThumbDownStroke.SetColor(12632256);
        this.FOldThumbRightDownColor = this.FAppearance.FThumbRightDownStroke.FColor;
        this.FAppearance.FThumbRightDownStroke.SetColor(12632256);
        this.FOldButtonFill = this.FAppearance.FButtonFill.FColor;
        this.FAppearance.FButtonFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(240,240,240));
        this.FOldThumbFill = this.FAppearance.FThumbFill.FColor;
        this.FAppearance.FThumbFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(240,240,240));
        this.FOldThumbRightFill = this.FAppearance.FThumbRightFill.FColor;
        this.FAppearance.FThumbRightFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(240,240,240));
        this.FOldLineFill = this.FAppearance.FLineFill.FColor;
        this.FAppearance.FLineFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(240,240,240));
        this.FOldButtonDownFill = this.FAppearance.FButtonDownFill.FColor;
        this.FAppearance.FButtonDownFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(240,240,240));
        this.FOldThumbDownFill = this.FAppearance.FThumbDownFill.FColor;
        this.FAppearance.FThumbDownFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(240,240,240));
        this.FOldThumbRightDownFill = this.FAppearance.FThumbRightDownFill.FColor;
        this.FAppearance.FThumbRightDownFill.SetColor(pas["WEBLib.TMSFNCGraphicsTypes"].MakeGraphicsColor(240,240,240));
      };
      this.Invalidate();
    };
    this.ApplyStyle = function () {
      var c = 0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ApplyStyle.call(this);
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleBackgroundFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FFill.SetColor(c);
        this.FAppearance.FLineFill.SetColor(c);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleAlternativeBackgroundFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FButtonFill.SetColor(c);
        this.FAppearance.FThumbFill.SetColor(c);
        this.FAppearance.FThumbRightFill.SetColor(c);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleLineFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        this.FAppearance.FLineStroke.SetColor(c);
        this.FAppearance.FButtonStroke.SetColor(c);
        this.FAppearance.FThumbStroke.SetColor(c);
        this.FAppearance.FThumbDownStroke.SetColor(c);
        this.FAppearance.FThumbRightStroke.SetColor(c);
        this.FAppearance.FThumbRightDownStroke.SetColor(c);
        this.FAppearance.FTickMarkStroke.SetColor(c);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleSelectionFillColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FButtonDownFill.SetColor(c);
        this.FAppearance.FThumbDownFill.SetColor(c);
        this.FAppearance.FThumbRightDownFill.SetColor(c);
      };
      c = -1;
      if (pas["WEBLib.TMSFNCStyles"].TTMSFNCStyles.GetStyleTextFontColor({get: function () {
          return c;
        }, set: function (v) {
          c = v;
        }})) {
        this.FAppearance.FValueFont.SetColor(c);
      };
    };
    this.ResetToDefaultStyle = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.ResetToDefaultStyle.call(this);
      this.FFill.SetColor(16777215);
      this.FAppearance.FLineFill.SetColor(16777215);
      this.FAppearance.FButtonFill.SetColor(16777215);
      this.FAppearance.FThumbFill.SetColor(16777215);
      this.FAppearance.FThumbRightFill.SetColor(16777215);
      this.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskSolid);
      this.FAppearance.FLineStroke.SetColor(12632256);
      this.FAppearance.FButtonStroke.SetColor(12632256);
      this.FAppearance.FThumbStroke.SetColor(12632256);
      this.FAppearance.FThumbDownStroke.SetColor(12632256);
      this.FAppearance.FThumbRightStroke.SetColor(12632256);
      this.FAppearance.FThumbRightDownStroke.SetColor(12632256);
      this.FAppearance.FTickMarkStroke.SetColor(12632256);
      this.FAppearance.FButtonDownFill.SetColor(16777215);
      this.FAppearance.FThumbDownFill.SetColor(16777215);
      this.FAppearance.FThumbRightDownFill.SetColor(16777215);
      this.FAppearance.FValueFont.SetColor(0);
    };
    this.AppearanceChanged = function (Sender) {
      this.DoChanged();
    };
    this.InteractionChanged = function (Sender) {
      this.DoChanged();
    };
    this.DoChanged = function () {
      if (this.FOnChanged != null) this.FOnChanged(this);
      this.Invalidate();
    };
    this.Draw = function (AGraphics, ARect) {
      var minBtnRect = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var maxBtnRect = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var trackRect = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Draw.apply(this,arguments);
      minBtnRect.$assign(this.GetMinButtonRect());
      this.DrawMinusButton(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(minBtnRect));
      maxBtnRect.$assign(this.GetMaxButtonRect());
      this.DrawPlusButton(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(maxBtnRect));
      trackRect.$assign(this.GetTrackLineRect());
      this.DrawTrackLine(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(trackRect));
      trackRect.$assign(this.GetTickTopLeftRect());
      this.DrawTickLines(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(trackRect));
      this.DrawTickLinesText(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(trackRect),true);
      trackRect.$assign(this.GetTickBottomRightRect());
      this.DrawTickLines(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(trackRect));
      this.DrawTickLinesText(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(trackRect),false);
      trackRect.$assign(this.GetTrackLabelRect());
      this.DrawTrackLabel(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(trackRect));
      this.DrawTrackSliders(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
    };
    this.DoBeforeDrawButton = function (AGraphics, ARect, APlus, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawButton != null) this.FOnBeforeDrawButton(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),APlus,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawButton = function (AGraphics, ARect, APlus) {
      if (this.FOnAfterDrawButton != null) this.FOnAfterDrawButton(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),APlus);
    };
    this.DoBeforeDrawTrackLine = function (AGraphics, ARect, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawTrackLine != null) this.FOnBeforeDrawTrackLine(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AAllow,ADefaultDraw);
    };
    this.DoAfterDrawTrackLine = function (AGraphics, ARect) {
      if (this.FOnAfterDrawTrackLine != null) this.FOnAfterDrawTrackLine(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
    };
    this.DoBeforeDrawTickMarks = function (AGraphics, ARect, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawTickMarks != null) this.FOnBeforeDrawTickMarks(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AAllow,ADefaultDraw);
    };
    this.DoAfterDrawTickMarks = function (AGraphics, ARect) {
      if (this.FOnAfterDrawTickMarks != null) this.FOnAfterDrawTickMarks(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
    };
    this.DoBeforeDrawTickLabel = function (AGraphics, APosition, AValue, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawTickLabel != null) this.FOnBeforeDrawTickLabel(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(APosition),AValue,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawTickLabel = function (AGraphics, APosition, AValue) {
      if (this.FOnAfterDrawTickLabel != null) this.FOnAfterDrawTickLabel(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(APosition),AValue);
    };
    this.DoBeforeDrawTrackLabel = function (AGraphics, ARect, ALabel, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawTrackLabel != null) this.FOnBeforeDrawTrackLabel(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),ALabel,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawTrackLabel = function (AGraphics, ARect, ALabel) {
      if (this.FOnAfterDrawTrackLabel != null) this.FOnAfterDrawTrackLabel(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),ALabel);
    };
    this.DoValuesChanged = function (AValue, ALeft) {
      if (this.FOnValuesChanged != null) this.FOnValuesChanged(this,AValue,ALeft);
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      var rl = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var rr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseDown.apply(this,arguments);
      rl.$assign(this.GetSliderRect(true));
      rr.$assign(this.GetSliderRect(false));
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(rl,pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        this.CaptureEx();
        this.FMouseDown = true;
        this.FLeftSlider = true;
        this.Invalidate();
        return;
      };
      rr.$assign(this.GetSliderRect(false));
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(rr,pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        this.CaptureEx();
        this.FMouseDown = true;
        this.FRightSlider = true;
      };
      this.Invalidate();
    };
    this.HandleMouseMove = function (Shift, X, Y) {
      var v = 0.0;
      var tmp = 0.0;
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseMove.apply(this,arguments);
      if (!this.FMouseDown) return;
      if (this.FLeftSlider) {
        v = this.CalcValue(X,Y,true);
        if (this.FValues.Left < v) {
          if ((v > (this.FValues.Left + this.FInteraction.FFrequency)) && ((this.FValues.Left + this.FInteraction.FFrequency) < this.FValues.Right)) {
            tmp = pas.System.Trunc(v / this.FInteraction.FFrequency) * this.FInteraction.FFrequency;
            this.FValues.Left = this.ClosestTo(v,tmp,tmp + 1);
          } else this.FValues.Left = this.ClosestTo(v,this.FValues.Left,this.FValues.Left + this.FInteraction.FFrequency);
          this.DoValuesChanged(this.FValues.Left,true);
          this.DoChanged();
        } else if (this.FValues.Left > v) {
          if ((v < (this.FValues.Left - this.FInteraction.FFrequency)) && ((this.FValues.Left - this.FInteraction.FFrequency) > this.FMin)) {
            tmp = pas.System.Trunc(v / this.FInteraction.FFrequency) * this.FInteraction.FFrequency;
            this.FValues.Left = this.ClosestTo(v,tmp,tmp + 1);
          } else this.FValues.Left = this.ClosestTo(v,this.FValues.Left,this.FValues.Left - this.FInteraction.FFrequency);
          this.DoValuesChanged(this.FValues.Left,true);
          this.DoChanged();
        };
        return;
      };
      if (this.FRightSlider) {
        v = this.CalcValue(X,Y,false);
        if (this.FValues.Right < v) {
          if ((v > (this.FValues.Right + this.FInteraction.FFrequency)) && ((this.FValues.Right + this.FInteraction.FFrequency) < this.FMax)) {
            tmp = pas.System.Trunc(v / this.FInteraction.FFrequency) * this.FInteraction.FFrequency;
            this.FValues.Right = this.ClosestTo(v,tmp,tmp + 1);
          } else this.FValues.Right = this.ClosestTo(v,this.FValues.Right,this.FValues.Right + this.FInteraction.FFrequency);
          this.DoValuesChanged(this.FValues.Right,false);
          this.DoChanged();
        } else if (this.FValues.Right > v) {
          if ((v < (this.FValues.Right - this.FInteraction.FFrequency)) && ((this.FValues.Right - this.FInteraction.FFrequency) > this.FValues.Left)) {
            tmp = pas.System.Trunc(v / this.FInteraction.FFrequency) * this.FInteraction.FFrequency;
            this.FValues.Right = this.ClosestTo(v,tmp,tmp + 1);
          } else this.FValues.Right = this.ClosestTo(v,this.FValues.Right,this.FValues.Right - this.FInteraction.FFrequency);
          this.DoValuesChanged(this.FValues.Right,false);
          this.DoChanged();
        };
      };
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseUp.apply(this,arguments);
      this.FMouseDown = false;
      this.FPlusDown = false;
      this.FMinusDown = false;
      this.FLeftSlider = false;
      this.FRightSlider = false;
      this.ReleaseCaptureEx();
      this.Invalidate();
    };
    this.DrawPlusButton = function (AGraphics, ARect) {
      var l = 0.0;
      var hc = 0.0;
      var vc = 0.0;
      var b = false;
      var df = false;
      var bmp = null;
      if (this.FPlusDown) {
        AGraphics.FFill.Assign(this.FAppearance.FButtonDownFill);
        AGraphics.FStroke.Assign(this.FAppearance.FButtonDownStroke);
        bmp = this.FAppearance.FPlusButtonDownBitmap;
      } else {
        AGraphics.FFill.Assign(this.FAppearance.FButtonFill);
        AGraphics.FStroke.Assign(this.FAppearance.FButtonStroke);
        bmp = this.FAppearance.FPlusButtonBitmap;
      };
      b = true;
      df = true;
      this.DoBeforeDrawButton(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),true,{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) {
          var $tmp1 = this.FAppearance.FButtonShape;
          if ($tmp1 === $mod.TTMSFNCTrackBarAppearanceButtonShape.bsRounded) {
            AGraphics.DrawEllipse$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll)}
           else if ($tmp1 === $mod.TTMSFNCTrackBarAppearanceButtonShape.bsRectangle) {
            AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll)}
           else if ($tmp1 === $mod.TTMSFNCTrackBarAppearanceButtonShape.bsImage) {
            if (bmp != null) AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),bmp,true,false,true,false);
          };
          if ((this.FAppearance.FButtonShape !== $mod.TTMSFNCTrackBarAppearanceButtonShape.bsImage) && (this.FAppearance.FButtonShape !== $mod.TTMSFNCTrackBarAppearanceButtonShape.bsNone)) {
            l = Math.min(ARect.Right - ARect.Left,ARect.Bottom - ARect.Top);
            hc = (ARect.Right - ARect.Left) / 2;
            vc = (ARect.Bottom - ARect.Top) / 2;
            AGraphics.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF((ARect.Left + hc) - (l / 4),ARect.Top + vc)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left + hc + (l / 4),ARect.Top + vc)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            AGraphics.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left + hc,(ARect.Top + vc) - (l / 4))),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left + hc,ARect.Top + vc + (l / 4))),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          };
        };
        this.DoAfterDrawButton(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),true);
      };
    };
    this.DrawMinusButton = function (AGraphics, ARect) {
      var l = 0.0;
      var hc = 0.0;
      var vc = 0.0;
      var b = false;
      var df = false;
      var bmp = null;
      if (this.FMinusDown) {
        AGraphics.FFill.Assign(this.FAppearance.FButtonDownFill);
        AGraphics.FStroke.Assign(this.FAppearance.FButtonDownStroke);
        bmp = this.FAppearance.FMinButtonDownBitmap;
      } else {
        AGraphics.FFill.Assign(this.FAppearance.FButtonFill);
        AGraphics.FStroke.Assign(this.FAppearance.FButtonStroke);
        bmp = this.FAppearance.FMinButtonBitmap;
      };
      b = true;
      df = true;
      this.DoBeforeDrawButton(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),false,{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) {
          var $tmp1 = this.FAppearance.FButtonShape;
          if ($tmp1 === $mod.TTMSFNCTrackBarAppearanceButtonShape.bsRounded) {
            AGraphics.DrawEllipse$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll)}
           else if ($tmp1 === $mod.TTMSFNCTrackBarAppearanceButtonShape.bsRectangle) {
            AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll)}
           else if ($tmp1 === $mod.TTMSFNCTrackBarAppearanceButtonShape.bsImage) {
            if (bmp != null) AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),bmp,true,false,true,false);
          };
          if ((this.FAppearance.FButtonShape !== $mod.TTMSFNCTrackBarAppearanceButtonShape.bsImage) && (this.FAppearance.FButtonShape !== $mod.TTMSFNCTrackBarAppearanceButtonShape.bsNone)) {
            l = Math.min(ARect.Right - ARect.Left,ARect.Bottom - ARect.Top);
            hc = (ARect.Right - ARect.Left) / 2;
            vc = (ARect.Bottom - ARect.Top) / 2;
            AGraphics.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF((ARect.Left + hc) - (l / 4),ARect.Top + vc)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left + hc + (l / 4),ARect.Top + vc)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
          };
        };
        this.DoAfterDrawButton(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),false);
      };
    };
    this.DrawTrackLine = function (AGraphics, ARect) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var b = false;
      var df = false;
      r.$assign(this.GetTrackLineDrawRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect)));
      AGraphics.FFill.Assign(this.FAppearance.FLineFill);
      AGraphics.FStroke.Assign(this.FAppearance.FLineStroke);
      b = true;
      df = true;
      this.DoBeforeDrawTrackLine(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) {
          var $tmp1 = this.FAppearance.FLineShape;
          if ($tmp1 === $mod.TTMSFNCCustomTrackBarBaseLineShape.lsRectangle) {
            AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll)}
           else if ($tmp1 === $mod.TTMSFNCCustomTrackBarBaseLineShape.lsRoundedRectangle) {
            AGraphics.DrawRoundRectangle$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),3,rtl.createSet(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcTopRight,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomLeft,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsCorner.gcBottomRight),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll)}
           else if ($tmp1 === $mod.TTMSFNCCustomTrackBarBaseLineShape.lsImage) AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FAppearance.FLineBitmap,true,false,true,false);
        };
        this.DoAfterDrawTrackLine(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
      };
    };
    this.DrawTickLines = function (AGraphics, ARect) {
      var tr = 0.0;
      var b = 0.0;
      var l = 0.0;
      var w = 0.0;
      var I = 0;
      var bf = false;
      var df = false;
      if ((this.FAppearance.FTickMarkPosition === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpNone) || (this.FAppearance.FTickMarkDivision === 0)) return;
      w = 0;
      var $tmp1 = this.FAppearance.FOrientation;
      if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
        w = ARect.Right - ARect.Left}
       else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) w = ARect.Bottom - ARect.Top;
      if (w === 0) return;
      w = w / this.FAppearance.FTickMarkDivision;
      AGraphics.FStroke.Assign(this.FAppearance.FTickMarkStroke);
      bf = true;
      df = true;
      this.DoBeforeDrawTickMarks(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),{get: function () {
          return bf;
        }, set: function (v) {
          bf = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (df) {
        b = ARect.Bottom;
        l = ARect.Left;
        var $tmp2 = this.FAppearance.FOrientation;
        if ($tmp2 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
          tr = ARect.Top;
          for (var $l3 = 0, $end4 = this.FAppearance.FTickMarkDivision; $l3 <= $end4; $l3++) {
            I = $l3;
            AGraphics.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(l,tr)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(l,b)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            l = l + w;
          };
        } else if ($tmp2 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) {
          tr = ARect.Right;
          for (var $l5 = 0, $end6 = this.FAppearance.FTickMarkDivision; $l5 <= $end6; $l5++) {
            I = $l5;
            AGraphics.DrawLine$1(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(l,b)),pas["WEBLib.TMSFNCTypes"].TPointF.$clone(pas["WEBLib.TMSFNCTypes"].PointF(tr,b)),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyPointMode.gcpmRightDown);
            b = b - w;
          };
        };
      };
      this.DoAfterDrawTickMarks(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect));
    };
    this.DrawTickLinesText = function (AGraphics, ARect, ATopLeft) {
      var p = pas["WEBLib.TMSFNCTypes"].TPointF.$new();
      var w = 0.0;
      var h = 0.0;
      var val = 0.0;
      var tmp = 0.0;
      var tmspacing = 0.0;
      var s = "";
      var I = 0;
      var divn = 0;
      var b = false;
      var df = false;
      if ((((ARect.Right - ARect.Left) === 0) && ((ARect.Top - ARect.Bottom) === 0)) || !this.FAppearance.FTickMarkLabel) return;
      val = this.FMin;
      tmp = 0;
      divn = this.FAppearance.FTickMarkDivision;
      tmspacing = 0;
      if (((ARect.Right - ARect.Left) !== 0) && ((ARect.Top - ARect.Bottom) !== 0)) tmspacing = 4;
      if (ATopLeft) {
        if (this.FAppearance.FOrientation === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
          if (this.FAppearance.FTickMarkPosition === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpBottomRight) return;
          for (var $l1 = 0, $end2 = divn; $l1 <= $end2; $l1++) {
            I = $l1;
            s = pas.SysUtils.Format(this.FAppearance.FTickMarkLabelFormat,[val]);
            w = AGraphics.CalculateTextWidth$1(s) / 2;
            h = AGraphics.CalculateTextHeight$1(s);
            p.$assign(pas["WEBLib.TMSFNCTypes"].PointF((ARect.Left - w) + tmp,ARect.Top - tmspacing - h));
            b = true;
            df = true;
            this.DoBeforeDrawTickLabel(AGraphics,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),val,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }},{get: function () {
                return df;
              }, set: function (v) {
                df = v;
              }});
            if (b) {
              if (df) AGraphics.DrawText(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),s,0,true,false,-1,-1);
              this.DoAfterDrawTickLabel(AGraphics,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),val);
            };
            val = val + ((this.FMax - this.FMin) / divn);
            tmp = tmp + ((ARect.Right - ARect.Left) / divn);
          };
        } else {
          if (this.FAppearance.FTickMarkPosition === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpBottomRight) return;
          for (var $l3 = 0, $end4 = divn; $l3 <= $end4; $l3++) {
            I = $l3;
            s = pas.SysUtils.Format(this.FAppearance.FTickMarkLabelFormat,[val]);
            w = AGraphics.CalculateTextWidth$1(s);
            h = AGraphics.CalculateTextHeight$1(s) / 2;
            p.$assign(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Left - tmspacing - w,ARect.Bottom - h - tmp));
            b = true;
            df = true;
            this.DoBeforeDrawTickLabel(AGraphics,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),val,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }},{get: function () {
                return df;
              }, set: function (v) {
                df = v;
              }});
            if (b) {
              if (df) AGraphics.DrawText(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),s,0,true,false,-1,-1);
              this.DoAfterDrawTickLabel(AGraphics,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),val);
            };
            val = val + ((this.FMax - this.FMin) / divn);
            tmp = tmp + ((ARect.Bottom - ARect.Top) / divn);
          };
        };
      } else {
        if (this.FAppearance.FOrientation === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
          if (this.FAppearance.FTickMarkPosition === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpTopLeft) return;
          for (var $l5 = 0, $end6 = divn; $l5 <= $end6; $l5++) {
            I = $l5;
            s = pas.SysUtils.Format(this.FAppearance.FTickMarkLabelFormat,[val]);
            w = AGraphics.CalculateTextWidth$1(s) / 2;
            p.$assign(pas["WEBLib.TMSFNCTypes"].PointF((ARect.Left - w) + tmp,ARect.Bottom + tmspacing));
            b = true;
            df = true;
            this.DoBeforeDrawTickLabel(AGraphics,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),val,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }},{get: function () {
                return df;
              }, set: function (v) {
                df = v;
              }});
            if (b) {
              if (df) AGraphics.DrawText(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),s,0,true,false,-1,-1);
              this.DoAfterDrawTickLabel(AGraphics,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),val);
            };
            val = val + ((this.FMax - this.FMin) / divn);
            tmp = tmp + ((ARect.Right - ARect.Left) / divn);
          };
        } else {
          if (this.FAppearance.FTickMarkPosition === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpTopLeft) return;
          for (var $l7 = 0, $end8 = divn; $l7 <= $end8; $l7++) {
            I = $l7;
            s = pas.SysUtils.Format(this.FAppearance.FTickMarkLabelFormat,[val]);
            h = AGraphics.CalculateTextHeight$1(s) / 2;
            p.$assign(pas["WEBLib.TMSFNCTypes"].PointF(ARect.Right + tmspacing,ARect.Bottom - h - tmp));
            b = true;
            df = true;
            this.DoBeforeDrawTickLabel(AGraphics,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),val,{get: function () {
                return b;
              }, set: function (v) {
                b = v;
              }},{get: function () {
                return df;
              }, set: function (v) {
                df = v;
              }});
            if (b) {
              if (df) AGraphics.DrawText(pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),s,0,true,false,-1,-1);
              this.DoAfterDrawTickLabel(AGraphics,pas["WEBLib.TMSFNCTypes"].TPointF.$clone(p),val);
            };
            val = val + ((this.FMax - this.FMin) / divn);
            tmp = tmp + ((ARect.Bottom - ARect.Top) / divn);
          };
        };
      };
    };
    this.DrawTrackLabel = function (AGraphics, ARect) {
      var s = "";
      var b = false;
      var df = false;
      if (((ARect.Bottom - ARect.Top) === 0) || ((ARect.Right - ARect.Left) === 0)) return;
      s = pas.SysUtils.Format(this.FAppearance.FTrackLabelFormat,[this.FValues.Left,this.FValues.Right]);
      b = true;
      df = true;
      this.DoBeforeDrawTrackLabel(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),s,{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) {
          var $tmp1 = this.FAppearance.FOrientation;
          if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
            AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),s,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1)}
           else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),s,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaLeading,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,-90,-1,-1,true,false,-1,-1);
        };
        this.DoAfterDrawTrackLabel(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),s);
      };
    };
    this.DrawTrackSliders = function (AGraphics, ARect) {
    };
    this.ClosestTo = function (ATarget, AFirstValue, ASecondValue) {
      var Result = 0.0;
      if (Math.abs(ATarget - AFirstValue) <= Math.abs(ATarget - ASecondValue)) {
        Result = AFirstValue}
       else Result = ASecondValue;
      return Result;
    };
    this.GetMaxButtonRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      return Result;
    };
    this.GetMinButtonRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      return Result;
    };
    this.GetSliderRect = function (ALeft) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var x = 0.0;
      var y = 0.0;
      var sw = 0.0;
      var sh = 0.0;
      var tw = 0.0;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if ((this.FMax - this.FMin) !== 0) {
        if (ALeft) {
          x = (this.FValues.Left - this.FMin) / (this.FMax - this.FMin)}
         else x = (this.FValues.Right - this.FMin) / (this.FMax - this.FMin);
      } else x = this.FMax;
      if (ALeft) {
        sw = this.FAppearance.FThumbWidth / 2;
        sh = this.FAppearance.FThumbHeight / 2;
      } else {
        sw = this.FAppearance.FThumbRightWidth / 2;
        sh = this.FAppearance.FThumbRightHeight / 2;
      };
      r.$assign(this.GetTrackLineRect());
      tw = this.GetThumbWidth() / 2;
      var $tmp1 = this.FAppearance.FOrientation;
      if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-tw,0);
        x = r.Left + ((r.Right - r.Left) * x);
        y = r.Top + ((r.Bottom - r.Top) / 2);
        Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(x - sw,y - sh,x + sw,y + sh));
      } else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) {
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,0,-tw);
        x = r.Top + ((r.Bottom - r.Top) * (1 - x));
        y = r.Left + ((r.Right - r.Left) / 2);
        Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(y - sh,x - sw,y + sh,x + sw));
      };
      return Result;
    };
    this.GetThumbWidth = function () {
      var Result = 0.0;
      Result = 0;
      return Result;
    };
    this.GetTrackLineRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var br = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var cr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var bw = 0.0;
      var bh = 0.0;
      br.$assign(this.GetMaxButtonRect());
      cr.$assign(this.GetContentRect());
      bw = br.Right - br.Left;
      bh = br.Bottom - br.Top;
      var $tmp1 = this.FAppearance.FOrientation;
      if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
        Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left + bw + 4,cr.Top,cr.Right - bw - 4,cr.Bottom))}
       else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Top + bh + 4,cr.Right,cr.Bottom - bh - 4));
      return Result;
    };
    this.GetTrackLineDrawRect = function (ARect) {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var h = 0.0;
      var w = 0.0;
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      w = this.FAppearance.FLineWidth / 2;
      var $tmp1 = this.FAppearance.FOrientation;
      if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
        h = (ARect.Bottom - ARect.Top) / 2;
        Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(ARect.Left,(ARect.Top + h) - w,ARect.Right,ARect.Top + h + w));
      } else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) {
        h = (ARect.Right - ARect.Left) / 2;
        Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF((ARect.Left + h) - w,ARect.Top,ARect.Left + h + w,ARect.Bottom));
      };
      return Result;
    };
    this.GetTickTopLeftRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var tw = 0.0;
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      r.$assign(this.GetTrackLineDrawRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(this.GetTrackLineRect())));
      tw = this.GetThumbWidth() / 2;
      var $tmp1 = this.FAppearance.FOrientation;
      if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-tw,0);
        var $tmp2 = this.FAppearance.FTickMarkPosition;
        if (($tmp2 === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpBoth) || ($tmp2 === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpTopLeft)) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Top - this.FAppearance.FTickMarkSpacing - this.FAppearance.FTickMarkSize,r.Right,r.Top - this.FAppearance.FTickMarkSpacing));
      } else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) {
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,0,-tw);
        var $tmp3 = this.FAppearance.FTickMarkPosition;
        if (($tmp3 === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpBoth) || ($tmp3 === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpTopLeft)) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left - this.FAppearance.FTickMarkSpacing - this.FAppearance.FTickMarkSize,r.Top,r.Left - this.FAppearance.FTickMarkSpacing,r.Bottom));
      };
      return Result;
    };
    this.GetTickBottomRightRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var tw = 0.0;
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      r.$assign(this.GetTrackLineDrawRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(this.GetTrackLineRect())));
      tw = this.GetThumbWidth() / 2;
      var $tmp1 = this.FAppearance.FOrientation;
      if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-tw,0);
        var $tmp2 = this.FAppearance.FTickMarkPosition;
        if (($tmp2 === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpBoth) || ($tmp2 === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpBottomRight)) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Bottom + this.FAppearance.FTickMarkSpacing,r.Right,r.Bottom + this.FAppearance.FTickMarkSpacing + this.FAppearance.FTickMarkSize))}
         else if ($tmp2 === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpNone) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,r.Bottom + this.FAppearance.FTickMarkSpacing,r.Right,r.Bottom + this.FAppearance.FTickMarkSpacing));
      } else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) {
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,0,-tw);
        var $tmp3 = this.FAppearance.FTickMarkPosition;
        if (($tmp3 === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpBoth) || ($tmp3 === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpBottomRight)) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Right + this.FAppearance.FTickMarkSpacing,r.Top,r.Right + this.FAppearance.FTickMarkSpacing + this.FAppearance.FTickMarkSize,r.Bottom))}
         else if ($tmp3 === $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpNone) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Right + this.FAppearance.FTickMarkSpacing,r.Top,r.Right + this.FAppearance.FTickMarkSpacing,r.Bottom));
      };
      return Result;
    };
    this.GetTrackLabelRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var tl = 0.0;
      var tw = 0.0;
      var th = 0.0;
      var cp = 0.0;
      var dr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var s = "";
      var g = null;
      Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      if (this.FAppearance.FTrackLabelPosition === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpNone) return Result;
      dr.$assign(this.GetTrackLineDrawRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(this.GetTrackLineRect())));
      s = pas.SysUtils.Format(this.FAppearance.FTrackLabelFormat,[this.FValues.Left,this.FValues.Right]);
      g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[1,1,false,true]);
      try {
        tw = g.CalculateTextWidth$1(s);
        th = g.CalculateTextHeight$1(s);
      } finally {
        g = rtl.freeLoc(g);
      };
      var $tmp1 = this.FAppearance.FOrientation;
      if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
        tl = this.GetTrackLabelTopLeft(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(dr),th);
        cp = dr.Left + ((dr.Right - dr.Left) / 2);
        var $tmp2 = this.FAppearance.FTrackLabelPosition;
        if (($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpTopLeft) || ($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpBottomLeft)) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(dr.Left,tl,dr.Left + tw,tl + th))}
         else if (($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpTopCenter) || ($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpBottomCenter)) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cp - (tw / 2),tl,cp + (tw / 2),tl + th))}
         else if (($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpTopRight) || ($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpBottomRight)) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(dr.Right - tw,tl,dr.Right,tl + th));
      } else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) {
        tl = this.GetTrackLabelTopLeft(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(dr),th);
        cp = dr.Bottom - ((dr.Bottom - dr.Top) / 2);
        var $tmp3 = this.FAppearance.FTrackLabelPosition;
        if (($tmp3 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpTopLeft) || ($tmp3 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpBottomLeft)) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(tl,dr.Bottom - tw,tl + th,dr.Bottom))}
         else if (($tmp3 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpTopCenter) || ($tmp3 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpBottomCenter)) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(tl,cp - (tw / 2),tl + th,cp + (tw / 2)))}
         else if (($tmp3 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpTopRight) || ($tmp3 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpBottomRight)) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(tl,dr.Top,tl + th,dr.Top + tw));
      };
      return Result;
    };
    this.GetTrackLabelTopLeft = function (ATrackRect, ATextHeight) {
      var Result = 0.0;
      var tl = 0.0;
      var br = 0.0;
      var g = null;
      Result = 0;
      tl = 0;
      br = 0;
      var $tmp1 = this.FAppearance.FOrientation;
      if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
        tl = ATrackRect.Top;
        br = ATrackRect.Bottom;
      } else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) {
        tl = ATrackRect.Left;
        br = ATrackRect.Right;
      };
      var $tmp2 = this.FAppearance.FTrackLabelPosition;
      if (($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpTopLeft) || ($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpTopCenter) || ($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpTopRight)) {
        br = 0;
        Result = tl - 4 - ATextHeight;
        if ((this.FAppearance.FTickMarkPosition !== $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpNone) && (this.FAppearance.FTickMarkPosition !== $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpBottomRight)) br = Result - this.FAppearance.FTickMarkSpacing - this.FAppearance.FTickMarkSize;
        if (br !== 0) Result = br;
        if (this.FAppearance.FTickMarkLabel && (br !== 0)) {
          g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[1,1,false,true]);
          try {
            br = g.CalculateTextWidth$1(pas.SysUtils.Format(this.FAppearance.FTickMarkLabelFormat,[this.FMax]));
          } finally {
            g = rtl.freeLoc(g);
          };
          Result = Result - br - 4;
        };
      } else if (($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpBottomLeft) || ($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpBottomCenter) || ($tmp2 === $mod.TTMSFNCCustomTrackBarTrackLabelPosition.tlpBottomRight)) {
        tl = 0;
        Result = br + 4;
        if ((this.FAppearance.FTickMarkPosition !== $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpNone) && (this.FAppearance.FTickMarkPosition !== $mod.TTMSFNCTrackBarAppearanceTickMarkPosition.tmpTopLeft)) tl = Result + this.FAppearance.FTickMarkSpacing + this.FAppearance.FTickMarkSize;
        if (tl !== 0) Result = tl;
        if (this.FAppearance.FTickMarkLabel && (tl !== 0)) {
          g = pas["WEBLib.TMSFNCGraphics"].TTMSFNCGraphics.$create("CreateBitmapCanvas",[1,1,false,true]);
          try {
            tl = g.CalculateTextWidth$1(pas.SysUtils.Format(this.FAppearance.FTickMarkLabelFormat,[this.FMax]));
          } finally {
            g = rtl.freeLoc(g);
          };
          Result = Result + tl + 4;
        };
      };
      return Result;
    };
    this.CalcValue = function (AX, AY, ALeft) {
      var Result = 0.0;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var d = 0.0;
      var w = 0.0;
      var tw = 0.0;
      Result = 0;
      d = this.FMax - this.FMin;
      if (d === 0) d = 1;
      r.$assign(this.GetTrackLineRect());
      tw = this.GetThumbWidth() / 2;
      var $tmp1 = this.FAppearance.FOrientation;
      if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,-tw,0);
        w = r.Right - r.Left;
        if (w === 0) w = 1;
        Result = (((AX - r.Left) * d) / w) + this.FMin;
      } else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) {
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,0,-tw);
        w = r.Bottom - r.Top;
        if (w === 0) w = 1;
        Result = (d - (((AY - r.Top) * d) / w)) + this.FMin;
      };
      if (ALeft) {
        if (Result < this.FMin) {
          Result = this.FMin}
         else if (Result > this.FValues.Right) Result = this.FValues.Right;
      } else {
        if (Result < this.FValues.Left) {
          Result = this.FValues.Left}
         else if (Result > this.FMax) Result = this.FMax;
      };
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Create$1.apply(this,arguments);
      this.FMin = 0;
      this.FMax = 100;
      this.FMouseDown = false;
      this.FPlusDown = false;
      this.FMinusDown = false;
      this.FAppearance = $mod.TTMSFNCCustomTrackBarBaseAppearance.$create("Create$1",[this]);
      this.FAppearance.FOnChange = rtl.createCallback(this,"AppearanceChanged");
      this.FInteraction = $mod.TTMSFNCCustomTrackBarBaseInteraction.$create("Create$1",[this]);
      this.FInteraction.FOnChange = rtl.createCallback(this,"InteractionChanged");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FAppearance");
      rtl.free(this,"FInteraction");
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.Destroy.call(this);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarValueChangedEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AValue",rtl.double]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarBeforeDrawThumbEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomTrackBarAfterDrawThumbEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomTrackBar",$mod.TTMSFNCCustomTrackBarBase,function () {
    this.$init = function () {
      $mod.TTMSFNCCustomTrackBarBase.$init.call(this);
      this.FOnValueChanged = null;
      this.FOnBeforeDrawThumb = null;
      this.FOnAfterDrawThumb = null;
      this.FTrackInteraction = null;
      this.FTrackAppearance = null;
      this.FRepeatTimer = null;
      this.FTrackDown = false;
      this.FToValue = 0.0;
    };
    this.$final = function () {
      this.FOnValueChanged = undefined;
      this.FOnBeforeDrawThumb = undefined;
      this.FOnAfterDrawThumb = undefined;
      this.FTrackInteraction = undefined;
      this.FTrackAppearance = undefined;
      this.FRepeatTimer = undefined;
      $mod.TTMSFNCCustomTrackBarBase.$final.call(this);
    };
    this.SetValue = function (AValue) {
      if (this.FValues.Left !== AValue) {
        this.FValues.Left = AValue;
        this.DoValuesChanged(this.FValues.Left,true);
        this.DoChanged();
      };
    };
    this.SetMax = function (AValue) {
      $mod.TTMSFNCCustomTrackBarBase.SetMax.apply(this,arguments);
      this.FValues.Right = AValue;
    };
    this.SetTrackInteraction = function (AValue) {
      this.FTrackInteraction.Assign(AValue);
    };
    this.SetTrackAppearance = function (AValue) {
      this.FTrackAppearance.Assign(AValue);
    };
    this.IsValueStored = function () {
      var Result = false;
      Result = this.FValues.Left !== 0.0;
      return Result;
    };
    this.GetValue = function () {
      var Result = 0.0;
      Result = this.FValues.Left;
      return Result;
    };
    this.DrawTrackSliders = function (AGraphics, ARect) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var b = false;
      var df = false;
      var bmp = null;
      $mod.TTMSFNCCustomTrackBarBase.DrawTrackSliders.apply(this,arguments);
      r.$assign(this.GetSliderRect(true));
      if (this.FLeftSlider) {
        AGraphics.FFill.Assign(this.FAppearance.FThumbDownFill);
        AGraphics.FStroke.Assign(this.FAppearance.FThumbDownStroke);
        bmp = this.FAppearance.FThumbDownBitmap;
      } else {
        AGraphics.FFill.Assign(this.FAppearance.FThumbFill);
        AGraphics.FStroke.Assign(this.FAppearance.FThumbStroke);
        bmp = this.FAppearance.FThumbBitmap;
      };
      b = true;
      df = true;
      this.DoBeforeDrawThumb(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),this.FValues.Left,{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) {
          var $tmp1 = this.FAppearance.FThumbShape;
          if ($tmp1 === $mod.TTMSFNCCustomTrackBarBaseShape.tsRectangle) {
            AGraphics.DrawRectangle$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll)}
           else if ($tmp1 === $mod.TTMSFNCCustomTrackBarBaseShape.tsEllipse) {
            AGraphics.DrawEllipse$2(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsModifyRectMode.gcrmShrinkAll)}
           else if ($tmp1 === $mod.TTMSFNCCustomTrackBarBaseShape.tsImage) {
            if (bmp != null) AGraphics.DrawBitmap$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r),bmp,true,false,true,false);
          };
        };
        this.DoAfterDrawThumb(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),this.FValues.Left);
      };
    };
    this.DoBeforeDrawThumb = function (AGraphics, ARect, AValue, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawThumb != null) this.FOnBeforeDrawThumb(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AValue,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawThumb = function (AGraphics, ARect, AValue) {
      if (this.FOnAfterDrawThumb != null) this.FOnAfterDrawThumb(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AValue);
    };
    this.HandleMouseDown = function (Button, Shift, X, Y) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var tr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var v = 0.0;
      $mod.TTMSFNCCustomTrackBarBase.HandleMouseDown.apply(this,arguments);
      tr.$assign(this.GetMaxOfThumbAndTrackRect());
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(tr,pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        this.FToValue = this.CalcValue(X,Y,true);
        v = pas.System.Trunc(this.FToValue / this.FInteraction.FFrequency) * this.FInteraction.FFrequency;
        this.FToValue = this.ClosestTo(this.FToValue,v,v + 1);
        if (this.FToValue < this.FValues.Left) {
          this.DecreaseByFrequency()}
         else if (this.FToValue > this.FValues.Left) this.EncreaseByFrequency();
        if (this.FInteraction.FRepeatClick) {
          this.CaptureEx();
          this.FRepeatTimer.SetEnabled(true);
          this.FTrackDown = true;
        };
        return;
      };
      r.$assign(this.GetMaxButtonRect());
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(r,pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        this.FPlusDown = true;
        this.CaptureEx();
        this.EncreaseByFrequency();
        this.FRepeatTimer.SetInterval(this.FInteraction.FRepeatInterval);
        this.FRepeatTimer.SetEnabled(this.FInteraction.FRepeatClick);
        this.Invalidate();
        return;
      };
      r.$assign(this.GetMinButtonRect());
      if (pas["WEBLib.TMSFNCTypes"].PtInRectEx(r,pas["WEBLib.TMSFNCTypes"].PointF(X,Y))) {
        this.FMinusDown = true;
        this.CaptureEx();
        this.DecreaseByFrequency();
        this.FRepeatTimer.SetInterval(this.FInteraction.FRepeatInterval);
        this.FRepeatTimer.SetEnabled(this.FInteraction.FRepeatClick);
      };
      this.Invalidate();
    };
    this.HandleMouseMove = function (Shift, X, Y) {
      var v = 0.0;
      $mod.TTMSFNCCustomTrackBarBase.HandleMouseMove.apply(this,arguments);
      this.FToValue = this.CalcValue(X,Y,true);
      v = pas.System.Trunc(this.FToValue / this.FInteraction.FFrequency) * this.FInteraction.FFrequency;
      this.FToValue = this.ClosestTo(this.FToValue,v,v + 1);
    };
    this.HandleKeyDown = function (Key, Shift) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleKeyDown.apply(this,arguments);
      var $tmp1 = Key.get();
      if (($tmp1 === 39) || ($tmp1 === 38)) {
        this.EncreaseByFrequency()}
       else if (($tmp1 === 40) || ($tmp1 === 37)) this.DecreaseByFrequency();
    };
    this.HandleMouseUp = function (Button, Shift, X, Y) {
      $mod.TTMSFNCCustomTrackBarBase.HandleMouseUp.apply(this,arguments);
      this.FTrackDown = false;
      this.FRepeatTimer.SetEnabled(false);
    };
    this.HandleMouseWheel = function (Shift, WheelDelta, Handled) {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControlBaseCommon.HandleMouseWheel.apply(this,arguments);
      if (WheelDelta > 0) {
        this.EncreaseByFrequency()}
       else this.DecreaseByFrequency();
    };
    this.DoValueChanged = function (AValue) {
      if (this.FOnValueChanged != null) this.FOnValueChanged(this,AValue);
    };
    this.DoRepeatTimer = function (Sender) {
      if (this.FPlusDown || (this.FTrackDown && (this.FToValue > this.FValues.Left))) {
        this.EncreaseByFrequency()}
       else if (this.FMinusDown || (this.FTrackDown && (this.FToValue < this.FValues.Left))) this.DecreaseByFrequency();
    };
    this.DoValuesChanged = function (AValue, ALeft) {
      $mod.TTMSFNCCustomTrackBarBase.DoValuesChanged.apply(this,arguments);
      if (ALeft) this.DoValueChanged(AValue);
    };
    this.TrackInteractionChange = function (Sender) {
      this.FInteraction.Assign(this.FTrackInteraction);
    };
    this.TrackAppearanceChange = function (Sender) {
      this.FAppearance.Assign(this.FTrackAppearance);
    };
    this.GetMaxOfThumbAndTrackRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var m = 0;
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var cp = 0.0;
      r.$assign(this.GetTrackLineDrawRect(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(this.GetTrackLineRect())));
      m = Math.max(this.FAppearance.FThumbHeight,this.FAppearance.FLineWidth);
      var $tmp1 = this.FAppearance.FOrientation;
      if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
        cp = r.Top + (this.FAppearance.FLineWidth / 2);
        Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(r.Left,cp - (m / 2),r.Right,cp + (m / 2)));
      } else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) {
        cp = r.Left + (this.FAppearance.FLineWidth / 2);
        Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cp - (m / 2),r.Top,cp + (m / 2),r.Bottom));
      };
      return Result;
    };
    this.GetMaxButtonRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var cr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var l = 0.0;
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      cr.$assign(this.GetContentRect());
      if (this.FAppearance.FButtonShape !== $mod.TTMSFNCTrackBarAppearanceButtonShape.bsNone) {
        var $tmp1 = this.FAppearance.FOrientation;
        if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
          r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Right - this.FAppearance.FButtonSize,cr.Top,cr.Right,cr.Bottom));
          l = r.Bottom - r.Top;
          pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,0,(l - this.FAppearance.FButtonSize) / -2);
        } else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) {
          r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Top,cr.Right,cr.Top + this.FAppearance.FButtonSize));
          l = r.Right - r.Left;
          pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,(l - this.FAppearance.FButtonSize) / -2,0);
        };
      };
      Result.$assign(r);
      return Result;
    };
    this.GetMinButtonRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var cr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var l = 0.0;
      r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(0,0,0,0));
      cr.$assign(this.GetContentRect());
      if (this.FAppearance.FButtonShape !== $mod.TTMSFNCTrackBarAppearanceButtonShape.bsNone) {
        var $tmp1 = this.FAppearance.FOrientation;
        if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
          r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Top,cr.Left + this.FAppearance.FButtonSize,cr.Bottom));
          l = r.Bottom - r.Top;
          pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,0,(l - this.FAppearance.FButtonSize) / -2);
        } else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) {
          r.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Bottom - this.FAppearance.FButtonSize,cr.Right,cr.Bottom));
          l = r.Right - r.Left;
          pas["WEBLib.TMSFNCTypes"].InflateRectEx(r,(l - this.FAppearance.FButtonSize) / -2,0);
        };
      };
      Result.$assign(r);
      return Result;
    };
    this.GetThumbWidth = function () {
      var Result = 0.0;
      Result = this.FAppearance.FThumbWidth;
      return Result;
    };
    this.GetTrackLineRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign($mod.TTMSFNCCustomTrackBarBase.GetTrackLineRect.call(this));
      if (this.FAppearance.FButtonShape !== $mod.TTMSFNCTrackBarAppearanceButtonShape.bsNone) {
        var $tmp1 = this.FAppearance.FOrientation;
        if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
          pas["WEBLib.TMSFNCTypes"].InflateRectEx(Result,-this.FAppearance.FButtonSpacing,0)}
         else if ($tmp1 === $mod.TTMSFNCCustomTrackBarOrientation.tboVertical) pas["WEBLib.TMSFNCTypes"].InflateRectEx(Result,0,-this.FAppearance.FButtonSpacing);
      };
      return Result;
    };
    this.Create$1 = function (AOwner) {
      $mod.TTMSFNCCustomTrackBarBase.Create$1.apply(this,arguments);
      this.SetWidth(150);
      this.SetHeight(35);
      this.FValues.Left = 0.0;
      this.FValues.Right = this.FMax;
      this.FTrackInteraction = $mod.TTMSFNCCustomTrackBarInteraction.$create("Create$1",[this]);
      this.FTrackInteraction.FOnChange = rtl.createCallback(this,"TrackInteractionChange");
      this.FTrackAppearance = $mod.TTMSFNCCustomTrackBarAppearance.$create("Create$1",[this]);
      this.FTrackAppearance.FOnChange = rtl.createCallback(this,"TrackAppearanceChange");
      this.FRepeatTimer = pas["WEBLib.ExtCtrls"].TTimer.$create("Create$1",[this]);
      this.FRepeatTimer.SetInterval(this.FInteraction.FRepeatInterval);
      this.FRepeatTimer.SetEnabled(false);
      this.FRepeatTimer.FOnTimer = rtl.createCallback(this,"DoRepeatTimer");
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FTrackAppearance");
      rtl.free(this,"FTrackInteraction");
      rtl.free(this,"FRepeatTimer");
      $mod.TTMSFNCCustomTrackBarBase.Destroy.call(this);
    };
    this.DecreaseByFrequency = function () {
      var minv = 0.0;
      minv = this.FValues.Left - this.FInteraction.FFrequency;
      if (minv < this.FMin) minv = this.FMin;
      if (this.FValues.Left !== minv) {
        this.FValues.Left = minv;
        this.DoValuesChanged(this.FValues.Left,true);
        this.DoChanged();
      };
    };
    this.EncreaseByFrequency = function () {
      var maxv = 0.0;
      maxv = this.FValues.Left + this.FInteraction.FFrequency;
      if (maxv > this.FMax) maxv = this.FMax;
      if (this.FValues.Left !== maxv) {
        this.FValues.Left = maxv;
        this.DoValuesChanged(this.FValues.Left,true);
        this.DoChanged();
      };
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCTrackBar",$mod.TTMSFNCCustomTrackBar,function () {
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Appearance",2,$mod.$rtti["TTMSFNCCustomTrackBarAppearance"],"FTrackAppearance","SetTrackAppearance");
    $r.addProperty("Interaction",2,$mod.$rtti["TTMSFNCCustomTrackBarInteraction"],"FTrackInteraction","SetTrackInteraction");
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
    $r.addProperty("Max",14,rtl.double,"FMax","SetMax",{stored: "IsMaxStored"});
    $r.addProperty("Min",14,rtl.double,"FMin","SetMin",{stored: "IsMinStored"});
    $r.addProperty("Value",15,rtl.double,"GetValue","SetValue",{stored: "IsValueStored"});
    $r.addProperty("OnChanged",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChanged","FOnChanged");
    $r.addProperty("OnBeforeDrawButton",0,$mod.$rtti["TTMSFNCCustomTrackBarBaseBeforeDrawButtonEvent"],"FOnBeforeDrawButton","FOnBeforeDrawButton");
    $r.addProperty("OnAfterDrawButton",0,$mod.$rtti["TTMSFNCCustomTrackBarBaseAfterDrawButtonEvent"],"FOnAfterDrawButton","FOnAfterDrawButton");
    $r.addProperty("OnBeforeDrawTrackLine",0,$mod.$rtti["TTMSFNCCustomTrackBarBaseBeforeDrawTrackLine"],"FOnBeforeDrawTrackLine","FOnBeforeDrawTrackLine");
    $r.addProperty("OnAfterDrawTrackLine",0,$mod.$rtti["TTMSFNCCustomTrackBarBaseAfterDrawTrackLine"],"FOnAfterDrawTrackLine","FOnAfterDrawTrackLine");
    $r.addProperty("OnBeforeDrawTickMarks",0,$mod.$rtti["TTMSFNCCustomTrackBarBaseBeforeDrawTickMarks"],"FOnBeforeDrawTickMarks","FOnBeforeDrawTickMarks");
    $r.addProperty("OnAfterDrawTickMarks",0,$mod.$rtti["TTMSFNCCustomTrackBarBaseAfterDrawTickMarks"],"FOnAfterDrawTickMarks","FOnAfterDrawTickMarks");
    $r.addProperty("OnBeforeDrawTickLabel",0,$mod.$rtti["TTMSFNCCustomTrackBarBaseBeforeDrawTickLabel"],"FOnBeforeDrawTickLabel","FOnBeforeDrawTickLabel");
    $r.addProperty("OnAfterDrawTickLabel",0,$mod.$rtti["TTMSFNCCustomTrackBarBaseAfterDrawTickLabel"],"FOnAfterDrawTickLabel","FOnAfterDrawTickLabel");
    $r.addProperty("OnBeforeDrawTrackLabel",0,$mod.$rtti["TTMSFNCCustomTrackBarBaseBeforeDrawTrackLabel"],"FOnBeforeDrawTrackLabel","FOnBeforeDrawTrackLabel");
    $r.addProperty("OnAfterDrawTrackLabel",0,$mod.$rtti["TTMSFNCCustomTrackBarBaseAfterDrawTrackLabel"],"FOnAfterDrawTrackLabel","FOnAfterDrawTrackLabel");
    $r.addProperty("OnBeforeDrawThumb",0,$mod.$rtti["TTMSFNCCustomTrackBarBeforeDrawThumbEvent"],"FOnBeforeDrawThumb","FOnBeforeDrawThumb");
    $r.addProperty("OnAfterDrawThumb",0,$mod.$rtti["TTMSFNCCustomTrackBarAfterDrawThumbEvent"],"FOnAfterDrawThumb","FOnAfterDrawThumb");
    $r.addProperty("OnValueChanged",0,$mod.$rtti["TTMSFNCCustomTrackBarValueChangedEvent"],"FOnValueChanged","FOnValueChanged");
  });
  this.SLIDERLINESPACING = 4;
  this.SLIDERLINEROUNDING = 3;
},["SysUtils","Math"]);
rtl.module("WEBLib.TMSFNCSpinEdit",["System","Classes","Types","WEBLib.Controls","WEBLib.ExtCtrls","WEBLib.TMSFNCCustomControl","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCTypes","WEBLib.TMSFNCGraphicsTypes","WEBLib.TMSFNCEdit","WEBLib.TMSFNCStyles","WEBLib.TMSFNCTrackBar"],function () {
  "use strict";
  var $mod = this;
  this.MAJ_VER = 1;
  this.MIN_VER = 0;
  this.REL_VER = 0;
  this.BLD_VER = 3;
  rtl.createClass($mod,"TTMSFNCCustomSpinEditAppearance",pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBarBaseAppearance,function () {
    var $r = this.$rtti;
    $r.addProperty("ButtonSize",2,rtl.longint,"FButtonSize","SetButtonSize",{Default: 20});
    $r.addProperty("ButtonFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FButtonFill","SetButtonFill");
    $r.addProperty("ButtonSpacing",2,rtl.longint,"FButtonSpacing","SetButtonSpacing",{Default: 2});
    $r.addProperty("ButtonDownFill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FButtonDownFill","SetButtonDownFill");
    $r.addProperty("ButtonDownStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FButtonDownStroke","SetButtonDownStroke");
    $r.addProperty("ButtonStroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FButtonStroke","SetButtonStroke");
    $r.addProperty("ButtonShape",2,pas["WEBLib.TMSFNCTrackBar"].$rtti["TTMSFNCTrackBarAppearanceButtonShape"],"FButtonShape","SetButtonShape",{Default: pas["WEBLib.TMSFNCTrackBar"].TTMSFNCTrackBarAppearanceButtonShape.bsNone});
    $r.addProperty("MinButtonBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FMinButtonBitmap","SetMinButtonBitmap");
    $r.addProperty("MinButtonDownBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FMinButtonDownBitmap","SetMinButtonDownBitmap");
    $r.addProperty("PlusButtonBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FPlusButtonBitmap","SetPlusButtonBitmap");
    $r.addProperty("PlusButtonDownBitmap",2,pas["WEBLib.TMSFNCTypes"].$rtti["TTMSFNCBitmap"],"FPlusButtonDownBitmap","SetPlusButtonDownBitmap");
    $r.addProperty("ValueFont",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFont"],"FValueFont","SetValueFont");
    $r.addProperty("Orientation",2,pas["WEBLib.TMSFNCTrackBar"].$rtti["TTMSFNCCustomTrackBarOrientation"],"FOrientation","SetOrientation",{Default: pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBarOrientation.tboHorizontal});
  });
  rtl.createClass($mod,"TTMSFNCCustomSpinEditInteraction",pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBarBaseInteraction,function () {
    var $r = this.$rtti;
    $r.addProperty("Frequency",14,rtl.double,"FFrequency","SetFrequency",{stored: "IsFrequencyStored"});
    $r.addProperty("Editable",2,rtl.boolean,"FEditable","SetEditable",{Default: true});
    $r.addProperty("RepeatClick",2,rtl.boolean,"FRepeatClick","SetRepeatClick",{Default: false});
    $r.addProperty("RepeatInterval",2,rtl.longint,"FRepeatInterval","SetRepeatInterval",{Default: 100});
  });
  $mod.$rtti.$MethodVar("TTMSFNCCustomSpinEditBeforeDrawValueEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double],["AAllow",rtl.boolean,1],["ADefaultDraw",rtl.boolean,1]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TTMSFNCCustomSpinEditAfterDrawValueEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AGraphics",pas["WEBLib.TMSFNCGraphics"].$rtti["TTMSFNCGraphics"]],["ARect",pas["WEBLib.TMSFNCTypes"].$rtti["TRectF"]],["AValue",rtl.double]]), methodkind: 0});
  rtl.createClass($mod,"TTMSFNCCustomSpinEdit",pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBar,function () {
    this.$init = function () {
      pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBar.$init.call(this);
      this.FEdit = null;
      this.FSpinAppearance = null;
      this.FSpinInteraction = null;
      this.FOnBeforeDrawValue = null;
      this.FOnAfterDrawValue = null;
    };
    this.$final = function () {
      this.FEdit = undefined;
      this.FSpinAppearance = undefined;
      this.FSpinInteraction = undefined;
      this.FOnBeforeDrawValue = undefined;
      this.FOnAfterDrawValue = undefined;
      pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBar.$final.call(this);
    };
    this.SetSpinAppearance = function (AValue) {
      this.FSpinAppearance.Assign(AValue);
    };
    this.SetSpinInteraction = function (AValue) {
      this.FSpinInteraction.Assign(AValue);
    };
    this.SetEditFieldPrecision = function (AValue) {
      if (this.FEdit != null) this.FEdit.SetPrecision(AValue);
    };
    this.SetEditFieldPrecisionDisplay = function (AValue) {
      if (this.FEdit != null) this.FEdit.SetPrecisionDisplay(AValue);
    };
    this.GetEditFieldPrecision = function () {
      var Result = 0;
      Result = 0;
      if (this.FEdit != null) Result = this.FEdit.FPrecision;
      return Result;
    };
    this.GetEditFieldPrecisionDisplay = function () {
      var Result = 0;
      Result = pas["WEBLib.TMSFNCEdit"].TTMSFNCEditPrecisionDisplay.pdNormal;
      if (this.FEdit != null) Result = this.FEdit.FPrecisionDisplay;
      return Result;
    };
    this.UpdateControlAfterResize = function () {
      pas["WEBLib.TMSFNCCustomControl"].TTMSFNCCustomControl.UpdateControlAfterResize.call(this);
      if (this.FEdit != null) {
        this.UpdateEditField();
      };
    };
    this.Loaded = function () {
      pas["WEBLib.Controls"].TCustomControl.Loaded.call(this);
      this.UpdateEditField();
    };
    this.Draw = function (AGraphics, ARect) {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBarBase.Draw.apply(this,arguments);
      r.$assign(this.GetTrackLineRect());
      if (this.FSpinInteraction.FEditable) {
        if (this.IsExporting()) this.DrawValueText(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
      } else this.DrawValueText(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
    };
    this.DrawTrackLine = function (AGraphics, ARect) {
    };
    this.DrawTrackSliders = function (AGraphics, ARect) {
    };
    this.ResizeEditField = function (ARect) {
      this.FEdit.FFont.Assign(this.FSpinAppearance.FValueFont);
      this.FEdit.SetLeft(Math.round(ARect.Left));
      this.FEdit.SetWidth(Math.round(ARect.Right - ARect.Left));
      var $tmp1 = this.FSpinAppearance.FButtonShape;
      if ($tmp1 === pas["WEBLib.TMSFNCTrackBar"].TTMSFNCTrackBarAppearanceButtonShape.bsRounded) {
        this.FEdit.SetHeight(this.FSpinAppearance.FButtonSize);
        this.FEdit.SetTop(Math.round(ARect.Top + ((ARect.Bottom - ARect.Top - this.FEdit.GetHeight()) / 2)));
      } else if ($tmp1 === pas["WEBLib.TMSFNCTrackBar"].TTMSFNCTrackBarAppearanceButtonShape.bsRectangle) {
        this.FEdit.SetTop(Math.round(ARect.Top));
        this.FEdit.SetHeight(Math.round(ARect.Bottom - ARect.Top));
      };
      this.FEdit.SetVisible(true);
    };
    this.DrawValueText = function (AGraphics, ARect) {
      var b = false;
      var df = false;
      var s = "";
      s = pas.SysUtils.Format("%g",[this.FEdit.GetFloat()]);
      AGraphics.FFont.AssignSource(this.FSpinAppearance.FValueFont);
      b = true;
      df = true;
      this.DoBeforeDrawValue(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),pas.SysUtils.StrToFloat(s),{get: function () {
          return b;
        }, set: function (v) {
          b = v;
        }},{get: function () {
          return df;
        }, set: function (v) {
          df = v;
        }});
      if (b) {
        if (df) AGraphics.DrawText$1(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),s,false,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextAlign.gtaCenter,pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsTextTrimming.gttNone,0,-1,-1,true,false,-1,-1);
        this.DoAfterDrawValue(AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),pas.SysUtils.StrToFloat(s));
      };
      this.FEdit.SetVisible(false);
    };
    this.DoBeforeDrawValue = function (AGraphics, ARect, AValue, AAllow, ADefaultDraw) {
      if (this.FOnBeforeDrawValue != null) this.FOnBeforeDrawValue(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AValue,AAllow,ADefaultDraw);
    };
    this.DoAfterDrawValue = function (AGraphics, ARect, AValue) {
      if (this.FOnAfterDrawValue != null) this.FOnAfterDrawValue(this,AGraphics,pas["WEBLib.TMSFNCTypes"].TRectF.$clone(ARect),AValue);
    };
    this.DoValueChanged = function (AValue) {
      pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBar.DoValueChanged.apply(this,arguments);
      this.FEdit.SetT(pas.SysUtils.FloatToStr(AValue));
    };
    this.EditKeyDown = function (Sender, Key, Shift) {
      var v = 0.0;
      if (Key.get() === 13) {
        this.EditExit(this);
        return;
      };
      if (!pas.SysUtils.TryStrToFloat(this.FEdit.GetT(),{get: function () {
          return v;
        }, set: function (w) {
          v = w;
        }})) {
        if ((this.FEdit.GetT() !== "") && (this.FEdit.GetT() !== "-")) {
          this.FValues.Left = this.FMin;
          this.DoValuesChanged(this.FValues.Left,true);
        };
      };
    };
    this.UpdateEditField = function () {
      var r = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (this.FSpinInteraction.FEditable) {
        r.$assign(this.GetTrackLineRect());
        this.ResizeEditField(pas["WEBLib.TMSFNCTypes"].TRectF.$clone(r));
      };
    };
    this.EditExit = function (Sender) {
      var v = 0.0;
      if ((this.FEdit.GetT() === "") || !pas.SysUtils.TryStrToFloat(this.FEdit.GetT(),{get: function () {
          return v;
        }, set: function (w) {
          v = w;
        }})) {
        if (this.FValues.Left !== this.FMin) {
          this.FValues.Left = this.FMin;
          this.DoValuesChanged(this.FValues.Left,true);
        } else this.FEdit.SetT(pas.SysUtils.FloatToStr(this.FMin));
      } else {
        if (this.FEdit.GetFloat() <= this.FMin) {
          if (this.FValues.Left !== this.FMin) {
            this.FValues.Left = this.FMin;
            this.DoValuesChanged(this.FValues.Left,true);
          } else this.FEdit.SetT(pas.SysUtils.FloatToStr(this.FMin));
        } else if (this.FEdit.GetFloat() >= this.FMax) {
          if (this.FValues.Left !== this.FMax) {
            this.FValues.Left = this.FMax;
            this.DoValuesChanged(this.FValues.Left,true);
          } else this.FEdit.SetT(pas.SysUtils.FloatToStr(this.FMax));
        } else {
          if (this.FValues.Left !== v) {
            this.FValues.Left = v;
            this.DoValuesChanged(this.FValues.Left,true);
          } else this.FEdit.SetT(pas.SysUtils.FloatToStr(v));
        };
      };
    };
    this.SpinInteractionChange = function (Sender) {
      this.FInteraction.Assign(this.FSpinInteraction);
      this.UpdateEditField();
      this.Invalidate();
    };
    this.SpinAppearanceChange = function (Sender) {
      this.FAppearance.Assign(this.FSpinAppearance);
      this.UpdateEditField();
      this.Invalidate();
    };
    this.GetTrackLineRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      Result.$assign(pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBar.GetTrackLineRect.call(this));
      var $tmp1 = this.FSpinAppearance.FOrientation;
      if ($tmp1 === pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
        pas["WEBLib.TMSFNCTypes"].InflateRectEx(Result,4,0)}
       else if ($tmp1 === pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBarOrientation.tboVertical) pas["WEBLib.TMSFNCTypes"].InflateRectEx(Result,0,4);
      return Result;
    };
    this.GetMaxButtonRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var cr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (this.FSpinAppearance.FButtonShape === pas["WEBLib.TMSFNCTrackBar"].TTMSFNCTrackBarAppearanceButtonShape.bsRectangle) {
        cr.$assign(this.GetContentRect());
        var $tmp1 = this.FSpinAppearance.FOrientation;
        if ($tmp1 === pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Right - this.FSpinAppearance.FButtonSize,cr.Top,cr.Right,cr.Bottom));
        } else if ($tmp1 === pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBarOrientation.tboVertical) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Top,cr.Right,cr.Top + this.FSpinAppearance.FButtonSize));
      } else Result.$assign(pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBar.GetMaxButtonRect.call(this));
      return Result;
    };
    this.GetMinButtonRect = function () {
      var Result = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      var cr = pas["WEBLib.TMSFNCTypes"].TRectF.$new();
      if (this.FSpinAppearance.FButtonShape === pas["WEBLib.TMSFNCTrackBar"].TTMSFNCTrackBarAppearanceButtonShape.bsRectangle) {
        cr.$assign(this.GetContentRect());
        var $tmp1 = this.FSpinAppearance.FOrientation;
        if ($tmp1 === pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBarOrientation.tboHorizontal) {
          cr.$assign(this.GetContentRect());
          Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Top,cr.Left + this.FSpinAppearance.FButtonSize,cr.Bottom));
        } else if ($tmp1 === pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBarOrientation.tboVertical) Result.$assign(pas["WEBLib.TMSFNCTypes"].RectF(cr.Left,cr.Bottom - this.FSpinAppearance.FButtonSize,cr.Right,cr.Bottom));
      } else Result.$assign(pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBar.GetMinButtonRect.call(this));
      return Result;
    };
    this.Create$1 = function (AOwner) {
      pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBar.Create$1.apply(this,arguments);
      this.SetWidth(100);
      this.FEdit = pas["WEBLib.TMSFNCEdit"].TTMSFNCEdit.$create("Create$1",[this]);
      this.FEdit.SetParent(this);
      this.FEdit.SetAlignment(pas.Classes.TAlignment.taCenter);
      this.FEdit.FOnKeyUp = rtl.createCallback(this,"EditKeyDown");
      this.FEdit.SetEditType$1(pas["WEBLib.TMSFNCEdit"].TTMSFNCEditType.etSignedFloat);
      this.FEdit.FOnExit = rtl.createCallback(this,"EditExit");
      this.FSpinAppearance = $mod.TTMSFNCCustomSpinEditAppearance.$create("Create$1",[this]);
      this.FSpinAppearance.FButtonStroke.SetColor(8421504);
      this.FSpinAppearance.FButtonDownStroke.SetColor(8421504);
      this.FSpinAppearance.FOnChange = rtl.createCallback(this,"SpinAppearanceChange");
      this.FSpinInteraction = $mod.TTMSFNCCustomSpinEditInteraction.$create("Create$1",[this]);
      this.FSpinInteraction.FOnChange = rtl.createCallback(this,"SpinInteractionChange");
      this.FSpinAppearance.SetButtonShape(pas["WEBLib.TMSFNCTrackBar"].TTMSFNCTrackBarAppearanceButtonShape.bsRectangle);
      this.FSpinAppearance.SetTickMarkPosition(pas["WEBLib.TMSFNCTrackBar"].TTMSFNCTrackBarAppearanceTickMarkPosition.tmpNone);
      this.UpdateEditField();
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FEdit");
      rtl.free(this,"FSpinAppearance");
      rtl.free(this,"FSpinInteraction");
      pas["WEBLib.TMSFNCTrackBar"].TTMSFNCCustomTrackBar.Destroy.call(this);
    };
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
  });
  rtl.createClass($mod,"TTMSFNCSpinEdit",$mod.TTMSFNCCustomSpinEdit,function () {
    rtl.addIntf(this,pas["WEBLib.TMSFNCGraphics"].ITMSFNCGraphicsExport);
    rtl.addIntf(this,pas["WEBLib.TMSFNCPersistence"].ITMSFNCPersistence);
    rtl.addIntf(this,pas["WEBLib.TMSFNCStyles"].ITMSFNCAdaptToStyle);
    rtl.addIntf(this,pas["WEBLib.TMSFNCTypes"].ITMSFNCProductInfo);
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Appearance",2,$mod.$rtti["TTMSFNCCustomSpinEditAppearance"],"FSpinAppearance","SetSpinAppearance");
    $r.addProperty("Interaction",2,$mod.$rtti["TTMSFNCCustomSpinEditInteraction"],"FSpinInteraction","SetSpinInteraction");
    $r.addProperty("EditFieldPrecision",3,rtl.smallint,"GetEditFieldPrecision","SetEditFieldPrecision",{Default: 0});
    $r.addProperty("EditFieldPrecisionDisplay",3,pas["WEBLib.TMSFNCEdit"].$rtti["TTMSFNCEditPrecisionDisplay"],"GetEditFieldPrecisionDisplay","SetEditFieldPrecisionDisplay",{Default: pas["WEBLib.TMSFNCEdit"].TTMSFNCEditPrecisionDisplay.pdNormal});
    $r.addProperty("Fill",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsFill"],"FFill","SetFill");
    $r.addProperty("Stroke",2,pas["WEBLib.TMSFNCGraphicsTypes"].$rtti["TTMSFNCGraphicsStroke"],"FStroke","SetStroke");
    $r.addProperty("Max",14,rtl.double,"FMax","SetMax",{stored: "IsMaxStored"});
    $r.addProperty("Min",14,rtl.double,"FMin","SetMin",{stored: "IsMinStored"});
    $r.addProperty("Value",15,rtl.double,"GetValue","SetValue",{stored: "IsValueStored"});
    $r.addProperty("OnChanged",0,pas["WEBLib.Controls"].$rtti["TNotifyEvent"],"FOnChanged","FOnChanged");
    $r.addProperty("OnBeforeDrawButton",0,pas["WEBLib.TMSFNCTrackBar"].$rtti["TTMSFNCCustomTrackBarBaseBeforeDrawButtonEvent"],"FOnBeforeDrawButton","FOnBeforeDrawButton");
    $r.addProperty("OnAfterDrawButton",0,pas["WEBLib.TMSFNCTrackBar"].$rtti["TTMSFNCCustomTrackBarBaseAfterDrawButtonEvent"],"FOnAfterDrawButton","FOnAfterDrawButton");
    $r.addProperty("OnBeforeDrawValue",0,$mod.$rtti["TTMSFNCCustomSpinEditBeforeDrawValueEvent"],"FOnBeforeDrawValue","FOnBeforeDrawValue");
    $r.addProperty("OnAfterDrawValue",0,$mod.$rtti["TTMSFNCCustomSpinEditAfterDrawValueEvent"],"FOnAfterDrawValue","FOnAfterDrawValue");
    $r.addProperty("OnValueChanged",0,pas["WEBLib.TMSFNCTrackBar"].$rtti["TTMSFNCCustomTrackBarValueChangedEvent"],"FOnValueChanged","FOnValueChanged");
  });
},["SysUtils","Math"]);
rtl.module("WEBLib.Storage",["System","Web"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TLocalStorage",pas.System.TObject,function () {
    this.SetValues = function (AKey, AValue) {
      window.localStorage.setItem(AKey,AValue);
    };
    this.GetValues = function (AKey) {
      var Result = "";
      var s = "";
      s = window.localStorage.getItem(AKey);
      if (!pas.System.Assigned(s)) {
        Result = ""}
       else Result = s;
      return Result;
    };
    this.GetKey = function (AIndex) {
      var Result = "";
      Result = window.localStorage.key(AIndex);
      return Result;
    };
    this.GetCount = function () {
      var Result = 0;
      Result = window.localStorage.length;
      return Result;
    };
    this.SetValue = function (AKey, AValue) {
      window.localStorage.setItem(AKey,AValue);
    };
    this.GetValue = function (AKey) {
      var Result = "";
      var s = "";
      s = window.localStorage.getItem(AKey);
      if (!pas.System.Assigned(s)) {
        Result = ""}
       else Result = s;
      return Result;
    };
    this.RemoveKey = function (AKey) {
      window.localStorage.removeItem(AKey);
    };
  });
  rtl.createClass($mod,"TWebLocalStorage",$mod.TLocalStorage,function () {
  });
  rtl.createClass($mod,"TSessionStorage",pas.System.TObject,function () {
    this.SetValues = function (AKey, AValue) {
      window.sessionStorage.setItem(AKey,AValue);
    };
    this.GetValues = function (AKey) {
      var Result = "";
      var s = "";
      s = window.sessionStorage.getItem(AKey);
      if (!pas.System.Assigned(s)) {
        Result = ""}
       else Result = s;
      return Result;
    };
    this.GetKey = function (AIndex) {
      var Result = "";
      Result = window.sessionStorage.key(AIndex);
      return Result;
    };
    this.GetCount = function () {
      var Result = 0;
      Result = window.sessionStorage.length;
      return Result;
    };
    this.SetValue = function (AKey, AValue) {
      window.sessionStorage.setItem(AKey,AValue);
    };
    this.GetValue = function (AKey) {
      var Result = "";
      var s = "";
      s = window.sessionStorage.getItem(AKey);
      if (!pas.System.Assigned(s)) {
        Result = ""}
       else Result = s;
      return Result;
    };
  });
  rtl.createClass($mod,"TWebSessionStorage",$mod.TSessionStorage,function () {
  });
});
rtl.module("WEBLib.REST",["System","Classes","Web","JS","SysUtils","WEBLib.JSON"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  rtl.recNewT($mod,"TJSXMLHttpRequestRecord",function () {
    this.req = null;
    this.$eq = function (b) {
      return this.req === b.req;
    };
    this.$assign = function (s) {
      this.req = s.req;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSXMLHttpRequestRecord",{});
    $r.addField("req",pas.Web.$rtti["TJSXMLHttpRequest"]);
  });
  rtl.recNewT($mod,"TJSEventRecord",function () {
    this.event = null;
    this.$eq = function (b) {
      return this.event === b.event;
    };
    this.$assign = function (s) {
      this.event = s.event;
      return this;
    };
    var $r = $mod.$rtti.$Record("TJSEventRecord",{});
    $r.addField("event",pas.Web.$rtti["TEventListenerEvent"]);
  });
  $mod.$rtti.$MethodVar("THTTPResponseEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AResponse",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("THTTPRequestResponseEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ARequest",pas.Web.$rtti["TJSXMLHttpRequest"]],["AResponse",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("THTTPAbortEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]]]), methodkind: 0});
  $mod.$rtti.$MethodVar("THTTPErrorEvent",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["ARequest",pas.Web.$rtti["TJSXMLHttpRequest"]],["Event",pas.Web.$rtti["TEventListenerEvent"]],["Handled",rtl.boolean,1]]), methodkind: 0});
  this.THTTPCommand = {"0": "httpGET", httpGET: 0, "1": "httpPOST", httpPOST: 1, "2": "httpPUT", httpPUT: 2, "3": "httpDELETE", httpDELETE: 3, "4": "httpHEAD", httpHEAD: 4, "5": "httpPATCH", httpPATCH: 5, "6": "httpCUSTOM", httpCUSTOM: 6};
  $mod.$rtti.$Enum("THTTPCommand",{minvalue: 0, maxvalue: 6, ordtype: 1, enumtype: this.THTTPCommand});
  rtl.createClass($mod,"THttpRequest",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FURL = "";
      this.FOnResponse = null;
      this.FOnAbort = null;
      this.FHeaders = null;
      this.FCommand = 0;
      this.FCustomCommand = "";
      this.FPostData = "";
      this.FOnRequestResponse = null;
      this.FPassword = "";
      this.FUser = "";
      this.FTimeout = 0;
      this.FOnTimeout = null;
      this.FOnError = null;
    };
    this.$final = function () {
      this.FOnResponse = undefined;
      this.FOnAbort = undefined;
      this.FHeaders = undefined;
      this.FOnRequestResponse = undefined;
      this.FOnTimeout = undefined;
      this.FOnError = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.HandleResponse = function (Event) {
      var Result = false;
      var s = "";
      var req = null;
      req = Event.target;
      s = Event.target.responseText;
      if (this.FOnRequestResponse != null) this.FOnRequestResponse(this,req,s);
      if (this.FOnResponse != null) this.FOnResponse(this,s);
      Result = true;
      return Result;
    };
    this.HandleAbort = function (Event) {
      var Result = false;
      if (this.FOnAbort != null) this.FOnAbort(this);
      Result = true;
      return Result;
    };
    this.HandleTimeout = function (Event) {
      var Result = false;
      if (this.FOnTimeout != null) this.FOnTimeout(this);
      Result = true;
      return Result;
    };
    this.HandleError = function (Event) {
      var Result = false;
      var Handled = false;
      Result = true;
      Handled = false;
      if (this.FOnError != null) this.FOnError(this,Event.target,Event,{get: function () {
          return Handled;
        }, set: function (v) {
          Handled = v;
        }});
      if (!Handled) throw pas.SysUtils.Exception.$create("Create$1",["HTTP request error @" + this.FURL]);
      return Result;
    };
    this.SetHeaders = function (AValue) {
      this.FHeaders.Assign(AValue);
    };
    this.Create$1 = function (AOwner) {
      pas.Classes.TComponent.Create$1.apply(this,arguments);
      this.FHeaders = pas.Classes.TStringList.$create("Create$1");
      this.FCommand = $mod.THTTPCommand.httpGET;
      this.FTimeout = 0;
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FHeaders");
      pas.Classes.TComponent.Destroy.call(this);
    };
    this.Execute = function () {
      var i = 0;
      var cmd = "";
      var req = null;
      var headname = "";
      var headvalue = "";
      req = new XMLHttpRequest();
      req.addEventListener("load",rtl.createCallback(this,"HandleResponse"));
      req.addEventListener("abort",rtl.createCallback(this,"HandleAbort"));
      req.addEventListener("timeout",rtl.createCallback(this,"HandleTimeout"));
      req.addEventListener("error",rtl.createCallback(this,"HandleError"));
      var $tmp1 = this.FCommand;
      if ($tmp1 === $mod.THTTPCommand.httpGET) {
        cmd = "GET"}
       else if ($tmp1 === $mod.THTTPCommand.httpPOST) {
        cmd = "POST"}
       else if ($tmp1 === $mod.THTTPCommand.httpPUT) {
        cmd = "PUT"}
       else if ($tmp1 === $mod.THTTPCommand.httpDELETE) {
        cmd = "DELETE"}
       else if ($tmp1 === $mod.THTTPCommand.httpHEAD) {
        cmd = "HEAD"}
       else if ($tmp1 === $mod.THTTPCommand.httpPATCH) {
        cmd = "PATCH"}
       else if ($tmp1 === $mod.THTTPCommand.httpCUSTOM) cmd = this.FCustomCommand;
      if (this.FTimeout !== 0) req.timeout = this.FTimeout;
      if (this.FUser !== "") {
        req.open(cmd,this.FURL,true,this.FUser,this.FPassword);
        req.setRequestHeader("X-Requested-With","XMLHttpRequest");
      } else req.open(cmd,this.FURL);
      for (var $l2 = 0, $end3 = this.FHeaders.GetCount() - 1; $l2 <= $end3; $l2++) {
        i = $l2;
        this.FHeaders.GetNameValue(i,{get: function () {
            return headname;
          }, set: function (v) {
            headname = v;
          }},{get: function () {
            return headvalue;
          }, set: function (v) {
            headvalue = v;
          }});
        req.setRequestHeader(headname,headvalue);
      };
      if (this.FPostData !== "") {
        req.send(this.FPostData)}
       else req.send();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("Command",0,$mod.$rtti["THTTPCommand"],"FCommand","FCommand");
    $r.addProperty("CustomCommand",0,rtl.string,"FCustomCommand","FCustomCommand");
    $r.addProperty("Headers",2,pas.Classes.$rtti["TStringList"],"FHeaders","SetHeaders");
    $r.addProperty("Password",0,rtl.string,"FPassword","FPassword");
    $r.addProperty("PostData",0,rtl.string,"FPostData","FPostData");
    $r.addProperty("Timeout",0,rtl.longint,"FTimeout","FTimeout",{Default: 0});
    $r.addProperty("URL",0,rtl.string,"FURL","FURL");
    $r.addProperty("User",0,rtl.string,"FUser","FUser");
    $r.addProperty("OnError",0,$mod.$rtti["THTTPErrorEvent"],"FOnError","FOnError");
    $r.addProperty("OnAbort",0,$mod.$rtti["THTTPAbortEvent"],"FOnAbort","FOnAbort");
    $r.addProperty("OnRequestResponse",0,$mod.$rtti["THTTPRequestResponseEvent"],"FOnRequestResponse","FOnRequestResponse");
    $r.addProperty("OnResponse",0,$mod.$rtti["THTTPResponseEvent"],"FOnResponse","FOnResponse");
    $r.addProperty("OnTimeout",0,pas.Classes.$rtti["TNotifyEvent"],"FOnTimeout","FOnTimeout");
  });
  rtl.createClass($mod,"TWebHTTPRequest",$mod.THttpRequest,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  $mod.$rtti.$MethodVar("THttpResponse",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AResponse",rtl.string]]), methodkind: 0});
  $mod.$rtti.$MethodVar("TInternalHttpResponse",{procsig: rtl.newTIProcSig([["Sender",pas.System.$rtti["TObject"]],["AResponse",rtl.string],["Handled",rtl.boolean,1]]), methodkind: 0});
  rtl.createClass($mod,"TPersistTokens",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FKey = "";
      this.FEnabled = false;
    };
    this.Create$1 = function () {
      this.FEnabled = false;
      this.FKey = "";
      return this;
    };
    this.Assign = function (Source) {
      if ($mod.TPersistTokens.isPrototypeOf(Source)) {
        this.FKey = rtl.as(Source,$mod.TPersistTokens).FKey;
        this.FEnabled = rtl.as(Source,$mod.TPersistTokens).FEnabled;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Key",0,rtl.string,"FKey","FKey");
    $r.addProperty("Enabled",0,rtl.boolean,"FEnabled","FEnabled",{Default: false});
  });
  rtl.createClass($mod,"TRESTApp",pas.Classes.TPersistent,function () {
    this.$init = function () {
      pas.Classes.TPersistent.$init.call(this);
      this.FKey = "";
      this.FCallbackURL = "";
    };
    this.Assign = function (Source) {
      if ($mod.TRESTApp.isPrototypeOf(Source)) {
        this.FKey = rtl.as(Source,$mod.TRESTApp).FKey;
        this.FCallbackURL = rtl.as(Source,$mod.TRESTApp).FCallbackURL;
      };
    };
    var $r = this.$rtti;
    $r.addProperty("Key",0,rtl.string,"FKey","FKey");
    $r.addProperty("CallbackURL",0,rtl.string,"FCallbackURL","FCallbackURL");
  });
  this.TAuthLocale = {"0": "lcDefault", lcDefault: 0, "1": "lcEnglish", lcEnglish: 1, "2": "lcDutch", lcDutch: 2, "3": "lcGerman", lcGerman: 3, "4": "lcFrench", lcFrench: 4, "5": "lcSpanish", lcSpanish: 5, "6": "lcItalian", lcItalian: 6, "7": "lcPortuguese", lcPortuguese: 7, "8": "lcGreek", lcGreek: 8, "9": "lcDanish", lcDanish: 9, "10": "lcRussian", lcRussian: 10, "11": "lcRomanian", lcRomanian: 11, "12": "lcSwedish", lcSwedish: 12, "13": "lcFinnish", lcFinnish: 13, "14": "lcTurkish", lcTurkish: 14, "15": "lcJapanese", lcJapanese: 15};
  $mod.$rtti.$Enum("TAuthLocale",{minvalue: 0, maxvalue: 15, ordtype: 1, enumtype: this.TAuthLocale});
  rtl.recNewT($mod,"TCoreCloudHeader",function () {
    this.header = "";
    this.value = "";
    this.$eq = function (b) {
      return (this.header === b.header) && (this.value === b.value);
    };
    this.$assign = function (s) {
      this.header = s.header;
      this.value = s.value;
      return this;
    };
    var $r = $mod.$rtti.$Record("TCoreCloudHeader",{});
    $r.addField("header",rtl.string);
    $r.addField("value",rtl.string);
  });
  $mod.$rtti.$DynArray("TCoreCloudHeaders",{eltype: $mod.$rtti["TCoreCloudHeader"]});
  rtl.createClass($mod,"TRESTClient",pas.Classes.TComponent,function () {
    this.$init = function () {
      pas.Classes.TComponent.$init.call(this);
      this.FAPIBase = "";
      this.FAccessToken = "";
      this.FOnAccessToken = null;
      this.FEventRegistered = false;
      this.FOnResponse = null;
      this.FPersistTokens = null;
      this.FOnHttpResponse = null;
      this.FApp = null;
      this.FScopes = null;
      this.FLocale = 0;
      this.FOnRequestResponse = null;
      this.FOnError = null;
    };
    this.$final = function () {
      this.FOnAccessToken = undefined;
      this.FOnResponse = undefined;
      this.FPersistTokens = undefined;
      this.FOnHttpResponse = undefined;
      this.FApp = undefined;
      this.FScopes = undefined;
      this.FOnRequestResponse = undefined;
      this.FOnError = undefined;
      pas.Classes.TComponent.$final.call(this);
    };
    this.SetPersistTokens = function (Value) {
      this.FPersistTokens.Assign(Value);
    };
    this.SetApp = function (Value) {
      this.FApp.Assign(Value);
    };
    this.SetScopes = function (Value) {
      this.FScopes.Assign(Value);
    };
    this.InstallCallback = function () {
      var Result = false;
      var scriptsrc = "";
      scriptsrc = " function processAuthData(access_token) {" + 'var event = new CustomEvent("oauthcallback", {\r' + "            detail: {\r" + "                 message: access_token\r" + "            },\r" + "  bubbles: true,\r" + "  cancelable: true});\r" + "  document.dispatchEvent(event);" + "}";
      var script = document.createElement("script");
          script.innerHTML = scriptsrc;
          document.head.appendChild(script);
      
          var scr = document.createElement('script');
          scr.async = true;
          scr.defer = true;
          scr.type = 'text/javascript';
          document.body.appendChild(scr);
      Result = true;
      return Result;
    };
    this.HandleAccessToken = function (s) {
      var Result = false;
      var token = "";
      token = s.detail.message;
      this.FAccessToken = token;
      this.WriteTokens();
      if (this.FOnAccessToken != null) this.FOnAccessToken(this);
      Result = true;
      return Result;
    };
    this.HandleResponse = function (Event) {
      var Result = false;
      var Response = "";
      var Handled = false;
      var req = null;
      req = Event.target;
      Response = Event.target.responseText;
      Handled = false;
      if (this.FOnHttpResponse != null) this.FOnHttpResponse(this,Response,{get: function () {
          return Handled;
        }, set: function (v) {
          Handled = v;
        }});
      if ((this.FOnRequestResponse != null) && !Handled) this.FOnRequestResponse(this,req,Response);
      if ((this.FOnResponse != null) && !Handled) this.FOnResponse(this,Response);
      Result = true;
      return Result;
    };
    this.GetAuthURL = function () {
      var Result = "";
      Result = pas.SysUtils.EmptyStr;
      return Result;
    };
    this.ScopeParamText = function (Delimiter, Encode) {
      var Result = "";
      var i = 0;
      var scopestr = "";
      Result = "";
      for (var $l1 = 0, $end2 = this.FScopes.GetCount() - 1; $l1 <= $end2; $l1++) {
        i = $l1;
        if (Encode) {
          scopestr = encodeURIComponent(this.FScopes.Get(i))}
         else scopestr = this.FScopes.Get(i);
        if (Result === "") {
          Result = scopestr}
         else Result = Result + Delimiter + scopestr;
      };
      return Result;
    };
    this.GetLocaleParam = function () {
      var Result = "";
      Result = "";
      return Result;
    };
    this.GetJSONValue = function (o, ID) {
      var Result = null;
      var js = undefined;
      var res = false;
      var jvb = false;
      Result = null;
      js = o.fjo[ID];
      res = false;
      res = (js != undefined);
      if (res) {
        if (pas.JS.isBoolean(js)) {
          jvb = js;
          if (jvb) {
            Result = pas["WEBLib.JSON"].TJSONTrue.$create("Create")}
           else Result = pas["WEBLib.JSON"].TJSONFalse.$create("Create");
        };
        Result = pas["WEBLib.JSON"].TJSONValue.$create("Create$1",[js]);
      };
      return Result;
    };
    this.GetJSONObject = function (o, ID) {
      var Result = null;
      var ro = null;
      var jv = undefined;
      jv = o.fjo[ID];
      ro = jv;
      if (rtl.isArray(ro)) {
        Result = pas["WEBLib.JSON"].TJSONArray.$create("Create$4",[ro]);
      } else {
        Result = pas["WEBLib.JSON"].TJSONObject.$create("Create$3",[ro]);
      };
      return Result;
    };
    this.ReadTokens = function () {
      var ls = null;
      if (this.FPersistTokens.FEnabled && (this.FPersistTokens.FKey !== "")) {
        ls = pas["WEBLib.Storage"].TLocalStorage.$create("Create");
        this.FAccessToken = ls.GetValues(this.FPersistTokens.FKey);
        ls = rtl.freeLoc(ls);
      };
    };
    this.WriteTokens = function () {
      var ls = null;
      if (this.FPersistTokens.FEnabled && (this.FPersistTokens.FKey !== "")) {
        ls = pas["WEBLib.Storage"].TLocalStorage.$create("Create");
        ls.SetValues(this.FPersistTokens.FKey,this.FAccessToken);
        ls = rtl.freeLoc(ls);
      };
    };
    this.TMSUTF8Encode = function (s) {
      var Result = "";
      Result = s;
      return Result;
    };
    this.HttpsCommand = function (Command, URL, Data, ContentType, headers) {
      var $Self = this;
      var i = 0;
      var req = null;
      var FRequestResponse = null;
      var FResponse = null;
      var FHttpResponse = null;
      function ResponseHandler(Event) {
        var Result = false;
        var Response = "";
        var Handled = false;
        var resp = null;
        resp = Event.target;
        Response = Event.target.responseText;
        Handled = false;
        if (FHttpResponse != null) FHttpResponse($Self,Response,{get: function () {
            return Handled;
          }, set: function (v) {
            Handled = v;
          }});
        if ((FRequestResponse != null) && !Handled) {
          FRequestResponse($Self,resp,Response);
        };
        if ((FResponse != null) && !Handled) {
          FResponse($Self,Response);
        };
        Result = true;
        return Result;
      };
      function ErrorHandler(Event) {
        var Result = false;
        var Handled = false;
        Handled = false;
        if ($Self.FOnError != null) $Self.FOnError($Self,Event.target,Event,{get: function () {
            return Handled;
          }, set: function (v) {
            Handled = v;
          }});
        if (!Handled) throw pas.SysUtils.Exception.$create("Create$1",["HTTP request error @" + URL]);
        Result = true;
        return Result;
      };
      FRequestResponse = $Self.FOnRequestResponse;
      FResponse = $Self.FOnResponse;
      FHttpResponse = $Self.FOnHttpResponse;
      req = new XMLHttpRequest();
      req.addEventListener("load",ResponseHandler);
      req.addEventListener("error",ErrorHandler);
      req.open(Command,URL,true);
      if (ContentType !== "") req.setRequestHeader("Content-Type",ContentType);
      if ($Self.FAccessToken !== "") req.setRequestHeader("Authorization","Bearer " + $Self.FAccessToken);
      if (rtl.length(headers) > 0) {
        for (var $l1 = 0, $end2 = rtl.length(headers) - 1; $l1 <= $end2; $l1++) {
          i = $l1;
          req.setRequestHeader(headers[i].header,headers[i].value);
        };
      };
      if (Data === "") {
        req.send(null)}
       else req.send(Data);
    };
    this.Create$1 = function (AOwner) {
      pas.Classes.TComponent.Create$1.apply(this,arguments);
      this.FPersistTokens = $mod.TPersistTokens.$create("Create$1");
      this.FApp = $mod.TRESTApp.$create("Create");
      this.FScopes = pas.Classes.TStringList.$create("Create$1");
      this.FLocale = $mod.TAuthLocale.lcDefault;
      return this;
    };
    this.Destroy = function () {
      rtl.free(this,"FApp");
      rtl.free(this,"FScopes");
      rtl.free(this,"FPersistTokens");
      pas.Classes.TComponent.Destroy.call(this);
    };
    this.HttpsDelete = function (URL) {
      this.HttpsCommand("DELETE",URL,"","",[]);
    };
    this.HttpsDelete$1 = function (URL, headers) {
      this.HttpsCommand("DELETE",URL,"","",headers);
    };
    this.HttpsGet = function (URL) {
      this.HttpsCommand("GET",URL,"","",[]);
    };
    this.HttpsGet$1 = function (URL, headers) {
      this.HttpsCommand("GET",URL,"","",headers);
    };
    this.HttpsPost = function (URL, Data) {
      this.HttpsPost$1(URL,Data,"");
    };
    this.HttpsPost$1 = function (URL, ContentType, Data) {
      this.HttpsCommand("POST",URL,Data,ContentType,[]);
    };
    this.HttpsPost$2 = function (URL, headers, Data) {
      this.HttpsCommand("POST",URL,Data,"",headers);
    };
    this.HttpsUpdate = function (URL, headers, Data) {
      this.HttpsCommand("PUT",URL,Data,"",headers);
    };
    this.HttpsPut = function (URL, ContentType, Data) {
      this.HttpsCommand("PUT",URL,Data,ContentType,[]);
    };
    this.URLEncode = function (URI) {
      var Result = "";
      Result = encodeURIComponent(URI);
      return Result;
    };
    this.JSONEscape = function (s) {
      var Result = "";
      Result = encodeURIComponent(s);
      return Result;
    };
    this.IsoToDateTime = function (s) {
      var Result = 0.0;
      var da = 0;
      var mo = 0;
      var ye = 0;
      var ho = 0;
      var mi = 0;
      var se = 0;
      var err = 0;
      pas.System.val$5(pas.System.Copy(s,1,4),{get: function () {
          return ye;
        }, set: function (v) {
          ye = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,6,2),{get: function () {
          return mo;
        }, set: function (v) {
          mo = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,9,2),{get: function () {
          return da;
        }, set: function (v) {
          da = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,12,2),{get: function () {
          return ho;
        }, set: function (v) {
          ho = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,15,2),{get: function () {
          return mi;
        }, set: function (v) {
          mi = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,18,2),{get: function () {
          return se;
        }, set: function (v) {
          se = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      if (ye < 1) ye = 1;
      if (mo < 1) mo = 1;
      if (da < 1) da = 1;
      Result = pas.SysUtils.EncodeDate(ye,mo,da) + pas.SysUtils.EncodeTime(ho,mi,se,0);
      return Result;
    };
    this.IsoToDateTime$1 = function (s, IsUTC) {
      var Result = 0.0;
      var da = 0;
      var mo = 0;
      var ye = 0;
      var ho = 0;
      var mi = 0;
      var se = 0;
      var HourOffset = 0;
      var MinuteOffset = 0;
      var err = 0;
      var sign = "";
      HourOffset = 0;
      MinuteOffset = 0;
      pas.System.val$5(pas.System.Copy(s,1,4),{get: function () {
          return ye;
        }, set: function (v) {
          ye = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,6,2),{get: function () {
          return mo;
        }, set: function (v) {
          mo = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,9,2),{get: function () {
          return da;
        }, set: function (v) {
          da = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,12,2),{get: function () {
          return ho;
        }, set: function (v) {
          ho = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,15,2),{get: function () {
          return mi;
        }, set: function (v) {
          mi = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,18,2),{get: function () {
          return se;
        }, set: function (v) {
          se = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      if (ye < 1) ye = 1;
      if (mo < 1) mo = 1;
      if (da < 1) da = 1;
      if (s.length > 20) {
        sign = pas.System.Copy(s,20,1);
        pas.System.val$6(pas.System.Copy(s,22,2),{get: function () {
            return HourOffset;
          }, set: function (v) {
            HourOffset = v;
          }},{get: function () {
            return err;
          }, set: function (v) {
            err = v;
          }});
        pas.System.val$6(pas.System.Copy(s,25,2),{get: function () {
            return MinuteOffset;
          }, set: function (v) {
            MinuteOffset = v;
          }},{get: function () {
            return err;
          }, set: function (v) {
            err = v;
          }});
        if (sign === "-") {
          HourOffset = HourOffset * -1;
          MinuteOffset = MinuteOffset * -1;
        };
      };
      Result = pas.SysUtils.EncodeDate(ye,mo,da) + pas.SysUtils.EncodeTime(ho,mi,se,0);
      return Result;
    };
    this.IsoToDate = function (s) {
      var Result = 0.0;
      var da = 0;
      var mo = 0;
      var ye = 0;
      var err = 0;
      pas.System.val$5(pas.System.Copy(s,1,4),{get: function () {
          return ye;
        }, set: function (v) {
          ye = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,6,2),{get: function () {
          return mo;
        }, set: function (v) {
          mo = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      pas.System.val$5(pas.System.Copy(s,9,2),{get: function () {
          return da;
        }, set: function (v) {
          da = v;
        }},{get: function () {
          return err;
        }, set: function (v) {
          err = v;
        }});
      if (ye < 1) ye = 1;
      if (mo < 1) mo = 1;
      if (da < 1) da = 1;
      Result = pas.SysUtils.EncodeDate(ye,mo,da) + pas.SysUtils.EncodeTime(0,0,0,0);
      return Result;
    };
    this.DateTimeToWL = function (dt) {
      var Result = "";
      var da = 0;
      var mo = 0;
      var ye = 0;
      var ho = 0;
      var mi = 0;
      var se = 0;
      var ms = 0;
      pas.SysUtils.DecodeDate(dt,{get: function () {
          return ye;
        }, set: function (v) {
          ye = v;
        }},{get: function () {
          return mo;
        }, set: function (v) {
          mo = v;
        }},{get: function () {
          return da;
        }, set: function (v) {
          da = v;
        }});
      pas.SysUtils.DecodeTime(dt,{get: function () {
          return ho;
        }, set: function (v) {
          ho = v;
        }},{get: function () {
          return mi;
        }, set: function (v) {
          mi = v;
        }},{get: function () {
          return se;
        }, set: function (v) {
          se = v;
        }},{get: function () {
          return ms;
        }, set: function (v) {
          ms = v;
        }});
      Result = pas.SysUtils.IntToStr(ye) + "-" + $impl.IntToZStr(mo,2) + "-" + $impl.IntToZStr(da,2) + "T" + $impl.IntToZStr(ho,2) + ":" + $impl.IntToZStr(mi,2) + ":" + $impl.IntToZStr(se,2);
      Result = Result + "+00:00";
      return Result;
    };
    this.DateTimeToDaylightSavings = function (dt) {
      var Result = 0.0;
      Result = dt;
      return Result;
    };
    this.GetJSONProp = function (O, ID) {
      var Result = "";
      Result = O.GetJSONValue(ID);
      return Result;
    };
    this.GetJSONInt = function (O, ID) {
      var Result = 0;
      var jv = undefined;
      jv = O.fjo[ID];
      if (rtl.isNumber(jv)) Result = Math.floor(jv);
      return Result;
    };
    this.DoAuth = function () {
      var URL = "";
      URL = this.GetAuthURL();
      window.open(URL, 'oauth', 'width=800,height=600,location=no,toolbar=no,menubar=no');
    };
    this.Connect = function () {
      if (!this.FEventRegistered) {
        document.addEventListener("oauthcallback",rtl.createCallback(this,"HandleAccessToken"));
        this.FEventRegistered = true;
      };
      if (this.FPersistTokens.FEnabled) {
        this.ReadTokens();
        if (this.FAccessToken !== "") {
          this.TestTokens();
        } else this.DoAuth();
      } else this.DoAuth();
    };
    this.TestTokens = function () {
      if (this.FOnAccessToken != null) this.FOnAccessToken(this);
    };
    this.ClearTokens = function () {
      this.FAccessToken = "";
      this.WriteTokens();
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addProperty("App",2,$mod.$rtti["TRESTApp"],"FApp","SetApp");
    $r.addProperty("PersistTokens",2,$mod.$rtti["TPersistTokens"],"FPersistTokens","SetPersistTokens");
    $r.addProperty("Scopes",2,pas.Classes.$rtti["TStrings"],"FScopes","SetScopes");
    $r.addProperty("OnAccessToken",0,pas.Classes.$rtti["TNotifyEvent"],"FOnAccessToken","FOnAccessToken");
    $r.addProperty("OnRequestResponse",0,$mod.$rtti["THTTPRequestResponseEvent"],"FOnRequestResponse","FOnRequestResponse");
    $r.addProperty("OnResponse",0,$mod.$rtti["THttpResponse"],"FOnResponse","FOnResponse");
    $r.addProperty("OnError",0,$mod.$rtti["THTTPErrorEvent"],"FOnError","FOnError");
  });
  rtl.createClass($mod,"TWebRESTClient",$mod.TRESTClient,function () {
    rtl.addIntf(this,pas.System.IUnknown);
  });
  this.AddHeader = function (AHeaders, Header, Value) {
    AHeaders.set(rtl.arraySetLength(AHeaders.get(),$mod.TCoreCloudHeader,rtl.length(AHeaders.get()) + 1));
    AHeaders.get()[rtl.length(AHeaders.get()) - 1].header = Header;
    AHeaders.get()[rtl.length(AHeaders.get()) - 1].value = Value;
  };
  this.GetArraySize = function (ja) {
    var Result = 0;
    Result = ja.GetCount$1();
    return Result;
  };
  this.GetArrayItem = function (ja, Index) {
    var Result = null;
    Result = ja.GetItem$1(Index);
    return Result;
  };
  $mod.$init = function () {
    $mod.TRESTClient.InstallCallback();
  };
},["WEBLib.Storage"],function () {
  "use strict";
  var $mod = this;
  var $impl = $mod.$impl;
  $impl.IntToZStr = function (i, l) {
    var Result = "";
    var Res = "";
    Res = pas.SysUtils.IntToStr(i);
    while (Res.length < l) Res = "0" + Res;
    Result = Res;
    return Result;
  };
});
rtl.module("classes.gamedata",["System"],function () {
  "use strict";
  var $mod = this;
  this.TGameState = {"0": "gsGreenRoom", gsGreenRoom: 0, "1": "gsRunning", gsRunning: 1, "2": "gsNextTurn", gsNextTurn: 2, "3": "gsGameOver", gsGameOver: 3};
  $mod.$rtti.$Enum("TGameState",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TGameState});
  rtl.recNewT($mod,"TGameData",function () {
    this.CurrentQuestion = "";
    this.SessionPassword = "";
    this.SessionName = "";
    this.LangID = "";
    this.MinUser = 0;
    this.MaxUser = 0;
    this.SessionID = "";
    this.GameState = 0;
    this.UserCount = 0;
    this.$eq = function (b) {
      return (this.CurrentQuestion === b.CurrentQuestion) && (this.SessionPassword === b.SessionPassword) && (this.SessionName === b.SessionName) && (this.LangID === b.LangID) && (this.MinUser === b.MinUser) && (this.MaxUser === b.MaxUser) && (this.SessionID === b.SessionID) && (this.GameState === b.GameState) && (this.UserCount === b.UserCount);
    };
    this.$assign = function (s) {
      this.CurrentQuestion = s.CurrentQuestion;
      this.SessionPassword = s.SessionPassword;
      this.SessionName = s.SessionName;
      this.LangID = s.LangID;
      this.MinUser = s.MinUser;
      this.MaxUser = s.MaxUser;
      this.SessionID = s.SessionID;
      this.GameState = s.GameState;
      this.UserCount = s.UserCount;
      return this;
    };
    this.ToJSON = function () {
      var Result = "";
      var JO = null;
      JO = pas["WEBLib.JSON"].TJSONObject.$create("Create$2");
      try {
        JO.AddPair(pas["WEBLib.JSON"].TJSONPair.$create("Create$3",["currentQuestion",this.CurrentQuestion]));
        JO.AddPair(pas["WEBLib.JSON"].TJSONPair.$create("Create$3",["sessionPassword",this.SessionPassword]));
        JO.AddPair(pas["WEBLib.JSON"].TJSONPair.$create("Create$3",["sessionName",this.SessionName]));
        JO.AddPair(pas["WEBLib.JSON"].TJSONPair.$create("Create$3",["langID",pas.SysUtils.LeftStr(this.LangID,2)]));
        JO.AddPair(pas["WEBLib.JSON"].TJSONPair.$create("Create$2",["minUser",pas["WEBLib.JSON"].TJSONNumber.$create("Create$3",[this.MinUser])]));
        JO.AddPair(pas["WEBLib.JSON"].TJSONPair.$create("Create$2",["maxUser",pas["WEBLib.JSON"].TJSONNumber.$create("Create$3",[this.MaxUser])]));
        JO.AddPair(pas["WEBLib.JSON"].TJSONPair.$create("Create$3",["sessionID",this.SessionID]));
        JO.AddPair(pas["WEBLib.JSON"].TJSONPair.$create("Create$2",["gameState",pas["WEBLib.JSON"].TJSONNumber.$create("Create$3",[this.GameState])]));
        JO.AddPair(pas["WEBLib.JSON"].TJSONPair.$create("Create$2",["userCount",pas["WEBLib.JSON"].TJSONNumber.$create("Create$3",[this.UserCount])]));
        Result = JO.ToJSON();
      } catch ($e) {
        if (pas.SysUtils.Exception.isPrototypeOf($e)) {
          var E = $e;
          pas["WEBLib.WebTools"].OutputDebugString('TGameData.ToJSON: Error while composing "' + E.fMessage);
        } else throw $e
      };
      return Result;
    };
    this.FromJSON = function (JSONString) {
      var Result = $mod.TGameData.$new();
      var JS = null;
      var JO = null;
      try {
        JS = pas["WEBLib.JSON"].TJSON.$create("Create");
        JO = JS.Parse(JSONString);
        Result.CurrentQuestion = JO.GetJSONValue("currentQuestion");
        Result.SessionPassword = JO.GetJSONValue("sessionPassword");
        Result.SessionName = JO.GetJSONValue("sessionName");
        Result.LangID = JO.GetJSONValue("langID");
        Result.MinUser = pas.SysUtils.StrToIntDef(JO.GetJSONValue("minUser"),0);
        Result.MaxUser = pas.SysUtils.StrToIntDef(JO.GetJSONValue("maxUser"),0);
        Result.SessionID = JO.GetJSONValue("sessionID");
        Result.GameState = pas.SysUtils.StrToIntDef(JO.GetJSONValue("gameState"),$mod.TGameState.gsGameOver);
        Result.UserCount = pas.SysUtils.StrToIntDef(JO.GetJSONValue("userCount"),0);
      } catch ($e) {
        if (pas.SysUtils.Exception.isPrototypeOf($e)) {
          var E = $e;
          pas["WEBLib.WebTools"].OutputDebugString('TGameData.FromJSON: Error while translating "' + E.fMessage);
        } else throw $e
      };
      return Result;
    };
    var $r = $mod.$rtti.$Record("TGameData",{});
    $r.addField("CurrentQuestion",rtl.string);
    $r.addField("SessionPassword",rtl.string);
    $r.addField("SessionName",rtl.string);
    $r.addField("LangID",rtl.string);
    $r.addField("MinUser",rtl.longint);
    $r.addField("MaxUser",rtl.longint);
    $r.addField("SessionID",rtl.string);
    $r.addField("GameState",$mod.$rtti["TGameState"]);
    $r.addField("UserCount",rtl.longint);
    $r.addMethod("ToJSON",1,null,rtl.string);
    $r.addMethod("FromJSON",5,[["JSONString",rtl.string,2]],$r,{flags: 1});
  },true);
  this.TPlayerState = {"0": "psInGreenRoom", psInGreenRoom: 0, "1": "psJudgeWaitingForSubmit", psJudgeWaitingForSubmit: 1, "2": "psPlayerSubmitting", psPlayerSubmitting: 2, "3": "psGameEnded", psGameEnded: 3};
  $mod.$rtti.$Enum("TPlayerState",{minvalue: 0, maxvalue: 3, ordtype: 1, enumtype: this.TPlayerState});
  rtl.recNewT($mod,"TGameUser",function () {
    this.UserName = "";
    this.PlayerState = 0;
    this.Score = 0;
    this.Deleted = false;
    this.IsCurrentUser = false;
    this.UserID = "";
    this.Name = "";
    this.GameID = "";
    this.$eq = function (b) {
      return (this.UserName === b.UserName) && (this.PlayerState === b.PlayerState) && (this.Score === b.Score) && (this.Deleted === b.Deleted) && (this.IsCurrentUser === b.IsCurrentUser) && (this.UserID === b.UserID) && (this.Name === b.Name) && (this.GameID === b.GameID);
    };
    this.$assign = function (s) {
      this.UserName = s.UserName;
      this.PlayerState = s.PlayerState;
      this.Score = s.Score;
      this.Deleted = s.Deleted;
      this.IsCurrentUser = s.IsCurrentUser;
      this.UserID = s.UserID;
      this.Name = s.Name;
      this.GameID = s.GameID;
      return this;
    };
    var $r = $mod.$rtti.$Record("TGameUser",{});
    $r.addField("UserName",rtl.string);
    $r.addField("PlayerState",$mod.$rtti["TPlayerState"]);
    $r.addField("Score",rtl.longint);
    $r.addField("Deleted",rtl.boolean);
    $r.addField("IsCurrentUser",rtl.boolean);
    $r.addField("UserID",rtl.string);
    $r.addField("Name",rtl.string);
    $r.addField("GameID",rtl.string);
  });
},["WEBLib.JSON","strutils","WEBLib.WebTools","SysUtils"]);
rtl.module("interfaces.callbacks",["System","classes.gamedata"],function () {
  "use strict";
  var $mod = this;
  $mod.$rtti.$RefToProcVar("TCreateGameCallback",{procsig: rtl.newTIProcSig([["CreatedGame",rtl.boolean,2]])});
  $mod.$rtti.$RefToProcVar("TGetGamesCallback",{procsig: rtl.newTIProcSig([["GamesFound",rtl.boolean,2]])});
  $mod.$rtti.$RefToProcVar("TGetSpecificGameCallback",{procsig: rtl.newTIProcSig([["GamesFound",rtl.boolean,2],["GameGUID",rtl.string,2]])});
  $mod.$rtti.$RefToProcVar("TGetUserCallback",{procsig: rtl.newTIProcSig([["UserFound",rtl.boolean,2],["UserName",rtl.string,2]])});
});
rtl.module("modules.clientconstants",["System"],function () {
  "use strict";
  var $mod = this;
  this.cServerURL = "https:\/\/apocalypse.chapmanworld.com\/api\/";
  this.cAPI_Games = "games";
});
rtl.module("models.gamedata",["System","classes.gamedata"],function () {
  "use strict";
  var $mod = this;
  this.CurrentGame = pas["classes.gamedata"].TGameData.$new();
});
rtl.module("modules.datamodule",["System","SysUtils","Classes","JS","Web","WEBLib.Modules","WEBLib.REST","interfaces.callbacks","classes.gamedata"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TmainDataModule",pas["WEBLib.Modules"].TDataModule,function () {
    this.$init = function () {
      pas["WEBLib.Modules"].TDataModule.$init.call(this);
      this.httpGetGames = null;
      this.BasicRequest = null;
      this.httpCreateGame = null;
      this.FGameGuid = "";
      this.FUserGuid = "";
      this.FCreateGameCallback = null;
      this.FGetGamesCallback = null;
      this.FGetSpecificGameCallback = null;
      this.FGetUserCallback = null;
    };
    this.$final = function () {
      this.httpGetGames = undefined;
      this.BasicRequest = undefined;
      this.httpCreateGame = undefined;
      this.FCreateGameCallback = undefined;
      this.FGetGamesCallback = undefined;
      this.FGetSpecificGameCallback = undefined;
      this.FGetUserCallback = undefined;
      pas["WEBLib.Modules"].TDataModule.$final.call(this);
    };
    this.httpGetGamesResponse = function (Sender, AResponse) {
      if (this.FGetGamesCallback != null) this.FGetGamesCallback(true);
      pas["WEBLib.WebTools"].OutputDebugString('httpGetGamesResponse: "' + AResponse + '"');
    };
    this.BasicRequestResponse = function (Sender, AResponse) {
      pas["WEBLib.WebTools"].OutputDebugString('BasicRequestResponse: "' + AResponse + '"');
    };
    this.httpCreateGameRequestResponse = function (Sender, ARequest, AResponse) {
      var bSuccess = false;
      if (ARequest.status === 200) {
        pas["models.gamedata"].CurrentGame.$assign(pas["classes.gamedata"].TGameData.FromJSON(AResponse));
        bSuccess = true;
      } else {
        pas["WEBLib.WebTools"].OutputDebugString('TmainDataModule.httpCreateGameRequestResponse: Error "' + AResponse + '"');
        bSuccess = false;
      };
      if (this.FCreateGameCallback != null) this.FCreateGameCallback(bSuccess);
    };
    this.LoadDFMValues = function () {
      pas["WEBLib.Modules"].TDataModule.LoadDFMValues.call(this);
      this.httpGetGames = pas["WEBLib.REST"].THttpRequest.$create("Create$1",[this]);
      this.BasicRequest = pas["WEBLib.REST"].THttpRequest.$create("Create$1",[this]);
      this.httpCreateGame = pas["WEBLib.REST"].THttpRequest.$create("Create$1",[this]);
      this.httpGetGames.BeforeLoadDFMValues();
      this.BasicRequest.BeforeLoadDFMValues();
      this.httpCreateGame.BeforeLoadDFMValues();
      try {
        this.SetName("mainDataModule");
        this.FHeight = 612;
        this.FWidth = 813;
        this.httpGetGames.SetParentComponent(this);
        this.httpGetGames.SetName("httpGetGames");
        this.httpGetGames.FHeaders.BeginUpdate();
        try {
          this.httpGetGames.FHeaders.Clear();
          this.httpGetGames.FHeaders.Add("Cache-Control=no-cache, no-store, must-revalidate");
        } finally {
          this.httpGetGames.FHeaders.EndUpdate();
        };
        this.SetEvent(this.httpGetGames,this,"OnResponse","httpGetGamesResponse");
        this.httpGetGames.SetLeft(96);
        this.httpGetGames.SetTop(24);
        this.BasicRequest.SetParentComponent(this);
        this.BasicRequest.SetName("BasicRequest");
        this.BasicRequest.FHeaders.BeginUpdate();
        try {
          this.BasicRequest.FHeaders.Clear();
          this.BasicRequest.FHeaders.Add("Cache-Control=no-cache, no-store, must-revalidate");
        } finally {
          this.BasicRequest.FHeaders.EndUpdate();
        };
        this.SetEvent(this.BasicRequest,this,"OnResponse","BasicRequestResponse");
        this.BasicRequest.SetLeft(216);
        this.BasicRequest.SetTop(24);
        this.httpCreateGame.SetParentComponent(this);
        this.httpCreateGame.SetName("httpCreateGame");
        this.httpCreateGame.FCommand = pas["WEBLib.REST"].THTTPCommand.httpPOST;
        this.httpCreateGame.FHeaders.BeginUpdate();
        try {
          this.httpCreateGame.FHeaders.Clear();
          this.httpCreateGame.FHeaders.Add("Cache-Control=no-cache, no-store, must-revalidate");
        } finally {
          this.httpCreateGame.FHeaders.EndUpdate();
        };
        this.SetEvent(this.httpCreateGame,this,"OnRequestResponse","httpCreateGameRequestResponse");
        this.httpCreateGame.SetLeft(88);
        this.httpCreateGame.SetTop(80);
      } finally {
        this.httpGetGames.AfterLoadDFMValues();
        this.BasicRequest.AfterLoadDFMValues();
        this.httpCreateGame.AfterLoadDFMValues();
      };
    };
    this.GetGames = function (TheGamesCallback) {
      var Result = false;
      this.FGetGamesCallback = TheGamesCallback;
      this.httpGetGames.FURL = pas["modules.clientconstants"].cServerURL + pas["modules.clientconstants"].cAPI_Games;
      this.httpGetGames.Execute();
      return Result;
    };
    this.CreateGame = function (TheGame, TheCreateGameCallback) {
      var Result = false;
      this.FCreateGameCallback = TheCreateGameCallback;
      this.httpCreateGame.FURL = pas["modules.clientconstants"].cServerURL + pas["modules.clientconstants"].cAPI_Games;
      this.httpCreateGame.FPostData = TheGame.ToJSON();
      this.httpCreateGame.Execute();
      return Result;
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addField("httpGetGames",pas["WEBLib.REST"].$rtti["THttpRequest"]);
    $r.addField("BasicRequest",pas["WEBLib.REST"].$rtti["THttpRequest"]);
    $r.addField("httpCreateGame",pas["WEBLib.REST"].$rtti["THttpRequest"]);
    $r.addMethod("httpGetGamesResponse",0,[["Sender",pas.System.$rtti["TObject"]],["AResponse",rtl.string]]);
    $r.addMethod("BasicRequestResponse",0,[["Sender",pas.System.$rtti["TObject"]],["AResponse",rtl.string]]);
    $r.addMethod("httpCreateGameRequestResponse",0,[["Sender",pas.System.$rtti["TObject"]],["ARequest",pas.Web.$rtti["TJSXMLHttpRequest"]],["AResponse",rtl.string]]);
  });
  this.mainDataModule = null;
},["modules.clientconstants","WEBLib.WebTools","models.gamedata"]);
rtl.module("forms.creategameform",["System","SysUtils","Variants","Classes","WEBLib.Graphics","WEBLib.Controls","WEBLib.Forms","WEBLib.Dialogs","forms.baseform","WEBLib.ExtCtrls","WEBLib.StdCtrls","WEBLib.TMSFNCTypes","WEBLib.TMSFNCUtils","WEBLib.TMSFNCGraphics","WEBLib.TMSFNCGraphicsTypes","WEBLib.TMSFNCCustomControl","WEBLib.TMSFNCTrackBar","WEBLib.TMSFNCSpinEdit"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TCreateGameForm",pas["forms.baseform"].TBaseForm,function () {
    this.$init = function () {
      pas["forms.baseform"].TBaseForm.$init.call(this);
      this.WebLabel1 = null;
      this.GameNameEdit = null;
      this.WebLabel2 = null;
      this.cbLanguages = null;
      this.WebLabel3 = null;
      this.WebLabel4 = null;
      this.PrivateGameCheckbox = null;
      this.BackButton = null;
      this.CreateButton = null;
      this.SpinMinUsers = null;
      this.SpinMaxUsers = null;
    };
    this.$final = function () {
      this.WebLabel1 = undefined;
      this.GameNameEdit = undefined;
      this.WebLabel2 = undefined;
      this.cbLanguages = undefined;
      this.WebLabel3 = undefined;
      this.WebLabel4 = undefined;
      this.PrivateGameCheckbox = undefined;
      this.BackButton = undefined;
      this.CreateButton = undefined;
      this.SpinMinUsers = undefined;
      this.SpinMaxUsers = undefined;
      pas["forms.baseform"].TBaseForm.$final.call(this);
    };
    this.BackButtonClick = function (Sender) {
      this.SetModalResult(2);
      this.Close();
    };
    this.SpinMinUsersValueChanged = function (Sender, AValue) {
      if (this.SpinMinUsers.GetValue() > this.SpinMaxUsers.GetValue()) {
        this.SpinMaxUsers.SetValue(this.SpinMinUsers.GetValue());
      };
    };
    this.SpinMaxUsersValueChanged = function (Sender, AValue) {
      if (this.SpinMaxUsers.GetValue() < this.SpinMinUsers.GetValue()) {
        this.SpinMinUsers.SetValue(this.SpinMaxUsers.GetValue());
      };
    };
    this.WebFormCreate = function (Sender) {
      this.SpinMinUsers.SetValue(3);
      this.SpinMaxUsers.SetValue(6);
    };
    this.GameNameEditChange = function (Sender) {
      this.CheckButtons();
    };
    this.GameNameEditExit = function (Sender) {
      this.CheckButtons();
    };
    this.YourNameEditChange = function (Sender) {
      this.CheckButtons();
    };
    this.YourNameEditExit = function (Sender) {
      this.CheckButtons();
    };
    this.CreateButtonClick = function (Sender) {
      var $Self = this;
      var OurGame = pas["classes.gamedata"].TGameData.$new();
      function NewGameCallback(CreatedGame) {
        if (CreatedGame) {
          pas["WEBLib.Dialogs"].ShowMessage("Game created");
        } else pas["WEBLib.Dialogs"].ShowMessage("Game not created");
      };
      OurGame.CurrentQuestion = "";
      OurGame.SessionPassword = "";
      OurGame.SessionName = $Self.GameNameEdit.GetText();
      OurGame.LangID = $Self.cbLanguages.FItems.Get($Self.cbLanguages.GetItemIndex());
      OurGame.MinUser = pas.System.Trunc($Self.SpinMinUsers.GetValue());
      OurGame.MaxUser = pas.System.Trunc($Self.SpinMaxUsers.GetValue());
      OurGame.SessionID = "";
      OurGame.GameState = pas["classes.gamedata"].TGameState.gsGreenRoom;
      OurGame.UserCount = 0;
      pas["modules.datamodule"].mainDataModule.CreateGame(pas["classes.gamedata"].TGameData.$clone(OurGame),NewGameCallback);
    };
    this.CheckButtons = function () {
      this.CreateButton.SetVisible(this.GameNameEdit.GetText().length > 0);
    };
    this.LoadDFMValues = function () {
      pas["forms.baseform"].TBaseForm.LoadDFMValues.call(this);
      this.WebLabel1 = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this]);
      this.WebLabel2 = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this]);
      this.WebLabel3 = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this]);
      this.WebLabel4 = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this]);
      this.GameNameEdit = pas["WEBLib.StdCtrls"].TEdit.$create("Create$1",[this]);
      this.cbLanguages = pas["WEBLib.StdCtrls"].TComboBox.$create("Create$1",[this]);
      this.PrivateGameCheckbox = pas["WEBLib.StdCtrls"].TCheckBox.$create("Create$1",[this]);
      this.BackButton = pas["WEBLib.StdCtrls"].TButton.$create("Create$1",[this]);
      this.CreateButton = pas["WEBLib.StdCtrls"].TButton.$create("Create$1",[this]);
      this.SpinMinUsers = pas["WEBLib.TMSFNCSpinEdit"].TTMSFNCSpinEdit.$create("Create$1",[this]);
      this.SpinMaxUsers = pas["WEBLib.TMSFNCSpinEdit"].TTMSFNCSpinEdit.$create("Create$1",[this]);
      this.BaseCenterPanel.BeforeLoadDFMValues();
      this.WebLabel1.BeforeLoadDFMValues();
      this.WebLabel2.BeforeLoadDFMValues();
      this.WebLabel3.BeforeLoadDFMValues();
      this.WebLabel4.BeforeLoadDFMValues();
      this.GameNameEdit.BeforeLoadDFMValues();
      this.cbLanguages.BeforeLoadDFMValues();
      this.PrivateGameCheckbox.BeforeLoadDFMValues();
      this.BackButton.BeforeLoadDFMValues();
      this.CreateButton.BeforeLoadDFMValues();
      this.SpinMinUsers.BeforeLoadDFMValues();
      this.SpinMaxUsers.BeforeLoadDFMValues();
      try {
        this.SetCaption("Create new game");
        this.SetEvent(this,this,"OnCreate","WebFormCreate");
        this.BaseCenterPanel.SetTop(28);
        this.WebLabel1.SetParentComponent(this.BaseCenterPanel);
        this.WebLabel1.SetName("WebLabel1");
        this.WebLabel1.SetLeft(40);
        this.WebLabel1.SetTop(24);
        this.WebLabel1.SetWidth(66);
        this.WebLabel1.SetHeight(14);
        this.WebLabel1.SetCaption("Game Name");
        this.WebLabel1.FFont.FCharset = 1;
        this.WebLabel1.FFont.SetColor(65793);
        this.WebLabel1.FFont.SetHeight(-11);
        this.WebLabel1.FFont.SetName("Arial");
        this.WebLabel1.FFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.WebLabel1.SetParentFont(false);
        this.WebLabel2.SetParentComponent(this.BaseCenterPanel);
        this.WebLabel2.SetName("WebLabel2");
        this.WebLabel2.SetLeft(414);
        this.WebLabel2.SetTop(24);
        this.WebLabel2.SetWidth(54);
        this.WebLabel2.SetHeight(14);
        this.WebLabel2.SetCaption("Language");
        this.WebLabel2.FFont.FCharset = 1;
        this.WebLabel2.FFont.SetColor(65793);
        this.WebLabel2.FFont.SetHeight(-11);
        this.WebLabel2.FFont.SetName("Arial");
        this.WebLabel2.FFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.WebLabel2.SetParentFont(false);
        this.WebLabel3.SetParentComponent(this.BaseCenterPanel);
        this.WebLabel3.SetName("WebLabel3");
        this.WebLabel3.SetLeft(40);
        this.WebLabel3.SetTop(84);
        this.WebLabel3.SetWidth(56);
        this.WebLabel3.SetHeight(14);
        this.WebLabel3.SetCaption("Min Users");
        this.WebLabel3.FFont.FCharset = 1;
        this.WebLabel3.FFont.SetColor(65793);
        this.WebLabel3.FFont.SetHeight(-11);
        this.WebLabel3.FFont.SetName("Arial");
        this.WebLabel3.FFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.WebLabel3.SetParentFont(false);
        this.WebLabel4.SetParentComponent(this.BaseCenterPanel);
        this.WebLabel4.SetName("WebLabel4");
        this.WebLabel4.SetLeft(272);
        this.WebLabel4.SetTop(84);
        this.WebLabel4.SetWidth(58);
        this.WebLabel4.SetHeight(14);
        this.WebLabel4.SetCaption("Max Users");
        this.WebLabel4.FFont.FCharset = 1;
        this.WebLabel4.FFont.SetColor(65793);
        this.WebLabel4.FFont.SetHeight(-11);
        this.WebLabel4.FFont.SetName("Arial");
        this.WebLabel4.FFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.WebLabel4.SetParentFont(false);
        this.GameNameEdit.SetParentComponent(this.BaseCenterPanel);
        this.GameNameEdit.SetName("GameNameEdit");
        this.GameNameEdit.SetLeft(40);
        this.GameNameEdit.SetTop(44);
        this.GameNameEdit.SetWidth(367);
        this.GameNameEdit.SetHeight(22);
        this.GameNameEdit.SetChildOrderEx(1);
        this.SetEvent(this.GameNameEdit,this,"OnChange","GameNameEditChange");
        this.SetEvent(this.GameNameEdit,this,"OnExit","GameNameEditExit");
        this.cbLanguages.SetParentComponent(this.BaseCenterPanel);
        this.cbLanguages.SetName("cbLanguages");
        this.cbLanguages.SetLeft(414);
        this.cbLanguages.SetTop(44);
        this.cbLanguages.SetWidth(145);
        this.cbLanguages.SetHeight(22);
        this.cbLanguages.SetText("GB\x0B");
        this.cbLanguages.SetItemIndex(0);
        this.cbLanguages.FItems.BeginUpdate();
        try {
          this.cbLanguages.FItems.Clear();
          this.cbLanguages.FItems.Add("GB\x0B");
          this.cbLanguages.FItems.Add("DE");
          this.cbLanguages.FItems.Add("FR");
          this.cbLanguages.FItems.Add("KN");
        } finally {
          this.cbLanguages.FItems.EndUpdate();
        };
        this.PrivateGameCheckbox.SetParentComponent(this.BaseCenterPanel);
        this.PrivateGameCheckbox.SetName("PrivateGameCheckbox");
        this.PrivateGameCheckbox.SetLeft(40);
        this.PrivateGameCheckbox.SetTop(197);
        this.PrivateGameCheckbox.SetWidth(465);
        this.PrivateGameCheckbox.SetHeight(22);
        this.PrivateGameCheckbox.SetCaption("&nbsp;&nbsp;&nbsp;Make game private");
        this.PrivateGameCheckbox.SetChildOrderEx(8);
        this.PrivateGameCheckbox.SetColor(-1);
        this.PrivateGameCheckbox.FFont.FCharset = 1;
        this.PrivateGameCheckbox.FFont.SetColor(65793);
        this.PrivateGameCheckbox.FFont.SetHeight(-11);
        this.PrivateGameCheckbox.FFont.SetName("Arial");
        this.PrivateGameCheckbox.FFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.PrivateGameCheckbox.SetParentFont(false);
        this.PrivateGameCheckbox.SetState(pas["WEBLib.StdCtrls"].TCheckBoxState.cbUnchecked);
        this.BackButton.SetParentComponent(this.BaseCenterPanel);
        this.BackButton.SetName("BackButton");
        this.BackButton.SetLeft(47);
        this.BackButton.SetTop(317);
        this.BackButton.SetWidth(115);
        this.BackButton.SetHeight(38);
        this.BackButton.SetCaption("Back");
        this.BackButton.SetChildOrderEx(11);
        this.BackButton.SetElementClassName("btn-warning");
        this.SetEvent(this.BackButton,this,"OnClick","BackButtonClick");
        this.CreateButton.SetParentComponent(this.BaseCenterPanel);
        this.CreateButton.SetName("CreateButton");
        this.CreateButton.SetLeft(168);
        this.CreateButton.SetTop(317);
        this.CreateButton.SetWidth(115);
        this.CreateButton.SetHeight(38);
        this.CreateButton.SetCaption("Create game");
        this.CreateButton.SetChildOrderEx(11);
        this.CreateButton.SetElementClassName("btn-success");
        this.CreateButton.SetVisible(false);
        this.SetEvent(this.CreateButton,this,"OnClick","CreateButtonClick");
        this.SpinMinUsers.SetParentComponent(this.BaseCenterPanel);
        this.SpinMinUsers.SetName("SpinMinUsers");
        this.SpinMinUsers.SetAlignWithMargins(true);
        this.SpinMinUsers.SetLeft(40);
        this.SpinMinUsers.SetTop(103);
        this.SpinMinUsers.SetWidth(169);
        this.SpinMinUsers.SetHeight(40);
        this.SpinMinUsers.FParentDoubleBuffered = false;
        this.SpinMinUsers.SetColor(15790320);
        this.SpinMinUsers.FDoubleBuffered = true;
        this.SpinMinUsers.FFont.FCharset = 1;
        this.SpinMinUsers.FFont.SetColor(65793);
        this.SpinMinUsers.FFont.SetHeight(-16);
        this.SpinMinUsers.FFont.SetName("Tahoma");
        this.SpinMinUsers.FFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.SpinMinUsers.SetParentFont(false);
        this.SpinMinUsers.SetTabOrder(5);
        this.SpinMinUsers.FSpinAppearance.SetButtonSize(50);
        this.SpinMinUsers.FSpinAppearance.FButtonDownStroke.SetColor(0);
        this.SpinMinUsers.FSpinAppearance.FButtonStroke.SetColor(0);
        this.SpinMinUsers.FSpinAppearance.FButtonStroke.SetWidth(2.000000000000000000);
        this.SpinMinUsers.FSpinAppearance.SetButtonShape(pas["WEBLib.TMSFNCTrackBar"].TTMSFNCTrackBarAppearanceButtonShape.bsRectangle);
        this.SpinMinUsers.FSpinAppearance.FValueFont.FCharset = 1;
        this.SpinMinUsers.FSpinAppearance.FValueFont.SetColor(0);
        this.SpinMinUsers.FSpinAppearance.FValueFont.SetHeight(-24);
        this.SpinMinUsers.FSpinAppearance.FValueFont.SetName("Tahoma");
        this.SpinMinUsers.FSpinAppearance.FValueFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.SpinMinUsers.FSpinInteraction.SetRepeatClick(true);
        this.SpinMinUsers.SetEditFieldPrecision(2);
        this.SpinMinUsers.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
        this.SpinMinUsers.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        this.SpinMinUsers.FStroke.SetColor(14524677);
        this.SpinMinUsers.SetMax(7.000000000000000000);
        this.SpinMinUsers.SetMin(3.000000000000000000);
        this.SpinMinUsers.SetValue(3.000000000000000000);
        this.SetEvent(this.SpinMinUsers,this,"OnValueChanged","SpinMinUsersValueChanged");
        this.SpinMaxUsers.SetParentComponent(this.BaseCenterPanel);
        this.SpinMaxUsers.SetName("SpinMaxUsers");
        this.SpinMaxUsers.SetAlignWithMargins(true);
        this.SpinMaxUsers.SetLeft(272);
        this.SpinMaxUsers.SetTop(104);
        this.SpinMaxUsers.SetWidth(169);
        this.SpinMaxUsers.SetHeight(40);
        this.SpinMaxUsers.FParentDoubleBuffered = false;
        this.SpinMaxUsers.SetColor(15790320);
        this.SpinMaxUsers.FDoubleBuffered = true;
        this.SpinMaxUsers.FFont.FCharset = 1;
        this.SpinMaxUsers.FFont.SetColor(65793);
        this.SpinMaxUsers.FFont.SetHeight(-16);
        this.SpinMaxUsers.FFont.SetName("Tahoma");
        this.SpinMaxUsers.FFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.SpinMaxUsers.SetParentFont(false);
        this.SpinMaxUsers.SetTabOrder(6);
        this.SpinMaxUsers.FSpinAppearance.SetButtonSize(50);
        this.SpinMaxUsers.FSpinAppearance.FButtonDownStroke.SetColor(0);
        this.SpinMaxUsers.FSpinAppearance.FButtonStroke.SetColor(0);
        this.SpinMaxUsers.FSpinAppearance.FButtonStroke.SetWidth(2.000000000000000000);
        this.SpinMaxUsers.FSpinAppearance.SetButtonShape(pas["WEBLib.TMSFNCTrackBar"].TTMSFNCTrackBarAppearanceButtonShape.bsRectangle);
        this.SpinMaxUsers.FSpinAppearance.FValueFont.FCharset = 1;
        this.SpinMaxUsers.FSpinAppearance.FValueFont.SetColor(0);
        this.SpinMaxUsers.FSpinAppearance.FValueFont.SetHeight(-24);
        this.SpinMaxUsers.FSpinAppearance.FValueFont.SetName("Tahoma");
        this.SpinMaxUsers.FSpinAppearance.FValueFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.SpinMaxUsers.FSpinInteraction.SetRepeatClick(true);
        this.SpinMaxUsers.SetEditFieldPrecision(2);
        this.SpinMaxUsers.FFill.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsFillKind.gfkNone);
        this.SpinMaxUsers.FStroke.SetKind(pas["WEBLib.TMSFNCGraphicsTypes"].TTMSFNCGraphicsStrokeKind.gskNone);
        this.SpinMaxUsers.FStroke.SetColor(14524677);
        this.SpinMaxUsers.SetMax(10.000000000000000000);
        this.SpinMaxUsers.SetMin(3.000000000000000000);
        this.SpinMaxUsers.SetValue(3.000000000000000000);
        this.SetEvent(this.SpinMaxUsers,this,"OnValueChanged","SpinMaxUsersValueChanged");
      } finally {
        this.BaseCenterPanel.AfterLoadDFMValues();
        this.WebLabel1.AfterLoadDFMValues();
        this.WebLabel2.AfterLoadDFMValues();
        this.WebLabel3.AfterLoadDFMValues();
        this.WebLabel4.AfterLoadDFMValues();
        this.GameNameEdit.AfterLoadDFMValues();
        this.cbLanguages.AfterLoadDFMValues();
        this.PrivateGameCheckbox.AfterLoadDFMValues();
        this.BackButton.AfterLoadDFMValues();
        this.CreateButton.AfterLoadDFMValues();
        this.SpinMinUsers.AfterLoadDFMValues();
        this.SpinMaxUsers.AfterLoadDFMValues();
      };
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addField("WebLabel1",pas["WEBLib.StdCtrls"].$rtti["TLabel"]);
    $r.addField("GameNameEdit",pas["WEBLib.StdCtrls"].$rtti["TEdit"]);
    $r.addField("WebLabel2",pas["WEBLib.StdCtrls"].$rtti["TLabel"]);
    $r.addField("cbLanguages",pas["WEBLib.StdCtrls"].$rtti["TComboBox"]);
    $r.addField("WebLabel3",pas["WEBLib.StdCtrls"].$rtti["TLabel"]);
    $r.addField("WebLabel4",pas["WEBLib.StdCtrls"].$rtti["TLabel"]);
    $r.addField("PrivateGameCheckbox",pas["WEBLib.StdCtrls"].$rtti["TCheckBox"]);
    $r.addField("BackButton",pas["WEBLib.StdCtrls"].$rtti["TButton"]);
    $r.addField("CreateButton",pas["WEBLib.StdCtrls"].$rtti["TButton"]);
    $r.addField("SpinMinUsers",pas["WEBLib.TMSFNCSpinEdit"].$rtti["TTMSFNCSpinEdit"]);
    $r.addField("SpinMaxUsers",pas["WEBLib.TMSFNCSpinEdit"].$rtti["TTMSFNCSpinEdit"]);
    $r.addMethod("BackButtonClick",0,[["Sender",pas.System.$rtti["TObject"]]]);
    $r.addMethod("SpinMinUsersValueChanged",0,[["Sender",pas.System.$rtti["TObject"]],["AValue",rtl.double]]);
    $r.addMethod("SpinMaxUsersValueChanged",0,[["Sender",pas.System.$rtti["TObject"]],["AValue",rtl.double]]);
    $r.addMethod("WebFormCreate",0,[["Sender",pas.System.$rtti["TObject"]]]);
    $r.addMethod("GameNameEditChange",0,[["Sender",pas.System.$rtti["TObject"]]]);
    $r.addMethod("GameNameEditExit",0,[["Sender",pas.System.$rtti["TObject"]]]);
    $r.addMethod("YourNameEditChange",0,[["Sender",pas.System.$rtti["TObject"]]]);
    $r.addMethod("YourNameEditExit",0,[["Sender",pas.System.$rtti["TObject"]]]);
    $r.addMethod("CreateButtonClick",0,[["Sender",pas.System.$rtti["TObject"]]]);
  });
  this.CreateGameForm = null;
},["modules.datamodule","classes.gamedata"]);
rtl.module("forms.welcome",["System","SysUtils","Variants","Classes","WEBLib.Graphics","WEBLib.Controls","WEBLib.Forms","WEBLib.Dialogs","forms.baseform","WEBLib.ExtCtrls","WEBLib.StdCtrls","WEBLib.Imaging.jpeg"],function () {
  "use strict";
  var $mod = this;
  rtl.createClass($mod,"TWelcomeForm",pas["forms.baseform"].TBaseForm,function () {
    this.$init = function () {
      pas["forms.baseform"].TBaseForm.$init.call(this);
      this.StartButton = null;
      this.JoinGameButton = null;
      this.WebImageControl1 = null;
      this.WebPanel1 = null;
      this.WebLabel5 = null;
      this.YourNameEdit = null;
      this.bgPanel = null;
    };
    this.$final = function () {
      this.StartButton = undefined;
      this.JoinGameButton = undefined;
      this.WebImageControl1 = undefined;
      this.WebPanel1 = undefined;
      this.WebLabel5 = undefined;
      this.YourNameEdit = undefined;
      this.bgPanel = undefined;
      pas["forms.baseform"].TBaseForm.$final.call(this);
    };
    this.StartButtonClick = function (Sender) {
      var $Self = this;
      var TheForm = null;
      function AfterCreate(AForm) {
      };
      function AfterShowModal(AValue) {
        if (AValue === 2) {
          pas["WEBLib.Dialogs"].ShowMessage("You canceled the game");
        };
      };
      TheForm = pas["forms.creategameform"].TCreateGameForm.$create("CreateNew$3",[AfterCreate]);
      TheForm.ShowModal$1(AfterShowModal);
    };
    this.JoinGameButtonClick = function (Sender) {
      var $Self = this;
      function GetGamesCallbackClient(GamesFound) {
      };
      pas["modules.datamodule"].mainDataModule.GetGames(GetGamesCallbackClient);
    };
    this.WebFormResize = function (Sender) {
      this.BaseCenterPanel.SetLeft(Math.floor((this.GetWidth() - this.BaseCenterPanel.GetWidth()) / 2));
    };
    this.LoadDFMValues = function () {
      pas["forms.baseform"].TBaseForm.LoadDFMValues.call(this);
      this.WebImageControl1 = pas["WEBLib.ExtCtrls"].TImageControl.$create("Create$1",[this]);
      this.WebPanel1 = pas["WEBLib.ExtCtrls"].TPanel.$create("Create$1",[this]);
      this.bgPanel = pas["WEBLib.ExtCtrls"].TPanel.$create("Create$1",[this]);
      this.WebLabel5 = pas["WEBLib.StdCtrls"].TLabel.$create("Create$1",[this]);
      this.JoinGameButton = pas["WEBLib.StdCtrls"].TButton.$create("Create$1",[this]);
      this.StartButton = pas["WEBLib.StdCtrls"].TButton.$create("Create$1",[this]);
      this.YourNameEdit = pas["WEBLib.StdCtrls"].TEdit.$create("Create$1",[this]);
      this.BaseCenterPanel.BeforeLoadDFMValues();
      this.WebImageControl1.BeforeLoadDFMValues();
      this.WebPanel1.BeforeLoadDFMValues();
      this.bgPanel.BeforeLoadDFMValues();
      this.WebLabel5.BeforeLoadDFMValues();
      this.JoinGameButton.BeforeLoadDFMValues();
      this.StartButton.BeforeLoadDFMValues();
      this.YourNameEdit.BeforeLoadDFMValues();
      try {
        this.SetCaption("WelcomeForm");
        this.SetColor(4210688);
        this.SetEvent(this,this,"OnResize","WebFormResize");
        this.BaseCenterPanel.SetBorderStyle(pas["WEBLib.Controls"].TBorderStyle.bsNone);
        this.BaseCenterPanel.SetChildOrderEx(2);
        this.BaseCenterPanel.SetColor(16772810);
        this.WebImageControl1.SetParentComponent(this.BaseCenterPanel);
        this.WebImageControl1.SetName("WebImageControl1");
        this.WebImageControl1.SetLeft(0);
        this.WebImageControl1.SetTop(42);
        this.WebImageControl1.SetWidth(577);
        this.WebImageControl1.SetHeight(367);
        this.WebImageControl1.SetAlign(pas["WEBLib.Controls"].TAlign.alClient);
        this.WebImageControl1.SetChildOrderEx(3);
        this.WebImageControl1.FPicture.LoadFromFile("forms.welcome.BaseCenterPanel.WebImageControl1.Picture.jpg");
        this.WebPanel1.SetParentComponent(this.BaseCenterPanel);
        this.WebPanel1.SetName("WebPanel1");
        this.WebPanel1.SetLeft(0);
        this.WebPanel1.SetTop(0);
        this.WebPanel1.SetWidth(577);
        this.WebPanel1.SetHeight(42);
        this.WebPanel1.SetElementClassName("bg-warning font-weight-bold");
        this.WebPanel1.SetAlign(pas["WEBLib.Controls"].TAlign.alTop);
        this.WebPanel1.SetBorderColor(12632256);
        this.WebPanel1.SetBorderStyle(pas["WEBLib.Controls"].TBorderStyle.bsNone);
        this.WebPanel1.SetCaption("<h5>Apocalypse Coding Group<\/h5>");
        this.WebPanel1.SetChildOrderEx(3);
        this.WebPanel1.SetElementFont(pas["WEBLib.Controls"].TElementFont.efCSS);
        this.bgPanel.SetParentComponent(this.BaseCenterPanel);
        this.bgPanel.SetName("bgPanel");
        this.bgPanel.SetLeft(143);
        this.bgPanel.SetTop(88);
        this.bgPanel.SetWidth(292);
        this.bgPanel.SetHeight(234);
        this.bgPanel.SetElementClassName("bg-dark");
        this.bgPanel.SetBorderColor(12632256);
        this.bgPanel.SetBorderStyle(pas["WEBLib.Controls"].TBorderStyle.bsSingle);
        this.bgPanel.SetChildOrderEx(6);
        this.WebLabel5.SetParentComponent(this.bgPanel);
        this.WebLabel5.SetName("WebLabel5");
        this.WebLabel5.SetLeft(11);
        this.WebLabel5.SetTop(12);
        this.WebLabel5.SetWidth(59);
        this.WebLabel5.SetHeight(14);
        this.WebLabel5.SetAutoSize(false);
        this.WebLabel5.SetCaption("Your Name");
        this.WebLabel5.SetElementClassName("font-weight-bold text-light bg-dark");
        this.WebLabel5.SetElementFont(pas["WEBLib.Controls"].TElementFont.efCSS);
        this.WebLabel5.FFont.FCharset = 1;
        this.WebLabel5.FFont.SetColor(65793);
        this.WebLabel5.FFont.SetHeight(-11);
        this.WebLabel5.FFont.SetName("Arial");
        this.WebLabel5.FFont.SetStyle(rtl.createSet(pas["WEBLib.Graphics"].TFontStyle.fsBold));
        this.WebLabel5.SetParentFont(false);
        this.JoinGameButton.SetParentComponent(this.bgPanel);
        this.JoinGameButton.SetName("JoinGameButton");
        this.JoinGameButton.SetLeft(11);
        this.JoinGameButton.SetTop(143);
        this.JoinGameButton.SetWidth(268);
        this.JoinGameButton.SetHeight(69);
        this.JoinGameButton.SetCaption("Join a game");
        this.JoinGameButton.SetChildOrderEx(1);
        this.JoinGameButton.SetElementClassName("btn-info");
        this.JoinGameButton.FFont.FCharset = 1;
        this.JoinGameButton.FFont.SetColor(65793);
        this.JoinGameButton.FFont.SetHeight(-21);
        this.JoinGameButton.FFont.SetName("Tahoma");
        this.JoinGameButton.FFont.SetStyle({});
        this.JoinGameButton.SetParentFont(false);
        this.SetEvent(this.JoinGameButton,this,"OnClick","JoinGameButtonClick");
        this.StartButton.SetParentComponent(this.bgPanel);
        this.StartButton.SetName("StartButton");
        this.StartButton.SetLeft(10);
        this.StartButton.SetTop(62);
        this.StartButton.SetWidth(268);
        this.StartButton.SetHeight(69);
        this.StartButton.SetCaption("Start a game");
        this.StartButton.SetElementClassName("btn-primary");
        this.StartButton.FFont.FCharset = 1;
        this.StartButton.FFont.SetColor(65793);
        this.StartButton.FFont.SetHeight(-21);
        this.StartButton.FFont.SetName("Tahoma");
        this.StartButton.FFont.SetStyle({});
        this.StartButton.SetParentFont(false);
        this.SetEvent(this.StartButton,this,"OnClick","StartButtonClick");
        this.YourNameEdit.SetParentComponent(this.bgPanel);
        this.YourNameEdit.SetName("YourNameEdit");
        this.YourNameEdit.SetLeft(11);
        this.YourNameEdit.SetTop(30);
        this.YourNameEdit.SetWidth(267);
        this.YourNameEdit.SetHeight(22);
        this.YourNameEdit.SetChildOrderEx(3);
      } finally {
        this.BaseCenterPanel.AfterLoadDFMValues();
        this.WebImageControl1.AfterLoadDFMValues();
        this.WebPanel1.AfterLoadDFMValues();
        this.bgPanel.AfterLoadDFMValues();
        this.WebLabel5.AfterLoadDFMValues();
        this.JoinGameButton.AfterLoadDFMValues();
        this.StartButton.AfterLoadDFMValues();
        this.YourNameEdit.AfterLoadDFMValues();
      };
    };
    rtl.addIntf(this,pas.System.IUnknown);
    var $r = this.$rtti;
    $r.addField("StartButton",pas["WEBLib.StdCtrls"].$rtti["TButton"]);
    $r.addField("JoinGameButton",pas["WEBLib.StdCtrls"].$rtti["TButton"]);
    $r.addField("WebImageControl1",pas["WEBLib.ExtCtrls"].$rtti["TImageControl"]);
    $r.addField("WebPanel1",pas["WEBLib.ExtCtrls"].$rtti["TPanel"]);
    $r.addField("WebLabel5",pas["WEBLib.StdCtrls"].$rtti["TLabel"]);
    $r.addField("YourNameEdit",pas["WEBLib.StdCtrls"].$rtti["TEdit"]);
    $r.addField("bgPanel",pas["WEBLib.ExtCtrls"].$rtti["TPanel"]);
    $r.addMethod("StartButtonClick",0,[["Sender",pas.System.$rtti["TObject"]]]);
    $r.addMethod("JoinGameButtonClick",0,[["Sender",pas.System.$rtti["TObject"]]]);
    $r.addMethod("WebFormResize",0,[["Sender",pas.System.$rtti["TObject"]]]);
  });
  this.WelcomeForm = null;
},["WEBLib.WebTools","forms.creategameform","modules.datamodule"]);
rtl.module("program",["System","WEBLib.Forms","forms.baseform","forms.welcome","forms.creategameform","modules.datamodule","modules.clientconstants","interfaces.callbacks","classes.gamedata","models.gamedata"],function () {
  "use strict";
  var $mod = this;
  $mod.$main = function () {
    pas["WEBLib.Forms"].Application.Initialize();
    pas["WEBLib.Forms"].Application.FMainFormOnTaskBar = true;
    pas["WEBLib.Forms"].Application.CreateForm$3(pas["modules.datamodule"].TmainDataModule,{p: pas["modules.datamodule"], get: function () {
        return this.p.mainDataModule;
      }, set: function (v) {
        this.p.mainDataModule = v;
      }});
    pas["WEBLib.Forms"].Application.CreateForm(pas["forms.welcome"].TWelcomeForm,{p: pas["forms.welcome"], get: function () {
        return this.p.WelcomeForm;
      }, set: function (v) {
        this.p.WelcomeForm = v;
      }});
    pas["WEBLib.Forms"].Application.Run();
  };
});
//# sourceMappingURL=webclient.js.map
